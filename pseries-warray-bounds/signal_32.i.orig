# 1 "arch/powerpc/kernel/signal_32.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 490 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "././include/linux/compiler-version.h" 1
# 2 "<built-in>" 2
# 1 "././include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "././include/linux/kconfig.h" 2
# 3 "<built-in>" 2
# 1 "././include/linux/compiler_types.h" 1
# 65 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler_attributes.h" 1
# 66 "././include/linux/compiler_types.h" 2
# 80 "././include/linux/compiler_types.h"
# 1 "./include/linux/compiler-clang.h" 1
# 81 "././include/linux/compiler_types.h" 2
# 102 "././include/linux/compiler_types.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 4 "<built-in>" 2
# 1 "arch/powerpc/kernel/signal_32.c" 2
# 16 "arch/powerpc/kernel/signal_32.c"
# 1 "./include/linux/sched.h" 1
# 10 "./include/linux/sched.h"
# 1 "./include/uapi/linux/sched.h" 1




# 1 "./include/linux/types.h" 1





# 1 "./include/uapi/linux/types.h" 1




# 1 "./arch/powerpc/include/asm/types.h" 1
# 12 "./arch/powerpc/include/asm/types.h"
# 1 "./arch/powerpc/include/uapi/asm/types.h" 1
# 28 "./arch/powerpc/include/uapi/asm/types.h"
# 1 "./include/asm-generic/int-ll64.h" 1
# 11 "./include/asm-generic/int-ll64.h"
# 1 "./include/uapi/asm-generic/int-ll64.h" 1
# 12 "./include/uapi/asm-generic/int-ll64.h"
# 1 "./arch/powerpc/include/uapi/asm/bitsperlong.h" 1
# 11 "./arch/powerpc/include/uapi/asm/bitsperlong.h"
# 1 "./include/asm-generic/bitsperlong.h" 1




# 1 "./include/uapi/asm-generic/bitsperlong.h" 1
# 6 "./include/asm-generic/bitsperlong.h" 2
# 12 "./arch/powerpc/include/uapi/asm/bitsperlong.h" 2
# 13 "./include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "./include/asm-generic/int-ll64.h" 2




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 29 "./arch/powerpc/include/uapi/asm/types.h" 2





typedef struct {
 __u32 u[4];
} __attribute__((aligned(16))) __vector128;
# 13 "./arch/powerpc/include/asm/types.h" 2
# 24 "./arch/powerpc/include/asm/types.h"
typedef __vector128 vector128;

typedef struct {
 unsigned long entry;
 unsigned long toc;
 unsigned long env;
} func_descr_t;
# 6 "./include/uapi/linux/types.h" 2








# 1 "./include/uapi/linux/posix_types.h" 1




# 1 "./include/linux/stddef.h" 1




# 1 "./include/uapi/linux/stddef.h" 1
# 6 "./include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "./include/uapi/linux/posix_types.h" 2
# 25 "./include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "./arch/powerpc/include/uapi/asm/posix_types.h" 1
# 12 "./arch/powerpc/include/uapi/asm/posix_types.h"
typedef unsigned long __kernel_old_dev_t;






# 1 "./include/uapi/asm-generic/posix_types.h" 1
# 15 "./include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;



typedef __kernel_uid_t __kernel_old_uid_t;
typedef __kernel_gid_t __kernel_old_gid_t;
# 72 "./include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;



typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 20 "./arch/powerpc/include/uapi/asm/posix_types.h" 2
# 37 "./include/uapi/linux/posix_types.h" 2
# 15 "./include/uapi/linux/types.h" 2
# 29 "./include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "./include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 7 "./include/linux/types.h" 2






typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ulong_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;
# 46 "./include/linux/types.h"
typedef __kernel_loff_t loff_t;
# 55 "./include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 125 "./include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 143 "./include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;




typedef struct {
 s64 counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;



 unsigned long f_tinode;

 char f_fname[6];
 char f_fpack[6];
};
# 220 "./include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);

typedef void (*swap_func_t)(void *a, void *b, int size);

typedef int (*cmp_r_func_t)(const void *a, const void *b, const void *priv);
typedef int (*cmp_func_t)(const void *a, const void *b);
# 6 "./include/uapi/linux/sched.h" 2
# 92 "./include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
 __u64 __attribute__((aligned(8))) set_tid;
 __u64 __attribute__((aligned(8))) set_tid_size;
 __u64 __attribute__((aligned(8))) cgroup;
};
# 11 "./include/linux/sched.h" 2

# 1 "./arch/powerpc/include/asm/current.h" 1








struct task_struct;



# 1 "./arch/powerpc/include/asm/paca.h" 1
# 15 "./arch/powerpc/include/asm/paca.h"
# 1 "./include/linux/string.h" 1




# 1 "./include/linux/compiler.h" 1
# 248 "./include/linux/compiler.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 264 "./include/linux/compiler.h"
# 1 "./arch/powerpc/include/generated/asm/rwonce.h" 1
# 1 "./include/asm-generic/rwonce.h" 1
# 26 "./include/asm-generic/rwonce.h"
# 1 "./include/linux/kasan-checks.h" 1
# 22 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 40 "./include/linux/kasan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 27 "./include/asm-generic/rwonce.h" 2
# 1 "./include/linux/kcsan-checks.h" 1
# 151 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_check_access(const volatile void *ptr, size_t size,
     int type) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_disable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_enable_current_nowarn(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_nestable_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_begin(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_flat_atomic_end(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_atomic_next(int n) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_set_access_mask(unsigned long mask) { }

struct kcsan_scoped_access { };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kcsan_scoped_access *
kcsan_begin_scoped_access(const volatile void *ptr, size_t size, int type,
     struct kcsan_scoped_access *sa) { return sa; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_end_scoped_access(struct kcsan_scoped_access *sa) { }
# 187 "./include/linux/kcsan-checks.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_check_access(const volatile void *ptr, size_t size,
          int type) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_enable_current(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kcsan_disable_current(void) { }
# 28 "./include/asm-generic/rwonce.h" 2
# 64 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long __read_once_word_nocheck(const void *addr)
{
 return (*(const volatile typeof( _Generic((*(unsigned long *)addr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*(unsigned long *)addr))) *)&(*(unsigned long *)addr));
}
# 82 "./include/asm-generic/rwonce.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 2 "./arch/powerpc/include/generated/asm/rwonce.h" 2
# 265 "./include/linux/compiler.h" 2
# 6 "./include/linux/string.h" 2


# 1 "./include/linux/errno.h" 1




# 1 "./include/uapi/linux/errno.h" 1
# 1 "./arch/powerpc/include/uapi/asm/errno.h" 1





# 1 "./include/uapi/asm-generic/errno.h" 1




# 1 "./include/uapi/asm-generic/errno-base.h" 1
# 6 "./include/uapi/asm-generic/errno.h" 2
# 7 "./arch/powerpc/include/uapi/asm/errno.h" 2
# 2 "./include/uapi/linux/errno.h" 2
# 6 "./include/linux/errno.h" 2
# 9 "./include/linux/string.h" 2
# 1 "./include/linux/stdarg.h" 1




typedef __builtin_va_list va_list;
# 10 "./include/linux/string.h" 2
# 1 "./include/uapi/linux/string.h" 1
# 11 "./include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);




# 1 "./arch/powerpc/include/asm/string.h" 1
# 20 "./arch/powerpc/include/asm/string.h"
extern char * strcpy(char *,const char *);
extern char * strncpy(char *,const char *, __kernel_size_t);
extern __kernel_size_t strlen(const char *);
extern int strcmp(const char *,const char *);
extern int strncmp(const char *, const char *, __kernel_size_t);
extern char * strcat(char *, const char *);
extern void * memset(void *,int,__kernel_size_t);
extern void * memcpy(void *,const void *,__kernel_size_t);
extern void * memmove(void *,const void *,__kernel_size_t);
extern int memcmp(const void *,const void *,__kernel_size_t);
extern void * memchr(const void *,int,__kernel_size_t);
void memcpy_flushcache(void *dest, const void *src, size_t size);

void *__memset(void *s, int c, __kernel_size_t count);
void *__memcpy(void *to, const void *from, __kernel_size_t n);
void *__memmove(void *to, const void *from, __kernel_size_t n);
# 57 "./arch/powerpc/include/asm/string.h"
extern void *__memset16(uint16_t *, uint16_t v, __kernel_size_t);
extern void *__memset32(uint32_t *, uint32_t v, __kernel_size_t);
extern void *__memset64(uint64_t *, uint64_t v, __kernel_size_t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset16(uint16_t *p, uint16_t v, __kernel_size_t n)
{
 return __memset16(p, v, n * 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset32(uint32_t *p, uint32_t v, __kernel_size_t n)
{
 return __memset32(p, v, n * 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset64(uint64_t *p, uint64_t v, __kernel_size_t n)
{
 return __memset64(p, v, n * 8);
}
# 21 "./include/linux/string.h" 2


extern char * strcpy(char *,const char *);





size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);


extern int strcmp(const char *,const char *);





extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);


extern char * strchr(const char *,int);


extern char * strchrnul(const char *,int);

extern char * strnchrnul(const char *, size_t, int);

extern char * strnchr(const char *, size_t, int);


extern char * strrchr(const char *,int);

extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *,__kernel_size_t);


extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);
# 122 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 153 "./include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);





extern int bcmp(const void *,const void *,__kernel_size_t);
# 171 "./include/linux/string.h"
void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 199 "./include/linux/string.h"
int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((__format__(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);

int ptr_to_hashval(const void *ptr, unsigned long *hashval_out);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
# 235 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_explicit(void *s, size_t count)
{
 memset(s, 0, count);
 __asm__ __volatile__("": :"r"(s) :"memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}
# 264 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_and_pad(void *dest, size_t dest_len,
      const void *src, size_t count, int pad)
{
 if (dest_len > count) {
  memcpy(dest, src, count);
  memset(dest + count, pad, dest_len - count);
 } else
  memcpy(dest, src, dest_len);
}
# 324 "./include/linux/string.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 16 "./arch/powerpc/include/asm/paca.h" 2

# 1 "./arch/powerpc/include/asm/lppaca.h" 1
# 43 "./arch/powerpc/include/asm/lppaca.h"
# 1 "./include/linux/cache.h" 1




# 1 "./include/uapi/linux/kernel.h" 1




# 1 "./include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "./include/uapi/linux/kernel.h" 2
# 1 "./include/linux/const.h" 1



# 1 "./include/vdso/const.h" 1




# 1 "./include/uapi/linux/const.h" 1
# 6 "./include/vdso/const.h" 2
# 5 "./include/linux/const.h" 2
# 7 "./include/uapi/linux/kernel.h" 2
# 6 "./include/linux/cache.h" 2
# 1 "./arch/powerpc/include/asm/cache.h" 1
# 39 "./arch/powerpc/include/asm/cache.h"
struct ppc_cache_info {
 u32 size;
 u32 line_size;
 u32 block_size;
 u32 log_block_size;
 u32 blocks_per_page;
 u32 sets;
 u32 assoc;
};

struct ppc64_caches {
 struct ppc_cache_info l1d;
 struct ppc_cache_info l1i;
 struct ppc_cache_info l2;
 struct ppc_cache_info l3;
};

extern struct ppc64_caches ppc64_caches;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 l1_dcache_shift(void)
{
 return ppc64_caches.l1d.log_block_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 l1_dcache_bytes(void)
{
 return ppc64_caches.l1d.block_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 l1_icache_shift(void)
{
 return ppc64_caches.l1i.log_block_size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 l1_icache_bytes(void)
{
 return ppc64_caches.l1i.block_size;
}
# 114 "./arch/powerpc/include/asm/cache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dcbz(void *addr)
{
 __asm__ __volatile__ ("dcbz 0, %0" : : "r"(addr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dcbi(void *addr)
{
 __asm__ __volatile__ ("dcbi 0, %0" : : "r"(addr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dcbf(void *addr)
{
 __asm__ __volatile__ ("dcbf 0, %0" : : "r"(addr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dcbst(void *addr)
{
 __asm__ __volatile__ ("dcbst 0, %0" : : "r"(addr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void icbi(void *addr)
{
 asm volatile ("icbi 0, %0" : : "r"(addr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iccci(void *addr)
{
 asm volatile ("iccci 0, %0" : : "r"(addr) : "memory");
}
# 7 "./include/linux/cache.h" 2
# 44 "./arch/powerpc/include/asm/lppaca.h" 2
# 1 "./include/linux/threads.h" 1
# 45 "./arch/powerpc/include/asm/lppaca.h" 2

# 1 "./arch/powerpc/include/asm/mmu.h" 1







# 1 "./arch/powerpc/include/asm/asm-const.h" 1
# 9 "./arch/powerpc/include/asm/mmu.h" 2
# 147 "./arch/powerpc/include/asm/mmu.h"
# 1 "./include/linux/bug.h" 1




# 1 "./arch/powerpc/include/asm/bug.h" 1





# 1 "./arch/powerpc/include/asm/asm-compat.h" 1





# 1 "./arch/powerpc/include/asm/ppc-opcode.h" 1
# 7 "./arch/powerpc/include/asm/asm-compat.h" 2
# 7 "./arch/powerpc/include/asm/bug.h" 2
# 1 "./arch/powerpc/include/asm/extable.h" 1
# 22 "./arch/powerpc/include/asm/extable.h"
struct exception_table_entry {
 int insn;
 int fixup;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long extable_fixup(const struct exception_table_entry *x)
{
 return (unsigned long)&x->fixup + x->fixup;
}
# 8 "./arch/powerpc/include/asm/bug.h" 2
# 148 "./arch/powerpc/include/asm/bug.h"
# 1 "./include/asm-generic/bug.h" 1





# 1 "./include/linux/instrumentation.h" 1
# 7 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/once_lite.h" 1
# 8 "./include/asm-generic/bug.h" 2
# 21 "./include/asm-generic/bug.h"
# 1 "./include/linux/panic.h" 1







struct pt_regs;

extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
extern bool oops_may_print(void);


extern unsigned int sysctl_oops_all_cpu_backtrace;




extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;

extern unsigned long panic_on_taint;
extern bool panic_on_taint_nousertaint;

extern int sysctl_panic_on_rcu_stall;
extern int sysctl_max_rcu_stall_to_panic;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
# 80 "./include/linux/panic.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE,
};

extern const char *print_tainted(void);
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
# 22 "./include/asm-generic/bug.h" 2
# 1 "./include/linux/printk.h" 1





# 1 "./include/linux/init.h" 1
# 116 "./include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);
# 127 "./include/linux/init.h"
typedef initcall_t initcall_entry_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return *entry;
}


extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;
# 161 "./include/linux/init.h"
extern void (*late_time_init)(void);

extern bool initcall_debug;
# 303 "./include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 352 "./include/linux/init.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_param(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) parse_early_options(char *cmdline);
# 7 "./include/linux/printk.h" 2
# 1 "./include/linux/kern_levels.h" 1
# 8 "./include/linux/printk.h" 2
# 1 "./include/linux/linkage.h" 1





# 1 "./include/linux/stringify.h" 1
# 7 "./include/linux/linkage.h" 2
# 1 "./include/linux/export.h" 1
# 72 "./include/linux/export.h"
struct kernel_symbol {
 unsigned long value;
 const char *name;
 const char *namespace;
};
# 8 "./include/linux/linkage.h" 2
# 1 "./arch/powerpc/include/asm/linkage.h" 1
# 9 "./include/linux/linkage.h" 2
# 9 "./include/linux/printk.h" 2

# 1 "./include/linux/ratelimit_types.h" 1




# 1 "./include/linux/bits.h" 1





# 1 "./include/vdso/bits.h" 1
# 7 "./include/linux/bits.h" 2
# 22 "./include/linux/bits.h"
# 1 "./include/linux/build_bug.h" 1
# 23 "./include/linux/bits.h" 2
# 6 "./include/linux/ratelimit_types.h" 2
# 1 "./include/uapi/linux/param.h" 1




# 1 "./arch/powerpc/include/generated/uapi/asm/param.h" 1
# 1 "./include/asm-generic/param.h" 1




# 1 "./include/uapi/asm-generic/param.h" 1
# 6 "./include/asm-generic/param.h" 2
# 2 "./arch/powerpc/include/generated/uapi/asm/param.h" 2
# 6 "./include/uapi/linux/param.h" 2
# 7 "./include/linux/ratelimit_types.h" 2
# 1 "./include/linux/spinlock_types.h" 1
# 12 "./include/linux/spinlock_types.h"
# 1 "./include/linux/spinlock_types_raw.h" 1






# 1 "./arch/powerpc/include/asm/spinlock_types.h" 1
# 10 "./arch/powerpc/include/asm/spinlock_types.h"
# 1 "./include/asm-generic/qspinlock_types.h" 1
# 14 "./include/asm-generic/qspinlock_types.h"
typedef struct qspinlock {
 union {
  atomic_t val;
# 33 "./include/asm-generic/qspinlock_types.h"
  struct {
   u16 tail;
   u16 locked_pending;
  };
  struct {
   u8 reserved[2];
   u8 pending;
   u8 locked;
  };

 };
} arch_spinlock_t;
# 11 "./arch/powerpc/include/asm/spinlock_types.h" 2
# 1 "./include/asm-generic/qrwlock_types.h" 1





# 1 "./arch/powerpc/include/uapi/asm/byteorder.h" 1
# 14 "./arch/powerpc/include/uapi/asm/byteorder.h"
# 1 "./include/linux/byteorder/big_endian.h" 1




# 1 "./include/uapi/linux/byteorder/big_endian.h" 1
# 13 "./include/uapi/linux/byteorder/big_endian.h"
# 1 "./include/linux/swab.h" 1




# 1 "./include/uapi/linux/swab.h" 1







# 1 "./arch/powerpc/include/asm/swab.h" 1






# 1 "./arch/powerpc/include/uapi/asm/swab.h" 1
# 8 "./arch/powerpc/include/asm/swab.h" 2
# 9 "./include/uapi/linux/swab.h" 2
# 48 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x000000ffUL) << 24) | (((__u32)(val) & (__u32)0x0000ff00UL) << 8) | (((__u32)(val) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(val) & (__u32)0xff000000UL) >> 24)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{







 return ((__u64)( (((__u64)(val) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(val) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(val) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(val) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(val) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(val) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(val) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(val) & (__u64)0xff00000000000000ULL) >> 56)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __swab(const unsigned long y)
{

 return (__u64)__builtin_bswap64((__u64)(y));



}
# 171 "./include/uapi/linux/swab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__u16)__builtin_bswap16((__u16)(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__u32)__builtin_bswap32((__u32)(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__u64)__builtin_bswap64((__u64)(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "./include/linux/swab.h" 2
# 14 "./include/uapi/linux/byteorder/big_endian.h" 2
# 44 "./include/uapi/linux/byteorder/big_endian.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)__swab64p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)__swab32p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)__swab16p(p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return __swab16p((__u16 *)p);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)*p;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return ( __u16)*p;
}
# 6 "./include/linux/byteorder/big_endian.h" 2





# 1 "./include/linux/byteorder/generic.h" 1
# 144 "./include/linux/byteorder/generic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)__builtin_bswap16((__u16)(((__u16)__builtin_bswap16((__u16)(( __u16)(__le16)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)__builtin_bswap32((__u32)(((__u32)__builtin_bswap32((__u32)(( __u32)(__le32)(*var))) + val))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)__builtin_bswap64((__u64)(((__u64)__builtin_bswap64((__u64)(( __u64)(__le64)(*var))) + val))));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  __swab32s((buf));
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  __swab32s((buf));
  buf++;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__u16)((( __u16)(__be16)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__u32)((( __u32)(__be32)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__u64)((( __u64)(__be64)(*var)) + val));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__u32)(src[i]));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __u32)(__be32)(src[i]));
}
# 12 "./include/linux/byteorder/big_endian.h" 2
# 15 "./arch/powerpc/include/uapi/asm/byteorder.h" 2
# 7 "./include/asm-generic/qrwlock_types.h" 2
# 1 "./arch/powerpc/include/asm/spinlock_types.h" 1
# 8 "./include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 union {
  atomic_t cnts;
  struct {




   u8 __lstate[3];
   u8 wlocked;

  };
 };
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 12 "./arch/powerpc/include/asm/spinlock_types.h" 2
# 8 "./include/linux/spinlock_types_raw.h" 2




# 1 "./include/linux/lockdep_types.h" 1
# 17 "./include/linux/lockdep_types.h"
enum lockdep_wait_type {
 LD_WAIT_INV = 0,

 LD_WAIT_FREE,
 LD_WAIT_SPIN,




 LD_WAIT_CONFIG = LD_WAIT_SPIN,

 LD_WAIT_SLEEP,

 LD_WAIT_MAX,
};

enum lockdep_lock_type {
 LD_LOCK_NORMAL = 0,
 LD_LOCK_PERCPU,
 LD_LOCK_MAX,
};
# 197 "./include/linux/lockdep_types.h"
struct lock_class_key { };




struct lockdep_map { };

struct pin_cookie { };
# 13 "./include/linux/spinlock_types_raw.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;







} raw_spinlock_t;
# 13 "./include/linux/spinlock_types.h" 2




typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 28 "./include/linux/spinlock_types.h"
 };
} spinlock_t;
# 74 "./include/linux/spinlock_types.h"
# 1 "./include/linux/rwlock_types.h" 1
# 25 "./include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;







} rwlock_t;
# 75 "./include/linux/spinlock_types.h" 2
# 8 "./include/linux/ratelimit_types.h" 2







struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "./include/linux/ratelimit_types.h"
extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 11 "./include/linux/printk.h" 2


extern const char linux_banner[];
extern const char linux_proc_banner[];

extern int oops_in_progress;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 66 "./include/linux/printk.h"
extern int console_printk[];






extern void console_verbose(void);



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 137 "./include/linux/printk.h"
extern __attribute__((__format__(printf, 1, 2)))
void early_printk(const char *fmt, ...);





struct dev_printk_info;


           __attribute__((__format__(printf, 4, 0)))
int vprintk_emit(int facility, int level,
   const struct dev_printk_info *dev_info,
   const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int _printk(const char *fmt, ...);




__attribute__((__format__(printf, 1, 2))) __attribute__((__cold__)) int _printk_deferred(const char *fmt, ...);

extern void __printk_safe_enter(void);
extern void __printk_safe_exit(void);
# 178 "./include/linux/printk.h"
extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_log_buf(int early);
__attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void dump_stack_lvl(const char *log_lvl) __attribute__((__cold__));
extern void dump_stack(void) __attribute__((__cold__));
# 280 "./include/linux/printk.h"
extern int __printk_cpu_trylock(void);
extern void __printk_wait_on_cpu_lock(void);
extern void __printk_cpu_unlock(void);
# 320 "./include/linux/printk.h"
extern int kptr_restrict;
# 339 "./include/linux/printk.h"
struct module;
# 693 "./include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);
# 732 "./include/linux/printk.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 23 "./include/asm-generic/bug.h" 2




struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 95 "./include/asm-generic/bug.h"
extern __attribute__((__format__(printf, 1, 2))) void __warn_printk(const char *fmt, ...);
# 113 "./include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 149 "./arch/powerpc/include/asm/bug.h" 2



struct pt_regs;
void hash__do_page_fault(struct pt_regs *);
void bad_page_fault(struct pt_regs *, int);
extern void _exception(int, struct pt_regs *, int, unsigned long);
extern void _exception_pkey(struct pt_regs *, unsigned long, int);
extern void die(const char *, struct pt_regs *, long);
void die_mce(const char *str, struct pt_regs *regs, long err);
extern bool die_will_crash(void);
extern void panic_flush_kmsg_start(void);
extern void panic_flush_kmsg_end(void);
# 6 "./include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

void bug_get_file_line(struct bug_entry *bug, const char **file,
         unsigned int *line);

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);

void generic_bug_clear_once(void);
# 80 "./include/linux/bug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 148 "./arch/powerpc/include/asm/mmu.h" 2
# 1 "./arch/powerpc/include/asm/cputable.h" 1






# 1 "./arch/powerpc/include/uapi/asm/cputable.h" 1
# 8 "./arch/powerpc/include/asm/cputable.h" 2







struct cpu_spec;

typedef void (*cpu_setup_t)(unsigned long offset, struct cpu_spec* spec);
typedef void (*cpu_restore_t)(void);

enum powerpc_pmc_type {
 PPC_PMC_DEFAULT = 0,
 PPC_PMC_IBM = 1,
 PPC_PMC_PA6T = 2,
 PPC_PMC_G4 = 3,
};

struct pt_regs;

extern int machine_check_generic(struct pt_regs *regs);
extern int machine_check_4xx(struct pt_regs *regs);
extern int machine_check_440A(struct pt_regs *regs);
extern int machine_check_e500mc(struct pt_regs *regs);
extern int machine_check_e500(struct pt_regs *regs);
extern int machine_check_47x(struct pt_regs *regs);
int machine_check_8xx(struct pt_regs *regs);
int machine_check_83xx(struct pt_regs *regs);

extern void cpu_down_flush_e500v2(void);
extern void cpu_down_flush_e500mc(void);
extern void cpu_down_flush_e5500(void);
extern void cpu_down_flush_e6500(void);


struct cpu_spec {

 unsigned int pvr_mask;
 unsigned int pvr_value;

 char *cpu_name;
 unsigned long cpu_features;
 unsigned int cpu_user_features;
 unsigned int cpu_user_features2;
 unsigned int mmu_features;


 unsigned int icache_bsize;
 unsigned int dcache_bsize;


 void (*cpu_down_flush)(void);


 unsigned int num_pmcs;
 enum powerpc_pmc_type pmc_type;




 cpu_setup_t cpu_setup;

 cpu_restore_t cpu_restore;


 char *oprofile_cpu_type;


 char *platform;




 int (*machine_check)(struct pt_regs *regs);





 long (*machine_check_early)(struct pt_regs *regs);
};

extern struct cpu_spec *cur_cpu_spec;

extern unsigned int __start___ftr_fixup, __stop___ftr_fixup;

extern void set_cur_cpu_spec(struct cpu_spec *s);
extern struct cpu_spec *identify_cpu(unsigned long offset, unsigned int pvr);
extern void identify_cpu_name(unsigned int pvr);
extern void do_feature_fixups(unsigned long value, void *fixup_start,
         void *fixup_end);

extern const char *powerpc_base_platform;


extern void cpu_feature_keys_init(void);
# 149 "./arch/powerpc/include/asm/mmu.h" 2
# 1 "./arch/powerpc/include/asm/page.h" 1
# 11 "./arch/powerpc/include/asm/page.h"
# 1 "./include/linux/kernel.h" 1





# 1 "./include/linux/align.h" 1
# 7 "./include/linux/kernel.h" 2
# 1 "./include/linux/limits.h" 1




# 1 "./include/uapi/linux/limits.h" 1
# 6 "./include/linux/limits.h" 2

# 1 "./include/vdso/limits.h" 1
# 8 "./include/linux/limits.h" 2
# 8 "./include/linux/kernel.h" 2




# 1 "./include/linux/bitops.h" 1






# 1 "./include/linux/typecheck.h" 1
# 8 "./include/linux/bitops.h" 2
# 24 "./include/linux/bitops.h"
extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);





# 1 "./arch/powerpc/include/asm/bitops.h" 1
# 43 "./arch/powerpc/include/asm/bitops.h"
# 1 "./arch/powerpc/include/asm/synch.h" 1






# 1 "./arch/powerpc/include/asm/feature-fixups.h" 1
# 282 "./arch/powerpc/include/asm/feature-fixups.h"
extern long stf_barrier_fallback;
extern long entry_flush_fallback;
extern long scv_entry_flush_fallback;
extern long __start___stf_entry_barrier_fixup, __stop___stf_entry_barrier_fixup;
extern long __start___stf_exit_barrier_fixup, __stop___stf_exit_barrier_fixup;
extern long __start___uaccess_flush_fixup, __stop___uaccess_flush_fixup;
extern long __start___entry_flush_fixup, __stop___entry_flush_fixup;
extern long __start___scv_entry_flush_fixup, __stop___scv_entry_flush_fixup;
extern long __start___rfi_flush_fixup, __stop___rfi_flush_fixup;
extern long __start___barrier_nospec_fixup, __stop___barrier_nospec_fixup;
extern long __start__btb_flush_fixup, __stop__btb_flush_fixup;

void apply_feature_fixups(void);
void setup_feature_keys(void);
# 8 "./arch/powerpc/include/asm/synch.h" 2



extern unsigned int __start___lwsync_fixup, __stop___lwsync_fixup;
extern void do_lwsync_fixups(unsigned long value, void *fixup_start,
        void *fixup_end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eieio(void)
{
 __asm__ __volatile__ ("eieio" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void isync(void)
{
 __asm__ __volatile__ ("isync" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ppc_after_tlbiel_barrier(void)
{
 asm volatile("ptesync": : :"memory");
# 38 "./arch/powerpc/include/asm/synch.h"
 asm volatile("971:" " " ".long (0x7c00068c)" " " "; " "972: .pushsection __ftr_alt_97,\"a\"; .align 2; 973:" " " "" "; " "974: .popsection; .pushsection __ftr_fixup,\"a\"; .align 3; 975: .8byte ((%0)); .8byte ((%0)); .8byte 971b-975b; .8byte 972b-975b; .8byte 973b-975b; .8byte 974b-975b; .org . + (((974b-973b)) > ((972b-971b)));; .popsection;" " " : : "i" (0x0004000000000000UL) : "memory");
}
# 44 "./arch/powerpc/include/asm/bitops.h" 2
# 62 "./arch/powerpc/include/asm/bitops.h"
# 1 "./arch/powerpc/include/asm/barrier.h" 1
# 115 "./arch/powerpc/include/asm/barrier.h"
# 1 "./include/asm-generic/barrier.h" 1
# 17 "./include/asm-generic/barrier.h"
# 1 "./arch/powerpc/include/generated/asm/rwonce.h" 1
# 18 "./include/asm-generic/barrier.h" 2
# 116 "./arch/powerpc/include/asm/barrier.h" 2
# 63 "./arch/powerpc/include/asm/bitops.h" 2
# 82 "./arch/powerpc/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bits(unsigned long mask, volatile unsigned long *_p) { unsigned long old; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "" "1:" "ldarx" " " "%0,0,%3,0\n" "or" " " "%0,%0,%2\n" "stdcx." " " "%0,0,%3\n" "bne- 1b\n" : "=&r" (old), "+m" (*p) : "r" (mask), "r" (p) : "cc", "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bits(unsigned long mask, volatile unsigned long *_p) { unsigned long old; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "" "1:" "ldarx" " " "%0,0,%3,0\n" "andc" " " "%0,%0,%2\n" "stdcx." " " "%0,0,%3\n" "bne- 1b\n" : "=&r" (old), "+m" (*p) : "r" (mask), "r" (p) : "cc", "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bits_unlock(unsigned long mask, volatile unsigned long *_p) { unsigned long old; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "lwsync" " " "\n" "1:" "ldarx" " " "%0,0,%3,0\n" "andc" " " "%0,%0,%2\n" "stdcx." " " "%0,0,%3\n" "bne- 1b\n" : "=&r" (old), "+m" (*p) : "r" (mask), "r" (p) : "cc", "memory"); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_bits(unsigned long mask, volatile unsigned long *_p) { unsigned long old; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "" "1:" "ldarx" " " "%0,0,%3,0\n" "xor" " " "%0,%0,%2\n" "stdcx." " " "%0,0,%3\n" "bne- 1b\n" : "=&r" (old), "+m" (*p) : "r" (mask), "r" (p) : "cc", "memory"); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_set_bit(int nr, volatile unsigned long *addr)
{
 set_bits(((((1UL))) << ((nr) % 64)), addr + ((nr) / 64));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_clear_bit(int nr, volatile unsigned long *addr)
{
 clear_bits(((((1UL))) << ((nr) % 64)), addr + ((nr) / 64));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_clear_bit_unlock(int nr, volatile unsigned long *addr)
{
 clear_bits_unlock(((((1UL))) << ((nr) % 64)), addr + ((nr) / 64));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_change_bit(int nr, volatile unsigned long *addr)
{
 change_bits(((((1UL))) << ((nr) % 64)), addr + ((nr) / 64));
}
# 129 "./arch/powerpc/include/asm/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long test_and_set_bits( unsigned long mask, volatile unsigned long *_p) { unsigned long old, t; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "\n" "sync" " " "\n" "1:" "ldarx" " " "%0,0,%3,%4\n" "or" " " "%1,%0,%2\n" "stdcx." " " "%1,0,%3\n" "bne- 1b\n" "\n" "sync" " " "\n" : "=&r" (old), "=&r" (t) : "r" (mask), "r" (p), "i" (1 ? 0 : 0) : "cc", "memory"); return (old & mask); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long test_and_set_bits_lock( unsigned long mask, volatile unsigned long *_p) { unsigned long old, t; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "" "1:" "ldarx" " " "%0,0,%3,%4\n" "or" " " "%1,%0,%2\n" "stdcx." " " "%1,0,%3\n" "bne- 1b\n" "\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " : "=&r" (old), "=&r" (t) : "r" (mask), "r" (p), "i" (1 ? 1 : 0) : "cc", "memory"); return (old & mask); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long test_and_clear_bits( unsigned long mask, volatile unsigned long *_p) { unsigned long old, t; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "\n" "sync" " " "\n" "1:" "ldarx" " " "%0,0,%3,%4\n" "andc" " " "%1,%0,%2\n" "stdcx." " " "%1,0,%3\n" "bne- 1b\n" "\n" "sync" " " "\n" : "=&r" (old), "=&r" (t) : "r" (mask), "r" (p), "i" (1 ? 0 : 0) : "cc", "memory"); return (old & mask); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long test_and_change_bits( unsigned long mask, volatile unsigned long *_p) { unsigned long old, t; unsigned long *p = (unsigned long *)_p; __asm__ __volatile__ ( "\n" "sync" " " "\n" "1:" "ldarx" " " "%0,0,%3,%4\n" "xor" " " "%1,%0,%2\n" "stdcx." " " "%1,0,%3\n" "bne- 1b\n" "\n" "sync" " " "\n" : "=&r" (old), "=&r" (t) : "r" (mask), "r" (p), "i" (1 ? 0 : 0) : "cc", "memory"); return (old & mask); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_test_and_set_bit(unsigned long nr,
     volatile unsigned long *addr)
{
 return test_and_set_bits(((((1UL))) << ((nr) % 64)), addr + ((nr) / 64)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_test_and_set_bit_lock(unsigned long nr,
          volatile unsigned long *addr)
{
 return test_and_set_bits_lock(((((1UL))) << ((nr) % 64)),
    addr + ((nr) / 64)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_test_and_clear_bit(unsigned long nr,
       volatile unsigned long *addr)
{
 return test_and_clear_bits(((((1UL))) << ((nr) % 64)), addr + ((nr) / 64)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_test_and_change_bit(unsigned long nr,
        volatile unsigned long *addr)
{
 return test_and_change_bits(((((1UL))) << ((nr) % 64)), addr + ((nr) / 64)) != 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
clear_bit_unlock_return_word(int nr, volatile unsigned long *addr)
{
 unsigned long old, t;
 unsigned long *p = (unsigned long *)addr + ((nr) / 64);
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 __asm__ __volatile__ (
 "lwsync" " " "\n"
"1:" "ldarx" " " "%0,0,%3,0\n"
 "andc %1,%0,%2\n"
 "stdcx." " " "%1,0,%3\n"
 "bne- 1b\n"
 : "=&r" (old), "=&r" (t)
 : "r" (mask), "r" (p)
 : "cc", "memory");

 return old;
}
# 193 "./arch/powerpc/include/asm/bitops.h"
# 1 "./include/asm-generic/bitops/non-atomic.h" 1
# 16 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p |= mask;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch___clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p &= ~mask;
}
# 45 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch___change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p ^= mask;
}
# 64 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_set_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 85 "./include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_clear_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch___test_and_change_bit(unsigned int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_test_bit(unsigned int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 64)] >> (nr & (64 -1)));
}
# 194 "./arch/powerpc/include/asm/bitops.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch___clear_bit_unlock(int nr, volatile unsigned long *addr)
{
 __asm__ __volatile__("lwsync" " " "\n" "" ::: "memory");
 arch___clear_bit(nr, addr);
}







# 1 "./include/asm-generic/bitops/ffz.h" 1
# 208 "./arch/powerpc/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/builtin-__ffs.h" 1
# 11 "./include/asm-generic/bitops/builtin-__ffs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 return __builtin_ctzl(word);
}
# 210 "./arch/powerpc/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/builtin-ffs.h" 1
# 212 "./arch/powerpc/include/asm/bitops.h" 2





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fls(unsigned int x)
{
 int lz;

 if (__builtin_constant_p(x))
  return x ? 32 - __builtin_clz(x) : 0;
 asm("cntlzw %0,%1" : "=r" (lz) : "r" (x));
 return 32 - lz;
}

# 1 "./include/asm-generic/bitops/builtin-__fls.h" 1
# 11 "./include/asm-generic/bitops/builtin-__fls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 return (sizeof(word) * 8) - 1 - __builtin_clzl(word);
}
# 228 "./arch/powerpc/include/asm/bitops.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fls64(__u64 x)
{
 int lz;

 if (__builtin_constant_p(x))
  return x ? 64 - __builtin_clzll(x) : 0;
 asm("cntlzd %0,%1" : "=r" (lz) : "r" (x));
 return 64 - lz;
}





unsigned int __arch_hweight8(unsigned int w);
unsigned int __arch_hweight16(unsigned int w);
unsigned int __arch_hweight32(unsigned int w);
unsigned long __arch_hweight64(__u64 w);
# 1 "./include/asm-generic/bitops/const_hweight.h" 1
# 254 "./arch/powerpc/include/asm/bitops.h" 2





# 1 "./include/asm-generic/bitops/instrumented-atomic.h" 1
# 14 "./include/asm-generic/bitops/instrumented-atomic.h"
# 1 "./include/linux/instrumented.h" 1
# 24 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, 0);
}
# 39 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 0));
}
# 54 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 1) | (1 << 0));
}
# 69 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read(const volatile void *v, size_t size)
{
 kasan_check_read(v, size);
 kcsan_check_access(v, size, (1 << 2));
}
# 84 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0));
}
# 99 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void instrument_atomic_read_write(const volatile void *v, size_t size)
{
 kasan_check_write(v, size);
 kcsan_check_access(v, size, (1 << 2) | (1 << 0) | (1 << 1));
}
# 115 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_to_user(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 kcsan_check_access(from, n, 0);
}
# 132 "./include/linux/instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
instrument_copy_from_user(const void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 kcsan_check_access(to, n, (1 << 0));
}
# 15 "./include/asm-generic/bitops/instrumented-atomic.h" 2
# 26 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_set_bit(nr, addr);
}
# 39 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_clear_bit(nr, addr);
}
# 55 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_change_bit(nr, addr);
}
# 68 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_set_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_set_bit(nr, addr);
}
# 81 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_clear_bit(nr, addr);
}
# 94 "./include/asm-generic/bitops/instrumented-atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_change_bit(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_change_bit(nr, addr);
}
# 260 "./arch/powerpc/include/asm/bitops.h" 2
# 1 "./include/asm-generic/bitops/instrumented-lock.h" 1
# 23 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 arch_clear_bit_unlock(nr, addr);
}
# 38 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 instrument_write(addr + ((nr) / 64), sizeof(long));
 arch___clear_bit_unlock(nr, addr);
}
# 53 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_set_bit_lock(long nr, volatile unsigned long *addr)
{
 instrument_atomic_read_write(addr + ((nr) / 64), sizeof(long));
 return arch_test_and_set_bit_lock(nr, addr);
}
# 71 "./include/asm-generic/bitops/instrumented-lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)
{
 instrument_atomic_write(addr + ((nr) / 64), sizeof(long));
 return (clear_bit_unlock_return_word(nr, addr) & ((((1UL))) << ((7) % 64)));
}
# 261 "./arch/powerpc/include/asm/bitops.h" 2


# 1 "./include/asm-generic/bitops/le.h" 1
# 19 "./include/asm-generic/bitops/le.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit_le(int nr, const void *addr)
{
 return arch_test_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit_le(int nr, void *addr)
{
 arch___set_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_le(int nr, void *addr)
{
 arch___clear_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit_le(int nr, void *addr)
{
 return arch___test_and_set_bit(nr ^ ((64 -1) & ~0x7), addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return arch___test_and_clear_bit(nr ^ ((64 -1) & ~0x7), addr);
}
# 264 "./arch/powerpc/include/asm/bitops.h" 2



# 1 "./include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 268 "./arch/powerpc/include/asm/bitops.h" 2

# 1 "./include/asm-generic/bitops/sched.h" 1
# 13 "./include/asm-generic/bitops/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "./include/asm-generic/bitops/sched.h"
}
# 270 "./arch/powerpc/include/asm/bitops.h" 2
# 34 "./include/linux/bitops.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p((__u64)w) ? (((((unsigned int) ((!!(((__u64)w) & (1ULL << 0))) + (!!(((__u64)w) & (1ULL << 1))) + (!!(((__u64)w) & (1ULL << 2))) + (!!(((__u64)w) & (1ULL << 3))) + (!!(((__u64)w) & (1ULL << 4))) + (!!(((__u64)w) & (1ULL << 5))) + (!!(((__u64)w) & (1ULL << 6))) + (!!(((__u64)w) & (1ULL << 7))))) + ((unsigned int) ((!!((((__u64)w) >> 8) & (1ULL << 0))) + (!!((((__u64)w) >> 8) & (1ULL << 1))) + (!!((((__u64)w) >> 8) & (1ULL << 2))) + (!!((((__u64)w) >> 8) & (1ULL << 3))) + (!!((((__u64)w) >> 8) & (1ULL << 4))) + (!!((((__u64)w) >> 8) & (1ULL << 5))) + (!!((((__u64)w) >> 8) & (1ULL << 6))) + (!!((((__u64)w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((__u64)w) >> 16) & (1ULL << 0))) + (!!((((__u64)w) >> 16) & (1ULL << 1))) + (!!((((__u64)w) >> 16) & (1ULL << 2))) + (!!((((__u64)w) >> 16) & (1ULL << 3))) + (!!((((__u64)w) >> 16) & (1ULL << 4))) + (!!((((__u64)w) >> 16) & (1ULL << 5))) + (!!((((__u64)w) >> 16) & (1ULL << 6))) + (!!((((__u64)w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 16) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!((((__u64)w) >> 32) & (1ULL << 0))) + (!!((((__u64)w) >> 32) & (1ULL << 1))) + (!!((((__u64)w) >> 32) & (1ULL << 2))) + (!!((((__u64)w) >> 32) & (1ULL << 3))) + (!!((((__u64)w) >> 32) & (1ULL << 4))) + (!!((((__u64)w) >> 32) & (1ULL << 5))) + (!!((((__u64)w) >> 32) & (1ULL << 6))) + (!!((((__u64)w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!(((((__u64)w) >> 32) >> 8) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((((__u64)w) >> 32) >> 16) & (1ULL << 0))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 1))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 2))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 3))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 4))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 5))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 6))) + (!!(((((__u64)w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!((((((__u64)w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64((__u64)w));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 135 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order(unsigned int count)
{
 if (count == 0)
  return -1;

 return fls(--count);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 return (int)fls_long(--l);
}
# 188 "./include/linux/bitops.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  set_bit(nr, addr);
 else
  clear_bit(nr, addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  arch___set_bit(nr, addr);
 else
  arch___clear_bit(nr, addr);
}
# 13 "./include/linux/kernel.h" 2
# 1 "./include/linux/kstrtox.h" 1








int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 30 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 58 "./include/linux/kstrtox.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}
# 145 "./include/linux/kstrtox.h"
extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}
# 14 "./include/linux/kernel.h" 2
# 1 "./include/linux/log2.h" 1
# 21 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 44 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 198 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ((n - 1) < 2 ? 0 : 63 - __builtin_clzll(n - 1)) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 225 "./include/linux/log2.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? (((n) - 1) < 2 ? 0 : 63 - __builtin_clzll((n) - 1)) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 15 "./include/linux/kernel.h" 2
# 1 "./include/linux/math.h" 1




# 1 "./arch/powerpc/include/generated/asm/div64.h" 1
# 1 "./include/asm-generic/div64.h" 1
# 2 "./arch/powerpc/include/generated/asm/div64.h" 2
# 6 "./include/linux/math.h" 2
# 160 "./include/linux/math.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 int_sqrt64(u64 x)
{
 return (u32)int_sqrt(x);
}
# 16 "./include/linux/kernel.h" 2
# 1 "./include/linux/minmax.h" 1
# 17 "./include/linux/kernel.h" 2




# 1 "./include/linux/static_call_types.h" 1
# 32 "./include/linux/static_call_types.h"
struct static_call_site {
 s32 addr;
 s32 key;
};
# 94 "./include/linux/static_call_types.h"
struct static_call_key {
 void *func;
};
# 22 "./include/linux/kernel.h" 2
# 88 "./include/linux/kernel.h"
struct completion;
struct user;
# 171 "./include/linux/kernel.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ___might_sleep(const char *file, int line,
       int preempt_offset) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __might_sleep(const char *file, int line,
       int preempt_offset) { }
# 190 "./include/linux/kernel.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void might_fault(void) { }


void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int no_hash_pointers_enable(char *str);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int init_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

extern void bust_spinlocks(int yes);

extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;

extern const char hex_asc[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 306 "./include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void ____trace_printk_check_format(const char *fmt, ...)
{
}
# 385 "./include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, const char *fmt, ...);

extern __attribute__((__format__(printf, 2, 3)))
int __trace_printk(unsigned long ip, const char *fmt, ...);
# 426 "./include/linux/kernel.h"
extern int __trace_bputs(unsigned long ip, const char *str);
extern int __trace_puts(unsigned long ip, const char *str, int size);

extern void trace_dump_stack(int skip);
# 448 "./include/linux/kernel.h"
extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);

extern __attribute__((__format__(printf, 2, 0))) int
__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
# 12 "./arch/powerpc/include/asm/page.h" 2
# 30 "./arch/powerpc/include/asm/page.h"
extern unsigned int hpage_shift;
# 87 "./arch/powerpc/include/asm/page.h"
extern phys_addr_t memstart_addr;
extern phys_addr_t kernstart_addr;
# 247 "./arch/powerpc/include/asm/page.h"
# 1 "./arch/powerpc/include/asm/page_64.h" 1
# 41 "./arch/powerpc/include/asm/page_64.h"
typedef unsigned long pte_basic_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_page(void *addr)
{
 unsigned long iterations;
 unsigned long onex, twox, fourx, eightx;

 iterations = ppc64_caches.l1d.blocks_per_page / 8;






 onex = ppc64_caches.l1d.block_size;
 twox = onex << 1;
 fourx = onex << 2;
 eightx = onex << 3;

 asm volatile(
 "mtctr	%1	# clear_page\n	.balign	16\n1:	dcbz	0,%0\n	dcbz	%3,%0\n	dcbz	%4,%0\n	dcbz	%5,%0\n	dcbz	%6,%0\n	dcbz	%7,%0\n	dcbz	%8,%0\n	dcbz	%9,%0\n	add	%0,%0,%10\n	bdnz+	1b"
# 73 "./arch/powerpc/include/asm/page_64.h"
 : "=&r" (addr)
 : "r" (iterations), "0" (addr), "b" (onex), "b" (twox),
  "b" (twox+onex), "b" (fourx), "b" (fourx+onex),
  "b" (twox+fourx), "b" (eightx-onex), "r" (eightx)
 : "ctr", "memory");
}

extern void copy_page(void *to, void *from);


extern u64 ppc64_pft_size;
# 104 "./arch/powerpc/include/asm/page_64.h"
# 1 "./include/asm-generic/getorder.h" 1
# 29 "./include/asm-generic/getorder.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - 16;

  if (size < (1UL << 16))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? (((size) - 1) < 2 ? 0 : 63 - __builtin_clzll((size) - 1)) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 16 + 1;
 }

 size--;
 size >>= 16;



 return fls64(size);

}
# 105 "./arch/powerpc/include/asm/page_64.h" 2
# 248 "./arch/powerpc/include/asm/page.h" 2
# 299 "./arch/powerpc/include/asm/page.h"
# 1 "./arch/powerpc/include/asm/pgtable-be-types.h" 1




# 1 "./arch/powerpc/include/asm/cmpxchg.h" 1
# 80 "./arch/powerpc/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_u8_local(volatile void *p, u32 val) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u8) - off) * 8); p -= off; val <<= bitoff; prev_mask = (u32)(u8)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	andc	%1,%0,%5\n" "	or	%1,%1,%4\n" "	stwcx.	%1,0,%3\n" "	bne-	1b\n" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (val), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_u8_relaxed(volatile void *p, u32 val) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u8) - off) * 8); p -= off; val <<= bitoff; prev_mask = (u32)(u8)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	andc	%1,%0,%5\n" "	or	%1,%1,%4\n" "	stwcx.	%1,0,%3\n" "	bne-	1b\n" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (val), "r" (prev_mask) : "cc", "cc"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_u16_local(volatile void *p, u32 val) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u16) - off) * 8); p -= off; val <<= bitoff; prev_mask = (u32)(u16)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	andc	%1,%0,%5\n" "	or	%1,%1,%4\n" "	stwcx.	%1,0,%3\n" "	bne-	1b\n" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (val), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_u16_relaxed(volatile void *p, u32 val) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u16) - off) * 8); p -= off; val <<= bitoff; prev_mask = (u32)(u16)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	andc	%1,%0,%5\n" "	or	%1,%1,%4\n" "	stwcx.	%1,0,%3\n" "	bne-	1b\n" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (val), "r" (prev_mask) : "cc", "cc"); return prev >> bitoff; };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__xchg_u32_local(volatile void *p, unsigned long val)
{
 unsigned long prev;

 __asm__ __volatile__(
"1:	lwarx	%0,0,%2 \n"
"	stwcx.	%3,0,%2 \n	bne-	1b"

 : "=&r" (prev), "+m" (*(volatile unsigned int *)p)
 : "r" (p), "r" (val)
 : "cc", "memory");

 return prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__xchg_u32_relaxed(u32 *p, unsigned long val)
{
 unsigned long prev;

 __asm__ __volatile__(
"1:	lwarx	%0,0,%2\n"
"	stwcx.	%3,0,%2\n"
"	bne-	1b"
 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (val)
 : "cc");

 return prev;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__xchg_u64_local(volatile void *p, unsigned long val)
{
 unsigned long prev;

 __asm__ __volatile__(
"1:	ldarx	%0,0,%2 \n"
"	stdcx.	%3,0,%2 \n	bne-	1b"

 : "=&r" (prev), "+m" (*(volatile unsigned long *)p)
 : "r" (p), "r" (val)
 : "cc", "memory");

 return prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__xchg_u64_relaxed(u64 *p, unsigned long val)
{
 unsigned long prev;

 __asm__ __volatile__(
"1:	ldarx	%0,0,%2\n"
"	stdcx.	%3,0,%2\n"
"	bne-	1b"
 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (val)
 : "cc");

 return prev;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__xchg_local(void *ptr, unsigned long x, unsigned int size)
{
 switch (size) {
 case 1:
  return __xchg_u8_local(ptr, x);
 case 2:
  return __xchg_u16_local(ptr, x);
 case 4:
  return __xchg_u32_local(ptr, x);

 case 8:
  return __xchg_u64_local(ptr, x);

 }
 do { extern void __compiletime_assert_0(void) ; if (!(!(1))) __compiletime_assert_0(); } while (0);
 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__xchg_relaxed(void *ptr, unsigned long x, unsigned int size)
{
 switch (size) {
 case 1:
  return __xchg_u8_relaxed(ptr, x);
 case 2:
  return __xchg_u16_relaxed(ptr, x);
 case 4:
  return __xchg_u32_relaxed(ptr, x);

 case 8:
  return __xchg_u64_relaxed(ptr, x);

 }
 do { extern void __compiletime_assert_1(void) ; if (!(!(1))) __compiletime_assert_1(); } while (0);
 return x;
}
# 206 "./arch/powerpc/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u8(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u8) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u8)-1 << bitoff; __asm__ __volatile__( "\n" "sync" " " "\n" "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "sync" " " "\n" "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u8_local(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u8) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u8)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u8_acquire(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u8) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u8)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u8_relaxed(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u8) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u8)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "cc"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u16(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u16) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u16)-1 << bitoff; __asm__ __volatile__( "\n" "sync" " " "\n" "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "sync" " " "\n" "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u16_local(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u16) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u16)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u16_acquire(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u16) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u16)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "memory"); return prev >> bitoff; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_u16_relaxed(volatile void *p, u32 old, u32 new) { unsigned int prev, prev_mask, tmp, bitoff, off; off = (unsigned long)p % sizeof(u32); bitoff = ((sizeof(u32) - sizeof(u16) - off) * 8); p -= off; old <<= bitoff; new <<= bitoff; prev_mask = (u32)(u16)-1 << bitoff; __asm__ __volatile__( "1:	lwarx   %0,0,%3\n" "	and	%1,%0,%6\n" "	cmpw	0,%1,%4\n" "	bne-	2f\n" "	andc	%1,%0,%6\n" "	or	%1,%1,%5\n" "	stwcx.  %1,0,%3\n" "	bne-    1b\n" "\n" "2:" : "=&r" (prev), "=&r" (tmp), "+m" (*(u32*)p) : "r" (p), "r" (old), "r" (new), "r" (prev_mask) : "cc", "cc"); return prev >> bitoff; };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u32(volatile unsigned int *p, unsigned long old, unsigned long new)
{
 unsigned int prev;

 __asm__ __volatile__ (
 "\n" "sync" " " "\n"
"1:	lwarx	%0,0,%2		# __cmpxchg_u32\n	cmpw	0,%0,%3\n	bne-	2f\n"


"	stwcx.	%4,0,%2\n	bne-	1b"

 "\n" "sync" " " "\n"
 "\n2:"

 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc", "memory");

 return prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u32_local(volatile unsigned int *p, unsigned long old,
   unsigned long new)
{
 unsigned int prev;

 __asm__ __volatile__ (
"1:	lwarx	%0,0,%2		# __cmpxchg_u32\n	cmpw	0,%0,%3\n	bne-	2f\n"


"	stwcx.	%4,0,%2\n	bne-	1b"

 "\n2:"

 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc", "memory");

 return prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u32_relaxed(u32 *p, unsigned long old, unsigned long new)
{
 unsigned long prev;

 __asm__ __volatile__ (
"1:	lwarx	%0,0,%2		# __cmpxchg_u32_relaxed\n"
"	cmpw	0,%0,%3\n"
"	bne-	2f\n"
"	stwcx.	%4,0,%2\n"
"	bne-	1b\n"
"2:"
 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc");

 return prev;
}
# 285 "./arch/powerpc/include/asm/cmpxchg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u32_acquire(u32 *p, unsigned long old, unsigned long new)
{
 unsigned long prev;

 __asm__ __volatile__ (
"1:	lwarx	%0,0,%2		# __cmpxchg_u32_acquire\n"
"	cmpw	0,%0,%3\n"
"	bne-	2f\n"
"	stwcx.	%4,0,%2\n"
"	bne-	1b\n"
 "\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " "
 "\n"
"2:"
 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc", "memory");

 return prev;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u64(volatile unsigned long *p, unsigned long old, unsigned long new)
{
 unsigned long prev;

 __asm__ __volatile__ (
 "\n" "sync" " " "\n"
"1:	ldarx	%0,0,%2		# __cmpxchg_u64\n	cmpd	0,%0,%3\n	bne-	2f\n	stdcx.	%4,0,%2\n	bne-	1b"




 "\n" "sync" " " "\n"
 "\n2:"

 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc", "memory");

 return prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u64_local(volatile unsigned long *p, unsigned long old,
   unsigned long new)
{
 unsigned long prev;

 __asm__ __volatile__ (
"1:	ldarx	%0,0,%2		# __cmpxchg_u64\n	cmpd	0,%0,%3\n	bne-	2f\n	stdcx.	%4,0,%2\n	bne-	1b"




 "\n2:"

 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc", "memory");

 return prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u64_relaxed(u64 *p, unsigned long old, unsigned long new)
{
 unsigned long prev;

 __asm__ __volatile__ (
"1:	ldarx	%0,0,%2		# __cmpxchg_u64_relaxed\n"
"	cmpd	0,%0,%3\n"
"	bne-	2f\n"
"	stdcx.	%4,0,%2\n"
"	bne-	1b\n"
"2:"
 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc");

 return prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_u64_acquire(u64 *p, unsigned long old, unsigned long new)
{
 unsigned long prev;

 __asm__ __volatile__ (
"1:	ldarx	%0,0,%2		# __cmpxchg_u64_acquire\n"
"	cmpd	0,%0,%3\n"
"	bne-	2f\n"
"	stdcx.	%4,0,%2\n"
"	bne-	1b\n"
 "\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " "
 "\n"
"2:"
 : "=&r" (prev), "+m" (*p)
 : "r" (p), "r" (old), "r" (new)
 : "cc", "memory");

 return prev;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg(volatile void *ptr, unsigned long old, unsigned long new,
   unsigned int size)
{
 switch (size) {
 case 1:
  return __cmpxchg_u8(ptr, old, new);
 case 2:
  return __cmpxchg_u16(ptr, old, new);
 case 4:
  return __cmpxchg_u32(ptr, old, new);

 case 8:
  return __cmpxchg_u64(ptr, old, new);

 }
 do { extern void __compiletime_assert_2(void) ; if (!(!(1))) __compiletime_assert_2(); } while (0);
 return old;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_local(void *ptr, unsigned long old, unsigned long new,
   unsigned int size)
{
 switch (size) {
 case 1:
  return __cmpxchg_u8_local(ptr, old, new);
 case 2:
  return __cmpxchg_u16_local(ptr, old, new);
 case 4:
  return __cmpxchg_u32_local(ptr, old, new);

 case 8:
  return __cmpxchg_u64_local(ptr, old, new);

 }
 do { extern void __compiletime_assert_3(void) ; if (!(!(1))) __compiletime_assert_3(); } while (0);
 return old;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_relaxed(void *ptr, unsigned long old, unsigned long new,
    unsigned int size)
{
 switch (size) {
 case 1:
  return __cmpxchg_u8_relaxed(ptr, old, new);
 case 2:
  return __cmpxchg_u16_relaxed(ptr, old, new);
 case 4:
  return __cmpxchg_u32_relaxed(ptr, old, new);

 case 8:
  return __cmpxchg_u64_relaxed(ptr, old, new);

 }
 do { extern void __compiletime_assert_4(void) ; if (!(!(1))) __compiletime_assert_4(); } while (0);
 return old;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__cmpxchg_acquire(void *ptr, unsigned long old, unsigned long new,
    unsigned int size)
{
 switch (size) {
 case 1:
  return __cmpxchg_u8_acquire(ptr, old, new);
 case 2:
  return __cmpxchg_u16_acquire(ptr, old, new);
 case 4:
  return __cmpxchg_u32_acquire(ptr, old, new);

 case 8:
  return __cmpxchg_u64_acquire(ptr, old, new);

 }
 do { extern void __compiletime_assert_5(void) ; if (!(!(1))) __compiletime_assert_5(); } while (0);
 return old;
}
# 6 "./arch/powerpc/include/asm/pgtable-be-types.h" 2


typedef struct { __be64 pte; } pte_t;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_val(pte_t x)
{
 return (( __u64)(__be64)(x.pte));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be64 pte_raw(pte_t x)
{
 return x.pte;
}



typedef struct { __be64 pmd; } pmd_t;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_val(pmd_t x)
{
 return (( __u64)(__be64)(x.pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be64 pmd_raw(pmd_t x)
{
 return x.pmd;
}


typedef struct { __be64 pud; } pud_t;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pud_val(pud_t x)
{
 return (( __u64)(__be64)(x.pud));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be64 pud_raw(pud_t x)
{
 return x.pud;
}




typedef struct { __be64 pgd; } pgd_t;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pgd_val(pgd_t x)
{
 return (( __u64)(__be64)(x.pgd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be64 pgd_raw(pgd_t x)
{
 return x.pgd;
}


typedef struct { unsigned long pgprot; } pgprot_t;
# 76 "./arch/powerpc/include/asm/pgtable-be-types.h"
typedef struct { pte_t pte; unsigned long hidx; } real_pte_t;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_xchg(pte_t *ptep, pte_t old, pte_t new)
{
 unsigned long *p = (unsigned long *)ptep;
 __be64 prev;


 prev = ( __be64)__cmpxchg_u64(p, ( unsigned long)pte_raw(old),
          ( unsigned long)pte_raw(new));

 return pte_raw(old) == prev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pmd_xchg(pmd_t *pmdp, pmd_t old, pmd_t new)
{
 unsigned long *p = (unsigned long *)pmdp;
 __be64 prev;

 prev = ( __be64)__cmpxchg_u64(p, ( unsigned long)pmd_raw(old),
          ( unsigned long)pmd_raw(new));

 return pmd_raw(old) == prev;
}

typedef struct { __be64 pdbe; } hugepd_t;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpd_val(hugepd_t x)
{
 return (( __u64)(__be64)(x.pdbe));
}
# 300 "./arch/powerpc/include/asm/page.h" 2
# 310 "./arch/powerpc/include/asm/page.h"
struct page;
extern void clear_user_page(void *page, unsigned long vaddr, struct page *pg);
extern void copy_user_page(void *to, void *from, unsigned long vaddr,
  struct page *p);
extern int devmem_is_allowed(unsigned long pfn);


void arch_free_page(struct page *page, int order);



struct vm_area_struct;

extern unsigned long kernstart_virt_addr;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kaslr_offset(void)
{
 return kernstart_virt_addr - 0xc000000000000000UL;
}

# 1 "./include/asm-generic/memory_model.h" 1




# 1 "./include/linux/pfn.h" 1
# 13 "./include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "./include/asm-generic/memory_model.h" 2
# 331 "./arch/powerpc/include/asm/page.h" 2

# 1 "./arch/powerpc/include/asm/slice.h" 1





# 1 "./arch/powerpc/include/asm/book3s/64/slice.h" 1
# 7 "./arch/powerpc/include/asm/slice.h" 2




struct mm_struct;
# 21 "./arch/powerpc/include/asm/slice.h"
unsigned long slice_get_unmapped_area(unsigned long addr, unsigned long len,
          unsigned long flags, unsigned int psize,
          int topdown);

unsigned int get_slice_psize(struct mm_struct *mm, unsigned long addr);

void slice_set_range_psize(struct mm_struct *mm, unsigned long start,
      unsigned long len, unsigned int psize);

void slice_init_new_context_exec(struct mm_struct *mm);
void slice_setup_new_exec(void);
# 333 "./arch/powerpc/include/asm/page.h" 2
# 150 "./arch/powerpc/include/asm/mmu.h" 2

typedef pte_t *pgtable_t;






enum {
 MMU_FTRS_POSSIBLE =

  0x00000001UL |
# 187 "./arch/powerpc/include/asm/mmu.h"
  0x02000000UL | 0x04000000UL | 0x08000000UL |
  0x10000000UL | 0x20000000UL |
  0x40000000UL | 0x00008000UL |
  0x00004000UL | 0x00002000UL |


  0x00000040UL |
  0x00001000UL |


 0x00000200UL |


 0x00000800UL |


 0x00000400UL |


  0,
};
# 231 "./arch/powerpc/include/asm/mmu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool early_mmu_has_feature(unsigned long feature)
{
 if (0 & feature)
  return true;

 return !!(MMU_FTRS_POSSIBLE & cur_cpu_spec->mmu_features & feature);
}


# 1 "./include/linux/jump_label.h" 1
# 79 "./include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;
# 102 "./include/linux/jump_label.h"
 union {
  unsigned long type;
  struct jump_entry *entries;
  struct static_key_mod *next;
 };
};
# 117 "./include/linux/jump_label.h"
# 1 "./arch/powerpc/include/asm/jump_label.h" 1
# 18 "./arch/powerpc/include/asm/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch(struct static_key *key, bool branch)
{
 asm goto("1:\n\t" "nop # arch_static_branch\n\t" ".pushsection __jump_table,  \"aw\"\n\t" ".long 1b - ., %l[l_yes] - .\n\t" ".8byte" " " "%c0 - .\n\t" ".popsection \n\t" : : "i" (&((char *)key)[branch]) : : l_yes);







 return false;
l_yes:
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch_jump(struct static_key *key, bool branch)
{
 asm goto("1:\n\t" "b %l[l_yes] # arch_static_branch_jump\n\t" ".pushsection __jump_table,  \"aw\"\n\t" ".long 1b - ., %l[l_yes] - .\n\t" ".8byte" " " "%c0 - .\n\t" ".popsection \n\t" : : "i" (&((char *)key)[branch]) : : l_yes);







 return false;
l_yes:
 return true;
}
# 118 "./include/linux/jump_label.h" 2




struct jump_entry {
 s32 code;
 s32 target;
 long key;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_code(const struct jump_entry *entry)
{
 return (unsigned long)&entry->code + entry->code;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_target(const struct jump_entry *entry)
{
 return (unsigned long)&entry->target + entry->target;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct static_key *jump_entry_key(const struct jump_entry *entry)
{
 long offset = entry->key & ~3L;

 return (struct static_key *)((unsigned long)&entry->key + offset);
}
# 164 "./include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_branch(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 1UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_init(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 2UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jump_entry_set_init(struct jump_entry *entry, bool set)
{
 if (set)
  entry->key |= 2;
 else
  entry->key &= ~2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int jump_entry_size(struct jump_entry *entry)
{

 return 4;



}






enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 210 "./include/linux/jump_label.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern bool arch_jump_label_transform_queue(struct jump_entry *entry,
         enum jump_label_type type);
extern void arch_jump_label_transform_apply(void);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void static_key_slow_inc_cpuslocked(struct static_key *key);
extern void static_key_slow_dec_cpuslocked(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
extern int static_key_count(struct static_key *key);
extern void static_key_enable(struct static_key *key);
extern void static_key_disable(struct static_key *key);
extern void static_key_enable_cpuslocked(struct static_key *key);
extern void static_key_disable_cpuslocked(struct static_key *key);
# 358 "./include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 412 "./include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 241 "./arch/powerpc/include/asm/mmu.h" 2



extern struct static_key_true mmu_feature_keys[32];

extern void mmu_feature_keys_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool mmu_has_feature(unsigned long feature)
{
 int i;
# 264 "./arch/powerpc/include/asm/mmu.h"
 if (0 & feature)
  return true;

 if (!(MMU_FTRS_POSSIBLE & feature))
  return false;

 i = __builtin_ctzl(feature);
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&mmu_feature_keys[i]), struct static_key_true)) branch = !arch_static_branch(&(&mmu_feature_keys[i])->key, true); else if (__builtin_types_compatible_p(typeof(*&mmu_feature_keys[i]), struct static_key_false)) branch = !arch_static_branch_jump(&(&mmu_feature_keys[i])->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_clear_feature(unsigned long feature)
{
 int i;

 i = __builtin_ctzl(feature);
 cur_cpu_spec->mmu_features &= ~feature;
 static_key_disable(&(&mmu_feature_keys[i])->key);
}
# 300 "./arch/powerpc/include/asm/mmu.h"
extern unsigned int __start___mmu_ftr_fixup, __stop___mmu_ftr_fixup;





extern u64 ppc64_rma_size;


extern void mmu_cleanup_all(void);
extern void radix__mmu_cleanup_all(void);


extern void mmu_partition_table_init(void);
extern void mmu_partition_table_set_entry(unsigned int lpid, unsigned long dw0,
       unsigned long dw1, bool flush);


struct mm_struct;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void assert_pte_locked(struct mm_struct *mm, unsigned long addr)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool radix_enabled(void)
{
 return mmu_has_feature(0x00000040UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool early_radix_enabled(void)
{
 return early_mmu_has_feature(0x00000040UL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strict_kernel_rwx_enabled(void)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strict_module_rwx_enabled(void)
{
 return 0 && strict_kernel_rwx_enabled();
}
# 395 "./arch/powerpc/include/asm/mmu.h"
# 1 "./arch/powerpc/include/asm/book3s/64/mmu.h" 1
# 17 "./arch/powerpc/include/asm/book3s/64/mmu.h"
struct mmu_psize_def {
 unsigned int shift;
 int penc[16];
 unsigned int tlbiel;
 unsigned long avpnm;
 unsigned long h_rpt_pgsize;
 union {
  unsigned long sllp;
  unsigned long ap;
 };
};
extern struct mmu_psize_def mmu_psize_defs[16];



# 1 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h" 1
# 20 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
# 1 "./arch/powerpc/include/asm/book3s/64/pgtable.h" 1




# 1 "./include/asm-generic/pgtable-nop4d.h" 1








typedef struct { pgd_t pgd; } p4d_t;
# 21 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_bad(pgd_t pgd) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_present(pgd_t pgd) { return 1; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgd_clear(pgd_t *pgd) { }
# 35 "./include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
{
 return (p4d_t *)pgd;
}
# 6 "./arch/powerpc/include/asm/book3s/64/pgtable.h" 2


# 1 "./include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

void dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 9 "./arch/powerpc/include/asm/book3s/64/pgtable.h" 2

# 1 "./include/linux/sizes.h" 1
# 11 "./arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 186 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
extern unsigned long __pte_index_size;
extern unsigned long __pmd_index_size;
extern unsigned long __pud_index_size;
extern unsigned long __pgd_index_size;
extern unsigned long __pud_cache_index;
# 202 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
extern unsigned long __pte_table_size;
extern unsigned long __pmd_table_size;
extern unsigned long __pud_table_size;
extern unsigned long __pgd_table_size;





extern unsigned long __pmd_val_bits;
extern unsigned long __pud_val_bits;
extern unsigned long __pgd_val_bits;




extern unsigned long __pte_frag_nr;

extern unsigned long __pte_frag_size_shift;



extern unsigned long __pmd_frag_nr;

extern unsigned long __pmd_frag_size_shift;
# 263 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
enum pgtable_index {
 PTE_INDEX = 0,
 PMD_INDEX,
 PUD_INDEX,
 PGD_INDEX,



 HTLB_16M_INDEX,
 HTLB_16G_INDEX,
};

extern unsigned long __vmalloc_start;
extern unsigned long __vmalloc_end;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ioremap_max_order(void)
{
 if (radix_enabled())
  return ((16 + __pte_index_size) + __pmd_index_size);
 return 7 + 16;
}


extern unsigned long __kernel_virt_start;
extern unsigned long __kernel_io_start;
extern unsigned long __kernel_io_end;




extern struct page *vmemmap;
extern unsigned long pci_io_base;


# 1 "./arch/powerpc/include/asm/book3s/64/hash.h" 1
# 16 "./arch/powerpc/include/asm/book3s/64/hash.h"
# 1 "./arch/powerpc/include/asm/book3s/64/hash-64k.h" 1
# 92 "./arch/powerpc/include/asm/book3s/64/hash-64k.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) real_pte_t __real_pte(pte_t pte, pte_t *ptep, int offset)
{
 real_pte_t rpte;
 unsigned long *hidxp;

 rpte.pte = pte;






 __asm__ __volatile__ ("lwsync" " " : : :"memory");

 hidxp = (unsigned long *)(ptep + offset);
 rpte.hidx = *hidxp;
 return rpte;
}
# 123 "./arch/powerpc/include/asm/book3s/64/hash-64k.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __rpte_to_hidx(real_pte_t rpte, unsigned long index)
{
 return ((((rpte.hidx >> (index << 2)) & 0xfUL) + 0xfUL) & 0xfUL);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_set_hidx(pte_t *ptep, real_pte_t rpte,
      unsigned int subpg_index,
      unsigned long hidx, int offset)
{
 unsigned long *hidxp = (unsigned long *)(ptep + offset);

 rpte.hidx &= ~(0xfUL << (subpg_index << 2));
 *hidxp = rpte.hidx | (((hidx + 0x1UL) & 0xfUL) << (subpg_index << 2));






 __asm__ __volatile__ ("lwsync" " " : : :"memory");


 return 0x0UL;
}


extern bool __rpte_sub_valid(real_pte_t rpte, unsigned long index);
# 173 "./arch/powerpc/include/asm/book3s/64/hash-64k.h"
extern int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
      unsigned long pfn, unsigned long size, pgprot_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hash__remap_4k_pfn(struct vm_area_struct *vma, unsigned long addr,
     unsigned long pfn, pgprot_t prot)
{
 if (pfn > ((((1UL << 53) - 1) & ((~((1 << 16) - 1)))) >> 16)) {
  ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("remap_4k_pfn called with wrong pfn value\n"); do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/hash-64k.h"), "i" (179), "i" ((1 << 0) | ((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
  return -22;
 }
 return remap_pfn_range(vma, addr, pfn, (1UL << 16),
          ((pgprot_t) { (((prot).pgprot) | 0x02000) }));
}
# 202 "./arch/powerpc/include/asm/book3s/64/hash-64k.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *get_hpte_slot_array(pmd_t *pmdp)
{






 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 return *(char **)(pmdp + (1 << __pmd_index_size));


}
# 227 "./arch/powerpc/include/asm/book3s/64/hash-64k.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int hpte_valid(unsigned char *hpte_slot_array, int index)
{
 return hpte_slot_array[index] & 0x1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int hpte_hash_index(unsigned char *hpte_slot_array,
        int index)
{
 return hpte_slot_array[index] >> 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_hpte_slot_valid(unsigned char *hpte_slot_array,
     unsigned int index, unsigned int hidx)
{
 hpte_slot_array[index] = (hidx << 1) | 0x1;
}
# 260 "./arch/powerpc/include/asm/book3s/64/hash-64k.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hash__pmd_trans_huge(pmd_t pmd)
{
 return !!((pmd_val(pmd) & (0x4000000000000000UL | 0x02000 | 0x00800)) ==
    (0x4000000000000000UL | 0x02000));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hash__pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return (((pmd_raw(pmd_a) ^ pmd_raw(pmd_b)) & ~(( __be64)(__u64)((0x00040UL | 0x0080000000000000UL | 0x01000)))) == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t hash__pmd_mkhuge(pmd_t pmd)
{
 return ((pmd_t) { (( __be64)(__u64)(pmd_val(pmd) | (0x4000000000000000UL | 0x02000))) });
}

extern unsigned long hash__pmd_hugepage_update(struct mm_struct *mm,
        unsigned long addr, pmd_t *pmdp,
        unsigned long clr, unsigned long set);
extern pmd_t hash__pmdp_collapse_flush(struct vm_area_struct *vma,
       unsigned long address, pmd_t *pmdp);
extern void hash__pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
      pgtable_t pgtable);
extern pgtable_t hash__pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
extern pmd_t hash__pmdp_huge_get_and_clear(struct mm_struct *mm,
           unsigned long addr, pmd_t *pmdp);
extern int hash__has_transparent_hugepage(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t hash__pmd_mkdevmap(pmd_t pmd)
{
 return ((pmd_t) { (( __be64)(__u64)(pmd_val(pmd) | (0x4000000000000000UL | 0x02000 | 0x00800))) });
}
# 17 "./arch/powerpc/include/asm/book3s/64/hash.h" 2
# 115 "./arch/powerpc/include/asm/book3s/64/hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_region_id(unsigned long ea)
{
 int region_id;
 int id = (ea >> 60UL);

 if (id == 0)
  return 0;

 if (id != (0xc000000000000000UL >> 60))
  return (((((unsigned long)((0xc008000000000000UL + (1UL << 49)) + (1UL << 49)) - 0xc008000000000000UL) >> 49) + 2) + 1);

 if (ea < 0xc008000000000000UL)
  return 1;

 do { extern void __compiletime_assert_6(void) ; if (!(!(((((unsigned long)0xc008000000000000UL - 0xc008000000000000UL) >> 49) + 2) != 2))) __compiletime_assert_6(); } while (0);

 region_id = ((((unsigned long)ea - 0xc008000000000000UL) >> 49) + 2);
 return region_id;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hash__p4d_bad(p4d_t p4d)
{
 return ((pgd_val((p4d).pgd)) == 0);
}





extern void hpte_need_flush(struct mm_struct *mm, unsigned long addr,
       pte_t *ptep, unsigned long pte, int huge);
unsigned long htab_convert_pte_flags(unsigned long pteflags, unsigned long flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hash__pte_update(struct mm_struct *mm,
      unsigned long addr,
      pte_t *ptep, unsigned long clr,
      unsigned long set,
      int huge)
{
 __be64 old_be, tmp_be;
 unsigned long old;

 __asm__ __volatile__(
 "1:	ldarx	%0,0,%3		# pte_update\n	and.	%1,%0,%6\n	bne-	1b \n	andc	%1,%0,%4 \n	or	%1,%1,%7\n	stdcx.	%1,0,%3 \n	bne-	1b"






 : "=&r" (old_be), "=&r" (tmp_be), "=m" (*ptep)
 : "r" (ptep), "r" ((( __be64)(__u64)(clr))), "m" (*ptep),
   "r" ((( __be64)(__u64)(0x00040UL))), "r" ((( __be64)(__u64)(set)))
 : "cc" );

 if (!huge)
  assert_pte_locked(mm, addr);

 old = (( __u64)(__be64)(old_be));
 if (old & 0x0080000000000000UL)
  hpte_need_flush(mm, addr, ptep, old, huge);

 return old;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__ptep_set_access_flags(pte_t *ptep, pte_t entry)
{
 __be64 old, tmp, val, mask;

 mask = (( __be64)(__u64)(0x00080 | 0x00100 | 0x00004 | 0x00002 | 0x00001 | 0x00200));


 val = pte_raw(entry) & mask;

 __asm__ __volatile__(
 "1:	ldarx	%0,0,%4\n		and.	%1,%0,%6\n		bne-	1b \n		or	%0,%3,%0\n		stdcx.	%0,0,%4\n		bne-	1b"





 :"=&r" (old), "=&r" (tmp), "=m" (*ptep)
 :"r" (val), "r" (ptep), "m" (*ptep), "r" ((( __be64)(__u64)(0x00040UL)))
 :"cc");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hash__pte_same(pte_t pte_a, pte_t pte_b)
{
 return (((pte_raw(pte_a) ^ pte_raw(pte_b)) & ~(( __be64)(__u64)((0x00040UL | 0x0080000000000000UL | 0x01000)))) == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hash__pte_none(pte_t pte)
{
 return (pte_val(pte) & ~(0x00040UL | 0x0080000000000000UL | 0x01000)) == 0;
}

unsigned long pte_get_hash_gslot(unsigned long vpn, unsigned long shift,
  int ssize, real_pte_t rpte, unsigned int subpg_index);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__set_pte_at(struct mm_struct *mm, unsigned long addr,
      pte_t *ptep, pte_t pte, int percpu)
{




 *ptep = pte;
}


extern void hpte_do_hugepage_flush(struct mm_struct *mm, unsigned long addr,
       pmd_t *pmdp, unsigned long old_pmd);
# 247 "./arch/powerpc/include/asm/book3s/64/hash.h"
int hash__map_kernel_page(unsigned long ea, unsigned long pa, pgprot_t prot);
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) hash__vmemmap_create_mapping(unsigned long start,
           unsigned long page_size,
           unsigned long phys);
extern void hash__vmemmap_remove_mapping(unsigned long start,
         unsigned long page_size);

int hash__create_section_mapping(unsigned long start, unsigned long end,
     int nid, pgprot_t prot);
int hash__remove_section_mapping(unsigned long start, unsigned long end);
# 300 "./arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 1 "./arch/powerpc/include/asm/book3s/64/radix.h" 1
# 12 "./arch/powerpc/include/asm/book3s/64/radix.h"
# 1 "./arch/powerpc/include/asm/book3s/64/radix-64k.h" 1
# 13 "./arch/powerpc/include/asm/book3s/64/radix.h" 2





# 1 "./arch/powerpc/include/asm/book3s/64/tlbflush-radix.h" 1




# 1 "./arch/powerpc/include/asm/hvcall.h" 1
# 459 "./arch/powerpc/include/asm/hvcall.h"
long plpar_hcall_norets(unsigned long opcode, ...);


long plpar_hcall_norets_notrace(unsigned long opcode, ...);
# 475 "./arch/powerpc/include/asm/hvcall.h"
long plpar_hcall(unsigned long opcode, unsigned long *retbuf, ...);
# 489 "./arch/powerpc/include/asm/hvcall.h"
long plpar_hcall_raw(unsigned long opcode, unsigned long *retbuf, ...);
# 500 "./arch/powerpc/include/asm/hvcall.h"
long plpar_hcall9(unsigned long opcode, unsigned long *retbuf, ...);
long plpar_hcall9_raw(unsigned long opcode, unsigned long *retbuf, ...);

struct hvcall_mpp_data {
 unsigned long entitled_mem;
 unsigned long mapped_mem;
 unsigned short group_num;
 unsigned short pool_num;
 unsigned char mem_weight;
 unsigned char unallocated_mem_weight;
 unsigned long unallocated_entitlement;
 unsigned long pool_size;
 signed long loan_request;
 unsigned long backing_mem;
};

int h_get_mpp(struct hvcall_mpp_data *);

struct hvcall_mpp_x_data {
 unsigned long coalesced_bytes;
 unsigned long pool_coalesced_bytes;
 unsigned long pool_purr_cycles;
 unsigned long pool_spurr_cycles;
 unsigned long reserved[3];
};

int h_get_mpp_x(struct hvcall_mpp_x_data *mpp_x_data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int get_longbusy_msecs(int longbusy_rc)
{
 switch (longbusy_rc) {
 case 9900:
  return 1;
 case 9901:
  return 10;
 case 9902:
  return 100;
 case 9903:
  return 1000;
 case 9904:
  return 10000;
 case 9905:
  return 100000;
 default:
  return 1;
 }
}

struct h_cpu_char_result {
 u64 character;
 u64 behaviour;
};





struct hv_guest_state {
 u64 version;
 u32 lpid;
 u32 vcpu_token;

 u64 lpcr;
 u64 pcr;
 u64 amor;
 u64 dpdes;
 u64 hfscr;
 s64 tb_offset;
 u64 dawr0;
 u64 dawrx0;
 u64 ciabr;
 u64 hdec_expiry;
 u64 purr;
 u64 spurr;
 u64 ic;
 u64 vtb;
 u64 hdar;
 u64 hdsisr;
 u64 heir;
 u64 asdr;

 u64 srr0;
 u64 srr1;
 u64 sprg[4];
 u64 pidr;
 u64 cfar;
 u64 ppr;

 u64 dawr1;
 u64 dawrx1;

};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hv_guest_state_size(unsigned int version)
{
 switch (version) {
 case 1:
  return (__builtin_offsetof(struct hv_guest_state, ppr) + sizeof((((struct hv_guest_state *)0)->ppr)));
 case 2:
  return (__builtin_offsetof(struct hv_guest_state, dawrx1) + sizeof((((struct hv_guest_state *)0)->dawrx1)));
 default:
  return -1;
 }
}






struct hv_get_perf_counter_info_params {
 __be32 counter_request;
 __be32 starting_index;
 __be16 secondary_index;
 __be16 returned_values;
 __be32 detail_rc;





 __be16 cv_element_size;


 __u8 counter_info_version_in;


 __u8 counter_info_version_out;
 __u8 reserved[0xC];
 __u8 counter_value[];
} __attribute__((__packed__));





struct hv_gpci_request_buffer {
 struct hv_get_perf_counter_info_params params;
 uint8_t bytes[(4096 - sizeof(struct hv_get_perf_counter_info_params))];
} __attribute__((__packed__));
# 6 "./arch/powerpc/include/asm/book3s/64/tlbflush-radix.h" 2





struct vm_area_struct;
struct mm_struct;
struct mmu_gather;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 psize_to_rpti_pgsize(unsigned long psize)
{
 if (psize == 0)
  return 0x01;
 if (psize == 2)
  return 0x02;
 if (psize == 7)
  return 0x04;
 if (psize == 13)
  return 0x08;
 return (-1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_get_ap(int psize)
{
 return mmu_psize_defs[psize].ap;
}


extern void radix__tlbiel_all(unsigned int action);
extern void radix__flush_tlb_lpid_page(unsigned int lpid,
     unsigned long addr,
     unsigned long page_size);
extern void radix__flush_pwc_lpid(unsigned int lpid);
extern void radix__flush_all_lpid(unsigned int lpid);
extern void radix__flush_all_lpid_guest(unsigned int lpid);
# 63 "./arch/powerpc/include/asm/book3s/64/tlbflush-radix.h"
extern void radix__flush_hugetlb_tlb_range(struct vm_area_struct *vma,
        unsigned long start, unsigned long end);
extern void radix__flush_tlb_range_psize(struct mm_struct *mm, unsigned long start,
      unsigned long end, int psize);
void radix__flush_tlb_pwc_range_psize(struct mm_struct *mm, unsigned long start,
          unsigned long end, int psize);
extern void radix__flush_pmd_tlb_range(struct vm_area_struct *vma,
           unsigned long start, unsigned long end);
extern void radix__flush_tlb_range(struct vm_area_struct *vma, unsigned long start,
       unsigned long end);
extern void radix__flush_tlb_kernel_range(unsigned long start, unsigned long end);

extern void radix__local_flush_tlb_mm(struct mm_struct *mm);
extern void radix__local_flush_all_mm(struct mm_struct *mm);
extern void radix__local_flush_tlb_page(struct vm_area_struct *vma, unsigned long vmaddr);
extern void radix__local_flush_tlb_page_psize(struct mm_struct *mm, unsigned long vmaddr,
           int psize);
extern void radix__tlb_flush(struct mmu_gather *tlb);

extern void radix__flush_tlb_mm(struct mm_struct *mm);
extern void radix__flush_all_mm(struct mm_struct *mm);
extern void radix__flush_tlb_page(struct vm_area_struct *vma, unsigned long vmaddr);
extern void radix__flush_tlb_page_psize(struct mm_struct *mm, unsigned long vmaddr,
     int psize);






extern void radix__flush_tlb_pwc(struct mmu_gather *tlb, unsigned long addr);
extern void radix__flush_tlb_collapsed_pmd(struct mm_struct *mm, unsigned long addr);
extern void radix__flush_tlb_all(void);
# 19 "./arch/powerpc/include/asm/book3s/64/radix.h" 2
# 1 "./arch/powerpc/include/asm/cpu_has_feature.h" 1
# 10 "./arch/powerpc/include/asm/cpu_has_feature.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool early_cpu_has_feature(unsigned long feature)
{
 return !!((((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x00000008UL | 0x0000000000040000UL | 0x0000000010000000UL | 0x0000000080000000UL | 0x0000000000002000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000020000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000002000000000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000040000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x0000004000000000UL | 0x0000010000000000UL ) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x0000000000200000UL | 0x0000000000800000UL | 0x0000000010000000UL | 0x0000000020000000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x00000002UL | 0x0000000000400000UL | 0x0000000000001000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) & ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | 0x0000020000000000UL) & ~0x0000000000002000UL & ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x00000008UL | 0x0000000000040000UL | 0x0000000010000000UL | 0x0000000080000000UL | 0x0000000000002000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000020000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000002000000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000040000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x0000004000000000UL | 0x0000010000000000UL ) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | 0x0000020000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x0000000000200000UL | 0x0000000000800000UL | 0x0000000010000000UL | 0x0000000020000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x00000002UL | 0x0000000000400000UL | 0x0000000000001000UL | 0x0000010000000000UL) | 0x0000000004000000UL | 0x00000002UL | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0002000000000000UL | 0x0000080000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0000080000000000UL | 0x0000100000000000UL | 0x0000200000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000000000020000UL | 0x0004000000000000UL | 0x0000008000000000UL | 0x0008000000000000UL)) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) & ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0002000000000000UL | 0x0000080000000000UL) & (0x00000080UL | 0x00000040UL | 0x00000100UL | 0x00000001UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000008000000000UL | 0x0000000000008000UL | 0x0000000000010000UL)) & feature) ||
    (((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x00000008UL | 0x0000000000040000UL | 0x0000000010000000UL | 0x0000000080000000UL | 0x0000000000002000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000020000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000002000000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000040000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x0000004000000000UL | 0x0000010000000000UL ) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | 0x0000020000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x0000000000200000UL | 0x0000000000800000UL | 0x0000000010000000UL | 0x0000000020000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x00000002UL | 0x0000000000400000UL | 0x0000000000001000UL | 0x0000010000000000UL) | 0x0000000004000000UL | 0x00000002UL | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0002000000000000UL | 0x0000080000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0000080000000000UL | 0x0000100000000000UL | 0x0000200000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000000000020000UL | 0x0004000000000000UL | 0x0000008000000000UL | 0x0008000000000000UL)) & cur_cpu_spec->cpu_features & feature));
}






extern struct static_key_true cpu_feature_keys[64];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool cpu_has_feature(unsigned long feature)
{
 int i;
# 39 "./arch/powerpc/include/asm/cpu_has_feature.h"
 if (((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x00000008UL | 0x0000000000040000UL | 0x0000000010000000UL | 0x0000000080000000UL | 0x0000000000002000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000020000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000002000000000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000040000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x0000004000000000UL | 0x0000010000000000UL ) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x0000000000200000UL | 0x0000000000800000UL | 0x0000000010000000UL | 0x0000000020000000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x00000002UL | 0x0000000000400000UL | 0x0000000000001000UL | 0x0000010000000000UL) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) & ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | 0x0000020000000000UL) & ~0x0000000000002000UL & ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x00000008UL | 0x0000000000040000UL | 0x0000000010000000UL | 0x0000000080000000UL | 0x0000000000002000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000020000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000002000000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000040000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x0000004000000000UL | 0x0000010000000000UL ) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | 0x0000020000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x0000000000200000UL | 0x0000000000800000UL | 0x0000000010000000UL | 0x0000000020000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x00000002UL | 0x0000000000400000UL | 0x0000000000001000UL | 0x0000010000000000UL) | 0x0000000004000000UL | 0x00000002UL | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0002000000000000UL | 0x0000080000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0000080000000000UL | 0x0000100000000000UL | 0x0000200000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000000000020000UL | 0x0004000000000000UL | 0x0000008000000000UL | 0x0008000000000000UL)) & (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) & ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0002000000000000UL | 0x0000080000000000UL) & (0x00000080UL | 0x00000040UL | 0x00000100UL | 0x00000001UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000008000000000UL | 0x0000000000008000UL | 0x0000000000010000UL)) & feature)
  return true;

 if (!(((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x00000008UL | 0x0000000000040000UL | 0x0000000010000000UL | 0x0000000080000000UL | 0x0000000000002000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000020000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000002000000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000040000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x0000004000000000UL | 0x0000010000000000UL ) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | 0x0000020000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000008000000000UL | 0x0000000000010000UL | 0x0000001000000000UL ) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x00000002UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x0000000000200000UL | 0x0000000000800000UL | 0x0000000010000000UL | 0x0000000020000000UL | 0x0000010000000000UL) | (0x00000080UL | (0x00000100UL) | 0x00000002UL | 0x0000000000400000UL | 0x0000000000001000UL | 0x0000010000000000UL) | 0x0000000004000000UL | 0x00000002UL | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0002000000000000UL | 0x0000080000000000UL) | ((0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000001000000000UL | 0x0000000000020000UL | 0x0000400000000000UL | 0x0001000000000000UL | 0x0000800000000000UL) | 0x0000080000000000UL | 0x0000100000000000UL | 0x0000200000000000UL) | (0x00000080UL | (0x00000100UL) | 0x0000000000080000UL | 0x0000000000008000UL | 0x0000000000040000UL | 0x0000000000100000UL | 0x00000001UL | 0x0000000000400000UL | 0x0000000001000000UL | 0x0000000000001000UL | 0x0000000002000000UL | 0x0000000008000000UL | 0x0000000080000000UL | 0x0000000100000000UL | 0x0000000200000000UL | 0x0000002000000000UL | 0x0000000000002000UL | 0x0000000800000000UL | 0x00000004UL | 0x0000004000000000UL | 0x0000000000010000UL | 0x0000000000020000UL | 0x0004000000000000UL | 0x0000008000000000UL | 0x0008000000000000UL)) & feature))
  return false;

 i = __builtin_ctzl(feature);
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&cpu_feature_keys[i]), struct static_key_true)) branch = !arch_static_branch(&(&cpu_feature_keys[i])->key, true); else if (__builtin_types_compatible_p(typeof(*&cpu_feature_keys[i]), struct static_key_false)) branch = !arch_static_branch_jump(&(&cpu_feature_keys[i])->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); });
}
# 20 "./arch/powerpc/include/asm/book3s/64/radix.h" 2
# 140 "./arch/powerpc/include/asm/book3s/64/radix.h"
extern void radix__ptep_set_access_flags(struct vm_area_struct *vma, pte_t *ptep,
      pte_t entry, unsigned long address,
      int psize);

extern void radix__ptep_modify_prot_commit(struct vm_area_struct *vma,
        unsigned long addr, pte_t *ptep,
        pte_t old_pte, pte_t pte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __radix_pte_update(pte_t *ptep, unsigned long clr,
            unsigned long set)
{
 __be64 old_be, tmp_be;

 __asm__ __volatile__(
 "1:	ldarx	%0,0,%3		# pte_update\n"
 "	andc	%1,%0,%5	\n"
 "	or	%1,%1,%4	\n"
 "	stdcx.	%1,0,%3		\n"
 "	bne-	1b"
 : "=&r" (old_be), "=&r" (tmp_be), "=m" (*ptep)
 : "r" (ptep), "r" ((( __be64)(__u64)(set))), "r" ((( __be64)(__u64)(clr)))
 : "cc" );

 return (( __u64)(__be64)(old_be));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long radix__pte_update(struct mm_struct *mm,
     unsigned long addr,
     pte_t *ptep, unsigned long clr,
     unsigned long set,
     int huge)
{
 unsigned long old_pte;

 old_pte = __radix_pte_update(ptep, clr, set);
 if (!huge)
  assert_pte_locked(mm, addr);

 return old_pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t radix__ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long addr,
         pte_t *ptep, int full)
{
 unsigned long old_pte;

 if (full) {
  old_pte = pte_val(*ptep);
  *ptep = ((pte_t) { (( __be64)(__u64)(0)) });
 } else
  old_pte = radix__pte_update(mm, addr, ptep, ~0ul, 0, 0);

 return ((pte_t) { (( __be64)(__u64)(old_pte)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__pte_same(pte_t pte_a, pte_t pte_b)
{
 return ((pte_raw(pte_a) ^ pte_raw(pte_b)) == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__pte_none(pte_t pte)
{
 return (pte_val(pte) & ~(0x00080 | 0x00100)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radix__set_pte_at(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep, pte_t pte, int percpu)
{
 *ptep = pte;
# 230 "./arch/powerpc/include/asm/book3s/64/radix.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__pmd_bad(pmd_t pmd)
{
 return !!(pmd_val(pmd) & 0x60000000000000e0UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return ((pmd_raw(pmd_a) ^ pmd_raw(pmd_b)) == 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__pud_bad(pud_t pud)
{
 return !!(pud_val(pud) & 0x60000000000000e0UL);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__p4d_bad(p4d_t p4d)
{
 return !!((pgd_val((p4d).pgd)) & 0x60000000000000e0UL);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__pmd_trans_huge(pmd_t pmd)
{
 return (pmd_val(pmd) & (0x4000000000000000UL | 0x00800)) == 0x4000000000000000UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t radix__pmd_mkhuge(pmd_t pmd)
{
 return ((pmd_t) { (( __be64)(__u64)(pmd_val(pmd) | 0x4000000000000000UL)) });
}

extern unsigned long radix__pmd_hugepage_update(struct mm_struct *mm, unsigned long addr,
       pmd_t *pmdp, unsigned long clr,
       unsigned long set);
extern pmd_t radix__pmdp_collapse_flush(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp);
extern void radix__pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
     pgtable_t pgtable);
extern pgtable_t radix__pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
extern pmd_t radix__pmdp_huge_get_and_clear(struct mm_struct *mm,
          unsigned long addr, pmd_t *pmdp);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix__has_transparent_hugepage(void)
{

 if (mmu_psize_defs[7].shift == (16 + __pte_index_size))
  return 1;
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t radix__pmd_mkdevmap(pmd_t pmd)
{
 return ((pmd_t) { (( __be64)(__u64)(pmd_val(pmd) | (0x4000000000000000UL | 0x00800))) });
}

extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) radix__vmemmap_create_mapping(unsigned long start,
          unsigned long page_size,
          unsigned long phys);
extern void radix__vmemmap_remove_mapping(unsigned long start,
        unsigned long page_size);

extern int radix__map_kernel_page(unsigned long ea, unsigned long pa,
     pgprot_t flags, unsigned int psz);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long radix__get_tree_size(void)
{
 unsigned long rts_field;







 rts_field = (0x5UL << 5);
 rts_field |= (0x2UL << 61);

 return rts_field;
}


int radix__create_section_mapping(unsigned long start, unsigned long end,
      int nid, pgprot_t prot);
int radix__remove_section_mapping(unsigned long start, unsigned long end);
# 301 "./arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 310 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
# 1 "./arch/powerpc/include/asm/book3s/64/pgtable-64k.h" 1
# 17 "./arch/powerpc/include/asm/book3s/64/pgtable-64k.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_huge(pmd_t pmd)
{



 return !!(pmd_raw(pmd) & (( __be64)(__u64)(0x4000000000000000UL)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_huge(pud_t pud)
{



 return !!(pud_raw(pud) & (( __be64)(__u64)(0x4000000000000000UL)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_huge(pgd_t pgd)
{



 return !!(pgd_raw(pgd) & (( __be64)(__u64)(0x4000000000000000UL)));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hugepd_ok(hugepd_t hpd)
{
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_hugepd_cache_index(int index)
{
 do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/pgtable-64k.h"), "i" (59), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int remap_4k_pfn(struct vm_area_struct *vma, unsigned long addr,
          unsigned long pfn, pgprot_t prot)
{
 if (radix_enabled())
  do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/pgtable-64k.h"), "i" (68), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0);
 return hash__remap_4k_pfn(vma, addr, pfn, prot);
}
# 311 "./arch/powerpc/include/asm/book3s/64/pgtable.h" 2
# 365 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_update(struct mm_struct *mm, unsigned long addr,
           pte_t *ptep, unsigned long clr,
           unsigned long set, int huge)
{
 if (radix_enabled())
  return radix__pte_update(mm, addr, ptep, clr, set, huge);
 return hash__pte_update(mm, addr, ptep, clr, set, huge);
}
# 383 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ptep_test_and_clear_young(struct mm_struct *mm,
           unsigned long addr, pte_t *ptep)
{
 unsigned long old;

 if ((pte_raw(*ptep) & (( __be64)(__u64)(0x00100 | 0x0080000000000000UL))) == 0)
  return 0;
 old = pte_update(mm, addr, ptep, 0x00100, 0, 0);
 return (old & 0x00100) != 0;
}
# 419 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __pte_write(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0x00002)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_savedwrite(pte_t pte)
{







 return !(pte_raw(pte) & (( __be64)(__u64)((0x00004 | 0x00002 | 0x00001) | 0x00008)));
}
# 445 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_write(pte_t pte)
{
 return __pte_write(pte) || pte_savedwrite(pte);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_read(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0x00004)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_set_wrprotect(struct mm_struct *mm, unsigned long addr,
          pte_t *ptep)
{
 if (__pte_write(*ptep))
  pte_update(mm, addr, ptep, 0x00002, 0, 0);
 else if (__builtin_expect(!!(pte_savedwrite(*ptep)), 0))
  pte_update(mm, addr, ptep, 0, 0x00008, 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void huge_ptep_set_wrprotect(struct mm_struct *mm,
        unsigned long addr, pte_t *ptep)
{




 if (__pte_write(*ptep))
  pte_update(mm, addr, ptep, 0x00002, 0, 1);
 else if (__builtin_expect(!!(pte_savedwrite(*ptep)), 0))
  pte_update(mm, addr, ptep, 0, 0x00008, 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear(struct mm_struct *mm,
           unsigned long addr, pte_t *ptep)
{
 unsigned long old = pte_update(mm, addr, ptep, ~0UL, 0, 0);
 return ((pte_t) { (( __be64)(__u64)(old)) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long addr,
         pte_t *ptep, int full)
{
 if (full && radix_enabled()) {




  return radix__ptep_get_and_clear_full(mm, addr, ptep, full);
 }
 return ptep_get_and_clear(mm, addr, ptep);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t * ptep)
{
 pte_update(mm, addr, ptep, ~0UL, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_dirty(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0x00080)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_young(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0x00100)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_special(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0x00400)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_exec(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0x00001)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_soft_dirty(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0x00200)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00200))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0x00200))) });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_protnone(pte_t pte)
{
 return (pte_raw(pte) & (( __be64)(__u64)(0x8000000000000000UL | 0x4000000000000000UL | (0x00004 | 0x00002 | 0x00001)))) ==
  (( __be64)(__u64)(0x8000000000000000UL | 0x4000000000000000UL));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mk_savedwrite(pte_t pte)
{





 ((void)(sizeof(( long)((pte_raw(pte) & (( __be64)(__u64)(0x8000000000000000UL | (0x00004 | 0x00002 | 0x00001) | 0x00008))) != (( __be64)(__u64)(0x8000000000000000UL | 0x00008))))));

 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0x00008))) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_clear_savedwrite(pte_t pte)
{



 ((void)(sizeof(( long)(!pte_protnone(pte)))));
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00008))) });
}
# 585 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_hw_valid(pte_t pte)
{
 return (pte_raw(pte) & (( __be64)(__u64)(0x8000000000000000UL | 0x4000000000000000UL))) ==
  (( __be64)(__u64)(0x8000000000000000UL | 0x4000000000000000UL));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_present(pte_t pte)
{







 if (pte_hw_valid(pte))
  return true;
 return (pte_raw(pte) & (( __be64)(__u64)(0x2000000000000000UL | 0x4000000000000000UL))) ==
  (( __be64)(__u64)(0x2000000000000000UL | 0x4000000000000000UL));
}


extern bool arch_pte_access_permitted(u64 pte, bool write, bool execute);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_user(pte_t pte)
{
 return !(pte_raw(pte) & (( __be64)(__u64)(0x00008)));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_access_permitted(pte_t pte, bool write)
{




 if (!pte_present(pte) || !pte_user(pte) || !pte_read(pte))
  return false;

 if (write && !pte_write(pte))
  return false;

 return arch_pte_access_permitted(pte_val(pte), write, 0);
}
# 643 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pfn_pte(unsigned long pfn, pgprot_t pgprot)
{
 ((void)(sizeof(( long)(pfn >> (64 - 16)))));
 ((void)(sizeof(( long)((pfn << 16) & ~(((1UL << 53) - 1) & ((~((1 << 16) - 1))))))));

 return ((pte_t) { (( __be64)(__u64)(((pte_basic_t)pfn << 16) | ((pgprot).pgprot) | 0x4000000000000000UL)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_pfn(pte_t pte)
{
 return (pte_val(pte) & (((1UL << 53) - 1) & ((~((1 << 16) - 1))))) >> 16;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_wrprotect(pte_t pte)
{
 if (__builtin_expect(!!(pte_savedwrite(pte)), 0))
  return pte_clear_savedwrite(pte);
 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0x00002))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_exprotect(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0x00001))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkclean(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0x00080))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkold(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0x00100))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkexec(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00001))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkwrite(pte_t pte)
{



 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)((0x00004 | 0x00002)))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdirty(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00080 | 0x00200))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkyoung(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00100))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkspecial(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00400))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkhuge(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdevmap(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00400 | 0x00800))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkprivileged(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x00008))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkuser(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0x00008))) });
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_devmap(pte_t pte)
{
 u64 mask = (( __be64)(__u64)(0x00800 | 0x4000000000000000UL));

 return (pte_raw(pte) & mask) == mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{

 return ((pte_t) { ((pte_raw(pte) & (( __be64)(__u64)(((((1UL << 53) - 1) & ((~((1 << 16) - 1)))) | (0x00040UL | 0x0080000000000000UL | 0x01000) | 0x00080 | 0x00100 | 0x00400 | 0x4000000000000000UL | 0x00200 | 0x00800)))) | (( __be64)(__u64)(((newprot).pgprot)))) });

}
# 783 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0UL))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_swp_soft_dirty(pte_t pte)
{
 return !!(pte_raw(pte) & (( __be64)(__u64)(0UL)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return ((pte_t) { (pte_raw(pte) & (( __be64)(__u64)(~0UL))) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool check_pte_access(unsigned long access, unsigned long ptev)
{



 if (access & ~ptev)
  return false;



 if ((access & 0x00008) != (ptev & 0x00008))
  return false;

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ptep_set_access_flags(struct vm_area_struct *vma,
        pte_t *ptep, pte_t entry,
        unsigned long address,
        int psize)
{
 if (radix_enabled())
  return radix__ptep_set_access_flags(vma, ptep, entry,
          address, psize);
 return hash__ptep_set_access_flags(ptep, entry);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_same(pte_t pte_a, pte_t pte_b)
{
 if (radix_enabled())
  return radix__pte_same(pte_a, pte_b);
 return hash__pte_same(pte_a, pte_b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_none(pte_t pte)
{
 if (radix_enabled())
  return radix__pte_none(pte);
 return hash__pte_none(pte);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_pte_at(struct mm_struct *mm, unsigned long addr,
    pte_t *ptep, pte_t pte, int percpu)
{

 ((void)(sizeof(( long)(!(pte_raw(pte) & (( __be64)(__u64)(0x4000000000000000UL)))))));




 pte = ((pte_t) { (pte_raw(pte) | (( __be64)(__u64)(0x4000000000000000UL))) });

 if (radix_enabled())
  return radix__set_pte_at(mm, addr, ptep, pte, percpu);
 return hash__set_pte_at(mm, addr, ptep, pte, percpu);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_noncached(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(0x00010 | 0x00020 | 0x00030)) | 0x00020) });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_noncached_wc(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(0x00010 | 0x00020 | 0x00030)) | 0x00030) });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_cached(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(0x00010 | 0x00020 | 0x00030))) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_writecombine(pgprot_t prot)
{
 return pgprot_noncached_wc(prot);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pte_ci(pte_t pte)
{
 __be64 pte_v = pte_raw(pte);

 if (((pte_v & (( __be64)(__u64)((0x00010 | 0x00020 | 0x00030)))) == (( __be64)(__u64)(0x00030))) ||
     ((pte_v & (( __be64)(__u64)((0x00010 | 0x00020 | 0x00030)))) == (( __be64)(__u64)(0x00020))))
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_clear(pmd_t *pmdp)
{
 if (0 && !radix_enabled()) {




  ({ bool __ret_warn_on = false; do { if (__builtin_constant_p(((pmd_val(*pmdp) & (0x0080000000000000UL | 0x4000000000000000UL)) == (0x0080000000000000UL | 0x4000000000000000UL)))) { if (!((pmd_val(*pmdp) & (0x0080000000000000UL | 0x4000000000000000UL)) == (0x0080000000000000UL | 0x4000000000000000UL))) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/pgtable.h"), "i" (907), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/pgtable.h"), "i" (907), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" ((pmd_val(*pmdp) & (0x0080000000000000UL | 0x4000000000000000UL)) == (0x0080000000000000UL | 0x4000000000000000UL)) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 }
 *pmdp = ((pmd_t) { (( __be64)(__u64)(0)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none(pmd_t pmd)
{
 return !pmd_raw(pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_present(pmd_t pmd)
{






 if (pmd_raw(pmd) & (( __be64)(__u64)(0x8000000000000000UL | 0x2000000000000000UL)))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_is_serializing(pmd_t pmd)
{
# 941 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
 if ((pmd_raw(pmd) & (( __be64)(__u64)(0x8000000000000000UL | 0x2000000000000000UL))) ==
      (( __be64)(__u64)(0x2000000000000000UL)))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_bad(pmd_t pmd)
{
 if (radix_enabled())
  return radix__pmd_bad(pmd);
 return (pmd_val(pmd) & (__pte_table_size-1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pud_clear(pud_t *pudp)
{
 if (0 && !radix_enabled()) {




  ({ bool __ret_warn_on = false; do { if (__builtin_constant_p(((pud_val(*pudp) & (0x0080000000000000UL | 0x4000000000000000UL)) == (0x0080000000000000UL | 0x4000000000000000UL)))) { if (!((pud_val(*pudp) & (0x0080000000000000UL | 0x4000000000000000UL)) == (0x0080000000000000UL | 0x4000000000000000UL))) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/pgtable.h"), "i" (962), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/pgtable.h"), "i" (962), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" ((pud_val(*pudp) & (0x0080000000000000UL | 0x4000000000000000UL)) == (0x0080000000000000UL | 0x4000000000000000UL)) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 }
 *pudp = ((pud_t) { (( __be64)(__u64)(0)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none(pud_t pud)
{
 return !pud_raw(pud);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_present(pud_t pud)
{
 return !!(pud_raw(pud) & (( __be64)(__u64)(0x8000000000000000UL)));
}

extern struct page *pud_page(pud_t pud);
extern struct page *pmd_page(pmd_t pmd);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pud_pte(pud_t pud)
{
 return ((pte_t) { (pud_raw(pud)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t pte_pud(pte_t pte)
{
 return ((pud_t) { (pte_raw(pte)) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_bad(pud_t pud)
{
 if (radix_enabled())
  return radix__pud_bad(pud);
 return (pud_val(pud) & (__pmd_table_size-1));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pud_access_permitted(pud_t pud, bool write)
{
 return pte_access_permitted(pud_pte(pud), write);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __be64 p4d_raw(p4d_t x)
{
 return pgd_raw(x.pgd);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void p4d_clear(p4d_t *p4dp)
{
 *p4dp = ((p4d_t) { ((pgd_t) { (( __be64)(__u64)(0)) }) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none(p4d_t p4d)
{
 return !p4d_raw(p4d);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_present(p4d_t p4d)
{
 return !!(p4d_raw(p4d) & (( __be64)(__u64)(0x8000000000000000UL)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t p4d_pte(p4d_t p4d)
{
 return ((pte_t) { (p4d_raw(p4d)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t pte_p4d(pte_t pte)
{
 return ((p4d_t) { ((pgd_t) { (pte_raw(pte)) }) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_bad(p4d_t p4d)
{
 if (radix_enabled())
  return radix__p4d_bad(p4d);
 return hash__p4d_bad(p4d);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool p4d_access_permitted(p4d_t p4d, bool write)
{
 return pte_access_permitted(p4d_pte(p4d), write);
}

extern struct page *p4d_page(p4d_t p4d);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *p4d_pgtable(p4d_t p4d)
{
 return (pud_t *)({ do { } while (0); (void *)(unsigned long)((phys_addr_t)((pgd_val((p4d).pgd)) & ~0xc0000000000000ffUL) | 0xc000000000000000UL); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pud_pgtable(pud_t pud)
{
 return (pmd_t *)({ do { } while (0); (void *)(unsigned long)((phys_addr_t)(pud_val(pud) & ~0xc0000000000000ffUL) | 0xc000000000000000UL); });
}
# 1073 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int map_kernel_page(unsigned long ea, unsigned long pa, pgprot_t prot)
{
 if (radix_enabled()) {




  return radix__map_kernel_page(ea, pa, prot, (1UL << 16));
 }
 return hash__map_kernel_page(ea, pa, prot);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) vmemmap_create_mapping(unsigned long start,
         unsigned long page_size,
         unsigned long phys)
{
 if (radix_enabled())
  return radix__vmemmap_create_mapping(start, page_size, phys);
 return hash__vmemmap_create_mapping(start, page_size, phys);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vmemmap_remove_mapping(unsigned long start,
       unsigned long page_size)
{
 if (radix_enabled())
  return radix__vmemmap_remove_mapping(start, page_size);
 return hash__vmemmap_remove_mapping(start, page_size);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pmd_pte(pmd_t pmd)
{
 return ((pte_t) { (pmd_raw(pmd)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pte_pmd(pte_t pte)
{
 return ((pmd_t) { (pte_raw(pte)) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *pmdp_ptep(pmd_t *pmd)
{
 return (pte_t *)pmd;
}
# 1143 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_protnone(pmd_t pmd)
{
 return pte_protnone(pmd_pte(pmd));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pmd_access_permitted(pmd_t pmd, bool write)
{
# 1166 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
 if (pmd_is_serializing(pmd))
  return false;

 return pte_access_permitted(pmd_pte(pmd), write);
}


extern pmd_t pfn_pmd(unsigned long pfn, pgprot_t pgprot);
extern pmd_t mk_pmd(struct page *page, pgprot_t pgprot);
extern pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot);
extern void set_pmd_at(struct mm_struct *mm, unsigned long addr,
         pmd_t *pmdp, pmd_t pmd);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_cache_pmd(struct vm_area_struct *vma,
     unsigned long addr, pmd_t *pmd)
{
}

extern int hash__has_transparent_hugepage(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int has_transparent_hugepage(void)
{
 if (radix_enabled())
  return radix__has_transparent_hugepage();
 return hash__has_transparent_hugepage();
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
pmd_hugepage_update(struct mm_struct *mm, unsigned long addr, pmd_t *pmdp,
      unsigned long clr, unsigned long set)
{
 if (radix_enabled())
  return radix__pmd_hugepage_update(mm, addr, pmdp, clr, set);
 return hash__pmd_hugepage_update(mm, addr, pmdp, clr, set);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_large(pmd_t pmd)
{
 return !!(pmd_raw(pmd) & (( __be64)(__u64)(0x4000000000000000UL)));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __pmdp_test_and_clear_young(struct mm_struct *mm,
           unsigned long addr, pmd_t *pmdp)
{
 unsigned long old;

 if ((pmd_raw(*pmdp) & (( __be64)(__u64)(0x00100 | 0x0080000000000000UL))) == 0)
  return 0;
 old = pmd_hugepage_update(mm, addr, pmdp, 0x00100, 0);
 return ((old & 0x00100) != 0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmdp_set_wrprotect(struct mm_struct *mm, unsigned long addr,
          pmd_t *pmdp)
{
 if (__pte_write(pmd_pte((*pmdp))))
  pmd_hugepage_update(mm, addr, pmdp, 0x00002, 0);
 else if (__builtin_expect(!!(pte_savedwrite(pmd_pte(*pmdp))), 0))
  pmd_hugepage_update(mm, addr, pmdp, 0, 0x00008);
}
# 1246 "./arch/powerpc/include/asm/book3s/64/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_huge(pmd_t pmd)
{
 if (!pmd_present(pmd))
  return false;

 if (radix_enabled())
  return radix__pmd_trans_huge(pmd);
 return hash__pmd_trans_huge(pmd);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 if (radix_enabled())
  return radix__pmd_same(pmd_a, pmd_b);
 return hash__pmd_same(pmd_a, pmd_b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t __pmd_mkhuge(pmd_t pmd)
{
 if (radix_enabled())
  return radix__pmd_mkhuge(pmd);
 return hash__pmd_mkhuge(pmd);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkhuge(pmd_t pmd)
{







 return pmd;
}


extern int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty);


extern int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address, pmd_t *pmdp);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,
         unsigned long addr, pmd_t *pmdp)
{
 if (radix_enabled())
  return radix__pmdp_huge_get_and_clear(mm, addr, pmdp);
 return hash__pmdp_huge_get_and_clear(mm, addr, pmdp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp)
{
 if (radix_enabled())
  return radix__pmdp_collapse_flush(vma, address, pmdp);
 return hash__pmdp_collapse_flush(vma, address, pmdp);
}



pmd_t pmdp_huge_get_and_clear_full(struct vm_area_struct *vma,
       unsigned long addr,
       pmd_t *pmdp, int full);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_trans_huge_deposit(struct mm_struct *mm,
           pmd_t *pmdp, pgtable_t pgtable)
{
 if (radix_enabled())
  return radix__pgtable_trans_huge_deposit(mm, pmdp, pgtable);
 return hash__pgtable_trans_huge_deposit(mm, pmdp, pgtable);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm,
          pmd_t *pmdp)
{
 if (radix_enabled())
  return radix__pgtable_trans_huge_withdraw(mm, pmdp);
 return hash__pgtable_trans_huge_withdraw(mm, pmdp);
}


extern pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
        pmd_t *pmdp);


struct spinlock;
extern int pmd_move_must_withdraw(struct spinlock *new_pmd_ptl,
      struct spinlock *old_pmd_ptl,
      struct vm_area_struct *vma);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_needs_pgtable_deposit(void)
{
 if (radix_enabled())
  return false;
 return true;
}
extern void serialize_against_pte_lookup(struct mm_struct *mm);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkdevmap(pmd_t pmd)
{
 if (radix_enabled())
  return radix__pmd_mkdevmap(pmd);
 return hash__pmd_mkdevmap(pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_devmap(pmd_t pmd)
{
 return pte_devmap(pmd_pte(pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_devmap(pud_t pud)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_devmap(pgd_t pgd)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_pfn(pud_t pud)
{





 do { extern void __compiletime_assert_7(void) ; if (!(!(1))) __compiletime_assert_7(); } while (0);
 return 0;
}

pte_t ptep_modify_prot_start(struct vm_area_struct *, unsigned long, pte_t *);
void ptep_modify_prot_commit(struct vm_area_struct *, unsigned long,
        pte_t *, pte_t, pte_t);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pte_rw_upgrade(unsigned long old_val, unsigned long new_val)
{
 if (!(old_val & 0x00004))
  return false;

 if ((!(old_val & 0x00002)) && (new_val & 0x00002))
  return true;

 return false;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pmd_is_leaf(pmd_t pmd)
{
 return !!(pmd_raw(pmd) & (( __be64)(__u64)(0x4000000000000000UL)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pud_is_leaf(pud_t pud)
{
 return !!(pud_raw(pud) & (( __be64)(__u64)(0x4000000000000000UL)));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool p4d_is_leaf(p4d_t p4d)
{
 return !!(p4d_raw(p4d) & (( __be64)(__u64)(0x4000000000000000UL)));
}
# 21 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h" 2
# 1 "./arch/powerpc/include/asm/task_size_64.h" 1
# 22 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h" 2
# 134 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
struct mmu_hash_ops {
 void (*hpte_invalidate)(unsigned long slot,
        unsigned long vpn,
        int bpsize, int apsize,
        int ssize, int local);
 long (*hpte_updatepp)(unsigned long slot,
      unsigned long newpp,
      unsigned long vpn,
      int bpsize, int apsize,
      int ssize, unsigned long flags);
 void (*hpte_updateboltedpp)(unsigned long newpp,
            unsigned long ea,
            int psize, int ssize);
 long (*hpte_insert)(unsigned long hpte_group,
           unsigned long vpn,
           unsigned long prpn,
           unsigned long rflags,
           unsigned long vflags,
           int psize, int apsize,
           int ssize);
 long (*hpte_remove)(unsigned long hpte_group);
 int (*hpte_removebolted)(unsigned long ea,
          int psize, int ssize);
 void (*flush_hash_range)(unsigned long number, int local);
 void (*hugepage_invalidate)(unsigned long vsid,
            unsigned long addr,
            unsigned char *hpte_slot_array,
            int psize, int ssize, int local);
 int (*resize_hpt)(unsigned long shift);







 void (*hpte_clear_all)(void);
};
extern struct mmu_hash_ops mmu_hash_ops;

struct hash_pte {
 __be64 v;
 __be64 r;
};

extern struct hash_pte *htab_address;
extern unsigned long htab_size_bytes;
extern unsigned long htab_hash_mask;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int shift_to_mmu_psize(unsigned int shift)
{
 int psize;

 for (psize = 0; psize < 16; ++psize)
  if (mmu_psize_defs[psize].shift == shift)
   return psize;
 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int mmu_psize_to_shift(unsigned int mmu_psize)
{
 if (mmu_psize_defs[mmu_psize].shift)
  return mmu_psize_defs[mmu_psize].shift;
 do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/mmu-hash.h"), "i" (198), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ap_to_shift(unsigned long ap)
{
 int psize;

 for (psize = 0; psize < 16; psize++) {
  if (mmu_psize_defs[psize].ap == ap)
   return mmu_psize_defs[psize].shift;
 }

 return -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_sllp_encoding(int psize)
{
 unsigned long sllp;

 sllp = ((mmu_psize_defs[psize].sllp & 0x0000000000000100UL) >> 6) |
  ((mmu_psize_defs[psize].sllp & 0x0000000000000030UL) >> 4);
 return sllp;
}
# 252 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int slb_vsid_shift(int ssize)
{
 if (ssize == 0)
  return 12;
 return 24;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int segment_shift(int ssize)
{
 if (ssize == 0)
  return 28;
 return 40;
}
# 273 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
extern u8 hpte_page_sizes[1 << 8];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __hpte_page_size(unsigned long h, unsigned long l,
          bool is_base_size)
{
 unsigned int i, lp;

 if (!(h & 0x0000000000000004UL))
  return 1ul << 12;


 lp = (l >> 12) & ((1 << 8) - 1);
 i = hpte_page_sizes[lp];
 if (!i)
  return 0;
 if (!is_base_size)
  i >>= 4;
 return 1ul << mmu_psize_defs[i & 0xf].shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_page_size(unsigned long h, unsigned long l)
{
 return __hpte_page_size(h, l, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_base_page_size(unsigned long h, unsigned long l)
{
 return __hpte_page_size(h, l, 1);
}




extern int mmu_kernel_ssize;
extern int mmu_highuser_ssize;
extern u16 mmu_slb_size;
extern unsigned long tce_alloc_start, tce_alloc_end;







extern int mmu_ci_restrictions;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_encode_avpn(unsigned long vpn, int psize,
          int ssize)
{
 unsigned long v;
# 336 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
 v = (vpn >> (23 - 12)) & ~(mmu_psize_defs[psize].avpnm);
 v <<= 7;
 v |= ((unsigned long) ssize) << 62;
 return v;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_old_to_new_v(unsigned long v)
{

 return v & 0x000fffffffffffffUL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_old_to_new_r(unsigned long v, unsigned long r)
{

 return (r & ~(3ull << 58)) |
  (((v) >> 62) << 58);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_new_to_old_v(unsigned long v, unsigned long r)
{

 return (v & 0x000fffffffffffffUL) |
  ((r & (3ull << 58)) <<
   (62 - 58));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_new_to_old_r(unsigned long r)
{

 return r & ~(3ull << 58);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_get_old_v(struct hash_pte *hptep)
{
 unsigned long hpte_v;

 hpte_v = (( __u64)(__be64)(hptep->v));
 if (cpu_has_feature(0x0000000000020000UL))
  hpte_v = hpte_new_to_old_v(hpte_v, (( __u64)(__be64)(hptep->r)));
 return hpte_v;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_encode_v(unsigned long vpn, int base_psize,
       int actual_psize, int ssize)
{
 unsigned long v;
 v = hpte_encode_avpn(vpn, base_psize, ssize);
 if (actual_psize != 0)
  v |= 0x0000000000000004UL;
 return v;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpte_encode_r(unsigned long pa, int base_psize,
       int actual_psize)
{

 if (actual_psize == 0)
  return pa & 0x0ffffffffffff000UL;
 else {
  unsigned int penc = mmu_psize_defs[base_psize].penc[actual_psize];
  unsigned int shift = mmu_psize_defs[actual_psize].shift;
  return (pa & ~((1ul << shift) - 1)) | (penc << 12);
 }
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpt_vpn(unsigned long ea,
        unsigned long vsid, int ssize)
{
 unsigned long mask;
 int s_shift = segment_shift(ssize);

 mask = (1ul << (s_shift - 12)) - 1;
 return (vsid << (s_shift - 12)) | ((ea >> 12) & mask);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long hpt_hash(unsigned long vpn,
         unsigned int shift, int ssize)
{
 unsigned long mask;
 unsigned long hash, vsid;


 if (ssize == 0) {
  mask = (1ul << (28 - 12)) - 1;
  hash = (vpn >> (28 - 12)) ^
   ((vpn & mask) >> (shift - 12));
 } else {
  mask = (1ul << (40 - 12)) - 1;
  vsid = vpn >> (40 - 12);
  hash = vsid ^ (vsid << 25) ^
   ((vpn & mask) >> (shift - 12)) ;
 }
 return hash & 0x7fffffffffUL;
}





long hpte_insert_repeating(unsigned long hash, unsigned long vpn, unsigned long pa,
      unsigned long rlags, unsigned long vflags, int psize, int ssize);
extern int __hash_page_4K(unsigned long ea, unsigned long access,
     unsigned long vsid, pte_t *ptep, unsigned long trap,
     unsigned long flags, int ssize, int subpage_prot);
extern int __hash_page_64K(unsigned long ea, unsigned long access,
      unsigned long vsid, pte_t *ptep, unsigned long trap,
      unsigned long flags, int ssize);
struct mm_struct;
unsigned int hash_page_do_lazy_icache(unsigned int pp, pte_t pte, int trap);
extern int hash_page_mm(struct mm_struct *mm, unsigned long ea,
   unsigned long access, unsigned long trap,
   unsigned long flags);
extern int hash_page(unsigned long ea, unsigned long access, unsigned long trap,
       unsigned long dsisr);
void low_hash_fault(struct pt_regs *regs, unsigned long address, int rc);
int __hash_page(unsigned long trap, unsigned long ea, unsigned long dsisr, unsigned long msr);
int __hash_page_huge(unsigned long ea, unsigned long access, unsigned long vsid,
       pte_t *ptep, unsigned long trap, unsigned long flags,
       int ssize, unsigned int shift, unsigned int mmu_psize);

extern int __hash_page_thp(unsigned long ea, unsigned long access,
      unsigned long vsid, pmd_t *pmdp, unsigned long trap,
      unsigned long flags, int ssize, unsigned int psize);
# 490 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
extern void hash_failure_debug(unsigned long ea, unsigned long access,
          unsigned long vsid, unsigned long trap,
          int ssize, int psize, int lpsize,
          unsigned long pte);
extern int htab_bolt_mapping(unsigned long vstart, unsigned long vend,
        unsigned long pstart, unsigned long prot,
        int psize, int ssize);
int htab_remove_mapping(unsigned long vstart, unsigned long vend,
   int psize, int ssize);
extern void pseries_add_gpage(u64 addr, u64 page_size, unsigned long number_of_pages);
extern void demote_segment_4k(struct mm_struct *mm, unsigned long addr);

extern void hash__setup_new_exec(void);


void hpte_init_pseries(void);




extern void hpte_init_native(void);

struct slb_entry {
 u64 esid;
 u64 vsid;
};

extern void slb_initialize(void);
void slb_flush_and_restore_bolted(void);
void slb_flush_all_realmode(void);
void __slb_restore_bolted_realmode(void);
void slb_restore_bolted_realmode(void);
void slb_save_contents(struct slb_entry *slb_ptr);
void slb_dump_contents(struct slb_entry *slb_ptr);

extern void slb_vmalloc_update(void);
extern void slb_set_size(u16 size);
void preload_new_slb_context(unsigned long start, unsigned long sp);
# 693 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void subpage_prot_free(struct mm_struct *mm) {}







struct slice_mask {
 u64 low_slices;
 unsigned long high_slices[(((((1UL << (8 + 10 + 10 + 8 + 16)) >> 40)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};

struct hash_mm_context {
 u16 user_psize;


 unsigned char low_slices_psize[(64 / 8)];
 unsigned char high_slices_psize[((1UL << (8 + 10 + 10 + 8 + 16)) >> 41)];
 unsigned long slb_addr_limit;

 struct slice_mask mask_64k;

 struct slice_mask mask_4k;

 struct slice_mask mask_16m;
 struct slice_mask mask_16g;





};
# 747 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vsid_scramble(unsigned long protovsid,
      unsigned long vsid_multiplier, int vsid_bits)
{
 unsigned long vsid;
 unsigned long vsid_modulus = ((1UL << vsid_bits) - 1);



 vsid = protovsid * vsid_multiplier;
 vsid = (vsid >> vsid_bits) + (vsid & vsid_modulus);
 return (vsid + ((vsid + 1) >> vsid_bits)) & vsid_modulus;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int user_segment_size(unsigned long addr)
{

 if (addr >= (1UL << 40))
  return mmu_highuser_ssize;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_vsid(unsigned long context, unsigned long ea,
         int ssize)
{
 unsigned long va_bits = 68;
 unsigned long vsid_bits;
 unsigned long protovsid;




 if ((ea & (~(0xcUL << 60))) >= (1UL << (8 + 10 + 10 + 8 + 16)))
  return 0;

 if (!mmu_has_feature(0x00002000UL))
  va_bits = 65;

 if (ssize == 0) {
  vsid_bits = va_bits - 28;
  protovsid = (context << (68 - (28 + 19))) |
   ((ea >> 28) & ((1 << (68 - (28 + 19))) - 1));
  return vsid_scramble(protovsid, 12538073UL, vsid_bits);
 }

 vsid_bits = va_bits - 40;
 protovsid = (context << (68 - (40 + 19))) |
  ((ea >> 40) & ((1 << (68 - (40 + 19))) - 1));
 return vsid_scramble(protovsid, 12538073UL, vsid_bits);
}
# 816 "./arch/powerpc/include/asm/book3s/64/mmu-hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_kernel_context(unsigned long ea)
{
 unsigned long region_id = get_region_id(ea);
 unsigned long ctx;




 if (region_id == 1) {



  ctx = 1 + ((ea & (~(0xcUL << 60))) >> 49);
 } else
  ctx = region_id + (1UL << (51 - 49)) - 1;
 return ctx;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_kernel_vsid(unsigned long ea, int ssize)
{
 unsigned long context;

 if (!((ea) >= 0xc000000000000000UL))
  return 0;

 context = get_kernel_context(ea);
 return get_vsid(context, ea, ssize);
}

unsigned htab_shift_for_mem_size(unsigned long mem_size);

enum slb_index {
 LINEAR_INDEX = 0,
 KSTACK_INDEX = 1,
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mk_esid_data(unsigned long ea, int ssize,
      enum slb_index index)
{
 return (ea & (((ssize) == 0) ? 0xfffffffff0000000UL : 0xffffff0000000000UL)) | 0x0000000008000000UL | index;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __mk_vsid_data(unsigned long vsid, int ssize,
        unsigned long flags)
{
 return (vsid << slb_vsid_shift(ssize)) | flags |
  ((unsigned long)ssize << 62);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mk_vsid_data(unsigned long ea, int ssize,
      unsigned long flags)
{
 return __mk_vsid_data(get_kernel_vsid(ea, ssize), ssize, flags);
}
# 33 "./arch/powerpc/include/asm/book3s/64/mmu.h" 2





struct prtb_entry {
 __be64 prtb0;
 __be64 prtb1;
};
extern struct prtb_entry *process_tb;

struct patb_entry {
 __be64 patb0;
 __be64 patb1;
};
extern struct patb_entry *partition_tb;
# 66 "./arch/powerpc/include/asm/book3s/64/mmu.h"
extern unsigned int mmu_pid_bits;


extern unsigned int mmu_base_pid;




extern unsigned long __attribute__((__section__(".data..ro_after_init"))) radix_mem_block_size;
# 84 "./arch/powerpc/include/asm/book3s/64/mmu.h"
typedef unsigned long mm_context_id_t;
struct spinlock;




typedef struct {
 union {
# 100 "./arch/powerpc/include/asm/book3s/64/mmu.h"
  mm_context_id_t id;
  mm_context_id_t extended_id[(0x0010000000000000UL)/(0x0002000000000000UL)];
 };


 atomic_t active_cpus;


 atomic_t copros;


 atomic_t vas_windows;

 struct hash_mm_context *hash_context;

 void *vdso;



 void *pte_frag;
 void *pmd_frag;

 struct list_head iommu_group_mem_list;
# 131 "./arch/powerpc/include/asm/book3s/64/mmu.h"
 u32 pkey_allocation_map;
 s16 execute_only_pkey;

} mm_context_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 mm_ctx_user_psize(mm_context_t *ctx)
{
 return ctx->hash_context->user_psize;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_ctx_set_user_psize(mm_context_t *ctx, u16 user_psize)
{
 ctx->hash_context->user_psize = user_psize;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *mm_ctx_low_slices(mm_context_t *ctx)
{
 return ctx->hash_context->low_slices_psize;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char *mm_ctx_high_slices(mm_context_t *ctx)
{
 return ctx->hash_context->high_slices_psize;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mm_ctx_slb_addr_limit(mm_context_t *ctx)
{
 return ctx->hash_context->slb_addr_limit;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_ctx_set_slb_addr_limit(mm_context_t *ctx, unsigned long limit)
{
 ctx->hash_context->slb_addr_limit = limit;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct slice_mask *slice_mask_for_size(mm_context_t *ctx, int psize)
{

 if (psize == 2)
  return &ctx->hash_context->mask_64k;


 if (psize == 10)
  return &ctx->hash_context->mask_16m;
 if (psize == 14)
  return &ctx->hash_context->mask_16g;

 do { if (__builtin_constant_p(psize != 0)) { if (psize != 0) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/mmu.h"), "i" (178), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/mmu.h"), "i" (178), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(psize != 0))); } } while (0);

 return &ctx->hash_context->mask_4k;
}
# 193 "./arch/powerpc/include/asm/book3s/64/mmu.h"
extern int mmu_linear_psize;
extern int mmu_virtual_psize;
extern int mmu_vmalloc_psize;
extern int mmu_vmemmap_psize;
extern int mmu_io_psize;


void mmu_early_init_devtree(void);
void hash__early_init_devtree(void);
void radix__early_init_devtree(void);

void pkey_early_init_devtree(void);




extern void hash__early_init_mmu(void);
extern void radix__early_init_mmu(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) early_init_mmu(void)
{
 if (radix_enabled())
  return radix__early_init_mmu();
 return hash__early_init_mmu();
}
extern void hash__early_init_mmu_secondary(void);
extern void radix__early_init_mmu_secondary(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void early_init_mmu_secondary(void)
{
 if (radix_enabled())
  return radix__early_init_mmu_secondary();
 return hash__early_init_mmu_secondary();
}

extern void hash__setup_initial_memory_limit(phys_addr_t first_memblock_base,
      phys_addr_t first_memblock_size);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void setup_initial_memory_limit(phys_addr_t first_memblock_base,
           phys_addr_t first_memblock_size)
{





 return hash__setup_initial_memory_limit(first_memblock_base,
        first_memblock_size);
}


extern void radix_init_pseries(void);
# 255 "./arch/powerpc/include/asm/book3s/64/mmu.h"
void cleanup_cpu_mmu_context(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_user_context(mm_context_t *ctx, unsigned long ea)
{
 int index = ea >> 49;

 if (__builtin_expect(!!(index < (sizeof(ctx->extended_id) / sizeof((ctx->extended_id)[0]) + ((int)(sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((ctx->extended_id)), typeof(&(ctx->extended_id)[0])))); }))))), 1))
  return ctx->extended_id[index];


 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((1))) { if (!(1)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/mmu.h"), "i" (266), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/mmu.h"), "i" (266), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (1) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_user_vsid(mm_context_t *ctx,
       unsigned long ea, int ssize)
{
 unsigned long context = get_user_context(ctx, ea);

 return get_vsid(context, ea, ssize);
}
# 396 "./arch/powerpc/include/asm/mmu.h" 2
# 47 "./arch/powerpc/include/asm/lppaca.h" 2
# 1 "./arch/powerpc/include/asm/firmware.h" 1
# 60 "./arch/powerpc/include/asm/firmware.h"
enum {

 FW_FEATURE_PSERIES_POSSIBLE = 0x0000000000000001UL | 0x0000000000000002UL |
  0x0000000000000004UL | 0x0000000000000008UL | 0x0000000000000010UL |
  0x0000000000000020UL | 0x0000000000000040UL | 0x0000000000000080UL |
  0x0000000000000100UL | 0x0000000000000200UL | 0x0000000000000400UL |
  0x0000000000000800UL | 0x0000000000001000UL | 0x0000000000002000UL |
  0x0000000000004000UL | 0x0000000000008000UL | 0x0000000000010000UL |
  0x0000000000020000UL | 0x0000000000040000UL |
  0x0000000000080000UL | 0x0000008000000000UL |
  0x0000000000100000UL | 0x0000000000400000UL |
  0x0000000002000000UL | 0x0000000004000000UL | 0x0000000008000000UL |
  0x0000000040000000UL | 0x0000000080000000UL |
  0x0000000100000000UL | 0x0000000200000000UL |
  0x0000000001000000UL | 0x0000000400000000UL |
  0x0000000800000000UL | 0x0000001000000000UL |
  0x0000002000000000UL | 0x0000004000000000UL |
  0x0000010000000000UL | 0x0000020000000000UL,
 FW_FEATURE_PSERIES_ALWAYS = 0,
 FW_FEATURE_POWERNV_POSSIBLE = 0x0000000010000000UL | 0x0000004000000000UL,
 FW_FEATURE_POWERNV_ALWAYS = 0,
 FW_FEATURE_PS3_POSSIBLE = 0x0000000000400000UL | 0x0000000000800000UL,
 FW_FEATURE_PS3_ALWAYS = 0x0000000000400000UL | 0x0000000000800000UL,
 FW_FEATURE_NATIVE_POSSIBLE = 0,
 FW_FEATURE_NATIVE_ALWAYS = 0,
 FW_FEATURE_POSSIBLE =

  FW_FEATURE_PSERIES_POSSIBLE |


  FW_FEATURE_POWERNV_POSSIBLE |





  FW_FEATURE_NATIVE_ALWAYS |

  0,
 FW_FEATURE_ALWAYS =

  FW_FEATURE_PSERIES_ALWAYS &


  FW_FEATURE_POWERNV_ALWAYS &





  FW_FEATURE_NATIVE_ALWAYS &

  FW_FEATURE_POSSIBLE,





};




extern unsigned long powerpc_firmware_features;





extern void system_reset_fwnmi(void);
extern void machine_check_fwnmi(void);


extern int fwnmi_active;
extern int ibm_nmi_interlock_token;

extern unsigned int __start___fw_ftr_fixup, __stop___fw_ftr_fixup;


void pseries_probe_fw_features(void);
# 48 "./arch/powerpc/include/asm/lppaca.h" 2
# 61 "./arch/powerpc/include/asm/lppaca.h"
struct lppaca {


 __be32 desc;
 __be16 size;
 u8 reserved1[3];
 u8 __old_status;
 u8 reserved3[14];
 volatile __be32 dyn_hw_node_id;
 volatile __be32 dyn_hw_proc_id;
 u8 reserved4[56];
 volatile u8 vphn_assoc_counts[8];

 u8 reserved5[32];



 u8 reserved6[48];
 u8 cede_latency_hint;
 u8 ebb_regs_in_use;
 u8 reserved7[6];
 u8 dtl_enable_mask;
 u8 donate_dedicated_cpu;
 u8 fpregs_in_use;
 u8 pmcregs_in_use;
 u8 reserved8[28];
 __be64 wait_state_cycles;
 u8 reserved9[28];
 __be16 slb_count;
 u8 idle;
 u8 vmxregs_in_use;
# 103 "./arch/powerpc/include/asm/lppaca.h"
 volatile __be32 yield_count;
 volatile __be32 dispersion_count;
 volatile __be64 cmo_faults;
 volatile __be64 cmo_fault_time;
 u8 reserved10[104];



 __be32 page_ins;
 u8 reserved11[148];
 volatile __be64 dtl_idx;
 u8 reserved12[96];
} __attribute__((__aligned__((1 << 7))));
# 126 "./arch/powerpc/include/asm/lppaca.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lppaca_shared_proc(struct lppaca *l)
{
 if (!((FW_FEATURE_ALWAYS & (0x0000000000100000UL)) || (FW_FEATURE_POSSIBLE & powerpc_firmware_features & (0x0000000000100000UL))))
  return false;
 return !!(l->__old_status & 2);
}






struct slb_shadow {
 __be32 persistent;
 __be32 buffer_length;
 __be64 reserved;
 struct {
  __be64 esid;
  __be64 vsid;
 } save_area[2];
} __attribute__((__aligned__((1 << 7))));

extern long hcall_vphn(unsigned long cpu, u64 flags, __be32 *associativity);
# 18 "./arch/powerpc/include/asm/paca.h" 2





# 1 "./arch/powerpc/include/asm/exception-64s.h" 1
# 175 "./arch/powerpc/include/asm/exception-64s.h"
void do_uaccess_flush(void);
# 24 "./arch/powerpc/include/asm/paca.h" 2


# 1 "./arch/powerpc/include/asm/kvm_book3s_asm.h" 1
# 66 "./arch/powerpc/include/asm/kvm_book3s_asm.h"
struct kvmppc_vcore;


struct kvm_split_mode {
 unsigned long rpr;
 unsigned long pmmar;
 unsigned long ldbar;
 u8 subcore_size;
 u8 do_nap;
 u8 napped[8];
 struct kvmppc_vcore *vc[4];
};
# 86 "./arch/powerpc/include/asm/kvm_book3s_asm.h"
struct kvmppc_host_state {
 ulong host_r1;
 ulong host_r2;
 ulong host_msr;
 ulong vmhandler;
 ulong scratch0;
 ulong scratch1;
 ulong scratch2;
 u8 in_guest;
 u8 restore_hid5;
 u8 napping;


 u8 hwthread_req;
 u8 hwthread_state;
 u8 host_ipi;
 u8 ptid;
 u8 fake_suspend;
 struct kvm_vcpu *kvm_vcpu;
 struct kvmppc_vcore *kvm_vcore;
 void *xics_phys;
 void *xive_tima_phys;
 void *xive_tima_virt;
 u32 saved_xirr;
 u64 dabr;
 u64 host_mmcr[10];
 u32 host_pmc[8];
 u64 host_purr;
 u64 host_spurr;
 u64 host_dscr;
 u64 dec_expires;
 struct kvm_split_mode *kvm_split_mode;


 u64 cfar;
 u64 ppr;
 u64 host_fscr;

};

struct kvmppc_book3s_shadow_vcpu {
 bool in_use;
 ulong gpr[14];
 u32 cr;
 ulong xer;
 ulong ctr;
 ulong lr;
 ulong pc;

 ulong shadow_srr1;
 ulong fault_dar;
 u32 fault_dsisr;
 u32 last_inst;
# 147 "./arch/powerpc/include/asm/kvm_book3s_asm.h"
 u8 slb_max;
 struct {
  u64 esid;
  u64 vsid;
 } slb[64];
 u64 shadow_fscr;

};
# 27 "./arch/powerpc/include/asm/paca.h" 2

# 1 "./arch/powerpc/include/asm/accounting.h" 1
# 10 "./arch/powerpc/include/asm/accounting.h"
struct cpu_accounting_data {

 unsigned long utime;
 unsigned long stime;

 unsigned long utime_scaled;
 unsigned long stime_scaled;

 unsigned long gtime;
 unsigned long hardirq_time;
 unsigned long softirq_time;
 unsigned long steal_time;
 unsigned long idle_time;

 unsigned long starttime;
 unsigned long starttime_user;

 unsigned long startspurr;
 unsigned long utime_sspurr;

};
# 29 "./arch/powerpc/include/asm/paca.h" 2
# 1 "./arch/powerpc/include/asm/hmi.h" 1
# 22 "./arch/powerpc/include/asm/hmi.h"
struct sibling_subcore_state {
 unsigned long flags;
 u8 in_guest[4];
};

extern void wait_for_subcore_guest_exit(void);
extern void wait_for_tb_resync(void);





struct pt_regs;
extern long hmi_handle_debugtrig(struct pt_regs *regs);
# 30 "./arch/powerpc/include/asm/paca.h" 2
# 1 "./arch/powerpc/include/asm/cpuidle.h" 1
# 74 "./arch/powerpc/include/asm/cpuidle.h"
struct pnv_idle_states_t {
 char name[16];
 u32 latency_ns;
 u32 residency_ns;
 u64 psscr_val;
 u64 psscr_mask;
 u32 flags;
 bool valid;
};

extern struct pnv_idle_states_t *pnv_idle_states;
extern int nr_pnv_idle_states;

unsigned long pnv_cpu_offline(unsigned int cpu);
int validate_psscr_val_mask(u64 *psscr_val, u64 *psscr_mask, u32 flags);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void report_invalid_psscr_val(u64 psscr_val, int err)
{
 switch (err) {
 case -1:
  ({ do {} while (0); _printk("\001" "4" "Invalid psscr 0x%016llx : ESL,EC bits unequal", psscr_val); });

  break;
 case -2:
  ({ do {} while (0); _printk("\001" "4" "Invalid psscr 0x%016llx : ESL cleared for deep stop-state", psscr_val); });

 }
}
# 31 "./arch/powerpc/include/asm/paca.h" 2
# 1 "./arch/powerpc/include/asm/atomic.h" 1
# 26 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_read(const atomic_t *v)
{
 int t;

 __asm__ __volatile__("lwz%U1%X1 %0,%1" : "=r"(t) : "m""<>"(v->counter));

 return t;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_set(atomic_t *v, int i)
{
 __asm__ __volatile__("stw%U0%X0 %1,%0" : "=m""<>"(v->counter) : "r"(i));
}
# 94 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_add(int a, atomic_t *v) { int t; __asm__ __volatile__( "1:	lwarx	%0,0,%3		# atomic_" "add" "\n" "add" " %0,%2,%0\n" "	stwcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_add_return_relaxed(int a, atomic_t *v) { int t; __asm__ __volatile__( "1:	lwarx	%0,0,%3		# atomic_" "add" "_return_relaxed\n" "add" " %0,%2,%0\n" "	stwcx.	%0,0,%3\n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return t; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_add_relaxed(int a, atomic_t *v) { int res, t; __asm__ __volatile__( "1:	lwarx	%0,0,%4		# atomic_fetch_" "add" "_relaxed\n" "add" " %1,%3,%0\n" "	stwcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_sub(int a, atomic_t *v) { int t; __asm__ __volatile__( "1:	lwarx	%0,0,%3		# atomic_" "sub" "\n" "subf" " %0,%2,%0\n" "	stwcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_sub_return_relaxed(int a, atomic_t *v) { int t; __asm__ __volatile__( "1:	lwarx	%0,0,%3		# atomic_" "sub" "_return_relaxed\n" "subf" " %0,%2,%0\n" "	stwcx.	%0,0,%3\n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return t; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_sub_relaxed(int a, atomic_t *v) { int res, t; __asm__ __volatile__( "1:	lwarx	%0,0,%4		# atomic_fetch_" "sub" "_relaxed\n" "subf" " %1,%3,%0\n" "	stwcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
# 108 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_and(int a, atomic_t *v) { int t; __asm__ __volatile__( "1:	lwarx	%0,0,%3		# atomic_" "and" "\n" "and" " %0,%2,%0\n" "	stwcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_and_relaxed(int a, atomic_t *v) { int res, t; __asm__ __volatile__( "1:	lwarx	%0,0,%4		# atomic_fetch_" "and" "_relaxed\n" "and" " %1,%3,%0\n" "	stwcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_or(int a, atomic_t *v) { int t; __asm__ __volatile__( "1:	lwarx	%0,0,%3		# atomic_" "or" "\n" "or" " %0,%2,%0\n" "	stwcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_or_relaxed(int a, atomic_t *v) { int res, t; __asm__ __volatile__( "1:	lwarx	%0,0,%4		# atomic_fetch_" "or" "_relaxed\n" "or" " %1,%3,%0\n" "	stwcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_xor(int a, atomic_t *v) { int t; __asm__ __volatile__( "1:	lwarx	%0,0,%3		# atomic_" "xor" "\n" "xor" " %0,%2,%0\n" "	stwcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_xor_relaxed(int a, atomic_t *v) { int res, t; __asm__ __volatile__( "1:	lwarx	%0,0,%4		# atomic_fetch_" "xor" "_relaxed\n" "xor" " %1,%3,%0\n" "	stwcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
# 121 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_inc(atomic_t *v)
{
 int t;

 __asm__ __volatile__(
"1:	lwarx	%0,0,%2		# atomic_inc\n	addic	%0,%0,1\n"

"	stwcx.	%0,0,%2 \n	bne-	1b"

 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_inc_return_relaxed(atomic_t *v)
{
 int t;

 __asm__ __volatile__(
"1:	lwarx	%0,0,%2		# atomic_inc_return_relaxed\n"
"	addic	%0,%0,1\n"
"	stwcx.	%0,0,%2\n"
"	bne-	1b"
 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");

 return t;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_dec(atomic_t *v)
{
 int t;

 __asm__ __volatile__(
"1:	lwarx	%0,0,%2		# atomic_dec\n	addic	%0,%0,-1\n"

"	stwcx.	%0,0,%2\n	bne-	1b"

 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_dec_return_relaxed(atomic_t *v)
{
 int t;

 __asm__ __volatile__(
"1:	lwarx	%0,0,%2		# atomic_dec_return_relaxed\n"
"	addic	%0,%0,-1\n"
"	stwcx.	%0,0,%2\n"
"	bne-	1b"
 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");

 return t;
}
# 204 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_lock(atomic_t *v, int *old, int new)
{
 int r, o = *old;

 __asm__ __volatile__ (
"1:	lwarx	%0,0,%2,%5	# atomic_try_cmpxchg_acquire		\n"
"	cmpw	0,%0,%3							\n"
"	bne-	2f							\n"
"	stwcx.	%4,0,%2							\n"
"	bne-	1b							\n"
"\t" "\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "						\n"
"2:									\n"
 : "=&r" (r), "+m" (v->counter)
 : "r" (&v->counter), "r" (o), "r" (new), "i" (1 ? 1 : 0)
 : "cr0", "memory");

 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 235 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 int t;

 __asm__ __volatile__ (
 "\n" "sync" " " "\n"
"1:	lwarx	%0,0,%1		# atomic_fetch_add_unless\n	cmpw	0,%0,%3 \n	beq	2f \n	add	%0,%2,%0 \n"



"	stwcx.	%0,0,%1 \n	bne-	1b \n"

 "\n" "sync" " " "\n"
"	subf	%0,%2,%0 \n2:"

 : "=&r" (t)
 : "r" (&v->counter), "r" (a), "r" (u)
 : "cc", "memory");

 return t;
}
# 265 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_inc_not_zero(atomic_t *v)
{
 int t1, t2;

 __asm__ __volatile__ (
 "\n" "sync" " " "\n"
"1:	lwarx	%0,0,%2		# atomic_inc_not_zero\n	cmpwi	0,%0,0\n	beq-	2f\n	addic	%1,%0,1\n"



"	stwcx.	%1,0,%2\n	bne-	1b\n"

 "\n" "sync" " " "\n"
 "\n2:"

 : "=&r" (t1), "=&r" (t2)
 : "r" (&v->counter)
 : "cc", "xer", "memory");

 return t1;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_dec_if_positive(atomic_t *v)
{
 int t;

 __asm__ __volatile__(
 "\n" "sync" " " "\n"
"1:	lwarx	%0,0,%1		# atomic_dec_if_positive\n	cmpwi	%0,1\n	addi	%0,%0,-1\n	blt-	2f\n"



"	stwcx.	%0,0,%1\n	bne-	1b"

 "\n" "sync" " " "\n"
 "\n2:" : "=&b" (t)

 : "r" (&v->counter)
 : "cc", "memory");

 return t;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_read(const atomic64_t *v)
{
 s64 t;

 __asm__ __volatile__("ld%U1%X1 %0,%1" : "=r"(t) : "m""<>"(v->counter));

 return t;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_set(atomic64_t *v, s64 i)
{
 __asm__ __volatile__("std%U0%X0 %1,%0" : "=m""<>"(v->counter) : "r"(i));
}
# 389 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_add(s64 a, atomic64_t *v) { s64 t; __asm__ __volatile__( "1:	ldarx	%0,0,%3		# atomic64_" "add" "\n" "add" " %0,%2,%0\n" "	stdcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_add_return_relaxed(s64 a, atomic64_t *v) { s64 t; __asm__ __volatile__( "1:	ldarx	%0,0,%3		# atomic64_" "add" "_return_relaxed\n" "add" " %0,%2,%0\n" "	stdcx.	%0,0,%3\n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return t; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_add_relaxed(s64 a, atomic64_t *v) { s64 res, t; __asm__ __volatile__( "1:	ldarx	%0,0,%4		# atomic64_fetch_" "add" "_relaxed\n" "add" " %1,%3,%0\n" "	stdcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_sub(s64 a, atomic64_t *v) { s64 t; __asm__ __volatile__( "1:	ldarx	%0,0,%3		# atomic64_" "sub" "\n" "subf" " %0,%2,%0\n" "	stdcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_sub_return_relaxed(s64 a, atomic64_t *v) { s64 t; __asm__ __volatile__( "1:	ldarx	%0,0,%3		# atomic64_" "sub" "_return_relaxed\n" "subf" " %0,%2,%0\n" "	stdcx.	%0,0,%3\n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return t; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_sub_relaxed(s64 a, atomic64_t *v) { s64 res, t; __asm__ __volatile__( "1:	ldarx	%0,0,%4		# atomic64_fetch_" "sub" "_relaxed\n" "subf" " %1,%3,%0\n" "	stdcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
# 403 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_and(s64 a, atomic64_t *v) { s64 t; __asm__ __volatile__( "1:	ldarx	%0,0,%3		# atomic64_" "and" "\n" "and" " %0,%2,%0\n" "	stdcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_and_relaxed(s64 a, atomic64_t *v) { s64 res, t; __asm__ __volatile__( "1:	ldarx	%0,0,%4		# atomic64_fetch_" "and" "_relaxed\n" "and" " %1,%3,%0\n" "	stdcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_or(s64 a, atomic64_t *v) { s64 t; __asm__ __volatile__( "1:	ldarx	%0,0,%3		# atomic64_" "or" "\n" "or" " %0,%2,%0\n" "	stdcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_or_relaxed(s64 a, atomic64_t *v) { s64 res, t; __asm__ __volatile__( "1:	ldarx	%0,0,%4		# atomic64_fetch_" "or" "_relaxed\n" "or" " %1,%3,%0\n" "	stdcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_xor(s64 a, atomic64_t *v) { s64 t; __asm__ __volatile__( "1:	ldarx	%0,0,%3		# atomic64_" "xor" "\n" "xor" " %0,%2,%0\n" "	stdcx.	%0,0,%3 \n" "	bne-	1b\n" : "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_xor_relaxed(s64 a, atomic64_t *v) { s64 res, t; __asm__ __volatile__( "1:	ldarx	%0,0,%4		# atomic64_fetch_" "xor" "_relaxed\n" "xor" " %1,%3,%0\n" "	stdcx.	%1,0,%4\n" "	bne-	1b\n" : "=&r" (res), "=&r" (t), "+m" (v->counter) : "r" (a), "r" (&v->counter) : "cc"); return res; }
# 416 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_inc(atomic64_t *v)
{
 s64 t;

 __asm__ __volatile__(
"1:	ldarx	%0,0,%2		# atomic64_inc\n	addic	%0,%0,1\n	stdcx.	%0,0,%2 \n	bne-	1b"



 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_inc_return_relaxed(atomic64_t *v)
{
 s64 t;

 __asm__ __volatile__(
"1:	ldarx	%0,0,%2		# atomic64_inc_return_relaxed\n"
"	addic	%0,%0,1\n"
"	stdcx.	%0,0,%2\n"
"	bne-	1b"
 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");

 return t;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_dec(atomic64_t *v)
{
 s64 t;

 __asm__ __volatile__(
"1:	ldarx	%0,0,%2		# atomic64_dec\n	addic	%0,%0,-1\n	stdcx.	%0,0,%2\n	bne-	1b"



 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_dec_return_relaxed(atomic64_t *v)
{
 s64 t;

 __asm__ __volatile__(
"1:	ldarx	%0,0,%2		# atomic64_dec_return_relaxed\n"
"	addic	%0,%0,-1\n"
"	stdcx.	%0,0,%2\n"
"	bne-	1b"
 : "=&r" (t), "+m" (v->counter)
 : "r" (&v->counter)
 : "cc", "xer");

 return t;
}
# 485 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_dec_if_positive(atomic64_t *v)
{
 s64 t;

 __asm__ __volatile__(
 "\n" "sync" " " "\n"
"1:	ldarx	%0,0,%1		# atomic64_dec_if_positive\n	addic.	%0,%0,-1\n	blt-	2f\n	stdcx.	%0,0,%1\n	bne-	1b"




 "\n" "sync" " " "\n"
 "\n2:" : "=&r" (t)

 : "r" (&v->counter)
 : "cc", "xer", "memory");

 return t;
}
# 527 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arch_atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 s64 t;

 __asm__ __volatile__ (
 "\n" "sync" " " "\n"
"1:	ldarx	%0,0,%1		# atomic64_fetch_add_unless\n	cmpd	0,%0,%3 \n	beq	2f \n	add	%0,%2,%0 \n"



"	stdcx.	%0,0,%1 \n	bne-	1b \n"

 "\n" "sync" " " "\n"
"	subf	%0,%2,%0 \n2:"

 : "=&r" (t)
 : "r" (&v->counter), "r" (a), "r" (u)
 : "cc", "memory");

 return t;
}
# 557 "./arch/powerpc/include/asm/atomic.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic64_inc_not_zero(atomic64_t *v)
{
 s64 t1, t2;

 __asm__ __volatile__ (
 "\n" "sync" " " "\n"
"1:	ldarx	%0,0,%2		# atomic64_inc_not_zero\n	cmpdi	0,%0,0\n	beq-	2f\n	addic	%1,%0,1\n	stdcx.	%1,0,%2\n	bne-	1b\n"





 "\n" "sync" " " "\n"
 "\n2:"

 : "=&r" (t1), "=&r" (t2)
 : "r" (&v->counter)
 : "cc", "xer", "memory");

 return t1 != 0;
}
# 32 "./arch/powerpc/include/asm/paca.h" 2
# 1 "./arch/powerpc/include/asm/mce.h" 1
# 14 "./arch/powerpc/include/asm/mce.h"
enum MCE_Version {
 MCE_V1 = 1,
};

enum MCE_Severity {
 MCE_SEV_NO_ERROR = 0,
 MCE_SEV_WARNING = 1,
 MCE_SEV_SEVERE = 2,
 MCE_SEV_FATAL = 3,
};

enum MCE_Disposition {
 MCE_DISPOSITION_RECOVERED = 0,
 MCE_DISPOSITION_NOT_RECOVERED = 1,
};

enum MCE_Initiator {
 MCE_INITIATOR_UNKNOWN = 0,
 MCE_INITIATOR_CPU = 1,
 MCE_INITIATOR_PCI = 2,
 MCE_INITIATOR_ISA = 3,
 MCE_INITIATOR_MEMORY= 4,
 MCE_INITIATOR_POWERMGM = 5,
};

enum MCE_ErrorType {
 MCE_ERROR_TYPE_UNKNOWN = 0,
 MCE_ERROR_TYPE_UE = 1,
 MCE_ERROR_TYPE_SLB = 2,
 MCE_ERROR_TYPE_ERAT = 3,
 MCE_ERROR_TYPE_TLB = 4,
 MCE_ERROR_TYPE_USER = 5,
 MCE_ERROR_TYPE_RA = 6,
 MCE_ERROR_TYPE_LINK = 7,
 MCE_ERROR_TYPE_DCACHE = 8,
 MCE_ERROR_TYPE_ICACHE = 9,
};

enum MCE_ErrorClass {
 MCE_ECLASS_UNKNOWN = 0,
 MCE_ECLASS_HARDWARE,
 MCE_ECLASS_HARD_INDETERMINATE,
 MCE_ECLASS_SOFTWARE,
 MCE_ECLASS_SOFT_INDETERMINATE,
};

enum MCE_UeErrorType {
 MCE_UE_ERROR_INDETERMINATE = 0,
 MCE_UE_ERROR_IFETCH = 1,
 MCE_UE_ERROR_PAGE_TABLE_WALK_IFETCH = 2,
 MCE_UE_ERROR_LOAD_STORE = 3,
 MCE_UE_ERROR_PAGE_TABLE_WALK_LOAD_STORE = 4,
};

enum MCE_SlbErrorType {
 MCE_SLB_ERROR_INDETERMINATE = 0,
 MCE_SLB_ERROR_PARITY = 1,
 MCE_SLB_ERROR_MULTIHIT = 2,
};

enum MCE_EratErrorType {
 MCE_ERAT_ERROR_INDETERMINATE = 0,
 MCE_ERAT_ERROR_PARITY = 1,
 MCE_ERAT_ERROR_MULTIHIT = 2,
};

enum MCE_TlbErrorType {
 MCE_TLB_ERROR_INDETERMINATE = 0,
 MCE_TLB_ERROR_PARITY = 1,
 MCE_TLB_ERROR_MULTIHIT = 2,
};

enum MCE_UserErrorType {
 MCE_USER_ERROR_INDETERMINATE = 0,
 MCE_USER_ERROR_TLBIE = 1,
 MCE_USER_ERROR_SCV = 2,
};

enum MCE_RaErrorType {
 MCE_RA_ERROR_INDETERMINATE = 0,
 MCE_RA_ERROR_IFETCH = 1,
 MCE_RA_ERROR_IFETCH_FOREIGN = 2,
 MCE_RA_ERROR_PAGE_TABLE_WALK_IFETCH = 3,
 MCE_RA_ERROR_PAGE_TABLE_WALK_IFETCH_FOREIGN = 4,
 MCE_RA_ERROR_LOAD = 5,
 MCE_RA_ERROR_STORE = 6,
 MCE_RA_ERROR_PAGE_TABLE_WALK_LOAD_STORE = 7,
 MCE_RA_ERROR_PAGE_TABLE_WALK_LOAD_STORE_FOREIGN = 8,
 MCE_RA_ERROR_LOAD_STORE_FOREIGN = 9,
};

enum MCE_LinkErrorType {
 MCE_LINK_ERROR_INDETERMINATE = 0,
 MCE_LINK_ERROR_IFETCH_TIMEOUT = 1,
 MCE_LINK_ERROR_PAGE_TABLE_WALK_IFETCH_TIMEOUT = 2,
 MCE_LINK_ERROR_LOAD_TIMEOUT = 3,
 MCE_LINK_ERROR_STORE_TIMEOUT = 4,
 MCE_LINK_ERROR_PAGE_TABLE_WALK_LOAD_STORE_TIMEOUT = 5,
};

struct machine_check_event {
 enum MCE_Version version:8;
 u8 in_use;
 enum MCE_Severity severity:8;
 enum MCE_Initiator initiator:8;
 enum MCE_ErrorType error_type:8;
 enum MCE_ErrorClass error_class:8;
 enum MCE_Disposition disposition:8;
 bool sync_error;
 u16 cpu;
 u64 gpr3;
 u64 srr0;
 u64 srr1;
 union {
  struct {
   enum MCE_UeErrorType ue_error_type:8;
   u8 effective_address_provided;
   u8 physical_address_provided;
   u8 ignore_event;
   u8 reserved_1[4];
   u64 effective_address;
   u64 physical_address;
   u8 reserved_2[8];
  } ue_error;

  struct {
   enum MCE_SlbErrorType slb_error_type:8;
   u8 effective_address_provided;
   u8 reserved_1[6];
   u64 effective_address;
   u8 reserved_2[16];
  } slb_error;

  struct {
   enum MCE_EratErrorType erat_error_type:8;
   u8 effective_address_provided;
   u8 reserved_1[6];
   u64 effective_address;
   u8 reserved_2[16];
  } erat_error;

  struct {
   enum MCE_TlbErrorType tlb_error_type:8;
   u8 effective_address_provided;
   u8 reserved_1[6];
   u64 effective_address;
   u8 reserved_2[16];
  } tlb_error;

  struct {
   enum MCE_UserErrorType user_error_type:8;
   u8 effective_address_provided;
   u8 reserved_1[6];
   u64 effective_address;
   u8 reserved_2[16];
  } user_error;

  struct {
   enum MCE_RaErrorType ra_error_type:8;
   u8 effective_address_provided;
   u8 reserved_1[6];
   u64 effective_address;
   u8 reserved_2[16];
  } ra_error;

  struct {
   enum MCE_LinkErrorType link_error_type:8;
   u8 effective_address_provided;
   u8 reserved_1[6];
   u64 effective_address;
   u8 reserved_2[16];
  } link_error;
 } u;
};

struct mce_error_info {
 enum MCE_ErrorType error_type:8;
 union {
  enum MCE_UeErrorType ue_error_type:8;
  enum MCE_SlbErrorType slb_error_type:8;
  enum MCE_EratErrorType erat_error_type:8;
  enum MCE_TlbErrorType tlb_error_type:8;
  enum MCE_UserErrorType user_error_type:8;
  enum MCE_RaErrorType ra_error_type:8;
  enum MCE_LinkErrorType link_error_type:8;
 } u;
 enum MCE_Severity severity:8;
 enum MCE_Initiator initiator:8;
 enum MCE_ErrorClass error_class:8;
 bool sync_error;
 bool ignore_event;
};



struct mce_info {
 int mce_nest_count;
 struct machine_check_event mce_event[10];

 int mce_queue_count;
 struct machine_check_event mce_event_queue[10];

 int mce_ue_count;
 struct machine_check_event mce_ue_event_queue[10];
};





struct pt_regs;
struct notifier_block;

extern void save_mce_event(struct pt_regs *regs, long handled,
      struct mce_error_info *mce_err, uint64_t nip,
      uint64_t addr, uint64_t phys_addr);
extern int get_mce_event(struct machine_check_event *mce, bool release);
extern void release_mce_event(void);
extern void machine_check_queue_event(void);
extern void machine_check_print_event_info(struct machine_check_event *evt,
        bool user_mode, bool in_guest);
unsigned long addr_to_pfn(struct pt_regs *regs, unsigned long addr);
extern void mce_common_process_ue(struct pt_regs *regs,
      struct mce_error_info *mce_err);
int mce_register_notifier(struct notifier_block *nb);
int mce_unregister_notifier(struct notifier_block *nb);

void flush_and_reload_slb(void);
void flush_erat(void);
long __machine_check_early_realmode_p7(struct pt_regs *regs);
long __machine_check_early_realmode_p8(struct pt_regs *regs);
long __machine_check_early_realmode_p9(struct pt_regs *regs);
long __machine_check_early_realmode_p10(struct pt_regs *regs);



void mce_init(void);
# 33 "./arch/powerpc/include/asm/paca.h" 2

# 1 "./include/asm-generic/mmiowb_types.h" 1






struct mmiowb_state {
 u16 nesting_count;
 u16 mmiowb_pending;
};
# 35 "./arch/powerpc/include/asm/paca.h" 2

register struct paca_struct *local_paca asm("r13");
# 55 "./arch/powerpc/include/asm/paca.h"
struct task_struct;
struct rtas_args;







struct paca_struct {
# 73 "./arch/powerpc/include/asm/paca.h"
 struct lppaca *lppaca_ptr;
# 83 "./arch/powerpc/include/asm/paca.h"
 u16 lock_token;
 u16 paca_index;





 u64 kernel_toc;
 u64 kernelbase;
 u64 kernel_msr;
 void *emergency_sp;
 u64 data_offset;
 s16 hw_cpu_id;
 u8 cpu_start;

 u8 kexec_state;

 struct slb_shadow *slb_shadow_ptr;
 struct dtl_entry *dispatch_log;
 struct dtl_entry *dispatch_log_end;

 u64 dscr_default;






 u64 exgen[10] __attribute__((aligned(0x80)));


 u16 vmalloc_sllp;
 u8 slb_cache_ptr;
 u8 stab_rr;



 u32 slb_used_bitmap;
 u32 slb_kern_bitmap;
 u32 slb_cache[8];
# 153 "./arch/powerpc/include/asm/paca.h"
 unsigned char mm_ctx_low_slices_psize[64 / 8];
 unsigned char mm_ctx_high_slices_psize[((1UL << (8 + 10 + 10 + 8 + 16)) >> 41)];
# 164 "./arch/powerpc/include/asm/paca.h"
 struct task_struct *__current;
 u64 kstack;
 u64 saved_r1;
 u64 saved_msr;

 u64 exit_save_r1;





 u8 hsrr_valid;
 u8 srr_valid;

 u8 irq_soft_mask;
 u8 irq_happened;
 u8 irq_work_pending;

 u8 pmcregs_in_use;

 u64 sprg_vdso;

 u64 tm_scratch;





 unsigned long idle_state;
 union {

  struct {

   u8 thread_idle_state;

   u8 subcore_sibling_mask;
  };


  struct {


   u64 requested_psscr;

   atomic_t dont_stop;

  };
 };




 u64 exnmi[10];
 u64 exmc[10];



 void *nmi_emergency_sp;
 void *mc_emergency_sp;

 u16 in_nmi;





 u16 in_mce;
 u8 hmi_event_available;
 u8 hmi_p9_special_emu;
 u32 hmi_irqs;

 u8 ftrace_enabled;


 struct cpu_accounting_data accounting;
 u64 dtl_ridx;
 struct dtl_entry *dtl_curr;






 struct kvmppc_host_state kvm_hstate;





 struct sibling_subcore_state *sibling_subcore_state;







 u64 exrfi[10] __attribute__((__aligned__(0x80)));
 void *rfi_flush_fallback_area;
 u64 l1d_flush_size;


 struct rtas_args *rtas_args_reentrant;
 u8 *mce_data_buf;




 struct slb_entry *mce_faulty_slbs;
 u16 slb_save_cache_ptr;





 struct mmiowb_state mmiowb_state;


 struct mce_info *mce_info;

} __attribute__((__aligned__((1 << 7))));

extern void copy_mm_to_paca(struct mm_struct *mm);
extern struct paca_struct **paca_ptrs;
extern void initialise_paca(struct paca_struct *new_paca, int cpu);
extern void setup_paca(struct paca_struct *new_paca);
extern void allocate_paca_ptrs(void);
extern void allocate_paca(int cpu);
extern void free_unused_pacas(void);
# 14 "./arch/powerpc/include/asm/current.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *get_current(void)
{
 struct task_struct *task;


 asm ("ld %0,%1(13)"
 : "=r" (task)
 : "i" (__builtin_offsetof(struct paca_struct, __current)));

 return task;
}
# 13 "./include/linux/sched.h" 2

# 1 "./include/linux/pid.h" 1




# 1 "./include/linux/rculist.h" 1
# 10 "./include/linux/rculist.h"
# 1 "./include/linux/list.h" 1






# 1 "./include/linux/poison.h" 1
# 8 "./include/linux/list.h" 2
# 33 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD(struct list_head *list)
{
 do { do { extern void __compiletime_assert_8(void) ; if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_8(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 list->prev = list;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_add_valid(struct list_head *new,
    struct list_head *prev,
    struct list_head *next)
{
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_del_entry_valid(struct list_head *entry)
{
 return true;
}
# 63 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 do { do { extern void __compiletime_assert_9(void) ; if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_9(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (new); } while (0); } while (0);
}
# 84 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 98 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 110 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 do { do { extern void __compiletime_assert_10(void) ; if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_10(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (next); } while (0); } while (0);
}
# 124 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + (0x5deadbeef0000000UL));
 entry->prev = ((void *) 0x122 + (0x5deadbeef0000000UL));
}
# 158 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}
# 174 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_init(struct list_head *old,
         struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 240 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty(const struct list_head *head)
{
 return ({ do { extern void __compiletime_assert_11(void) ; if (!((sizeof(head->next) == sizeof(char) || sizeof(head->next) == sizeof(short) || sizeof(head->next) == sizeof(int) || sizeof(head->next) == sizeof(long)) || sizeof(head->next) == sizeof(long long))) __compiletime_assert_11(); } while (0); (*(const volatile typeof( _Generic((head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->next))) *)&(head->next)); }) == head;
}
# 296 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init_careful(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = entry;
 do { do { extern void __compiletime_assert_12(void) ; if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)))) __compiletime_assert_12(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_13(void) ; if (!((sizeof(*&entry->next) == sizeof(char) || sizeof(*&entry->next) == sizeof(short) || sizeof(*&entry->next) == sizeof(int) || sizeof(*&entry->next) == sizeof(long)) || sizeof(*&entry->next) == sizeof(long long))) __compiletime_assert_13(); } while (0); do { *(volatile typeof(*&entry->next) *)&(*&entry->next) = (entry); } while (0); } while (0); } while (0);
}
# 316 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = ({ typeof(*&head->next) ___p1 = ({ do { extern void __compiletime_assert_14(void) ; if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)) || sizeof(*&head->next) == sizeof(long long))) __compiletime_assert_14(); } while (0); (*(const volatile typeof( _Generic((*&head->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&head->next))) *)&(*&head->next)); }); do { extern void __compiletime_assert_15(void) ; if (!((sizeof(*&head->next) == sizeof(char) || sizeof(*&head->next) == sizeof(short) || sizeof(*&head->next) == sizeof(int) || sizeof(*&head->next) == sizeof(long)))) __compiletime_assert_15(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); ___p1; });
 return (next == head) && (next == head->prev);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 343 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 389 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 417 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 478 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 495 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 792 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}
# 806 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}
# 819 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed_lockless(const struct hlist_node *h)
{
 return !({ do { extern void __compiletime_assert_16(void) ; if (!((sizeof(h->pprev) == sizeof(char) || sizeof(h->pprev) == sizeof(short) || sizeof(h->pprev) == sizeof(int) || sizeof(h->pprev) == sizeof(long)) || sizeof(h->pprev) == sizeof(long long))) __compiletime_assert_16(); } while (0); (*(const volatile typeof( _Generic((h->pprev), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->pprev))) *)&(h->pprev)); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_empty(const struct hlist_head *h)
{
 return !({ do { extern void __compiletime_assert_17(void) ; if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_17(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 do { do { extern void __compiletime_assert_18(void) ; if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_18(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = (next); } while (0); } while (0);
 if (next)
  do { do { extern void __compiletime_assert_19(void) ; if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_19(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (pprev); } while (0); } while (0);
}
# 850 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + (0x5deadbeef0000000UL));
 n->pprev = ((void *) 0x122 + (0x5deadbeef0000000UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}
# 879 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 do { do { extern void __compiletime_assert_20(void) ; if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_20(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (first); } while (0); } while (0);
 if (first)
  do { do { extern void __compiletime_assert_21(void) ; if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_21(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_22(void) ; if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_22(); } while (0); do { *(volatile typeof(h->first) *)&(h->first) = (n); } while (0); } while (0);
 do { do { extern void __compiletime_assert_23(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_23(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before(struct hlist_node *n,
        struct hlist_node *next)
{
 do { do { extern void __compiletime_assert_24(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_24(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 do { do { extern void __compiletime_assert_25(void) ; if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_25(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_26(void) ; if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_26(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_27(void) ; if (!((sizeof(*(n->pprev)) == sizeof(char) || sizeof(*(n->pprev)) == sizeof(short) || sizeof(*(n->pprev)) == sizeof(int) || sizeof(*(n->pprev)) == sizeof(long)) || sizeof(*(n->pprev)) == sizeof(long long))) __compiletime_assert_27(); } while (0); do { *(volatile typeof(*(n->pprev)) *)&(*(n->pprev)) = (n); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 do { do { extern void __compiletime_assert_28(void) ; if (!((sizeof(n->next) == sizeof(char) || sizeof(n->next) == sizeof(short) || sizeof(n->next) == sizeof(int) || sizeof(n->next) == sizeof(long)) || sizeof(n->next) == sizeof(long long))) __compiletime_assert_28(); } while (0); do { *(volatile typeof(n->next) *)&(n->next) = (prev->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_29(void) ; if (!((sizeof(prev->next) == sizeof(char) || sizeof(prev->next) == sizeof(short) || sizeof(prev->next) == sizeof(int) || sizeof(prev->next) == sizeof(long)) || sizeof(prev->next) == sizeof(long long))) __compiletime_assert_29(); } while (0); do { *(volatile typeof(prev->next) *)&(prev->next) = (n); } while (0); } while (0);
 do { do { extern void __compiletime_assert_30(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_30(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);

 if (n->next)
  do { do { extern void __compiletime_assert_31(void) ; if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_31(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 927 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}
# 949 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}
# 963 "./include/linux/list.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 11 "./include/linux/rculist.h" 2
# 1 "./include/linux/rcupdate.h" 1
# 25 "./include/linux/rcupdate.h"
# 1 "./include/linux/atomic.h" 1
# 80 "./include/linux/atomic.h"
# 1 "./include/linux/atomic/atomic-arch-fallback.h" 1
# 151 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_read_acquire(const atomic_t *v)
{
 return ({ typeof(*&(v)->counter) ___p1 = ({ do { extern void __compiletime_assert_32(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_32(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { extern void __compiletime_assert_33(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_33(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); ___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_set_release(atomic_t *v, int i)
{
 do { do { extern void __compiletime_assert_34(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_34(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_35(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_35(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 175 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_add_return_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return_release(int i, atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_add_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_add_return(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_add_return_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 217 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_add_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add_release(int i, atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_fetch_add_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_add(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_fetch_add_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 259 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_sub_return_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return_release(int i, atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_sub_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_sub_return(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_sub_return_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 301 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub_release(int i, atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_fetch_sub_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_sub(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_fetch_sub_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 391 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_acquire(atomic_t *v)
{
 int ret = arch_atomic_inc_return_relaxed(v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return_release(atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_inc_return_relaxed(v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_inc_return(atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_inc_return_relaxed(v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 434 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc(atomic_t *v)
{
 return arch_atomic_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_acquire(atomic_t *v)
{
 return arch_atomic_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_release(atomic_t *v)
{
 return arch_atomic_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_inc_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_add_relaxed(1, v);
}
# 562 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_acquire(atomic_t *v)
{
 int ret = arch_atomic_dec_return_relaxed(v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return_release(atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_dec_return_relaxed(v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_dec_return(atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_dec_return_relaxed(v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 605 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec(atomic_t *v)
{
 return arch_atomic_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_acquire(atomic_t *v)
{
 return arch_atomic_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_release(atomic_t *v)
{
 return arch_atomic_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_dec_relaxed(atomic_t *v)
{
 return arch_atomic_fetch_sub_relaxed(1, v);
}
# 685 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_and_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and_release(int i, atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_fetch_and_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_and(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_fetch_and_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_andnot(int i, atomic_t *v)
{
 arch_atomic_and(~i, v);
}
# 737 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot(int i, atomic_t *v)
{
 return arch_atomic_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_acquire(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_release(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_release(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 return arch_atomic_fetch_and_relaxed(~i, v);
}
# 817 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_or_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or_release(int i, atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_fetch_or_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_or(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_fetch_or_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 859 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 int ret = arch_atomic_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor_release(int i, atomic_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_fetch_xor(int i, atomic_t *v)
{
 int ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic_fetch_xor_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 901 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_xchg_acquire(atomic_t *v, int i)
{
 int ret = ({ __typeof__(*(&((v)->counter))) _x_ = ((i)); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); });
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_xchg_release(atomic_t *v, int i)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return ({ __typeof__(*(&((v)->counter))) _x_ = ((i)); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); });
}
# 954 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
arch_atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_relaxed((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}
# 986 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = (({ __typeof__(*(&((v)->counter))) _o_ = ((o)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); }));
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) _o_ = ((o)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_acquire((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = arch_atomic_cmpxchg_release(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) _o_ = ((o)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_relaxed((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 1085 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_sub_and_test(int i, atomic_t *v)
{
 return arch_atomic_sub_return(i, v) == 0;
}
# 1102 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_and_test(atomic_t *v)
{
 return arch_atomic_dec_return(v) == 0;
}
# 1119 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_and_test(atomic_t *v)
{
 return arch_atomic_inc_return(v) == 0;
}
# 1137 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_negative(int i, atomic_t *v)
{
 return arch_atomic_add_return(i, v) < 0;
}
# 1180 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_add_unless(atomic_t *v, int a, int u)
{
 return arch_atomic_fetch_add_unless(v, a, u) != u;
}
# 1205 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_inc_unless_negative(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_dec_unless_positive(atomic_t *v)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 1258 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_read_acquire(const atomic64_t *v)
{
 return ({ typeof(*&(v)->counter) ___p1 = ({ do { extern void __compiletime_assert_36(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_36(); } while (0); (*(const volatile typeof( _Generic((*&(v)->counter), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&(v)->counter))) *)&(*&(v)->counter)); }); do { extern void __compiletime_assert_37(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_37(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); ___p1; });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_set_release(atomic64_t *v, s64 i)
{
 do { do { extern void __compiletime_assert_38(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_38(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_39(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)) || sizeof(*&(v)->counter) == sizeof(long long))) __compiletime_assert_39(); } while (0); do { *(volatile typeof(*&(v)->counter) *)&(*&(v)->counter) = (i); } while (0); } while (0); } while (0);
}
# 1282 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_add_return_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_add_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_add_return(s64 i, atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_add_return_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 1324 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_add_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_fetch_add_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_add(s64 i, atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_fetch_add_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 1366 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_sub_return_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_sub_return_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_sub_return(s64 i, atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_sub_return_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 1408 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_sub_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_fetch_sub_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_fetch_sub_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 1498 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_acquire(atomic64_t *v)
{
 s64 ret = arch_atomic64_inc_return_relaxed(v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return_release(atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_inc_return_relaxed(v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_inc_return(atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_inc_return_relaxed(v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 1541 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc(atomic64_t *v)
{
 return arch_atomic64_fetch_add(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_add_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_release(atomic64_t *v)
{
 return arch_atomic64_fetch_add_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_add_relaxed(1, v);
}
# 1669 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_acquire(atomic64_t *v)
{
 s64 ret = arch_atomic64_dec_return_relaxed(v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return_release(atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_dec_return_relaxed(v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_dec_return(atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_dec_return_relaxed(v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 1712 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec(atomic64_t *v)
{
 return arch_atomic64_fetch_sub(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_acquire(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_release(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_release(1, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(1, v);
}
# 1792 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_and_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_fetch_and_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_and(s64 i, atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_fetch_and_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic64_andnot(s64 i, atomic64_t *v)
{
 arch_atomic64_and(~i, v);
}
# 1844 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_acquire(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_release(~i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 return arch_atomic64_fetch_and_relaxed(~i, v);
}
# 1924 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_or_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_fetch_or_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_or(s64 i, atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_fetch_or_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 1966 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 s64 ret = arch_atomic64_fetch_xor_relaxed(i, v);
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return arch_atomic64_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 s64 ret;
 __asm__ __volatile__ ("sync" : : : "memory");
 ret = arch_atomic64_fetch_xor_relaxed(i, v);
 __asm__ __volatile__ ("sync" : : : "memory");
 return ret;
}
# 2008 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 s64 ret = ({ __typeof__(*(&((v)->counter))) _x_ = ((i)); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); });
 __asm__ __volatile__("\n" "971:; isync; 972: .pushsection __lwsync_fixup,\"a\"; .align 2; 973: .8byte 971b-973b; .popsection;;" " " "" : : : "memory");
 return ret;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_xchg_release(atomic64_t *v, s64 i)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return ({ __typeof__(*(&((v)->counter))) _x_ = ((i)); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); });
}
# 2061 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
arch_atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 __asm__ __volatile__("lwsync" " " "\n" "" : : : "memory");
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_relaxed((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}
# 2093 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = (({ __typeof__(*(&((v)->counter))) _o_ = ((o)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); }));
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) _o_ = ((o)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_acquire((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = arch_atomic64_cmpxchg_release(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = ({ __typeof__(*(&((v)->counter))) _o_ = ((o)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_relaxed((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 2192 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return arch_atomic64_sub_return(i, v) == 0;
}
# 2209 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_and_test(atomic64_t *v)
{
 return arch_atomic64_dec_return(v) == 0;
}
# 2226 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_and_test(atomic64_t *v)
{
 return arch_atomic64_inc_return(v) == 0;
}
# 2244 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_negative(s64 i, atomic64_t *v)
{
 return arch_atomic64_add_return(i, v) < 0;
}
# 2287 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return arch_atomic64_fetch_add_unless(v, a, u) != u;
}
# 2312 "./include/linux/atomic/atomic-arch-fallback.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = arch_atomic64_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 81 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-long.h" 1
# 13 "./include/linux/atomic/atomic-long.h"
typedef atomic64_t atomic_long_t;
# 26 "./include/linux/atomic/atomic-long.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read(const atomic_long_t *v)
{
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_read_acquire(const atomic_long_t *v)
{
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set(atomic_long_t *v, long i)
{
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_set_release(atomic_long_t *v, long i)
{
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_add(long i, atomic_long_t *v)
{
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_sub(long i, atomic_long_t *v)
{
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_inc(atomic_long_t *v)
{
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return(atomic_long_t *v)
{
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_release(atomic_long_t *v)
{
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_dec(atomic_long_t *v)
{
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return(atomic_long_t *v)
{
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_release(atomic_long_t *v)
{
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_and(long i, atomic_long_t *v)
{
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_andnot(long i, atomic_long_t *v)
{
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_or(long i, atomic_long_t *v)
{
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
arch_atomic_long_xor(long i, atomic_long_t *v)
{
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg(atomic_long_t *v, long i)
{
 return (({ typeof(({ __typeof__(*(&((v)->counter))) _x_ = (i); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); })) __ret; __asm__ __volatile__ ("sync" : : : "memory"); __ret = ({ __typeof__(*(&((v)->counter))) _x_ = (i); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); }); __asm__ __volatile__ ("sync" : : : "memory"); __ret; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return arch_atomic64_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return ({ __typeof__(*(&((v)->counter))) _x_ = ((i)); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return (({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_acquire((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return arch_atomic64_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_relaxed((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_acquire(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_release(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return arch_atomic64_try_cmpxchg_relaxed(v, (s64 *)old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_and_test(atomic_long_t *v)
{
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_and_test(atomic_long_t *v)
{
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_negative(long i, atomic_long_t *v)
{
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_not_zero(atomic_long_t *v)
{
 return arch_atomic64_inc_not_zero((v));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
arch_atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
arch_atomic_long_dec_if_positive(atomic_long_t *v)
{
 return arch_atomic64_dec_if_positive(v);
}
# 82 "./include/linux/atomic.h" 2
# 1 "./include/linux/atomic/atomic-instrumented.h" 1
# 24 "./include/linux/atomic/atomic-instrumented.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_read_acquire(const atomic_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_set_release(atomic_t *v, int i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_add_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_sub_return_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_sub_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_and_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_or_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_xor_relaxed(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return (({ typeof(({ __typeof__(*(&((v)->counter))) _x_ = (i); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); })) __ret; __asm__ __volatile__ ("sync" : : : "memory"); __ret = ({ __typeof__(*(&((v)->counter))) _x_ = (i); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); }); __asm__ __volatile__ ("sync" : : : "memory"); __ret; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_acquire(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_release(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_xchg_relaxed(atomic_t *v, int i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) _x_ = ((i)); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return (({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_acquire((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_relaxed((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_and_test(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_not_zero((v));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
atomic_dec_if_positive(atomic_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_dec_if_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic64_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_set_release(atomic64_t *v, s64 i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic64_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_add_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic64_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return (({ typeof(({ __typeof__(*(&((v)->counter))) _x_ = (i); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); })) __ret; __asm__ __volatile__ ("sync" : : : "memory"); __ret = ({ __typeof__(*(&((v)->counter))) _x_ = (i); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); }); __asm__ __volatile__ ("sync" : : : "memory"); __ret; }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_release(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_xchg_relaxed(atomic64_t *v, s64 i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) _x_ = ((i)); (__typeof__(*(&((v)->counter)))) __xchg_relaxed((&((v)->counter)), (unsigned long)_x_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return (({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_acquire((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) _o_ = ((old)); __typeof__(*(&((v)->counter))) _n_ = ((new)); (__typeof__(*(&((v)->counter)))) __cmpxchg_relaxed((&((v)->counter)), (unsigned long)_o_, (unsigned long)_n_, sizeof(*(&((v)->counter)))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_not_zero((v));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) s64
atomic64_dec_if_positive(atomic64_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic64_dec_if_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 instrument_atomic_read(v, sizeof(*v));
 return arch_atomic_long_read_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 instrument_atomic_write(v, sizeof(*v));
 arch_atomic_long_set_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_return_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_inc_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_return_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_acquire(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_release(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_dec_relaxed(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_and_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_or_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 arch_atomic_long_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_acquire(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_release(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_acquire(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_release(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_xchg_relaxed(v, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_release(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 instrument_atomic_read_write(v, sizeof(*v));
 instrument_atomic_read_write(old, sizeof(*old));
 return arch_atomic_long_try_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_sub_and_test(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_and_test(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_negative(i, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_fetch_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_add_unless(v, a, u);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_not_zero(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_inc_unless_negative(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_unless_positive(v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 instrument_atomic_read_write(v, sizeof(*v));
 return arch_atomic_long_dec_if_positive(v);
}
# 83 "./include/linux/atomic.h" 2
# 26 "./include/linux/rcupdate.h" 2
# 1 "./include/linux/irqflags.h" 1
# 16 "./include/linux/irqflags.h"
# 1 "./arch/powerpc/include/asm/irqflags.h" 1
# 12 "./arch/powerpc/include/asm/irqflags.h"
# 1 "./arch/powerpc/include/asm/hw_irq.h" 1
# 12 "./arch/powerpc/include/asm/hw_irq.h"
# 1 "./arch/powerpc/include/asm/ptrace.h" 1
# 22 "./arch/powerpc/include/asm/ptrace.h"
# 1 "./include/linux/err.h" 1
# 24 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "./include/linux/err.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 23 "./arch/powerpc/include/asm/ptrace.h" 2
# 1 "./arch/powerpc/include/uapi/asm/ptrace.h" 1
# 33 "./arch/powerpc/include/uapi/asm/ptrace.h"
struct user_pt_regs



{
 unsigned long gpr[32];
 unsigned long nip;
 unsigned long msr;
 unsigned long orig_gpr3;
 unsigned long ctr;
 unsigned long link;
 unsigned long xer;
 unsigned long ccr;

 unsigned long softe;




 unsigned long trap;


 unsigned long dar;
 unsigned long dsisr;
 unsigned long result;
};
# 205 "./arch/powerpc/include/uapi/asm/ptrace.h"
struct ppc_debug_info {
 __u32 version;
 __u32 num_instruction_bps;
 __u32 num_data_bps;
 __u32 num_condition_regs;
 __u32 data_bp_alignment;
 __u32 sizeof_condition;
 __u64 features;
};
# 229 "./arch/powerpc/include/uapi/asm/ptrace.h"
struct ppc_hw_breakpoint {
 __u32 version;
 __u32 trigger_type;
 __u32 addr_mode;
 __u32 condition_mode;
 __u64 addr;
 __u64 addr2;
 __u64 condition_value;
};
# 24 "./arch/powerpc/include/asm/ptrace.h" 2

# 1 "./arch/powerpc/include/asm/reg.h" 1
# 29 "./arch/powerpc/include/asm/reg.h"
# 1 "./arch/powerpc/include/asm/reg_8xx.h" 1
# 30 "./arch/powerpc/include/asm/reg.h" 2
# 1385 "./arch/powerpc/include/asm/reg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mtmsr_isync(unsigned long val)
{
 asm volatile("mtmsrd" " %0; " "971:" " " "isync" "; " "972: .pushsection __ftr_alt_97,\"a\"; .align 2; 973:" " " "nop" "; " "974: .popsection; .pushsection __ftr_fixup,\"a\"; .align 3; 975: .8byte ((%1)); .8byte (0); .8byte 971b-975b; .8byte 972b-975b; .8byte 973b-975b; .8byte 974b-975b; .org . + (((974b-973b)) > ((972b-971b)));; .popsection;" " " : :
   "r" (val), "i" (0x0000000000008000UL) : "memory");
}
# 1401 "./arch/powerpc/include/asm/reg.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wrtee(unsigned long val)
{
 if (__builtin_constant_p(val))
  asm volatile("wrteei %0" : : "i" ((val & (1UL<<(15))) ? 1 : 0) : "memory");
 else
  asm volatile("wrtee %0" : : "r" (val) : "memory");
}

extern unsigned long msr_check_and_set(unsigned long bits);
extern bool strict_msr_control;
extern void __msr_check_and_clear(unsigned long bits);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void msr_check_and_clear(unsigned long bits)
{
 if (strict_msr_control)
  __msr_check_and_clear(bits);
}
# 1440 "./arch/powerpc/include/asm/reg.h"
extern unsigned long current_stack_frame(void);

register unsigned long current_stack_pointer asm("r1");

extern unsigned long scom970_read(unsigned int address);
extern void scom970_write(unsigned int address, unsigned long value);

struct pt_regs;

extern void ppc_save_regs(struct pt_regs *regs);
# 26 "./arch/powerpc/include/asm/ptrace.h" 2


struct pt_regs
{
 union {
  struct user_pt_regs user_regs;
  struct {
   unsigned long gpr[32];
   unsigned long nip;
   unsigned long msr;
   unsigned long orig_gpr3;
   unsigned long ctr;
   unsigned long link;
   unsigned long xer;
   unsigned long ccr;

   unsigned long softe;



   unsigned long trap;
   union {
    unsigned long dar;
    unsigned long dear;
   };
   union {
    unsigned long dsisr;
    unsigned long esr;
   };
   unsigned long result;
  };
 };

 union {
  struct {

   unsigned long ppr;
   unsigned long exit_result;

   union {

    unsigned long kuap;


    unsigned long amr;

   };

   unsigned long iamr;

  };
  unsigned long __pad[4];
 };
# 96 "./arch/powerpc/include/asm/ptrace.h"
};
# 153 "./arch/powerpc/include/asm/ptrace.h"
extern unsigned long profile_pc(struct pt_regs *regs);




long do_syscall_trace_enter(struct pt_regs *regs);
void do_syscall_trace_leave(struct pt_regs *regs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_return_regs_changed(void)
{

 local_paca->hsrr_valid = 0;
 local_paca->srr_valid = 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_return_ip(struct pt_regs *regs, unsigned long ip)
{
 regs->nip = ip;
 set_return_regs_changed();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_return_msr(struct pt_regs *regs, unsigned long msr)
{
 regs->msr = msr;
 set_return_regs_changed();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_add_return_ip(struct pt_regs *regs, long offset)
{
 regs_set_return_ip(regs, regs->nip + offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return regs->nip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void instruction_pointer_set(struct pt_regs *regs,
  unsigned long val)
{
 regs_set_return_ip(regs, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return regs->gpr[1];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return 0;
}
# 237 "./arch/powerpc/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_trap(struct pt_regs *regs, unsigned long val)
{
 regs->trap = (regs->trap & 0x1) | (val & ~0x1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trap_is_scv(struct pt_regs *regs)
{
 return (1 && ((regs)->trap & ~0x1) == 0x3000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trap_is_unsupported_scv(struct pt_regs *regs)
{
 return 1 && ((regs)->trap & ~0x1) == 0x7ff0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trap_is_syscall(struct pt_regs *regs)
{
 return (trap_is_scv(regs) || ((regs)->trap & ~0x1) == 0xc00);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trap_norestart(struct pt_regs *regs)
{
 return regs->trap & 0x1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_trap_norestart(struct pt_regs *regs)
{
 regs->trap |= 0x1;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_syscall_success(struct pt_regs *regs)
{
 if (trap_is_scv(regs))
  return !__builtin_expect(!!((unsigned long)(void *)((unsigned long)regs->gpr[3]) >= (unsigned long)-4095), 0);
 else
  return !(regs->ccr & 0x10000000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long regs_return_value(struct pt_regs *regs)
{
 if (trap_is_scv(regs))
  return regs->gpr[3];

 if (is_syscall_success(regs))
  return regs->gpr[3];
 else
  return -regs->gpr[3];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_return_value(struct pt_regs *regs, unsigned long rc)
{
 regs->gpr[3] = rc;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_has_msr_ri(void)
{
 return !0 && !0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool regs_is_unrecoverable(struct pt_regs *regs)
{
 return __builtin_expect(!!(cpu_has_msr_ri() && !(regs->msr & (1UL<<(1)))), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_recoverable(struct pt_regs *regs)
{
 if (cpu_has_msr_ri())
  regs_set_return_msr(regs, regs->msr | (1UL<<(1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_unrecoverable(struct pt_regs *regs)
{
 if (cpu_has_msr_ri())
  regs_set_return_msr(regs, regs->msr & ~(1UL<<(1)));
}
# 323 "./arch/powerpc/include/asm/ptrace.h"
# 1 "./include/linux/thread_info.h" 1
# 14 "./include/linux/thread_info.h"
# 1 "./include/linux/restart_block.h" 1
# 10 "./include/linux/restart_block.h"
# 1 "./include/linux/time64.h" 1




# 1 "./include/linux/math64.h" 1






# 1 "./include/vdso/math64.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}
# 8 "./include/linux/math64.h" 2
# 1 "./arch/powerpc/include/generated/asm/div64.h" 1
# 9 "./include/linux/math64.h" 2
# 26 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 40 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 54 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 67 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}
# 79 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 125 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 138 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}
# 176 "./include/linux/math64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 u32 ah, al;
 u64 ret;

 al = a;
 ah = a >> 32;

 ret = mul_u32_u32(al, mul) >> shift;
 if (ah)
  ret += mul_u32_u32(ah, mul) << (32 - shift);

 return ret;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u64_shr(u64 a, u64 b, unsigned int shift)
{
 union {
  u64 ll;
  struct {

   u32 high, low;



  } l;
 } rl, rm, rn, rh, a0, b0;
 u64 c;

 a0.ll = a;
 b0.ll = b;

 rl.ll = mul_u32_u32(a0.l.low, b0.l.low);
 rm.ll = mul_u32_u32(a0.l.low, b0.l.high);
 rn.ll = mul_u32_u32(a0.l.high, b0.l.low);
 rh.ll = mul_u32_u32(a0.l.high, b0.l.high);






 rl.l.high = c = (u64)rl.l.high + rm.l.low + rn.l.low;
 rh.l.low = c = (c >> 32) + rm.l.high + rn.l.high + rh.l.low;
 rh.l.high = (c >> 32) + rh.l.high;





 if (shift == 0)
  return rl.ll;
 if (shift < 64)
  return (rl.ll >> shift) | (rh.ll << (64 - shift));
 return rh.ll >> (shift & 63);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_s64_u64_shr(s64 a, u64 b, unsigned int shift)
{
 u64 ret;





 ret = mul_u64_u64_shr(__builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long long) || __builtin_types_compatible_p(typeof(a), unsigned long long), ({ signed long long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed long) || __builtin_types_compatible_p(typeof(a), unsigned long), ({ signed long __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed int) || __builtin_types_compatible_p(typeof(a), unsigned int), ({ signed int __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed short) || __builtin_types_compatible_p(typeof(a), unsigned short), ({ signed short __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), signed char) || __builtin_types_compatible_p(typeof(a), unsigned char), ({ signed char __x = (a); __x < 0 ? -__x : __x; }), __builtin_choose_expr( __builtin_types_compatible_p(typeof(a), char), (char)({ signed char __x = (a); __x<0?-__x:__x; }), ((void)0))))))), b, shift);

 if (a < 0)
  ret = -((s64) ret);

 return ret;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {

   u32 high, low;



  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}


u64 mul_u64_u64_div_u64(u64 a, u64 mul, u64 div);
# 6 "./include/linux/time64.h" 2
# 1 "./include/vdso/time64.h" 1
# 7 "./include/linux/time64.h" 2

typedef __s64 time64_t;
typedef __u64 timeu64_t;

# 1 "./include/uapi/linux/time.h" 1





# 1 "./include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "./include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_old_timespec {
 __kernel_old_time_t tv_sec;
 long tv_nsec;
};

struct __kernel_old_itimerval {
 struct __kernel_old_timeval it_interval;
 struct __kernel_old_timeval it_value;
};

struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "./include/uapi/linux/time.h" 2
# 33 "./include/uapi/linux/time.h"
struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 12 "./include/linux/time64.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 41 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 125 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec64_to_ns(const struct timespec64 *ts)
{

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return ((s64)~((u64)1 << 63));

 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 150 "./include/linux/time64.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 11 "./include/linux/restart_block.h" 2

struct timespec;
struct old_timespec32;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,
 TT_COMPAT = 2,
};




struct restart_block {
 unsigned long arch_data;
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct __kernel_timespec *rmtp;
    struct old_timespec32 *compat_rmtp;
   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 15 "./include/linux/thread_info.h" 2
# 33 "./include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};
# 60 "./include/linux/thread_info.h"
# 1 "./arch/powerpc/include/asm/thread_info.h" 1
# 40 "./arch/powerpc/include/asm/thread_info.h"
# 1 "./arch/powerpc/include/asm/processor.h" 1








# 1 "./include/vdso/processor.h" 1
# 10 "./include/vdso/processor.h"
# 1 "./arch/powerpc/include/asm/vdso/processor.h" 1
# 11 "./include/vdso/processor.h" 2
# 10 "./arch/powerpc/include/asm/processor.h" 2
# 41 "./arch/powerpc/include/asm/processor.h"
# 1 "./include/linux/thread_info.h" 1
# 42 "./arch/powerpc/include/asm/processor.h" 2
# 1 "./arch/powerpc/include/asm/ptrace.h" 1
# 43 "./arch/powerpc/include/asm/processor.h" 2
# 1 "./arch/powerpc/include/asm/hw_breakpoint.h" 1
# 13 "./arch/powerpc/include/asm/hw_breakpoint.h"
# 1 "./arch/powerpc/include/asm/inst.h" 1
# 46 "./arch/powerpc/include/asm/inst.h"
struct ppc_inst {
 u32 val;

 u32 suffix;

} __attribute__((__packed__));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ppc_inst_val(struct ppc_inst x)
{
 return x.val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ppc_inst_primary_opcode(struct ppc_inst x)
{
 return ppc_inst_val(x) >> 26;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ppc_inst_suffix(struct ppc_inst x)
{
 return x.suffix;
}
# 83 "./arch/powerpc/include/asm/inst.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ppc_inst ppc_inst_read(const u32 *ptr)
{
 if (1 && (*ptr >> 26) == 1)
  return ((struct ppc_inst){ .val = (*ptr), .suffix = (*(ptr + 1)) });
 else
  return ((struct ppc_inst){ .val = (*ptr) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ppc_inst_prefixed(struct ppc_inst x)
{
 return 1 && ppc_inst_primary_opcode(x) == 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ppc_inst ppc_inst_swab(struct ppc_inst x)
{
 return ((struct ppc_inst){ .val = ((__u32)__builtin_bswap32((__u32)(ppc_inst_val(x)))), .suffix = ((__u32)__builtin_bswap32((__u32)(ppc_inst_suffix(x)))) });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ppc_inst_equal(struct ppc_inst x, struct ppc_inst y)
{
 if (ppc_inst_val(x) != ppc_inst_val(y))
  return false;
 if (!ppc_inst_prefixed(x))
  return true;
 return ppc_inst_suffix(x) == ppc_inst_suffix(y);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ppc_inst_len(struct ppc_inst x)
{
 return ppc_inst_prefixed(x) ? 8 : 4;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 *ppc_inst_next(u32 *location, u32 *value)
{
 struct ppc_inst tmp;

 tmp = ppc_inst_read(value);

 return (void *)location + ppc_inst_len(tmp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ppc_inst_as_ulong(struct ppc_inst x)
{
 if (0)
  return ppc_inst_val(x);
 else if (0)
  return (u64)ppc_inst_suffix(x) << 32 | ppc_inst_val(x);
 else
  return (u64)ppc_inst_val(x) << 32 | ppc_inst_suffix(x);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *__ppc_inst_as_str(char str[sizeof("00000000 00000000")], struct ppc_inst x)
{
 if (ppc_inst_prefixed(x))
  sprintf(str, "%08x %08x", ppc_inst_val(x), ppc_inst_suffix(x));
 else
  sprintf(str, "%08x", ppc_inst_val(x));

 return str;
}
# 157 "./arch/powerpc/include/asm/inst.h"
int copy_inst_from_kernel_nofault(struct ppc_inst *inst, u32 *src);
# 14 "./arch/powerpc/include/asm/hw_breakpoint.h" 2


struct arch_hw_breakpoint {
 unsigned long address;
 u16 type;
 u16 len;
 u16 hw_len;
 u8 flags;
};
# 54 "./arch/powerpc/include/asm/hw_breakpoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nr_wp_slots(void)
{
 return cpu_has_feature(0x0008000000000000UL) ? 2 : 1;
}

bool wp_check_constraints(struct pt_regs *regs, struct ppc_inst instr,
     unsigned long ea, int type, int size,
     struct arch_hw_breakpoint *info);

void wp_get_instr_detail(struct pt_regs *regs, struct ppc_inst *instr,
    int *type, int *size, unsigned long *ea);


# 1 "./include/linux/kdebug.h" 1




# 1 "./arch/powerpc/include/asm/kdebug.h" 1






enum die_val {
 DIE_OOPS = 1,
 DIE_IABR_MATCH,
 DIE_DABR_MATCH,
 DIE_BPT,
 DIE_SSTEP,
};
# 6 "./include/linux/kdebug.h" 2

struct notifier_block;

struct die_args {
 struct pt_regs *regs;
 const char *str;
 long err;
 int trapnr;
 int signr;
};

int register_die_notifier(struct notifier_block *nb);
int unregister_die_notifier(struct notifier_block *nb);

int notify_die(enum die_val val, const char *str,
        struct pt_regs *regs, long err, int trap, int sig);
# 68 "./arch/powerpc/include/asm/hw_breakpoint.h" 2

# 1 "./arch/powerpc/include/asm/debug.h" 1







# 1 "./arch/powerpc/include/asm/hw_breakpoint.h" 1
# 9 "./arch/powerpc/include/asm/debug.h" 2

struct pt_regs;



extern int (*__debugger)(struct pt_regs *regs);
extern int (*__debugger_ipi)(struct pt_regs *regs);
extern int (*__debugger_bpt)(struct pt_regs *regs);
extern int (*__debugger_sstep)(struct pt_regs *regs);
extern int (*__debugger_iabr_match)(struct pt_regs *regs);
extern int (*__debugger_break_match)(struct pt_regs *regs);
extern int (*__debugger_fault_handler)(struct pt_regs *regs);
# 30 "./arch/powerpc/include/asm/debug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int debugger(struct pt_regs *regs) { if (__builtin_expect(!!(__debugger), 0)) return __debugger(regs); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int debugger_ipi(struct pt_regs *regs) { if (__builtin_expect(!!(__debugger_ipi), 0)) return __debugger_ipi(regs); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int debugger_bpt(struct pt_regs *regs) { if (__builtin_expect(!!(__debugger_bpt), 0)) return __debugger_bpt(regs); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int debugger_sstep(struct pt_regs *regs) { if (__builtin_expect(!!(__debugger_sstep), 0)) return __debugger_sstep(regs); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int debugger_iabr_match(struct pt_regs *regs) { if (__builtin_expect(!!(__debugger_iabr_match), 0)) return __debugger_iabr_match(regs); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int debugger_break_match(struct pt_regs *regs) { if (__builtin_expect(!!(__debugger_break_match), 0)) return __debugger_break_match(regs); return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int debugger_fault_handler(struct pt_regs *regs) { if (__builtin_expect(!!(__debugger_fault_handler), 0)) return __debugger_fault_handler(regs); return 0; }
# 48 "./arch/powerpc/include/asm/debug.h"
void __set_breakpoint(int nr, struct arch_hw_breakpoint *brk);
bool ppc_breakpoint_available(void);
# 70 "./arch/powerpc/include/asm/hw_breakpoint.h" 2

struct perf_event_attr;
struct perf_event;
struct pmu;
struct perf_sample_data;
struct task_struct;

extern int hw_breakpoint_slots(int type);
extern int arch_bp_generic_fields(int type, int *gen_bp_type);
extern int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_arch_parse(struct perf_event *bp,
        const struct perf_event_attr *attr,
        struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
      unsigned long val, void *data);
int arch_install_hw_breakpoint(struct perf_event *bp);
void arch_uninstall_hw_breakpoint(struct perf_event *bp);
void hw_breakpoint_pmu_read(struct perf_event *bp);
extern void flush_ptrace_hw_breakpoint(struct task_struct *tsk);

extern struct pmu perf_ops_bp;
extern void ptrace_triggered(struct perf_event *bp,
   struct perf_sample_data *data, struct pt_regs *regs);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hw_breakpoint_disable(void)
{
 int i;
 struct arch_hw_breakpoint null_brk = {0};

 if (!ppc_breakpoint_available())
  return;

 for (i = 0; i < nr_wp_slots(); i++)
  __set_breakpoint(i, &null_brk);
}
extern void thread_change_pc(struct task_struct *tsk, struct pt_regs *regs);
int hw_breakpoint_handler(struct die_args *args);
# 116 "./arch/powerpc/include/asm/hw_breakpoint.h"
extern bool dawr_force_enable;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dawr_enabled(void)
{
 return dawr_force_enable;
}
int set_dawr(int nr, struct arch_hw_breakpoint *brk);
# 44 "./arch/powerpc/include/asm/processor.h" 2
# 76 "./arch/powerpc/include/asm/processor.h"
struct task_struct;
void start_thread(struct pt_regs *regs, unsigned long fdptr, unsigned long sp);
void release_thread(struct task_struct *);





struct thread_fp_state {
 u64 fpr[32][2] __attribute__((aligned(16)));
 u64 fpscr;
};


struct thread_vr_state {
 vector128 vr[32] __attribute__((aligned(16)));
 vector128 vscr __attribute__((aligned(16)));
};

struct debug_reg {
# 132 "./arch/powerpc/include/asm/processor.h"
};

struct thread_struct {
 unsigned long ksp;


 unsigned long ksp_vsid;

 struct pt_regs *regs;
# 163 "./arch/powerpc/include/asm/processor.h"
 struct debug_reg debug;

 struct thread_fp_state fp_state;
 struct thread_fp_state *fp_save_area;

 int fpexc_mode;
 unsigned int align_ctl;

 struct perf_event *ptrace_bps[2];




 struct perf_event *last_hit_ubp[2];

 struct arch_hw_breakpoint hw_brk[2];
 unsigned long trap_nr;
 u8 load_slb;
 u8 load_fp;

 u8 load_vec;
 struct thread_vr_state vr_state;
 struct thread_vr_state *vr_save_area;
 unsigned long vrsave;
 int used_vr;



 int used_vsr;
# 202 "./arch/powerpc/include/asm/processor.h"
 u8 load_tm;
 u64 tm_tfhar;
 u64 tm_texasr;
 u64 tm_tfiar;
 struct pt_regs ckpt_regs;

 unsigned long tm_tar;
 unsigned long tm_ppr;
 unsigned long tm_dscr;
 unsigned long tm_amr;
# 222 "./arch/powerpc/include/asm/processor.h"
 struct thread_fp_state ckfp_state;
 struct thread_vr_state ckvr_state;
 unsigned long ckvrsave;
# 233 "./arch/powerpc/include/asm/processor.h"
 unsigned long dscr;
 unsigned long fscr;
# 244 "./arch/powerpc/include/asm/processor.h"
 int dscr_inherit;
 unsigned long tidr;


 unsigned long tar;
 unsigned long ebbrr;
 unsigned long ebbhr;
 unsigned long bescr;
 unsigned long siar;
 unsigned long sdar;
 unsigned long sier;
 unsigned long mmcr2;
 unsigned mmcr0;

 unsigned used_ebb;
 unsigned long mmcr3;
 unsigned long sier2;
 unsigned long sier3;


};
# 303 "./arch/powerpc/include/asm/processor.h"
unsigned long get_wchan(struct task_struct *p);
# 312 "./arch/powerpc/include/asm/processor.h"
extern int get_fpexc_mode(struct task_struct *tsk, unsigned long adr);
extern int set_fpexc_mode(struct task_struct *tsk, unsigned int val);




extern int get_endian(struct task_struct *tsk, unsigned long adr);
extern int set_endian(struct task_struct *tsk, unsigned int val);




extern int get_unalign_ctl(struct task_struct *tsk, unsigned long adr);
extern int set_unalign_ctl(struct task_struct *tsk, unsigned int val);

extern void load_fp_state(struct thread_fp_state *fp);
extern void store_fp_state(struct thread_fp_state *fp);
extern void load_vr_state(struct thread_vr_state *vr);
extern void store_vr_state(struct thread_vr_state *vr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __unpack_fe01(unsigned long msr_bits)
{
 return ((msr_bits & (1UL<<(11))) >> 10) | ((msr_bits & (1UL<<(8))) >> 8);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __pack_fe01(unsigned int fpmode)
{
 return ((fpmode << 10) & (1UL<<(11))) | ((fpmode << 8) & (1UL<<(8)));
}
# 353 "./arch/powerpc/include/asm/processor.h"
int validate_sp(unsigned long sp, struct task_struct *p,
                       unsigned long nbytes);
# 363 "./arch/powerpc/include/asm/processor.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetch(const void *x)
{
 if (__builtin_expect(!!(!x), 0))
  return;

 __asm__ __volatile__ ("dcbt 0,%0" : : "r" (x));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetchw(const void *x)
{
 if (__builtin_expect(!!(!x), 0))
  return;

 __asm__ __volatile__ ("dcbtst 0,%0" : : "r" (x));
}






extern unsigned long isa300_idle_stop_noloss(unsigned long psscr_val);
extern unsigned long isa300_idle_stop_mayloss(unsigned long psscr_val);
extern unsigned long isa206_idle_insn_mayloss(unsigned long type);





extern unsigned long cpuidle_disable;
enum idle_boot_override {IDLE_NO_OVERRIDE = 0, IDLE_POWERSAVE_OFF};

extern int powersave_nap;

extern void power7_idle_type(unsigned long type);
extern void arch300_idle_type(unsigned long stop_psscr_val,
         unsigned long stop_psscr_mask);

extern int fix_alignment(struct pt_regs *);
# 414 "./arch/powerpc/include/asm/processor.h"
int do_mathemu(struct pt_regs *regs);
# 41 "./arch/powerpc/include/asm/thread_info.h" 2






struct thread_info {
 int preempt_count;

 unsigned long local_flags;






 unsigned char slb_preload_nr;
 unsigned char slb_preload_tail;
 u32 slb_preload_esid[16U];


 unsigned long flags __attribute__((__aligned__((1 << 7))));
};
# 77 "./arch/powerpc/include/asm/thread_info.h"
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);

void arch_setup_new_exec(void);
# 154 "./arch/powerpc/include/asm/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_thread_local_flags(unsigned int flags)
{
 struct thread_info *ti = ((struct thread_info *)get_current());
 ti->local_flags &= ~flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_thread_local_flags(unsigned int flags)
{
 struct thread_info *ti = ((struct thread_info *)get_current());
 return (ti->local_flags & flags) != 0;
}
# 61 "./include/linux/thread_info.h" 2







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long set_restart_fn(struct restart_block *restart,
     long (*fn)(struct restart_block *))
{
 restart->fn = fn;
 do { } while (0);
 return -516;
}
# 87 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return arch_test_bit(flag, (unsigned long *)&ti->flags);
}
# 169 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{
 return 0;
}
# 188 "./include/linux/thread_info.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_object_size(const void *ptr, unsigned long n,
         bool to_user)
{ }


extern void
__bad_copy_from(void);
extern void
__bad_copy_to(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Buffer overflow detected (%d < %lu)!\n", size, count); do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/thread_info.h"), "i" (200), "i" ((1 << 0) | ((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = __builtin_object_size(addr, 0);
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 if (({ int __ret_warn_on = !!(bytes > ((int)(~0U >> 1))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/thread_info.h"), "i" (216), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 check_object_size(addr, bytes, is_source);
 return true;
}
# 324 "./arch/powerpc/include/asm/ptrace.h" 2
extern int regs_query_register_offset(const char *name);
extern const char *regs_query_register_name(unsigned int offset);
# 337 "./arch/powerpc/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_register(struct pt_regs *regs,
      unsigned int offset)
{
 if (__builtin_expect(!!(offset > (__builtin_offsetof(struct pt_regs, dsisr))), 0))
  return 0;
 return *(unsigned long *)((unsigned long)regs + offset);
}
# 354 "./arch/powerpc/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool regs_within_kernel_stack(struct pt_regs *regs,
      unsigned long addr)
{
 return ((addr & ~((1 << 14) - 1)) ==
  (((regs)->gpr[1]) & ~((1 << 14) - 1)));
}
# 370 "./arch/powerpc/include/asm/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n)
{
 unsigned long *addr = (unsigned long *)((regs)->gpr[1]);
 addr += n;
 if (regs_within_kernel_stack(regs, (unsigned long)addr))
  return *addr;
 else
  return 0;
}
# 13 "./arch/powerpc/include/asm/hw_irq.h" 2
# 62 "./arch/powerpc/include/asm/hw_irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hard_irq_enable(void)
{
 if (0 || 0)
  wrtee((1UL<<(15)));
 else if (0)
  asm volatile("mtspr " "80" ",2" : : : "memory");
 else if (1)
  asm volatile("mtmsrd %0," "1" : : "r" ((1UL<<(15)) | (1UL<<(1))) : "memory");
 else
  asm volatile("mtmsrd %0," "0" : : "r" ((({unsigned long rval; asm volatile("mfmsr %0" : "=r" (rval) : : "memory"); rval;}) | (1UL<<(15)))) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hard_irq_disable(void)
{
 if (0 || 0)
  wrtee(0);
 else if (0)
  asm volatile("mtspr " "81" ",2" : : : "memory");
 else if (1)
  asm volatile("mtmsrd %0," "1" : : "r" ((1UL<<(1))) : "memory");
 else
  asm volatile("mtmsrd %0," "0" : : "r" ((({unsigned long rval; asm volatile("mfmsr %0" : "=r" (rval) : : "memory"); rval;}) & ~(1UL<<(15)))) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hard_EE_RI_disable(void)
{
 if (0 || 0)
  wrtee(0);
 else if (0)
  asm volatile("mtspr " "82" ",2" : : : "memory");
 else if (1)
  asm volatile("mtmsrd %0," "1" : : "r" (0) : "memory");
 else
  asm volatile("mtmsrd %0," "0" : : "r" ((({unsigned long rval; asm volatile("mfmsr %0" : "=r" (rval) : : "memory"); rval;}) & ~((1UL<<(15)) | (1UL<<(1))))) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hard_RI_enable(void)
{
 if (0 || 0)
  return;

 if (0)
  asm volatile("mtspr " "81" ",2" : : : "memory");
 else if (1)
  asm volatile("mtmsrd %0," "1" : : "r" ((1UL<<(1))) : "memory");
 else
  asm volatile("mtmsrd %0," "0" : : "r" ((({unsigned long rval; asm volatile("mfmsr %0" : "=r" (rval) : : "memory"); rval;}) | (1UL<<(1)))) : "memory");
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) unsigned long irq_soft_mask_return(void)
{
 unsigned long flags;

 asm volatile(
  "lbz %0,%1(13)"
  : "=r" (flags)
  : "i" (__builtin_offsetof(struct paca_struct, irq_soft_mask)));

 return flags;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void irq_soft_mask_set(unsigned long mask)
{
# 151 "./arch/powerpc/include/asm/hw_irq.h"
 asm volatile(
  "stb %0,%1(13)"
  :
  : "r" (mask),
    "i" (__builtin_offsetof(struct paca_struct, irq_soft_mask))
  : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) unsigned long irq_soft_mask_set_return(unsigned long mask)
{
 unsigned long flags;





 asm volatile(
  "lbz %0,%1(13); stb %2,%1(13)"
  : "=&r" (flags)
  : "i" (__builtin_offsetof(struct paca_struct, irq_soft_mask)),
    "r" (mask)
  : "memory");

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) unsigned long irq_soft_mask_or_return(unsigned long mask)
{
 unsigned long flags, tmp;

 asm volatile(
  "lbz %0,%2(13); or %1,%0,%3; stb %1,%2(13)"
  : "=&r" (flags), "=r" (tmp)
  : "i" (__builtin_offsetof(struct paca_struct, irq_soft_mask)),
    "r" (mask)
  : "memory");





 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_save_flags(void)
{
 return irq_soft_mask_return();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_disable(void)
{
 irq_soft_mask_set(1);
}

extern void arch_local_irq_restore(unsigned long);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_enable(void)
{
 arch_local_irq_restore(0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_irq_save(void)
{
 return irq_soft_mask_set_return(1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_irqs_disabled_flags(unsigned long flags)
{
 return flags & 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_irqs_disabled(void)
{
 return arch_irqs_disabled_flags(arch_local_save_flags());
}
# 286 "./arch/powerpc/include/asm/hw_irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __lazy_irq_pending(u8 irq_happened)
{
 return !!(irq_happened & ~0x01);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lazy_irq_pending(void)
{
 return __lazy_irq_pending(local_paca->irq_happened);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lazy_irq_pending_nocheck(void)
{
 return __lazy_irq_pending(local_paca->irq_happened);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void may_hard_irq_enable(void)
{
 if (!(local_paca->irq_happened & (0x04|0x20))) {
  local_paca->irq_happened &= ~0x01;
  __hard_irq_enable();
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_irq_disabled_regs(struct pt_regs *regs)
{
 return (regs->softe & 1);
}

extern bool prep_irq_for_idle(void);
extern bool prep_irq_for_idle_irqsoff(void);
extern void irq_set_pending_from_srr1(unsigned long srr1);



extern void force_external_irq_replay(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_soft_mask_regs_set_state(struct pt_regs *regs, unsigned long val)
{
 regs->softe = val;
}
# 13 "./arch/powerpc/include/asm/irqflags.h" 2
# 17 "./include/linux/irqflags.h" 2
# 1 "./arch/powerpc/include/asm/percpu.h" 1
# 18 "./arch/powerpc/include/asm/percpu.h"
# 1 "./include/asm-generic/percpu.h" 1






# 1 "./include/linux/percpu-defs.h" 1
# 308 "./include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __this_cpu_preempt_check(const char *op) { }
# 8 "./include/asm-generic/percpu.h" 2
# 19 "./include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[2048];
# 48 "./include/asm-generic/percpu.h"
extern void setup_per_cpu_areas(void);
# 19 "./arch/powerpc/include/asm/percpu.h" 2
# 18 "./include/linux/irqflags.h" 2
# 27 "./include/linux/irqflags.h"
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_softirqs_off(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on_prepare(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on(unsigned long ip) { }
  static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_off(unsigned long ip) { }
# 27 "./include/linux/rcupdate.h" 2
# 1 "./include/linux/preempt.h" 1
# 78 "./include/linux/preempt.h"
# 1 "./arch/powerpc/include/generated/asm/preempt.h" 1
# 1 "./include/asm-generic/preempt.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int preempt_count(void)
{
 return ({ do { extern void __compiletime_assert_40(void) ; if (!((sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(char) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(short) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(int) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(long)) || sizeof(((struct thread_info *)get_current())->preempt_count) == sizeof(long long))) __compiletime_assert_40(); } while (0); (*(const volatile typeof( _Generic((((struct thread_info *)get_current())->preempt_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((struct thread_info *)get_current())->preempt_count))) *)&(((struct thread_info *)get_current())->preempt_count)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) volatile int *preempt_count_ptr(void)
{
 return &((struct thread_info *)get_current())->preempt_count;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void preempt_count_set(int pc)
{
 *preempt_count_ptr() = pc;
}
# 35 "./include/asm-generic/preempt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_preempt_need_resched(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool test_preempt_need_resched(void)
{
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_add(int val)
{
 *preempt_count_ptr() += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __preempt_count_sub(int val)
{
 *preempt_count_ptr() -= val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __preempt_count_dec_and_test(void)
{





 return !--*preempt_count_ptr() && test_ti_thread_flag(((struct thread_info *)get_current()), 2);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(preempt_count() == preempt_offset && test_ti_thread_flag(((struct thread_info *)get_current()), 2)), 0);

}
# 2 "./arch/powerpc/include/generated/asm/preempt.h" 2
# 79 "./include/linux/preempt.h" 2
# 287 "./include/linux/preempt.h"
struct preempt_notifier;
# 303 "./include/linux/preempt.h"
struct preempt_ops {
 void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 void (*sched_out)(struct preempt_notifier *notifier,
     struct task_struct *next);
};
# 316 "./include/linux/preempt.h"
struct preempt_notifier {
 struct hlist_node link;
 struct preempt_ops *ops;
};

void preempt_notifier_inc(void);
void preempt_notifier_dec(void);
void preempt_notifier_register(struct preempt_notifier *notifier);
void preempt_notifier_unregister(struct preempt_notifier *notifier);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void preempt_notifier_init(struct preempt_notifier *notifier,
         struct preempt_ops *ops)
{
 INIT_HLIST_NODE(&notifier->link);
 notifier->ops = ops;
}
# 392 "./include/linux/preempt.h"
extern void migrate_disable(void);
extern void migrate_enable(void);
# 28 "./include/linux/rcupdate.h" 2
# 1 "./include/linux/bottom_half.h" 1
# 10 "./include/linux/bottom_half.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool local_bh_blocked(void) { return false; }
# 29 "./include/linux/rcupdate.h" 2
# 1 "./include/linux/lockdep.h" 1
# 14 "./include/linux/lockdep.h"
# 1 "./include/linux/smp.h" 1
# 13 "./include/linux/smp.h"
# 1 "./include/linux/cpumask.h" 1
# 12 "./include/linux/cpumask.h"
# 1 "./include/linux/bitmap.h" 1








# 1 "./include/linux/find.h" 1
# 11 "./include/linux/find.h"
extern unsigned long _find_next_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long nbits,
  unsigned long start, unsigned long invert, unsigned long le);
extern unsigned long _find_first_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_first_and_bit(const unsigned long *addr1,
      const unsigned long *addr2, unsigned long size);
extern unsigned long _find_first_zero_bit(const unsigned long *addr, unsigned long size);
extern unsigned long _find_last_bit(const unsigned long *addr, unsigned long size);
# 30 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_bit(const unsigned long *addr, unsigned long size,
       unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr, ((void *)0), size, offset, 0UL, 0);
}
# 59 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr1 & *addr2 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr1, addr2, size, offset, 0UL, 0);
}
# 88 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,
     unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_next_bit(addr, ((void *)0), size, offset, ~0UL, 0);
}
# 115 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_first_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __ffs(val) : size;
 }

 return _find_first_bit(addr, size);
}
# 138 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_first_and_bit(const unsigned long *addr1,
     const unsigned long *addr2,
     unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr1 & *addr2 & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __ffs(val) : size;
 }

 return _find_first_and_bit(addr1, addr2, size);
}
# 162 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_first_zero_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_first_zero_bit(addr, size);
}
# 183 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_last_bit(const unsigned long *addr, unsigned long size)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *addr & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((0) > (size - 1)) * 0l)) : (int *)8))), (0) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (0)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));

  return val ? __fls(val) : size;
 }

 return _find_last_bit(addr, size);
}
# 206 "./include/linux/find.h"
extern unsigned long find_next_clump8(unsigned long *clump,
          const unsigned long *addr,
          unsigned long size, unsigned long offset);
# 236 "./include/linux/find.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_zero_bit_le(const void *addr, unsigned
  long size, unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *(const unsigned long *)addr;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = __swab(val) | ~((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val == ~0UL ? size : __ffs(~(val));
 }

 return _find_next_bit(addr, ((void *)0), size, offset, ~0UL, 1);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long find_next_bit_le(const void *addr, unsigned
  long size, unsigned long offset)
{
 if ((__builtin_constant_p(size) && (size) <= 64 && (size) > 0)) {
  unsigned long val = *(const unsigned long *)addr;

  if (__builtin_expect(!!(offset >= size), 0))
   return size;

  val = __swab(val) & ((((int)(sizeof(struct { int:(-!!(__builtin_choose_expr( (sizeof(int) == sizeof(*(8 ? ((void *)((long)((offset) > (size - 1)) * 0l)) : (int *)8))), (offset) > (size - 1), 0))); })))) + (((~(((0UL)))) - ((((1UL))) << (offset)) + 1) & (~(((0UL))) >> (64 - 1 - (size - 1)))));
  return val ? __ffs(val) : size;
 }

 return _find_next_bit(addr, ((void *)0), size, offset, 0UL, 1);
}
# 10 "./include/linux/bitmap.h" 2




struct device;
# 119 "./include/linux/bitmap.h"
unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
void bitmap_free(const unsigned long *bitmap);


unsigned long *devm_bitmap_alloc(struct device *dev,
     unsigned int nbits, gfp_t flags);
unsigned long *devm_bitmap_zalloc(struct device *dev,
      unsigned int nbits, gfp_t flags);





int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
         const unsigned long *src2,
         const unsigned long *src3,
         unsigned int nbits);
void __bitmap_complement(unsigned long *dst, const unsigned long *src,
    unsigned int nbits);
void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
     unsigned int shift, unsigned int nbits);
void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
void bitmap_cut(unsigned long *dst, const unsigned long *src,
  unsigned int first, unsigned int cut, unsigned int nbits);
int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
    const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
void __bitmap_replace(unsigned long *dst,
        const unsigned long *old, const unsigned long *new,
        const unsigned long *mask, unsigned int nbits);
int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_subset(const unsigned long *bitmap1,
      const unsigned long *bitmap2, unsigned int nbits);
int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
void __bitmap_set(unsigned long *map, unsigned int start, int len);
void __bitmap_clear(unsigned long *map, unsigned int start, int len);

unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 185 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *dst, int nbits);
int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);


void bitmap_copy_le(unsigned long *dst, const unsigned long *src, unsigned int nbits);



unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);

extern int bitmap_print_bitmask_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);

extern int bitmap_print_list_to_buf(char *buf, const unsigned long *maskp,
          int nmaskbits, loff_t off, size_t count);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 64)
  dst[nbits / 64] &= (~0UL >> (-(nbits) & (64 - 1)));
}






void bitmap_from_arr32(unsigned long *bitmap, const u32 *buf,
       unsigned int nbits);
void bitmap_to_arr32(u32 *buf, const unsigned long *bitmap,
       unsigned int nbits);
# 282 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 332 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & ((8 * sizeof(unsigned long)) - 1)) &&
     (((nbits) & ((typeof(nbits))((8 * sizeof(unsigned long))) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}
# 352 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_or_equal(const unsigned long *src1,
       const unsigned long *src2,
       const unsigned long *src3,
       unsigned int nbits)
{
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return __bitmap_or_equal(src1, src2, src3, nbits);

 return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (64 - 1))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_zero_bit(src, nbits) == nbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___set_bit(start, map);
 else if (__builtin_constant_p(start & ((8 * sizeof(unsigned long)) - 1)) &&
   (((start) & ((typeof(start))((8 * sizeof(unsigned long))) - 1)) == 0) &&
   __builtin_constant_p(nbits & ((8 * sizeof(unsigned long)) - 1)) &&
   (((nbits) & ((typeof(nbits))((8 * sizeof(unsigned long))) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  arch___clear_bit(start, map);
 else if (__builtin_constant_p(start & ((8 * sizeof(unsigned long)) - 1)) &&
   (((start) & ((typeof(start))((8 * sizeof(unsigned long))) - 1)) == 0) &&
   __builtin_constant_p(nbits & ((8 * sizeof(unsigned long)) - 1)) &&
   (((nbits) & ((typeof(nbits))((8 * sizeof(unsigned long))) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_replace(unsigned long *dst,
      const unsigned long *old,
      const unsigned long *new,
      const unsigned long *mask,
      unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*old & ~(*mask)) | (*new & *mask);
 else
  __bitmap_replace(dst, old, new, mask, nbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_next_set_region(unsigned long *bitmap,
       unsigned int *rs, unsigned int *re,
       unsigned int end)
{
 *rs = find_next_bit(bitmap, end, *rs);
 *re = find_next_zero_bit(bitmap, end, *rs + 1);
}
# 513 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 529 "./include/linux/bitmap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long bitmap_get_value8(const unsigned long *map,
           unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 return (map[index] >> offset) & 0xFF;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_set_value8(unsigned long *map, unsigned long value,
         unsigned long start)
{
 const size_t index = ((start) / 64);
 const unsigned long offset = start % 64;

 map[index] &= ~(0xFFUL << offset);
 map[index] |= value << offset;
}
# 13 "./include/linux/cpumask.h" 2




typedef struct cpumask { unsigned long bits[(((2048) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 39 "./include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 90 "./include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
extern struct cpumask __cpu_dying_mask;






extern atomic_t __num_online_cpus;

extern cpumask_t cpus_booted_once_mask;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{



}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, ((unsigned int)2048));
 return cpu;
}
# 204 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_first_bit(((srcp)->bits), ((unsigned int)2048));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_first_zero(const struct cpumask *srcp)
{
 return find_first_zero_bit(((srcp)->bits), ((unsigned int)2048));
}
# 227 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned int cpumask_first_and(const struct cpumask *srcp1, const struct cpumask *srcp2)
{
 return find_first_and_bit(((srcp1)->bits), ((srcp2)->bits), ((unsigned int)2048));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_last(const struct cpumask *srcp)
{
 return find_last_bit(((srcp)->bits), ((unsigned int)2048));
}

unsigned int __attribute__((__pure__)) cpumask_next(int n, const struct cpumask *srcp);
# 253 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)2048), n+1);
}

int __attribute__((__pure__)) cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int __attribute__((__pure__)) cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
int cpumask_any_and_distribute(const struct cpumask *src1p,
          const struct cpumask *src2p);
int cpumask_any_distribute(const struct cpumask *srcp);
# 292 "./include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 344 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 arch___set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 arch___clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 377 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return arch_test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 391 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 405 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)2048));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)2048));
}
# 436 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)2048));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)2048));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)2048));
}
# 479 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)2048));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)2048));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)2048));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_or_equal(const struct cpumask *src1p,
        const struct cpumask *src2p,
        const struct cpumask *src3p)
{
 return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
          ((src3p)->bits), ((unsigned int)2048));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)2048));
}
# 544 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)2048));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)2048));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)2048));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)2048));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)2048));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)2048));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)2048));
}
# 646 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)2048));
}
# 660 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)2048));
}
# 674 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parse(buf, (~0U), ((dstp)->bits), ((unsigned int)2048));
}
# 686 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)2048));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_size(void)
{
 return (((((unsigned int)2048)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 759 "./include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((2048) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 819 "./include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 2048);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

void set_cpu_online(unsigned int cpu, bool online);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_dying(unsigned int cpu, bool dying)
{
 if (dying)
  cpumask_set_cpu(cpu, &__cpu_dying_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_dying_mask);
}
# 880 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 892 "./include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((2048) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 911 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int num_online_cpus(void)
{
 return atomic_read(&__num_online_cpus);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_online(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_online_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_possible(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_possible_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_present(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_present_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_active(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_active_mask));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_dying(unsigned int cpu)
{
 return cpumask_test_cpu(cpu, ((const struct cpumask *)&__cpu_dying_mask));
}
# 1005 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 1027 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_bitmask_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_bitmask_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count);
}
# 1042 "./include/linux/cpumask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_list_to_buf(char *buf, const struct cpumask *mask,
  loff_t off, size_t count)
{
 return bitmap_print_list_to_buf(buf, ((mask)->bits),
       nr_cpu_ids, off, count);
}
# 14 "./include/linux/smp.h" 2

# 1 "./include/linux/smp_types.h" 1




# 1 "./include/linux/llist.h" 1
# 54 "./include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 69 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 187 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_empty(const struct llist_head *head)
{
 return ({ do { extern void __compiletime_assert_41(void) ; if (!((sizeof(head->first) == sizeof(char) || sizeof(head->first) == sizeof(short) || sizeof(head->first) == sizeof(int) || sizeof(head->first) == sizeof(long)) || sizeof(head->first) == sizeof(long long))) __compiletime_assert_41(); } while (0); (*(const volatile typeof( _Generic((head->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head->first))) *)&(head->first)); }) == ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __llist_add_batch(struct llist_node *new_first,
         struct llist_node *new_last,
         struct llist_head *head)
{
 new_last->next = head->first;
 head->first = new_first;
 return new_last->next == ((void *)0);
}
# 217 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __llist_add(struct llist_node *new, struct llist_head *head)
{
 return __llist_add_batch(new, new, head);
}
# 235 "./include/linux/llist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(&head->first) __ai_ptr = (&head->first); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ typeof(({ __typeof__(*(__ai_ptr)) _x_ = (((void *)0)); (__typeof__(*(__ai_ptr))) __xchg_relaxed((__ai_ptr), (unsigned long)_x_, sizeof(*(__ai_ptr))); })) __ret; __asm__ __volatile__ ("sync" : : : "memory"); __ret = ({ __typeof__(*(__ai_ptr)) _x_ = (((void *)0)); (__typeof__(*(__ai_ptr))) __xchg_relaxed((__ai_ptr), (unsigned long)_x_, sizeof(*(__ai_ptr))); }); __asm__ __volatile__ ("sync" : : : "memory"); __ret; }); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *__llist_del_all(struct llist_head *head)
{
 struct llist_node *first = head->first;

 head->first = ((void *)0);
 return first;
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 6 "./include/linux/smp_types.h" 2

enum {
 CSD_FLAG_LOCK = 0x01,

 IRQ_WORK_PENDING = 0x01,
 IRQ_WORK_BUSY = 0x02,
 IRQ_WORK_LAZY = 0x04,
 IRQ_WORK_HARD_IRQ = 0x08,

 IRQ_WORK_CLAIMED = (IRQ_WORK_PENDING | IRQ_WORK_BUSY),

 CSD_TYPE_ASYNC = 0x00,
 CSD_TYPE_SYNC = 0x10,
 CSD_TYPE_IRQ_WORK = 0x20,
 CSD_TYPE_TTWU = 0x30,

 CSD_FLAG_TYPE_MASK = 0xF0,
};
# 58 "./include/linux/smp_types.h"
struct __call_single_node {
 struct llist_node llist;
 union {
  unsigned int u_flags;
  atomic_t a_flags;
 };

 u16 src, dst;

};
# 16 "./include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
typedef bool (*smp_cond_func_t)(int cpu, void *info);




struct __call_single_data {
 struct __call_single_node node;
 smp_call_func_t func;
 void *info;
};





typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));
# 45 "./include/linux/smp.h"
extern void __smp_call_single_queue(int cpu, struct llist_node *node);


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);

void on_each_cpu_cond_mask(smp_cond_func_t cond_func, smp_call_func_t func,
      void *info, bool wait, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, struct __call_single_data *csd);





void panic_smp_self_stop(void);
void nmi_panic_self_stop(struct pt_regs *regs);
void crash_smp_send_stop(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu(smp_call_func_t func, void *info, int wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}
# 90 "./include/linux/smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_mask(const struct cpumask *mask,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(((void *)0), func, info, wait, mask);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void on_each_cpu_cond(smp_cond_func_t cond_func,
        smp_call_func_t func, void *info, bool wait)
{
 on_each_cpu_cond_mask(cond_func, func, info, wait, ((const struct cpumask *)&__cpu_online_mask));
}







# 1 "./arch/powerpc/include/asm/smp.h" 1
# 19 "./arch/powerpc/include/asm/smp.h"
# 1 "./include/linux/irqreturn.h" 1
# 11 "./include/linux/irqreturn.h"
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;
# 20 "./arch/powerpc/include/asm/smp.h" 2








extern int boot_cpuid;
extern int spinning_secondaries;
extern u32 *cpu_to_phys_id;
extern bool coregroup_enabled;

extern int cpu_to_chip_id(int cpu);
extern int *chip_id_lookup_table;

extern __attribute__((section(".data..percpu" ""))) __typeof__(cpumask_var_t) thread_group_l1_cache_map;
extern __attribute__((section(".data..percpu" ""))) __typeof__(cpumask_var_t) thread_group_l2_cache_map;
extern __attribute__((section(".data..percpu" ""))) __typeof__(cpumask_var_t) thread_group_l3_cache_map;



struct smp_ops_t {
 void (*message_pass)(int cpu, int msg);

 void (*cause_ipi)(int cpu);

 int (*cause_nmi_ipi)(int cpu);
 void (*probe)(void);
 int (*kick_cpu)(int nr);
 int (*prepare_cpu)(int nr);
 void (*setup_cpu)(int nr);
 void (*bringup_done)(void);
 void (*take_timebase)(void);
 void (*give_timebase)(void);
 int (*cpu_disable)(void);
 void (*cpu_die)(unsigned int nr);
 int (*cpu_bootable)(unsigned int nr);

 void (*cpu_offline_self)(void);

};

extern int smp_send_nmi_ipi(int cpu, void (*fn)(struct pt_regs *), u64 delay_us);
extern int smp_send_safe_nmi_ipi(int cpu, void (*fn)(struct pt_regs *), u64 delay_us);
extern void smp_send_debugger_break(void);
extern void start_secondary_resume(void);
extern void smp_generic_give_timebase(void);
extern void smp_generic_take_timebase(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned int) cpu_pvr;


int generic_cpu_disable(void);
void generic_cpu_die(unsigned int cpu);
void generic_set_cpu_dead(unsigned int cpu);
void generic_set_cpu_up(unsigned int cpu);
int generic_check_cpu_restart(unsigned int cpu);
int is_cpu_dead(unsigned int cpu);
# 119 "./arch/powerpc/include/asm/smp.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(cpumask_var_t) cpu_sibling_map;
extern __attribute__((section(".data..percpu" ""))) __typeof__(cpumask_var_t) cpu_l2_cache_map;
extern __attribute__((section(".data..percpu" ""))) __typeof__(cpumask_var_t) cpu_core_map;
extern __attribute__((section(".data..percpu" ""))) __typeof__(cpumask_var_t) cpu_smallcore_map;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *cpu_sibling_mask(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_sibling_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map)))); (typeof((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *cpu_core_mask(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_core_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_core_map)))) *)((&(cpu_core_map)))); (typeof((typeof(*((&(cpu_core_map)))) *)((&(cpu_core_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *cpu_l2_cache_mask(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_l2_cache_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_l2_cache_map)))) *)((&(cpu_l2_cache_map)))); (typeof((typeof(*((&(cpu_l2_cache_map)))) *)((&(cpu_l2_cache_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *cpu_smallcore_mask(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_smallcore_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_smallcore_map)))) *)((&(cpu_smallcore_map)))); (typeof((typeof(*((&(cpu_smallcore_map)))) *)((&(cpu_smallcore_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

extern int cpu_to_core_id(int cpu);

extern bool has_big_cores;
extern bool thread_group_shares_l2;
extern bool thread_group_shares_l3;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_smt_mask(int cpu)
{
 if (has_big_cores)
  return (*({ do { const void *__vpp_verify = (typeof((&(cpu_smallcore_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_smallcore_map)))) *)((&(cpu_smallcore_map)))); (typeof((typeof(*((&(cpu_smallcore_map)))) *)((&(cpu_smallcore_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));

 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_sibling_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map)))); (typeof((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}
# 176 "./arch/powerpc/include/asm/smp.h"
extern int smp_handle_nmi_ipi(struct pt_regs *regs);





extern int smp_request_message_ipi(int virq, int message);
extern const char *smp_ipi_name[];


extern void smp_muxed_ipi_message_pass(int cpu, int msg);
extern void smp_muxed_ipi_set_message(int cpu, int msg);
extern irqreturn_t smp_ipi_demux(void);
extern irqreturn_t smp_ipi_demux_relaxed(void);

void smp_init_pSeries(void);
void smp_init_cell(void);
void smp_setup_cpu_maps(void);

extern int __cpu_disable(void);
extern void __cpu_die(unsigned int cpu);
# 223 "./arch/powerpc/include/asm/smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_hard_smp_processor_id(int cpu)
{
 return paca_ptrs[cpu]->hw_cpu_id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_hard_smp_processor_id(int cpu, int phys)
{
 paca_ptrs[cpu]->hw_cpu_id = phys;
}
# 249 "./arch/powerpc/include/asm/smp.h"
extern void smp_release_cpus(void);




extern int smt_enabled_at_boot;

extern void smp_mpic_probe(void);
extern void smp_mpic_setup_cpu(int cpu);
extern int smp_generic_kick_cpu(int nr);
extern int smp_generic_cpu_bootable(unsigned int nr);


extern void smp_generic_give_timebase(void);
extern void smp_generic_take_timebase(void);

extern struct smp_ops_t *smp_ops;

extern void arch_send_call_function_single_ipi(int cpu);
extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);





extern void generic_secondary_smp_init(void);
extern unsigned long __secondary_hold_spinloop;
extern unsigned long __secondary_hold_acknowledge;
extern char __secondary_hold;
extern unsigned int booting_thread_hwid;

extern void __early_start(void);
# 115 "./include/linux/smp.h" 2
# 124 "./include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




void smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_nr_cpu_ids(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 275 "./include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_thaw_secondary_cpus_begin(void);
extern void arch_thaw_secondary_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 15 "./include/linux/lockdep.h" 2


struct task_struct;


extern int prove_locking;
extern int lock_stat;
# 341 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_init_task(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_off(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_on(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_set_selftest_task(struct task_struct *task)
{
}
# 390 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_register_key(struct lock_class_key *key)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_unregister_key(struct lock_class_key *key)
{
}







extern int lock_is_held(const void *);
extern int lockdep_is_held(const void *);
# 428 "./include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 442 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_free_task(struct task_struct *task) {}
# 504 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 672 "./include/linux/lockdep.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 30 "./include/linux/rcupdate.h" 2
# 40 "./include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void rcu_barrier_tasks_rude(void);
void synchronize_rcu(void);
# 63 "./include/linux/rcupdate.h"
void rcu_read_unlock_strict(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_lock(void)
{
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_unlock(void)
{
 __asm__ __volatile__("": : :"memory");
 rcu_read_unlock_strict();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_preempt_depth(void)
{
 return 0;
}




void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_init_tasks_generic(void);





void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 109 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_enter(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_exit(void) { }
# 119 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_init_nohz(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_offload(int cpu) { return -22; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_nocb_cpu_deoffload(int cpu) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_nocb_flush_deferred_wakeup(void) { }
# 190 "./include/linux/rcupdate.h"
void call_rcu_tasks_rude(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks_rude(void);



void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 225 "./include/linux/rcupdate.h"
# 1 "./include/linux/rcutree.h" 1
# 20 "./include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kvfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
void rcu_momentary_dyntick_idle(void);
void kfree_rcu_scheduler_running(void);
bool rcu_gp_might_be_stalled(void);
unsigned long get_state_synchronize_rcu(void);
unsigned long start_poll_synchronize_rcu(void);
bool poll_state_synchronize_rcu(unsigned long oldstate);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_is_idle_cpu(int cpu);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_irq_exit_check_preempt(void) { }


void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_inkernel_boot_has_ended(void);
bool rcu_is_watching(void);

void rcu_all_qs(void);



int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 226 "./include/linux/rcupdate.h" 2
# 246 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_lockdep_current_cpu_online(void) { return true; }


extern struct lockdep_map rcu_lock_map;
extern struct lockdep_map rcu_bh_lock_map;
extern struct lockdep_map rcu_sched_lock_map;
extern struct lockdep_map rcu_callback_map;
# 286 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_sched_held(void)
{
 return !0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_any_held(void)
{
 return !0;
}
# 683 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}
# 714 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock(void)
{
 do { } while (0 && (!rcu_is_watching()));

 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 737 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_bh(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 775 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched(void)
{
 __asm__ __volatile__("": : :"memory");
 (void)0;
 do { } while (0);
 do { } while (0 && (!rcu_is_watching()));

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched_notrace(void)
{
 __asm__ __volatile__("": : :"memory");
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched(void)
{
 do { } while (0 && (!rcu_is_watching()));

 do { } while (0);
 (void)0;
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 __asm__ __volatile__("": : :"memory");
}
# 975 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 993 "./include/linux/rcupdate.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ do { extern void __compiletime_assert_42(void) ; if (!((sizeof(rhp->func) == sizeof(char) || sizeof(rhp->func) == sizeof(short) || sizeof(rhp->func) == sizeof(int) || sizeof(rhp->func) == sizeof(long)) || sizeof(rhp->func) == sizeof(long long))) __compiletime_assert_42(); } while (0); (*(const volatile typeof( _Generic((rhp->func), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rhp->func))) *)&(rhp->func)); });

 if (func == f)
  return true;
 ({ int __ret_warn_on = !!(func != (rcu_callback_t)~0L); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/rcupdate.h"), "i" (1000), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return false;
}


extern int rcu_expedited;
extern int rcu_normal;
# 12 "./include/linux/rculist.h" 2
# 22 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 do { do { extern void __compiletime_assert_43(void) ; if (!((sizeof(list->next) == sizeof(char) || sizeof(list->next) == sizeof(short) || sizeof(list->next) == sizeof(int) || sizeof(list->next) == sizeof(long)) || sizeof(list->next) == sizeof(long long))) __compiletime_assert_43(); } while (0); do { *(volatile typeof(list->next) *)&(list->next) = (list); } while (0); } while (0);
 do { do { extern void __compiletime_assert_44(void) ; if (!((sizeof(list->prev) == sizeof(char) || sizeof(list->prev) == sizeof(short) || sizeof(list->prev) == sizeof(int) || sizeof(list->prev) == sizeof(long)) || sizeof(list->prev) == sizeof(long long))) __compiletime_assert_44(); } while (0); do { *(volatile typeof(list->prev) *)&(list->prev) = (list); } while (0); } while (0);
}
# 76 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_45(void) ; if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_45(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_46(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_46(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_47(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_47(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 next->prev = new;
}
# 104 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 125 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 155 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x122 + (0x5deadbeef0000000UL));
}
# 181 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  do { do { extern void __compiletime_assert_48(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_48(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *)0)); } while (0); } while (0);
 }
}
# 197 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_49(void) ; if (!((sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(new->prev)->next))))) == sizeof(long long))) __compiletime_assert_49(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(new->prev)->next))))) *)&(((*((struct list_head **)(&(new->prev)->next))))) = ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_50(void) ; if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_50(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_51(void) ; if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long long))) __compiletime_assert_51(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(new->prev)->next)))) *)&(*&(*((struct list_head **)(&(new->prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x122 + (0x5deadbeef0000000UL));
}
# 226 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 249 "./include/linux/rculist.h"
 sync();
 __kcsan_check_access(&(*first), sizeof(*first), (1 << 0) | (1 << 3));
 __kcsan_check_access(&(*last), sizeof(*last), (1 << 0) | (1 << 3));
# 261 "./include/linux/rculist.h"
 last->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_52(void) ; if (!((sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct list_head **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_52(); } while (0); do { *(volatile typeof(((*((struct list_head **)(&(prev)->next))))) *)&(((*((struct list_head **)(&(prev)->next))))) = ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_53(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_53(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_54(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_54(); } while (0); do { *(volatile typeof(*&(*((struct list_head **)(&(prev)->next)))) *)&(*&(*((struct list_head **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 274 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 289 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 511 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 do { do { extern void __compiletime_assert_55(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_55(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (((void *) 0x122 + (0x5deadbeef0000000UL))); } while (0); } while (0);
}
# 524 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 do { do { extern void __compiletime_assert_56(void) ; if (!((sizeof(new->pprev) == sizeof(char) || sizeof(new->pprev) == sizeof(short) || sizeof(new->pprev) == sizeof(int) || sizeof(new->pprev) == sizeof(long)) || sizeof(new->pprev) == sizeof(long long))) __compiletime_assert_56(); } while (0); do { *(volatile typeof(new->pprev) *)&(new->pprev) = (old->pprev); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_57(void) ; if (!((sizeof((*(struct hlist_node **)new->pprev)) == sizeof(char) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(short) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(int) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long)) || sizeof((*(struct hlist_node **)new->pprev)) == sizeof(long long))) __compiletime_assert_57(); } while (0); do { *(volatile typeof((*(struct hlist_node **)new->pprev)) *)&((*(struct hlist_node **)new->pprev)) = ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_58(void) ; if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_58(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_59(void) ; if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long long))) __compiletime_assert_59(); } while (0); do { *(volatile typeof(*&*(struct hlist_node **)new->pprev) *)&(*&*(struct hlist_node **)new->pprev) = ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (next)
  do { do { extern void __compiletime_assert_60(void) ; if (!((sizeof(new->next->pprev) == sizeof(char) || sizeof(new->next->pprev) == sizeof(short) || sizeof(new->next->pprev) == sizeof(int) || sizeof(new->next->pprev) == sizeof(long)) || sizeof(new->next->pprev) == sizeof(long long))) __compiletime_assert_60(); } while (0); do { *(volatile typeof(new->next->pprev) *)&(new->next->pprev) = (&new->next); } while (0); } while (0);
 do { do { extern void __compiletime_assert_61(void) ; if (!((sizeof(old->pprev) == sizeof(char) || sizeof(old->pprev) == sizeof(short) || sizeof(old->pprev) == sizeof(int) || sizeof(old->pprev) == sizeof(long)) || sizeof(old->pprev) == sizeof(long long))) __compiletime_assert_61(); } while (0); do { *(volatile typeof(old->pprev) *)&(old->pprev) = (((void *) 0x122 + (0x5deadbeef0000000UL))); } while (0); } while (0);
}
# 547 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlists_swap_heads_rcu(struct hlist_head *left, struct hlist_head *right)
{
 struct hlist_node *node1 = left->first;
 struct hlist_node *node2 = right->first;

 do { uintptr_t _r_a_p__v = (uintptr_t)(node2); ; if (__builtin_constant_p(node2) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_62(void) ; if (!((sizeof((left->first)) == sizeof(char) || sizeof((left->first)) == sizeof(short) || sizeof((left->first)) == sizeof(int) || sizeof((left->first)) == sizeof(long)) || sizeof((left->first)) == sizeof(long long))) __compiletime_assert_62(); } while (0); do { *(volatile typeof((left->first)) *)&((left->first)) = ((typeof(left->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_63(void) ; if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)))) __compiletime_assert_63(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_64(void) ; if (!((sizeof(*&left->first) == sizeof(char) || sizeof(*&left->first) == sizeof(short) || sizeof(*&left->first) == sizeof(int) || sizeof(*&left->first) == sizeof(long)) || sizeof(*&left->first) == sizeof(long long))) __compiletime_assert_64(); } while (0); do { *(volatile typeof(*&left->first) *)&(*&left->first) = ((typeof(*((typeof(left->first))_r_a_p__v)) *)((typeof(left->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(node1); ; if (__builtin_constant_p(node1) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_65(void) ; if (!((sizeof((right->first)) == sizeof(char) || sizeof((right->first)) == sizeof(short) || sizeof((right->first)) == sizeof(int) || sizeof((right->first)) == sizeof(long)) || sizeof((right->first)) == sizeof(long long))) __compiletime_assert_65(); } while (0); do { *(volatile typeof((right->first)) *)&((right->first)) = ((typeof(right->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_66(void) ; if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)))) __compiletime_assert_66(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_67(void) ; if (!((sizeof(*&right->first) == sizeof(char) || sizeof(*&right->first) == sizeof(short) || sizeof(*&right->first) == sizeof(int) || sizeof(*&right->first) == sizeof(long)) || sizeof(*&right->first) == sizeof(long long))) __compiletime_assert_67(); } while (0); do { *(volatile typeof(*&right->first) *)&(*&right->first) = ((typeof(*((typeof(right->first))_r_a_p__v)) *)((typeof(right->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { extern void __compiletime_assert_68(void) ; if (!((sizeof(node2->pprev) == sizeof(char) || sizeof(node2->pprev) == sizeof(short) || sizeof(node2->pprev) == sizeof(int) || sizeof(node2->pprev) == sizeof(long)) || sizeof(node2->pprev) == sizeof(long long))) __compiletime_assert_68(); } while (0); do { *(volatile typeof(node2->pprev) *)&(node2->pprev) = (&left->first); } while (0); } while (0);
 do { do { extern void __compiletime_assert_69(void) ; if (!((sizeof(node1->pprev) == sizeof(char) || sizeof(node1->pprev) == sizeof(short) || sizeof(node1->pprev) == sizeof(int) || sizeof(node1->pprev) == sizeof(long)) || sizeof(node1->pprev) == sizeof(long long))) __compiletime_assert_69(); } while (0); do { *(volatile typeof(node1->pprev) *)&(node1->pprev) = (&right->first); } while (0); } while (0);
}
# 584 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 do { do { extern void __compiletime_assert_70(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_70(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&h->first); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_71(void) ; if (!((sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(h)->first))))) == sizeof(long long))) __compiletime_assert_71(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(h)->first))))) *)&(((*((struct hlist_node **)(&(h)->first))))) = ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_72(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_72(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_73(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long long))) __compiletime_assert_73(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(h)->first)))) *)&(*&(*((struct hlist_node **)(&(h)->first)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (first)
  do { do { extern void __compiletime_assert_74(void) ; if (!((sizeof(first->pprev) == sizeof(char) || sizeof(first->pprev) == sizeof(short) || sizeof(first->pprev) == sizeof(int) || sizeof(first->pprev) == sizeof(long)) || sizeof(first->pprev) == sizeof(long long))) __compiletime_assert_74(); } while (0); do { *(volatile typeof(first->pprev) *)&(first->pprev) = (&n->next); } while (0); } while (0);
}
# 615 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  do { do { extern void __compiletime_assert_75(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_75(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&last->next); } while (0); } while (0);
  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_76(void) ; if (!((sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(last)->next))))) == sizeof(long long))) __compiletime_assert_76(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(last)->next))))) *)&(((*((struct hlist_node **)(&(last)->next))))) = ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_77(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_77(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_78(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long long))) __compiletime_assert_78(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(last)->next)))) *)&(*&(*((struct hlist_node **)(&(last)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 651 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 do { do { extern void __compiletime_assert_79(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_79(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (next->pprev); } while (0); } while (0);
 n->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_80(void) ; if (!((sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(char) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(short) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(int) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)((n)->pprev))))) == sizeof(long long))) __compiletime_assert_80(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)((n)->pprev))))) *)&(((*((struct hlist_node **)((n)->pprev))))) = ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_81(void) ; if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_81(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_82(void) ; if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long long))) __compiletime_assert_82(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)((n)->pprev)))) *)&(*&(*((struct hlist_node **)((n)->pprev)))) = ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { extern void __compiletime_assert_83(void) ; if (!((sizeof(next->pprev) == sizeof(char) || sizeof(next->pprev) == sizeof(short) || sizeof(next->pprev) == sizeof(int) || sizeof(next->pprev) == sizeof(long)) || sizeof(next->pprev) == sizeof(long long))) __compiletime_assert_83(); } while (0); do { *(volatile typeof(next->pprev) *)&(next->pprev) = (&n->next); } while (0); } while (0);
}
# 678 "./include/linux/rculist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 do { do { extern void __compiletime_assert_84(void) ; if (!((sizeof(n->pprev) == sizeof(char) || sizeof(n->pprev) == sizeof(short) || sizeof(n->pprev) == sizeof(int) || sizeof(n->pprev) == sizeof(long)) || sizeof(n->pprev) == sizeof(long long))) __compiletime_assert_84(); } while (0); do { *(volatile typeof(n->pprev) *)&(n->pprev) = (&prev->next); } while (0); } while (0);
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_85(void) ; if (!((sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(char) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(short) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(int) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long)) || sizeof(((*((struct hlist_node **)(&(prev)->next))))) == sizeof(long long))) __compiletime_assert_85(); } while (0); do { *(volatile typeof(((*((struct hlist_node **)(&(prev)->next))))) *)&(((*((struct hlist_node **)(&(prev)->next))))) = ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_86(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_86(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_87(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long long))) __compiletime_assert_87(); } while (0); do { *(volatile typeof(*&(*((struct hlist_node **)(&(prev)->next)))) *)&(*&(*((struct hlist_node **)(&(prev)->next)))) = ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 if (n->next)
  do { do { extern void __compiletime_assert_88(void) ; if (!((sizeof(n->next->pprev) == sizeof(char) || sizeof(n->next->pprev) == sizeof(short) || sizeof(n->next->pprev) == sizeof(int) || sizeof(n->next->pprev) == sizeof(long)) || sizeof(n->next->pprev) == sizeof(long long))) __compiletime_assert_88(); } while (0); do { *(volatile typeof(n->next->pprev) *)&(n->next->pprev) = (&n->next); } while (0); } while (0);
}
# 6 "./include/linux/pid.h" 2
# 1 "./include/linux/wait.h" 1








# 1 "./include/linux/spinlock.h" 1
# 65 "./include/linux/spinlock.h"
# 1 "./arch/powerpc/include/asm/mmiowb.h" 1
# 16 "./arch/powerpc/include/asm/mmiowb.h"
# 1 "./include/asm-generic/mmiowb.h" 1
# 35 "./include/asm-generic/mmiowb.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmiowb_set_pending(void)
{
 struct mmiowb_state *ms = (&local_paca->mmiowb_state);

 if (__builtin_expect(!!(ms->nesting_count), 1))
  ms->mmiowb_pending = ms->nesting_count;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmiowb_spin_lock(void)
{
 struct mmiowb_state *ms = (&local_paca->mmiowb_state);
 ms->nesting_count++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmiowb_spin_unlock(void)
{
 struct mmiowb_state *ms = (&local_paca->mmiowb_state);

 if (__builtin_expect(!!(ms->mmiowb_pending), 0)) {
  ms->mmiowb_pending = 0;
  __asm__ __volatile__ ("sync" : : : "memory");
 }

 ms->nesting_count--;
}
# 17 "./arch/powerpc/include/asm/mmiowb.h" 2
# 66 "./include/linux/spinlock.h" 2
# 94 "./include/linux/spinlock.h"
# 1 "./arch/powerpc/include/asm/spinlock.h" 1






# 1 "./arch/powerpc/include/asm/qspinlock.h" 1





# 1 "./arch/powerpc/include/asm/paravirt.h" 1
# 14 "./arch/powerpc/include/asm/paravirt.h"
# 1 "./arch/powerpc/include/asm/kvm_guest.h" 1
# 12 "./arch/powerpc/include/asm/kvm_guest.h"
extern struct static_key_false kvm_guest;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kvm_guest(void)
{
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&kvm_guest), struct static_key_true)) branch = arch_static_branch_jump(&(&kvm_guest)->key, false); else if (__builtin_types_compatible_p(typeof(*&kvm_guest), struct static_key_false)) branch = arch_static_branch(&(&kvm_guest)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}

int check_kvm_guest(void);
# 15 "./arch/powerpc/include/asm/paravirt.h" 2
# 1 "./arch/powerpc/include/asm/cputhreads.h" 1
# 23 "./arch/powerpc/include/asm/cputhreads.h"
extern int threads_per_core;
extern int threads_per_subcore;
extern int threads_shift;
extern cpumask_t threads_core_mask;
# 46 "./arch/powerpc/include/asm/cputhreads.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cpumask_t cpu_thread_mask_to_cores(const struct cpumask *threads)
{
 cpumask_t tmp, res;
 int i, cpu;

 cpumask_clear(&res);
 for (i = 0; i < 2048; i += threads_per_core) {
  cpumask_shift_left(&tmp, &threads_core_mask, i);
  if (cpumask_intersects(threads, &tmp)) {
   cpu = cpumask_first_and(&tmp, ((const struct cpumask *)&__cpu_online_mask));
   if (cpu < nr_cpu_ids)
    cpumask_set_cpu(cpu, &res);
  }
 }
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_nr_cores(void)
{
 return nr_cpu_ids >> threads_shift;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cpumask_t cpu_online_cores_map(void)
{
 return cpu_thread_mask_to_cores(((const struct cpumask *)&__cpu_online_mask));
}


int cpu_core_index_of_thread(int cpu);
int cpu_first_thread_of_core(int core);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_thread_in_core(int cpu)
{
 return cpu & (threads_per_core - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_thread_in_subcore(int cpu)
{
 return cpu & (threads_per_subcore - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_first_thread_sibling(int cpu)
{
 return cpu & ~(threads_per_core - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_last_thread_sibling(int cpu)
{
 return cpu | (threads_per_core - 1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_first_tlb_thread_sibling(int cpu)
{
 if (cpu_has_feature(0x0000000000020000UL) && (threads_per_core == 8))
  return cpu & ~0x6;
 else
  return cpu_first_thread_sibling(cpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_last_tlb_thread_sibling(int cpu)
{
 if (cpu_has_feature(0x0000000000020000UL) && (threads_per_core == 8))
  return cpu | 0x6;
 else
  return cpu_last_thread_sibling(cpu);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_tlb_thread_sibling_step(void)
{
 if (cpu_has_feature(0x0000000000020000UL) && (threads_per_core == 8))
  return 2;
 else
  return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 get_tensr(void)
{




 return 1;
}

void book3e_start_thread(int thread, unsigned long addr);
void book3e_stop_thread(int thread);
# 16 "./arch/powerpc/include/asm/paravirt.h" 2

extern struct static_key_false shared_processor;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_shared_processor(void)
{
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&shared_processor), struct static_key_true)) branch = arch_static_branch_jump(&(&shared_processor)->key, false); else if (__builtin_types_compatible_p(typeof(*&shared_processor), struct static_key_false)) branch = arch_static_branch(&(&shared_processor)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 yield_count_of(int cpu)
{
 __be32 yield_count = ({ do { extern void __compiletime_assert_89(void) ; if (!((sizeof((*paca_ptrs[cpu]->lppaca_ptr).yield_count) == sizeof(char) || sizeof((*paca_ptrs[cpu]->lppaca_ptr).yield_count) == sizeof(short) || sizeof((*paca_ptrs[cpu]->lppaca_ptr).yield_count) == sizeof(int) || sizeof((*paca_ptrs[cpu]->lppaca_ptr).yield_count) == sizeof(long)) || sizeof((*paca_ptrs[cpu]->lppaca_ptr).yield_count) == sizeof(long long))) __compiletime_assert_89(); } while (0); (*(const volatile typeof( _Generic(((*paca_ptrs[cpu]->lppaca_ptr).yield_count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*paca_ptrs[cpu]->lppaca_ptr).yield_count))) *)&((*paca_ptrs[cpu]->lppaca_ptr).yield_count)); });
 return (( __u32)(__be32)(yield_count));
}
# 47 "./arch/powerpc/include/asm/paravirt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void yield_to_preempted(int cpu, u32 yield_count)
{
 plpar_hcall_norets_notrace(0xE4, get_hard_smp_processor_id(cpu), yield_count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prod_cpu(int cpu)
{
 plpar_hcall_norets_notrace(0xE8, get_hard_smp_processor_id(cpu));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void yield_to_any(void)
{
 plpar_hcall_norets_notrace(0xE4, -1, 0);
}
# 93 "./arch/powerpc/include/asm/paravirt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vcpu_is_preempted(int cpu)
{
 if (!is_shared_processor())
  return false;


 if (!is_kvm_guest()) {
  int first_cpu = cpu_first_thread_sibling((local_paca->paca_index));






  if (cpu_first_thread_sibling(cpu) == first_cpu)
   return false;
 }


 if (yield_count_of(cpu) & 1)
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pv_is_native_spin_unlock(void)
{
 return !is_shared_processor();
}
# 7 "./arch/powerpc/include/asm/qspinlock.h" 2




extern void native_queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);
extern void __pv_queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);
extern void __pv_queued_spin_unlock(struct qspinlock *lock);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val)
{
 if (!is_shared_processor())
  native_queued_spin_lock_slowpath(lock, val);
 else
  __pv_queued_spin_lock_slowpath(lock, val);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_spin_unlock(struct qspinlock *lock)
{
 if (!is_shared_processor())
  do { do { extern void __compiletime_assert_90(void) ; if (!((sizeof(*&lock->locked) == sizeof(char) || sizeof(*&lock->locked) == sizeof(short) || sizeof(*&lock->locked) == sizeof(int) || sizeof(*&lock->locked) == sizeof(long)))) __compiletime_assert_90(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_91(void) ; if (!((sizeof(*&lock->locked) == sizeof(char) || sizeof(*&lock->locked) == sizeof(short) || sizeof(*&lock->locked) == sizeof(int) || sizeof(*&lock->locked) == sizeof(long)) || sizeof(*&lock->locked) == sizeof(long long))) __compiletime_assert_91(); } while (0); do { *(volatile typeof(*&lock->locked) *)&(*&lock->locked) = (0); } while (0); } while (0); } while (0);
 else
  __pv_queued_spin_unlock(lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void queued_spin_lock(struct qspinlock *lock)
{
 u32 val = 0;

 if (__builtin_expect(!!(arch_atomic_try_cmpxchg_lock(&lock->val, &val, (1U << 0))), 1))
  return;

 queued_spin_lock_slowpath(lock, val);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pv_wait(u8 *ptr, u8 val)
{
 if (*ptr != val)
  return;
 yield_to_any();




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pv_kick(int cpu)
{
 prod_cpu(cpu);
}

extern void __pv_init_lock_hash(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pv_spinlocks_init(void)
{
 __pv_init_lock_hash();
}
# 82 "./arch/powerpc/include/asm/qspinlock.h"
# 1 "./include/asm-generic/qspinlock.h" 1
# 22 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_locked(struct qspinlock *lock)
{




 return atomic_read(&lock->val);
}
# 42 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_value_unlocked(struct qspinlock lock)
{
 return !atomic_read(&lock.val);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_contended(struct qspinlock *lock)
{
 return atomic_read(&lock->val) & ~(((1U << 8) - 1) << 0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_trylock(struct qspinlock *lock)
{
 int val = atomic_read(&lock->val);

 if (__builtin_expect(!!(val), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))), 1);
}

extern void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);
# 104 "./include/asm-generic/qspinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool virt_spin_lock(struct qspinlock *lock)
{
 return false;
}
# 83 "./arch/powerpc/include/asm/qspinlock.h" 2
# 8 "./arch/powerpc/include/asm/spinlock.h" 2
# 1 "./arch/powerpc/include/generated/asm/qrwlock.h" 1
# 1 "./include/asm-generic/qrwlock.h" 1
# 32 "./include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock);
extern void queued_write_lock_slowpath(struct qrwlock *lock);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_read_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1)) {
  cnts = (u32)atomic_add_return_acquire((1U << 9), &lock->cnts);
  if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
   return 1;
  atomic_sub((1U << 9), &lock->cnts);
 }
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_write_trylock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(cnts), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1);

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_lock(struct qrwlock *lock)
{
 int cnts;

 cnts = atomic_add_return_acquire((1U << 9), &lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
  return;


 queued_read_lock_slowpath(lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_lock(struct qrwlock *lock)
{
 int cnts = 0;

 if (__builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1))
  return;

 queued_write_lock_slowpath(lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return_release((1U << 9), &lock->cnts);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_unlock(struct qrwlock *lock)
{
 do { do { extern void __compiletime_assert_92(void) ; if (!((sizeof(*&lock->wlocked) == sizeof(char) || sizeof(*&lock->wlocked) == sizeof(short) || sizeof(*&lock->wlocked) == sizeof(int) || sizeof(*&lock->wlocked) == sizeof(long)))) __compiletime_assert_92(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_93(void) ; if (!((sizeof(*&lock->wlocked) == sizeof(char) || sizeof(*&lock->wlocked) == sizeof(short) || sizeof(*&lock->wlocked) == sizeof(int) || sizeof(*&lock->wlocked) == sizeof(long)) || sizeof(*&lock->wlocked) == sizeof(long long))) __compiletime_assert_93(); } while (0); do { *(volatile typeof(*&lock->wlocked) *)&(*&lock->wlocked) = (0); } while (0); } while (0); } while (0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_rwlock_is_contended(struct qrwlock *lock)
{
 return queued_spin_is_locked(&lock->wait_lock);
}
# 2 "./arch/powerpc/include/generated/asm/qrwlock.h" 2
# 9 "./arch/powerpc/include/asm/spinlock.h" 2
# 95 "./include/linux/spinlock.h" 2
# 184 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 mmiowb_spin_lock();
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 mmiowb_spin_lock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 int ret = queued_spin_trylock(&(lock)->raw_lock);

 if (ret)
  mmiowb_spin_lock();

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 mmiowb_spin_unlock();
 queued_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 317 "./include/linux/spinlock.h"
# 1 "./include/linux/rwlock.h" 1
# 318 "./include/linux/spinlock.h" 2






# 1 "./include/linux/spinlock_api_smp.h" 1
# 18 "./include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((__section__(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((__section__(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("": : :"memory");
 return 0;
}
# 104 "./include/linux/spinlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
# 119 "./include/linux/spinlock_api_smp.h"
 do_raw_spin_lock_flags(lock, &flags);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 return 0;
}



# 1 "./include/linux/rwlock_api_smp.h" 1
# 18 "./include/linux/rwlock_api_smp.h"
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((__section__(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((__section__(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((__section__(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((__section__(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((__section__(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_read_trylock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { if (0) do { } while (0); else do { } while (0); } while (0);
  return 1;
 }
 __asm__ __volatile__("": : :"memory");
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_write_trylock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("": : :"memory");
 return 0;
}
# 146 "./include/linux/rwlock_api_smp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { if (0) do { } while (0); else do { } while (0); } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock(rwlock_t *lock)
{
 __asm__ __volatile__("": : :"memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}
# 193 "./include/linux/spinlock_api_smp.h" 2
# 325 "./include/linux/spinlock.h" 2
# 336 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}
# 366 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 391 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 406 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
{
 __raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
{
 __raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}
# 459 "./include/linux/spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
{
 return queued_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
{
 return queued_spin_is_contended(&(&lock->rlock)->raw_lock);
}
# 488 "./include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 512 "./include/linux/spinlock.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 10 "./include/linux/wait.h" 2


# 1 "./include/uapi/linux/wait.h" 1
# 13 "./include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 30 "./include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 64 "./include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 82 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 127 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 140 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_single_sleeper(struct wait_queue_head *wq_head)
{
 return list_is_singular(&wq_head->head);
}
# 153 "./include/linux/wait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 __asm__ __volatile__ ("sync" : : : "memory");
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_priority(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 struct list_head *head = &wq_head->head;
 struct wait_queue_entry *wq;

 for (wq = ({ void *__mptr = (void *)((&wq_head->head)->next); do { extern void __compiletime_assert_94(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(((typeof(*wq) *)0)->entry)) && !__builtin_types_compatible_p(typeof(*((&wq_head->head)->next)), typeof(void))))) __compiletime_assert_94(); } while (0); ((typeof(*wq) *)(__mptr - __builtin_offsetof(typeof(*wq), entry))); }); !(&wq->entry == (&wq_head->head)); wq = ({ void *__mptr = (void *)((wq)->entry.next); do { extern void __compiletime_assert_95(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(((typeof(*(wq)) *)0)->entry)) && !__builtin_types_compatible_p(typeof(*((wq)->entry.next)), typeof(void))))) __compiletime_assert_95(); } while (0); ((typeof(*(wq)) *)(__mptr - __builtin_offsetof(typeof(*(wq)), entry))); })) {
  if (!(wq->flags & 0x20))
   break;
  head = &wq->entry;
 }
 list_add(&wq_entry->entry, head);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_sync_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode);
# 260 "./include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 744 "./include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 1138 "./include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
bool prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 1163 "./include/linux/wait.h"
bool try_invoke_on_locked_down_task(struct task_struct *p, bool (*func)(struct task_struct *t, void *arg), void *arg);
# 7 "./include/linux/pid.h" 2
# 1 "./include/linux/refcount.h" 1
# 101 "./include/linux/refcount.h"
struct mutex;
# 111 "./include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;





enum refcount_saturation_type {
 REFCOUNT_ADD_NOT_ZERO_OVF,
 REFCOUNT_ADD_OVF,
 REFCOUNT_ADD_UAF,
 REFCOUNT_SUB_UAF,
 REFCOUNT_DEC_LEAK,
};

void refcount_warn_saturate(refcount_t *r, enum refcount_saturation_type t);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_set(refcount_t *r, int n)
{
 atomic_set(&r->refs, n);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_add_not_zero(int i, refcount_t *r, int *oldp)
{
 int old = refcount_read(r);

 do {
  if (!old)
   break;
 } while (!atomic_try_cmpxchg_relaxed(&r->refs, &old, old + i));

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_NOT_ZERO_OVF);

 return old;
}
# 186 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_add_not_zero(int i, refcount_t *r)
{
 return __refcount_add_not_zero(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_add(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_add_relaxed(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(!old), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_UAF);
 else if (__builtin_expect(!!(old < 0 || old + i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_ADD_OVF);
}
# 220 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_add(int i, refcount_t *r)
{
 __refcount_add(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_inc_not_zero(refcount_t *r, int *oldp)
{
 return __refcount_add_not_zero(1, r, oldp);
}
# 243 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero(refcount_t *r)
{
 return __refcount_inc_not_zero(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_inc(refcount_t *r, int *oldp)
{
 __refcount_add(1, r, oldp);
}
# 265 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_inc(refcount_t *r)
{
 __refcount_inc(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_sub_and_test(int i, refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(i, &r->refs);

 if (oldp)
  *oldp = old;

 if (old == i) {
  __asm__ __volatile__ ("lwsync" " " : : :"memory");
  return true;
 }

 if (__builtin_expect(!!(old < 0 || old - i < 0), 0))
  refcount_warn_saturate(r, REFCOUNT_SUB_UAF);

 return false;
}
# 308 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_sub_and_test(int i, refcount_t *r)
{
 return __refcount_sub_and_test(i, r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool __refcount_dec_and_test(refcount_t *r, int *oldp)
{
 return __refcount_sub_and_test(1, r, oldp);
}
# 331 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool refcount_dec_and_test(refcount_t *r)
{
 return __refcount_dec_and_test(r, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __refcount_dec(refcount_t *r, int *oldp)
{
 int old = atomic_fetch_sub_release(1, &r->refs);

 if (oldp)
  *oldp = old;

 if (__builtin_expect(!!(old <= 1), 0))
  refcount_warn_saturate(r, REFCOUNT_DEC_LEAK);
}
# 357 "./include/linux/refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_dec(refcount_t *r)
{
 __refcount_dec(r, ((void *)0));
}

extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 8 "./include/linux/pid.h" 2

enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};
# 54 "./include/linux/pid.h"
struct upid {
 int nr;
 struct pid_namespace *ns;
};

struct pid
{
 refcount_t count;
 unsigned int level;
 spinlock_t lock;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct hlist_head inodes;

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

extern const struct file_operations pidfd_fops;

struct file;

extern struct pid *pidfd_pid(const struct file *file);
struct pid *pidfd_get_pid(unsigned int fd, unsigned int *flags);
int pidfd_create(struct pid *pid, unsigned int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  refcount_inc(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pid_has_task(struct pid *pid, enum pid_type type)
{
 return !hlist_empty(&pid->tasks[type]);
}
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void exchange_tids(struct task_struct *task, struct task_struct *old);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;

extern int pid_max;
extern int pid_max_min, pid_max_max;
# 126 "./include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);

extern struct pid *alloc_pid(struct pid_namespace *ns, pid_t *set_tid,
        size_t set_tid_size);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 150 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 180 "./include/linux/pid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "./include/linux/sched.h" 2
# 1 "./include/linux/sem.h" 1




# 1 "./include/uapi/linux/sem.h" 1




# 1 "./include/linux/ipc.h" 1





# 1 "./include/linux/uidgid.h" 1
# 16 "./include/linux/uidgid.h"
# 1 "./include/linux/highuid.h" 1
# 35 "./include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "./include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "./include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "./include/linux/uidgid.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}
# 7 "./include/linux/ipc.h" 2
# 1 "./include/linux/rhashtable-types.h" 1
# 14 "./include/linux/rhashtable-types.h"
# 1 "./include/linux/mutex.h" 1
# 20 "./include/linux/mutex.h"
# 1 "./include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 21 "./include/linux/mutex.h" 2
# 1 "./include/linux/debug_locks.h" 1







struct task_struct;

extern int debug_locks __attribute__((__section__(".data..read_mostly")));
extern int debug_locks_silent __attribute__((__section__(".data..read_mostly")));


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __debug_locks_off(void)
{
 return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); instrument_atomic_write(__ai_ptr, sizeof(*__ai_ptr)); ({ typeof(({ __typeof__(*(__ai_ptr)) _x_ = (0); (__typeof__(*(__ai_ptr))) __xchg_relaxed((__ai_ptr), (unsigned long)_x_, sizeof(*(__ai_ptr))); })) __ret; __asm__ __volatile__ ("sync" : : : "memory"); __ret = ({ __typeof__(*(__ai_ptr)) _x_ = (0); (__typeof__(*(__ai_ptr))) __xchg_relaxed((__ai_ptr), (unsigned long)_x_, sizeof(*(__ai_ptr))); }); __asm__ __volatile__ ("sync" : : : "memory"); __ret; }); });
}




extern int debug_locks_off(void);
# 50 "./include/linux/debug_locks.h"
struct task_struct;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_all_locks(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_held(void)
{
}
# 22 "./include/linux/mutex.h" 2
# 63 "./include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 raw_spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;






};
# 89 "./include/linux/mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mutex_destroy(struct mutex *lock) {}
# 118 "./include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







extern bool mutex_is_locked(struct mutex *lock);
# 199 "./include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 217 "./include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
# 15 "./include/linux/rhashtable-types.h" 2
# 1 "./include/linux/workqueue.h" 1








# 1 "./include/linux/timer.h" 1





# 1 "./include/linux/ktime.h" 1
# 24 "./include/linux/ktime.h"
# 1 "./include/linux/time.h" 1








extern struct timezone sys_tz;

int get_timespec64(struct timespec64 *ts,
  const struct __kernel_timespec *uts);
int put_timespec64(const struct timespec64 *ts,
  struct __kernel_timespec *uts);
int get_itimerspec64(struct itimerspec64 *it,
   const struct __kernel_itimerspec *uit);
int put_itimerspec64(const struct itimerspec64 *it,
   struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);


extern void clear_itimer(void);




extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);

# 1 "./include/linux/time32.h" 1
# 13 "./include/linux/time32.h"
# 1 "./include/linux/timex.h" 1
# 56 "./include/linux/timex.h"
# 1 "./include/uapi/linux/timex.h" 1
# 56 "./include/uapi/linux/timex.h"
# 1 "./include/linux/time.h" 1
# 57 "./include/uapi/linux/timex.h" 2
# 97 "./include/uapi/linux/timex.h"
struct __kernel_timex_timeval {
 __kernel_time64_t tv_sec;
 long long tv_usec;
};

struct __kernel_timex {
 unsigned int modes;
 int :32;
 long long offset;
 long long freq;
 long long maxerror;
 long long esterror;
 int status;
 int :32;
 long long constant;
 long long precision;
 long long tolerance;


 struct __kernel_timex_timeval time;
 long long tick;

 long long ppsfreq;
 long long jitter;
 int shift;
 int :32;
 long long stabil;
 long long jitcnt;
 long long calcnt;
 long long errcnt;
 long long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "./include/linux/timex.h" 2








# 1 "./arch/powerpc/include/asm/timex.h" 1
# 12 "./arch/powerpc/include/asm/timex.h"
# 1 "./arch/powerpc/include/asm/vdso/timebase.h" 1
# 46 "./arch/powerpc/include/asm/vdso/timebase.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 get_tb(void)
{
 unsigned int tbhi, tblo, tbhi2;





 if (1)
  return ({unsigned long rval; asm volatile("mfspr %0, %1" : "=r" (rval) : "i" (0x10C)); rval;});

 do {
  tbhi = ({unsigned long rval; asm volatile("mfspr %0, %1" : "=r" (rval) : "i" (0x10D)); rval;});
  tblo = ({unsigned long rval; asm volatile("mfspr %0, %1" : "=r" (rval) : "i" (0x10C)); rval;});
  tbhi2 = ({unsigned long rval; asm volatile("mfspr %0, %1" : "=r" (rval) : "i" (0x10D)); rval;});
 } while (tbhi != tbhi2);

 return ((u64)tbhi << 32) | tblo;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tb(unsigned int upper, unsigned int lower)
{
 asm volatile("mtspr " "0x11C" ",%0" : : "r" ((unsigned long)(0)) : "memory");
 asm volatile("mtspr " "0x11D" ",%0" : : "r" ((unsigned long)(upper)) : "memory");
 asm volatile("mtspr " "0x11C" ",%0" : : "r" ((unsigned long)(lower)) : "memory");
}
# 13 "./arch/powerpc/include/asm/timex.h" 2



typedef unsigned long cycles_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cycles_t get_cycles(void)
{
 return ({unsigned long rval; asm volatile("mfspr %0, %1" : "=r" (rval) : "i" (0x10C)); rval;});
}
# 66 "./include/linux/timex.h" 2
# 139 "./include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "./include/linux/timex.h"
extern int do_adjtimex(struct __kernel_timex *);
extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);

extern void hardpps(const struct timespec64 *, const struct timespec64 *);

int read_current_timer(unsigned long *timer_val);
# 14 "./include/linux/time32.h" 2

# 1 "./include/vdso/time32.h" 1




typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};
# 16 "./include/linux/time32.h" 2

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);







extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 61 "./include/linux/time.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool itimerspec64_valid(const struct itimerspec64 *its)
{
 if (!timespec64_valid(&(its->it_interval)) ||
  !timespec64_valid(&(its->it_value)))
  return false;

 return true;
}
# 100 "./include/linux/time.h"
# 1 "./include/vdso/time.h" 1






struct timens_offset {
 s64 sec;
 u64 nsec;
};
# 101 "./include/linux/time.h" 2
# 25 "./include/linux/ktime.h" 2
# 1 "./include/linux/jiffies.h" 1
# 12 "./include/linux/jiffies.h"
# 1 "./include/vdso/jiffies.h" 1




# 1 "./arch/powerpc/include/generated/uapi/asm/param.h" 1
# 6 "./include/vdso/jiffies.h" 2
# 13 "./include/linux/jiffies.h" 2
# 1 "./arch/powerpc/include/generated/uapi/asm/param.h" 1
# 14 "./include/linux/jiffies.h" 2
# 1 "./include/generated/timeconst.h" 1
# 15 "./include/linux/jiffies.h" 2
# 62 "./include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 79 "./include/linux/jiffies.h"
extern u64 __attribute__((__aligned__((1 << 7)), __section__(".data..cacheline_aligned"))) jiffies_64;
extern unsigned long volatile __attribute__((__aligned__((1 << 7)), __section__(".data..cacheline_aligned"))) jiffies;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 189 "./include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 290 "./include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 100) - 1) / (1000L / 100);
}
# 363 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 100) - 1) / (1000000L / 100);
}
# 410 "./include/linux/jiffies.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x96 = (0L); typeof(delta) __UNIQUE_ID___y97 = (delta); ((__UNIQUE_ID___x96) > (__UNIQUE_ID___y97) ? (__UNIQUE_ID___x96) : (__UNIQUE_ID___y97)); })));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x98 = (0L); typeof(delta) __UNIQUE_ID___y99 = (delta); ((__UNIQUE_ID___x98) > (__UNIQUE_ID___y99) ? (__UNIQUE_ID___x98) : (__UNIQUE_ID___y99)); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "./include/linux/ktime.h" 2



typedef s64 ktime_t;
# 38 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 71 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 95 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 111 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 123 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 148 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((div < 0))) { if (!(div < 0)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ktime.h"), "i" (154), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ktime.h"), "i" (154), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (div < 0) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 209 "./include/linux/ktime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}

# 1 "./include/vdso/ktime.h" 1
# 221 "./include/linux/ktime.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}

# 1 "./include/linux/timekeeping.h" 1





# 1 "./include/linux/clocksource_ids.h" 1





enum clocksource_ids {
 CSID_GENERIC = 0,
 CSID_ARM_ARCH_COUNTER,
 CSID_MAX,
};
# 7 "./include/linux/timekeeping.h" 2



void timekeeping_init(void);
extern int timekeeping_suspended;


extern void legacy_timer_tick(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 41 "./include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);







struct ktime_timestamps {
 u64 mono;
 u64 boot;
 u64 real;
};
# 246 "./include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 enum clocksource_ids cs_id;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 262 "./include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 275 "./include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);


extern void ktime_get_fast_timestamps(struct ktime_timestamps *snap);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);

extern int update_persistent_clock64(struct timespec64 now);
# 233 "./include/linux/ktime.h" 2
# 7 "./include/linux/timer.h" 2

# 1 "./include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "./include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 const struct debug_obj_descr *descr;
};
# 55 "./include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 88 "./include/linux/debugobjects.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init_on_stack(void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
debug_object_activate (void *addr, const struct debug_obj_descr *descr) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_deactivate(void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_destroy (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_free (void *addr, const struct debug_obj_descr *descr) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_assert_init(void *addr, const struct debug_obj_descr *descr) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_early_init(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_mem_init(void) { }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 9 "./include/linux/timer.h" 2


struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;




};
# 91 "./include/linux/timer.h"
void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags,
        const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, func, flags, name, key);
}
# 150 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_timer_on_stack(struct timer_list *timer) { }
# 166 "./include/linux/timer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timer_pending(const struct timer_list * timer)
{
 return !hlist_unhashed_lockless(&timer->entry);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp, loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "./include/linux/workqueue.h" 2








struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_INACTIVE_BIT= 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_INACTIVE = 1 << WORK_STRUCT_INACTIVE_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,


 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS),


 WORK_CPU_UNBOUND = 2048,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 150 "./include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_100(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_100(); } while (0); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_101(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_101(); } while (0); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 210 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __init_work(struct work_struct *work, int onstack) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int work_static(struct work_struct *work) { return 0; }
# 303 "./include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 336 "./include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 380 "./include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 402 "./include/linux/workqueue.h"
struct workqueue_struct *alloc_workqueue(const char *fmt,
      unsigned int flags,
      int max_active, ...);
# 431 "./include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(void);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 499 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 513 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 528 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 542 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 561 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 590 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 604 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 618 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 634 "./include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 654 "./include/linux/workqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wq_watchdog_touch(int cpu) { }



int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init_early(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) workqueue_init(void);
# 16 "./include/linux/rhashtable-types.h" 2

struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};

struct bucket_table;






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);
# 56 "./include/linux/rhashtable-types.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 81 "./include/linux/rhashtable-types.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 120 "./include/linux/rhashtable-types.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
 bool end_of_table;
};

int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);
# 8 "./include/linux/ipc.h" 2
# 1 "./include/uapi/linux/ipc.h" 1
# 10 "./include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};


# 1 "./arch/powerpc/include/uapi/asm/ipcbuf.h" 1
# 21 "./arch/powerpc/include/uapi/asm/ipcbuf.h"
struct ipc64_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned int seq;
 unsigned int __pad1;
 unsigned long long __unused1;
 unsigned long long __unused2;
};
# 23 "./include/uapi/linux/ipc.h" 2
# 58 "./include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "./include/linux/ipc.h" 2



struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__aligned__((1 << 7)))) ;
# 6 "./include/uapi/linux/sem.h" 2
# 25 "./include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_old_time_t sem_otime;
 __kernel_old_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};


# 1 "./arch/powerpc/include/uapi/asm/sembuf.h" 1
# 23 "./arch/powerpc/include/uapi/asm/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;






 long sem_otime;
 long sem_ctime;

 unsigned long sem_nsems;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 38 "./include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 6 "./include/linux/sem.h" 2

struct task_struct;
struct sem_undo_list;



struct sysv_sem {
 struct sem_undo_list *undo_list;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);
# 16 "./include/linux/sched.h" 2
# 1 "./include/linux/shm.h" 1






# 1 "./include/uapi/linux/shm.h" 1






# 1 "./include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "./include/uapi/linux/shm.h" 2
# 28 "./include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_old_time_t shm_atime;
 __kernel_old_time_t shm_dtime;
 __kernel_old_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};


# 1 "./arch/powerpc/include/uapi/asm/shmbuf.h" 1
# 22 "./arch/powerpc/include/uapi/asm/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;

 long shm_atime;
 long shm_dtime;
 long shm_ctime;
# 37 "./arch/powerpc/include/uapi/asm/shmbuf.h"
 size_t shm_segsz;
 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused5;
 unsigned long __unused6;
};

struct shminfo64 {
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 44 "./include/uapi/linux/shm.h" 2
# 93 "./include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "./include/linux/shm.h" 2
# 1 "./arch/powerpc/include/asm/shmparam.h" 1
# 9 "./include/linux/shm.h" 2

struct file;


struct sysv_shm {
 struct list_head shm_clist;
};

long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr,
       unsigned long shmlba);
bool is_file_shm_hugepages(struct file *file);
void exit_shm(struct task_struct *task);
# 17 "./include/linux/sched.h" 2

# 1 "./include/linux/plist.h" 1
# 79 "./include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 121 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 210 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 280 "./include/linux/plist.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); do { extern void __compiletime_assert_102(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void))))) __compiletime_assert_102(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); do { extern void __compiletime_assert_103(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void))))) __compiletime_assert_103(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 19 "./include/linux/sched.h" 2
# 1 "./include/linux/hrtimer.h" 1
# 15 "./include/linux/hrtimer.h"
# 1 "./include/linux/hrtimer_defs.h" 1
# 16 "./include/linux/hrtimer.h" 2
# 1 "./include/linux/rbtree.h" 1
# 20 "./include/linux/rbtree.h"
# 1 "./include/linux/rbtree_types.h" 1




struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 26 "./include/linux/rbtree_types.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};
# 21 "./include/linux/rbtree.h" 2
# 39 "./include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_104(void) ; if (!((sizeof((*rb_link)) == sizeof(char) || sizeof((*rb_link)) == sizeof(short) || sizeof((*rb_link)) == sizeof(int) || sizeof((*rb_link)) == sizeof(long)) || sizeof((*rb_link)) == sizeof(long long))) __compiletime_assert_104(); } while (0); do { *(volatile typeof((*rb_link)) *)&((*rb_link)) = ((typeof(*rb_link))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_105(void) ; if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)))) __compiletime_assert_105(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_106(void) ; if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)) || sizeof(*&*rb_link) == sizeof(long long))) __compiletime_assert_106(); } while (0); do { *(volatile typeof(*&*rb_link) *)&(*&*rb_link) = ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}
# 108 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rb_node *
rb_erase_cached(struct rb_node *node, struct rb_root_cached *root)
{
 struct rb_node *leftmost = ((void *)0);

 if (root->rb_leftmost == node)
  leftmost = root->rb_leftmost = rb_next(node);

 rb_erase(node, &root->rb_root);

 return leftmost;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 164 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_add_cached(struct rb_node *node, struct rb_root_cached *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_root.rb_node;
 struct rb_node *parent = ((void *)0);
 bool leftmost = true;

 while (*link) {
  parent = *link;
  if (less(node, parent)) {
   link = &parent->rb_left;
  } else {
   link = &parent->rb_right;
   leftmost = false;
  }
 }

 rb_link_node(node, parent, link);
 rb_insert_color_cached(node, tree, leftmost);

 return leftmost ? node : ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
rb_add(struct rb_node *node, struct rb_root *tree,
       bool (*less)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);

 while (*link) {
  parent = *link;
  if (less(node, parent))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
}
# 222 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_add(struct rb_node *node, struct rb_root *tree,
     int (*cmp)(struct rb_node *, const struct rb_node *))
{
 struct rb_node **link = &tree->rb_node;
 struct rb_node *parent = ((void *)0);
 int c;

 while (*link) {
  parent = *link;
  c = cmp(node, parent);

  if (c < 0)
   link = &parent->rb_left;
  else if (c > 0)
   link = &parent->rb_right;
  else
   return parent;
 }

 rb_link_node(node, parent, link);
 rb_insert_color(node, tree);
 return ((void *)0);
}
# 255 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find(const void *key, const struct rb_root *tree,
 int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;

 while (node) {
  int c = cmp(key, node);

  if (c < 0)
   node = node->rb_left;
  else if (c > 0)
   node = node->rb_right;
  else
   return node;
 }

 return ((void *)0);
}
# 283 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_find_first(const void *key, const struct rb_root *tree,
       int (*cmp)(const void *key, const struct rb_node *))
{
 struct rb_node *node = tree->rb_node;
 struct rb_node *match = ((void *)0);

 while (node) {
  int c = cmp(key, node);

  if (c <= 0) {
   if (!c)
    match = node;
   node = node->rb_left;
  } else if (c > 0) {
   node = node->rb_right;
  }
 }

 return match;
}
# 313 "./include/linux/rbtree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct rb_node *
rb_next_match(const void *key, struct rb_node *node,
       int (*cmp)(const void *key, const struct rb_node *))
{
 node = rb_next(node);
 if (node && cmp(key, node))
  node = ((void *)0);
 return node;
}
# 17 "./include/linux/hrtimer.h" 2


# 1 "./include/linux/percpu.h" 1
# 65 "./include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);



extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pcpu_page_first_chunk(size_t reserved_size,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn,
    pcpu_fc_populate_pte_fn_t populate_pte_fn);


__attribute__((__alloc_size__(1)))
extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);





__attribute__((__alloc_size__(1)))
extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
__attribute__((__alloc_size__(1)))
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 149 "./include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 20 "./include/linux/hrtimer.h" 2
# 1 "./include/linux/seqlock.h" 1
# 20 "./include/linux/seqlock.h"
# 1 "./include/linux/ww_mutex.h" 1
# 21 "./include/linux/ww_mutex.h"
# 1 "./include/linux/rtmutex.h" 1
# 21 "./include/linux/rtmutex.h"
extern int max_lock_depth;

struct rt_mutex_base {
 raw_spinlock_t wait_lock;
 struct rb_root_cached waiters;
 struct task_struct *owner;
};
# 42 "./include/linux/rtmutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rt_mutex_base_is_locked(struct rt_mutex_base *lock)
{
 return ({ do { extern void __compiletime_assert_107(void) ; if (!((sizeof(lock->owner) == sizeof(char) || sizeof(lock->owner) == sizeof(short) || sizeof(lock->owner) == sizeof(int) || sizeof(lock->owner) == sizeof(long)) || sizeof(lock->owner) == sizeof(long long))) __compiletime_assert_107(); } while (0); (*(const volatile typeof( _Generic((lock->owner), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (lock->owner))) *)&(lock->owner)); }) != ((void *)0);
}

extern void rt_mutex_base_init(struct rt_mutex_base *rtb);
# 57 "./include/linux/rtmutex.h"
struct rt_mutex {
 struct rt_mutex_base rtmutex;



};

struct rt_mutex_waiter;
struct hrtimer_sleeper;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rt_mutex_debug_task_free(struct task_struct *tsk) { }
# 98 "./include/linux/rtmutex.h"
extern void __rt_mutex_init(struct rt_mutex *lock, const char *name, struct lock_class_key *key);





extern void rt_mutex_lock(struct rt_mutex *lock);



extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);
# 22 "./include/linux/ww_mutex.h" 2
# 40 "./include/linux/ww_mutex.h"
struct ww_class {
 atomic_long_t stamp;
 struct lock_class_key acquire_key;
 struct lock_class_key mutex_key;
 const char *acquire_name;
 const char *mutex_name;
 unsigned int is_wait_die;
};

struct ww_mutex {
 struct mutex base;
 struct ww_acquire_ctx *ctx;



};

struct ww_acquire_ctx {
 struct task_struct *task;
 unsigned long stamp;
 unsigned int acquired;
 unsigned short wounded;
 unsigned short is_wait_die;
# 75 "./include/linux/ww_mutex.h"
};
# 100 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_init(struct ww_mutex *lock,
     struct ww_class *ww_class)
{
 __mutex_init(&lock->base,ww_class->mutex_name,&ww_class->mutex_key);
 lock->ctx = ((void *)0);



}
# 134 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_init(struct ww_acquire_ctx *ctx,
       struct ww_class *ww_class)
{
 ctx->task = get_current();
 ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
 ctx->acquired = 0;
 ctx->wounded = false;
 ctx->is_wait_die = ww_class->is_wait_die;
# 157 "./include/linux/ww_mutex.h"
}
# 170 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_done(struct ww_acquire_ctx *ctx)
{






}
# 187 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_fini(struct ww_acquire_ctx *ctx)
{
# 205 "./include/linux/ww_mutex.h"
}
# 236 "./include/linux/ww_mutex.h"
extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
# 268 "./include/linux/ww_mutex.h"
extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
          struct ww_acquire_ctx *ctx);
# 294 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
{
 int ret;



 ret = ww_mutex_lock(lock, ctx);
 (void)ret;
}
# 330 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
     struct ww_acquire_ctx *ctx)
{



 return ww_mutex_lock_interruptible(lock, ctx);
}

extern void ww_mutex_unlock(struct ww_mutex *lock);
# 349 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock)
{
 return mutex_trylock(&lock->base);
}
# 362 "./include/linux/ww_mutex.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_destroy(struct ww_mutex *lock)
{

 mutex_destroy(&lock->base);

}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ww_mutex_is_locked(struct ww_mutex *lock)
{
 return mutex_is_locked((&lock->base));
}
# 21 "./include/linux/seqlock.h" 2
# 65 "./include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 254 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) seqcount_t *__seqprop_ptr(seqcount_t *s)
{
 return s;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __seqprop_sequence(const seqcount_t *s)
{
 return ({ do { extern void __compiletime_assert_108(void) ; if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_108(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __seqprop_preemptible(const seqcount_t *s)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqprop_assert(const seqcount_t *s)
{
 do { } while (0);
}



typedef struct seqcount_raw_spinlock { seqcount_t seqcount; ; } seqcount_raw_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_raw_spinlock_ptr(seqcount_raw_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_raw_spinlock_sequence(const seqcount_raw_spinlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_109(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_109(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (false && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_110(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_110(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_raw_spinlock_preemptible(const seqcount_raw_spinlock_t *s) { if (!0) return false; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_raw_spinlock_assert(const seqcount_raw_spinlock_t *s) { ; }
typedef struct seqcount_spinlock { seqcount_t seqcount; ; } seqcount_spinlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_spinlock_ptr(seqcount_spinlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_spinlock_sequence(const seqcount_spinlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_111(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_111(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_112(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_112(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_spinlock_preemptible(const seqcount_spinlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_spinlock_assert(const seqcount_spinlock_t *s) { ; }
typedef struct seqcount_rwlock { seqcount_t seqcount; ; } seqcount_rwlock_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_rwlock_ptr(seqcount_rwlock_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_rwlock_sequence(const seqcount_rwlock_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_113(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_113(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (0 && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_114(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_114(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_rwlock_preemptible(const seqcount_rwlock_t *s) { if (!0) return 0; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_rwlock_assert(const seqcount_rwlock_t *s) { ; }
typedef struct seqcount_mutex { seqcount_t seqcount; ; } seqcount_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_mutex_ptr(seqcount_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_mutex_sequence(const seqcount_mutex_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_115(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_115(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_116(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_116(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_mutex_preemptible(const seqcount_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_mutex_assert(const seqcount_mutex_t *s) { ; }
typedef struct seqcount_ww_mutex { seqcount_t seqcount; ; } seqcount_ww_mutex_t; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) seqcount_t * __seqprop_ww_mutex_ptr(seqcount_ww_mutex_t *s) { return &s->seqcount; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned __seqprop_ww_mutex_sequence(const seqcount_ww_mutex_t *s) { unsigned seq = ({ do { extern void __compiletime_assert_117(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_117(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); if (!0) return seq; if (true && __builtin_expect(!!(seq & 1), 0)) { ; ; seq = ({ do { extern void __compiletime_assert_118(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_118(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); }); } return seq; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __seqprop_ww_mutex_preemptible(const seqcount_ww_mutex_t *s) { if (!0) return true; return false; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __seqprop_ww_mutex_assert(const seqcount_ww_mutex_t *s) { ; }
# 430 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do___read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 kcsan_atomic_next(0);
 return __builtin_expect(!!(({ do { extern void __compiletime_assert_119(void) ; if (!((sizeof(s->sequence) == sizeof(char) || sizeof(s->sequence) == sizeof(short) || sizeof(s->sequence) == sizeof(int) || sizeof(s->sequence) == sizeof(long)) || sizeof(s->sequence) == sizeof(long long))) __compiletime_assert_119(); } while (0); (*(const volatile typeof( _Generic((s->sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->sequence))) *)&(s->sequence)); }) != start), 0);
}
# 450 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 return do___read_seqcount_retry(s, start);
}
# 470 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_begin(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
}
# 491 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_end(seqcount_t *s)
{
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 517 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 do_raw_write_seqcount_begin(s);
 do { } while (0);
}
# 543 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_begin(seqcount_t *s)
{
 do_write_seqcount_begin_nested(s, 0);
}
# 563 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 do_raw_write_seqcount_end(s);
}
# 613 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_write_seqcount_barrier(seqcount_t *s)
{
 kcsan_nestable_atomic_begin();
 s->sequence++;
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 s->sequence++;
 kcsan_nestable_atomic_end();
}
# 633 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_write_seqcount_invalidate(seqcount_t *s)
{
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 kcsan_nestable_atomic_begin();
 s->sequence+=2;
 kcsan_nestable_atomic_end();
}
# 651 "./include/linux/seqlock.h"
typedef struct {
 seqcount_t seqcount;
} seqcount_latch_t;
# 680 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount_latch(const seqcount_latch_t *s)
{




 return ({ do { extern void __compiletime_assert_120(void) ; if (!((sizeof(s->seqcount.sequence) == sizeof(char) || sizeof(s->seqcount.sequence) == sizeof(short) || sizeof(s->seqcount.sequence) == sizeof(int) || sizeof(s->seqcount.sequence) == sizeof(long)) || sizeof(s->seqcount.sequence) == sizeof(long long))) __compiletime_assert_120(); } while (0); (*(const volatile typeof( _Generic((s->seqcount.sequence), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (s->seqcount.sequence))) *)&(s->seqcount.sequence)); });
}
# 696 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
read_seqcount_latch_retry(const seqcount_latch_t *s, unsigned start)
{
 return do_read_seqcount_retry(_Generic(*(&s->seqcount), seqcount_t: __seqprop_ptr((void *)(&s->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&s->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&s->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&s->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&s->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&s->seqcount)))), start);
}
# 783 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_latch(seqcount_latch_t *s)
{
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 s->seqcount.sequence++;
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
}
# 800 "./include/linux/seqlock.h"
typedef struct {




 seqcount_spinlock_t seqcount;
 spinlock_t lock;
} seqlock_t;
# 838 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqbegin(const seqlock_t *sl)
{
 unsigned ret = ({ ; ({ unsigned _seq = ({ unsigned __seq; while ((__seq = _Generic(*(&sl->seqcount), seqcount_t: __seqprop_sequence((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_sequence((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_sequence((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_sequence((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_sequence((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_sequence((void *)((&sl->seqcount))))) & 1) do { asm volatile("or 1, 1, 1	# low priority"); asm volatile("or 2, 2, 2	# medium priority"); __asm__ __volatile__("": : :"memory"); } while (0); kcsan_atomic_next(1000); __seq; }); __asm__ __volatile__ ("lwsync" " " : : :"memory"); _seq; }); });

 kcsan_atomic_next(0);
 kcsan_flat_atomic_begin();
 return ret;
}
# 858 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{




 kcsan_flat_atomic_end();

 return do_read_seqcount_retry(_Generic(*(&sl->seqcount), seqcount_t: __seqprop_ptr((void *)(&sl->seqcount)), seqcount_raw_spinlock_t: __seqprop_raw_spinlock_ptr((void *)((&sl->seqcount))), seqcount_spinlock_t: __seqprop_spinlock_ptr((void *)((&sl->seqcount))), seqcount_rwlock_t: __seqprop_rwlock_ptr((void *)((&sl->seqcount))), seqcount_mutex_t: __seqprop_mutex_ptr((void *)((&sl->seqcount))), seqcount_ww_mutex_t: __seqprop_ww_mutex_ptr((void *)((&sl->seqcount)))), start);
}
# 888 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 901 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock(&sl->lock);
}
# 914 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 928 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_bh(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_bh(&sl->lock);
}
# 941 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
}
# 954 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_irq(seqlock_t *sl)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 do_write_seqcount_begin(&sl->seqcount.seqcount);
 return flags;
}
# 991 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 do_write_seqcount_end(&sl->seqcount.seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1014 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 1037 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}
# 1061 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}
# 1104 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}
# 1141 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}
# 1156 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}
# 1169 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}
# 1195 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}
# 1220 "./include/linux/seqlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 21 "./include/linux/hrtimer.h" 2

# 1 "./include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root_cached rb_root;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 33 "./include/linux/timerqueue.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 struct rb_node *leftmost = (&head->rb_root)->rb_leftmost;

 return ({ void *__mptr = (void *)(leftmost); do { extern void __compiletime_assert_121(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(leftmost)), typeof(((struct timerqueue_node *)0)->node)) && !__builtin_types_compatible_p(typeof(*(leftmost)), typeof(void))))) __compiletime_assert_121(); } while (0); ((struct timerqueue_node *)(__mptr - __builtin_offsetof(struct timerqueue_node, node))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_queued(struct timerqueue_node *node)
{
 return !((&node->node)->__rb_parent_color == (unsigned long)(&node->node));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_expires(struct timerqueue_node *node)
{
 return node->expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->rb_root = (struct rb_root_cached) { {((void *)0), }, ((void *)0) };
}
# 23 "./include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 39 "./include/linux/hrtimer.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,
 HRTIMER_MODE_HARD = 0x08,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,

 HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 118 "./include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
 u8 is_hard;
};
# 136 "./include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 159 "./include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 unsigned int index;
 clockid_t clockid;
 seqcount_raw_spinlock_t seq;
 struct hrtimer *running;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__((1 << 7))));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_BASE_MONOTONIC_SOFT,
 HRTIMER_BASE_REALTIME_SOFT,
 HRTIMER_BASE_BOOTTIME_SOFT,
 HRTIMER_BASE_TAI_SOFT,
 HRTIMER_MAX_CLOCK_BASES,
};
# 214 "./include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 unsigned int hres_active : 1,
     in_hrtirq : 1,
     hang_detected : 1,
     softirq_activated : 1;

 unsigned int nr_events;
 unsigned short nr_retries;
 unsigned short nr_hangs;
 unsigned int max_hang_time;





 ktime_t expires_next;
 struct hrtimer *next_timer;
 ktime_t softirq_expires_next;
 struct hrtimer *softirq_next_timer;
 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << 7))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ktime_to_ns(timer->node.expires);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return 1 ?
  timer->base->cpu_base->hres_active : 0;
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

extern unsigned int hrtimer_resolution;







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}


extern void timerfd_clock_was_set(void);
extern void timerfd_resume(void);





extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_cancel_wait_running(struct hrtimer *timer)
{
 do { asm volatile("or 1, 1, 1	# low priority"); asm volatile("or 2, 2, 2	# medium priority"); __asm__ __volatile__("": : :"memory"); } while (0);
}





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);
extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, clockid_t clock_id,
     enum hrtimer_mode mode);
# 386 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_sleeper_on_stack(struct hrtimer_sleeper *sl,
       clockid_t clock_id,
       enum hrtimer_mode mode)
{
 hrtimer_init_sleeper(sl, clock_id, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 415 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ktime_to_ns(((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *sl,
       enum hrtimer_mode mode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);
# 468 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hrtimer_is_queued(struct hrtimer *timer)
{

 return !!(({ do { extern void __compiletime_assert_122(void) ; if (!((sizeof(timer->state) == sizeof(char) || sizeof(timer->state) == sizeof(short) || sizeof(timer->state) == sizeof(int) || sizeof(timer->state) == sizeof(long)) || sizeof(timer->state) == sizeof(long long))) __compiletime_assert_122(); } while (0); (*(const volatile typeof( _Generic((timer->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (timer->state))) *)&(timer->state)); }) & 0x01);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 503 "./include/linux/hrtimer.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
extern long hrtimer_nanosleep(ktime_t rqtp, const enum hrtimer_mode mode,
         const clockid_t clockid);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
        const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       clockid_t clock_id);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 20 "./include/linux/sched.h" 2

# 1 "./include/linux/seccomp.h" 1




# 1 "./include/uapi/linux/seccomp.h" 1
# 60 "./include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};
# 109 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 128 "./include/uapi/linux/seccomp.h"
struct seccomp_notif_addfd {
 __u64 id;
 __u32 flags;
 __u32 srcfd;
 __u32 newfd;
 __u32 newfd_flags;
};
# 6 "./include/linux/seccomp.h" 2
# 21 "./include/linux/seccomp.h"
# 1 "./arch/powerpc/include/asm/seccomp.h" 1




# 1 "./include/uapi/linux/unistd.h" 1







# 1 "./arch/powerpc/include/asm/unistd.h" 1







# 1 "./arch/powerpc/include/uapi/asm/unistd.h" 1
# 16 "./arch/powerpc/include/uapi/asm/unistd.h"
# 1 "./arch/powerpc/include/generated/uapi/asm/unistd_64.h" 1
# 17 "./arch/powerpc/include/uapi/asm/unistd.h" 2
# 9 "./arch/powerpc/include/asm/unistd.h" 2
# 9 "./include/uapi/linux/unistd.h" 2
# 6 "./arch/powerpc/include/asm/seccomp.h" 2



# 1 "./include/asm-generic/seccomp.h" 1
# 31 "./include/asm-generic/seccomp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const int *get_compat_mode1_syscalls(void)
{
 static const int mode1_syscalls_32[] = {
  3, 4,
  1, 119,
  -1,
 };
 return mode1_syscalls_32;
}
# 10 "./arch/powerpc/include/asm/seccomp.h" 2
# 22 "./include/linux/seccomp.h" 2

struct seccomp_filter;
# 35 "./include/linux/seccomp.h"
struct seccomp {
 int mode;
 atomic_t filter_count;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int secure_computing(void)
{
 if (__builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 10)), 0))
  return __secure_computing(((void *)0));
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 93 "./include/linux/seccomp.h"
extern void seccomp_filter_release(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 112 "./include/linux/seccomp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long seccomp_get_metadata(struct task_struct *task,
     unsigned long filter_off,
     void *data)
{
 return -22;
}
# 22 "./include/linux/sched.h" 2
# 1 "./include/linux/nodemask.h" 1
# 96 "./include/linux/nodemask.h"
# 1 "./include/linux/numa.h" 1
# 25 "./include/linux/numa.h"
# 1 "./arch/powerpc/include/asm/sparsemem.h" 1
# 16 "./arch/powerpc/include/asm/sparsemem.h"
extern int remove_section_mapping(unsigned long start, unsigned long end);
extern int memory_add_physaddr_to_nid(u64 start);



extern int hot_add_scn_to_nid(unsigned long scn_addr);
# 26 "./include/linux/numa.h" 2


int numa_map_to_online_node(int node);
# 39 "./include/linux/numa.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int phys_to_target_node(u64 start)
{
 ({ static bool __attribute__((__section__(".data.once"))) __already_done; bool __ret_do_once = !!(true); if (__builtin_expect(!!(__ret_do_once && !__already_done), 0)) { __already_done = true; ({ do {} while (0); _printk("\001" "6" "Unknown target node for memory at 0x%llx, assuming node 0\n", start); }); } __builtin_expect(!!(__ret_do_once), 0); });

 return 0;
}
# 97 "./include/linux/nodemask.h" 2

typedef struct { unsigned long bits[((((1 << 8)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 109 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 8) : 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : ((void *)0);
}
# 128 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 8))) *)1 == (typeof((int)(find_first_bit(srcp->bits, (1 << 8)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 8))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_bit(srcp->bits, (1 << 8)))) * 0l)) : (int *)8))))), (((int)((1 << 8))) < ((int)(find_first_bit(srcp->bits, (1 << 8)))) ? ((int)((1 << 8))) : ((int)(find_first_bit(srcp->bits, (1 << 8))))), ({ typeof((int)((1 << 8))) __UNIQUE_ID___x123 = ((int)((1 << 8))); typeof((int)(find_first_bit(srcp->bits, (1 << 8)))) __UNIQUE_ID___y124 = ((int)(find_first_bit(srcp->bits, (1 << 8)))); ((__UNIQUE_ID___x123) < (__UNIQUE_ID___y124) ? (__UNIQUE_ID___x123) : (__UNIQUE_ID___y124)); }));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 8))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 8), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 8))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 8), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 8))) < ((int)(find_next_bit(srcp->bits, (1 << 8), n+1))) ? ((int)((1 << 8))) : ((int)(find_next_bit(srcp->bits, (1 << 8), n+1)))), ({ typeof((int)((1 << 8))) __UNIQUE_ID___x125 = ((int)((1 << 8))); typeof((int)(find_next_bit(srcp->bits, (1 << 8), n+1))) __UNIQUE_ID___y126 = ((int)(find_next_bit(srcp->bits, (1 << 8), n+1))); ((__UNIQUE_ID___x125) < (__UNIQUE_ID___y126) ? (__UNIQUE_ID___x125) : (__UNIQUE_ID___y126)); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 8));
 __node_set((node), &(*mask));
}
# 299 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 8))) *)1 == (typeof((int)(find_first_zero_bit(maskp->bits, (1 << 8)))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 8))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_first_zero_bit(maskp->bits, (1 << 8)))) * 0l)) : (int *)8))))), (((int)((1 << 8))) < ((int)(find_first_zero_bit(maskp->bits, (1 << 8)))) ? ((int)((1 << 8))) : ((int)(find_first_zero_bit(maskp->bits, (1 << 8))))), ({ typeof((int)((1 << 8))) __UNIQUE_ID___x127 = ((int)((1 << 8))); typeof((int)(find_first_zero_bit(maskp->bits, (1 << 8)))) __UNIQUE_ID___y128 = ((int)(find_first_zero_bit(maskp->bits, (1 << 8)))); ((__UNIQUE_ID___x127) < (__UNIQUE_ID___y128) ? (__UNIQUE_ID___x127) : (__UNIQUE_ID___y128)); }));

}
# 333 "./include/linux/nodemask.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 391 "./include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 N_GENERIC_INITIATOR,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_state(int node, enum node_states state)
{
 return arch_test_bit((node), (node_states[state]).bits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 8));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_online_node(int nid)
{
 return __next_node((nid), &(node_states[N_ONLINE]));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_memory_node(int nid)
{
 return __next_node((nid), &(node_states[N_MEMORY]));
}

extern unsigned int nr_node_ids;
extern unsigned int nr_online_nodes;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_online(int nid)
{
 node_set_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_offline(int nid)
{
 node_clear_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}
# 498 "./include/linux/nodemask.h"
extern int node_random(const nodemask_t *maskp);
# 532 "./include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 23 "./include/linux/sched.h" 2


# 1 "./include/linux/resource.h" 1




# 1 "./include/uapi/linux/resource.h" 1
# 24 "./include/uapi/linux/resource.h"
struct rusage {
 struct __kernel_old_timeval ru_utime;
 struct __kernel_old_timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "./include/uapi/linux/resource.h"
# 1 "./arch/powerpc/include/generated/uapi/asm/resource.h" 1
# 1 "./include/asm-generic/resource.h" 1




# 1 "./include/uapi/asm-generic/resource.h" 1
# 6 "./include/asm-generic/resource.h" 2
# 2 "./arch/powerpc/include/generated/uapi/asm/resource.h" 2
# 79 "./include/uapi/linux/resource.h" 2
# 6 "./include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 26 "./include/linux/sched.h" 2
# 1 "./include/linux/latencytop.h" 1
# 14 "./include/linux/latencytop.h"
struct task_struct;
# 46 "./include/linux/latencytop.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_latency_tracing(struct task_struct *p)
{
}
# 27 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/prio.h" 1
# 32 "./include/linux/sched/prio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 28 "./include/linux/sched.h" 2
# 1 "./include/linux/sched/types.h" 1
# 17 "./include/linux/sched/types.h"
struct task_cputime {
 u64 stime;
 u64 utime;
 unsigned long long sum_exec_runtime;
};
# 29 "./include/linux/sched.h" 2
# 1 "./include/linux/signal_types.h" 1
# 10 "./include/linux/signal_types.h"
# 1 "./include/uapi/linux/signal.h" 1




# 1 "./arch/powerpc/include/asm/signal.h" 1





# 1 "./arch/powerpc/include/uapi/asm/signal.h" 1
# 15 "./arch/powerpc/include/uapi/asm/signal.h"
typedef unsigned long old_sigset_t;

typedef struct {
 unsigned long sig[(64 / 64)];
} sigset_t;
# 68 "./arch/powerpc/include/uapi/asm/signal.h"
# 1 "./include/uapi/asm-generic/signal-defs.h" 1
# 81 "./include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 69 "./arch/powerpc/include/uapi/asm/signal.h" 2
# 86 "./arch/powerpc/include/uapi/asm/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 7 "./arch/powerpc/include/asm/signal.h" 2


struct pt_regs;
void do_notify_resume(struct pt_regs *regs, unsigned long thread_info_flags);
# 6 "./include/uapi/linux/signal.h" 2
# 1 "./arch/powerpc/include/generated/uapi/asm/siginfo.h" 1
# 1 "./include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 37 "./include/uapi/asm-generic/siginfo.h"
union __sifields {

 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
 } _kill;


 struct {
  __kernel_timer_t _tid;
  int _overrun;
  sigval_t _sigval;
  int _sys_private;
 } _timer;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  sigval_t _sigval;
 } _rt;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  int _status;
  __kernel_clock_t _utime;
  __kernel_clock_t _stime;
 } _sigchld;


 struct {
  void *_addr;
# 79 "./include/uapi/asm-generic/siginfo.h"
  union {

   int _trapno;




   short _addr_lsb;

   struct {
    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    void *_lower;
    void *_upper;
   } _addr_bnd;

   struct {
    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    __u32 _pkey;
   } _addr_pkey;

   struct {
    unsigned long _data;
    __u32 _type;
   } _perf;
  };
 } _sigfault;


 struct {
  long _band;
  int _fd;
 } _sigpoll;


 struct {
  void *_call_addr;
  int _syscall;
  unsigned int _arch;
 } _sigsys;
};
# 138 "./include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 union {
  struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
  int _si_pad[128/sizeof(int)];
 };
} siginfo_t;
# 333 "./include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 2 "./arch/powerpc/include/generated/uapi/asm/siginfo.h" 2
# 7 "./include/uapi/linux/signal.h" 2
# 11 "./include/linux/signal_types.h" 2

typedef struct kernel_siginfo {
 struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
} kernel_siginfo_t;

struct ucounts;





struct sigqueue {
 struct list_head list;
 int flags;
 kernel_siginfo_t info;
 struct ucounts *ucounts;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 67 "./include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 kernel_siginfo_t info;
 int sig;
};
# 30 "./include/linux/sched.h" 2
# 1 "./include/linux/syscall_user_dispatch.h" 1
# 26 "./include/linux/syscall_user_dispatch.h"
struct syscall_user_dispatch {};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int set_syscall_user_dispatch(unsigned long mode, unsigned long offset,
         unsigned long len, char *selector)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_syscall_work_syscall_user_dispatch(struct task_struct *tsk)
{
}
# 31 "./include/linux/sched.h" 2
# 1 "./include/linux/mm_types_task.h" 1
# 39 "./include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};





enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};


struct tlbflush_unmap_batch {
# 102 "./include/linux/mm_types_task.h"
};
# 32 "./include/linux/sched.h" 2
# 1 "./include/linux/task_io_accounting.h" 1
# 12 "./include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
# 44 "./include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 33 "./include/linux/sched.h" 2
# 1 "./include/linux/posix-timers.h" 1






# 1 "./include/linux/alarmtimer.h" 1








struct rtc_device;

enum alarmtimer_type {
 ALARM_REALTIME,
 ALARM_BOOTTIME,


 ALARM_NUMTYPE,


 ALARM_REALTIME_FREEZER,
 ALARM_BOOTTIME_FREEZER,
};

enum alarmtimer_restart {
 ALARMTIMER_NORESTART,
 ALARMTIMER_RESTART,
};
# 42 "./include/linux/alarmtimer.h"
struct alarm {
 struct timerqueue_node node;
 struct hrtimer timer;
 enum alarmtimer_restart (*function)(struct alarm *, ktime_t now);
 enum alarmtimer_type type;
 int state;
 void *data;
};

void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
  enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
void alarm_start(struct alarm *alarm, ktime_t start);
void alarm_start_relative(struct alarm *alarm, ktime_t start);
void alarm_restart(struct alarm *alarm);
int alarm_try_to_cancel(struct alarm *alarm);
int alarm_cancel(struct alarm *alarm);

u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
ktime_t alarm_expires_remaining(const struct alarm *alarm);



struct rtc_device *alarmtimer_get_rtcdev(void);
# 8 "./include/linux/posix-timers.h" 2

# 1 "./include/linux/task_work.h" 1





# 1 "./include/linux/sched.h" 1
# 7 "./include/linux/task_work.h" 2

typedef void (*task_work_func_t)(struct callback_head *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_task_work(struct callback_head *twork, task_work_func_t func)
{
 twork->func = func;
}

enum task_work_notify_mode {
 TWA_NONE,
 TWA_RESUME,
 TWA_SIGNAL,
};

int task_work_add(struct task_struct *task, struct callback_head *twork,
   enum task_work_notify_mode mode);

struct callback_head *task_work_cancel_match(struct task_struct *task,
 bool (*match)(struct callback_head *, void *data), void *data);
struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
void task_work_run(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_task_work(struct task_struct *task)
{
 task_work_run();
}
# 10 "./include/linux/posix-timers.h" 2

struct kernel_siginfo;
struct task_struct;
# 39 "./include/linux/posix-timers.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_process_cpuclock(const unsigned int pid,
  const clockid_t clock)
{
 return ((~pid) << 3) | clock;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_thread_cpuclock(const unsigned int tid,
  const clockid_t clock)
{
 return make_process_cpuclock(tid, clock | 4);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t fd_to_clockid(const int fd)
{
 return make_process_cpuclock((unsigned int) fd, 3);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int clockid_to_fd(const clockid_t clk)
{
 return ~(clk >> 3);
}
# 70 "./include/linux/posix-timers.h"
struct cpu_timer {
 struct timerqueue_node node;
 struct timerqueue_head *head;
 struct pid *pid;
 struct list_head elist;
 int firing;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_enqueue(struct timerqueue_head *head,
         struct cpu_timer *ctmr)
{
 ctmr->head = head;
 return timerqueue_add(head, &ctmr->node);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_queued(struct cpu_timer *ctmr)
{
 return !!ctmr->head;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_dequeue(struct cpu_timer *ctmr)
{
 if (cpu_timer_queued(ctmr)) {
  timerqueue_del(ctmr->head, &ctmr->node);
  ctmr->head = ((void *)0);
  return true;
 }
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cpu_timer_getexpires(struct cpu_timer *ctmr)
{
 return ctmr->node.expires;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_timer_setexpires(struct cpu_timer *ctmr, u64 exp)
{
 ctmr->node.expires = exp;
}






struct posix_cputimer_base {
 u64 nextevt;
 struct timerqueue_head tqhead;
};
# 130 "./include/linux/posix-timers.h"
struct posix_cputimers {
 struct posix_cputimer_base bases[3];
 unsigned int timers_active;
 unsigned int expiry_active;
};






struct posix_cputimers_work {
 struct callback_head work;
 unsigned int scheduled;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_init(struct posix_cputimers *pct)
{
 memset(pct, 0, sizeof(*pct));
 pct->bases[0].nextevt = ((u64)~0ULL);
 pct->bases[1].nextevt = ((u64)~0ULL);
 pct->bases[2].nextevt = ((u64)~0ULL);
}

void posix_cputimers_group_init(struct posix_cputimers *pct, u64 cpu_limit);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_rt_watchdog(struct posix_cputimers *pct,
            u64 runtime)
{
 pct->bases[2].nextevt = runtime;
}
# 189 "./include/linux/posix-timers.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_init_work(void) { }
# 217 "./include/linux/posix-timers.h"
struct k_itimer {
 struct list_head list;
 struct hlist_node t_hash;
 spinlock_t it_lock;
 const struct k_clock *kclock;
 clockid_t it_clock;
 timer_t it_id;
 int it_active;
 s64 it_overrun;
 s64 it_overrun_last;
 int it_requeue_pending;
 int it_sigev_notify;
 ktime_t it_interval;
 struct signal_struct *it_signal;
 union {
  struct pid *it_pid;
  struct task_struct *it_process;
 };
 struct sigqueue *sigq;
 union {
  struct {
   struct hrtimer timer;
  } real;
  struct cpu_timer cpu;
  struct {
   struct alarm alarmtimer;
  } alarm;
 } it;
 struct callback_head rcu;
};

void run_posix_cpu_timers(void);
void posix_cpu_timers_exit(struct task_struct *task);
void posix_cpu_timers_exit_group(struct task_struct *task);
void set_process_cpu_timer(struct task_struct *task, unsigned int clock_idx,
      u64 *newval, u64 *oldval);

void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);

void posixtimer_rearm(struct kernel_siginfo *info);
# 34 "./include/linux/sched.h" 2
# 1 "./include/uapi/linux/rseq.h" 1
# 16 "./include/uapi/linux/rseq.h"
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "./include/uapi/linux/rseq.h"
 __u32 cpu_id_start;
# 90 "./include/uapi/linux/rseq.h"
 __u32 cpu_id;
# 109 "./include/uapi/linux/rseq.h"
 union {
  __u64 ptr64;

  __u64 ptr;
# 124 "./include/uapi/linux/rseq.h"
 } rseq_cs;
# 144 "./include/uapi/linux/rseq.h"
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 35 "./include/linux/sched.h" 2

# 1 "./include/linux/kcsan.h" 1
# 62 "./include/linux/kcsan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcsan_init(void) { }
# 37 "./include/linux/sched.h" 2
# 1 "./arch/powerpc/include/generated/asm/kmap_size.h" 1
# 1 "./include/asm-generic/kmap_size.h" 1
# 2 "./arch/powerpc/include/generated/asm/kmap_size.h" 2
# 38 "./include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct bpf_local_storage;
struct bpf_run_ctx;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct io_uring_task;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 280 "./include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);
           void preempt_schedule_irq(void);




extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 310 "./include/linux/sched.h"
struct prev_cputime {





};

enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_IDLE,

 VTIME_SYS,

 VTIME_USER,

 VTIME_GUEST,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 unsigned int cpu;
 u64 utime;
 u64 stime;
 u64 gtime;
};







enum uclamp_id {
 UCLAMP_MIN = 0,
 UCLAMP_MAX,
 UCLAMP_CNT
};


extern struct root_domain def_root_domain;
extern struct mutex sched_domains_mutex;


struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 393 "./include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 427 "./include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;


} __attribute__((__aligned__(sizeof(u64))));
# 479 "./include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u64 runnable_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long runnable_avg;
 unsigned long util_avg;
 struct util_est util_est;
} __attribute__((__aligned__((1 << 7))));

struct sched_statistics {
# 525 "./include/linux/sched.h"
};

struct sched_entity {

 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;

 struct sched_statistics statistics;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;

 unsigned long runnable_weight;
# 561 "./include/linux/sched.h"
 struct sched_avg avg;

};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 630 "./include/linux/sched.h"
 unsigned int dl_throttled : 1;
 unsigned int dl_yielded : 1;
 unsigned int dl_non_contending : 1;
 unsigned int dl_overrun : 1;





 struct hrtimer dl_timer;
# 648 "./include/linux/sched.h"
 struct hrtimer inactive_timer;







 struct sched_dl_entity *pi_se;

};
# 695 "./include/linux/sched.h"
union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 need_mb;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct kmap_ctrl {




};

struct task_struct {





 struct thread_info thread_info;

 unsigned int __state;
# 744 "./include/linux/sched.h"
 void *stack;
 refcount_t usage;

 unsigned int flags;
 unsigned int ptrace;


 int on_cpu;
 struct __call_single_node wake_entry;


 unsigned int cpu;

 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;
# 768 "./include/linux/sched.h"
 int recent_used_cpu;
 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;
 struct sched_dl_entity dl;
# 790 "./include/linux/sched.h"
 struct task_group *sched_task_group;
# 808 "./include/linux/sched.h"
 struct hlist_head preempt_notifiers;



 unsigned int btrace_seq;


 unsigned int policy;
 int nr_cpus_allowed;
 const cpumask_t *cpus_ptr;
 cpumask_t *user_cpus_ptr;
 cpumask_t cpus_mask;
 void *migration_pending;

 unsigned short migration_disabled;

 unsigned short migration_flags;
# 842 "./include/linux/sched.h"
 int trc_reader_nesting;
 int trc_ipi_to_cpu;
 union rcu_special trc_reader_special;
 bool trc_reader_checked;
 struct list_head trc_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;





 unsigned :0;
# 903 "./include/linux/sched.h"
 unsigned sched_remote_wakeup:1;


 unsigned in_execve:1;
 unsigned in_iowait:1;

 unsigned restore_sigmask:1;


 unsigned in_user_fault:1;






 unsigned no_cgroup_migration:1;

 unsigned frozen:1;
# 936 "./include/linux/sched.h"
 unsigned in_eventfd_signal:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;
# 957 "./include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;


 void *pf_io_worker;

 u64 utime;
 u64 stime;

 u64 utimescaled;
 u64 stimescaled;

 u64 gtime;
 struct prev_cputime prev_cputime;
# 1011 "./include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 start_boottime;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct posix_cputimers posix_cputimers;
# 1034 "./include/linux/sched.h"
 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 1054 "./include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;


 struct sysv_sem sysvsem;
 struct sysv_shm sysvshm;


 unsigned long last_switch_count;
 unsigned long last_switch_time;
 unsigned long killed_time;


 struct fs_struct *fs;


 struct files_struct *files;


 struct io_uring_task *io_uring;



 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;



 struct audit_context *audit_context;

 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;
 struct syscall_user_dispatch syscall_dispatch;


 u64 parent_exec_id;
 u64 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;
# 1159 "./include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 struct capture_control *capture_control;


 unsigned long ptrace_message;
 kernel_siginfo_t *last_siginfo;

 struct task_io_accounting ioac;






 u64 acct_rss_mem1;

 u64 acct_vm_mem1;

 u64 acct_timexpd;



 nodemask_t mems_allowed;

 seqcount_spinlock_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;
 struct mutex futex_exit_mutex;
 unsigned int futex_state;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;






 struct mempolicy *mempolicy;
 short il_prev;
 short pref_node_fork;


 int numa_scan_seq;
 unsigned int numa_scan_period;
 unsigned int numa_scan_period_max;
 int numa_preferred_nid;
 unsigned long numa_migrate_retry;

 u64 node_stamp;
 u64 last_task_numa_placement;
 u64 last_sum_exec_runtime;
 struct callback_head numa_work;
# 1258 "./include/linux/sched.h"
 struct numa_group *numa_group;
# 1274 "./include/linux/sched.h"
 unsigned long *numa_faults;
 unsigned long total_numa_faults;







 unsigned long numa_faults_locality[3];

 unsigned long numa_pages_migrated;



 struct rseq *rseq;
 u32 rseq_sig;




 unsigned long rseq_event_mask;


 struct tlbflush_unmap_batch tlb_ubc;

 union {
  refcount_t rcu_users;
  struct callback_head rcu;
 };


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;
# 1322 "./include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1335 "./include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1355 "./include/linux/sched.h"
 int curr_ret_stack;
 int curr_ret_depth;


 struct ftrace_ret_stack *ret_stack;


 unsigned long long ftrace_timestamp;





 atomic_t trace_overrun;


 atomic_t tracing_graph_pause;




 unsigned long trace;


 unsigned long trace_recursion;
# 1408 "./include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;


 struct mem_cgroup *active_memcg;







 struct uprobe_task *utask;





 struct kmap_ctrl kmap_ctrl;






 int pagefault_disabled;

 struct task_struct *oom_reaper_list;






 refcount_t stack_refcount;
# 1457 "./include/linux/sched.h"
 struct bpf_local_storage *bpf_storage;

 struct bpf_run_ctx *bpf_ctx;
# 1478 "./include/linux/sched.h"
 struct llist_head kretprobe_instances;
# 1505 "./include/linux/sched.h"
 struct thread_struct thread;







};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 1531 "./include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1564 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { extern void __compiletime_assert_129(void) ; if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_129(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_state_index(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ do { extern void __compiletime_assert_130(void) ; if (!((sizeof(tsk->__state) == sizeof(char) || sizeof(tsk->__state) == sizeof(short) || sizeof(tsk->__state) == sizeof(int) || sizeof(tsk->__state) == sizeof(long)) || sizeof(tsk->__state) == sizeof(long long))) __compiletime_assert_130(); } while (0); (*(const volatile typeof( _Generic((tsk->__state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (tsk->__state))) *)&(tsk->__state)); });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { extern void __compiletime_assert_131(void) ; if (!(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)))) __compiletime_assert_131(); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_index_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { extern void __compiletime_assert_132(void) ; if (!(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : 63 - __builtin_clzll((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1))) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1))) __compiletime_assert_132(); } while (0);

 return state_char[state];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_state_to_char(struct task_struct *tsk)
{
 return task_index_to_char(task_state_index(tsk));
}
# 1662 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1730 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_percpu_thread(void)
{

 return (get_current()->flags & 0x04000000) &&
  (get_current()->nr_cpus_allowed == 1);



}
# 1762 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_no_new_privs(struct task_struct *p) { return arch_test_bit(0, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_page(struct task_struct *p) { return arch_test_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_slab(struct task_struct *p) { return arch_test_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_disable(struct task_struct *p) { return arch_test_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_noexec(struct task_struct *p) { return arch_test_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_force_disable(struct task_struct *p) { return arch_test_bit(4, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_disable(struct task_struct *p) { return arch_test_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_force_disable(struct task_struct *p) { return arch_test_bit(6, &p->atomic_flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 get_current()->flags &= ~flags;
 get_current()->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
extern int dup_user_cpus_ptr(struct task_struct *dst, struct task_struct *src, int node);
extern void release_user_cpus_ptr(struct task_struct *p);
extern int dl_task_check_affinity(struct task_struct *p, const struct cpumask *mask);
extern void force_compatible_cpus_allowed_ptr(struct task_struct *p);
extern void relax_compatible_cpus_allowed_ptr(struct task_struct *p);
# 1835 "./include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern void sched_set_fifo(struct task_struct *p);
extern void sched_set_fifo_low(struct task_struct *p);
extern void sched_set_normal(struct task_struct *p, int nice);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {

 struct task_struct task;




 unsigned long stack[(1 << 14)/sizeof(long)];
};





extern unsigned long init_stack[(1 << 14) / sizeof(unsigned long)];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct thread_info *task_thread_info(struct task_struct *task)
{
 return &task->thread_info;
}
# 1915 "./include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void scheduler_ipi(void)
{





 do { if (test_ti_thread_flag(((struct thread_info *)get_current()), 2)) set_preempt_need_resched(); } while (0);
}
extern unsigned long wait_task_inactive(struct task_struct *, unsigned int match_state);
# 1969 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(task_thread_info(tsk), flag, value);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,2)), 0);
}
# 2022 "./include/linux/sched.h"
extern int __cond_resched(void);
# 2035 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int _cond_resched(void)
{
 return __cond_resched();
}
# 2053 "./include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t *lock);
extern int __cond_resched_rwlock_read(rwlock_t *lock);
extern int __cond_resched_rwlock_write(rwlock_t *lock);
# 2072 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cond_resched_rcu(void)
{

 rcu_read_unlock();
 ({ ___might_sleep("include/linux/sched.h", 2076, 0); _cond_resched(); });
 rcu_read_lock();

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int spin_needbreak(spinlock_t *lock)
{



 return 0;

}
# 2103 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwlock_needbreak(rwlock_t *lock)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 2)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_cpu(const struct task_struct *p)
{

 return ({ do { extern void __compiletime_assert_133(void) ; if (!((sizeof(p->cpu) == sizeof(char) || sizeof(p->cpu) == sizeof(short) || sizeof(p->cpu) == sizeof(int) || sizeof(p->cpu) == sizeof(long)) || sizeof(p->cpu) == sizeof(long long))) __compiletime_assert_133(); } while (0); (*(const volatile typeof( _Generic((p->cpu), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->cpu))) *)&(p->cpu)); });



}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 2146 "./include/linux/sched.h"
extern bool sched_task_on_rq(struct task_struct *p);
# 2163 "./include/linux/sched.h"
extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);







unsigned long sched_cpu_util(int cpu, unsigned long max);
# 2181 "./include/linux/sched.h"
enum rseq_event_mask_bits {
 RSEQ_EVENT_PREEMPT_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT,
 RSEQ_EVENT_SIGNAL_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT,
 RSEQ_EVENT_MIGRATE_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT,
};

enum rseq_event_mask {
 RSEQ_EVENT_PREEMPT = (1U << RSEQ_EVENT_PREEMPT_BIT),
 RSEQ_EVENT_SIGNAL = (1U << RSEQ_EVENT_SIGNAL_BIT),
 RSEQ_EVENT_MIGRATE = (1U << RSEQ_EVENT_MIGRATE_BIT),
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_set_notify_resume(struct task_struct *t)
{
 if (t->rseq)
  set_tsk_thread_flag(t, 13);
}

void __rseq_handle_notify_resume(struct ksignal *sig, struct pt_regs *regs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_handle_notify_resume(struct ksignal *ksig,
          struct pt_regs *regs)
{
 if (get_current()->rseq)
  __rseq_handle_notify_resume(ksig, regs);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_signal_deliver(struct ksignal *ksig,
           struct pt_regs *regs)
{
 __asm__ __volatile__("": : :"memory");
 arch___set_bit(RSEQ_EVENT_SIGNAL_BIT, &get_current()->rseq_event_mask);
 __asm__ __volatile__("": : :"memory");
 rseq_handle_notify_resume(ksig, regs);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_preempt(struct task_struct *t)
{
 arch___set_bit(RSEQ_EVENT_PREEMPT_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_migrate(struct task_struct *t)
{
 arch___set_bit(RSEQ_EVENT_MIGRATE_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_fork(struct task_struct *t, unsigned long clone_flags)
{
 if (clone_flags & 0x00000100) {
  t->rseq = ((void *)0);
  t->rseq_sig = 0;
  t->rseq_event_mask = 0;
 } else {
  t->rseq = get_current()->rseq;
  t->rseq_sig = get_current()->rseq_sig;
  t->rseq_event_mask = get_current()->rseq_event_mask;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_execve(struct task_struct *t)
{
 t->rseq = ((void *)0);
 t->rseq_sig = 0;
 t->rseq_event_mask = 0;
}
# 2289 "./include/linux/sched.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_syscall(struct pt_regs *regs)
{
}



const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);

const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);

int sched_trace_rq_cpu(struct rq *rq);
int sched_trace_rq_cpu_capacity(struct rq *rq);
int sched_trace_rq_nr_running(struct rq *rq);

const struct cpumask *sched_trace_rd_span(struct root_domain *rd);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_core_free(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sched_core_fork(struct task_struct *p) { }
# 17 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./include/linux/mm.h" 1
# 10 "./include/linux/mm.h"
# 1 "./include/linux/gfp.h" 1





# 1 "./include/linux/mmzone.h" 1
# 18 "./include/linux/mmzone.h"
# 1 "./include/linux/pageblock-flags.h" 1
# 18 "./include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};






extern unsigned int pageblock_order;
# 55 "./include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(const struct page *page,
    unsigned long pfn,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long mask);
# 19 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags-layout.h" 1





# 1 "./include/generated/bounds.h" 1
# 7 "./include/linux/page-flags-layout.h" 2
# 20 "./include/linux/mmzone.h" 2

# 1 "./include/linux/mm_types.h" 1






# 1 "./include/linux/auxvec.h" 1




# 1 "./include/uapi/linux/auxvec.h" 1




# 1 "./arch/powerpc/include/uapi/asm/auxvec.h" 1
# 6 "./include/uapi/linux/auxvec.h" 2
# 6 "./include/linux/auxvec.h" 2
# 8 "./include/linux/mm_types.h" 2



# 1 "./include/linux/rwsem.h" 1
# 48 "./include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;

 struct optimistic_spin_queue osq;

 raw_spinlock_t wait_lock;
 struct list_head wait_list;






};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 104 "./include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 120 "./include/linux/rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}
# 183 "./include/linux/rwsem.h"
extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_interruptible(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 12 "./include/linux/mm_types.h" 2
# 1 "./include/linux/completion.h" 1
# 12 "./include/linux/completion.h"
# 1 "./include/linux/swait.h" 1
# 41 "./include/linux/swait.h"
struct task_struct;

struct swait_queue_head {
 raw_spinlock_t lock;
 struct list_head task_list;
};

struct swait_queue {
 struct task_struct *task;
 struct list_head task_list;
};
# 69 "./include/linux/swait.h"
extern void __init_swait_queue_head(struct swait_queue_head *q, const char *name,
        struct lock_class_key *key);
# 121 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int swait_active(struct swait_queue_head *wq)
{
 return !list_empty(&wq->task_list);
}
# 134 "./include/linux/swait.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool swq_has_sleeper(struct swait_queue_head *wq)
{







 __asm__ __volatile__ ("sync" : : : "memory");
 return swait_active(wq);
}

extern void swake_up_one(struct swait_queue_head *q);
extern void swake_up_all(struct swait_queue_head *q);
extern void swake_up_locked(struct swait_queue_head *q);

extern void prepare_to_swait_exclusive(struct swait_queue_head *q, struct swait_queue *wait, int state);
extern long prepare_to_swait_event(struct swait_queue_head *q, struct swait_queue *wait, int state);

extern void __finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
extern void finish_swait(struct swait_queue_head *q, struct swait_queue *wait);
# 13 "./include/linux/completion.h" 2
# 26 "./include/linux/completion.h"
struct completion {
 unsigned int done;
 struct swait_queue_head wait;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_acquire(struct completion *x) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_release(struct completion *x) {}
# 84 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_swait_queue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 97 "./include/linux/completion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "./include/linux/mm_types.h" 2

# 1 "./include/linux/uprobes.h" 1
# 19 "./include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};


# 1 "./arch/powerpc/include/asm/uprobes.h" 1
# 12 "./arch/powerpc/include/asm/uprobes.h"
# 1 "./include/linux/notifier.h" 1
# 16 "./include/linux/notifier.h"
# 1 "./include/linux/srcu.h" 1
# 22 "./include/linux/srcu.h"
# 1 "./include/linux/rcu_segcblist.h" 1
# 21 "./include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
};
# 183 "./include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];



 long len;

 long seglen[4];
 u8 flags;
};
# 23 "./include/linux/srcu.h" 2

struct srcu_struct;
# 41 "./include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *ssp);







# 1 "./include/linux/srcutree.h" 1
# 14 "./include/linux/srcutree.h"
# 1 "./include/linux/rcu_node_tree.h" 1
# 15 "./include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock __attribute__((__aligned__(1 << (7))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[(1 + (((2048) + (((16) * 64)) - 1) / (((16) * 64))) + (((2048) + ((16)) - 1) / ((16))))];
 struct srcu_node *level[3 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;
 struct lockdep_map dep_map;
};
# 135 "./include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 50 "./include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
unsigned long get_state_synchronize_srcu(struct srcu_struct *ssp);
unsigned long start_poll_synchronize_srcu(struct srcu_struct *ssp);
bool poll_state_synchronize_srcu(struct srcu_struct *ssp, unsigned long cookie);


void srcu_init(void);
# 100 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 return 1;
}
# 159 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 do { } while (0);
 return retval;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 185 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ int __ret_warn_on = !!(idx & ~0x1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/srcu.h"), "i" (188), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 do { } while (0);
 __srcu_read_unlock(ssp, idx);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 209 "./include/linux/srcu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "./include/linux/notifier.h" 2
# 49 "./include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 93 "./include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 144 "./include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);

extern int blocking_notifier_call_chain_robust(struct blocking_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
extern int raw_notifier_call_chain_robust(struct raw_notifier_head *nh,
  unsigned long val_up, unsigned long val_down, void *v);
# 187 "./include/linux/notifier.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 231 "./include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 13 "./arch/powerpc/include/asm/uprobes.h" 2
# 1 "./arch/powerpc/include/asm/probes.h" 1
# 12 "./arch/powerpc/include/asm/probes.h"
typedef u32 ppc_opcode_t;
# 35 "./arch/powerpc/include/asm/probes.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_single_step(struct pt_regs *regs)
{
 regs_set_return_msr(regs, regs->msr | ((1UL<<(10))));
# 50 "./arch/powerpc/include/asm/probes.h"
}
# 14 "./arch/powerpc/include/asm/uprobes.h" 2


typedef ppc_opcode_t uprobe_opcode_t;
# 25 "./arch/powerpc/include/asm/uprobes.h"
struct arch_uprobe {
 union {
  u32 insn[2];
  u32 ixol[2];
 };
};

struct arch_uprobe_task {
 unsigned long saved_trap_nr;
};
# 50 "./include/linux/uprobes.h" 2

enum uprobe_task_state {
 UTASK_RUNNING,
 UTASK_SSTEP,
 UTASK_SSTEP_ACK,
 UTASK_SSTEP_TRAPPED,
};




struct uprobe_task {
 enum uprobe_task_state state;

 union {
  struct {
   struct arch_uprobe_task autask;
   unsigned long vaddr;
  };

  struct {
   struct callback_head dup_xol_work;
   unsigned long dup_xol_addr;
  };
 };

 struct uprobe *active_uprobe;
 unsigned long xol_vaddr;

 struct return_instance *return_instances;
 unsigned int depth;
};

struct return_instance {
 struct uprobe *uprobe;
 unsigned long func;
 unsigned long stack;
 unsigned long orig_ret_vaddr;
 bool chained;

 struct return_instance *next;
};

enum rp_check {
 RP_CHECK_CALL,
 RP_CHECK_CHAIN_CALL,
 RP_CHECK_RET,
};

struct xol_area;

struct uprobes_state {
 struct xol_area *xol_area;
};

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) uprobes_init(void);
extern int set_swbp(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern int set_orig_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern bool is_swbp_insn(uprobe_opcode_t *insn);
extern bool is_trap_insn(uprobe_opcode_t *insn);
extern unsigned long uprobe_get_swbp_addr(struct pt_regs *regs);
extern unsigned long uprobe_get_trap_addr(struct pt_regs *regs);
extern int uprobe_write_opcode(struct arch_uprobe *auprobe, struct mm_struct *mm, unsigned long vaddr, uprobe_opcode_t);
extern int uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc);
extern int uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool);
extern void uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_mmap(struct vm_area_struct *vma);
extern void uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end);
extern void uprobe_start_dup_mmap(void);
extern void uprobe_end_dup_mmap(void);
extern void uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm);
extern void uprobe_free_utask(struct task_struct *t);
extern void uprobe_copy_process(struct task_struct *t, unsigned long flags);
extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
extern void uprobe_notify_resume(struct pt_regs *regs);
extern bool uprobe_deny_signal(void);
extern bool arch_uprobe_skip_sstep(struct arch_uprobe *aup, struct pt_regs *regs);
extern void uprobe_clear_state(struct mm_struct *mm);
extern int arch_uprobe_analyze_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr);
extern int arch_uprobe_pre_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern int arch_uprobe_post_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern bool arch_uprobe_xol_was_trapped(struct task_struct *tsk);
extern int arch_uprobe_exception_notify(struct notifier_block *self, unsigned long val, void *data);
extern void arch_uprobe_abort_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern unsigned long arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr, struct pt_regs *regs);
extern bool arch_uretprobe_is_alive(struct return_instance *ret, enum rp_check ctx, struct pt_regs *regs);
extern bool arch_uprobe_ignore(struct arch_uprobe *aup, struct pt_regs *regs);
extern void arch_uprobe_copy_ixol(struct page *page, unsigned long vaddr,
      void *src, unsigned long len);
# 15 "./include/linux/mm_types.h" 2
# 28 "./include/linux/mm_types.h"
struct address_space;
struct mem_cgroup;
# 70 "./include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   unsigned long pp_magic;
   struct page_pool *pp;
   unsigned long _pp_mapping_pad;
   unsigned long dma_addr;
   union {




    unsigned long dma_addr_upper;




    atomic_long_t pp_frag_count;
   };
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;

     int pages;
     int pobjects;




    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
   unsigned int compound_nr;
  };
  struct {
   unsigned long _compound_pad_1;
   atomic_t hpage_pinned_refcount;

   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };




   spinlock_t ptl;


  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
# 192 "./include/linux/mm_types.h"
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;


 unsigned long memcg_data;
# 242 "./include/linux/mm_types.h"
} ;
# 268 "./include/linux/mm_types.h"
struct folio {

 union {
  struct {

   unsigned long flags;
   struct list_head lru;
   struct address_space *mapping;
   unsigned long index;
   void *private;
   atomic_t _mapcount;
   atomic_t _refcount;

   unsigned long memcg_data;


  };
  struct page page;
 };
};

_Static_assert(sizeof(struct page) == sizeof(struct folio), "sizeof(struct page) == sizeof(struct folio)");


_Static_assert(__builtin_offsetof(struct page, flags) == __builtin_offsetof(struct folio, flags), "offsetof(struct page, flags) == offsetof(struct folio, flags)");
_Static_assert(__builtin_offsetof(struct page, lru) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, lru) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, compound_head) == __builtin_offsetof(struct folio, lru), "offsetof(struct page, compound_head) == offsetof(struct folio, lru)");
_Static_assert(__builtin_offsetof(struct page, index) == __builtin_offsetof(struct folio, index), "offsetof(struct page, index) == offsetof(struct folio, index)");
_Static_assert(__builtin_offsetof(struct page, private) == __builtin_offsetof(struct folio, private), "offsetof(struct page, private) == offsetof(struct folio, private)");
_Static_assert(__builtin_offsetof(struct page, _mapcount) == __builtin_offsetof(struct folio, _mapcount), "offsetof(struct page, _mapcount) == offsetof(struct folio, _mapcount)");
_Static_assert(__builtin_offsetof(struct page, _refcount) == __builtin_offsetof(struct folio, _refcount), "offsetof(struct page, _refcount) == offsetof(struct folio, _refcount)");

_Static_assert(__builtin_offsetof(struct page, memcg_data) == __builtin_offsetof(struct folio, memcg_data), "offsetof(struct page, memcg_data) == offsetof(struct folio, memcg_data)");



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *folio_mapcount_ptr(struct folio *folio)
{
 struct page *tail = &folio->page + 1;
 return &tail->compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_pincount_ptr(struct page *page)
{
 return &page[2].hpage_pinned_refcount;
}
# 336 "./include/linux/mm_types.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_private(struct page *page, unsigned long private)
{
 page->private = private;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *folio_get_private(struct folio *folio)
{
 return folio->private;
}

struct page_frag_cache {
 void * va;




 __u32 offset;




 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 389 "./include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 398 "./include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;





 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;


 atomic_long_t swap_readahead_info;





 struct mempolicy *vm_policy;

 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 509 "./include/linux/mm_types.h"
  atomic_t membarrier_state;
# 521 "./include/linux/mm_types.h"
  atomic_t mm_users;
# 530 "./include/linux/mm_types.h"
  atomic_t mm_count;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;
# 552 "./include/linux/mm_types.h"
  struct rw_semaphore mmap_lock;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;






  seqcount_t write_protect_seq;

  spinlock_t arg_lock;

  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(14 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;

  struct core_state *core_state;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 617 "./include/linux/mm_types.h"
  struct task_struct *owner;

  struct user_namespace *user_ns;


  struct file *exe_file;

  struct mmu_notifier_subscriptions *notifier_subscriptions;
# 635 "./include/linux/mm_types.h"
  unsigned long numa_next_scan;


  unsigned long numa_scan_offset;


  int numa_scan_seq;






  atomic_t tlb_flush_pending;




  struct uprobes_state uprobes_state;

  atomic_long_t hugetlb_usage;

  struct work_struct async_put_work;


  u32 pasid;

 } ;





 unsigned long cpu_bitmap[];
};

extern struct mm_struct init_mm;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_init_cpumask(struct mm_struct *mm)
{
 unsigned long cpu_bitmap = (unsigned long)mm;

 cpu_bitmap += __builtin_offsetof(struct mm_struct, cpu_bitmap);
 cpumask_clear((struct cpumask *)cpu_bitmap);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_gather_mmu_fullmm(struct mmu_gather *tlb, struct mm_struct *mm);
extern void tlb_finish_mmu(struct mmu_gather *tlb);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_set(&mm->tlb_flush_pending, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 737 "./include/linux/mm_types.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 749 "./include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 762 "./include/linux/mm_types.h"
 return atomic_read(&mm->tlb_flush_pending);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return atomic_read(&mm->tlb_flush_pending) > 1;
}

struct vm_fault;






typedef unsigned int vm_fault_t;
# 811 "./include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 851 "./include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 22 "./include/linux/mmzone.h" 2
# 1 "./include/linux/page-flags.h" 1
# 103 "./include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,
# 139 "./include/linux/page-flags.h"
 PG_arch_2,




 __NR_PAGEFLAGS,

 PG_readahead = PG_reclaim,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,

 PG_xen_remapped = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_workingset,


 PG_isolated = PG_reclaim,


 PG_reported = PG_uptodate,
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _compound_head(const struct page *page)
{
 unsigned long head = ({ do { extern void __compiletime_assert_134(void) ; if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_134(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); });

 if (__builtin_expect(!!(head & 1), 0))
  return head - 1;
 return (unsigned long)page;
}
# 226 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTail(struct page *page)
{
 return ({ do { extern void __compiletime_assert_135(void) ; if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_135(); } while (0); (*(const volatile typeof( _Generic((page->compound_head), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (page->compound_head))) *)&(page->compound_head)); }) & 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
{
 return arch_test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PagePoisoned(const struct page *page)
{
 return page->flags == -1l;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_init_poison(struct page *page, size_t size)
{
}


static unsigned long *folio_flags(struct folio *folio, unsigned n)
{
 struct page *page = &folio->page;

 ((void)(sizeof(( long)(PageTail(page)))));
 ((void)(sizeof(( long)(n > 0 && !arch_test_bit(PG_head, &page->flags)))));
 return &page[n].flags;
}
# 408 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_locked(struct folio *folio) { return arch_test_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return arch_test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_locked(struct folio *folio) { arch___set_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { arch___set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_locked(struct folio *folio) { arch___clear_bit(PG_locked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { arch___clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_waiters(struct folio *folio) { return arch_test_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return arch_test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_waiters(struct folio *folio) { set_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_waiters(struct folio *folio) { clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_waiters(struct folio *folio) { arch___clear_bit(PG_waiters, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { arch___clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_error(struct folio *folio) { return arch_test_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageError(struct page *page) { return arch_test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_error(struct folio *folio) { set_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_error(struct folio *folio) { clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_error(struct folio *folio) { return test_and_clear_bit(PG_error, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_referenced(struct folio *folio) { return arch_test_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return arch_test_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_referenced(struct folio *folio) { set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_referenced(struct folio *folio) { clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_referenced(struct folio *folio) { return test_and_clear_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_referenced(struct folio *folio) { arch___set_bit(PG_referenced, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { arch___set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_dirty(struct folio *folio) { return arch_test_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return arch_test_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_dirty(struct folio *folio) { set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_dirty(struct folio *folio) { clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_dirty(struct folio *folio) { return test_and_set_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_dirty(struct folio *folio) { return test_and_clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_dirty(struct folio *folio) { arch___clear_bit(PG_dirty, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { arch___clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_lru(struct folio *folio) { return arch_test_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return arch_test_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_lru(struct folio *folio) { set_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_lru(struct folio *folio) { clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_lru(struct folio *folio) { arch___clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { arch___clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_lru(struct folio *folio) { return test_and_clear_bit(PG_lru, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageLRU(struct page *page) { return test_and_clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_active(struct folio *folio) { return arch_test_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return arch_test_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_active(struct folio *folio) { set_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { set_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_active(struct folio *folio) { clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_active(struct folio *folio) { arch___clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { arch___clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_active(struct folio *folio) { return test_and_clear_bit(PG_active, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_workingset(struct folio *folio) { return arch_test_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return arch_test_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_workingset(struct folio *folio) { set_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_workingset(struct folio *folio) { clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_workingset(struct folio *folio) { return test_and_clear_bit(PG_workingset, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_slab(struct folio *folio) { return arch_test_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return arch_test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_slab(struct folio *folio) { arch___set_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { arch___set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_slab(struct folio *folio) { arch___clear_bit(PG_slab, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { arch___clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_slob_free(struct folio *folio) { return arch_test_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return arch_test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_slob_free(struct folio *folio) { arch___set_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { arch___set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_slob_free(struct folio *folio) { arch___clear_bit(PG_slob_free, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { arch___clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_checked(struct folio *folio) { return arch_test_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return arch_test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_checked(struct folio *folio) { set_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_checked(struct folio *folio) { clear_bit(PG_checked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_pinned(struct folio *folio) { return arch_test_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return arch_test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_pinned(struct folio *folio) { set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_pinned(struct folio *folio) { clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_pinned(struct folio *folio) { return test_and_set_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_pinned(struct folio *folio) { return test_and_clear_bit(PG_pinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_savepinned(struct folio *folio) { return arch_test_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return arch_test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_savepinned(struct folio *folio) { set_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_savepinned(struct folio *folio) { clear_bit(PG_savepinned, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_foreign(struct folio *folio) { return arch_test_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return arch_test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_foreign(struct folio *folio) { set_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_foreign(struct folio *folio) { clear_bit(PG_foreign, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_xen_remapped(struct folio *folio) { return arch_test_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageXenRemapped(struct page *page) { return arch_test_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_xen_remapped(struct folio *folio) { set_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_xen_remapped(struct folio *folio) { clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_xen_remapped(struct folio *folio) { return test_and_clear_bit(PG_xen_remapped, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reserved(struct folio *folio) { return arch_test_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return arch_test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_reserved(struct folio *folio) { set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_reserved(struct folio *folio) { clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_reserved(struct folio *folio) { arch___clear_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { arch___clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_reserved(struct folio *folio) { arch___set_bit(PG_reserved, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { arch___set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_swapbacked(struct folio *folio) { return arch_test_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return arch_test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_swapbacked(struct folio *folio) { set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_swapbacked(struct folio *folio) { clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_swapbacked(struct folio *folio) { arch___clear_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { arch___clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_swapbacked(struct folio *folio) { arch___set_bit(PG_swapbacked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { arch___set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_private(struct folio *folio) { return arch_test_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return arch_test_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_private(struct folio *folio) { set_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_private(struct folio *folio) { clear_bit(PG_private, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_private_2(struct folio *folio) { return arch_test_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return arch_test_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_private_2(struct folio *folio) { set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_private_2(struct folio *folio) { clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_private_2(struct folio *folio) { return test_and_set_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_private_2(struct folio *folio) { return test_and_clear_bit(PG_private_2, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_owner_priv_1(struct folio *folio) { return arch_test_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return arch_test_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_owner_priv_1(struct folio *folio) { set_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_owner_priv_1(struct folio *folio) { clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_owner_priv_1(struct folio *folio) { return test_and_clear_bit(PG_owner_priv_1, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_writeback(struct folio *folio) { return arch_test_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return arch_test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_writeback(struct folio *folio) { return test_and_set_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_writeback(struct folio *folio) { return test_and_clear_bit(PG_writeback, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_mappedtodisk(struct folio *folio) { return arch_test_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return arch_test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_mappedtodisk(struct folio *folio) { set_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_mappedtodisk(struct folio *folio) { clear_bit(PG_mappedtodisk, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reclaim(struct folio *folio) { return arch_test_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return arch_test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_reclaim(struct folio *folio) { set_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_reclaim(struct folio *folio) { clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_reclaim(struct folio *folio) { return test_and_clear_bit(PG_reclaim, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_readahead(struct folio *folio) { return arch_test_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return arch_test_bit(PG_readahead, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_readahead(struct folio *folio) { set_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { set_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_readahead(struct folio *folio) { clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_readahead(struct folio *folio) { return test_and_clear_bit(PG_readahead, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_readahead, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 472 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_highmem(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHighMem(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_highmem(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHighMem(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_swapcache(struct folio *folio)
{
 return folio_test_swapbacked(folio) &&
   arch_test_bit(PG_swapcache, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageSwapCache(struct page *page)
{
 return folio_test_swapcache((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_swapcache(struct folio *folio) { set_bit(PG_swapcache, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_swapcache(struct folio *folio) { clear_bit(PG_swapcache, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_unevictable(struct folio *folio) { return arch_test_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return arch_test_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_unevictable(struct folio *folio) { set_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_unevictable(struct folio *folio) { clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_unevictable(struct folio *folio) { arch___clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { arch___clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_unevictable(struct folio *folio) { return test_and_clear_bit(PG_unevictable, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_mlocked(struct folio *folio) { return arch_test_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return arch_test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_mlocked(struct folio *folio) { set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_mlocked(struct folio *folio) { clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_mlocked(struct folio *folio) { arch___clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { arch___clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_mlocked(struct folio *folio) { return test_and_set_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_mlocked(struct folio *folio) { return test_and_clear_bit(PG_mlocked, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }
# 509 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_uncached(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_uncached(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageUncached(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_uncached(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageUncached(struct page *page) { }
# 518 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_hwpoison(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHWPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_hwpoison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHWPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_hwpoison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHWPoison(struct page *page) { }
# 532 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_skip_kasan_poison(const struct folio *folio) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSkipKASanPoison(const struct page *page) { return 0; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSkipKASanPoison(struct page *page) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_clear_skip_kasan_poison(struct folio *folio) { } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSkipKASanPoison(struct page *page) { }
# 541 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_reported(struct folio *folio) { return arch_test_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReported(struct page *page) { return arch_test_bit(PG_reported, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_reported(struct folio *folio) { arch___set_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReported(struct page *page) { arch___set_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_reported(struct folio *folio) { arch___clear_bit(PG_reported, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReported(struct page *page) { arch___clear_bit(PG_reported, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 565 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_anon(struct folio *folio)
{
 return ((unsigned long)folio->mapping & 0x1) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageAnon(struct page *page)
{
 return folio_test_anon((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 593 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_ksm(struct folio *folio)
{
 return ((unsigned long)folio->mapping & (0x1 | 0x2)) ==
    (0x1 | 0x2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool PageKsm(struct page *page)
{
 return folio_test_ksm((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}




u64 stable_page_flags(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_uptodate(struct folio *folio)
{
 bool ret = arch_test_bit(PG_uptodate, folio_flags(folio, 0));
# 620 "./include/linux/page-flags.h"
 if (ret)
  __asm__ __volatile__ ("lwsync" " " : : :"memory");

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUptodate(struct page *page)
{
 return folio_test_uptodate((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_mark_uptodate(struct folio *folio)
{
 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 arch___set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_mark_uptodate(struct folio *folio)
{





 __asm__ __volatile__ ("lwsync" " " : : :"memory");
 set_bit(PG_uptodate, folio_flags(folio, 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
{
 __folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
{
 folio_mark_uptodate((struct folio *)page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_uptodate(struct folio *folio) { clear_bit(PG_uptodate, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(((typeof(page))_compound_head(page))))))); ((typeof(page))_compound_head(page)); }); })->flags); }

bool __folio_start_writeback(struct folio *folio, bool keep_write);
bool set_page_writeback(struct page *page);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback_keepwrite(struct page *page)
{
 __folio_start_writeback((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_set_page_writeback(struct page *page)
{
 return set_page_writeback(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_head(struct folio *folio) { return arch_test_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return arch_test_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_head(struct folio *folio) { arch___set_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { arch___set_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_head(struct folio *folio) { arch___clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { arch___clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_head(struct folio *folio) { clear_bit(PG_head, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_single(struct folio *folio)
{
 return !folio_test_head(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_multi(struct folio *folio)
{
 return folio_test_head(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
{
 do { do { extern void __compiletime_assert_136(void) ; if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_136(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = ((unsigned long)head + 1); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
{
 do { do { extern void __compiletime_assert_137(void) ; if (!((sizeof(page->compound_head) == sizeof(char) || sizeof(page->compound_head) == sizeof(short) || sizeof(page->compound_head) == sizeof(int) || sizeof(page->compound_head) == sizeof(long)) || sizeof(page->compound_head) == sizeof(long long))) __compiletime_assert_137(); } while (0); do { *(volatile typeof(page->compound_head) *)&(page->compound_head) = (0); } while (0); } while (0);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageCompound(struct page *page)
{
 do { if (__builtin_constant_p(!PageHead(page))) { if (!PageHead(page)) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/page-flags.h"), "i" (704), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/page-flags.h"), "i" (704), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(!PageHead(page)))); } } while (0);
 ClearPageHead(page);
}





int PageHuge(struct page *page);
int PageHeadHuge(struct page *page);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_hugetlb(struct folio *folio)
{
 return PageHeadHuge(&folio->page);
}
# 732 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransHuge(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return PageHead(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_test_transhuge(struct folio *folio)
{
 return folio_test_head(folio);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompound(struct page *page)
{
 return PageCompound(page);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransTail(struct page *page)
{
 return PageTail(page);
}
# 776 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_double_map(struct folio *folio) { return arch_test_bit(PG_double_map, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageDoubleMap(struct page *page) { return arch_test_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_set_double_map(struct folio *folio) { set_bit(PG_double_map, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageDoubleMap(struct page *page) { set_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void folio_clear_double_map(struct folio *folio) { clear_bit(PG_double_map, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageDoubleMap(struct page *page) { clear_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); }
 static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_set_double_map(struct folio *folio) { return test_and_set_bit(PG_double_map, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageDoubleMap(struct page *page) { return test_and_set_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_clear_double_map(struct folio *folio) { return test_and_clear_bit(PG_double_map, folio_flags(folio, 1)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageDoubleMap(struct page *page) { return test_and_clear_bit(PG_double_map, &({ ((void)(sizeof(( long)(!PageHead(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(&page[1]))))); &page[1]; }); })->flags); }
# 792 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_page_hwpoison(struct page *page)
{
 if (PageHWPoison(page))
  return true;
 return PageHuge(page) && PageHWPoison(((typeof(page))_compound_head(page)));
}
# 819 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 844 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000080; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { ((void)(sizeof(( long)(!PageBuddy(page))))); page->page_type |= 0x00000080; }
# 868 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000100; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { ((void)(sizeof(( long)(!PageOffline(page))))); page->page_type |= 0x00000100; }

extern void page_offline_freeze(void);
extern void page_offline_thaw(void);
extern void page_offline_begin(void);
extern void page_offline_end(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000200; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { ((void)(sizeof(( long)(!PageTable(page))))); page->page_type |= 0x00000200; }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000400; } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { ((void)(sizeof(( long)(!PageGuard(page))))); page->page_type |= 0x00000400; }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool folio_test_isolated(struct folio *folio) { return arch_test_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return arch_test_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_set_isolated(struct folio *folio) { arch___set_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { arch___set_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __folio_clear_isolated(struct folio *folio) { arch___clear_bit(PG_isolated, folio_flags(folio, 0)); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { arch___clear_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); };





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 return PageActive(page);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __PageSlabPfmemalloc(struct page *page)
{
 return PageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 SetPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 __ClearPageActive(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 ClearPageActive(page);
}
# 963 "./include/linux/page-flags.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_has_private(struct folio *folio)
{
 return page_has_private(&folio->page);
}
# 23 "./include/linux/mmzone.h" 2
# 1 "./include/linux/local_lock.h" 1




# 1 "./include/linux/local_lock_internal.h" 1
# 11 "./include/linux/local_lock_internal.h"
typedef struct {




} local_lock_t;
# 47 "./include/linux/local_lock_internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_acquire(local_lock_t *l) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_release(local_lock_t *l) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_lock_debug_init(local_lock_t *l) { }
# 6 "./include/linux/local_lock.h" 2
# 24 "./include/linux/mmzone.h" 2
# 42 "./include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 62 "./include/linux/mmzone.h"
 MIGRATE_CMA,


 MIGRATE_ISOLATE,

 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];
# 81 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_migrate_movable(int mt)
{
 return __builtin_expect(!!((mt) == MIGRATE_CMA), 0) || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;






struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *get_page_from_free_area(struct free_area *area,
         int migratetype)
{
 return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ do { extern void __compiletime_assert_138(void) ; if (!((sizeof(head__->next) == sizeof(char) || sizeof(head__->next) == sizeof(short) || sizeof(head__->next) == sizeof(int) || sizeof(head__->next) == sizeof(long)) || sizeof(head__->next) == sizeof(long long))) __compiletime_assert_138(); } while (0); (*(const volatile typeof( _Generic((head__->next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (head__->next))) *)&(head__->next)); }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); do { extern void __compiletime_assert_139(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(pos__)), typeof(((struct page *)0)->lru)) && !__builtin_types_compatible_p(typeof(*(pos__)), typeof(void))))) __compiletime_assert_139(); } while (0); ((struct page *)(__mptr - __builtin_offsetof(struct page, lru))); }) : ((void *)0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool free_area_empty(struct free_area *area, int migratetype)
{
 return list_empty(&area->free_list[migratetype]);
}

struct pglist_data;







struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << (7))));






enum numa_stat_item {
 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,
 NR_VM_NUMA_EVENT_ITEMS
};




enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,

 NR_BOUNCE,



 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE_B,
 NR_SLAB_UNRECLAIMABLE_B,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_ANON = WORKINGSET_REFAULT_BASE,
 WORKINGSET_REFAULT_FILE,
 WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_ANON = WORKINGSET_ACTIVATE_BASE,
 WORKINGSET_ACTIVATE_FILE,
 WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_ANON = WORKINGSET_RESTORE_BASE,
 WORKINGSET_RESTORE_FILE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_FILE_THPS,
 NR_FILE_PMDMAPPED,
 NR_ANON_THPS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_FOLL_PIN_ACQUIRED,
 NR_FOLL_PIN_RELEASED,
 NR_KERNEL_STACK_KB,



 NR_PAGETABLE,

 NR_SWAPCACHE,

 NR_VM_NODE_STAT_ITEMS
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_print_in_thp(enum node_stat_item item)
{
 if (!1)
  return false;

 return item == NR_ANON_THPS ||
        item == NR_FILE_THPS ||
        item == NR_SHMEM_THPS ||
        item == NR_SHMEM_PMDMAPPED ||
        item == NR_FILE_PMDMAPPED;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool vmstat_item_in_bytes(int idx)
{
# 249 "./include/linux/mmzone.h"
 return (idx == NR_SLAB_RECLAIMABLE_B ||
  idx == NR_SLAB_UNRECLAIMABLE_B);
}
# 266 "./include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}



enum lruvec_flags {
 LRUVEC_CONGESTED,


};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];

 spinlock_t lru_lock;





 unsigned long anon_cost;
 unsigned long file_cost;

 atomic_long_t nonresident_age;

 unsigned long refaults[2];

 unsigned long flags;

 struct pglist_data *pgdat;

};
# 327 "./include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};
# 360 "./include/linux/mmzone.h"
struct per_cpu_pages {
 int count;
 int high;
 int batch;
 short free_factor;

 short expire;



 struct list_head lists[(MIGRATE_PCPTYPES * (3 + 1 + 1))];
};

struct per_cpu_zonestat {

 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];
 s8 stat_threshold;







 unsigned long vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 417 "./include/linux/mmzone.h"
 ZONE_NORMAL,
# 478 "./include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};





struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 508 "./include/linux/mmzone.h"
 long lowmem_reserve[2];


 int node;

 struct pglist_data *zone_pgdat;
 struct per_cpu_pages *per_cpu_pageset;
 struct per_cpu_zonestat *per_cpu_zonestats;




 int pageset_high;
 int pageset_batch;
# 532 "./include/linux/mmzone.h"
 unsigned long zone_start_pfn;
# 576 "./include/linux/mmzone.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;

 unsigned long present_early_pages;


 unsigned long cma_pages;


 const char *name;







 unsigned long nr_isolate_pageblock;




 seqlock_t span_seqlock;


 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[9];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
 unsigned long compact_init_migrate_pfn;
 unsigned long compact_init_free_pfn;
# 642 "./include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];
} __attribute__((__aligned__(1 << (7))));

enum pgdat_flags {
 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


 ZONE_RECLAIM_ACTIVE,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_managed_pages(struct zone *zone)
{
 return (unsigned long)atomic_long_read(&zone->managed_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_cma_pages(struct zone *zone)
{

 return zone->cma_pages;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 738 "./include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,





 ZONELIST_NOFALLBACK,

 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 773 "./include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 8) * 2) + 1];
};






extern struct page *mem_map;


struct deferred_split {
 spinlock_t split_queue_lock;
 struct list_head split_queue;
 unsigned long split_queue_len;
};
# 800 "./include/linux/mmzone.h"
typedef struct pglist_data {





 struct zone node_zones[2];






 struct zonelist node_zonelists[MAX_ZONELISTS];

 int nr_zones;
# 835 "./include/linux/mmzone.h"
 spinlock_t node_size_lock;

 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_highest_zoneidx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_highest_zoneidx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;
 bool proactive_compact_trigger;





 unsigned long totalreserve_pages;





 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;



 struct zone_padding _pad1_;
# 884 "./include/linux/mmzone.h"
 struct deferred_split deferred_split_queue;
# 894 "./include/linux/mmzone.h"
 struct lruvec __lruvec;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 917 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

# 1 "./include/linux/memory_hotplug.h" 1




# 1 "./include/linux/mmzone.h" 1
# 6 "./include/linux/memory_hotplug.h" 2




struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct memory_group;
struct resource;
struct vmem_altmap;


struct page *pfn_to_online_page(unsigned long pfn);


enum {

 MMOP_OFFLINE = 0,

 MMOP_ONLINE,

 MMOP_ONLINE_KERNEL,

 MMOP_ONLINE_MOVABLE,
};


typedef int mhp_t;
# 66 "./include/linux/memory_hotplug.h"
struct mhp_params {
 struct vmem_altmap *altmap;
 pgprot_t pgprot;
};

bool mhp_range_allowed(u64 start, u64 size, bool need_mapping);
struct range mhp_get_pluggable_range(bool need_mapping);
# 81 "./include/linux/memory_hotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return read_seqbegin(&zone->span_seqlock);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return read_seqretry(&zone->span_seqlock, iv);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writelock(struct zone *zone)
{
 write_seqlock(&zone->span_seqlock);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writeunlock(struct zone *zone)
{
 write_sequnlock(&zone->span_seqlock);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_seqlock_init(struct zone *zone)
{
 do { do { spinlock_check(&(&zone->span_seqlock)->lock); *(&(&zone->span_seqlock)->lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0); do { seqcount_spinlock_t *____s = (&(&zone->span_seqlock)->seqcount); __seqcount_init(&____s->seqcount, ((void *)0), ((void *)0)); ; } while (0); } while (0);
}
extern int zone_grow_free_lists(struct zone *zone, unsigned long new_nr_pages);
extern int zone_grow_waitqueues(struct zone *zone, unsigned long nr_pages);
extern int add_one_highpage(struct page *page, int pfn, int bad_ppro);
extern void adjust_present_page_count(struct page *page,
          struct memory_group *group,
          long nr_pages);

extern int mhp_init_memmap_on_memory(unsigned long pfn, unsigned long nr_pages,
         struct zone *zone);
extern void mhp_deinit_memmap_on_memory(unsigned long pfn, unsigned long nr_pages);
extern int online_pages(unsigned long pfn, unsigned long nr_pages,
   struct zone *zone, struct memory_group *group);
extern struct zone *test_pages_in_a_zone(unsigned long start_pfn,
      unsigned long end_pfn);
extern void __offline_isolated_pages(unsigned long start_pfn,
         unsigned long end_pfn);

typedef void (*online_page_callback_t)(struct page *page, unsigned int order);

extern void generic_online_page(struct page *page, unsigned int order);
extern int set_online_page_callback(online_page_callback_t callback);
extern int restore_online_page_callback(online_page_callback_t callback);

extern int try_online_node(int nid);

extern int arch_add_memory(int nid, u64 start, u64 size,
      struct mhp_params *params);
extern u64 max_mem_size;

extern int mhp_online_type_from_str(const char *str);


extern int mhp_default_online_type;

extern bool movable_node_enabled;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool movable_node_is_enabled(void)
{
 return movable_node_enabled;
}

extern void arch_remove_memory(u64 start, u64 size, struct vmem_altmap *altmap);
extern void __remove_pages(unsigned long start_pfn, unsigned long nr_pages,
      struct vmem_altmap *altmap);


extern int __add_pages(int nid, unsigned long start_pfn, unsigned long nr_pages,
         struct mhp_params *params);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int add_pages(int nid, unsigned long start_pfn,
  unsigned long nr_pages, struct mhp_params *params)
{
 return __add_pages(nid, start_pfn, nr_pages, params);
}
# 197 "./include/linux/memory_hotplug.h"
extern pg_data_t *node_data[];
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_refresh_nodedata(int nid, pg_data_t *pgdat)
{
 node_data[nid] = pgdat;
}
# 220 "./include/linux/memory_hotplug.h"
void get_online_mems(void);
void put_online_mems(void);

void mem_hotplug_begin(void);
void mem_hotplug_done(void);
# 269 "./include/linux/memory_hotplug.h"
struct range arch_get_mappable_range(void);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void pgdat_resize_lock(struct pglist_data *pgdat, unsigned long *flags)
{
 do { do { ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); *flags = _raw_spin_lock_irqsave(spinlock_check(&pgdat->node_size_lock)); } while (0); } while (0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void pgdat_resize_unlock(struct pglist_data *pgdat, unsigned long *flags)
{
 spin_unlock_irqrestore(&pgdat->node_size_lock, *flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void pgdat_resize_init(struct pglist_data *pgdat)
{
 do { spinlock_check(&pgdat->node_size_lock); *(&pgdat->node_size_lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
}
# 301 "./include/linux/memory_hotplug.h"
extern void try_offline_node(int nid);
extern int offline_pages(unsigned long start_pfn, unsigned long nr_pages,
    struct memory_group *group);
extern int remove_memory(u64 start, u64 size);
extern void __remove_memory(u64 start, u64 size);
extern int offline_and_remove_memory(u64 start, u64 size);
# 325 "./include/linux/memory_hotplug.h"
extern void set_zone_contiguous(struct zone *zone);
extern void clear_zone_contiguous(struct zone *zone);


extern void __attribute__((__section__(".ref.text"))) __attribute__((__noinline__)) free_area_init_core_hotplug(int nid);
extern int __add_memory(int nid, u64 start, u64 size, mhp_t mhp_flags);
extern int add_memory(int nid, u64 start, u64 size, mhp_t mhp_flags);
extern int add_memory_resource(int nid, struct resource *resource,
          mhp_t mhp_flags);
extern int add_memory_driver_managed(int nid, u64 start, u64 size,
         const char *resource_name,
         mhp_t mhp_flags);
extern void move_pfn_range_to_zone(struct zone *zone, unsigned long start_pfn,
       unsigned long nr_pages,
       struct vmem_altmap *altmap, int migratetype);
extern void remove_pfn_range_from_zone(struct zone *zone,
           unsigned long start_pfn,
           unsigned long nr_pages);
extern bool is_memblock_offlined(struct memory_block *mem);
extern int sparse_add_section(int nid, unsigned long pfn,
  unsigned long nr_pages, struct vmem_altmap *altmap);
extern void sparse_remove_section(struct mem_section *ms,
  unsigned long pfn, unsigned long nr_pages,
  unsigned long map_offset, struct vmem_altmap *altmap);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);
extern struct zone *zone_for_pfn_range(int online_type, int nid,
  struct memory_group *group, unsigned long start_pfn,
  unsigned long nr_pages);
extern int arch_create_linear_mapping(int nid, u64 start, u64 size,
          struct mhp_params *params);
void arch_remove_linear_mapping(u64 start, u64 size);
extern bool mhp_supports_memmap_on_memory(unsigned long size);
# 928 "./include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
     enum zone_type highest_zoneidx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int highest_zoneidx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int highest_zoneidx);




enum meminit_context {
 MEMINIT_EARLY,
 MEMINIT_HOTPLUG,
};

extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}


int local_memory_node(int node_id);
# 980 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_zone_device(struct zone *zone)
{
 return false;
}
# 992 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool managed_zone(struct zone *zone)
{
 return zone_managed_pages(zone);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_to_nid(struct zone *zone)
{
 return zone->node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_set_nid(struct zone *zone, int nid)
{
 zone->node = nid;
}
# 1022 "./include/linux/mmzone.h"
extern int movable_zone;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}
# 1041 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;

int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[2];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *,
  size_t *, loff_t *);
int percpu_pagelist_high_fraction_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
int numa_zonelist_order_handler(struct ctl_table *, int,
  void *, size_t *, loff_t *);
extern int percpu_pagelist_high_fraction;
extern char numa_zonelist_order[];
# 1083 "./include/linux/mmzone.h"
# 1 "./arch/powerpc/include/asm/mmzone.h" 1
# 23 "./arch/powerpc/include/asm/mmzone.h"
extern struct pglist_data *node_data[];
# 33 "./arch/powerpc/include/asm/mmzone.h"
extern int numa_cpu_lookup_table[];
extern cpumask_var_t node_to_cpumask_map[];

extern unsigned long max_pfn;
u64 memory_hotplug_max(void);
# 50 "./arch/powerpc/include/asm/mmzone.h"
extern int create_section_mapping(unsigned long start, unsigned long end,
      int nid, pgprot_t prot);
# 1084 "./include/linux/mmzone.h" 2



extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 1119 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_node_idx(struct zoneref *zoneref)
{
 return zone_to_nid(zoneref->zone);
}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1153 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1179 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1252 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pfn_to_section_nr(unsigned long pfn)
{
 return pfn >> (24 - 16);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long section_nr_to_pfn(unsigned long sec)
{
 return sec << (24 - 16);
}
# 1280 "./include/linux/mmzone.h"
struct mem_section_usage {

 unsigned long subsection_map[((((1UL << (24 - 21))) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];


 unsigned long pageblock_flags[0];
};

void subsection_map_init(unsigned long pfn, unsigned long nr_pages);

struct page;
struct page_ext;
struct mem_section {
# 1305 "./include/linux/mmzone.h"
 unsigned long section_mem_map;

 struct mem_section_usage *usage;
# 1320 "./include/linux/mmzone.h"
};
# 1333 "./include/linux/mmzone.h"
extern struct mem_section **mem_section;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *section_to_usemap(struct mem_section *ms)
{
 return ms->usage->pageblock_flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_section *__nr_to_section(unsigned long nr)
{

 if (!mem_section)
  return ((void *)0);

 if (!mem_section[((nr) / ((1UL << 16) / sizeof (struct mem_section)))])
  return ((void *)0);
 return &mem_section[((nr) / ((1UL << 16) / sizeof (struct mem_section)))][nr & (((1UL << 16) / sizeof (struct mem_section)) - 1)];
}
extern size_t mem_section_usage_size(void);
# 1377 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<5)-1));
 return (struct page *)map;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int early_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<3)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_device_section(struct mem_section *section)
{
 unsigned long flags = (1UL<<2) | (1UL<<4);

 return section && ((section->section_mem_map & flags) == flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_section_nr(unsigned long nr)
{
 return online_section(__nr_to_section(nr));
}


void online_mem_sections(unsigned long start_pfn, unsigned long end_pfn);
void offline_mem_sections(unsigned long start_pfn, unsigned long end_pfn);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(pfn_to_section_nr(pfn));
}

extern unsigned long __highest_present_section_nr;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int subsection_map_index(unsigned long pfn)
{
 return (pfn & ~((~((1UL << (24 - 16))-1)))) / (1UL << (21 - 16));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
{
 int idx = subsection_map_index(pfn);

 return arch_test_bit(idx, ms->usage->subsection_map);
}
# 1469 "./include/linux/mmzone.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_valid(unsigned long pfn)
{
 struct mem_section *ms;







 if (((unsigned long)((((phys_addr_t)(pfn) << 16)) >> 16)) != pfn)
  return 0;

 if (pfn_to_section_nr(pfn) >= (1UL << (51 - 24)))
  return 0;
 ms = __nr_to_section(pfn_to_section_nr(pfn));
 if (!valid_section(ms))
  return 0;




 return early_section(ms) || pfn_section_valid(ms, pfn);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_in_present_section(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (51 - 24)))
  return 0;
 return present_section(__nr_to_section(pfn_to_section_nr(pfn)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long next_present_section_nr(unsigned long section_nr)
{
 while (++section_nr <= __highest_present_section_nr) {
  if (present_section_nr(section_nr))
   return section_nr;
 }

 return -1;
}
# 1527 "./include/linux/mmzone.h"
void sparse_init(void);
# 7 "./include/linux/gfp.h" 2


# 1 "./include/linux/topology.h" 1
# 30 "./include/linux/topology.h"
# 1 "./include/linux/arch_topology.h" 1
# 11 "./include/linux/arch_topology.h"
void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_scale)))) *)((&(cpu_scale)))); (typeof((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) arch_freq_scale;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(arch_freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale)))); (typeof((typeof(*((&(arch_freq_scale)))) *)((&(arch_freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_freq_scale(const struct cpumask *cpus, unsigned long cur_freq,
        unsigned long max_freq);
bool topology_scale_freq_invariant(void);

enum scale_freq_source {
 SCALE_FREQ_SOURCE_CPUFREQ = 0,
 SCALE_FREQ_SOURCE_ARCH,
 SCALE_FREQ_SOURCE_CPPC,
};

struct scale_freq_data {
 enum scale_freq_source source;
 void (*set_freq_scale)(void);
};

void topology_scale_freq_tick(void);
void topology_set_scale_freq_source(struct scale_freq_data *data, const struct cpumask *cpus);
void topology_clear_scale_freq_source(enum scale_freq_source source, const struct cpumask *cpus);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) thermal_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long topology_get_thermal_pressure(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(thermal_pressure)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure)))); (typeof((typeof(*((&(thermal_pressure)))) *)((&(thermal_pressure))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_thermal_pressure(const struct cpumask *cpus,
       unsigned long th_pressure);

struct cpu_topology {
 int thread_id;
 int core_id;
 int package_id;
 int llc_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
 cpumask_t llc_sibling;
};
# 31 "./include/linux/topology.h" 2





# 1 "./arch/powerpc/include/asm/topology.h" 1






struct device;
struct device_node;
struct drmem_lmb;
# 25 "./arch/powerpc/include/asm/topology.h"
struct pci_bus;

extern int pcibus_to_node(struct pci_bus *bus);
# 39 "./arch/powerpc/include/asm/topology.h"
int cpu_relative_distance(__be32 *cpu1_assoc, __be32 *cpu2_assoc);
extern int __node_distance(int, int);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) dump_numa_cpu_topology(void);

extern int sysfs_add_device_to_node(struct device *dev, int nid);
extern void sysfs_remove_device_from_node(struct device *dev, int nid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_numa_cpu_lookup_table(unsigned int cpu, int node)
{
 numa_cpu_lookup_table[cpu] = node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int early_cpu_to_node(int cpu)
{
 int nid;

 nid = numa_cpu_lookup_table[cpu];





 return (nid < 0) ? 0 : nid;
}

int of_drconf_to_nid_single(struct drmem_lmb *lmb);
void update_numa_distance(struct device_node *node);

extern void map_cpu_to_node(int cpu, int node);

extern void unmap_cpu_from_node(unsigned long cpu);
# 114 "./arch/powerpc/include/asm/topology.h"
extern int find_and_online_cpu_nid(int cpu);
extern int cpu_to_coregroup_id(int cpu);
# 133 "./arch/powerpc/include/asm/topology.h"
# 1 "./include/asm-generic/topology.h" 1
# 134 "./arch/powerpc/include/asm/topology.h" 2
# 37 "./include/linux/topology.h" 2
# 46 "./include/linux/topology.h"
int arch_update_cpu_topology(void);
# 76 "./include/linux/topology.h"
extern int __attribute__((__section__(".data..read_mostly"))) node_reclaim_distance;






extern __attribute__((section(".data..percpu" ""))) __typeof__(int) numa_node;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_node_id(void)
{
 return ({ typeof(numa_node) pscr_ret__; do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_to_node(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(numa_node)))) *)((&(numa_node)))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_numa_node(int node)
{
 do { do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpu_numa_node(int cpu, int node)
{
 (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(numa_node)))) *)((&(numa_node)))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })) = node;
}
# 133 "./include/linux/topology.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) _numa_mem_;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_numa_mem(int node)
{
 do { do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(_numa_mem_)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }) = node; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_mem_id(void)
{
 return ({ typeof(_numa_mem_) pscr_ret__; do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(_numa_mem_)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_))); (typeof((typeof(*(&(_numa_mem_))) *)(&(_numa_mem_)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_to_mem(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(_numa_mem_)))) *)((&(_numa_mem_)))); (typeof((typeof(*((&(_numa_mem_)))) *)((&(_numa_mem_))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpu_numa_mem(int cpu, int node)
{
 (*({ do { const void *__vpp_verify = (typeof((&(_numa_mem_)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(_numa_mem_)))) *)((&(_numa_mem_)))); (typeof((typeof(*((&(_numa_mem_)))) *)((&(_numa_mem_))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })) = node;
}
# 209 "./include/linux/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return ((cpu_to_node(cpu)) == -1 ? ((struct cpumask *)(1 ? (cpu_all_bits) : (void *)sizeof(__check_is_bitmap(cpu_all_bits)))) : node_to_cpumask_map[cpu_to_node(cpu)]);
}
# 10 "./include/linux/gfp.h" 2
# 25 "./include/linux/gfp.h"
struct vm_area_struct;
# 343 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { extern void __compiletime_assert_140(void) ; if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_140(); } while (0);
 do { extern void __compiletime_assert_141(void) ; if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_141(); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 380 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400u) | (( gfp_t)0x20000u))) ==
  (( gfp_t)0x400u);
}
# 476 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 1) | (ZONE_NORMAL << 0x01u * 1) | (ZONE_NORMAL << 0x02u * 1) | (ZONE_NORMAL << 0x04u * 1) | (ZONE_NORMAL << 0x08u * 1) | (ZONE_NORMAL << (0x08u | 0x01u) * 1) | (ZONE_MOVABLE << (0x08u | 0x02u) * 1) | (ZONE_NORMAL << (0x08u | 0x04u) * 1)) >> (bit * 1)) &
      ((1 << 1) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 494 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_zonelist(gfp_t flags)
{

 if (__builtin_expect(!!(flags & (( gfp_t)0x200000u)), 0))
  return ZONELIST_NOFALLBACK;

 return ZONELIST_FALLBACK;
}
# 512 "./include/linux/gfp.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (node_data[nid])->node_zonelists + gfp_zonelist(flags);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_alloc_page(struct page *page, int order) { }


struct page *__alloc_pages(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);
struct folio *__folio_alloc(gfp_t gfp, unsigned int order, int preferred_nid,
  nodemask_t *nodemask);

unsigned long __alloc_pages_bulk(gfp_t gfp, int preferred_nid,
    nodemask_t *nodemask, int nr_pages,
    struct list_head *page_list,
    struct page **page_array);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_list(gfp_t gfp, unsigned long nr_pages, struct list_head *list)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, list, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array(gfp_t gfp, unsigned long nr_pages, struct page **page_array)
{
 return __alloc_pages_bulk(gfp, numa_mem_id(), ((void *)0), nr_pages, ((void *)0), page_array);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
alloc_pages_bulk_array_node(gfp_t gfp, int nid, unsigned long nr_pages, struct page **page_array)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_bulk(gfp, nid, ((void *)0), nr_pages, ((void *)0), page_array);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 8)))));
 ((void)(sizeof(( long)((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, nid, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct folio *__folio_alloc_node(gfp_t gfp, unsigned int order, int nid)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 8)))));
 ((void)(sizeof(( long)((gfp & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __folio_alloc(gfp, order, nid, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}


struct page *alloc_pages(gfp_t gfp, unsigned int order);
struct folio *folio_alloc(gfp_t gfp, unsigned order);
extern struct page *alloc_pages_vma(gfp_t gfp_mask, int order,
   struct vm_area_struct *vma, unsigned long addr,
   int node, bool hugepage);
# 618 "./include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

__attribute__((__alloc_size__(1)))
void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
__attribute__((__alloc_size__(1)))
void * __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc_align(struct page_frag_cache *nc,
       unsigned int fragsz, gfp_t gfp_mask,
       unsigned int align_mask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask)
{
 return page_frag_alloc_align(nc, fragsz, gfp_mask, ~0u);
}

extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 667 "./include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);

extern gfp_t vma_thp_gfp_mask(struct vm_area_struct *vma);


extern bool pm_suspended_storage(void);
# 688 "./include/linux/gfp.h"
extern int alloc_contig_range(unsigned long start, unsigned long end,
         unsigned migratetype, gfp_t gfp_mask);
extern struct page *alloc_contig_pages(unsigned long nr_pages, gfp_t gfp_mask,
           int nid, nodemask_t *nodemask);

void free_contig_range(unsigned long pfn, unsigned long nr_pages);



extern void init_cma_reserved_pageblock(struct page *page);
# 11 "./include/linux/mm.h" 2







# 1 "./include/linux/mmap_lock.h" 1







# 1 "./include/linux/tracepoint-defs.h" 1
# 12 "./include/linux/tracepoint-defs.h"
# 1 "./include/linux/static_key.h" 1
# 13 "./include/linux/tracepoint-defs.h" 2

struct static_call_key;

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 struct static_call_key *static_call_key;
 void *static_call_tramp;
 void *iterator;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};




typedef struct tracepoint * const tracepoint_ptr_t;


struct bpf_raw_event_map {
 struct tracepoint *tp;
 void *bpf_func;
 u32 num_args;
 u32 writable_size;
} __attribute__((__aligned__(32)));
# 9 "./include/linux/mmap_lock.h" 2





extern struct tracepoint __tracepoint_mmap_lock_start_locking;
extern struct tracepoint __tracepoint_mmap_lock_acquire_returned;
extern struct tracepoint __tracepoint_mmap_lock_released;



void __mmap_lock_do_trace_start_locking(struct mm_struct *mm, bool write);
void __mmap_lock_do_trace_acquire_returned(struct mm_struct *mm, bool write,
        bool success);
void __mmap_lock_do_trace_released(struct mm_struct *mm, bool write);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_start_locking(struct mm_struct *mm,
         bool write)
{
 if (static_key_false(&(__tracepoint_mmap_lock_start_locking).key))
  __mmap_lock_do_trace_start_locking(mm, write);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_acquire_returned(struct mm_struct *mm,
            bool write, bool success)
{
 if (static_key_false(&(__tracepoint_mmap_lock_acquire_returned).key))
  __mmap_lock_do_trace_acquire_returned(mm, write, success);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mmap_lock_trace_released(struct mm_struct *mm, bool write)
{
 if (static_key_false(&(__tracepoint_mmap_lock_released).key))
  __mmap_lock_do_trace_released(mm, write);
}
# 63 "./include/linux/mmap_lock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_init_lock(struct mm_struct *mm)
{
 do { static struct lock_class_key __key; __init_rwsem((&mm->mmap_lock), "&mm->mmap_lock", &__key); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_lock_nested(struct mm_struct *mm, int subclass)
{
 __mmap_lock_trace_start_locking(mm, true);
 down_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_write_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, true, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmap_write_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, true);
 ret = down_write_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, true, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_unlock(struct mm_struct *mm)
{
 up_write(&mm->mmap_lock);
 __mmap_lock_trace_released(mm, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_write_downgrade(struct mm_struct *mm)
{
 downgrade_write(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_lock(struct mm_struct *mm)
{
 __mmap_lock_trace_start_locking(mm, false);
 down_read(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, true);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_read_lock_killable(struct mm_struct *mm)
{
 int ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_killable(&mm->mmap_lock);
 __mmap_lock_trace_acquire_returned(mm, false, ret == 0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmap_read_trylock(struct mm_struct *mm)
{
 bool ret;

 __mmap_lock_trace_start_locking(mm, false);
 ret = down_read_trylock(&mm->mmap_lock) != 0;
 __mmap_lock_trace_acquire_returned(mm, false, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_unlock(struct mm_struct *mm)
{
 up_read(&mm->mmap_lock);
 __mmap_lock_trace_released(mm, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmap_read_trylock_non_owner(struct mm_struct *mm)
{
 if (mmap_read_trylock(mm)) {
  do { } while (0);
  return true;
 }
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_read_unlock_non_owner(struct mm_struct *mm)
{
 up_read(&mm->mmap_lock);
 __mmap_lock_trace_released(mm, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_assert_locked(struct mm_struct *mm)
{
 do { (void)(&mm->mmap_lock); } while (0);
 ((void)(sizeof(( long)(!rwsem_is_locked(&mm->mmap_lock)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmap_assert_write_locked(struct mm_struct *mm)
{
 do { (void)(&mm->mmap_lock); } while (0);
 ((void)(sizeof(( long)(!rwsem_is_locked(&mm->mmap_lock)))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmap_lock_is_contended(struct mm_struct *mm)
{
 return rwsem_is_contended(&mm->mmap_lock);
}
# 19 "./include/linux/mm.h" 2
# 1 "./include/linux/range.h" 1





struct range {
 u64 start;
 u64 end;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 range_len(const struct range *range)
{
 return range->end - range->start + 1;
}

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 20 "./include/linux/mm.h" 2

# 1 "./include/linux/percpu-refcount.h" 1
# 59 "./include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {







 PERCPU_REF_INIT_ATOMIC = 1 << 0,






 PERCPU_REF_INIT_DEAD = 1 << 1,




 PERCPU_REF_ALLOW_REINIT = 1 << 2,
};

struct percpu_ref_data {
 atomic_long_t count;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 bool allow_reinit:1;
 struct callback_head rcu;
 struct percpu_ref *ref;
};

struct percpu_ref {




 unsigned long percpu_count_ptr;







 struct percpu_ref_data *data;
};

int __attribute__((__warn_unused_result__)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_resurrect(struct percpu_ref *ref);
void percpu_ref_reinit(struct percpu_ref *ref);
bool percpu_ref_is_zero(struct percpu_ref *ref);
# 147 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, ((void *)0));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 174 "./include/linux/percpu-refcount.h"
 percpu_ptr = ({ do { extern void __compiletime_assert_142(void) ; if (!((sizeof(ref->percpu_count_ptr) == sizeof(char) || sizeof(ref->percpu_count_ptr) == sizeof(short) || sizeof(ref->percpu_count_ptr) == sizeof(int) || sizeof(ref->percpu_count_ptr) == sizeof(long)) || sizeof(ref->percpu_count_ptr) == sizeof(long long))) __compiletime_assert_142(); } while (0); (*(const volatile typeof( _Generic((ref->percpu_count_ptr), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ref->percpu_count_ptr))) *)&(ref->percpu_count_ptr)); });







 if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 198 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->data->count);

 rcu_read_unlock();
}
# 220 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 235 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_many(struct percpu_ref *ref,
       unsigned long nr)
{
 unsigned long *percpu_count;
 bool ret;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += nr; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = atomic_long_add_unless(&ref->data->count, nr, 0);
 }

 rcu_read_unlock();

 return ret;
}
# 264 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget(struct percpu_ref *ref)
{
 return percpu_ref_tryget_many(ref, 1);
}
# 284 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret = false;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = atomic_long_inc_not_zero(&ref->data->count);
 }

 rcu_read_unlock();

 return ret;
}
# 313 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*percpu_count))(nr); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->data->count)), 0))
  ref->data->release(ref);

 rcu_read_unlock();
}
# 336 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 350 "./include/linux/percpu-refcount.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 22 "./include/linux/mm.h" 2
# 1 "./include/linux/bit_spinlock.h" 1
# 16 "./include/linux/bit_spinlock.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 __asm__ __volatile__("": : :"memory");

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("": : :"memory");
  do {
   do { asm volatile("or 1, 1, 1	# low priority"); asm volatile("or 2, 2, 2	# medium priority"); __asm__ __volatile__("": : :"memory"); } while (0);
  } while (arch_test_bit(bitnum, addr));
  __asm__ __volatile__("": : :"memory");
 }

 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("": : :"memory");
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("": : :"memory");
 (void)0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 __clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("": : :"memory");
 (void)0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return arch_test_bit(bitnum, addr);





}
# 23 "./include/linux/mm.h" 2
# 1 "./include/linux/shrinker.h" 1
# 12 "./include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 60 "./include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;


 int id;


 atomic_long_t *nr_deferred;
};
# 91 "./include/linux/shrinker.h"
extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
# 24 "./include/linux/mm.h" 2

# 1 "./include/linux/page_ext.h" 1





# 1 "./include/linux/stacktrace.h" 1







struct task_struct;
struct pt_regs;


void stack_trace_print(const unsigned long *trace, unsigned int nr_entries,
         int spaces);
int stack_trace_snprint(char *buf, size_t size, const unsigned long *entries,
   unsigned int nr_entries, int spaces);
unsigned int stack_trace_save(unsigned long *store, unsigned int size,
         unsigned int skipnr);
unsigned int stack_trace_save_tsk(struct task_struct *task,
      unsigned long *store, unsigned int size,
      unsigned int skipnr);
unsigned int stack_trace_save_regs(struct pt_regs *regs, unsigned long *store,
       unsigned int size, unsigned int skipnr);
unsigned int stack_trace_save_user(unsigned long *store, unsigned int size);
# 36 "./include/linux/stacktrace.h"
typedef bool (*stack_trace_consume_fn)(void *cookie, unsigned long addr);
# 53 "./include/linux/stacktrace.h"
void arch_stack_walk(stack_trace_consume_fn consume_entry, void *cookie,
       struct task_struct *task, struct pt_regs *regs);
# 73 "./include/linux/stacktrace.h"
int arch_stack_walk_reliable(stack_trace_consume_fn consume_entry, void *cookie,
        struct task_struct *task);

void arch_stack_walk_user(stack_trace_consume_fn consume_entry, void *cookie,
     const struct pt_regs *regs);
# 98 "./include/linux/stacktrace.h"
int stack_trace_save_tsk_reliable(struct task_struct *tsk, unsigned long *store,
      unsigned int size);
# 7 "./include/linux/page_ext.h" 2
# 1 "./include/linux/stackdepot.h" 1
# 14 "./include/linux/stackdepot.h"
typedef u32 depot_stack_handle_t;

depot_stack_handle_t stack_depot_save(unsigned long *entries,
          unsigned int nr_entries, gfp_t gfp_flags);

unsigned int stack_depot_fetch(depot_stack_handle_t handle,
          unsigned long **entries);

unsigned int filter_irq_stacks(unsigned long *entries, unsigned int nr_entries);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_depot_init(void)
{
 return 0;
}
# 8 "./include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 size_t offset;
 size_t size;
 bool (*need)(void);
 void (*init)(void);
};
# 68 "./include/linux/page_ext.h"
struct page_ext;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_page_ext_init(struct pglist_data *pgdat)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page_ext *lookup_page_ext(const struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem_late(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem(void)
{
}
# 26 "./include/linux/mm.h" 2


# 1 "./include/linux/page_ref.h" 1
# 10 "./include/linux/page_ref.h"
extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 41 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_count(const struct page *page)
{
 return atomic_read(&page->_refcount);
}
# 87 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_count(const struct folio *folio)
{
 return page_ref_count(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_count(const struct page *page)
{
 return folio_ref_count((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_count(struct page *page, int v)
{
 atomic_set(&page->_refcount, v);
 if (false)
  __page_ref_set(page, v);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_set_count(struct folio *folio, int v)
{
 set_page_count(&folio->page, v);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_add(struct folio *folio, int nr)
{
 page_ref_add(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_sub(struct folio *folio, int nr)
{
 page_ref_sub(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_return(struct page *page, int nr)
{
 int ret = atomic_sub_return(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_sub_return(struct folio *folio, int nr)
{
 return page_ref_sub_return(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_inc(struct page *page)
{
 atomic_inc(&page->_refcount);
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_inc(struct folio *folio)
{
 page_ref_inc(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_dec(struct page *page)
{
 atomic_dec(&page->_refcount);
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_dec(struct folio *folio)
{
 page_ref_dec(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = atomic_sub_and_test(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_sub_and_test(struct folio *folio, int nr)
{
 return page_ref_sub_and_test(&folio->page, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_inc_return(struct page *page)
{
 int ret = atomic_inc_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, 1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_inc_return(struct folio *folio)
{
 return page_ref_inc_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_and_test(struct page *page)
{
 int ret = atomic_dec_and_test(&page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_dec_and_test(struct folio *folio)
{
 return page_ref_dec_and_test(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_return(struct page *page)
{
 int ret = atomic_dec_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_dec_return(struct folio *folio)
{
 return page_ref_dec_return(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_ref_add_unless(struct page *page, int nr, int u)
{
 bool ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_ref_add_unless(struct folio *folio, int nr, int u)
{
 return page_ref_add_unless(&folio->page, nr, u);
}
# 261 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_try_get(struct folio *folio)
{
 return folio_ref_add_unless(folio, 1, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_ref_try_add_rcu(struct folio *folio, int count)
{
# 280 "./include/linux/page_ref.h"
 if (__builtin_expect(!!(!folio_ref_add_unless(folio, count, 0)), 0)) {

  return false;
 }

 return true;
}
# 311 "./include/linux/page_ref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_try_get_rcu(struct folio *folio)
{
 return folio_ref_try_add_rcu(folio, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(atomic_cmpxchg(&page->_refcount, count, 0) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_ref_freeze(struct folio *folio, int count)
{
 return page_ref_freeze(&folio->page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_unfreeze(struct page *page, int count)
{
 ((void)(sizeof(( long)(page_count(page) != 0))));
 ((void)(sizeof(( long)(count == 0))));

 atomic_set_release(&page->_refcount, count);
 if (false)
  __page_ref_unfreeze(page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_ref_unfreeze(struct folio *folio, int count)
{
 page_ref_unfreeze(&folio->page, count);
}
# 29 "./include/linux/mm.h" 2
# 1 "./include/linux/memremap.h" 1




# 1 "./include/linux/ioport.h" 1
# 21 "./include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 134 "./include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_RESERVED = 7,
 IORES_DESC_SOFT_RESERVED = 8,
};




enum {
 IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
 IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
};
# 185 "./include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return r1->start <= r2->end && r1->end >= r2->start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
resource_intersection(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) > (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x143 = (r1->start); typeof(r2->start) __UNIQUE_ID___y144 = (r2->start); ((__UNIQUE_ID___x143) > (__UNIQUE_ID___y144) ? (__UNIQUE_ID___x143) : (__UNIQUE_ID___y144)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) < (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x145 = (r1->end); typeof(r2->end) __UNIQUE_ID___y146 = (r2->end); ((__UNIQUE_ID___x145) < (__UNIQUE_ID___y146) ? (__UNIQUE_ID___x145) : (__UNIQUE_ID___y146)); }));
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
resource_union(struct resource *r1, struct resource *r2, struct resource *r)
{
 if (!resource_overlaps(r1, r2))
  return false;
 r->start = __builtin_choose_expr(((!!(sizeof((typeof(r1->start) *)1 == (typeof(r2->start) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->start) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->start) * 0l)) : (int *)8))))), ((r1->start) < (r2->start) ? (r1->start) : (r2->start)), ({ typeof(r1->start) __UNIQUE_ID___x147 = (r1->start); typeof(r2->start) __UNIQUE_ID___y148 = (r2->start); ((__UNIQUE_ID___x147) < (__UNIQUE_ID___y148) ? (__UNIQUE_ID___x147) : (__UNIQUE_ID___y148)); }));
 r->end = __builtin_choose_expr(((!!(sizeof((typeof(r1->end) *)1 == (typeof(r2->end) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(r1->end) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(r2->end) * 0l)) : (int *)8))))), ((r1->end) > (r2->end) ? (r1->end) : (r2->end)), ({ typeof(r1->end) __UNIQUE_ID___x149 = (r1->end); typeof(r2->end) __UNIQUE_ID___y150 = (r2->end); ((__UNIQUE_ID___x149) > (__UNIQUE_ID___y150) ? (__UNIQUE_ID___x149) : (__UNIQUE_ID___y150)); }));
 return true;
}
# 269 "./include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);

extern void release_mem_region_adjustable(resource_size_t, resource_size_t);


extern void merge_system_ram_resource(struct resource *res);



struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern bool iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_mem_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(struct resource *, void *));

struct resource *devm_request_free_mem_region(struct device *dev,
  struct resource *base, unsigned long size);
struct resource *request_free_mem_region(struct resource *base,
  unsigned long size, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqresource_disabled(struct resource *res, u32 irq)
{
 res->start = irq;
 res->end = irq;
 res->flags |= 0x00000400 | 0x10000000 | 0x20000000;
}

extern struct address_space *iomem_get_mapping(void);
# 6 "./include/linux/memremap.h" 2


struct resource;
struct device;
# 19 "./include/linux/memremap.h"
struct vmem_altmap {
 unsigned long base_pfn;
 const unsigned long end_pfn;
 const unsigned long reserve;
 unsigned long free;
 unsigned long align;
 unsigned long alloc;
};
# 59 "./include/linux/memremap.h"
enum memory_type {

 MEMORY_DEVICE_PRIVATE = 1,
 MEMORY_DEVICE_FS_DAX,
 MEMORY_DEVICE_GENERIC,
 MEMORY_DEVICE_PCI_P2PDMA,
};

struct dev_pagemap_ops {





 void (*page_free)(struct page *page);




 void (*kill)(struct dev_pagemap *pgmap);




 void (*cleanup)(struct dev_pagemap *pgmap);





 vm_fault_t (*migrate_to_ram)(struct vm_fault *vmf);
};
# 110 "./include/linux/memremap.h"
struct dev_pagemap {
 struct vmem_altmap altmap;
 struct percpu_ref *ref;
 struct percpu_ref internal_ref;
 struct completion done;
 enum memory_type type;
 unsigned int flags;
 const struct dev_pagemap_ops *ops;
 void *owner;
 int nr_range;
 union {
  struct range range;
  struct range ranges[0];
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vmem_altmap *pgmap_altmap(struct dev_pagemap *pgmap)
{
 if (pgmap->flags & (1 << 0))
  return &pgmap->altmap;
 return ((void *)0);
}
# 147 "./include/linux/memremap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pfn_zone_device_reserved(unsigned long pfn)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_memremap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{





 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/memremap.h"), "i" (160), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return ERR_PTR(-6);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void devm_memunmap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dev_pagemap *get_dev_pagemap(unsigned long pfn,
  struct dev_pagemap *pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgmap_pfn_valid(struct dev_pagemap *pgmap, unsigned long pfn)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vmem_altmap_offset(struct vmem_altmap *altmap)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vmem_altmap_free(struct vmem_altmap *altmap,
  unsigned long nr_pfns)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memremap_compat_align(void)
{
 return (1UL << 16);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_dev_pagemap(struct dev_pagemap *pgmap)
{
 if (pgmap)
  percpu_ref_put(pgmap->ref);
}
# 30 "./include/linux/mm.h" 2
# 1 "./include/linux/overflow.h" 1
# 52 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) __must_check_overflow(bool overflow)
{
 return __builtin_expect(!!(overflow), 0);
}
# 263 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 285 "./include/linux/overflow.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (__must_check_overflow(({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })))
  return (~(size_t)0);
 if (__must_check_overflow(({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); })))
  return (~(size_t)0);

 return bytes;
}
# 31 "./include/linux/mm.h" 2


# 1 "./include/linux/pgtable.h" 1





# 1 "./arch/powerpc/include/asm/pgtable.h" 1
# 11 "./arch/powerpc/include/asm/pgtable.h"
# 1 "./arch/powerpc/include/asm/tlbflush.h" 1





# 1 "./arch/powerpc/include/asm/book3s/tlbflush.h" 1





# 1 "./arch/powerpc/include/asm/book3s/64/tlbflush.h" 1







# 1 "./arch/powerpc/include/asm/book3s/64/tlbflush-hash.h" 1
# 14 "./arch/powerpc/include/asm/book3s/64/tlbflush-hash.h"
struct ppc64_tlb_batch {
 int active;
 unsigned long index;
 struct mm_struct *mm;
 real_pte_t pte[192];
 unsigned long vpn[192];
 unsigned int psize;
 int ssize;
};
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct ppc64_tlb_batch) ppc64_tlb_batch;

extern void __flush_tlb_pending(struct ppc64_tlb_batch *batch);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_enter_lazy_mmu_mode(void)
{
 struct ppc64_tlb_batch *batch;

 if (radix_enabled())
  return;
 batch = ({ do { const void *__vpp_verify = (typeof((&ppc64_tlb_batch) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&ppc64_tlb_batch)) *)(&ppc64_tlb_batch)); (typeof((typeof(*(&ppc64_tlb_batch)) *)(&ppc64_tlb_batch))) (__ptr + ((local_paca->data_offset))); }); });
 batch->active = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_leave_lazy_mmu_mode(void)
{
 struct ppc64_tlb_batch *batch;

 if (radix_enabled())
  return;
 batch = ({ do { const void *__vpp_verify = (typeof((&ppc64_tlb_batch) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&ppc64_tlb_batch)) *)(&ppc64_tlb_batch)); (typeof((typeof(*(&ppc64_tlb_batch)) *)(&ppc64_tlb_batch))) (__ptr + ((local_paca->data_offset))); }); });

 if (batch->index)
  __flush_tlb_pending(batch);
 batch->active = 0;
}



extern void hash__tlbiel_all(unsigned int action);

extern void flush_hash_page(unsigned long vpn, real_pte_t pte, int psize,
       int ssize, unsigned long flags);
extern void flush_hash_range(unsigned long number, int local);
extern void flush_hash_hugepage(unsigned long vsid, unsigned long addr,
    pmd_t *pmdp, unsigned int psize, int ssize,
    unsigned long flags);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__local_flush_tlb_mm(struct mm_struct *mm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__flush_tlb_mm(struct mm_struct *mm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__local_flush_all_mm(struct mm_struct *mm)
{






 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/tlbflush-hash.h"), "i" (78), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__flush_all_mm(struct mm_struct *mm)
{






 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/tlbflush-hash.h"), "i" (89), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__local_flush_tlb_page(struct vm_area_struct *vma,
       unsigned long vmaddr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__flush_tlb_page(struct vm_area_struct *vma,
        unsigned long vmaddr)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__flush_tlb_range(struct vm_area_struct *vma,
         unsigned long start, unsigned long end)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash__flush_tlb_kernel_range(unsigned long start,
         unsigned long end)
{
}


struct mmu_gather;
extern void hash__tlb_flush(struct mmu_gather *tlb);

extern void __flush_hash_table_range(unsigned long start, unsigned long end);
extern void flush_tlb_pmd_range(struct mm_struct *mm, pmd_t *pmd,
    unsigned long addr);
# 9 "./arch/powerpc/include/asm/book3s/64/tlbflush.h" 2



enum {
 TLB_INVAL_SCOPE_GLOBAL = 0,
 TLB_INVAL_SCOPE_LPID = 1,
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlbiel_all(void)
{
# 28 "./arch/powerpc/include/asm/book3s/64/tlbflush.h"
 if (early_radix_enabled())
  radix__tlbiel_all(TLB_INVAL_SCOPE_GLOBAL);
 else
  hash__tlbiel_all(TLB_INVAL_SCOPE_GLOBAL);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlbiel_all_lpid(bool radix)
{



 if (radix)
  radix__tlbiel_all(TLB_INVAL_SCOPE_LPID);
 else
  hash__tlbiel_all(TLB_INVAL_SCOPE_LPID);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_pmd_tlb_range(struct vm_area_struct *vma,
           unsigned long start, unsigned long end)
{
 if (radix_enabled())
  return radix__flush_pmd_tlb_range(vma, start, end);
 return hash__flush_tlb_range(vma, start, end);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_hugetlb_tlb_range(struct vm_area_struct *vma,
        unsigned long start,
        unsigned long end)
{
 if (radix_enabled())
  return radix__flush_hugetlb_tlb_range(vma, start, end);
 return hash__flush_tlb_range(vma, start, end);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_range(struct vm_area_struct *vma,
       unsigned long start, unsigned long end)
{
 if (radix_enabled())
  return radix__flush_tlb_range(vma, start, end);
 return hash__flush_tlb_range(vma, start, end);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_kernel_range(unsigned long start,
       unsigned long end)
{
 if (radix_enabled())
  return radix__flush_tlb_kernel_range(start, end);
 return hash__flush_tlb_kernel_range(start, end);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_tlb_mm(struct mm_struct *mm)
{
 if (radix_enabled())
  return radix__local_flush_tlb_mm(mm);
 return hash__local_flush_tlb_mm(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_tlb_page(struct vm_area_struct *vma,
     unsigned long vmaddr)
{
 if (radix_enabled())
  return radix__local_flush_tlb_page(vma, vmaddr);
 return hash__local_flush_tlb_page(vma, vmaddr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_all_mm(struct mm_struct *mm)
{
 if (radix_enabled())
  return radix__local_flush_all_mm(mm);
 return hash__local_flush_all_mm(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tlb_flush(struct mmu_gather *tlb)
{
 if (radix_enabled())
  return radix__tlb_flush(tlb);
 return hash__tlb_flush(tlb);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_mm(struct mm_struct *mm)
{
 if (radix_enabled())
  return radix__flush_tlb_mm(mm);
 return hash__flush_tlb_mm(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_page(struct vm_area_struct *vma,
      unsigned long vmaddr)
{
 if (radix_enabled())
  return radix__flush_tlb_page(vma, vmaddr);
 return hash__flush_tlb_page(vma, vmaddr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_all_mm(struct mm_struct *mm)
{
 if (radix_enabled())
  return radix__flush_all_mm(mm);
 return hash__flush_all_mm(mm);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_fix_spurious_fault(struct vm_area_struct *vma,
      unsigned long address)
{

 if (atomic_read(&vma->vm_mm->context.copros) > 0)
  flush_tlb_page(vma, address);
}

extern bool tlbie_capable;
extern bool tlbie_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cputlb_use_tlbie(void)
{
 return tlbie_enabled;
}
# 7 "./arch/powerpc/include/asm/book3s/tlbflush.h" 2
# 7 "./arch/powerpc/include/asm/tlbflush.h" 2
# 12 "./arch/powerpc/include/asm/pgtable.h" 2

struct mm_struct;




# 1 "./arch/powerpc/include/asm/book3s/pgtable.h" 1
# 15 "./arch/powerpc/include/asm/book3s/pgtable.h"
extern void set_pte_at(struct mm_struct *mm, unsigned long addr, pte_t *ptep,
         pte_t pte);



extern int ptep_set_access_flags(struct vm_area_struct *vma, unsigned long address,
     pte_t *ptep, pte_t entry, int dirty);

struct file;
extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
         unsigned long size, pgprot_t vma_prot);
# 37 "./arch/powerpc/include/asm/book3s/pgtable.h"
void update_mmu_cache(struct vm_area_struct *vma, unsigned long address, pte_t *ptep);
# 19 "./arch/powerpc/include/asm/pgtable.h" 2
# 54 "./arch/powerpc/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pte_pgprot(pte_t pte)
{
 unsigned long pte_flags;

 pte_flags = pte_val(pte) & ~(((1UL << 53) - 1) & ((~((1 << 16) - 1))));
 return ((pgprot_t) { (pte_flags) });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return ((unsigned long)({ do { } while (0); (void *)(unsigned long)((phys_addr_t)(pmd_val(pmd) & ~0xc0000000000000ffUL) | 0xc000000000000000UL); }));
}






extern unsigned long empty_zero_page[];


extern pgd_t swapper_pg_dir[];

extern void paging_init(void);
void poking_init(void);

extern unsigned long ioremap_bot;
# 95 "./arch/powerpc/include/asm/pgtable.h"
unsigned long vmalloc_to_phys(void *vmalloc_addr);

void pgtable_cache_add(unsigned int shift);

pte_t *early_pte_alloc_kernel(pmd_t *pmdp, unsigned long va);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_initmem_nx(void) { }







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pte_frag_get(mm_context_t *ctx)
{
 return ctx->pte_frag;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_frag_set(mm_context_t *ctx, void *p)
{
 ctx->pte_frag = p;
}
# 161 "./arch/powerpc/include/asm/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgtable_t pmd_pgtable(pmd_t pmd)
{
 return (pgtable_t)pmd_page_vaddr(pmd);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_ioremap_addr(const void *x)
{
 unsigned long addr = (unsigned long)x;

 return addr >= ((__kernel_io_start + 0x80000000ul)) && addr < (__kernel_io_end - 0x02000000);
}

struct seq_file;
void arch_report_meminfo(struct seq_file *m);
# 7 "./include/linux/pgtable.h" 2







# 1 "./include/asm-generic/pgtable_uffd.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pte_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pmd_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pmd_t pmd_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pmd_t pmd_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_swp_mkuffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int pte_swp_uffd_wp(pte_t pte)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) pte_t pte_swp_clear_uffd_wp(pte_t pte)
{
 return pte;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_mkuffd_wp(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_swp_uffd_wp(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_clear_uffd_wp(pmd_t pmd)
{
 return pmd;
}
# 15 "./include/linux/pgtable.h" 2
# 61 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pte_index(unsigned long address)
{
 return (address >> 16) & ((1 << __pte_index_size) - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pmd_index(unsigned long address)
{
 return (address >> (16 + __pte_index_size)) & ((1 << __pmd_index_size) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pud_index(unsigned long address)
{
 return (address >> ((16 + __pte_index_size) + __pmd_index_size)) & ((1 << __pud_index_size) - 1);
}
# 88 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
}
# 107 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return pud_pgtable(*pud) + pmd_index(address);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *pud_offset(p4d_t *p4d, unsigned long address)
{
 return p4d_pgtable(*p4d) + pud_index(address);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgd_t *pgd_offset_pgd(pgd_t *pgd, unsigned long address)
{
 return (pgd + (((address) >> (((16 + __pte_index_size) + __pmd_index_size) + __pud_index_size)) & ((1 << __pgd_index_size) - 1)));
};
# 149 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_off(struct mm_struct *mm, unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((mm)->pgd, (va)), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_off_k(unsigned long va)
{
 return pmd_offset(pud_offset(p4d_offset(pgd_offset_pgd((&init_mm)->pgd, ((va))), va), va), va);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *virt_to_kpte(unsigned long vaddr)
{
 pmd_t *pmd = pmd_off_k(vaddr);

 return pmd_none(*pmd) ? ((void *)0) : pte_offset_kernel(pmd, vaddr);
}
# 273 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get(pte_t *ptep)
{
 return ({ do { extern void __compiletime_assert_151(void) ; if (!((sizeof(*ptep) == sizeof(char) || sizeof(*ptep) == sizeof(short) || sizeof(*ptep) == sizeof(int) || sizeof(*ptep) == sizeof(long)) || sizeof(*ptep) == sizeof(long long))) __compiletime_assert_151(); } while (0); (*(const volatile typeof( _Generic((*ptep), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*ptep))) *)&(*ptep)); });
}
# 328 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_lockless(pte_t *ptep)
{
 return ptep_get(ptep);
}
# 346 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t pudp_huge_get_and_clear(struct mm_struct *mm,
         unsigned long address,
         pud_t *pudp)
{
 pud_t pud = *pudp;

 pud_clear(pudp);
 return pud;
}
# 369 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t pudp_huge_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pud_t *pudp,
         int full)
{
 return pudp_huge_get_and_clear(mm, address, pudp);
}
# 399 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_tlb(struct vm_area_struct *vma,
    unsigned long address, pte_t *ptep)
{
}
# 412 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 pte_clear(mm, address, ptep);
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);
# 454 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_sw_mkyoung(pte_t pte)
{
 return pte;
}
# 511 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 do { extern void __compiletime_assert_152(void) ; if (!(!(1))) __compiletime_assert_152(); } while (0);
}
# 550 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t generic_pmdp_establish(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp, pmd_t pmd)
{
 pmd_t old_pmd = *pmdp;
 set_pmd_at(vma->vm_mm, address, pmdp, pmd);
 return old_pmd;
}
# 578 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_unused(pte_t pte)
{
 return 0;
}
# 622 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_same(p4d_t p4d_a, p4d_t p4d_b)
{
 return (pgd_val((p4d_a).pgd)) == (pgd_val((p4d_b).pgd));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_same(pgd_t pgd_a, pgd_t pgd_b)
{
 return pgd_val(pgd_a) == pgd_val(pgd_b);
}
# 682 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_do_swap_page(struct mm_struct *mm,
         struct vm_area_struct *vma,
         unsigned long addr,
         pte_t pte, pte_t oldpte)
{

}
# 700 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_unmap_one(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long addr,
      pte_t orig_pte)
{
 return 0;
}
# 715 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_prepare_to_swap(struct page *page)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_page(int type, unsigned long offset)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_invalidate_area(int type)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_swap_restore(swp_entry_t entry, struct page *page)
{
}
# 790 "./include/linux/pgtable.h"
void pgd_clear_bad(pgd_t *);
# 799 "./include/linux/pgtable.h"
void pud_clear_bad(pud_t *);




void pmd_clear_bad(pmd_t *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none_or_clear_bad(p4d_t *p4d)
{
 if (p4d_none(*p4d))
  return 1;
 if (__builtin_expect(!!(p4d_bad(*p4d)), 0)) {
  do { } while (0);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none_or_clear_bad(pud_t *pud)
{
 if (pud_none(*pud))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if (pmd_none(*pmd))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t __ptep_modify_prot_start(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(vma->vm_mm, addr, ptep);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ptep_modify_prot_commit(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(vma->vm_mm, addr, ptep, pte);
}
# 940 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 if (((oldprot).pgprot) == ((pgprot_noncached(oldprot)).pgprot))
  newprot = pgprot_noncached(newprot);
 if (((oldprot).pgprot) == ((pgprot_writecombine(oldprot)).pgprot))
  newprot = pgprot_writecombine(newprot);
 if (((oldprot).pgprot) == ((pgprot_noncached(oldprot)).pgprot))
  newprot = pgprot_noncached(newprot);
 return newprot;
}
# 1087 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn)
{
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_copy(struct vm_area_struct *vma)
{
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn(struct vm_area_struct *vma,
          unsigned long pfn, unsigned long size)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn_moved(struct vm_area_struct *vma)
{
}
# 1152 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}
# 1218 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none_or_trans_huge_or_dev_or_clear_bad(pud_t *pud)
{
 pud_t pudval = ({ do { extern void __compiletime_assert_153(void) ; if (!((sizeof(*pud) == sizeof(char) || sizeof(*pud) == sizeof(short) || sizeof(*pud) == sizeof(int) || sizeof(*pud) == sizeof(long)) || sizeof(*pud) == sizeof(long long))) __compiletime_assert_153(); } while (0); (*(const volatile typeof( _Generic((*pud), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*pud))) *)&(*pud)); });

 if (pud_none(pudval) || pud_trans_huge(pudval) || pud_devmap(pudval))
  return 1;
 if (__builtin_expect(!!(pud_bad(pudval)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_trans_unstable(pud_t *pud)
{




 return 0;

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 1285 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 1303 "./include/linux/pgtable.h"
 __asm__ __volatile__("": : :"memory");
# 1320 "./include/linux/pgtable.h"
 if (pmd_none(pmdval) || pmd_trans_huge(pmdval) ||
  (1 && !pmd_present(pmdval)))
  return 1;
 if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 1342 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_unstable(pmd_t *pmd)
{

 return pmd_none_or_trans_huge_or_clear_bad(pmd);



}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_devmap_trans_unstable(pmd_t *pmd)
{
 return pmd_devmap(*pmd) || pmd_trans_unstable(pmd);
}
# 1390 "./include/linux/pgtable.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_set_huge(p4d_t *p4d, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_clear_huge(p4d_t *p4d)
{
 return 0;
}


int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
int pud_clear_huge(pud_t *pud);
int pmd_clear_huge(pmd_t *pmd);
int p4d_free_pud_page(p4d_t *p4d, unsigned long addr);
int pud_free_pmd_page(pud_t *pud, unsigned long addr);
int pmd_free_pte_page(pmd_t *pmd, unsigned long addr);
# 1465 "./include/linux/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_espfix_bsp(void) { }


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pgtable_cache_init(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_has_pfn_modify_check(void)
{
 return false;
}
# 1526 "./include/linux/pgtable.h"
typedef unsigned int pgtbl_mod_mask;
# 34 "./include/linux/mm.h" 2
# 1 "./include/linux/kasan.h" 1






# 1 "./include/linux/static_key.h" 1
# 8 "./include/linux/kasan.h" 2


struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 70 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_enable_current(void) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_disable_current(void) {}
# 102 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_enabled(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_has_integrated_init(void)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_alloc_pages(struct page *page,
           unsigned int order, gfp_t flags)
{

 do { extern void __compiletime_assert_154(void) ; if (!(!(1))) __compiletime_assert_154(); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kasan_free_pages(struct page *page,
          unsigned int order)
{

 do { extern void __compiletime_assert_155(void) ; if (!(!(1))) __compiletime_assert_155(); } while (0);
}
# 306 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) slab_flags_t kasan_never_merge(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_range(const void *address, size_t size) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_pages(struct page *page, unsigned int order,
          bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_pages(struct page *page, unsigned int order,
     bool init) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          slab_flags_t *flags) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create_kmalloc(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_slab_free(struct kmem_cache *s, void *object, bool init)
{
 return false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_kfree_large(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_slab_free_mempool(void *ptr) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags, bool init)
{
 return object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc_large(const void *ptr, size_t size, gfp_t flags)
{
 return (void *)ptr;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_byte(const void *address)
{
 return true;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_task_stack(struct task_struct *task) {}
# 376 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_record_aux_stack(void *ptr) {}
# 401 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 417 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_sw_tags(void) { }






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags_cpu(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_hw_tags(void) { }
# 439 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_populate_vmalloc(unsigned long start,
     unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_vmalloc(const void *start, unsigned long size)
{ }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_release_vmalloc(unsigned long start,
      unsigned long end,
      unsigned long free_region_start,
      unsigned long free_region_end) {}
# 469 "./include/linux/kasan.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_free_shadow(const struct vm_struct *vm) {}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_non_canonical_hook(unsigned long addr) { }
# 35 "./include/linux/mm.h" 2

struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct user_struct;
struct pt_regs;

extern int sysctl_page_lock_unfairness;

void init_mm_internals(void);
# 54 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_max_mapnr(unsigned long limit) { }


extern atomic_long_t _totalram_pages;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalram_pages(void)
{
 return (unsigned long)atomic_long_read(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_inc(void)
{
 atomic_long_inc(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_dec(void)
{
 atomic_long_dec(&_totalram_pages);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_add(long count)
{
 atomic_long_add(count, &_totalram_pages);
}

extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits __attribute__((__section__(".data..read_mostly")));


extern const int mmap_rnd_compat_bits_min;
extern const int mmap_rnd_compat_bits_max;
extern int mmap_rnd_compat_bits __attribute__((__section__(".data..read_mostly")));
# 149 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mm_zero_struct_page(struct page *page)
{
 unsigned long *_pp = (void *)page;


 do { extern void __compiletime_assert_156(void) ; if (!(!(sizeof(struct page) & 7))) __compiletime_assert_156(); } while (0);
 do { extern void __compiletime_assert_157(void) ; if (!(!(sizeof(struct page) < 56))) __compiletime_assert_157(); } while (0);
 do { extern void __compiletime_assert_158(void) ; if (!(!(sizeof(struct page) > 80))) __compiletime_assert_158(); } while (0);

 switch (sizeof(struct page)) {
 case 80:
  _pp[9] = 0;
  __attribute__((__fallthrough__));
 case 72:
  _pp[8] = 0;
  __attribute__((__fallthrough__));
 case 64:
  _pp[7] = 0;
  __attribute__((__fallthrough__));
 case 56:
  _pp[6] = 0;
  _pp[5] = 0;
  _pp[4] = 0;
  _pp[3] = 0;
  _pp[2] = 0;
  _pp[1] = 0;
  _pp[0] = 0;
 }
}
# 201 "./include/linux/mm.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);
# 231 "./include/linux/mm.h"
void setup_initial_init_mm(void *start_code, void *end_code,
      void *end_data, void *brk);
# 243 "./include/linux/mm.h"
struct vm_area_struct *vm_area_alloc(struct mm_struct *);
struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
void vm_area_free(struct vm_area_struct *);
# 426 "./include/linux/mm.h"
extern pgprot_t protection_map[16];
# 460 "./include/linux/mm.h"
enum fault_flag {
 FAULT_FLAG_WRITE = 1 << 0,
 FAULT_FLAG_MKWRITE = 1 << 1,
 FAULT_FLAG_ALLOW_RETRY = 1 << 2,
 FAULT_FLAG_RETRY_NOWAIT = 1 << 3,
 FAULT_FLAG_KILLABLE = 1 << 4,
 FAULT_FLAG_TRIED = 1 << 5,
 FAULT_FLAG_USER = 1 << 6,
 FAULT_FLAG_REMOTE = 1 << 7,
 FAULT_FLAG_INSTRUCTION = 1 << 8,
 FAULT_FLAG_INTERRUPTIBLE = 1 << 9,
};
# 494 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fault_flag_allow_retry_first(enum fault_flag flags)
{
 return (flags & FAULT_FLAG_ALLOW_RETRY) &&
     (!(flags & FAULT_FLAG_TRIED));
}
# 522 "./include/linux/mm.h"
struct vm_fault {
 const struct {
  struct vm_area_struct *vma;
  gfp_t gfp_mask;
  unsigned long pgoff;
  unsigned long address;
 };
 enum fault_flag flags;

 pmd_t *pmd;

 pud_t *pud;


 union {
  pte_t orig_pte;
  pmd_t orig_pmd;


 };

 struct page *cow_page;
 struct page *page;





 pte_t *pte;



 spinlock_t *ptl;



 pgtable_t prealloc_pte;






};


enum page_entry_size {
 PE_SIZE_PTE = 0,
 PE_SIZE_PMD,
 PE_SIZE_PUD,
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);

 int (*may_split)(struct vm_area_struct *area, unsigned long addr);
 int (*mremap)(struct vm_area_struct *area);





 int (*mprotect)(struct vm_area_struct *vma, unsigned long start,
   unsigned long end, unsigned long newflags);
 vm_fault_t (*fault)(struct vm_fault *vmf);
 vm_fault_t (*huge_fault)(struct vm_fault *vmf,
   enum page_entry_size pe_size);
 vm_fault_t (*map_pages)(struct vm_fault *vmf,
   unsigned long start_pgoff, unsigned long end_pgoff);
 unsigned long (*pagesize)(struct vm_area_struct * area);



 vm_fault_t (*page_mkwrite)(struct vm_fault *vmf);


 vm_fault_t (*pfn_mkwrite)(struct vm_fault *vmf);





 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 626 "./include/linux/mm.h"
 int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
# 638 "./include/linux/mm.h"
 struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
     unsigned long addr);






 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
{
 static const struct vm_operations_struct dummy_vm_ops = {};

 memset(vma, 0, sizeof(*vma));
 vma->vm_mm = mm;
 vma->vm_ops = &dummy_vm_ops;
 INIT_LIST_HEAD(&vma->anon_vma_chain);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_set_anonymous(struct vm_area_struct *vma)
{
 vma->vm_ops = ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_temporary_stack(struct vm_area_struct *vma)
{
 int maybe_stack = vma->vm_flags & (0x00000100 | 0x00000000);

 if (!maybe_stack)
  return false;

 if ((vma->vm_flags & (0x00010000 | 0x00008000)) ==
      (0x00010000 | 0x00008000))
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_foreign(struct vm_area_struct *vma)
{
 if (!get_current()->mm)
  return true;

 if (get_current()->mm != vma->vm_mm)
  return true;

 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_accessible(struct vm_area_struct *vma)
{
 return vma->vm_flags & (0x00000001 | 0x00000002 | 0x00000004);
}






bool vma_is_shmem(struct vm_area_struct *vma);




int vma_is_stack_for_current(struct vm_area_struct *vma);




struct mmu_gather;
struct inode;

# 1 "./include/linux/huge_mm.h" 1




# 1 "./include/linux/sched/coredump.h" 1
# 17 "./include/linux/sched/coredump.h"
extern void set_dumpable(struct mm_struct *mm, int value);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __get_dumpable(unsigned long mm_flags)
{
 return mm_flags & ((1 << 2) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_dumpable(struct mm_struct *mm)
{
 return __get_dumpable(mm->flags);
}
# 6 "./include/linux/huge_mm.h" 2


# 1 "./include/linux/fs.h" 1





# 1 "./include/linux/wait_bit.h" 1
# 10 "./include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;
 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};




typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);

void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 49 "./include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int mode);
extern int bit_wait_io(struct wait_bit_key *key, int mode);
extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
# 70 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 95 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 121 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 149 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!arch_test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 178 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 202 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 228 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}

extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
extern void wake_up_var(void *var);
extern wait_queue_head_t *__var_waitqueue(void *p);
# 330 "./include/linux/wait_bit.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 __asm__ __volatile__ ("sync" : : : "memory");
 wake_up_bit(word, bit);
}
# 7 "./include/linux/fs.h" 2
# 1 "./include/linux/kdev_t.h" 1




# 1 "./include/uapi/linux/kdev_t.h" 1
# 6 "./include/linux/kdev_t.h" 2
# 24 "./include/linux/kdev_t.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "./include/linux/fs.h" 2
# 1 "./include/linux/dcache.h" 1








# 1 "./include/linux/rculist_bl.h" 1







# 1 "./include/linux/list_bl.h" 1
# 34 "./include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ do { extern void __compiletime_assert_159(void) ; if (!((sizeof(h->first) == sizeof(char) || sizeof(h->first) == sizeof(short) || sizeof(h->first) == sizeof(int) || sizeof(h->first) == sizeof(long)) || sizeof(h->first) == sizeof(long long))) __compiletime_assert_159(); } while (0); (*(const volatile typeof( _Generic((h->first), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (h->first))) *)&(h->first)); }) & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_before(struct hlist_bl_node *n,
           struct hlist_bl_node *next)
{
 struct hlist_bl_node **pprev = next->pprev;

 n->pprev = pprev;
 n->next = next;
 next->pprev = &n->next;


 do { do { extern void __compiletime_assert_160(void) ; if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_160(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))); } while (0); } while (0);


}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_behind(struct hlist_bl_node *n,
           struct hlist_bl_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 prev->next = n;

 if (n->next)
  n->next->pprev = &n->next;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

                                                    ;


 do { do { extern void __compiletime_assert_161(void) ; if (!((sizeof(*pprev) == sizeof(char) || sizeof(*pprev) == sizeof(short) || sizeof(*pprev) == sizeof(int) || sizeof(*pprev) == sizeof(long)) || sizeof(*pprev) == sizeof(long long))) __compiletime_assert_161(); } while (0); do { *(volatile typeof(*pprev) *)&(*pprev) = ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))); } while (0); } while (0);



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + (0x5deadbeef0000000UL));
 n->pprev = ((void *) 0x122 + (0x5deadbeef0000000UL));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "./include/linux/rculist_bl.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_162(void) ; if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_162(); } while (0); do { *(volatile typeof((h->first)) *)&((h->first)) = ((typeof(h->first))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_163(void) ; if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)))) __compiletime_assert_163(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_164(void) ; if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)) || sizeof(*&h->first) == sizeof(long long))) __compiletime_assert_164(); } while (0); do { *(volatile typeof(*&h->first) *)&(*&h->first) = ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ do { extern void __compiletime_assert_165(void) ; if (!((sizeof((h->first)) == sizeof(char) || sizeof((h->first)) == sizeof(short) || sizeof((h->first)) == sizeof(int) || sizeof((h->first)) == sizeof(long)) || sizeof((h->first)) == sizeof(long long))) __compiletime_assert_165(); } while (0); (*(const volatile typeof( _Generic(((h->first)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((h->first)))) *)&((h->first))); }); do { } while (0 && (!((hlist_bl_is_locked(h)) || rcu_read_lock_held()))); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 46 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x122 + (0x5deadbeef0000000UL));
}
# 71 "./include/linux/rculist_bl.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 10 "./include/linux/dcache.h" 2




# 1 "./include/linux/lockref.h" 1
# 25 "./include/linux/lockref.h"
struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 15 "./include/linux/dcache.h" 2
# 1 "./include/linux/stringhash.h" 1






# 1 "./include/linux/hash.h" 1
# 60 "./include/linux/hash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 8 "./include/linux/stringhash.h" 2
# 42 "./include/linux/stringhash.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_64_generic(hash, 32);
}
# 66 "./include/linux/stringhash.h"
extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "./include/linux/stringhash.h"
extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
# 16 "./include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 48 "./include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 len; u32 hash;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;
extern const struct qstr dotdot_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 91 "./include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_spinlock_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
} __attribute__((__aligned__((1 << 7))));
# 225 "./include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);

extern struct dentry *d_find_alias_rcu(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(const struct dentry *, char *, int);
extern char *dentry_path(const struct dentry *, char *, int);
# 317 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 340 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_flags_negative(unsigned flags)
{
 return (flags & 0x00700000) == 0x00000000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 474 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 492 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 524 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 536 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ do { extern void __compiletime_assert_166(void) ; if (!((sizeof(dentry->d_inode) == sizeof(char) || sizeof(dentry->d_inode) == sizeof(short) || sizeof(dentry->d_inode) == sizeof(int) || sizeof(dentry->d_inode) == sizeof(long)) || sizeof(dentry->d_inode) == sizeof(long long))) __compiletime_assert_166(); } while (0); (*(const volatile typeof( _Generic((dentry->d_inode), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (dentry->d_inode))) *)&(dentry->d_inode)); });
}
# 551 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 568 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 583 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 599 "./include/linux/dcache.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "./include/linux/fs.h" 2
# 1 "./include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 10 "./include/linux/fs.h" 2
# 1 "./include/linux/stat.h" 1





# 1 "./arch/powerpc/include/uapi/asm/stat.h" 1
# 30 "./arch/powerpc/include/uapi/asm/stat.h"
struct stat {
 unsigned long st_dev;
 ino_t st_ino;

 unsigned long st_nlink;
 mode_t st_mode;




 uid_t st_uid;
 gid_t st_gid;
 unsigned long st_rdev;
 long st_size;
 unsigned long st_blksize;
 unsigned long st_blocks;
 unsigned long st_atime;
 unsigned long st_atime_nsec;
 unsigned long st_mtime;
 unsigned long st_mtime_nsec;
 unsigned long st_ctime;
 unsigned long st_ctime_nsec;
 unsigned long __unused4;
 unsigned long __unused5;

 unsigned long __unused6;

};


struct stat64 {
 unsigned long long st_dev;
 unsigned long long st_ino;
 unsigned int st_mode;
 unsigned int st_nlink;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned long long st_rdev;
 unsigned short __pad2;
 long long st_size;
 int st_blksize;
 long long st_blocks;
 int st_atime;
 unsigned int st_atime_nsec;
 int st_mtime;
 unsigned int st_mtime_nsec;
 int st_ctime;
 unsigned int st_ctime_nsec;
 unsigned int __unused4;
 unsigned int __unused5;
};
# 7 "./include/linux/stat.h" 2
# 1 "./include/uapi/linux/stat.h" 1
# 56 "./include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "./include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 stx_mnt_id;
 __u64 __spare2;

 __u64 __spare3[12];

};
# 8 "./include/linux/stat.h" 2
# 22 "./include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 41 "./include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
 u64 mnt_id;
};
# 11 "./include/linux/fs.h" 2


# 1 "./include/linux/list_lru.h" 1
# 15 "./include/linux/list_lru.h"
struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
} __attribute__((__aligned__((1 << 7))));

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 int shrinker_id;
 bool memcg_aware;

};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 72 "./include/linux/list_lru.h"
int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
# 91 "./include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 104 "./include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 116 "./include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 8); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY]))))
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 166 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
# 183 "./include/linux/list_lru.h"
unsigned long list_lru_walk_one_irq(struct list_lru *lru,
        int nid, struct mem_cgroup *memcg,
        list_lru_walk_cb isolate, void *cb_arg,
        unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
    list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
         &sc->nr_to_scan);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 8); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY])))) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "./include/linux/fs.h" 2

# 1 "./include/linux/radix-tree.h" 1
# 19 "./include/linux/radix-tree.h"
# 1 "./include/linux/xarray.h" 1
# 52 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_value(unsigned long v)
{
 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p(((long)v < 0))) { if (!((long)v < 0)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/xarray.h"), "i" (54), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/xarray.h"), "i" (54), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" ((long)v < 0) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return (void *)((v << 1) | 1);
}
# 65 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_value(const void *entry)
{
 return (unsigned long)entry >> 1;
}
# 77 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_value(const void *entry)
{
 return (unsigned long)entry & 1;
}
# 95 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_tag_pointer(void *p, unsigned long tag)
{
 return (void *)((unsigned long)p | tag);
}
# 110 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_untag_pointer(void *entry)
{
 return (void *)((unsigned long)entry & ~3UL);
}
# 125 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xa_pointer_tag(void *entry)
{
 return (unsigned long)entry & 3UL;
}
# 143 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_internal(unsigned long v)
{
 return (void *)((v << 2) | 2);
}
# 155 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_internal(const void *entry)
{
 return (unsigned long)entry >> 2;
}
# 167 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_internal(const void *entry)
{
 return ((unsigned long)entry & 3) == 2;
}
# 183 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_zero(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(257)), 0);
}
# 199 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_err(const void *entry)
{
 return __builtin_expect(!!(xa_is_internal(entry) && entry >= xa_mk_internal(-4095)), 0);

}
# 217 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_err(void *entry)
{

 if (xa_is_err(entry))
  return (long)entry >> 2;
 return 0;
}
# 237 "./include/linux/xarray.h"
struct xa_limit {
 u32 max;
 u32 min;
};







typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 294 "./include/linux/xarray.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 349 "./include/linux/xarray.h"
void *xa_load(struct xarray *, unsigned long index);
void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *xa_erase(struct xarray *, unsigned long index);
void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
   void *entry, gfp_t);
bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
void *xa_find(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
void *xa_find_after(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
  unsigned long max, unsigned int n, xa_mark_t);
void xa_destroy(struct xarray *);
# 376 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { spinlock_check(&xa->xa_lock); *(&xa->xa_lock) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 xa->xa_flags = flags;
 xa->xa_head = ((void *)0);
}
# 391 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == ((void *)0);
}
# 416 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_marked(const struct xarray *xa, xa_mark_t mark)
{
 return xa->xa_flags & (( gfp_t)((1U << (25 + 0)) << ( unsigned)(mark)));
}
# 556 "./include/linux/xarray.h"
void *__xa_erase(struct xarray *, unsigned long index);
void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
  struct xa_limit, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
  struct xa_limit, u32 *next, gfp_t);
void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
# 583 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_bh(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 609 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_irq(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 634 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_bh(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_bh(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_bh(&(xa)->xa_lock);

 return entry;
}
# 658 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_irq(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_irq(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_irq(&(xa)->xa_lock);

 return entry;
}
# 684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return curr;
}
# 711 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 738 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 767 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 796 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 825 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 854 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 883 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 912 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 945 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 978 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 1011 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 1041 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1059 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_bh(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1077 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_irq(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1092 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_release(struct xarray *xa, unsigned long index)
{
 xa_cmpxchg(xa, index, xa_mk_internal(257), ((void *)0), 0);
}
# 1124 "./include/linux/xarray.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
 };
};

void xa_dump(const struct xarray *);
void xa_dump_node(const struct xa_node *);
# 1164 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head(const struct xarray *xa)
{
 return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ do { extern void __compiletime_assert_167(void) ; if (!((sizeof((xa->xa_head)) == sizeof(char) || sizeof((xa->xa_head)) == sizeof(short) || sizeof((xa->xa_head)) == sizeof(int) || sizeof((xa->xa_head)) == sizeof(long)) || sizeof((xa->xa_head)) == sizeof(long long))) __compiletime_assert_167(); } while (0); (*(const volatile typeof( _Generic(((xa->xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((xa->xa_head)))) *)&((xa->xa_head))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(xa->xa_head)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head_locked(const struct xarray *xa)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ do { extern void __compiletime_assert_168(void) ; if (!((sizeof((node->slots[offset])) == sizeof(char) || sizeof((node->slots[offset])) == sizeof(short) || sizeof((node->slots[offset])) == sizeof(int) || sizeof((node->slots[offset])) == sizeof(long)) || sizeof((node->slots[offset])) == sizeof(long long))) __compiletime_assert_168(); } while (0); (*(const volatile typeof( _Generic(((node->slots[offset])), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->slots[offset])))) *)&((node->slots[offset]))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->slots[offset])) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry_locked(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ do { extern void __compiletime_assert_169(void) ; if (!((sizeof((node->parent)) == sizeof(char) || sizeof((node->parent)) == sizeof(short) || sizeof((node->parent)) == sizeof(int) || sizeof((node->parent)) == sizeof(long)) || sizeof((node->parent)) == sizeof(long long))) __compiletime_assert_169(); } while (0); (*(const volatile typeof( _Generic(((node->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((node->parent)))) *)&((node->parent))); }); do { } while (0 && (!((lockdep_is_held(&xa->xa_lock)) || rcu_read_lock_held()))); ; ((typeof(*(node->parent)) *)(________p1)); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent_locked(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ do { } while (0 && (!((lockdep_is_held(&xa->xa_lock))))); ; ((typeof(*(node->parent)) *)((node->parent))); });

}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_node(const struct xa_node *node)
{
 return (void *)((unsigned long)node | 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_to_node(const void *entry)
{
 return (struct xa_node *)((unsigned long)entry - 2);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_node(const void *entry)
{
 return xa_is_internal(entry) && (unsigned long)entry > 4096;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_sibling(unsigned int offset)
{
 return xa_mk_internal(offset);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_sibling(const void *entry)
{
 return xa_to_internal(entry);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_sibling(const void *entry)
{
 return 1 && xa_is_internal(entry) &&
  (entry < xa_mk_sibling((1UL << (0 ? 4 : 6)) - 1));
}
# 1261 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_retry(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(256)), 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_advanced(const void *entry)
{
 return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
}
# 1289 "./include/linux/xarray.h"
typedef void (*xa_update_node_t)(struct xa_node *node);

void xa_delete_node(struct xa_node *, xa_update_node_t);
# 1310 "./include/linux/xarray.h"
struct xa_state {
 struct xarray *xa;
 unsigned long xa_index;
 unsigned char xa_shift;
 unsigned char xa_sibs;
 unsigned char xa_offset;
 unsigned char xa_pad;
 struct xa_node *xa_node;
 struct xa_node *xa_alloc;
 xa_update_node_t xa_update;
};
# 1389 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xas_error(const struct xa_state *xas)
{
 return xa_err(xas->xa_node);
}
# 1403 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_err(struct xa_state *xas, long err)
{
 xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_invalid(const struct xa_state *xas)
{
 return (unsigned long)xas->xa_node & 3;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_valid(const struct xa_state *xas)
{
 return !xas_invalid(xas);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_is_node(const struct xa_state *xas)
{
 return xas_valid(xas) && xas->xa_node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_not_node(struct xa_node *node)
{
 return ((unsigned long)node & 3) || !node;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_frozen(struct xa_node *node)
{
 return (unsigned long)node & 2;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_top(struct xa_node *node)
{
 return node <= ((struct xa_node *)3UL);
}
# 1469 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_reset(struct xa_state *xas)
{
 xas->xa_node = ((struct xa_node *)3UL);
}
# 1486 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_retry(struct xa_state *xas, const void *entry)
{
 if (xa_is_zero(entry))
  return true;
 if (!xa_is_retry(entry))
  return false;
 xas_reset(xas);
 return true;
}

void *xas_load(struct xa_state *);
void *xas_store(struct xa_state *, void *entry);
void *xas_find(struct xa_state *, unsigned long max);
void *xas_find_conflict(struct xa_state *);

bool xas_get_mark(const struct xa_state *, xa_mark_t);
void xas_set_mark(const struct xa_state *, xa_mark_t);
void xas_clear_mark(const struct xa_state *, xa_mark_t);
void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
void xas_init_marks(const struct xa_state *);

bool xas_nomem(struct xa_state *, gfp_t);
void xas_pause(struct xa_state *);

void xas_create_range(struct xa_state *);


int xa_get_order(struct xarray *, unsigned long index);
void xas_split(struct xa_state *, void *entry, unsigned int order);
void xas_split_alloc(struct xa_state *, void *entry, unsigned int order, gfp_t);
# 1548 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_reload(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 char offset;

 if (!node)
  return xa_head(xas->xa);
 if (1) {
  offset = (xas->xa_index >> node->shift) & ((1UL << (0 ? 4 : 6)) - 1);
  entry = xa_entry(xas->xa, node, offset);
  if (!xa_is_sibling(entry))
   return entry;
  offset = xa_to_sibling(entry);
 } else {
  offset = xas->xa_offset;
 }
 return xa_entry(xas->xa, node, offset);
}
# 1577 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set(struct xa_state *xas, unsigned long index)
{
 xas->xa_index = index;
 xas->xa_node = ((struct xa_node *)3UL);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_order(struct xa_state *xas, unsigned long index,
     unsigned int order)
{

 xas->xa_index = order < 64 ? (index >> order) << order : 0;
 xas->xa_shift = order - (order % (0 ? 4 : 6));
 xas->xa_sibs = (1 << (order % (0 ? 4 : 6))) - 1;
 xas->xa_node = ((struct xa_node *)3UL);




}
# 1611 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_update(struct xa_state *xas, xa_update_node_t update)
{
 xas->xa_update = update;
}
# 1627 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_entry(struct xa_state *xas, unsigned long max)
{
 struct xa_node *node = xas->xa_node;
 void *entry;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset != (xas->xa_index & ((1UL << (0 ? 4 : 6)) - 1))), 0))

  return xas_find(xas, max);

 do {
  if (__builtin_expect(!!(xas->xa_index >= max), 0))
   return xas_find(xas, max);
  if (__builtin_expect(!!(xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))
   return xas_find(xas, max);
  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
  if (__builtin_expect(!!(xa_is_internal(entry)), 0))
   return xas_find(xas, max);
  xas->xa_offset++;
  xas->xa_index++;
 } while (!entry);

 return entry;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
  xa_mark_t mark)
{
 unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
 unsigned int offset = xas->xa_offset;

 if (advance)
  offset++;
 if ((1UL << (0 ? 4 : 6)) == 64) {
  if (offset < (1UL << (0 ? 4 : 6))) {
   unsigned long data = *addr & (~0UL << offset);
   if (data)
    return __ffs(data);
  }
  return (1UL << (0 ? 4 : 6));
 }

 return find_next_bit(addr, (1UL << (0 ? 4 : 6)), offset);
}
# 1684 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_marked(struct xa_state *xas, unsigned long max,
        xa_mark_t mark)
{
 struct xa_node *node = xas->xa_node;
 void *entry;
 unsigned int offset;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift), 0))
  return xas_find_marked(xas, max, mark);
 offset = xas_find_chunk(xas, true, mark);
 xas->xa_offset = offset;
 xas->xa_index = (xas->xa_index & ~((1UL << (0 ? 4 : 6)) - 1)) + offset;
 if (xas->xa_index > max)
  return ((void *)0);
 if (offset == (1UL << (0 ? 4 : 6)))
  return xas_find_marked(xas, max, mark);
 entry = xa_entry(xas->xa, node, offset);
 if (!entry)
  return xas_find_marked(xas, max, mark);
 return entry;
}





enum {
 XA_CHECK_SCHED = 4096,
};
# 1764 "./include/linux/xarray.h"
void *__xas_next(struct xa_state *);
void *__xas_prev(struct xa_state *);
# 1783 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_prev(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == 0), 0))

  return __xas_prev(xas);

 xas->xa_index--;
 xas->xa_offset--;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 1812 "./include/linux/xarray.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))

  return __xas_next(xas);

 xas->xa_index++;
 xas->xa_offset++;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 20 "./include/linux/radix-tree.h" 2






struct radix_tree_preload {
 local_lock_t lock;
 unsigned nr;

 struct xa_node *nodes;
};
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct radix_tree_preload) radix_tree_preloads;
# 53 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    2UL;
}
# 84 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_empty(const struct xarray *root)
{
 return root->xa_head == ((void *)0);
}
# 104 "./include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct xa_node *node;
};
# 175 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ do { extern void __compiletime_assert_170(void) ; if (!((sizeof((*slot)) == sizeof(char) || sizeof((*slot)) == sizeof(short) || sizeof((*slot)) == sizeof(int) || sizeof((*slot)) == sizeof(long)) || sizeof((*slot)) == sizeof(long long))) __compiletime_assert_170(); } while (0); (*(const volatile typeof( _Generic(((*slot)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((*slot)))) *)&((*slot))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 189 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0 && (!((lockdep_is_held(treelock))))); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 202 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int radix_tree_insert(struct xarray *, unsigned long index,
   void *);
void *__radix_tree_lookup(const struct xarray *, unsigned long index,
     struct xa_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct xarray *, unsigned long);
void **radix_tree_lookup_slot(const struct xarray *,
     unsigned long index);
void __radix_tree_replace(struct xarray *, struct xa_node *,
     void **slot, void *entry);
void radix_tree_iter_replace(struct xarray *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct xarray *,
        void **slot, void *entry);
void radix_tree_iter_delete(struct xarray *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
void *radix_tree_delete(struct xarray *, unsigned long);
unsigned int radix_tree_gang_lookup(const struct xarray *,
   void **results, unsigned long first_index,
   unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct xarray *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct xarray *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct xarray *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_clear(struct xarray *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct xarray *, unsigned int tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radix_tree_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock)); (typeof((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock))) (__ptr + ((local_paca->data_offset))); }); })); __asm__ __volatile__("": : :"memory"); } while (0);
}

void **idr_get_free(struct xarray *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 278 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 289 "./include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 307 "./include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct xarray *,
        struct radix_tree_iter *iter, unsigned flags);
# 320 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void **
radix_tree_iter_lookup(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 337 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + slots;
}
# 361 "./include/linux/radix-tree.h"
void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
# 395 "./include/linux/radix-tree.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 return slot;
}
# 16 "./include/linux/fs.h" 2








# 1 "./include/linux/capability.h" 1
# 16 "./include/linux/capability.h"
# 1 "./include/uapi/linux/capability.h" 1
# 39 "./include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "./include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "./include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
 kuid_t rootid;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 118 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 166 "./include/linux/capability.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
extern bool ns_capable_setid(struct user_namespace *ns, int cap);
# 250 "./include/linux/capability.h"
bool privileged_wrt_inode_uidgid(struct user_namespace *ns,
     struct user_namespace *mnt_userns,
     const struct inode *inode);
bool capable_wrt_inode_uidgid(struct user_namespace *mnt_userns,
         const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool perfmon_capable(void)
{
 return capable(38) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_capable(void)
{
 return capable(39) || capable(21);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool checkpoint_restore_ns_capable(struct user_namespace *ns)
{
 return ns_capable(ns, 40) ||
  ns_capable(ns, 21);
}


int get_vfs_caps_from_disk(struct user_namespace *mnt_userns,
      const struct dentry *dentry,
      struct cpu_vfs_cap_data *cpu_caps);

int cap_convert_nscap(struct user_namespace *mnt_userns, struct dentry *dentry,
        const void **ivalue, size_t size);
# 25 "./include/linux/fs.h" 2
# 1 "./include/linux/semaphore.h" 1
# 15 "./include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 31 "./include/linux/semaphore.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 26 "./include/linux/fs.h" 2
# 1 "./include/linux/fcntl.h" 1





# 1 "./include/uapi/linux/fcntl.h" 1




# 1 "./arch/powerpc/include/uapi/asm/fcntl.h" 1
# 10 "./arch/powerpc/include/uapi/asm/fcntl.h"
# 1 "./include/uapi/asm-generic/fcntl.h" 1
# 156 "./include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 196 "./include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 11 "./arch/powerpc/include/uapi/asm/fcntl.h" 2
# 6 "./include/uapi/linux/fcntl.h" 2
# 1 "./include/uapi/linux/openat2.h" 1
# 19 "./include/uapi/linux/openat2.h"
struct open_how {
 __u64 flags;
 __u64 mode;
 __u64 resolve;
};
# 7 "./include/uapi/linux/fcntl.h" 2
# 7 "./include/linux/fcntl.h" 2
# 27 "./include/linux/fs.h" 2



# 1 "./include/linux/migrate_mode.h" 1
# 15 "./include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};
# 31 "./include/linux/fs.h" 2


# 1 "./include/linux/percpu-rwsem.h" 1






# 1 "./include/linux/rcuwait.h" 1





# 1 "./include/linux/sched/signal.h" 1





# 1 "./include/linux/signal.h" 1








struct task_struct;


extern int print_fatal_signals;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_siginfo(kernel_siginfo_t *to,
    const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*to));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_siginfo(kernel_siginfo_t *info)
{
 memset(info, 0, sizeof(*info));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_siginfo_to_external(siginfo_t *to,
         const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*from));
 memset(((char *)to) + sizeof(struct kernel_siginfo), 0,
  (sizeof(struct siginfo) - sizeof(struct kernel_siginfo)));
}

int copy_siginfo_to_user(siginfo_t *to, const kernel_siginfo_t *from);
int copy_siginfo_from_user(kernel_siginfo_t *to, const siginfo_t *from);

enum siginfo_layout {
 SIL_KILL,
 SIL_TIMER,
 SIL_POLL,
 SIL_FAULT,
 SIL_FAULT_TRAPNO,
 SIL_FAULT_MCEERR,
 SIL_FAULT_BNDERR,
 SIL_FAULT_PKUERR,
 SIL_FAULT_PERF_EVENT,
 SIL_CHLD,
 SIL_RT,
 SIL_SYS,
};

enum siginfo_layout siginfo_layout(unsigned sig, int si_code);
# 64 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / 64] |= 1UL << (sig % 64);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / 64] &= ~(1UL << (sig % 64));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / 64] >> (sig % 64));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigisemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  do { extern void __compiletime_assert_171(void) ; if (!(!(1))) __compiletime_assert_171(); } while (0);
  return 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigequalsets(const sigset_t *set1, const sigset_t *set2)
{
 switch ((64 / 64)) {
 case 4:
  return (set1->sig[3] == set2->sig[3]) &&
   (set1->sig[2] == set2->sig[2]) &&
   (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 2:
  return (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 1:
  return set1->sig[0] == set2->sig[0];
 }
 return 0;
}
# 157 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { extern void __compiletime_assert_172(void) ; if (!(!(1))) __compiletime_assert_172(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { extern void __compiletime_assert_173(void) ; if (!(!(1))) __compiletime_assert_173(); } while (0); } }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); __attribute__((__fallthrough__)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); __attribute__((__fallthrough__)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { extern void __compiletime_assert_174(void) ; if (!(!(1))) __compiletime_assert_174(); } while (0); } }
# 187 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signotset(sigset_t *set) { switch ((64 / 64)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); __attribute__((__fallthrough__)); case 2: set->sig[1] = (~(set->sig[1])); __attribute__((__fallthrough__)); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { extern void __compiletime_assert_175(void) ; if (!(!(1))) __compiletime_assert_175(); } while (0); } }




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigfillset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
  __attribute__((__fallthrough__));
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = 0;
  break;
 case 1: ;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = -1;
  break;
 case 1: ;
 }
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

struct timespec;
struct pt_regs;
enum pid_type;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct kernel_siginfo *info,
    struct task_struct *p, enum pid_type type);
extern int group_send_sig_info(int sig, struct kernel_siginfo *info,
          struct task_struct *p, enum pid_type type);
extern int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked(const sigset_t *);
extern int show_unhandled_signals;

extern bool get_signal(struct ksignal *ksig);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern void kernel_sigaction(int, __sighandler_t);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_kernel_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)3));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disallow_signal(int sig)
{
 kernel_sigaction(sig, (( __sighandler_t)1));
}

extern struct kmem_cache *sighand_cachep;

extern bool unhandled_signal(struct task_struct *tsk, int sig);
# 454 "./include/linux/signal.h"
void signals_init(void);

int restore_altstack(const stack_t *);
int __save_altstack(stack_t *, unsigned long);
# 468 "./include/linux/signal.h"
struct seq_file;
extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
# 478 "./include/linux/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *arch_untagged_si_addr(void *addr,
       unsigned long sig,
       unsigned long si_code)
{
 return addr;
}
# 7 "./include/linux/sched/signal.h" 2

# 1 "./include/linux/sched/jobctl.h" 1






struct task_struct;
# 35 "./include/linux/sched/jobctl.h"
extern bool task_set_jobctl_pending(struct task_struct *task, unsigned long mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task, unsigned long mask);
# 9 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/sched/task.h" 1
# 11 "./include/linux/sched/task.h"
# 1 "./include/linux/uaccess.h" 1




# 1 "./include/linux/fault-inject-usercopy.h" 1
# 18 "./include/linux/fault-inject-usercopy.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool should_fail_usercopy(void) { return false; }
# 6 "./include/linux/uaccess.h" 2





# 1 "./arch/powerpc/include/asm/uaccess.h" 1




# 1 "./arch/powerpc/include/asm/ppc_asm.h" 1
# 6 "./arch/powerpc/include/asm/uaccess.h" 2



# 1 "./arch/powerpc/include/asm/kup.h" 1
# 10 "./arch/powerpc/include/asm/kup.h"
# 1 "./arch/powerpc/include/asm/book3s/64/kup.h" 1
# 198 "./arch/powerpc/include/asm/book3s/64/kup.h"
extern struct static_key_false uaccess_flush_key;



extern u64 __attribute__((__section__(".data..ro_after_init"))) default_uamor;
extern u64 __attribute__((__section__(".data..ro_after_init"))) default_amr;
extern u64 __attribute__((__section__(".data..ro_after_init"))) default_iamr;
# 215 "./arch/powerpc/include/asm/book3s/64/kup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 current_thread_amr(void)
{
 if (get_current()->thread.regs)
  return get_current()->thread.regs->amr;
 return default_amr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 current_thread_iamr(void)
{
 if (get_current()->thread.regs)
  return get_current()->thread.regs->iamr;
 return default_iamr;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kuap_user_restore(struct pt_regs *regs)
{
 bool restore_amr = false, restore_iamr = false;
 unsigned long amr, iamr;

 if (!mmu_has_feature(0x00000800UL))
  return;

 if (!mmu_has_feature(0x00000200UL)) {
  amr = ({unsigned long rval; asm volatile("mfspr %0," "0x1d" : "=r" (rval)); rval;});
  if (amr != regs->amr)
   restore_amr = true;
 } else {
  restore_amr = true;
 }

 if (!mmu_has_feature(0x00000400UL)) {
  iamr = ({unsigned long rval; asm volatile("mfspr %0," "0x03D" : "=r" (rval)); rval;});
  if (iamr != regs->iamr)
   restore_iamr = true;
 } else {
  restore_iamr = true;
 }


 if (restore_amr || restore_iamr) {
  isync();
  if (restore_amr)
   asm volatile("mtspr " "0x1d" ",%0" : : "r" ((unsigned long)(regs->amr)) : "memory");
  if (restore_iamr)
   asm volatile("mtspr " "0x03D" ",%0" : : "r" ((unsigned long)(regs->iamr)) : "memory");
 }





}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kuap_kernel_restore(struct pt_regs *regs,
        unsigned long amr)
{
 if (mmu_has_feature(0x00000200UL)) {
  if (__builtin_expect(!!(regs->amr != amr), 0)) {
   isync();
   asm volatile("mtspr " "0x1d" ",%0" : : "r" ((unsigned long)(regs->amr)) : "memory");





  }
 }



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kuap_get_and_assert_locked(void)
{
 if (mmu_has_feature(0x00000200UL)) {
  unsigned long amr = ({unsigned long rval; asm volatile("mfspr %0," "0x1d" : "=r" (rval)); rval;});
  if (0)
   ({ int __ret_warn_on = !!(amr != ((((0x5455555555555555UL))) | (((0xa8aaaaaaaaaaaaaaUL))))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/kup.h"), "i" (295), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
  return amr;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kuap_assert_locked(void)
{
 if (0 && mmu_has_feature(0x00000200UL))
  ({ int __ret_warn_on = !!(({unsigned long rval; asm volatile("mfspr %0," "0x1d" : "=r" (rval)); rval;}) != ((((0x5455555555555555UL))) | (((0xa8aaaaaaaaaaaaaaUL))))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/book3s/64/kup.h"), "i" (304), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_kuap(void)
{
# 322 "./arch/powerpc/include/asm/book3s/64/kup.h"
 if (!mmu_has_feature(0x00000200UL))
  return ((((0x5455555555555555UL))) | (((0xa8aaaaaaaaaaaaaaUL))));

 return ({unsigned long rval; asm volatile("mfspr %0," "0x1d" : "=r" (rval)); rval;});
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_kuap(unsigned long value)
{
 if (!mmu_has_feature(0x00000200UL))
  return;





 isync();
 asm volatile("mtspr " "0x1d" ",%0" : : "r" ((unsigned long)(value)) : "memory");
 isync();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bad_kuap_fault(struct pt_regs *regs, unsigned long address,
      bool is_write)
{
 if (!mmu_has_feature(0x00000200UL))
  return false;
# 359 "./arch/powerpc/include/asm/book3s/64/kup.h"
 if (is_write) {
  return (regs->amr & (((0xa8aaaaaaaaaaaaaaUL)))) == (((0xa8aaaaaaaaaaaaaaUL)));
 }
 return (regs->amr & (((0x5455555555555555UL)))) == (((0x5455555555555555UL)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void allow_user_access(void *to, const void *from,
           unsigned long size, unsigned long dir)
{
 unsigned long thread_amr = 0;


 do { extern void __compiletime_assert_176(void) ; if (!(!(!__builtin_constant_p(dir)))) __compiletime_assert_176(); } while (0);

 if (mmu_has_feature(0x00000800UL))
  thread_amr = current_thread_amr();

 if (dir == 1)
  set_kuap(thread_amr | (((0xa8aaaaaaaaaaaaaaUL))));
 else if (dir == 2)
  set_kuap(thread_amr | (((0x5455555555555555UL))));
 else if (dir == (1 | 2))
  set_kuap(thread_amr);
 else
  do { extern void __compiletime_assert_177(void) ; if (!(!(1))) __compiletime_assert_177(); } while (0);
}
# 401 "./arch/powerpc/include/asm/book3s/64/kup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prevent_user_access(unsigned long dir)
{
 set_kuap(((((0x5455555555555555UL))) | (((0xa8aaaaaaaaaaaaaaUL)))));
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&uaccess_flush_key), struct static_key_true)) branch = arch_static_branch_jump(&(&uaccess_flush_key)->key, false); else if (__builtin_types_compatible_p(typeof(*&uaccess_flush_key), struct static_key_false)) branch = arch_static_branch(&(&uaccess_flush_key)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }))
  do_uaccess_flush();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long prevent_user_access_return(void)
{
 unsigned long flags = get_kuap();

 set_kuap(((((0x5455555555555555UL))) | (((0xa8aaaaaaaaaaaaaaUL)))));
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&uaccess_flush_key), struct static_key_true)) branch = arch_static_branch_jump(&(&uaccess_flush_key)->key, false); else if (__builtin_types_compatible_p(typeof(*&uaccess_flush_key), struct static_key_false)) branch = arch_static_branch(&(&uaccess_flush_key)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }))
  do_uaccess_flush();

 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_user_access(unsigned long flags)
{
 set_kuap(flags);
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&uaccess_flush_key), struct static_key_true)) branch = arch_static_branch_jump(&(&uaccess_flush_key)->key, false); else if (__builtin_types_compatible_p(typeof(*&uaccess_flush_key), struct static_key_false)) branch = arch_static_branch(&(&uaccess_flush_key)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }) && flags == ((((0x5455555555555555UL))) | (((0xa8aaaaaaaaaaaaaaUL)))))
  do_uaccess_flush();
}
# 11 "./arch/powerpc/include/asm/kup.h" 2
# 30 "./arch/powerpc/include/asm/kup.h"
extern bool disable_kuep;
extern bool disable_kuap;




void setup_kuep(bool disabled);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kuep_lock(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kuep_unlock(void) { }



void setup_kuap(bool disabled);
# 81 "./arch/powerpc/include/asm/kup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void setup_kup(void)
{
 setup_kuep(disable_kuep);
 setup_kuap(disable_kuap);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void allow_read_from_user(const void *from, unsigned long size)
{
 asm ("953: .pushsection __barrier_nospec_fixup,\"a\"; .align 2; 954: .8byte 953b-954b; .popsection;; nop" " " ::: "memory");
 allow_user_access(((void *)0), from, size, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void allow_write_to_user(void *to, unsigned long size)
{
 allow_user_access(to, ((void *)0), size, 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void allow_read_write_user(void *to, const void *from,
        unsigned long size)
{
 asm ("953: .pushsection __barrier_nospec_fixup,\"a\"; .align 2; 954: .8byte 953b-954b; .popsection;; nop" " " ::: "memory");
 allow_user_access(to, from, size, (1 | 2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void prevent_read_from_user(const void *from, unsigned long size)
{
 prevent_user_access(1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void prevent_write_to_user(void *to, unsigned long size)
{
 prevent_user_access(2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void prevent_read_write_user(void *to, const void *from,
          unsigned long size)
{
 prevent_user_access((1 | 2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void prevent_current_access_user(void)
{
 prevent_user_access((1 | 2));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void prevent_current_read_from_user(void)
{
 prevent_user_access(1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void prevent_current_write_to_user(void)
{
 prevent_user_access(2);
}
# 10 "./arch/powerpc/include/asm/uaccess.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __access_ok(unsigned long addr, unsigned long size)
{
 return addr < (0x0010000000000000UL) && size <= (0x0010000000000000UL) - addr;
}
# 284 "./arch/powerpc/include/asm/uaccess.h"
extern unsigned long __copy_tofrom_user(void *to,
  const void *from, unsigned long size);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
raw_copy_in_user(void *to, const void *from, unsigned long n)
{
 unsigned long ret;

 allow_read_write_user(to, from, n);
 ret = __copy_tofrom_user(to, from, n);
 prevent_read_write_user(to, from, n);
 return ret;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long raw_copy_from_user(void *to,
  const void *from, unsigned long n)
{
 unsigned long ret;

 allow_read_from_user(from, n);
 ret = __copy_tofrom_user(( void *)to, from, n);
 prevent_read_from_user(from, n);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
raw_copy_to_user(void *to, const void *from, unsigned long n)
{
 unsigned long ret;

 allow_write_to_user(to, n);
 ret = __copy_tofrom_user(to, ( const void *)from, n);
 prevent_write_to_user(to, n);
 return ret;
}

unsigned long __arch_clear_user(void *addr, unsigned long size);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __clear_user(void *addr, unsigned long size)
{
 unsigned long ret;

 might_fault();
 allow_write_to_user(addr, size);
 ret = __arch_clear_user(addr, size);
 prevent_write_to_user(addr, size);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long clear_user(void *addr, unsigned long size)
{
 return __builtin_expect(!!(((void)0, __access_ok((unsigned long)(addr), (size)))), 1) ? __clear_user(addr, size) : size;
}

extern long strncpy_from_user(char *dst, const char *src, long count);
extern __attribute__((__warn_unused_result__)) long strnlen_user(const char *str, long n);


unsigned long __attribute__((__warn_unused_result__))
copy_mc_generic(void *to, const void *from, unsigned long size);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_kernel(void *to, const void *from, unsigned long size)
{
 return copy_mc_generic(to, from, size);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __attribute__((__warn_unused_result__))
copy_mc_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1)) {
  if (((void)0, __access_ok((unsigned long)(to), (n)))) {
   allow_write_to_user(to, n);
   n = copy_mc_generic((void *)to, from, n);
   prevent_write_to_user(to, n);
  }
 }

 return n;
}


extern long __copy_from_user_flushcache(void *dst, const void *src,
  unsigned size);
extern void memcpy_page_flushcache(char *to, struct page *page, size_t offset,
      size_t len);

static __attribute__((__warn_unused_result__)) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool user_access_begin(const void *ptr, size_t len)
{
 if (__builtin_expect(!!(!((void)0, __access_ok((unsigned long)(ptr), (len)))), 0))
  return false;

 might_fault();

 allow_read_write_user((void *)ptr, ptr, len);
 return true;
}





static __attribute__((__warn_unused_result__)) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
user_read_access_begin(const void *ptr, size_t len)
{
 if (__builtin_expect(!!(!((void)0, __access_ok((unsigned long)(ptr), (len)))), 0))
  return false;

 might_fault();

 allow_read_from_user(ptr, len);
 return true;
}



static __attribute__((__warn_unused_result__)) inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
user_write_access_begin(const void *ptr, size_t len)
{
 if (__builtin_expect(!!(!((void)0, __access_ok((unsigned long)(ptr), (len)))), 0))
  return false;

 might_fault();

 allow_write_to_user((void *)ptr, len);
 return true;
}
# 12 "./include/linux/uaccess.h" 2
# 32 "./include/linux/uaccess.h"
typedef struct {

} mm_segment_t;
# 43 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) mm_segment_t force_uaccess_begin(void)
{
 return (mm_segment_t) { };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void force_uaccess_end(mm_segment_t oldfs)
{
}
# 98 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_from_user(to, from, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}
# 130 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (should_fail_usercopy())
  return n;
 instrument_copy_to_user(to, from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}
# 166 "./include/linux/uaccess.h"
extern __attribute__((__warn_unused_result__)) unsigned long
_copy_from_user(void *, const void *, unsigned long);
# 184 "./include/linux/uaccess.h"
extern __attribute__((__warn_unused_result__)) unsigned long
_copy_to_user(void *, const void *, unsigned long);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}
# 217 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_inc(void)
{
 get_current()->pagefault_disabled++;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_dec(void)
{
 get_current()->pagefault_disabled--;
}
# 234 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_disable(void)
{
 pagefault_disabled_inc();




 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_enable(void)
{




 __asm__ __volatile__("": : :"memory");
 pagefault_disabled_dec();
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pagefault_disabled(void)
{
 return get_current()->pagefault_disabled != 0;
}
# 276 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long
__copy_from_user_inatomic_nocache(void *to, const void *from,
      unsigned long n)
{
 return __copy_from_user_inatomic(to, from, n);
}



extern __attribute__((__warn_unused_result__)) int check_zeroed_user(const void *from, size_t size);
# 334 "./include/linux/uaccess.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__)) int
copy_struct_from_user(void *dst, size_t ksize, const void *src,
        size_t usize)
{
 size_t size = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) < (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x178 = (ksize); typeof(usize) __UNIQUE_ID___y179 = (usize); ((__UNIQUE_ID___x178) < (__UNIQUE_ID___y179) ? (__UNIQUE_ID___x178) : (__UNIQUE_ID___y179)); }));
 size_t rest = __builtin_choose_expr(((!!(sizeof((typeof(ksize) *)1 == (typeof(usize) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(ksize) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(usize) * 0l)) : (int *)8))))), ((ksize) > (usize) ? (ksize) : (usize)), ({ typeof(ksize) __UNIQUE_ID___x180 = (ksize); typeof(usize) __UNIQUE_ID___y181 = (usize); ((__UNIQUE_ID___x180) > (__UNIQUE_ID___y181) ? (__UNIQUE_ID___x180) : (__UNIQUE_ID___y181)); })) - size;


 if (usize < ksize) {
  memset(dst + size, 0, rest);
 } else if (usize > ksize) {
  int ret = check_zeroed_user(src + size, rest);
  if (ret <= 0)
   return ret ?: -7;
 }

 if (copy_from_user(dst, src, size))
  return -14;
 return 0;
}

bool copy_from_kernel_nofault_allowed(const void *unsafe_src, size_t size);

long copy_from_kernel_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_kernel_nofault(void *dst, const void *src, size_t size);

long copy_from_user_nofault(void *dst, const void *src, size_t size);
long __attribute__((__no_instrument_function__)) copy_to_user_nofault(void *dst, const void *src,
  size_t size);

long strncpy_from_kernel_nofault(char *dst, const void *unsafe_addr,
  long count);

long strncpy_from_user_nofault(char *dst, const void *unsafe_addr,
  long count);
long strnlen_user_nofault(const void *unsafe_addr, long count);
# 12 "./include/linux/sched/task.h" 2

struct task_struct;
struct rusage;
union thread_union;
struct css_set;




struct kernel_clone_args {
 u64 flags;
 int *pidfd;
 int *child_tid;
 int *parent_tid;
 int exit_signal;
 unsigned long stack;
 unsigned long stack_size;
 unsigned long tls;
 pid_t *set_tid;

 size_t set_tid_size;
 int cgroup;
 int io_thread;
 struct cgroup *cgrp;
 struct css_set *cset;
};







extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern int lockdep_tasklist_lock_is_held(void);

extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);

extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_post_fork(struct task_struct *p);
extern void sched_dead(struct task_struct *p);

void __attribute__((__noreturn__)) do_task_dead(void);

extern void proc_caches_init(void);

extern void fork_init(void);

extern void release_task(struct task_struct * p);

extern int copy_thread(unsigned long, unsigned long, unsigned long,
         struct task_struct *, unsigned long);

extern void flush_thread(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_thread(struct task_struct *tsk)
{
}

extern void do_group_exit(int);

extern void exit_files(struct task_struct *);
extern void exit_itimers(struct signal_struct *);

extern pid_t kernel_clone(struct kernel_clone_args *kargs);
struct task_struct *create_io_thread(int (*fn)(void *), void *arg, int node);
struct task_struct *fork_idle(int);
struct mm_struct *copy_init_mm(void);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
extern long kernel_wait4(pid_t, int *, int, struct rusage *);
int kernel_wait(pid_t pid, int *stat);

extern void free_task(struct task_struct *tsk);



extern void sched_exec(void);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *get_task_struct(struct task_struct *t)
{
 refcount_inc(&t->usage);
 return t;
}

extern void __put_task_struct(struct task_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_task_struct(struct task_struct *t)
{
 if (refcount_dec_and_test(&t->usage))
  __put_task_struct(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_task_struct_many(struct task_struct *t, int nr)
{
 if (refcount_sub_and_test(nr, &t->usage))
  __put_task_struct(t);
}

void put_task_struct_rcu_user(struct task_struct *task);
# 135 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{
 *offset = 0;

 *size = (sizeof(struct task_struct)) - __builtin_offsetof(struct task_struct, thread);
}
# 150 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_struct *task_stack_vm_area(const struct task_struct *t)
{
 return ((void *)0);
}
# 166 "./include/linux/sched/task.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_lock(struct task_struct *p)
{
 spin_lock(&p->alloc_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_unlock(struct task_struct *p)
{
 spin_unlock(&p->alloc_lock);
}
# 10 "./include/linux/sched/signal.h" 2
# 1 "./include/linux/cred.h" 1
# 13 "./include/linux/cred.h"
# 1 "./include/linux/key.h" 1
# 17 "./include/linux/key.h"
# 1 "./include/linux/sysctl.h" 1
# 30 "./include/linux/sysctl.h"
# 1 "./include/uapi/linux/sysctl.h" 1
# 35 "./include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 NET_IPV6_RA_DEFRTR_METRIC=28,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "./include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler(struct ctl_table *ctl, int write, void *buffer,
  size_t *lenp, loff_t *ppos);

int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dobool(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_douintvec_minmax(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
int proc_dou8vec_minmax(struct ctl_table *table, int write, void *buffer,
   size_t *lenp, loff_t *ppos);
int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *,
  loff_t *);
int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int, void *,
  size_t *, loff_t *);
int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
int proc_do_static_key(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 98 "./include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 116 "./include/linux/sysctl.h"
struct ctl_table {
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header {
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);
void do_sysctl_args(void);

extern int pwrsw_enabled;
extern int unaligned_enabled;
extern int unaligned_dump_stack;
extern int no_unaligned_warning;

extern struct ctl_table sysctl_mount_point[];
extern struct ctl_table random_table[];
extern struct ctl_table firmware_config_table[];
extern struct ctl_table epoll_table[];
# 246 "./include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write, void *buffer,
  size_t *lenp, loff_t *ppos);
# 18 "./include/linux/key.h" 2


# 1 "./include/linux/assoc_array.h" 1
# 22 "./include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 21 "./include/linux/key.h" 2







typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct net;
# 77 "./include/linux/key.h"
enum key_need_perm {
 KEY_NEED_UNSPECIFIED,
 KEY_NEED_VIEW,
 KEY_NEED_READ,
 KEY_NEED_WRITE,
 KEY_NEED_SEARCH,
 KEY_NEED_LINK,
 KEY_NEED_SETATTR,
 KEY_NEED_UNLINK,
 KEY_SYSADMIN_OVERRIDE,
 KEY_AUTHTOKEN_OVERRIDE,
 KEY_DEFER_PERM_CHECK,
};

struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct key_tag;
struct keyring_list;
struct keyring_name;

struct key_tag {
 struct callback_head rcu;
 refcount_t usage;
 bool removed;
};

struct keyring_index_key {

 unsigned long hash;
 union {
  struct {




   char desc[sizeof(long) - 2];
   u16 desc_len;

  };
  unsigned long x;
 };
 struct key_type *type;
 struct key_tag *domain_tag;
 const char *description;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 147 "./include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}

typedef int (*key_restrict_link_func_t)(struct key *dest_keyring,
     const struct key_type *type,
     const union key_payload *payload,
     struct key *restriction_key);

struct key_restriction {
 key_restrict_link_func_t check;
 struct key *key;
 struct key_type *keytype;
};

enum key_state {
 KEY_IS_UNINSTANTIATED,
 KEY_IS_POSITIVE,
};
# 189 "./include/linux/key.h"
struct key {
 refcount_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };



 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time64_t expiry;
  time64_t revoked_at;
 };
 time64_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;



 short state;






 unsigned long flags;
# 239 "./include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   unsigned long hash;
   unsigned long len_desc;
   struct key_type *type;
   struct key_tag *domain_tag;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
 };
# 274 "./include/linux/key.h"
 struct key_restriction *restrict_link;
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        struct key_restriction *restrict_link);
# 294 "./include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);
extern bool key_put_tag(struct key_tag *tag);
extern void key_remove_domain(struct key_tag *domain_tag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *__key_get(struct key *key)
{
 refcount_inc(&key->usage);
 return key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key_tag(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag,
       const char *callout_info);

extern struct key *request_key_rcu(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         struct key_tag *domain_tag,
         const void *callout_info,
         size_t callout_len,
         void *aux);
# 340 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info)
{
 return request_key_tag(type, description, ((void *)0), callout_info);
}
# 379 "./include/linux/key.h"
extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_move(struct key *key,
      struct key *from_keyring,
      struct key *to_keyring,
      unsigned int flags);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key_restriction *restrict_link,
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload,
    struct key *restriction_key);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description,
    bool recurse);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern int keyring_restrict(key_ref_t keyring, const char *type,
       const char *restriction);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);

extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
     enum key_need_perm need_perm);
extern void key_free_user_ns(struct user_namespace *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) short key_read_state(const struct key *key)
{

 return ({ typeof(*&key->state) ___p1 = ({ do { extern void __compiletime_assert_182(void) ; if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)) || sizeof(*&key->state) == sizeof(long long))) __compiletime_assert_182(); } while (0); (*(const volatile typeof( _Generic((*&key->state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&key->state))) *)&(*&key->state)); }); do { extern void __compiletime_assert_183(void) ; if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)))) __compiletime_assert_183(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); ___p1; });
}
# 457 "./include/linux/key.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_positive(const struct key *key)
{
 return key_read_state(key) == KEY_IS_POSITIVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_negative(const struct key *key)
{
 return key_read_state(key) < 0;
}
# 480 "./include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct cred *new_cred);
extern void key_fsgid_changed(struct cred *new_cred);
extern void key_init(void);
# 14 "./include/linux/cred.h" 2



# 1 "./include/linux/sched/user.h" 1






# 1 "./include/linux/percpu_counter.h" 1
# 20 "./include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "./include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);
void percpu_counter_sync(struct percpu_counter *fbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{

 s64 ret = ({ do { extern void __compiletime_assert_184(void) ; if (!((sizeof(fbc->count) == sizeof(char) || sizeof(fbc->count) == sizeof(short) || sizeof(fbc->count) == sizeof(int) || sizeof(fbc->count) == sizeof(long)) || sizeof(fbc->count) == sizeof(long long))) __compiletime_assert_184(); } while (0); (*(const volatile typeof( _Generic((fbc->count), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (fbc->count))) *)&(fbc->count)); });

 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 181 "./include/linux/percpu_counter.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 8 "./include/linux/sched/user.h" 2

# 1 "./include/linux/ratelimit.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { *(&rs->lock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 100),
     10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & ((((1UL))) << (0))))
  return;

 if (rs->missed) {
  ({ do {} while (0); _printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed); });

  rs->missed = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;
# 10 "./include/linux/sched/user.h" 2




struct user_struct {
 refcount_t __count;

 struct percpu_counter epoll_watches;

 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;






 struct ratelimit_state ratelimit;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_struct *get_uid(struct user_struct *u)
{
 refcount_inc(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);
# 18 "./include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[];
} ;
# 40 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 57 "./include/linux/cred.h"
extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
extern int groups_search(const struct group_info *, kgid_t);

extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern bool may_setgroups(void);
extern void groups_sort(struct group_info *);
# 110 "./include/linux/cred.h"
struct cred {
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;




 struct user_struct *user;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct group_info *group_info;

 union {
  int non_rcu;
  struct callback_head rcu;
 };
} ;

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern int cred_fscmp(const struct cred *, const struct cred *);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) cred_init(void);
extern int set_cred_ucounts(struct cred *);
# 204 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds(const struct cred *cred)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_process_creds(void)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 229 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 248 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return cred;
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return get_new_cred(nonconst_cred);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred_rcu(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return ((void *)0);
 if (!atomic_inc_not_zero(&nonconst_cred->usage))
  return ((void *)0);
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return cred;
}
# 281 "./include/linux/cred.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 if (cred) {
  validate_creds(cred);
  if (atomic_dec_and_test(&(cred)->usage))
   __put_cred(cred);
 }
}
# 393 "./include/linux/cred.h"
extern struct user_namespace init_user_ns;
# 11 "./include/linux/sched/signal.h" 2
# 20 "./include/linux/sched/signal.h"
struct sighand_struct {
 spinlock_t siglock;
 refcount_t count;
 wait_queue_head_t signalfd_wqh;
 struct k_sigaction action[64];
};




struct pacct_struct {
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 u64 ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;
};

struct cpu_itimer {
 u64 expires;
 u64 incr;
};





struct task_cputime_atomic {
 atomic64_t utime;
 atomic64_t stime;
 atomic64_t sum_exec_runtime;
};
# 66 "./include/linux/sched/signal.h"
struct thread_group_cputimer {
 struct task_cputime_atomic cputime_atomic;
};

struct multiprocess_signals {
 sigset_t signal;
 struct hlist_node node;
};
# 82 "./include/linux/sched/signal.h"
struct signal_struct {
 refcount_t sigcnt;
 atomic_t live;
 int nr_threads;
 struct list_head thread_head;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 struct hlist_head multiprocess;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;
# 122 "./include/linux/sched/signal.h"
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;




 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;



 struct posix_cputimers posix_cputimers;


 struct pid *pids[PIDTYPE_MAX];





 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;
# 175 "./include/linux/sched/signal.h"
 seqlock_t stats_lock;
 u64 utime, stime, cutime, cstime;
 u64 gtime;
 u64 cgtime;
 struct prev_cputime prev_cputime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
# 203 "./include/linux/sched/signal.h"
 struct rlimit rlim[16];





 struct taskstats *stats;


 unsigned audit_tty;
 struct tty_audit_buf *tty_audit_buf;






 bool oom_flag_origin;
 short oom_score_adj;
 short oom_score_adj_min;

 struct mm_struct *oom_mm;


 struct mutex cred_guard_mutex;





 struct rw_semaphore exec_update_lock;




} ;
# 259 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_set_stop_flags(struct signal_struct *sig,
      unsigned int flags)
{
 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((sig->flags & (0x00000004|0x00000008)))) { if (!(sig->flags & (0x00000004|0x00000008))) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/sched/signal.h"), "i" (262), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/sched/signal.h"), "i" (262), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (sig->flags & (0x00000004|0x00000008)) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 sig->flags = (sig->flags & ~((0x00000010|0x00000020) | 0x00000001 | 0x00000002)) | flags;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_group_exit(const struct signal_struct *sig)
{
 return (sig->flags & 0x00000004) ||
  (sig->group_exit_task != ((void *)0));
}

extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *task,
     sigset_t *mask, kernel_siginfo_t *info);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernel_dequeue_signal(void)
{
 struct task_struct *task = get_current();
 kernel_siginfo_t __info;
 int ret;

 spin_lock_irq(&task->sighand->siglock);
 ret = dequeue_signal(task, &task->blocked, &__info);
 spin_unlock_irq(&task->sighand->siglock);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_signal_stop(void)
{
 spin_lock_irq(&get_current()->sighand->siglock);
 if (get_current()->jobctl & (1UL << 16))
  do { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(&get_current()->pi_lock); } while (0); do { } while (0); do { do { extern void __compiletime_assert_185(void) ; if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_185(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = (((0x0100 | 0x0004))); } while (0); } while (0); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&get_current()->pi_lock, flags); } while (0); } while (0);
 spin_unlock_irq(&get_current()->sighand->siglock);

 schedule();
}






int force_sig_fault_to_task(int sig, int code, void *addr

 , struct task_struct *t);
int force_sig_fault(int sig, int code, void *addr
                                                                );
int send_sig_fault(int sig, int code, void *addr

 , struct task_struct *t);

int force_sig_mceerr(int code, void *, short);
int send_sig_mceerr(int code, void *, short, struct task_struct *);

int force_sig_bnderr(void *addr, void *lower, void *upper);
int force_sig_pkuerr(void *addr, u32 pkey);
int force_sig_perf(void *addr, u32 type, u64 sig_data);

int force_sig_seccomp(int syscall, int reason, bool force_coredump);
int force_sig_ptrace_errno_trap(int errno, void *addr);
int force_sig_fault_trapno(int sig, int code, void *addr, int trapno);
int send_sig_fault_trapno(int sig, int code, void *addr, int trapno,
   struct task_struct *t);

extern int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern void force_sigsegv(int sig);
extern int force_sig_info(struct kernel_siginfo *);
extern int __kill_pgrp_info(int sig, struct kernel_siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct kernel_siginfo *info, struct pid *pid);
extern int kill_pid_usb_asyncio(int sig, int errno, sigval_t addr, struct pid *,
    const struct cred *);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern __attribute__((__warn_unused_result__)) bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int restart_syscall(void)
{
 set_tsk_thread_flag(get_current(), 1);
 return -513;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_sigpending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,1)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending(struct task_struct *p)
{





 if (__builtin_expect(!!(test_tsk_thread_flag(p, 3)), 0))
  return 1;
 return task_sigpending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __fatal_signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fatal_signal_pending(struct task_struct *p)
{
 return task_sigpending(p) && __fatal_signal_pending(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending_state(unsigned int state, struct task_struct *p)
{
 if (!(state & (0x0001 | 0x0100)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 0x0001) || __fatal_signal_pending(p);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fault_signal_pending(vm_fault_t fault_flags,
     struct pt_regs *regs)
{
 return __builtin_expect(!!((fault_flags & VM_FAULT_RETRY) && (fatal_signal_pending(get_current()) || ((((regs)->msr & (1UL<<(14))) != 0) && signal_pending(get_current())))), 0);


}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);
extern void calculate_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0100 : 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0008 : 0);
}

void task_join_group_stop(struct task_struct *task);
# 475 "./include/linux/sched/signal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_restore_sigmask(void)
{
 get_current()->restore_sigmask = true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_restore_sigmask(struct task_struct *task)
{
 task->restore_sigmask = false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_restore_sigmask(void)
{
 get_current()->restore_sigmask = false;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_restore_sigmask(void)
{
 return get_current()->restore_sigmask;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_tsk_restore_sigmask(struct task_struct *task)
{
 return task->restore_sigmask;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_clear_restore_sigmask(void)
{
 if (!get_current()->restore_sigmask)
  return false;
 get_current()->restore_sigmask = false;
 return true;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&get_current()->saved_sigmask);
}

extern int set_user_sigmask(const sigset_t *umask, size_t sigsetsize);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask_unless(bool interrupted)
{
 if (interrupted)
  ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((!signal_pending(get_current())))) { if (!(!signal_pending(get_current()))) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/sched/signal.h"), "i" (515), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/sched/signal.h"), "i" (515), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (!signal_pending(get_current())) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 else
  restore_saved_sigmask();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &get_current()->blocked;
 if (__builtin_expect(!!(test_restore_sigmask()), 0))
  res = &get_current()->saved_sigmask;
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __on_sig_stack(unsigned long sp)
{




 return sp > get_current()->sas_ss_sp &&
  sp - get_current()->sas_ss_sp <= get_current()->sas_ss_size;

}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int on_sig_stack(unsigned long sp)
{
# 562 "./include/linux/sched/signal.h"
 if (get_current()->sas_ss_flags & (1U << 31))
  return 0;

 return __on_sig_stack(sp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sas_ss_flags(unsigned long sp)
{
 if (!get_current()->sas_ss_size)
  return 2;

 return on_sig_stack(sp) ? 1 : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sas_ss_reset(struct task_struct *p)
{
 p->sas_ss_sp = 0;
 p->sas_ss_size = 0;
 p->sas_ss_flags = 2;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000)), 0) && ! sas_ss_flags(sp))



  return get_current()->sas_ss_sp + get_current()->sas_ss_size;

 return sp;
}

extern void __cleanup_sighand(struct sighand_struct *);
extern void flush_itimer_signals(void);
# 606 "./include/linux/sched/signal.h"
extern bool current_is_single_threaded(void);
# 628 "./include/linux/sched/signal.h"
typedef int (*proc_visitor)(struct task_struct *p, void *data);
void walk_process_tree(struct task_struct *top, proc_visitor, void *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct pid *task_pid_type(struct task_struct *task, enum pid_type type)
{
 struct pid *pid;
 if (type == PIDTYPE_PID)
  pid = task_pid(task);
 else
  pid = task->signal->pids[type];
 return pid;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_tgid(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_TGID];
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_PGID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_session(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_SID];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_nr_threads(struct task_struct *task)
{
 return task->signal->nr_threads;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thread_group_leader(struct task_struct *p)
{
 return p->exit_signal >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return p1->signal == p2->signal;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *next_thread(const struct task_struct *p)
{
 return ({ void *__mptr = (void *)(({ do { extern void __compiletime_assert_186(void) ; if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_186(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); })); do { extern void __compiletime_assert_187(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(({ do { extern void __compiletime_assert_186(void) ; if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_186(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(((struct task_struct *)0)->thread_group)) && !__builtin_types_compatible_p(typeof(*(({ do { extern void __compiletime_assert_186(void) ; if (!((sizeof(p->thread_group.next) == sizeof(char) || sizeof(p->thread_group.next) == sizeof(short) || sizeof(p->thread_group.next) == sizeof(int) || sizeof(p->thread_group.next) == sizeof(long)) || sizeof(p->thread_group.next) == sizeof(long long))) __compiletime_assert_186(); } while (0); (*(const volatile typeof( _Generic((p->thread_group.next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (p->thread_group.next))) *)&(p->thread_group.next)); }))), typeof(void))))) __compiletime_assert_187(); } while (0); ((struct task_struct *)(__mptr - __builtin_offsetof(struct task_struct, thread_group))); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}




extern bool thread_group_exited(struct pid *pid);

extern struct sighand_struct *__lock_task_sighand(struct task_struct *task,
       unsigned long *flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sighand_struct *lock_task_sighand(struct task_struct *task,
             unsigned long *flags)
{
 struct sighand_struct *ret;

 ret = __lock_task_sighand(task, flags);
 (void)(ret);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_task_sighand(struct task_struct *task,
      unsigned long *flags)
{
 spin_unlock_irqrestore(&task->sighand->siglock, *flags);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_assert_task_sighand_held(struct task_struct *task) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { extern void __compiletime_assert_188(void) ; if (!((sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_cur) == sizeof(long long))) __compiletime_assert_188(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_cur), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_cur))) *)&(task->signal->rlim[limit].rlim_cur)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit_max(const struct task_struct *task,
  unsigned int limit)
{
 return ({ do { extern void __compiletime_assert_189(void) ; if (!((sizeof(task->signal->rlim[limit].rlim_max) == sizeof(char) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(short) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(int) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long)) || sizeof(task->signal->rlim[limit].rlim_max) == sizeof(long long))) __compiletime_assert_189(); } while (0); (*(const volatile typeof( _Generic((task->signal->rlim[limit].rlim_max), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (task->signal->rlim[limit].rlim_max))) *)&(task->signal->rlim[limit].rlim_max)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit(unsigned int limit)
{
 return task_rlimit(get_current(), limit);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max(get_current(), limit);
}
# 7 "./include/linux/rcuwait.h" 2
# 16 "./include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcuwait_active(struct rcuwait *w)
{
 return !!({ typeof(*(w->task)) *_________p1 = (typeof(*(w->task)) *)({ do { extern void __compiletime_assert_190(void) ; if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_190(); } while (0); (*(const volatile typeof( _Generic(((w->task)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((w->task)))) *)&((w->task))); }); ; ((typeof(*(w->task)) *)(_________p1)); });
}

extern int rcuwait_wake_up(struct rcuwait *w);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prepare_to_rcuwait(struct rcuwait *w)
{
 do { uintptr_t _r_a_p__v = (uintptr_t)(get_current()); ; if (__builtin_constant_p(get_current()) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_191(void) ; if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_191(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_192(void) ; if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_192(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_193(void) ; if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_193(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void finish_rcuwait(struct rcuwait *w)
{
        do { uintptr_t _r_a_p__v = (uintptr_t)(((void *)0)); ; if (__builtin_constant_p(((void *)0)) && (_r_a_p__v) == (uintptr_t)((void *)0)) do { do { extern void __compiletime_assert_194(void) ; if (!((sizeof((w->task)) == sizeof(char) || sizeof((w->task)) == sizeof(short) || sizeof((w->task)) == sizeof(int) || sizeof((w->task)) == sizeof(long)) || sizeof((w->task)) == sizeof(long long))) __compiletime_assert_194(); } while (0); do { *(volatile typeof((w->task)) *)&((w->task)) = ((typeof(w->task))(_r_a_p__v)); } while (0); } while (0); else do { do { extern void __compiletime_assert_195(void) ; if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)))) __compiletime_assert_195(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); do { do { extern void __compiletime_assert_196(void) ; if (!((sizeof(*&w->task) == sizeof(char) || sizeof(*&w->task) == sizeof(short) || sizeof(*&w->task) == sizeof(int) || sizeof(*&w->task) == sizeof(long)) || sizeof(*&w->task) == sizeof(long long))) __compiletime_assert_196(); } while (0); do { *(volatile typeof(*&w->task) *)&(*&w->task) = ((typeof(*((typeof(w->task))_r_a_p__v)) *)((typeof(w->task))_r_a_p__v)); } while (0); } while (0); } while (0); } while (0);
 do { do { } while (0); do { do { extern void __compiletime_assert_197(void) ; if (!((sizeof(get_current()->__state) == sizeof(char) || sizeof(get_current()->__state) == sizeof(short) || sizeof(get_current()->__state) == sizeof(int) || sizeof(get_current()->__state) == sizeof(long)) || sizeof(get_current()->__state) == sizeof(long long))) __compiletime_assert_197(); } while (0); do { *(volatile typeof(get_current()->__state) *)&(get_current()->__state) = ((0x0000)); } while (0); } while (0); } while (0);
}
# 8 "./include/linux/percpu-rwsem.h" 2

# 1 "./include/linux/rcu_sync.h" 1
# 17 "./include/linux/rcu_sync.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 32 "./include/linux/rcu_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{
 do { } while (0 && (!rcu_read_lock_any_held()));

 return !({ do { extern void __compiletime_assert_198(void) ; if (!((sizeof(rsp->gp_state) == sizeof(char) || sizeof(rsp->gp_state) == sizeof(short) || sizeof(rsp->gp_state) == sizeof(int) || sizeof(rsp->gp_state) == sizeof(long)) || sizeof(rsp->gp_state) == sizeof(long long))) __compiletime_assert_198(); } while (0); (*(const volatile typeof( _Generic((rsp->gp_state), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (rsp->gp_state))) *)&(rsp->gp_state)); });
}

extern void rcu_sync_init(struct rcu_sync *);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "./include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rcuwait writer;
 wait_queue_head_t waiters;
 atomic_t block;



};
# 45 "./include/linux/percpu-rwsem.h"
extern bool __percpu_down_read(struct percpu_rw_semaphore *, bool);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 do { do { } while (0); } while (0);

 do { } while (0);

 __asm__ __volatile__("": : :"memory");
# 62 "./include/linux/percpu-rwsem.h"
 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  __percpu_down_read(sem, false);




 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 bool ret = true;

 __asm__ __volatile__("": : :"memory");



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ret = __percpu_down_read(sem, true);
 __asm__ __volatile__("": : :"memory");





 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 do { } while (0);

 __asm__ __volatile__("": : :"memory");



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1)) {
  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 } else {




  __asm__ __volatile__ ("sync" : : : "memory");





  do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(*sem->read_count))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  rcuwait_wake_up(&sem->writer);
 }
 __asm__ __volatile__("": : :"memory");
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 141 "./include/linux/percpu-rwsem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);
}
# 34 "./include/linux/fs.h" 2

# 1 "./include/linux/delayed_call.h" 1
# 10 "./include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 36 "./include/linux/fs.h" 2
# 1 "./include/linux/uuid.h" 1
# 11 "./include/linux/uuid.h"
# 1 "./include/uapi/linux/uuid.h" 1
# 23 "./include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "./include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 12 "./include/linux/uuid.h" 2




typedef struct {
 __u8 b[16];
} uuid_t;
# 33 "./include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void import_guid(guid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void export_guid(__u8 *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void import_uuid(uuid_t *dst, const __u8 *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void export_uuid(__u8 *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);
void generate_random_guid(unsigned char guid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 37 "./include/linux/fs.h" 2
# 1 "./include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 38 "./include/linux/fs.h" 2
# 1 "./include/linux/ioprio.h" 1





# 1 "./include/linux/sched/rt.h" 1






struct task_struct;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_prio(int prio)
{
 if (__builtin_expect(!!(prio < 100), 0))
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_task(struct task_struct *p)
{
 return rt_prio(p->prio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_is_realtime(struct task_struct *tsk)
{
 int policy = tsk->policy;

 if (policy == 1 || policy == 2)
  return true;
 if (policy == 6)
  return true;
 return false;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *rt_mutex_get_top_task(struct task_struct *p)
{
 return p->pi_top_task;
}
extern void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task);
extern void rt_mutex_adjust_pi(struct task_struct *p);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool tsk_is_pi_blocked(struct task_struct *tsk)
{
 return tsk->pi_blocked_on != ((void *)0);
}
# 58 "./include/linux/sched/rt.h"
extern void normalize_rt_tasks(void);
# 7 "./include/linux/ioprio.h" 2
# 1 "./include/linux/iocontext.h" 1








enum {
 ICQ_EXITED = 1 << 2,
 ICQ_DESTROYED = 1 << 3,
};
# 73 "./include/linux/iocontext.h"
struct io_cq {
 struct request_queue *q;
 struct io_context *ioc;







 union {
  struct list_head q_node;
  struct kmem_cache *__rcu_icq_cache;
 };
 union {
  struct hlist_node ioc_node;
  struct callback_head __rcu_head;
 };

 unsigned int flags;
};





struct io_context {
 atomic_long_t refcount;
 atomic_t active_ref;
 atomic_t nr_tasks;


 spinlock_t lock;

 unsigned short ioprio;

 struct xarray icq_tree;
 struct io_cq *icq_hint;
 struct hlist_head icq_list;

 struct work_struct release_work;
};
# 124 "./include/linux/iocontext.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_io_context_active(struct io_context *ioc)
{
 ({ int __ret_warn_on = !!(atomic_long_read(&ioc->refcount) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/iocontext.h"), "i" (126), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(atomic_read(&ioc->active_ref) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/iocontext.h"), "i" (127), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_long_inc(&ioc->refcount);
 atomic_inc(&ioc->active_ref);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioc_task_link(struct io_context *ioc)
{
 get_io_context_active(ioc);

 ({ int __ret_warn_on = !!(atomic_read(&ioc->nr_tasks) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/iocontext.h"), "i" (136), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_inc(&ioc->nr_tasks);
}

struct task_struct;

void put_io_context(struct io_context *ioc);
void put_io_context_active(struct io_context *ioc);
void exit_io_context(struct task_struct *task);
struct io_context *get_task_io_context(struct task_struct *task,
           gfp_t gfp_flags, int node);
# 8 "./include/linux/ioprio.h" 2

# 1 "./include/uapi/linux/ioprio.h" 1
# 27 "./include/uapi/linux/ioprio.h"
enum {
 IOPRIO_CLASS_NONE,
 IOPRIO_CLASS_RT,
 IOPRIO_CLASS_BE,
 IOPRIO_CLASS_IDLE,
};







enum {
 IOPRIO_WHO_PROCESS = 1,
 IOPRIO_WHO_PGRP,
 IOPRIO_WHO_USER,
};
# 10 "./include/linux/ioprio.h" 2
# 19 "./include/linux/ioprio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ioprio_valid(unsigned short ioprio)
{
 unsigned short class = (((ioprio) >> 13) & 0x07);

 return class > IOPRIO_CLASS_NONE && class <= IOPRIO_CLASS_IDLE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioprio(struct task_struct *task)
{
 return (task_nice(task) + 20) / 5;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioclass(struct task_struct *task)
{
 if (task->policy == 5)
  return IOPRIO_CLASS_IDLE;
 else if (task_is_realtime(task))
  return IOPRIO_CLASS_RT;
 else
  return IOPRIO_CLASS_BE;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_current_ioprio(void)
{
 struct io_context *ioc = get_current()->io_context;

 if (ioc)
  return ioc->ioprio;
 return ((((IOPRIO_CLASS_BE) & 0x07) << 13) | ((4) & ((1UL << 13) - 1)));
}




extern int ioprio_best(unsigned short aprio, unsigned short bprio);

extern int set_task_ioprio(struct task_struct *task, int ioprio);


extern int ioprio_check_cap(int ioprio);
# 39 "./include/linux/fs.h" 2
# 1 "./include/linux/fs_types.h" 1
# 71 "./include/linux/fs_types.h"
extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
extern unsigned char fs_umode_to_ftype(umode_t mode);
extern unsigned char fs_umode_to_dtype(umode_t mode);
# 40 "./include/linux/fs.h" 2


# 1 "./include/linux/mount.h" 1
# 20 "./include/linux/mount.h"
struct super_block;
struct vfsmount;
struct dentry;
struct mnt_namespace;
struct fs_context;
# 71 "./include/linux/mount.h"
struct vfsmount {
 struct dentry *mnt_root;
 struct super_block *mnt_sb;
 int mnt_flags;
 struct user_namespace *mnt_userns;
} ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *mnt_user_ns(const struct vfsmount *mnt)
{

 return ({ typeof(*&mnt->mnt_userns) ___p1 = ({ do { extern void __compiletime_assert_199(void) ; if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)) || sizeof(*&mnt->mnt_userns) == sizeof(long long))) __compiletime_assert_199(); } while (0); (*(const volatile typeof( _Generic((*&mnt->mnt_userns), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*&mnt->mnt_userns))) *)&(*&mnt->mnt_userns)); }); do { extern void __compiletime_assert_200(void) ; if (!((sizeof(*&mnt->mnt_userns) == sizeof(char) || sizeof(*&mnt->mnt_userns) == sizeof(short) || sizeof(*&mnt->mnt_userns) == sizeof(int) || sizeof(*&mnt->mnt_userns) == sizeof(long)))) __compiletime_assert_200(); } while (0); __asm__ __volatile__ ("lwsync" " " : : :"memory"); ___p1; });
}

struct file;
struct path;

extern int mnt_want_write(struct vfsmount *mnt);
extern int mnt_want_write_file(struct file *file);
extern void mnt_drop_write(struct vfsmount *mnt);
extern void mnt_drop_write_file(struct file *file);
extern void mntput(struct vfsmount *mnt);
extern struct vfsmount *mntget(struct vfsmount *mnt);
extern struct vfsmount *mnt_clone_internal(const struct path *path);
extern bool __mnt_is_readonly(struct vfsmount *mnt);
extern bool mnt_may_suid(struct vfsmount *mnt);

struct path;
extern struct vfsmount *clone_private_mount(const struct path *path);
extern int __mnt_want_write(struct vfsmount *);
extern void __mnt_drop_write(struct vfsmount *);

struct file_system_type;
extern struct vfsmount *fc_mount(struct fs_context *fc);
extern struct vfsmount *vfs_create_mount(struct fs_context *fc);
extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
          int flags, const char *name,
          void *data);
extern struct vfsmount *vfs_submount(const struct dentry *mountpoint,
         struct file_system_type *type,
         const char *name, void *data);

extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
extern void mark_mounts_for_expiry(struct list_head *mounts);

extern dev_t name_to_dev_t(const char *name);

extern unsigned int sysctl_mount_max;

extern bool path_is_mountpoint(const struct path *path);

extern void kern_unmount_array(struct vfsmount *mnt[], unsigned int num);
# 43 "./include/linux/fs.h" 2



# 1 "./include/uapi/linux/fs.h" 1
# 14 "./include/uapi/linux/fs.h"
# 1 "./include/uapi/linux/ioctl.h" 1




# 1 "./arch/powerpc/include/uapi/asm/ioctl.h" 1
# 12 "./arch/powerpc/include/uapi/asm/ioctl.h"
# 1 "./include/asm-generic/ioctl.h" 1




# 1 "./include/uapi/asm-generic/ioctl.h" 1
# 6 "./include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 13 "./arch/powerpc/include/uapi/asm/ioctl.h" 2
# 6 "./include/uapi/linux/ioctl.h" 2
# 15 "./include/uapi/linux/fs.h" 2
# 54 "./include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 287 "./include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 47 "./include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct export_operations;
struct fiemap_extent_info;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;
struct fs_context;
struct fs_parameter_spec;
struct fileattr;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) inode_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 222 "./include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};




# 1 "./include/linux/quota.h" 1
# 42 "./include/linux/quota.h"
# 1 "./include/uapi/linux/dqblk_xfs.h" 1
# 53 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;


 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s8 d_itimer_hi;
 __s8 d_btimer_hi;
 __s8 d_rtbtimer_hi;
 __s8 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 159 "./include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 202 "./include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u16 qs_rtbwarnlimit;
 __u16 qs_pad3;
 __u32 qs_pad4;
 __u64 qs_pad2[7];
};
# 43 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v1.h" 1
# 44 "./include/linux/quota.h" 2
# 1 "./include/linux/dqblk_v2.h" 1








# 1 "./include/linux/dqblk_qtree.h" 1
# 18 "./include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "./include/linux/dqblk_v2.h" 2
# 45 "./include/linux/quota.h" 2



# 1 "./include/linux/projid.h" 1
# 17 "./include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
# 49 "./include/linux/quota.h" 2
# 1 "./include/uapi/linux/quota.h" 1
# 90 "./include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "./include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "./include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "./include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "./include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/quota.h"), "i" (114), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/quota.h"), "i" (141), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "./include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int info_dirty(struct mem_dqinfo *info)
{
 return arch_test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 unsigned long stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats dqstats;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 294 "./include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 395 "./include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;
 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 464 "./include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 491 "./include/linux/quota.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { extern void __compiletime_assert_201(void) ; if (!(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0)))) __compiletime_assert_201(); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype)
{
 return;
}


struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 244 "./include/linux/fs.h" 2
# 277 "./include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 290 "./include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;
struct readahead_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 325 "./include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 union {
  unsigned int ki_cookie;
  struct wait_page_queue *ki_waitq;
 };


};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 359 "./include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);
 void (*readahead)(struct readahead_control *);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);
# 459 "./include/linux/fs.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 struct rw_semaphore invalidate_lock;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;




 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) ;
# 494 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
{
 return xa_marked(&mapping->i_pages, tag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i_mmap_trylock_write(struct address_space *mapping)
{
 return down_write_trylock(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_assert_write_locked(struct address_space *mapping)
{
 do { (void)(&mapping->i_mmap_rwsem); } while (0);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ do { extern void __compiletime_assert_202(void) ; if (!((sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(char) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(short) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(int) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long)) || sizeof((&mapping->i_mmap.rb_root)->rb_node) == sizeof(long long))) __compiletime_assert_202(); } while (0); (*(const volatile typeof( _Generic(((&mapping->i_mmap.rb_root)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&mapping->i_mmap.rb_root)->rb_node))) *)&((&mapping->i_mmap.rb_root)->rb_node)); }) == ((void *)0));
}
# 551 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 589 "./include/linux/fs.h"
struct posix_acl;
# 598 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;






 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;
# 688 "./include/linux/fs.h"
 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;
# 732 "./include/linux/fs.h"
 void *i_private;
} ;

struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}
# 774 "./include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock(struct address_space *mapping)
{
 down_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock(struct address_space *mapping)
{
 up_write(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_lock_shared(struct address_space *mapping)
{
 down_read(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_invalidate_trylock_shared(
     struct address_space *mapping)
{
 return down_read_trylock(&mapping->invalidate_lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_invalidate_unlock_shared(
     struct address_space *mapping)
{
 up_read(&mapping->invalidate_lock);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);

void filemap_invalidate_lock_two(struct address_space *mapping1,
     struct address_space *mapping2);
void filemap_invalidate_unlock_two(struct address_space *mapping1,
       struct address_space *mapping2);
# 875 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t i_size_read(const struct inode *inode)
{
# 894 "./include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 916 "./include/linux/fs.h"
 inode->i_size = i_size;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};
# 947 "./include/linux/fs.h"
struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;
 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;




 void *private_data;



 struct hlist_head *f_ep;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
 errseq_t f_sb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 1056 "./include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
 bool (*lm_breaker_owns_lease)(struct file_lock *);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);


# 1 "./include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1093 "./include/linux/fs.h" 2
# 1111 "./include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1163 "./include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);

struct notifier_block;
extern int lease_register_notifier(struct notifier_block *);
extern void lease_unregister_notifier(struct notifier_block *);

struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1348 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1448 "./include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;



 const struct xattr_handler **s_xattr;
# 1498 "./include/linux/fs.h"
 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 time64_t s_time_min;
 time64_t s_time_max;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;





 atomic_long_t s_fsnotify_connectors;


 int s_readonly_remount;


 errseq_t s_wb_err;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << 7))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}
# 1637 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_into_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return make_kuid(mnt_userns, __kuid_val(kuid));
}
# 1651 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_into_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return make_kgid(mnt_userns, __kgid_val(kgid));
}
# 1665 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t i_uid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kuid_into_mnt(mnt_userns, inode->i_uid);
}
# 1679 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t i_gid_into_mnt(struct user_namespace *mnt_userns,
        const struct inode *inode)
{
 return kgid_into_mnt(mnt_userns, inode->i_gid);
}
# 1693 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t kuid_from_mnt(struct user_namespace *mnt_userns,
       kuid_t kuid)
{
 return (kuid_t){ from_kuid(mnt_userns, kuid) };
}
# 1707 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t kgid_from_mnt(struct user_namespace *mnt_userns,
       kgid_t kgid)
{
 return (kgid_t){ from_kgid(mnt_userns, kgid) };
}
# 1725 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kuid_t mapped_fsuid(struct user_namespace *mnt_userns)
{
 return kuid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsuid; })));
}
# 1742 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kgid_t mapped_fsgid(struct user_namespace *mnt_userns)
{
 return kgid_from_mnt(mnt_userns, (({ ({ do { } while (0 && (!((1)))); ; ((typeof(*(get_current()->cred)) *)((get_current()->cred))); })->fsgid; })));
}
# 1755 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsuid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_uid = mapped_fsuid(mnt_userns);
}
# 1769 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fsgid_set(struct inode *inode,
       struct user_namespace *mnt_userns)
{
 inode->i_gid = mapped_fsgid(mnt_userns);
}
# 1786 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fsuidgid_has_mapping(struct super_block *sb,
     struct user_namespace *mnt_userns)
{
 struct user_namespace *s_user_ns = sb->s_user_ns;

 return kuid_has_mapping(s_user_ns, mapped_fsuid(mnt_userns)) &&
        kgid_has_mapping(s_user_ns, mapped_fsgid(mnt_userns));
}

extern struct timespec64 current_time(struct inode *inode);
# 1805 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sb_end_write(struct super_block *sb, int level)
{
 percpu_up_read(sb->s_writers.rw_sem + level-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __sb_start_write(struct super_block *sb, int level)
{
 percpu_down_read(sb->s_writers.rw_sem + level - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __sb_start_write_trylock(struct super_block *sb, int level)
{
 return percpu_down_read_trylock(sb->s_writers.rw_sem + level - 1);
}
# 1832 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1844 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1856 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1880 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_WRITE);
}
# 1909 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1927 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_start_intwrite_trylock(struct super_block *sb)
{
 return __sb_start_write_trylock(sb, SB_FREEZE_FS);
}

bool inode_owner_or_capable(struct user_namespace *mnt_userns,
       const struct inode *inode);




int vfs_create(struct user_namespace *, struct inode *,
        struct dentry *, umode_t, bool);
int vfs_mkdir(struct user_namespace *, struct inode *,
       struct dentry *, umode_t);
int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *,
              umode_t, dev_t);
int vfs_symlink(struct user_namespace *, struct inode *,
  struct dentry *, const char *);
int vfs_link(struct dentry *, struct user_namespace *, struct inode *,
      struct dentry *, struct inode **);
int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *,
        struct inode **);
# 1968 "./include/linux/fs.h"
struct renamedata {
 struct user_namespace *old_mnt_userns;
 struct inode *old_dir;
 struct dentry *old_dentry;
 struct user_namespace *new_mnt_userns;
 struct inode *new_dir;
 struct dentry *new_dentry;
 struct inode **delegated_inode;
 unsigned int flags;
} ;

int vfs_rename(struct renamedata *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_whiteout(struct user_namespace *mnt_userns,
          struct inode *dir, struct dentry *dentry)
{
 return vfs_mknod(mnt_userns, dir, dentry, 0020000 | 0,
    0);
}

struct dentry *vfs_tmpfile(struct user_namespace *mnt_userns,
      struct dentry *dentry, umode_t mode, int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

int vfs_fchown(struct file *file, uid_t user, gid_t group);
int vfs_fchmod(struct file *file, umode_t mode);
int vfs_utimes(const struct path *path, struct timespec64 *times);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);


extern long compat_ptr_ioctl(struct file *file, unsigned int cmd,
     unsigned long arg);







void inode_init_owner(struct user_namespace *mnt_userns, struct inode *inode,
        const struct inode *dir, umode_t mode);
extern bool may_open_dev(const struct path *path);







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};
# 2069 "./include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, bool spin);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct user_namespace *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int, bool);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct user_namespace *, struct inode *,struct dentry *,
         umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct user_namespace *, struct inode *,struct dentry *,
   const char *);
 int (*mkdir) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct user_namespace *, struct inode *,struct dentry *,
        umode_t,dev_t);
 int (*rename) (struct user_namespace *, struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct user_namespace *, struct dentry *,
   struct iattr *);
 int (*getattr) (struct user_namespace *, const struct path *,
   struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct user_namespace *, struct inode *,
   struct dentry *, umode_t);
 int (*set_acl)(struct user_namespace *, struct inode *,
         struct posix_acl *, int);
 int (*fileattr_set)(struct user_namespace *mnt_userns,
       struct dentry *dentry, struct fileattr *fa);
 int (*fileattr_get)(struct dentry *dentry, struct fileattr *fa);
} __attribute__((__aligned__((1 << 7))));

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);





 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 2269 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 2299 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool HAS_UNMAPPED_ID(struct user_namespace *mnt_userns,
       struct inode *inode)
{
 return !uid_valid(i_uid_into_mnt(mnt_userns, inode)) ||
        !gid_valid(i_gid_into_mnt(mnt_userns, inode));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = ki_hint_validate(file_write_hint(filp)),
  .ki_ioprio = get_current_ioprio(),
 };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kiocb_clone(struct kiocb *kiocb, struct kiocb *kiocb_src,
          struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = kiocb_src->ki_flags,
  .ki_hint = kiocb_src->ki_hint,
  .ki_ioprio = kiocb_src->ki_ioprio,
  .ki_pos = kiocb_src->ki_pos,
 };
}
# 2449 "./include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}
# 2469 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_dirtytime_only(struct inode *inode)
{
 return (inode->i_state & ((1 << 11) | (1 << 3) |
      (1 << 5) | (1 << 4))) == (1 << 11);
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;
# 2522 "./include/linux/fs.h"
 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_spec *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key invalidate_lock_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 2589 "./include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_lease(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__ ("sync" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg(struct inode *inode, unsigned int mode)
{






 __asm__ __volatile__ ("sync" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_layout(struct inode *inode, bool wait)
{
 __asm__ __volatile__ ("sync" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2713 "./include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *file_mnt_user_ns(struct file *file)
{
 return mnt_user_ns(file->f_path.mnt);
}
extern long vfs_truncate(const struct path *, loff_t);
int do_truncate(struct user_namespace *, struct dentry *, loff_t start,
  unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(const struct path *,
       const char *, int, umode_t);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_open_root_mnt(struct vfsmount *mnt,
       const char *name, int flags, umode_t mode)
{
 return file_open_root(&(struct path){.mnt = mnt, .dentry = mnt->mnt_root},
         name, flags, mode);
}
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname_uflags(const char *, int);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;




extern struct super_block *blockdev_superblock;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return 1 && sb == blockdev_superblock;
}

void emergency_thaw_all(void);
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;
# 2791 "./include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}

extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

void invalidate_mapping_pagevec(struct address_space *mapping,
    unsigned long start, unsigned long end,
    unsigned long *nr_pagevec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern bool filemap_range_needs_writeback(struct address_space *,
       loff_t lstart, loff_t lend);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);
int filemap_fdatawrite_wbc(struct address_space *mapping,
      struct writeback_control *wbc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_write_and_wait(struct address_space *mapping)
{
 return filemap_write_and_wait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 2893 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2910 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2923 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}
# 2935 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t file_sample_sb_err(struct file *file)
{
 return errseq_sample(&file->f_path.dentry->d_sb->s_wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000002)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & ( int) (( __kernel_rwf_t)0x00000004)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);


extern int bmap(struct inode *inode, sector_t *block);







int notify_change(struct user_namespace *, struct dentry *,
    struct iattr *, struct inode **);
int inode_permission(struct user_namespace *, struct inode *, int);
int generic_permission(struct user_namespace *, struct inode *, int);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_permission(struct file *file, int mask)
{
 return inode_permission(file_mnt_user_ns(file),
    file_inode(file), mask);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_permission(const struct path *path, int mask)
{
 return inode_permission(mnt_user_ns(path->mnt),
    d_inode(path->dentry), mask);
}
int __check_sticky(struct user_namespace *mnt_userns, struct inode *dir,
     struct inode *inode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_wrong_type(const struct inode *inode, umode_t mode)
{
 return (inode->i_mode ^ mode) & 00170000;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 sb_start_write(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return sb_start_write_trylock(file_inode(file)->i_sb);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 3041 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_dec(struct inode *inode)
{
 do { if (__builtin_constant_p(!atomic_read(&inode->i_readcount))) { if (!atomic_read(&inode->i_readcount)) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/fs.h"), "i" (3067), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/fs.h"), "i" (3067), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(!atomic_read(&inode->i_readcount)))); } } while (0);
 atomic_dec(&inode->i_readcount);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_inc(struct inode *inode)
{
 atomic_inc(&inode->i_readcount);
}
# 3084 "./include/linux/fs.h"
extern int do_pipe_flags(int *, int);

extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
ssize_t __kernel_read(struct file *file, void *buf, size_t count, loff_t *pos);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}
extern void d_mark_dontcache(struct inode *inode);

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern struct inode *find_inode_rcu(struct super_block *, unsigned long,
        int (*)(struct inode *, void *), void *);
extern struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);
# 3161 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zero_ino(ino_t ino)
{
 return (u32)ino == 0;
}

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);
extern void inode_add_lru(struct inode *inode);

extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_write_check_limits(struct file *file, loff_t pos,
  loff_t *count);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
ssize_t filemap_read(struct kiocb *iocb, struct iov_iter *to,
  ssize_t already_read);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iocb_iter_read(struct file *file, struct kiocb *iocb,
      struct iov_iter *iter);
ssize_t vfs_iocb_iter_write(struct file *file, struct kiocb *iocb,
       struct iov_iter *iter);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,
};

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3282 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3294 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}




void dio_warn_stale_pagecache(struct file *filp);

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
void generic_fill_statx_attr(struct inode *inode, struct kstat *stat);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

int vfs_fstatat(int dfd, const char *filename, struct kstat *stat,
  int flags);
int vfs_fstat(int fd, struct kstat *stat);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_fstatat(-100, filename, stat, 0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_fstatat(-100, name, stat, 0x100);
}

extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct user_namespace *, struct dentry *,
     struct iattr *);
extern int simple_getattr(struct user_namespace *, const struct path *,
     struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct user_namespace *, struct inode *,
    struct dentry *, struct inode *, struct dentry *,
    unsigned int);
extern void simple_recursive_removal(struct dentry *,
                              void (*callback)(struct dentry *));
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern const struct address_space_operations ram_aops;
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);

extern void generic_set_encrypted_ci_d_ops(struct dentry *dentry);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);
extern int buffer_migrate_page_norefs(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);





int may_setattr(struct user_namespace *mnt_userns, struct inode *inode,
  unsigned int ia_valid);
int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
void setattr_copy(struct user_namespace *, struct inode *inode,
    const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_dax(const struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & (1 << 13));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!1 || !vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= ( int) (( __kernel_rwf_t)0x00000010);
 if (file->f_flags & 0400000)
  res |= (1 << 17);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & (1 << 0))))
  res |= ( int) (( __kernel_rwf_t)0x00000002);
 if (file->f_flags & 04000000)
  res |= ( int) (( __kernel_rwf_t)0x00000004);
 return res;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 int kiocb_flags = 0;


 do { extern void __compiletime_assert_203(void) ; if (!(!(( int) ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)) & (1 << 16)))) __compiletime_assert_203(); } while (0);

 if (!flags)
  return 0;
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  kiocb_flags |= (1 << 20);
 }
 kiocb_flags |= ( int) (flags & ((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010)));
 if (flags & (( __kernel_rwf_t)0x00000004))
  kiocb_flags |= ( int) (( __kernel_rwf_t)0x00000002);

 ki->ki_flags |= kiocb_flags;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3571 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) list_bdev_fs_names(char *buf, size_t size);
# 3602 "./include/linux/fs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_sticky(struct user_namespace *mnt_userns,
          struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(mnt_userns, dir, inode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= (1 << 12);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & (1 << 4));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & (1 << 4));
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);
extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
      int advice);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 9 "./include/linux/huge_mm.h" 2

vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf);
int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
void huge_pmd_set_accessed(struct vm_fault *vmf);
int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
    struct vm_area_struct *vma);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud)
{
}


vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf);
struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr, pmd_t *pmd,
       unsigned int flags);
bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,
      pmd_t *pmd, unsigned long addr, unsigned long next);
int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr);
int zap_huge_pud(struct mmu_gather *tlb, struct vm_area_struct *vma, pud_t *pud,
   unsigned long addr);
bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,
     unsigned long new_addr, pmd_t *old_pmd, pmd_t *new_pmd);
int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd, unsigned long addr,
      pgprot_t newprot, unsigned long cp_flags);
vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 55 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_pfn_pmd(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pmd_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}
vm_fault_t vmf_insert_pfn_pud_prot(struct vm_fault *vmf, pfn_t pfn,
       pgprot_t pgprot, bool write);
# 74 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_pfn_pud(struct vm_fault *vmf, pfn_t pfn,
         bool write)
{
 return vmf_insert_pfn_pud_prot(vmf, pfn, vmf->vma->vm_page_prot, write);
}

enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_NEVER_DAX,
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,
};

struct kobject;
struct kobj_attribute;

ssize_t single_hugepage_flag_store(struct kobject *kobj,
       struct kobj_attribute *attr,
       const char *buf, size_t count,
       enum transparent_hugepage_flag flag);
ssize_t single_hugepage_flag_show(struct kobject *kobj,
      struct kobj_attribute *attr, char *buf,
      enum transparent_hugepage_flag flag);
extern struct kobj_attribute shmem_enabled_attr;
# 116 "./include/linux/huge_mm.h"
extern unsigned long transparent_hugepage_flags;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transhuge_vma_suitable(struct vm_area_struct *vma,
  unsigned long haddr)
{

 if (!vma_is_anonymous(vma)) {
  if (!((((vma->vm_start >> 16) - vma->vm_pgoff) & ((typeof((vma->vm_start >> 16) - vma->vm_pgoff))((1<<((16 + __pte_index_size)-16))) - 1)) == 0))

   return false;
 }

 if (haddr < vma->vm_start || haddr + ((1UL) << (16 + __pte_index_size)) > vma->vm_end)
  return false;
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transhuge_vma_enabled(struct vm_area_struct *vma,
       unsigned long vm_flags)
{

 if ((vm_flags & 0x40000000) ||
     arch_test_bit(24, &vma->vm_mm->flags))
  return false;
 return true;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
{




 if (transparent_hugepage_flags & (1 << TRANSPARENT_HUGEPAGE_NEVER_DAX))
  return false;

 if (!transhuge_vma_enabled(vma, vma->vm_flags))
  return false;

 if (vma_is_temporary_stack(vma))
  return false;

 if (transparent_hugepage_flags & (1 << TRANSPARENT_HUGEPAGE_FLAG))
  return true;

 if (vma_is_dax(vma))
  return true;

 if (transparent_hugepage_flags &
    (1 << TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG))
  return !!(vma->vm_flags & 0x20000000);

 return false;
}

bool transparent_hugepage_active(struct vm_area_struct *vma);





unsigned long thp_get_unmapped_area(struct file *filp, unsigned long addr,
  unsigned long len, unsigned long pgoff, unsigned long flags);

void prep_transhuge_page(struct page *page);
void free_transhuge_page(struct page *page);
bool is_transparent_hugepage(struct page *page);

bool can_split_huge_page(struct page *page, int *pextra_pins);
int split_huge_page_to_list(struct page *page, struct list_head *list);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int split_huge_page(struct page *page)
{
 return split_huge_page_to_list(page, ((void *)0));
}
void deferred_split_huge_page(struct page *page);

void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
  unsigned long address, bool freeze, struct page *page);
# 209 "./include/linux/huge_mm.h"
void split_huge_pmd_address(struct vm_area_struct *vma, unsigned long address,
  bool freeze, struct page *page);

void __split_huge_pud(struct vm_area_struct *vma, pud_t *pud,
  unsigned long address);
# 223 "./include/linux/huge_mm.h"
int hugepage_madvise(struct vm_area_struct *vma, unsigned long *vm_flags,
       int advice);
void vma_adjust_trans_huge(struct vm_area_struct *vma, unsigned long start,
      unsigned long end, long adjust_next);
spinlock_t *__pmd_trans_huge_lock(pmd_t *pmd, struct vm_area_struct *vma);
spinlock_t *__pud_trans_huge_lock(pud_t *pud, struct vm_area_struct *vma);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_swap_pmd(pmd_t pmd)
{
 return !pmd_none(pmd) && !pmd_present(pmd);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma)
{
 if (is_swap_pmd(*pmd) || pmd_trans_huge(*pmd) || pmd_devmap(*pmd))
  return __pmd_trans_huge_lock(pmd, vma);
 else
  return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_trans_huge_lock(pud_t *pud,
  struct vm_area_struct *vma)
{
 if (pud_trans_huge(*pud) || pud_devmap(*pud))
  return __pud_trans_huge_lock(pud, vma);
 else
  return ((void *)0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int thp_order(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 if (PageHead(page))
  return ((16 + __pte_index_size)-16);
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int thp_nr_pages(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 if (PageHead(page))
  return (1<<((16 + __pte_index_size)-16));
 return 1;
}

struct page *follow_devmap_pmd(struct vm_area_struct *vma, unsigned long addr,
  pmd_t *pmd, int flags, struct dev_pagemap **pgmap);
struct page *follow_devmap_pud(struct vm_area_struct *vma, unsigned long addr,
  pud_t *pud, int flags, struct dev_pagemap **pgmap);

vm_fault_t do_huge_pmd_numa_page(struct vm_fault *vmf);

extern struct page *huge_zero_page;
extern unsigned long huge_zero_pfn;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_page(struct page *page)
{
 return ({ do { extern void __compiletime_assert_204(void) ; if (!((sizeof(huge_zero_page) == sizeof(char) || sizeof(huge_zero_page) == sizeof(short) || sizeof(huge_zero_page) == sizeof(int) || sizeof(huge_zero_page) == sizeof(long)) || sizeof(huge_zero_page) == sizeof(long long))) __compiletime_assert_204(); } while (0); (*(const volatile typeof( _Generic((huge_zero_page), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (huge_zero_page))) *)&(huge_zero_page)); }) == page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pmd(pmd_t pmd)
{
 return ({ do { extern void __compiletime_assert_205(void) ; if (!((sizeof(huge_zero_pfn) == sizeof(char) || sizeof(huge_zero_pfn) == sizeof(short) || sizeof(huge_zero_pfn) == sizeof(int) || sizeof(huge_zero_pfn) == sizeof(long)) || sizeof(huge_zero_pfn) == sizeof(long long))) __compiletime_assert_205(); } while (0); (*(const volatile typeof( _Generic((huge_zero_pfn), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (huge_zero_pfn))) *)&(huge_zero_pfn)); }) == pte_pfn(pmd_pte(pmd)) && pmd_present(pmd);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pud(pud_t pud)
{
 return false;
}

struct page *mm_get_huge_zero_page(struct mm_struct *mm);
void mm_put_huge_zero_page(struct mm_struct *mm);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thp_migration_supported(void)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct list_head *page_deferred_list(struct page *page)
{




 return &page[2].deferred_list;
}
# 478 "./include/linux/huge_mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long thp_size(struct page *page)
{
 return (1UL << 16) << thp_order(page);
}
# 719 "./include/linux/mm.h" 2
# 736 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int put_page_testzero(struct page *page)
{
 ((void)(sizeof(( long)(page_ref_count(page) == 0))));
 return page_ref_dec_and_test(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_put_testzero(struct folio *folio)
{
 return put_page_testzero(&folio->page);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);


struct page *vmalloc_to_page(const void *addr);
unsigned long vmalloc_to_pfn(const void *addr);
# 785 "./include/linux/mm.h"
extern bool is_vmalloc_addr(const void *x);
extern int is_vmalloc_or_module_addr(const void *x);
# 798 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_mapcount(struct page *head)
{
 return atomic_read(compound_mapcount_ptr(head)) + 1;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(!PageCompound(page)))));
 page = ((typeof(page))_compound_head(page));
 return head_compound_mapcount(page);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_mapcount_reset(struct page *page)
{
 atomic_set(&(page)->_mapcount, -1);
}

int __page_mapcount(struct page *page);
# 835 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mapcount(struct page *page)
{
 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return atomic_read(&page->_mapcount) + 1;
}


int total_mapcount(struct page *page);
int page_trans_huge_mapcount(struct page *page, int *total_mapcount);
# 860 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *virt_to_head_page(const void *x)
{
 struct page *page = (vmemmap + ((({ do { } while (0); (unsigned long)(x) & 0x0fffffffffffffffUL; }) >> 16)));

 return ((typeof(page))_compound_head(page));
}

void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);
void folio_copy(struct folio *dst, struct folio *src);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,

 HUGETLB_PAGE_DTOR,


 TRANSHUGE_PAGE_DTOR,

 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[NR_COMPOUND_DTORS];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 ((void)(sizeof(( long)(compound_dtor >= NR_COMPOUND_DTORS))));
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_compound_page(struct page *page)
{
 ((void)(sizeof(( long)(page[1].compound_dtor >= NR_COMPOUND_DTORS))));
 compound_page_dtors[page[1].compound_dtor](page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return page[1].compound_order;
}
# 924 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int folio_order(struct folio *folio)
{
 return compound_order(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hpage_pincount_available(struct page *page)
{





 page = ((typeof(page))_compound_head(page));
 return PageCompound(page) && compound_order(page) > 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int head_compound_pincount(struct page *head)
{
 return atomic_read(compound_pincount_ptr(head));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_pincount(struct page *page)
{
 ((void)(sizeof(( long)(!hpage_pincount_available(page)))));
 page = ((typeof(page))_compound_head(page));
 return head_compound_pincount(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
 page[1].compound_nr = 1U << order;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long compound_nr(struct page *page)
{
 if (!PageHead(page))
  return 1;
 return page[1].compound_nr;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_size(struct page *page)
{
 return (1UL << 16) << compound_order(page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int page_shift(struct page *page)
{
 return 16 + compound_order(page);
}

void free_compound_page(struct page *page);
# 987 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
{
 if (__builtin_expect(!!(vma->vm_flags & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}

vm_fault_t do_set_pmd(struct vm_fault *vmf, struct page *page);
void do_set_pte(struct vm_fault *vmf, struct page *page, unsigned long addr);

vm_fault_t finish_fault(struct vm_fault *vmf);
vm_fault_t finish_mkwrite_fault(struct vm_fault *vmf);
# 1104 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type page_zonenum(const struct page *page)
{
 do { kcsan_set_access_mask(((1UL << 1) - 1) << (((((sizeof(unsigned long)*8) - 0) - 8) - 1) * (1 != 0))); __kcsan_check_access(&(page->flags), sizeof(page->flags), (1 << 3)); kcsan_set_access_mask(0); kcsan_atomic_next(1); } while (0);
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 8) - 1) * (1 != 0))) & ((1UL << 1) - 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type folio_zonenum(const struct folio *folio)
{
 return page_zonenum(&folio->page);
}
# 1123 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_device_page(const struct page *page)
{
 return false;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_movable_page(const struct page *page)
{
 return page_zonenum(page) == ZONE_MOVABLE;
}
# 1157 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_devmap_managed(struct page *page)
{
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_devmap_managed_page(struct page *page)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_device_private_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PRIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pci_p2pdma_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PCI_P2PDMA;
}
# 1195 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_get(struct folio *folio)
{
 ((void)(sizeof(( long)(((unsigned int) folio_ref_count(folio) + 127u <= 127u)))));
 folio_ref_inc(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_page(struct page *page)
{
 folio_get((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

bool __attribute__((__warn_unused_result__)) try_grab_page(struct page *page, unsigned int flags);
struct page *try_grab_compound_head(struct page *page, int refs,
        unsigned int flags);

struct page *try_get_compound_head(struct page *page, int refs);
# 1225 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_put(struct folio *folio)
{
 if (folio_put_testzero(folio))
  __put_page(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_page(struct page *page)
{
 struct folio *folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));







 if (page_is_devmap_managed(&folio->page)) {
  put_devmap_managed_page(&folio->page);
  return;
 }

 folio_put(folio);
}
# 1282 "./include/linux/mm.h"
void unpin_user_page(struct page *page);
void unpin_user_pages_dirty_lock(struct page **pages, unsigned long npages,
     bool make_dirty);
void unpin_user_page_range_dirty_lock(struct page *page, unsigned long npages,
          bool make_dirty);
void unpin_user_pages(struct page **pages, unsigned long npages);
# 1315 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_maybe_dma_pinned(struct page *page)
{
 if (hpage_pincount_available(page))
  return compound_pincount(page) > 0;
# 1328 "./include/linux/mm.h"
 return ((unsigned int)page_ref_count(((typeof(page))_compound_head(page)))) >=
  (1U << 10);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_cow_mapping(vm_flags_t flags)
{
 return (flags & (0x00000008 | 0x00000020)) == 0x00000020;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_needs_cow_for_dma(struct vm_area_struct *vma,
       struct page *page)
{
 if (!is_cow_mapping(vma->vm_flags))
  return false;

 if (!arch_test_bit(28, &vma->vm_mm->flags))
  return false;

 return page_maybe_dma_pinned(page);
}
# 1365 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 8) < ((((sizeof(unsigned long)*8) - 0) - 8) - 1))? (((sizeof(unsigned long)*8) - 0) - 8) : ((((sizeof(unsigned long)*8) - 0) - 8) - 1)) * ((8 + 1) != 0))) & ((1UL << (8 + 1)) - 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_to_nid(const struct page *page)
{
 struct page *p = (struct page *)page;

 return (({ ((void)(sizeof(( long)(PagePoisoned(p))))); p; })->flags >> ((((sizeof(unsigned long)*8) - 0) - 8) * (8 != 0))) & ((1UL << 8) - 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_nid(const struct folio *folio)
{
 return page_to_nid(&folio->page);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_pid_to_cpupid(int cpu, int pid)
{
 return ((cpu & ((1 << 11)-1)) << 8) | (pid & ((1 << 8)-1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_pid(int cpupid)
{
 return cpupid & ((1 << 8)-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_cpu(int cpupid)
{
 return (cpupid >> 8) & ((1 << 11)-1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_nid(int cpupid)
{
 return cpu_to_node(cpupid_to_cpu(cpupid));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_pid_unset(int cpupid)
{
 return cpupid_to_pid(cpupid) == (-1 & ((1 << 8)-1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_cpu_unset(int cpupid)
{
 return cpupid_to_cpu(cpupid) == (-1 & ((1 << 11)-1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __cpupid_match_pid(pid_t task_pid, int cpupid)
{
 return (task_pid & ((1 << 8)-1)) == cpupid_to_pid(cpupid);
}
# 1438 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cpupid_last(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 8) - 1) - (8 +11)) * ((8 +11) != 0))) & ((1UL << (8 +11)) - 1);
}

extern int page_cpupid_xchg_last(struct page *page, int cpupid);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_cpupid_reset_last(struct page *page)
{
 page->flags |= ((1UL << (8 +11)) - 1) << ((((((sizeof(unsigned long)*8) - 0) - 8) - 1) - (8 +11)) * ((8 +11) != 0));
}
# 1533 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 page_kasan_tag(const struct page *page)
{
 return 0xff;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_set(struct page *page, u8 tag) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_reset(struct page *page) { }



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *page_zone(const struct page *page)
{
 return &(node_data[page_to_nid(page)])->node_zones[page_zonenum(page)];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *page_pgdat(const struct page *page)
{
 return (node_data[page_to_nid(page)]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *folio_zone(const struct folio *folio)
{
 return page_zone(&folio->page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *folio_pgdat(const struct folio *folio)
{
 return page_pgdat(&folio->page);
}
# 1585 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long folio_pfn(struct folio *folio)
{
 return (unsigned long)((&folio->page) - vmemmap);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pinnable_page(struct page *page)
{
 return !(is_zone_movable_page(page) || (get_pfnblock_flags_mask(page, (unsigned long)((page) - vmemmap), ((1UL << 3) - 1)) == MIGRATE_CMA)) ||
  is_zero_pfn((unsigned long)((page) - vmemmap));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 1) - 1) << (((((sizeof(unsigned long)*8) - 0) - 8) - 1) * (1 != 0)));
 page->flags |= (zone & ((1UL << 1) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 8) - 1) * (1 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 8) - 1) << ((((sizeof(unsigned long)*8) - 0) - 8) * (8 != 0)));
 page->flags |= (node & ((1UL << 8) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 8) * (8 != 0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);



}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long folio_nr_pages(struct folio *folio)
{
 return compound_nr(&folio->page);
}
# 1651 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *folio_next(struct folio *folio)
{
 return (struct folio *)((&(folio)->page) + (folio_nr_pages(folio)));
}
# 1668 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int folio_shift(struct folio *folio)
{
 return 16 + folio_order(folio);
}
# 1681 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t folio_size(struct folio *folio)
{
 return (1UL << 16) << folio_order(folio);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_make_page_accessible(struct page *page)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_make_folio_accessible(struct folio *folio)
{
 int ret;
 long i, nr = folio_nr_pages(folio);

 for (i = 0; i < nr; i++) {
  ret = arch_make_page_accessible(((&(folio)->page) + (i)));
  if (ret)
   break;
 }

 return ret;
}





# 1 "./include/linux/vmstat.h" 1







# 1 "./include/linux/vm_event_item.h" 1
# 25 "./include/linux/vm_event_item.h"
enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_NORMAL, PGALLOC_MOVABLE,
  ALLOCSTALL_NORMAL, ALLOCSTALL_MOVABLE,
  PGSCAN_SKIP_NORMAL, PGSCAN_SKIP_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,
  PGFAULT, PGMAJFAULT,
  PGLAZYFREED,
  PGREFILL,
  PGREUSE,
  PGSTEAL_KSWAPD,
  PGSTEAL_DIRECT,
  PGDEMOTE_KSWAPD,
  PGDEMOTE_DIRECT,
  PGSCAN_KSWAPD,
  PGSCAN_DIRECT,
  PGSCAN_DIRECT_THROTTLE,
  PGSCAN_ANON,
  PGSCAN_FILE,
  PGSTEAL_ANON,
  PGSTEAL_FILE,

  PGSCAN_ZONE_RECLAIM_FAILED,

  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, PGROTATED,
  DROP_PAGECACHE, DROP_SLAB,
  OOM_KILL,

  NUMA_PTE_UPDATES,
  NUMA_HUGE_PTE_UPDATES,
  NUMA_HINT_FAULTS,
  NUMA_HINT_FAULTS_LOCAL,
  NUMA_PAGE_MIGRATE,


  PGMIGRATE_SUCCESS, PGMIGRATE_FAIL,
  THP_MIGRATION_SUCCESS,
  THP_MIGRATION_FAIL,
  THP_MIGRATION_SPLIT,


  COMPACTMIGRATE_SCANNED, COMPACTFREE_SCANNED,
  COMPACTISOLATED,
  COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS,
  KCOMPACTD_WAKE,
  KCOMPACTD_MIGRATE_SCANNED, KCOMPACTD_FREE_SCANNED,


  HTLB_BUDDY_PGALLOC, HTLB_BUDDY_PGALLOC_FAIL,


  CMA_ALLOC_SUCCESS,
  CMA_ALLOC_FAIL,

  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,

  THP_FAULT_ALLOC,
  THP_FAULT_FALLBACK,
  THP_FAULT_FALLBACK_CHARGE,
  THP_COLLAPSE_ALLOC,
  THP_COLLAPSE_ALLOC_FAILED,
  THP_FILE_ALLOC,
  THP_FILE_FALLBACK,
  THP_FILE_FALLBACK_CHARGE,
  THP_FILE_MAPPED,
  THP_SPLIT_PAGE,
  THP_SPLIT_PAGE_FAILED,
  THP_DEFERRED_SPLIT_PAGE,
  THP_SPLIT_PMD,



  THP_ZERO_PAGE_ALLOC,
  THP_ZERO_PAGE_ALLOC_FAILED,
  THP_SWPOUT,
  THP_SWPOUT_FALLBACK,


  BALLOON_INFLATE,
  BALLOON_DEFLATE,

  BALLOON_MIGRATE,
# 127 "./include/linux/vm_event_item.h"
  SWAP_RA,
  SWAP_RA_HIT,





  NR_VM_EVENT_ITEMS
};
# 9 "./include/linux/vmstat.h" 2

# 1 "./include/linux/static_key.h" 1
# 11 "./include/linux/vmstat.h" 2


extern int sysctl_stat_interval;




extern int sysctl_vm_numa_stat;
extern struct static_key_true vm_numa_stat_key;
int sysctl_vm_numa_stat_handler(struct ctl_table *table, int write,
  void *buffer, size_t *length, loff_t *ppos);


struct reclaim_stat {
 unsigned nr_dirty;
 unsigned nr_unqueued_dirty;
 unsigned nr_congested;
 unsigned nr_writeback;
 unsigned nr_immediate;
 unsigned nr_pageout;
 unsigned nr_activate[2];
 unsigned nr_ref_keep;
 unsigned nr_unmap_fail;
 unsigned nr_lazyfree_fail;
};

enum writeback_stat_item {
 NR_DIRTY_THRESHOLD,
 NR_DIRTY_BG_THRESHOLD,
 NR_VM_WRITEBACK_STAT_ITEMS,
};
# 54 "./include/linux/vmstat.h"
struct vm_event_state {
 unsigned long event[NR_VM_EVENT_ITEMS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct vm_event_state) vm_event_states;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
# 140 "./include/linux/vmstat.h"
extern atomic_long_t vm_zone_stat[NR_VM_ZONE_STAT_ITEMS];
extern atomic_long_t vm_node_stat[NR_VM_NODE_STAT_ITEMS];
extern atomic_long_t vm_numa_event[NR_VM_NUMA_EVENT_ITEMS];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_numa_event_add(long x, struct zone *zone,
    enum numa_stat_item item)
{
 atomic_long_add(x, &zone->vm_numa_event[item]);
 atomic_long_add(x, &vm_numa_event[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_numa_event_state(struct zone *zone,
     enum numa_stat_item item)
{
 return atomic_long_read(&zone->vm_numa_event[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
global_numa_event_state(enum numa_stat_item item)
{
 return atomic_long_read(&vm_numa_event[item]);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &vm_zone_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_page_state_add(long x, struct pglist_data *pgdat,
     enum node_stat_item item)
{
 atomic_long_add(x, &pgdat->vm_stat[item]);
 atomic_long_add(x, &vm_node_stat[item]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_zone_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&vm_zone_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long global_node_page_state_pages(enum node_stat_item item)
{
 long x = atomic_long_read(&vm_node_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_node_page_state(enum node_stat_item item)
{
 ((void)(sizeof(( long)(vmstat_item_in_bytes(item)))));

 return global_node_page_state_pages(item);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((zone->per_cpu_zonestats) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((zone->per_cpu_zonestats))) *)((zone->per_cpu_zonestats))); (typeof((typeof(*((zone->per_cpu_zonestats))) *)((zone->per_cpu_zonestats)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__count_numa_event(struct zone *zone, enum numa_stat_item item)
{
 struct per_cpu_zonestat *pzstats = zone->per_cpu_zonestats;

 do { do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(pzstats->vm_numa_event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__count_numa_events(struct zone *zone, enum numa_stat_item item, long delta)
{
 struct per_cpu_zonestat *pzstats = zone->per_cpu_zonestats;

 do { do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(pzstats->vm_numa_event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(pzstats->vm_numa_event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item]))); (typeof((typeof(*(&(pzstats->vm_numa_event[item]))) *)(&(pzstats->vm_numa_event[item])))) (__ptr + ((local_paca->data_offset))); }); }) += delta; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern unsigned long sum_zone_node_page_state(int node,
           enum zone_stat_item item);
extern unsigned long sum_zone_numa_event_state(int node, enum numa_stat_item item);
extern unsigned long node_page_state(struct pglist_data *pgdat,
      enum node_stat_item item);
extern unsigned long node_page_state_pages(struct pglist_data *pgdat,
        enum node_stat_item item);
extern void fold_vm_numa_events(void);
# 276 "./include/linux/vmstat.h"
void __mod_zone_page_state(struct zone *, enum zone_stat_item item, long);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void __mod_node_page_state(struct pglist_data *, enum node_stat_item item, long);
void __inc_node_page_state(struct page *, enum node_stat_item);
void __dec_node_page_state(struct page *, enum node_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
void inc_node_page_state(struct page *, enum node_stat_item);
void dec_node_page_state(struct page *, enum node_stat_item);

extern void inc_node_state(struct pglist_data *, enum node_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_node_state(struct pglist_data *, enum node_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_node_state(struct pglist_data *, enum node_stat_item);

void quiet_vmstat(void);
void cpu_vm_stats_fold(int cpu);
void refresh_zone_stat_thresholds(void);

struct ctl_table;
int vmstat_refresh(struct ctl_table *, int write, void *buffer, size_t *lenp,
  loff_t *ppos);

void drain_zonestat(struct zone *zone, struct per_cpu_zonestat *);

int calculate_pressure_threshold(struct zone *zone);
int calculate_normal_threshold(struct zone *zone);
void set_pgdat_percpu_threshold(pg_data_t *pgdat,
    int (*calculate_pressure)(struct zone *));
# 418 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __zone_stat_mod_folio(struct folio *folio,
  enum zone_stat_item item, long nr)
{
 __mod_zone_page_state(folio_zone(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __zone_stat_add_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __zone_stat_sub_folio(struct folio *folio,
  enum zone_stat_item item)
{
 __mod_zone_page_state(folio_zone(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_stat_mod_folio(struct folio *folio,
  enum zone_stat_item item, long nr)
{
 mod_zone_page_state(folio_zone(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_stat_add_folio(struct folio *folio,
  enum zone_stat_item item)
{
 mod_zone_page_state(folio_zone(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_stat_sub_folio(struct folio *folio,
  enum zone_stat_item item)
{
 mod_zone_page_state(folio_zone(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_stat_mod_folio(struct folio *folio,
  enum node_stat_item item, long nr)
{
 __mod_node_page_state(folio_pgdat(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_stat_add_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_stat_sub_folio(struct folio *folio,
  enum node_stat_item item)
{
 __mod_node_page_state(folio_pgdat(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_stat_mod_folio(struct folio *folio,
  enum node_stat_item item, long nr)
{
 mod_node_page_state(folio_pgdat(folio), item, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_stat_add_folio(struct folio *folio,
  enum node_stat_item item)
{
 mod_node_page_state(folio_pgdat(folio), item, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_stat_sub_folio(struct folio *folio,
  enum node_stat_item item)
{
 mod_node_page_state(folio_pgdat(folio), item, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (__builtin_expect(!!((migratetype) == MIGRATE_CMA), 0))
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern const char * const vmstat_text[];

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *zone_stat_name(enum zone_stat_item item)
{
 return vmstat_text[item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *numa_stat_name(enum numa_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *node_stat_name(enum node_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      NR_VM_NUMA_EVENT_ITEMS +
      item];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *lru_list_name(enum lru_list lru)
{
 return node_stat_name(NR_LRU_BASE + lru) + 3;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *writeback_stat_name(enum writeback_stat_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      NR_VM_NUMA_EVENT_ITEMS +
      NR_VM_NODE_STAT_ITEMS +
      item];
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *vm_event_name(enum vm_event_item item)
{
 return vmstat_text[NR_VM_ZONE_STAT_ITEMS +
      NR_VM_NUMA_EVENT_ITEMS +
      NR_VM_NODE_STAT_ITEMS +
      NR_VM_WRITEBACK_STAT_ITEMS +
      item];
}




void __mod_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,
   int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_state(struct lruvec *lruvec,
        enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_state(lruvec, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}

void __mod_lruvec_page_state(struct page *page,
        enum node_stat_item idx, int val);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mod_lruvec_page_state(struct page *page,
      enum node_stat_item idx, int val)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __mod_lruvec_page_state(page, idx, val);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}
# 600 "./include/linux/vmstat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __inc_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __dec_lruvec_page_state(struct page *page,
        enum node_stat_item idx)
{
 __mod_lruvec_page_state(page, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lruvec_stat_mod_folio(struct folio *folio,
        enum node_stat_item idx, int val)
{
 __mod_lruvec_page_state(&folio->page, idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lruvec_stat_add_folio(struct folio *folio,
        enum node_stat_item idx)
{
 __lruvec_stat_mod_folio(folio, idx, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __lruvec_stat_sub_folio(struct folio *folio,
        enum node_stat_item idx)
{
 __lruvec_stat_mod_folio(folio, idx, -folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_lruvec_page_state(struct page *page,
      enum node_stat_item idx)
{
 mod_lruvec_page_state(page, idx, -1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lruvec_stat_mod_folio(struct folio *folio,
      enum node_stat_item idx, int val)
{
 mod_lruvec_page_state(&folio->page, idx, val);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lruvec_stat_add_folio(struct folio *folio,
      enum node_stat_item idx)
{
 lruvec_stat_mod_folio(folio, idx, folio_nr_pages(folio));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lruvec_stat_sub_folio(struct folio *folio,
      enum node_stat_item idx)
{
 lruvec_stat_mod_folio(folio, idx, -folio_nr_pages(folio));
}
# 1713 "./include/linux/mm.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *lowmem_page_address(const struct page *page)
{
 return ({ do { } while (0); (void *)(unsigned long)((phys_addr_t)(((phys_addr_t)((unsigned long)((page) - vmemmap)) << 16)) | 0xc000000000000000UL); });
}
# 1747 "./include/linux/mm.h"
extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);
 return page->index;
}

bool page_mapped(struct page *page);
bool folio_mapped(struct folio *folio);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_pfmemalloc(const struct page *page)
{





 return (uintptr_t)page->lru.next & ((((1UL))) << (1));
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_pfmemalloc(struct page *page)
{
 page->lru.next = (void *)((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_page_pfmemalloc(struct page *page)
{
 page->lru.next = ((void *)0);
}




extern void pagefault_out_of_memory(void);
# 1809 "./include/linux/mm.h"
extern void show_free_areas(unsigned int flags, nodemask_t *nodemask);


extern bool can_do_mlock(void);



extern int user_shm_lock(size_t, struct ucounts *);
extern void user_shm_unlock(size_t, struct ucounts *);




struct zap_details {
 struct address_space *check_mapping;
 unsigned long first_index;
 unsigned long last_index;
 struct page *single_page;
};

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
        pte_t pte);
struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

void zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
    unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
      unsigned long size);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);

struct mmu_notifier_range;

void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int
copy_page_range(struct vm_area_struct *dst_vma, struct vm_area_struct *src_vma);
int follow_invalidate_pte(struct mm_struct *mm, unsigned long address,
     struct mmu_notifier_range *range, pte_t **ptepp,
     pmd_t **pmdpp, spinlock_t **ptlp);
int follow_pte(struct mm_struct *mm, unsigned long address,
        pte_t **ptepp, spinlock_t **ptlp);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

extern void truncate_pagecache(struct inode *inode, loff_t new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern vm_fault_t handle_mm_fault(struct vm_area_struct *vma,
      unsigned long address, unsigned int flags,
      struct pt_regs *regs);
extern int fixup_user_fault(struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
void unmap_mapping_page(struct page *page);
void unmap_mapping_pages(struct address_space *mapping,
  unsigned long start, unsigned long nr, bool even_cows);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
# 1902 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern int access_process_vm(struct task_struct *tsk, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int __access_remote_vm(struct mm_struct *mm, unsigned long addr,
         void *buf, int len, unsigned int gup_flags);

long get_user_pages_remote(struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas, int *locked);
long pin_user_pages_remote(struct mm_struct *mm,
      unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas, int *locked);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas);
long pin_user_pages(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages,
      struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long pin_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);
long pin_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);

int get_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);

int account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc);
int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,
   struct task_struct *task, bool bypass_rlim);

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

bool folio_mark_dirty(struct folio *folio);
bool set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
# 1983 "./include/linux/mm.h"
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         unsigned long cp_flags);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int get_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);
int pin_user_pages_fast_only(unsigned long start, int nr_pages,
        unsigned int gup_flags, struct page **pages);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool get_user_page_fast_only(unsigned long addr,
   unsigned int gup_flags, struct page **pagep)
{
 return get_user_pages_fast_only(addr, 1, gup_flags, pagep) == 1;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}

void mm_trace_rss_stat(struct mm_struct *mm, int member, long count);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 long count = atomic_long_add_return(value, &mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_inc_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 long count = atomic_long_dec_return(&mm->rss_stat.count[member]);

 mm_trace_rss_stat(mm, member, count);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_rss) *)1 == (typeof(get_mm_rss(mm)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_rss) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(get_mm_rss(mm)) * 0l)) : (int *)8))))), ((mm->hiwater_rss) > (get_mm_rss(mm)) ? (mm->hiwater_rss) : (get_mm_rss(mm))), ({ typeof(mm->hiwater_rss) __UNIQUE_ID___x206 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) __UNIQUE_ID___y207 = (get_mm_rss(mm)); ((__UNIQUE_ID___x206) > (__UNIQUE_ID___y207) ? (__UNIQUE_ID___x206) : (__UNIQUE_ID___y207)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_vm) *)1 == (typeof(mm->total_vm) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_vm) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->total_vm) * 0l)) : (int *)8))))), ((mm->hiwater_vm) > (mm->total_vm) ? (mm->hiwater_vm) : (mm->total_vm)), ({ typeof(mm->hiwater_vm) __UNIQUE_ID___x208 = (mm->hiwater_vm); typeof(mm->total_vm) __UNIQUE_ID___y209 = (mm->total_vm); ((__UNIQUE_ID___x208) > (__UNIQUE_ID___y209) ? (__UNIQUE_ID___x208) : (__UNIQUE_ID___y209)); }));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);
# 2131 "./include/linux/mm.h"
int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
      unsigned long address)
{
 return 0;
}
# 2163 "./include/linux/mm.h"
int __pud_alloc(struct mm_struct *mm, p4d_t *p4d, unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_puds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_add((1 << __pud_index_size) * sizeof(pud_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_puds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_sub((1 << __pud_index_size) * sizeof(pud_t), &mm->pgtables_bytes);
}
# 2191 "./include/linux/mm.h"
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_add((1 << __pmd_index_size) * sizeof(pmd_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_sub((1 << __pmd_index_size) * sizeof(pmd_t), &mm->pgtables_bytes);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_pgtables_bytes_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->pgtables_bytes, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mm_pgtables_bytes(const struct mm_struct *mm)
{
 return atomic_long_read(&mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_ptes(struct mm_struct *mm)
{
 atomic_long_add((1 << __pte_index_size) * sizeof(pte_t), &mm->pgtables_bytes);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_ptes(struct mm_struct *mm)
{
 atomic_long_sub((1 << __pte_index_size) * sizeof(pte_t), &mm->pgtables_bytes);
}
# 2240 "./include/linux/mm.h"
int __pte_alloc(struct mm_struct *mm, pmd_t *pmd);
int __pte_alloc_kernel(pmd_t *pmd);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) p4d_t *p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
  unsigned long address)
{
 return (__builtin_expect(!!(pgd_none(*pgd)), 0) && __p4d_alloc(mm, pgd, address)) ?
  ((void *)0) : p4d_offset(pgd, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *pud_alloc(struct mm_struct *mm, p4d_t *p4d,
  unsigned long address)
{
 return (__builtin_expect(!!(p4d_none(*p4d)), 0) && __pud_alloc(mm, p4d, address)) ?
  ((void *)0) : pud_offset(p4d, address);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!(pud_none(*pud)), 0) && __pmd_alloc(mm, pud, address))?
  ((void *)0): pmd_offset(pud, address);
}
# 2277 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptlock_cache_init(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptlock_alloc(struct page *page)
{
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptlock_free(struct page *page)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *ptlock_ptr(struct page *page)
{
 return &page->ptl;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr(pmd_page(*pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptlock_init(struct page *page)
{







 ((void)(sizeof(( long)(*(unsigned long *)&page->ptl))));
 if (!ptlock_alloc(page))
  return false;
 do { spinlock_check(ptlock_ptr(page)); *(ptlock_ptr(page)) = (spinlock_t) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } }; } while (0);
 return true;
}
# 2330 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_init(void)
{
 ptlock_cache_init();
 pgtable_cache_init();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_pte_page_ctor(struct page *page)
{
 if (!ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_pte_page_dtor(struct page *page)
{
 ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}
# 2381 "./include/linux/mm.h"
static struct page *pmd_to_page(pmd_t *pmd)
{
 unsigned long mask = ~((1 << __pmd_index_size) * sizeof(pmd_t) - 1);
 return (vmemmap + ((({ do { } while (0); (unsigned long)((void *)((unsigned long) pmd & mask)) & 0x0fffffffffffffffUL; }) >> 16)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr(pmd_to_page(pmd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pmd_ptlock_init(struct page *page)
{

 page->pmd_huge_pte = ((void *)0);

 return ptlock_init(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_ptlock_free(struct page *page)
{

 ((void)(sizeof(( long)(page->pmd_huge_pte))));

 ptlock_free(page);
}
# 2424 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 spin_lock(ptl);
 return ptl;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_pmd_page_ctor(struct page *page)
{
 if (!pmd_ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_lruvec_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_pmd_page_dtor(struct page *page)
{
 pmd_ptlock_free(page);
 __ClearPageTable(page);
 dec_lruvec_page_state(page, NR_PAGETABLE);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lockptr(struct mm_struct *mm, pud_t *pud)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lock(struct mm_struct *mm, pud_t *pud)
{
 spinlock_t *ptl = pud_lockptr(mm, pud);

 spin_lock(ptl);
 return ptl;
}

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) pagecache_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) free_area_init_memoryless_node(int nid);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, const char *s);

extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(void);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
 adjust_managed_page_count(page, 1);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel image (initmem)");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for (((nid)) = __first_node(&(node_states[N_ONLINE])); ((nid)) < (1 << 8); ((nid)) = __next_node((((nid))), &((node_states[N_ONLINE]))))
  phys_pages += ((node_data[nid])->node_present_pages);

 return phys_pages;
}
# 2541 "./include/linux/mm.h"
void free_area_init(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);
# 2558 "./include/linux/mm.h"
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) early_pfn_to_nid(unsigned long pfn);


extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_range(unsigned long, int, unsigned long,
  unsigned long, unsigned long, enum meminit_context,
  struct vmem_altmap *, int migratetype);
extern void setup_per_zone_wmarks(void);
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) mmap_init(void);
extern void show_mem(unsigned int flags, nodemask_t *nodemask);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);




extern __attribute__((__format__(printf, 3, 4)))
void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...);

extern void setup_per_cpu_pageset(void);


extern int min_free_kbytes;
extern int watermark_boost_factor;
extern int watermark_scale_factor;
extern bool arch_has_descending_max_zone_pfns(void);


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root_cached *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root_cached *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root_cached *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root_cached *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root_cached *root);
struct anon_vma_chain *
anon_vma_interval_tree_iter_first(struct rb_root_cached *root,
      unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
# 2627 "./include/linux/mm.h"
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert,
 struct vm_area_struct *expand);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert)
{
 return __vma_adjust(vma, start, end, pgoff, insert, ((void *)0));
}
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *, struct vm_userfaultfd_ctx);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int __split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);
extern struct file *get_task_exe_file(struct task_struct *task);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern bool vma_is_special_mapping(const struct vm_area_struct *vma,
       const struct vm_special_mapping *sm);
extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

unsigned long randomize_stack_top(unsigned long stack_top);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
 struct list_head *uf);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate, struct list_head *uf);
extern int __do_munmap(struct mm_struct *, unsigned long, size_t,
         struct list_head *uf, bool downgrade);
extern int do_munmap(struct mm_struct *, unsigned long, size_t,
       struct list_head *uf);
extern int do_madvise(struct mm_struct *mm, unsigned long start, size_t len_in, int behavior);


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((__warn_unused_result__)) vm_brk(unsigned long, unsigned long);
extern int __attribute__((__warn_unused_result__)) vm_brk_flags(unsigned long, unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((__warn_unused_result__)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long vm_unmapped_area(struct vm_unmapped_area_info *info);


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);
extern void truncate_inode_pages_final(struct address_space *);


extern vm_fault_t filemap_fault(struct vm_fault *vmf);
extern vm_fault_t filemap_map_pages(struct vm_fault *vmf,
  unsigned long start_pgoff, unsigned long end_pgoff);
extern vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf);

extern unsigned long stack_guard_gap;

extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);
# 2776 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *find_vma_intersection(struct mm_struct *mm,
          unsigned long start_addr,
          unsigned long end_addr)
{
 struct vm_area_struct *vma = find_vma(mm, start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}
# 2795 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct vm_area_struct *vma_lookup(struct mm_struct *mm, unsigned long addr)
{
 struct vm_area_struct *vma = find_vma(mm, addr);

 if (vma && addr < vma->vm_start)
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_start_gap(struct vm_area_struct *vma)
{
 unsigned long vm_start = vma->vm_start;

 if (vma->vm_flags & 0x00000100) {
  vm_start -= stack_guard_gap;
  if (vm_start > vma->vm_start)
   vm_start = 0;
 }
 return vm_start;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_end_gap(struct vm_area_struct *vma)
{
 unsigned long vm_end = vma->vm_end;

 if (vma->vm_flags & 0x00000000) {
  vm_end += stack_guard_gap;
  if (vm_end < vma->vm_end)
   vm_end = -(1UL << 16);
 }
 return vm_end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> 16;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool range_in_vma(struct vm_area_struct *vma,
    unsigned long start, unsigned long end)
{
 return (vma && vma->vm_start <= start && end <= vma->vm_end);
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 2867 "./include/linux/mm.h"
void vma_set_file(struct vm_area_struct *vma, struct file *file);


unsigned long change_prot_numa(struct vm_area_struct *vma,
   unsigned long start, unsigned long end);


struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int remap_pfn_range_notrack(struct vm_area_struct *vma, unsigned long addr,
  unsigned long pfn, unsigned long size, pgprot_t prot);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pages(struct vm_area_struct *vma, unsigned long addr,
   struct page **pages, unsigned long *num);
int vm_map_pages(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
vm_fault_t vmf_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *vma,
  unsigned long addr, pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_page(struct vm_area_struct *vma,
    unsigned long addr, struct page *page)
{
 int err = vm_insert_page(vma, addr, page);

 if (err == -12)
  return VM_FAULT_OOM;
 if (err < 0 && err != -16)
  return VM_FAULT_SIGBUS;

 return VM_FAULT_NOPAGE;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int io_remap_pfn_range(struct vm_area_struct *vma,
         unsigned long addr, unsigned long pfn,
         unsigned long size, pgprot_t prot)
{
 return remap_pfn_range(vma, addr, pfn, size, (prot));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_error(int err)
{
 if (err == -12)
  return VM_FAULT_OOM;
 return VM_FAULT_SIGBUS;
}

struct page *follow_page(struct vm_area_struct *vma, unsigned long address,
    unsigned int foll_flags);
# 3007 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vm_fault_to_errno(vm_fault_t vm_fault, int foll_flags)
{
 if (vm_fault & VM_FAULT_OOM)
  return -12;
 if (vm_fault & (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))
  return (foll_flags & 0x100) ? -133 : -14;
 if (vm_fault & (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))
  return -14;
 return 0;
}

typedef int (*pte_fn_t)(pte_t *pte, unsigned long addr, void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);
extern int apply_to_existing_page_range(struct mm_struct *mm,
       unsigned long address, unsigned long size,
       pte_fn_t fn, void *data);

extern void init_mem_debugging_and_hardening(void);
# 3054 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled_static(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kernel_poison_pages(struct page *page, int nunmpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_poison_pages(struct page *page, int numpages) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_unpoison_pages(struct page *page, int numpages) { }


extern struct static_key_false init_on_alloc;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_alloc(gfp_t flags)
{
 if ((0 ? ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_true)) branch = !arch_static_branch(&(&init_on_alloc)->key, true); else if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_false)) branch = !arch_static_branch_jump(&(&init_on_alloc)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }) : ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_alloc)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_false)) branch = arch_static_branch(&(&init_on_alloc)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); })))

  return true;
 return flags & (( gfp_t)0x100u);
}

extern struct static_key_false init_on_free;
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_free(void)
{
 return (0 ? ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_true)) branch = !arch_static_branch(&(&init_on_free)->key, true); else if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_false)) branch = !arch_static_branch_jump(&(&init_on_free)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }) : ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_free)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_false)) branch = arch_static_branch(&(&init_on_free)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }));

}

extern bool _debug_pagealloc_enabled_early;
extern struct static_key_false _debug_pagealloc_enabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled(void)
{
 return 0 &&
  _debug_pagealloc_enabled_early;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled_static(void)
{
 if (!0)
  return false;

 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_true)) branch = arch_static_branch_jump(&(&_debug_pagealloc_enabled)->key, false); else if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_false)) branch = arch_static_branch(&(&_debug_pagealloc_enabled)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}
# 3117 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_map_pages(struct page *page, int numpages) {}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_pagealloc_unmap_pages(struct page *page, int numpages) {}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *get_gate_vma(struct mm_struct *mm)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area_no_mm(unsigned long addr) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area(struct mm_struct *mm, unsigned long addr)
{
 return 0;
}


extern bool process_shares_mm(struct task_struct *p, struct mm_struct *mm);


extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *,
  loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);

void print_vma_addr(char *prefix, unsigned long rip);






int vmemmap_remap_free(unsigned long start, unsigned long end,
         unsigned long reuse);
int vmemmap_remap_alloc(unsigned long start, unsigned long end,
   unsigned long reuse, gfp_t gfp_mask);

void *sparse_buffer_alloc(unsigned long size);
struct page * __populate_section_memmap(unsigned long pfn,
  unsigned long nr_pages, int nid, struct vmem_altmap *altmap);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
p4d_t *vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node);
pud_t *vmemmap_pud_populate(p4d_t *p4d, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node,
       struct vmem_altmap *altmap);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *vmemmap_alloc_block_buf(unsigned long size, int node,
         struct vmem_altmap *altmap);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node, struct vmem_altmap *altmap);
int vmemmap_populate(unsigned long start, unsigned long end, int node,
  struct vmem_altmap *altmap);
void vmemmap_populate_print_last(void);

void vmemmap_free(unsigned long start, unsigned long end,
  struct vmem_altmap *altmap);

void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long nr_pages);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int flags);
extern void memory_failure_queue(unsigned long pfn, int flags);
extern void memory_failure_queue_kick(int cpu);
extern int unpoison_memory(unsigned long pfn);
extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p);
extern atomic_long_t num_poisoned_pages __attribute__((__section__(".data..read_mostly")));
extern int soft_offline_page(unsigned long pfn, int flags);





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_NON_PMD_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_DAX,
 MF_MSG_UNSPLIT_THP,
 MF_MSG_UNKNOWN,
};


extern void clear_huge_page(struct page *page,
       unsigned long addr_hint,
       unsigned int pages_per_huge_page);
extern void copy_user_huge_page(struct page *dst, struct page *src,
    unsigned long addr_hint,
    struct vm_area_struct *vma,
    unsigned int pages_per_huge_page);
extern long copy_huge_page_from_user(struct page *dst_page,
    const void *usr_src,
    unsigned int pages_per_huge_page,
    bool allow_pagefault);
# 3270 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_special_huge(const struct vm_area_struct *vma)
{
 return vma_is_dax(vma) || (vma->vm_file &&
       (vma->vm_flags & (0x00000400 | 0x10000000)));
}
# 3300 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int debug_guardpage_minorder(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_guardpage_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_guard(struct page *page) { return false; }



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) setup_nr_node_ids(void);




extern int memcmp_pages(struct page *page1, struct page *page2);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pages_identical(struct page *page1, struct page *page2)
{
 return !memcmp_pages(page1, page2);
}
# 3330 "./include/linux/mm.h"
extern int sysctl_nr_trim_pages;


void mem_dump_obj(void *object);
# 3346 "./include/linux/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seal_check_future_write(int seals, struct vm_area_struct *vma)
{
 if (seals & 0x0010) {




  if ((vma->vm_flags & 0x00000008) && (vma->vm_flags & 0x00000002))
   return -1;
# 3363 "./include/linux/mm.h"
  if (vma->vm_flags & 0x00000008)
   vma->vm_flags &= ~(0x00000020);
 }

 return 0;
}
# 18 "arch/powerpc/kernel/signal_32.c" 2




# 1 "./include/linux/elf.h" 1





# 1 "./arch/powerpc/include/asm/elf.h" 1
# 11 "./arch/powerpc/include/asm/elf.h"
# 1 "./arch/powerpc/include/uapi/asm/elf.h" 1
# 102 "./arch/powerpc/include/uapi/asm/elf.h"
typedef unsigned long elf_greg_t64;
typedef elf_greg_t64 elf_gregset_t64[48];

typedef unsigned int elf_greg_t32;
typedef elf_greg_t32 elf_gregset_t32[48];
typedef elf_gregset_t32 compat_elf_gregset_t;
# 119 "./arch/powerpc/include/uapi/asm/elf.h"
typedef elf_greg_t64 elf_greg_t;
typedef elf_gregset_t64 elf_gregset_t;
# 138 "./arch/powerpc/include/uapi/asm/elf.h"
typedef double elf_fpreg_t;
typedef elf_fpreg_t elf_fpregset_t[33];
# 160 "./arch/powerpc/include/uapi/asm/elf.h"
typedef __vector128 elf_vrreg_t;
typedef elf_vrreg_t elf_vrregset_t[34];

typedef elf_vrreg_t elf_vrregset_t32[33];
typedef elf_fpreg_t elf_vsrreghalf_t32[32];
# 293 "./arch/powerpc/include/uapi/asm/elf.h"
struct ppc64_opd_entry
{
 unsigned long funcaddr;
 unsigned long r2;
};
# 12 "./arch/powerpc/include/asm/elf.h" 2
# 49 "./arch/powerpc/include/asm/elf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ppc_elf_core_copy_regs(elf_gregset_t elf_regs,
       struct pt_regs *regs)
{
 int i, nregs = __builtin_choose_expr(((!!(sizeof((typeof(sizeof(*regs) / sizeof(unsigned long)) *)1 == (typeof((size_t)48) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(sizeof(*regs) / sizeof(unsigned long)) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((size_t)48) * 0l)) : (int *)8))))), ((sizeof(*regs) / sizeof(unsigned long)) < ((size_t)48) ? (sizeof(*regs) / sizeof(unsigned long)) : ((size_t)48)), ({ typeof(sizeof(*regs) / sizeof(unsigned long)) __UNIQUE_ID___x210 = (sizeof(*regs) / sizeof(unsigned long)); typeof((size_t)48) __UNIQUE_ID___y211 = ((size_t)48); ((__UNIQUE_ID___x210) < (__UNIQUE_ID___y211) ? (__UNIQUE_ID___x210) : (__UNIQUE_ID___y211)); })); for (i = 0; i < nregs; i++) elf_regs[i] = ((unsigned long *) regs)[i]; memset(&elf_regs[i], 0, (48 - i) * sizeof(elf_regs[0]));
}
# 110 "./arch/powerpc/include/asm/elf.h"
extern int dcache_bsize;
extern int icache_bsize;
extern int ucache_bsize;



struct linux_binprm;
extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
# 177 "./arch/powerpc/include/asm/elf.h"
void relocate(unsigned long final_address);
# 7 "./include/linux/elf.h" 2
# 1 "./include/uapi/linux/elf.h" 1





# 1 "./include/uapi/linux/elf-em.h" 1
# 7 "./include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 139 "./include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 162 "./include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 304 "./include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 440 "./include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 8 "./include/linux/elf.h" 2
# 52 "./include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 65 "./include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 81 "./include/linux/elf.h"
struct gnu_property {
 u32 pr_type;
 u32 pr_datasz;
};

struct arch_elf_state;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_parse_elf_property(u32 type, const void *data,
       size_t datasz, bool compat,
       struct arch_elf_state *arch)
{
 return 0;
}
# 104 "./include/linux/elf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_elf_adjust_prot(int prot,
           const struct arch_elf_state *state,
           bool has_interp, bool is_interp)
{
 return prot;
}
# 23 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./include/linux/ptrace.h" 1
# 10 "./include/linux/ptrace.h"
# 1 "./include/linux/pid_namespace.h" 1
# 10 "./include/linux/pid_namespace.h"
# 1 "./include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "./include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct time_namespace *time_ns;
 struct time_namespace *time_ns_for_children;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 53 "./include/linux/nsproxy.h"
struct nsset {
 unsigned flags;
 struct nsproxy *nsproxy;
 struct fs_struct *fs;
 const struct cred *cred;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *nsset_cred(struct nsset *set)
{
 if (set->flags & 0x10000000)
  return (struct cred *)set->cred;

 return ((void *)0);
}
# 94 "./include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) nsproxy_cache_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 11 "./include/linux/pid_namespace.h" 2
# 1 "./include/linux/ns_common.h" 1






struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
 refcount_t count;
};
# 12 "./include/linux/pid_namespace.h" 2
# 1 "./include/linux/idr.h" 1
# 19 "./include/linux/idr.h"
struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 66 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ do { extern void __compiletime_assert_212(void) ; if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_212(); } while (0); (*(const volatile typeof( _Generic((idr->idr_next), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (idr->idr_next))) *)&(idr->idr_next)); });
}
# 79 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 do { do { extern void __compiletime_assert_213(void) ; if (!((sizeof(idr->idr_next) == sizeof(char) || sizeof(idr->idr_next) == sizeof(short) || sizeof(idr->idr_next) == sizeof(int) || sizeof(idr->idr_next) == sizeof(long)) || sizeof(idr->idr_next) == sizeof(long long))) __compiletime_assert_213(); } while (0); do { *(volatile typeof(idr->idr_next) *)&(idr->idr_next) = (val); } while (0); } while (0);
}
# 112 "./include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
    unsigned long max, gfp_t);
int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
void *idr_remove(struct idr *, unsigned long id);
void *idr_find(const struct idr *, unsigned long id);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ul(struct idr *, unsigned long *nextid);
void *idr_replace(struct idr *, void *, unsigned long id);
void idr_destroy(struct idr *);
# 135 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((25 + 0)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 149 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_preload_end(void)
{
 do { local_lock_release(({ do { const void *__vpp_verify = (typeof((&radix_tree_preloads.lock) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock)); (typeof((typeof(*(&radix_tree_preloads.lock)) *)(&radix_tree_preloads.lock))) (__ptr + ((local_paca->data_offset))); }); })); __asm__ __volatile__("": : :"memory"); } while (0);
}
# 240 "./include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

struct ida {
 struct xarray xa;
};
# 255 "./include/linux/idr.h"
int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
void ida_free(struct ida *, unsigned int id);
void ida_destroy(struct ida *ida);
# 271 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc(struct ida *ida, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, ~0, gfp);
}
# 289 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
{
 return ida_alloc_range(ida, min, ~0, gfp);
}
# 307 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, max, gfp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ida_init(struct ida *ida)
{
 xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (25 + 0)) << ( unsigned)((( xa_mark_t)0U)))))));
}
# 325 "./include/linux/idr.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ida_is_empty(const struct ida *ida)
{
 return xa_empty(&ida->xa);
}
# 13 "./include/linux/pid_namespace.h" 2




struct fs_pin;

struct pid_namespace {
 struct idr idr;
 struct callback_head rcu;
 unsigned int pid_allocated;
 struct task_struct *child_reaper;
 struct kmem_cache *pid_cachep;
 unsigned int level;
 struct pid_namespace *parent;



 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 int reboot;
 struct ns_common ns;
} ;

extern struct pid_namespace init_pid_ns;




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *get_pid_ns(struct pid_namespace *ns)
{
 if (ns != &init_pid_ns)
  refcount_inc(&ns->ns.count);
 return ns;
}

extern struct pid_namespace *copy_pid_ns(unsigned long flags,
 struct user_namespace *user_ns, struct pid_namespace *ns);
extern void zap_pid_ns_processes(struct pid_namespace *pid_ns);
extern int reboot_pid_ns(struct pid_namespace *pid_ns, int cmd);
extern void put_pid_ns(struct pid_namespace *ns);
# 85 "./include/linux/pid_namespace.h"
extern struct pid_namespace *task_active_pid_ns(struct task_struct *tsk);
void pidhash_init(void);
void pid_idr_init(void);
# 11 "./include/linux/ptrace.h" 2
# 1 "./include/uapi/linux/ptrace.h" 1
# 59 "./include/uapi/linux/ptrace.h"
struct ptrace_peeksiginfo_args {
 __u64 off;
 __u32 flags;
 __s32 nr;
};







struct seccomp_metadata {
 __u64 filter_off;
 __u64 flags;
};







struct ptrace_syscall_info {
 __u8 op;
 __u8 pad[3];
 __u32 arch;
 __u64 instruction_pointer;
 __u64 stack_pointer;
 union {
  struct {
   __u64 nr;
   __u64 args[6];
  } entry;
  struct {
   __s64 rval;
   __u8 is_error;
  } exit;
  struct {
   __u64 nr;
   __u64 args[6];
   __u32 ret_data;
  } seccomp;
 };
};



struct ptrace_rseq_configuration {
 __u64 rseq_abi_pointer;
 __u32 rseq_abi_size;
 __u32 signature;
 __u32 flags;
 __u32 pad;
};
# 12 "./include/linux/ptrace.h" 2



struct syscall_info {
 __u64 sp;
 struct seccomp_data data;
};

extern int ptrace_access_vm(struct task_struct *tsk, unsigned long addr,
       void *buf, int len, unsigned int gup_flags);
# 56 "./include/linux/ptrace.h"
extern long arch_ptrace(struct task_struct *child, long request,
   unsigned long addr, unsigned long data);
extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);
extern int ptrace_writedata(struct task_struct *tsk, char *src, unsigned long dst, int len);
extern void ptrace_disable(struct task_struct *);
extern int ptrace_request(struct task_struct *child, long request,
     unsigned long addr, unsigned long data);
extern void ptrace_notify(int exit_code);
extern void __ptrace_link(struct task_struct *child,
     struct task_struct *new_parent,
     const struct cred *ptracer_cred);
extern void __ptrace_unlink(struct task_struct *child);
extern void exit_ptrace(struct task_struct *tracer, struct list_head *dead);
# 95 "./include/linux/ptrace.h"
extern bool ptrace_may_access(struct task_struct *task, unsigned int mode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptrace_reparented(struct task_struct *child)
{
 return !same_thread_group(child->real_parent, child->parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_unlink(struct task_struct *child)
{
 if (__builtin_expect(!!(child->ptrace), 0))
  __ptrace_unlink(child);
}

int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
# 124 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *ptrace_parent(struct task_struct *task)
{
 if (__builtin_expect(!!(task->ptrace), 0))
  return ({ typeof(*(task->parent)) *________p1 = (typeof(*(task->parent)) *)({ do { extern void __compiletime_assert_214(void) ; if (!((sizeof((task->parent)) == sizeof(char) || sizeof((task->parent)) == sizeof(short) || sizeof((task->parent)) == sizeof(int) || sizeof((task->parent)) == sizeof(long)) || sizeof((task->parent)) == sizeof(long long))) __compiletime_assert_214(); } while (0); (*(const volatile typeof( _Generic(((task->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((task->parent)))) *)&((task->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(task->parent)) *)(________p1)); });
 return ((void *)0);
}
# 140 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptrace_event_enabled(struct task_struct *task, int event)
{
 return task->ptrace & (1 << (3 + (event)));
}
# 155 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_event(int event, unsigned long message)
{
 if (__builtin_expect(!!(ptrace_event_enabled(get_current(), event)), 0)) {
  get_current()->ptrace_message = message;
  ptrace_notify((event << 8) | 5);
 } else if (event == 4) {

  if ((get_current()->ptrace & (0x00000001|0x00010000)) == 0x00000001)
   send_sig(5, get_current(), 0);
 }
}
# 178 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_event_pid(int event, struct pid *pid)
{






 unsigned long message = 0;
 struct pid_namespace *ns;

 rcu_read_lock();
 ns = task_active_pid_ns(({ typeof(*(get_current()->parent)) *________p1 = (typeof(*(get_current()->parent)) *)({ do { extern void __compiletime_assert_215(void) ; if (!((sizeof((get_current()->parent)) == sizeof(char) || sizeof((get_current()->parent)) == sizeof(short) || sizeof((get_current()->parent)) == sizeof(int) || sizeof((get_current()->parent)) == sizeof(long)) || sizeof((get_current()->parent)) == sizeof(long long))) __compiletime_assert_215(); } while (0); (*(const volatile typeof( _Generic(((get_current()->parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((get_current()->parent)))) *)&((get_current()->parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(get_current()->parent)) *)(________p1)); }));
 if (ns)
  message = pid_nr_ns(pid, ns);
 rcu_read_unlock();

 ptrace_event(event, message);
}
# 208 "./include/linux/ptrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_init_task(struct task_struct *child, bool ptrace)
{
 INIT_LIST_HEAD(&child->ptrace_entry);
 INIT_LIST_HEAD(&child->ptraced);
 child->jobctl = 0;
 child->ptrace = 0;
 child->parent = child->real_parent;

 if (__builtin_expect(!!(ptrace), 0) && get_current()->ptrace) {
  child->ptrace = get_current()->ptrace;
  __ptrace_link(child, get_current()->parent, get_current()->ptracer_cred);

  if (child->ptrace & 0x00010000)
   task_set_jobctl_pending(child, (1UL << 19));
  else
   sigaddset(&child->pending.signal, 19);
 }
 else
  child->ptracer_cred = ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_release_task(struct task_struct *task)
{
 do { if (__builtin_constant_p(!list_empty(&task->ptraced))) { if (!list_empty(&task->ptraced)) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ptrace.h"), "i" (237), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ptrace.h"), "i" (237), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(!list_empty(&task->ptraced)))); } } while (0);
 ptrace_unlink(task);
 do { if (__builtin_constant_p(!list_empty(&task->ptrace_entry))) { if (!list_empty(&task->ptrace_entry)) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ptrace.h"), "i" (239), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ptrace.h"), "i" (239), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(!list_empty(&task->ptrace_entry)))); } } while (0);
}
# 313 "./include/linux/ptrace.h"
extern void user_enable_single_step(struct task_struct *);
extern void user_disable_single_step(struct task_struct *);
# 343 "./include/linux/ptrace.h"
extern void user_enable_block_step(struct task_struct *);



extern void user_single_step_report(struct pt_regs *regs);
# 417 "./include/linux/ptrace.h"
extern int task_current_syscall(struct task_struct *target, struct syscall_info *info);

extern void sigaction_compat_abi(struct k_sigaction *act, struct k_sigaction *oact);
# 24 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./include/linux/pagemap.h" 1
# 11 "./include/linux/pagemap.h"
# 1 "./include/linux/highmem.h" 1
# 10 "./include/linux/highmem.h"
# 1 "./include/linux/hardirq.h" 1




# 1 "./include/linux/context_tracking_state.h" 1





# 1 "./include/linux/static_key.h" 1
# 7 "./include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 49 "./include/linux/context_tracking_state.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_in_user(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled_cpu(int cpu) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_enabled_this_cpu(void) { return false; }
# 6 "./include/linux/hardirq.h" 2


# 1 "./include/linux/ftrace_irq.h" 1
# 15 "./include/linux/ftrace_irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_enter(void)
{
# 25 "./include/linux/ftrace_irq.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_exit(void)
{
# 37 "./include/linux/ftrace_irq.h"
}
# 9 "./include/linux/hardirq.h" 2

# 1 "./include/linux/vtime.h" 1








# 1 "./arch/powerpc/include/generated/asm/vtime.h" 1
# 1 "./include/asm-generic/vtime.h" 1
# 2 "./arch/powerpc/include/generated/asm/vtime.h" 2
# 10 "./include/linux/vtime.h" 2






extern void vtime_account_kernel(struct task_struct *tsk);
extern void vtime_account_idle(struct task_struct *tsk);
# 28 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_enter(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_exit(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }



extern void vtime_account_irq(struct task_struct *tsk, unsigned int offset);
extern void vtime_account_softirq(struct task_struct *tsk);
extern void vtime_account_hardirq(struct task_struct *tsk);
extern void vtime_flush(struct task_struct *tsk);
# 52 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vtime_accounting_enabled_this_cpu(void) { return true; }
extern void vtime_task_switch(struct task_struct *prev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void vtime_account_guest_enter(void)
{
 vtime_account_kernel(get_current());
 get_current()->flags |= 0x00000001;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void vtime_account_guest_exit(void)
{
 vtime_account_kernel(get_current());
 get_current()->flags &= ~0x00000001;
}
# 135 "./include/linux/vtime.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqtime_account_irq(struct task_struct *tsk, unsigned int offset) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_softirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << (0 + 8)));
 irqtime_account_irq(tsk, (1UL << (0 + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_softirq_exit(struct task_struct *tsk)
{
 vtime_account_softirq(tsk);
 irqtime_account_irq(tsk, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_hardirq_enter(struct task_struct *tsk)
{
 vtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
 irqtime_account_irq(tsk, (1UL << ((0 + 8) + 8)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_hardirq_exit(struct task_struct *tsk)
{
 vtime_account_hardirq(tsk);
 irqtime_account_irq(tsk, 0);
}
# 11 "./include/linux/hardirq.h" 2
# 1 "./arch/powerpc/include/asm/hardirq.h" 1





# 1 "./include/linux/irq.h" 1
# 16 "./include/linux/irq.h"
# 1 "./include/linux/irqhandler.h" 1
# 10 "./include/linux/irqhandler.h"
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(struct irq_desc *desc);
# 17 "./include/linux/irq.h" 2

# 1 "./include/linux/irqnr.h" 1




# 1 "./include/uapi/linux/irqnr.h" 1
# 6 "./include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 19 "./include/linux/irq.h" 2

# 1 "./include/linux/io.h" 1
# 13 "./include/linux/io.h"
# 1 "./arch/powerpc/include/asm/io.h" 1
# 15 "./arch/powerpc/include/asm/io.h"
extern int check_legacy_ioport(unsigned long base_port);




extern struct pci_dev *isa_bridge_pcidev;






# 1 "./include/linux/device.h" 1
# 15 "./include/linux/device.h"
# 1 "./include/linux/dev_printk.h" 1
# 22 "./include/linux/dev_printk.h"
struct device;




struct dev_printk_info {
 char subsystem[16];
 char device[48];
};



__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void _dev_printk(const char *level, const struct device *dev,
   const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_emerg(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_alert(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_crit(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_err(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_warn(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_notice(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 16 "./include/linux/device.h" 2
# 1 "./include/linux/energy_model.h" 1




# 1 "./include/linux/device.h" 1
# 6 "./include/linux/energy_model.h" 2

# 1 "./include/linux/kobject.h" 1
# 20 "./include/linux/kobject.h"
# 1 "./include/linux/sysfs.h" 1
# 16 "./include/linux/sysfs.h"
# 1 "./include/linux/kernfs.h" 1
# 20 "./include/linux/kernfs.h"
struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;
struct fs_context;

struct kernfs_fs_context;
struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};






enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 76 "./include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,




 KERNFS_ROOT_SUPPORT_USER_XATTR = 0x0008,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;




 unsigned long rev;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};
# 128 "./include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 140 "./include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;





 u64 id;

 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 173 "./include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 last_id_lowbits;
 u32 id_highbits;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 241 "./include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 257 "./include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);




};




struct kernfs_fs_context {
 struct kernfs_root *root;
 void *ns_tag;
 unsigned long magic;


 bool new_sb_created;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_id_ino(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return id;
 else
  return (u32)id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 kernfs_id_gen(u64 id)
{

 if (sizeof(ino_t) >= sizeof(u64))
  return 1;
 else
  return id >> 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_ino(struct kernfs_node *kn)
{
 return kernfs_id_ino(kn->id);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t kernfs_gen(struct kernfs_node *kn)
{
 return kernfs_id_gen(kn->id);
}
# 333 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/kernfs.h"), "i" (335), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(!(({ do { extern void __compiletime_assert_216(void) ; if (!((sizeof((&kn->dir.children)->rb_node) == sizeof(char) || sizeof((&kn->dir.children)->rb_node) == sizeof(short) || sizeof((&kn->dir.children)->rb_node) == sizeof(int) || sizeof((&kn->dir.children)->rb_node) == sizeof(long)) || sizeof((&kn->dir.children)->rb_node) == sizeof(long long))) __compiletime_assert_216(); } while (0); (*(const volatile typeof( _Generic(((&kn->dir.children)->rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((&kn->dir.children)->rb_node))) *)&((&kn->dir.children)->rb_node)); }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/kernfs.h"), "i" (336), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
        struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
       void *value, size_t size);
int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
       const void *value, size_t size, int flags);

const void *kernfs_super_ns(struct super_block *sb);
int kernfs_get_tree(struct fs_context *fc);
void kernfs_free_fs_context(struct fs_context *fc);
void kernfs_kill_sb(struct super_block *sb);

void kernfs_init(void);

struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *root,
         u64 id);
# 545 "./include/linux/kernfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode,
        (kuid_t){ 0 }, (kgid_t){ 0 },
        priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, kuid_t uid, kgid_t gid,
        loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = ((void *)0);




 return __kernfs_create_file(parent, name, mode, uid, gid,
        size, ops, priv, ns, key);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode,
         (kuid_t){ 0 }, (kgid_t){ 0 },
         size, ops, priv, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}
# 17 "./include/linux/sysfs.h" 2




# 1 "./include/linux/kobject_ns.h" 1
# 19 "./include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 39 "./include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "./include/linux/sysfs.h" 2



struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 84 "./include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 171 "./include/linux/sysfs.h"
struct file;
struct vm_area_struct;
struct address_space;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 struct address_space *(*f_mapping)(void);
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 238 "./include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
       const struct attribute * const *attr);
int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
      struct kobject *target_kobj,
      const char *target_name,
      const char *symlink_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((__warn_unused_result__)) sysfs_init(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}

int sysfs_file_change_owner(struct kobject *kobj, const char *name, kuid_t kuid,
       kgid_t kgid);
int sysfs_change_owner(struct kobject *kobj, kuid_t kuid, kgid_t kgid);
int sysfs_link_change_owner(struct kobject *kobj, struct kobject *targ,
       const char *name, kuid_t kuid, kgid_t kgid);
int sysfs_groups_change_owner(struct kobject *kobj,
         const struct attribute_group **groups,
         kuid_t kuid, kgid_t kgid);
int sysfs_group_change_owner(struct kobject *kobj,
        const struct attribute_group *groups, kuid_t kuid,
        kgid_t kgid);
__attribute__((__format__(printf, 2, 3)))
int sysfs_emit(char *buf, const char *fmt, ...);
__attribute__((__format__(printf, 3, 4)))
int sysfs_emit_at(char *buf, int at, const char *fmt, ...);
# 604 "./include/linux/sysfs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 21 "./include/linux/kobject.h" 2


# 1 "./include/linux/kref.h" 1
# 19 "./include/linux/kref.h"
struct kref {
 refcount_t refcount;
};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_get(struct kref *kref)
{
 refcount_inc(&kref->refcount);
}
# 62 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 109 "./include/linux/kref.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero(&kref->refcount);
}
# 24 "./include/linux/kobject.h" 2
# 41 "./include/linux/kobject.h"
extern u64 uevent_seqnum;
# 53 "./include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((__format__(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((__format__(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create(void);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern void kobject_get_ownership(struct kobject *kobj,
      kuid_t *uid, kgid_t *gid);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 131 "./include/linux/kobject.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kobject_has_children(struct kobject *kobj)
{
 ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/kobject.h"), "i" (133), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[64];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 192 "./include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_217(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_217(); } while (0); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((__format__(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 8 "./include/linux/energy_model.h" 2

# 1 "./include/linux/sched/cpufreq.h" 1
# 14 "./include/linux/sched/cpufreq.h"
struct cpufreq_policy;

struct update_util_data {
       void (*func)(struct update_util_data *data, u64 time, unsigned int flags);
};

void cpufreq_add_update_util_hook(int cpu, struct update_util_data *data,
                       void (*func)(struct update_util_data *data, u64 time,
        unsigned int flags));
void cpufreq_remove_update_util_hook(int cpu);
bool cpufreq_this_cpu_can_update(struct cpufreq_policy *policy);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long map_util_freq(unsigned long util,
     unsigned long freq, unsigned long cap)
{
 return freq * util / cap;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long map_util_perf(unsigned long util)
{
 return util + (util >> 2);
}
# 10 "./include/linux/energy_model.h" 2
# 1 "./include/linux/sched/topology.h" 1






# 1 "./include/linux/sched/idle.h" 1






enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};

extern void wake_up_if_idle(int cpu);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __current_set_polling(void)
{
 set_ti_thread_flag(((struct thread_info *)get_current()), 19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) current_set_polling_and_test(void)
{
 __current_set_polling();





 __asm__ __volatile__ ("sync" : : : "memory");

 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 2)), 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __current_clr_polling(void)
{
 clear_ti_thread_flag(((struct thread_info *)get_current()), 19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) current_clr_polling_and_test(void)
{
 __current_clr_polling();





 __asm__ __volatile__ ("sync" : : : "memory");

 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 2)), 0);
}
# 72 "./include/linux/sched/idle.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void current_clr_polling(void)
{
 __current_clr_polling();







 __asm__ __volatile__ ("sync" : : : "memory");

 do { if (test_ti_thread_flag(((struct thread_info *)get_current()), 2)) set_preempt_need_resched(); } while (0);
}
# 8 "./include/linux/sched/topology.h" 2








enum {
# 1 "./include/linux/sched/sd_flags.h" 1
# 51 "./include/linux/sched/sd_flags.h"
__SD_BALANCE_NEWIDLE,







__SD_BALANCE_EXEC,







__SD_BALANCE_FORK,







__SD_BALANCE_WAKE,






__SD_WAKE_AFFINE,
# 91 "./include/linux/sched/sd_flags.h"
__SD_ASYM_CPUCAPACITY,
# 101 "./include/linux/sched/sd_flags.h"
__SD_ASYM_CPUCAPACITY_FULL,
# 110 "./include/linux/sched/sd_flags.h"
__SD_SHARE_CPUCAPACITY,
# 119 "./include/linux/sched/sd_flags.h"
__SD_SHARE_PKG_RESOURCES,
# 130 "./include/linux/sched/sd_flags.h"
__SD_SERIALIZE,
# 140 "./include/linux/sched/sd_flags.h"
__SD_ASYM_PACKING,
# 150 "./include/linux/sched/sd_flags.h"
__SD_PREFER_SIBLING,







__SD_OVERLAP,







__SD_NUMA,
# 18 "./include/linux/sched/topology.h" 2
 __SD_FLAG_CNT,
};



enum {
# 1 "./include/linux/sched/sd_flags.h" 1
# 51 "./include/linux/sched/sd_flags.h"
SD_BALANCE_NEWIDLE = 1 << __SD_BALANCE_NEWIDLE,







SD_BALANCE_EXEC = 1 << __SD_BALANCE_EXEC,







SD_BALANCE_FORK = 1 << __SD_BALANCE_FORK,







SD_BALANCE_WAKE = 1 << __SD_BALANCE_WAKE,






SD_WAKE_AFFINE = 1 << __SD_WAKE_AFFINE,
# 91 "./include/linux/sched/sd_flags.h"
SD_ASYM_CPUCAPACITY = 1 << __SD_ASYM_CPUCAPACITY,
# 101 "./include/linux/sched/sd_flags.h"
SD_ASYM_CPUCAPACITY_FULL = 1 << __SD_ASYM_CPUCAPACITY_FULL,
# 110 "./include/linux/sched/sd_flags.h"
SD_SHARE_CPUCAPACITY = 1 << __SD_SHARE_CPUCAPACITY,
# 119 "./include/linux/sched/sd_flags.h"
SD_SHARE_PKG_RESOURCES = 1 << __SD_SHARE_PKG_RESOURCES,
# 130 "./include/linux/sched/sd_flags.h"
SD_SERIALIZE = 1 << __SD_SERIALIZE,
# 140 "./include/linux/sched/sd_flags.h"
SD_ASYM_PACKING = 1 << __SD_ASYM_PACKING,
# 150 "./include/linux/sched/sd_flags.h"
SD_PREFER_SIBLING = 1 << __SD_PREFER_SIBLING,







SD_OVERLAP = 1 << __SD_OVERLAP,







SD_NUMA = 1 << __SD_NUMA,
# 25 "./include/linux/sched/topology.h" 2
};




struct sd_flag_debug {
 unsigned int meta_flags;
 char *name;
};
extern const struct sd_flag_debug sd_flag_debug[];




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_smt_flags(void)
{
 return SD_SHARE_CPUCAPACITY | SD_SHARE_PKG_RESOURCES;
}
# 53 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_numa_flags(void)
{
 return SD_NUMA;
}


extern int arch_asym_cpu_priority(int cpu);

struct sched_domain_attr {
 int relax_domain_level;
};





extern int sched_domain_level_max;

struct sched_group;

struct sched_domain_shared {
 atomic_t ref;
 atomic_t nr_busy_cpus;
 int has_idle_cores;
};

struct sched_domain {

 struct sched_domain *parent;
 struct sched_domain *child;
 struct sched_group *groups;
 unsigned long min_interval;
 unsigned long max_interval;
 unsigned int busy_factor;
 unsigned int imbalance_pct;
 unsigned int cache_nice_tries;

 int nohz_idle;
 int flags;
 int level;


 unsigned long last_balance;
 unsigned int balance_interval;
 unsigned int nr_balance_failed;


 u64 max_newidle_lb_cost;
 unsigned long next_decay_max_lb_cost;

 u64 avg_scan_cost;
# 137 "./include/linux/sched/topology.h"
 char *name;

 union {
  void *private;
  struct callback_head rcu;
 };
 struct sched_domain_shared *shared;

 unsigned int span_weight;







 unsigned long span[];
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *sched_domain_span(struct sched_domain *sd)
{
 return ((struct cpumask *)(1 ? (sd->span) : (void *)sizeof(__check_is_bitmap(sd->span))));
}

extern void partition_sched_domains_locked(int ndoms_new,
        cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);

extern void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);


cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms);

bool cpus_share_cache(int this_cpu, int that_cpu);

typedef const struct cpumask *(*sched_domain_mask_f)(int cpu);
typedef int (*sched_domain_flags_f)(void);



struct sd_data {
 struct sched_domain * *sd;
 struct sched_domain_shared * *sds;
 struct sched_group * *sg;
 struct sched_group_capacity * *sgc;
};

struct sched_domain_topology_level {
 sched_domain_mask_f mask;
 sched_domain_flags_f sd_flags;
 int flags;
 int numa_level;
 struct sd_data data;

 char *name;

};

extern void set_sched_topology(struct sched_domain_topology_level *tl);
# 231 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rebuild_sched_domains_energy(void)
{
}
# 247 "./include/linux/sched/topology.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long arch_scale_cpu_capacity(int cpu)
{
 return (1L << 10);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long arch_scale_thermal_pressure(int cpu)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch_set_thermal_pressure(const struct cpumask *cpus,
          unsigned long th_pressure)
{ }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_node(const struct task_struct *p)
{
 return cpu_to_node(task_cpu(p));
}
# 11 "./include/linux/energy_model.h" 2
# 21 "./include/linux/energy_model.h"
struct em_perf_state {
 unsigned long frequency;
 unsigned long power;
 unsigned long cost;
};
# 44 "./include/linux/energy_model.h"
struct em_perf_domain {
 struct em_perf_state *table;
 int nr_perf_states;
 int milliwatts;
 unsigned long cpus[];
};
# 215 "./include/linux/energy_model.h"
struct em_data_callback {};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
int em_dev_register_perf_domain(struct device *dev, unsigned int nr_states,
    struct em_data_callback *cb, cpumask_t *span,
    bool milliwatts)
{
 return -22;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void em_dev_unregister_perf_domain(struct device *dev)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct em_perf_domain *em_cpu_get(int cpu)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct em_perf_domain *em_pd_get(struct device *dev)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long em_cpu_energy(struct em_perf_domain *pd,
   unsigned long max_util, unsigned long sum_util,
   unsigned long allowed_cpu_cap)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int em_pd_nr_perf_states(struct em_perf_domain *pd)
{
 return 0;
}
# 17 "./include/linux/device.h" 2


# 1 "./include/linux/klist.h" 1
# 17 "./include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 34 "./include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 20 "./include/linux/device.h" 2





# 1 "./include/linux/pm.h" 1
# 22 "./include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
# 44 "./include/linux/pm.h"
extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 277 "./include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 501 "./include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 523 "./include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;
# 546 "./include/linux/pm.h"
};
# 566 "./include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;
 unsigned int must_resume:1;
 unsigned int may_skip_resume:1;




 struct hrtimer suspend_timer;
 u64 timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int needs_force_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 u64 last_busy;
 u64 active_time;
 u64 suspended_time;
 u64 accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 644 "./include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 int (*start)(struct device *dev);
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 708 "./include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);

extern bool dev_pm_skip_resume(struct device *dev);
extern bool dev_pm_skip_suspend(struct device *dev);
# 802 "./include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 26 "./include/linux/device.h" 2




# 1 "./include/linux/device/bus.h" 1
# 21 "./include/linux/device/bus.h"
struct device_driver;
struct fwnode_handle;
# 82 "./include/linux/device/bus.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 void (*sync_state)(struct device *dev);
 void (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 int (*dma_configure)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

 bool need_parent_lock;
};

extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 136 "./include/linux/device/bus.h"
extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);


int device_match_name(struct device *dev, const void *name);
int device_match_of_node(struct device *dev, const void *np);
int device_match_fwnode(struct device *dev, const void *fwnode);
int device_match_devt(struct device *dev, const void *pdevt);
int device_match_acpi_dev(struct device *dev, const void *adev);
int device_match_any(struct device *dev, const void *unused);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          const void *data,
          int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name)
{
 return bus_find_device(bus, start, name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
{
 return bus_find_device(bus, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
{
 return bus_find_device(bus, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_devt(struct bus_type *bus,
           dev_t devt)
{
 return bus_find_device(bus, ((void *)0), &devt, device_match_devt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_next_device(struct bus_type *bus,struct device *cur)
{
 return bus_find_device(bus, cur, ((void *)0), device_match_any);
}
# 242 "./include/linux/device/bus.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_acpi_dev(struct bus_type *bus, const void *adev)
{
 return ((void *)0);
}


struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 285 "./include/linux/device/bus.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 31 "./include/linux/device.h" 2
# 1 "./include/linux/device/class.h" 1
# 22 "./include/linux/device/class.h"
struct device;
struct fwnode_handle;
# 54 "./include/linux/device/class.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 99 "./include/linux/device/class.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_name(struct class *class,
             const char *name)
{
 return class_find_device(class, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_of_node(struct class *class, const struct device_node *np)
{
 return class_find_device(class, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_fwnode(struct class *class,
       const struct fwnode_handle *fwnode)
{
 return class_find_device(class, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_devt(struct class *class,
             dev_t devt)
{
 return class_find_device(class, ((void *)0), &devt, device_match_devt);
}
# 184 "./include/linux/device/class.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_acpi_dev(struct class *class, const void *adev)
{
 return ((void *)0);
}


struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 206 "./include/linux/device/class.h"
extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 238 "./include/linux/device/class.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 32 "./include/linux/device.h" 2
# 1 "./include/linux/device/driver.h" 1
# 44 "./include/linux/device/driver.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 95 "./include/linux/device/driver.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 void (*sync_state)(struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};


extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);



struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 148 "./include/linux/device/driver.h"
extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, const void *data,
      int (*match)(struct device *dev, const void *data));







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_name(struct device_driver *drv,
       const char *name)
{
 return driver_find_device(drv, ((void *)0), name, device_match_name);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_of_node(struct device_driver *drv,
         const struct device_node *np)
{
 return driver_find_device(drv, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_fwnode(struct device_driver *drv,
        const struct fwnode_handle *fwnode)
{
 return driver_find_device(drv, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_devt(struct device_driver *drv,
       dev_t devt)
{
 return driver_find_device(drv, ((void *)0), &devt, device_match_devt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_next_device(struct device_driver *drv,
           struct device *start)
{
 return driver_find_device(drv, start, ((void *)0), device_match_any);
}
# 232 "./include/linux/device/driver.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_acpi_dev(struct device_driver *drv, const void *adev)
{
 return ((void *)0);
}


extern int driver_deferred_probe_timeout;
void driver_deferred_probe_add(struct device *dev);
int driver_deferred_probe_check_state(struct device *dev);
void driver_init(void);
# 33 "./include/linux/device.h" 2
# 1 "./arch/powerpc/include/asm/device.h" 1







struct device_node;

struct pci_dn;
struct iommu_table;
# 20 "./arch/powerpc/include/asm/device.h"
struct dev_archdata {





 dma_addr_t dma_offset;


 struct iommu_table *iommu_table_base;



 struct pci_dn *pci_data;


 struct eeh_dev *edev;





 struct cxl_context *cxl_ctx;




};

struct pdev_archdata {
 u64 dma_mask;
};
# 34 "./include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct dev_pin_info;
struct dev_iommu;
# 62 "./include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 87 "./include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 153 "./include/linux/device.h"
int device_create_file(struct device *device,
         const struct device_attribute *entry);
void device_remove_file(struct device *dev,
   const struct device_attribute *attr);
bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);

void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
     int nid, const char *name) __attribute__((__malloc__));





void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
void devres_free(void *res);
void devres_add(struct device *dev, void *res);
void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id, gfp_t gfp);
void devres_close_group(struct device *dev, void *id);
void devres_remove_group(struct device *dev, void *id);
int devres_release_group(struct device *dev, void *id);


void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
void *devm_krealloc(struct device *dev, void *ptr, size_t size,
      gfp_t gfp) __attribute__((__warn_unused_result__));
__attribute__((__format__(printf, 3, 0))) char *devm_kvasprintf(struct device *dev, gfp_t gfp,
         const char *fmt, va_list ap) __attribute__((__malloc__));
__attribute__((__format__(printf, 3, 4))) char *devm_kasprintf(struct device *dev, gfp_t gfp,
        const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return devm_kmalloc(dev, bytes, flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
}
void devm_kfree(struct device *dev, const void *p);
char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
const char *devm_kstrdup_const(struct device *dev, const char *s, gfp_t gfp);
void *devm_kmemdup(struct device *dev, const void *src, size_t len, gfp_t gfp);

unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);
void *devm_ioremap_resource_wc(struct device *dev,
           const struct resource *res);

void *devm_of_iomap(struct device *dev,
       struct device_node *node, int index,
       resource_size_t *size);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
void devm_release_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 275 "./include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned int min_align_mask;
 unsigned long segment_boundary_mask;
};
# 298 "./include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 337 "./include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};
# 353 "./include/linux/device.h"
enum device_removable {
 DEVICE_REMOVABLE_NOT_SUPPORTED = 0,
 DEVICE_REMOVABLE_UNKNOWN,
 DEVICE_FIXED,
 DEVICE_REMOVABLE,
};
# 367 "./include/linux/device.h"
struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 struct list_head defer_sync;
 enum dl_dev_state status;
};
# 473 "./include/linux/device.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;




 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;






 struct irq_domain *msi_domain;





 raw_spinlock_t msi_lock;
 struct list_head msi_list;


 const struct dma_map_ops *dma_ops;

 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_limit;
 const struct bus_dma_region *dma_range_map;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;


 struct dma_coherent_mem *dma_mem;







 struct io_tlb_mem *dma_io_tlb_mem;


 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;


 int numa_node;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct dev_iommu *iommu;

 enum device_removable removable;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
 bool state_synced:1;
 bool can_match:1;






 bool dma_ops_bypass : 1;

};
# 594 "./include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 struct device link_dev;
 enum device_link_state status;
 u32 flags;
 refcount_t rpm_active;
 struct kref kref;
 struct work_struct rm_work;
 bool supplier_preactivated;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_218(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_218(); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_iommu_mapped(struct device *dev)
{
 return (dev->iommu_group != ((void *)0));
}


# 1 "./include/linux/pm_wakeup.h" 1
# 18 "./include/linux/pm_wakeup.h"
struct wake_irq;
# 43 "./include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};
# 77 "./include/linux/pm_wakeup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_wakeup_path(struct device *dev)
{
 return dev->power.wakeup_path;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_wakeup_path(struct device *dev)
{
 dev->power.wakeup_path = true;
}


extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int wakeup_sources_read_lock(void);
extern void wakeup_sources_read_unlock(int idx);
extern struct wakeup_source *wakeup_sources_walk_start(void);
extern struct wakeup_source *wakeup_sources_walk_next(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard);
extern void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard);
# 205 "./include/linux/pm_wakeup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 625 "./include/linux/device.h" 2

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}
# 642 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_bus_name(const struct device *dev)
{
 return dev->bus ? dev->bus->name : (dev->class ? dev->class->name : "");
}

__attribute__((__format__(printf, 2, 3))) int dev_set_name(struct device *dev, const char *name, ...);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
# 668 "./include/linux/device.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
 dev->power.driver_flags = flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
{
 return !!(dev->power.driver_flags & flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1 || !dev)
  return ((void *)0);
 return dev->of_node;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_has_sync_state(struct device *dev)
{
 if (!dev)
  return false;
 if (dev->driver && dev->driver->sync_state)
  return true;
 if (dev->bus && dev->bus->sync_state)
  return true;
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_removable(struct device *dev,
         enum device_removable removable)
{
 dev->removable = removable;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_is_removable(struct device *dev)
{
 return dev->removable == DEVICE_REMOVABLE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_removable_is_valid(struct device *dev)
{
 return dev->removable != DEVICE_REMOVABLE_NOT_SUPPORTED;
}




int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
void device_unregister(struct device *dev);
void device_initialize(struct device *dev);
int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
void device_del(struct device *dev);
int device_for_each_child(struct device *dev, void *data,
     int (*fn)(struct device *dev, void *data));
int device_for_each_child_reverse(struct device *dev, void *data,
      int (*fn)(struct device *dev, void *data));
struct device *device_find_child(struct device *dev, void *data,
     int (*match)(struct device *dev, void *data));
struct device *device_find_child_by_name(struct device *parent,
      const char *name);
int device_rename(struct device *dev, const char *new_name);
int device_move(struct device *dev, struct device *new_parent,
  enum dpm_order dpm_order);
int device_change_owner(struct device *dev, kuid_t kuid, kgid_t kgid);
const char *device_get_devnode(struct device *dev, umode_t *mode, kuid_t *uid,
          kgid_t *gid, const char **tmp);
int device_is_dependent(struct device *dev, void *target);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

void lock_device_hotplug(void);
void unlock_device_hotplug(void);
int lock_device_hotplug_sysfs(void);
int device_offline(struct device *dev);
int device_online(struct device *dev);
void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);
void device_set_node(struct device *dev, struct fwnode_handle *fwnode);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




struct device *__root_device_register(const char *name, struct module *owner);





void root_device_unregister(struct device *root);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





int __attribute__((__warn_unused_result__)) device_driver_attach(struct device_driver *drv,
          struct device *dev);
int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
void device_release_driver(struct device *dev);
int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
void device_initial_probe(struct device *dev);
int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);

bool device_is_bound(struct device *dev);




__attribute__((__format__(printf, 5, 6))) struct device *
device_create(struct class *cls, struct device *parent, dev_t devt,
       void *drvdata, const char *fmt, ...);
__attribute__((__format__(printf, 6, 7))) struct device *
device_create_with_groups(struct class *cls, struct device *parent, dev_t devt,
     void *drvdata, const struct attribute_group **groups,
     const char *fmt, ...);
void device_destroy(struct class *cls, dev_t devt);

int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
       const struct attribute_group **groups);
void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
           const struct attribute_group *grp);
void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






struct device *get_device(struct device *dev);
void put_device(struct device *dev);
bool kill_device(struct device *dev);


int devtmpfs_mount(void);





void device_shutdown(void);


const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);
void device_link_remove(void *consumer, struct device *supplier);
void device_links_supplier_sync_state_pause(void);
void device_links_supplier_sync_state_resume(void);

extern __attribute__((__format__(printf, 3, 4)))
int dev_err_probe(const struct device *dev, int err, const char *fmt, ...);
# 28 "./arch/powerpc/include/asm/io.h" 2





# 1 "./arch/powerpc/include/asm/delay.h" 1





# 1 "./include/linux/processor.h" 1
# 7 "./arch/powerpc/include/asm/delay.h" 2
# 1 "./arch/powerpc/include/asm/time.h" 1
# 21 "./arch/powerpc/include/asm/time.h"
extern unsigned long tb_ticks_per_jiffy;
extern unsigned long tb_ticks_per_usec;
extern unsigned long tb_ticks_per_sec;
extern struct clock_event_device decrementer_clockevent;


extern void generic_calibrate_decr(void);


extern unsigned long ppc_proc_freq;

extern unsigned long ppc_tb_freq;


extern bool tb_invalid;

struct div_result {
 u64 result_high;
 u64 result_low;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_vtb(void)
{
 if (cpu_has_feature(0x0000000000010000UL))
  return ({unsigned long rval; asm volatile("mfspr %0," "0x351" : "=r" (rval)); rval;});

 return 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_dec(void)
{
 if (0)
  return ({unsigned long rval; asm volatile("mfspr %0," "0x3DB" : "=r" (rval)); rval;});

 return ({unsigned long rval; asm volatile("mfspr %0," "0x016" : "=r" (rval)); rval;});
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dec(u64 val)
{
 if (0)
  asm volatile("mtspr " "0x3DB" ",%0" : : "r" ((unsigned long)((u32)val)) : "memory");
 else if (0)
  asm volatile("mtspr " "0x016" ",%0" : : "r" ((unsigned long)(val)) : "memory");
 else
  asm volatile("mtspr " "0x016" ",%0" : : "r" ((unsigned long)(val - 1)) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long tb_ticks_since(unsigned long tstamp)
{
 return ({unsigned long rval; asm volatile("mfspr %0, %1" : "=r" (rval) : "i" (0x10C)); rval;}) - tstamp;
}
# 94 "./arch/powerpc/include/asm/time.h"
extern void div128_by_32(u64 dividend_high, u64 dividend_low,
    unsigned divisor, struct div_result *dr);

extern void secondary_cpu_time_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) time_init(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long test_irq_work_pending(void)
{
 unsigned long x;

 asm volatile("lbz %0,%1(13)"
  : "=r" (x)
  : "i" (__builtin_offsetof(struct paca_struct, irq_work_pending)));
 return x;
}


extern __attribute__((section(".data..percpu" ""))) __typeof__(u64) decrementers_next_tb;


unsigned long long tb_to_ns(unsigned long long tb_ticks);

void timer_broadcast_interrupt(void);


void accumulate_stolen_time(void);
# 8 "./arch/powerpc/include/asm/delay.h" 2
# 17 "./arch/powerpc/include/asm/delay.h"
extern void __delay(unsigned long loops);
extern void udelay(unsigned long usecs);
# 34 "./arch/powerpc/include/asm/io.h" 2
# 61 "./arch/powerpc/include/asm/io.h"
extern unsigned long isa_io_base;
extern unsigned long pci_io_base;
extern unsigned long pci_dram_offset;

extern resource_size_t isa_mem_base;







extern bool isa_io_special;
# 137 "./arch/powerpc/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 in_8(const volatile u8 *addr) { u8 ret; __asm__ __volatile__("sync;""lbz""%U1%X1 %0,%1;twi 0,%0,0;isync" : "=r" (ret) : "m""<>" (*addr) : "memory"); return ret; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void out_8(volatile u8 *addr, u8 val) { __asm__ __volatile__("sync;""stb""%U0%X0 %1,%0" : "=m""<>" (*addr) : "r" (val) : "memory"); mmiowb_set_pending(); };


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 in_be16(const volatile u16 *addr) { u16 ret; __asm__ __volatile__("sync;""lhz""%U1%X1 %0,%1;twi 0,%0,0;isync" : "=r" (ret) : "m""<>" (*addr) : "memory"); return ret; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 in_be32(const volatile u32 *addr) { u32 ret; __asm__ __volatile__("sync;""lwz""%U1%X1 %0,%1;twi 0,%0,0;isync" : "=r" (ret) : "m""<>" (*addr) : "memory"); return ret; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 in_le16(const volatile u16 *addr) { u16 ret; __asm__ __volatile__("sync;""lhbrx"" %0,%y1;twi 0,%0,0;isync" : "=r" (ret) : "Z" (*addr) : "memory"); return ret; };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 in_le32(const volatile u32 *addr) { u32 ret; __asm__ __volatile__("sync;""lwbrx"" %0,%y1;twi 0,%0,0;isync" : "=r" (ret) : "Z" (*addr) : "memory"); return ret; };

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void out_be16(volatile u16 *addr, u16 val) { __asm__ __volatile__("sync;""sth""%U0%X0 %1,%0" : "=m""<>" (*addr) : "r" (val) : "memory"); mmiowb_set_pending(); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void out_be32(volatile u32 *addr, u32 val) { __asm__ __volatile__("sync;""stw""%U0%X0 %1,%0" : "=m""<>" (*addr) : "r" (val) : "memory"); mmiowb_set_pending(); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void out_le16(volatile u16 *addr, u16 val) { __asm__ __volatile__("sync;""sthbrx"" %1,%y0" : "=Z" (*addr) : "r" (val) : "memory"); mmiowb_set_pending(); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void out_le32(volatile u32 *addr, u32 val) { __asm__ __volatile__("sync;""stwbrx"" %1,%y0" : "=Z" (*addr) : "r" (val) : "memory"); mmiowb_set_pending(); };
# 166 "./arch/powerpc/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void out_be64(volatile u64 *addr, u64 val) { __asm__ __volatile__("sync;""std""%U0%X0 %1,%0" : "=m""<>" (*addr) : "r" (val) : "memory"); mmiowb_set_pending(); };
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 in_be64(const volatile u64 *addr) { u64 ret; __asm__ __volatile__("sync;""ld""%U1%X1 %0,%1;twi 0,%0,0;isync" : "=r" (ret) : "m""<>" (*addr) : "memory"); return ret; };


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 in_le64(const volatile u64 *addr)
{
 return (__u64)__builtin_bswap64((__u64)(in_be64(addr)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void out_le64(volatile u64 *addr, u64 val)
{
 out_be64(addr, (__u64)__builtin_bswap64((__u64)(val)));
}
# 200 "./arch/powerpc/include/asm/io.h"
extern void _insb(const volatile u8 *addr, void *buf, long count);
extern void _outsb(volatile u8 *addr,const void *buf,long count);
extern void _insw_ns(const volatile u16 *addr, void *buf, long count);
extern void _outsw_ns(volatile u16 *addr, const void *buf, long count);
extern void _insl_ns(const volatile u32 *addr, void *buf, long count);
extern void _outsl_ns(volatile u32 *addr, const void *buf, long count);
# 220 "./arch/powerpc/include/asm/io.h"
extern void _memset_io(volatile void *addr, int c, unsigned long n);
extern void _memcpy_fromio(void *dest, const volatile void *src,
      unsigned long n);
extern void _memcpy_toio(volatile void *dest, const void *src,
    unsigned long n);
# 245 "./arch/powerpc/include/asm/io.h"
# 1 "./arch/powerpc/include/asm/eeh.h" 1
# 17 "./arch/powerpc/include/asm/eeh.h"
# 1 "./arch/powerpc/include/uapi/asm/eeh.h" 1
# 18 "./arch/powerpc/include/asm/eeh.h" 2

struct pci_dev;
struct pci_bus;
struct pci_dn;
# 73 "./arch/powerpc/include/asm/eeh.h"
struct eeh_pe {
 int type;
 int state;
 int addr;
 struct pci_controller *phb;
 struct pci_bus *bus;
 int check_count;
 int freeze_count;
 time64_t tstamp;
 int false_positives;
 atomic_t pass_dev_cnt;
 struct eeh_pe *parent;
 void *data;
 struct list_head child_list;
 struct list_head child;
 struct list_head edevs;
# 99 "./arch/powerpc/include/asm/eeh.h"
 unsigned long stack_trace[64];
 int trace_entries;

};







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool eeh_pe_passed(struct eeh_pe *pe)
{
 return pe ? !!atomic_read(&pe->pass_dev_cnt) : false;
}
# 132 "./arch/powerpc/include/asm/eeh.h"
struct eeh_dev {
 int mode;
 int bdfn;
 struct pci_controller *controller;
 int pe_config_addr;
 u32 config_space[16];
 int pcix_cap;
 int pcie_cap;
 int aer_cap;
 int af_cap;
 struct eeh_pe *pe;
 struct list_head entry;
 struct list_head rmv_entry;
 struct pci_dn *pdn;
 struct pci_dev *pdev;
 bool in_error;


 struct pci_dev *physfn;
 int vf_index;
};
# 165 "./arch/powerpc/include/asm/eeh.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dn *eeh_dev_to_pdn(struct eeh_dev *edev)
{
 return edev ? edev->pdn : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dev *eeh_dev_to_pci_dev(struct eeh_dev *edev)
{
 return edev ? edev->pdev : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct eeh_pe *eeh_dev_to_pe(struct eeh_dev* edev)
{
 return edev ? edev->pe : ((void *)0);
}


enum {
 EEH_NEXT_ERR_NONE = 0,
 EEH_NEXT_ERR_INF,
 EEH_NEXT_ERR_FROZEN_PE,
 EEH_NEXT_ERR_FENCED_PHB,
 EEH_NEXT_ERR_DEAD_PHB,
 EEH_NEXT_ERR_DEAD_IOC
};
# 215 "./arch/powerpc/include/asm/eeh.h"
struct eeh_ops {
 char *name;
 struct eeh_dev *(*probe)(struct pci_dev *pdev);
 int (*set_option)(struct eeh_pe *pe, int option);
 int (*get_state)(struct eeh_pe *pe, int *delay);
 int (*reset)(struct eeh_pe *pe, int option);
 int (*get_log)(struct eeh_pe *pe, int severity, char *drv_log, unsigned long len);
 int (*configure_bridge)(struct eeh_pe *pe);
 int (*err_inject)(struct eeh_pe *pe, int type, int func,
     unsigned long addr, unsigned long mask);
 int (*read_config)(struct eeh_dev *edev, int where, int size, u32 *val);
 int (*write_config)(struct eeh_dev *edev, int where, int size, u32 val);
 int (*next_error)(struct eeh_pe **pe);
 int (*restore_config)(struct eeh_dev *edev);
 int (*notify_resume)(struct eeh_dev *edev);
};

extern int eeh_subsystem_flags;
extern u32 eeh_max_freezes;
extern bool eeh_debugfs_no_recover;
extern struct eeh_ops *eeh_ops;
extern raw_spinlock_t confirm_error_lock;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_add_flag(int flag)
{
 eeh_subsystem_flags |= flag;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_clear_flag(int flag)
{
 eeh_subsystem_flags &= ~flag;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool eeh_has_flag(int flag)
{
        return !!(eeh_subsystem_flags & flag);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool eeh_enabled(void)
{
 return eeh_has_flag(0x01) && !eeh_has_flag(0x02);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_serialize_lock(unsigned long *flags)
{
 do { ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); *flags = _raw_spin_lock_irqsave(&confirm_error_lock); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_serialize_unlock(unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&confirm_error_lock, flags); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool eeh_state_active(int state)
{
 return (state & ((1 << 3) | (1 << 4)))
 == ((1 << 3) | (1 << 4));
}

typedef void (*eeh_edev_traverse_func)(struct eeh_dev *edev, void *flag);
typedef void *(*eeh_pe_traverse_func)(struct eeh_pe *pe, void *flag);
void eeh_set_pe_aux_size(int size);
int eeh_phb_pe_create(struct pci_controller *phb);
int eeh_wait_state(struct eeh_pe *pe, int max_wait);
struct eeh_pe *eeh_phb_pe_get(struct pci_controller *phb);
struct eeh_pe *eeh_pe_next(struct eeh_pe *pe, struct eeh_pe *root);
struct eeh_pe *eeh_pe_get(struct pci_controller *phb, int pe_no);
int eeh_pe_tree_insert(struct eeh_dev *edev, struct eeh_pe *new_pe_parent);
int eeh_pe_tree_remove(struct eeh_dev *edev);
void eeh_pe_update_time_stamp(struct eeh_pe *pe);
void *eeh_pe_traverse(struct eeh_pe *root,
        eeh_pe_traverse_func fn, void *flag);
void eeh_pe_dev_traverse(struct eeh_pe *root,
    eeh_edev_traverse_func fn, void *flag);
void eeh_pe_restore_bars(struct eeh_pe *pe);
const char *eeh_pe_loc_get(struct eeh_pe *pe);
struct pci_bus *eeh_pe_bus_get(struct eeh_pe *pe);

void eeh_show_enabled(void);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) eeh_init(struct eeh_ops *ops);
int eeh_check_failure(const volatile void *token);
int eeh_dev_check_failure(struct eeh_dev *edev);
void eeh_addr_cache_init(void);
void eeh_probe_device(struct pci_dev *pdev);
void eeh_remove_device(struct pci_dev *);
int eeh_unfreeze_pe(struct eeh_pe *pe);
int eeh_pe_reset_and_recover(struct eeh_pe *pe);
int eeh_dev_open(struct pci_dev *pdev);
void eeh_dev_release(struct pci_dev *pdev);
struct eeh_pe *eeh_iommu_group_to_pe(struct iommu_group *group);
int eeh_pe_set_option(struct eeh_pe *pe, int option);
int eeh_pe_get_state(struct eeh_pe *pe);
int eeh_pe_reset(struct eeh_pe *pe, int option, bool include_passed);
int eeh_pe_configure(struct eeh_pe *pe);
int eeh_pe_inject_err(struct eeh_pe *pe, int type, int func,
        unsigned long addr, unsigned long mask);
# 357 "./arch/powerpc/include/asm/eeh.h"
void pseries_eeh_init_edev(struct pci_dn *pdn);
void pseries_eeh_init_edev_recursive(struct pci_dn *pdn);
# 368 "./arch/powerpc/include/asm/eeh.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 eeh_readb(const volatile void *addr)
{
 u8 val = in_8(addr);
 if (((val) == (u8)~0 && eeh_enabled()))
  eeh_check_failure(addr);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 eeh_readw(const volatile void *addr)
{
 u16 val = in_le16(addr);
 if (((val) == (u16)~0 && eeh_enabled()))
  eeh_check_failure(addr);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 eeh_readl(const volatile void *addr)
{
 u32 val = in_le32(addr);
 if (((val) == (u32)~0 && eeh_enabled()))
  eeh_check_failure(addr);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 eeh_readq(const volatile void *addr)
{
 u64 val = in_le64(addr);
 if (((val) == (u64)~0 && eeh_enabled()))
  eeh_check_failure(addr);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 eeh_readw_be(const volatile void *addr)
{
 u16 val = in_be16(addr);
 if (((val) == (u16)~0 && eeh_enabled()))
  eeh_check_failure(addr);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 eeh_readl_be(const volatile void *addr)
{
 u32 val = in_be32(addr);
 if (((val) == (u32)~0 && eeh_enabled()))
  eeh_check_failure(addr);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 eeh_readq_be(const volatile void *addr)
{
 u64 val = in_be64(addr);
 if (((val) == (u64)~0 && eeh_enabled()))
  eeh_check_failure(addr);
 return val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_memcpy_fromio(void *dest, const
         volatile void *src,
         unsigned long n)
{
 _memcpy_fromio(dest, src, n);




 if (n >= 4 && ((*((u32 *)(dest + n - 4))) == (u32)~0 && eeh_enabled()))
  eeh_check_failure(src);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_readsb(const volatile void *addr, void * buf,
         int ns)
{
 _insb(addr, buf, ns);
 if ((((*(((u8*)buf)+ns-1))) == (u8)~0 && eeh_enabled()))
  eeh_check_failure(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_readsw(const volatile void *addr, void * buf,
         int ns)
{
 _insw_ns(addr, buf, ns);
 if ((((*(((u16*)buf)+ns-1))) == (u16)~0 && eeh_enabled()))
  eeh_check_failure(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void eeh_readsl(const volatile void *addr, void * buf,
         int nl)
{
 _insl_ns(addr, buf, nl);
 if ((((*(((u32*)buf)+nl-1))) == (u32)~0 && eeh_enabled()))
  eeh_check_failure(addr);
}


void eeh_cache_debugfs_init(void);
# 246 "./arch/powerpc/include/asm/io.h" 2
# 301 "./arch/powerpc/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __raw_readb(const volatile void *addr)
{
 return *(volatile unsigned char *)(addr);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned short __raw_readw(const volatile void *addr)
{
 return *(volatile unsigned short *)(addr);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __raw_readl(const volatile void *addr)
{
 return *(volatile unsigned int *)(addr);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeb(unsigned char v, volatile void *addr)
{
 *(volatile unsigned char *)(addr) = v;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writew(unsigned short v, volatile void *addr)
{
 *(volatile unsigned short *)(addr) = v;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writel(unsigned int v, volatile void *addr)
{
 *(volatile unsigned int *)(addr) = v;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_readq(const volatile void *addr)
{
 return *(volatile unsigned long *)(addr);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeq(unsigned long v, volatile void *addr)
{
 *(volatile unsigned long *)(addr) = v;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeq_be(unsigned long v, volatile void *addr)
{
 __raw_writeq(( unsigned long)(( __be64)(__u64)(v)), addr);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_rm_writeb(u8 val, volatile void *paddr)
{
 __asm__ __volatile__("stbcix %0,0,%1"
  : : "r" (val), "r" (paddr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_rm_writew(u16 val, volatile void *paddr)
{
 __asm__ __volatile__("sthcix %0,0,%1"
  : : "r" (val), "r" (paddr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_rm_writel(u32 val, volatile void *paddr)
{
 __asm__ __volatile__("stwcix %0,0,%1"
  : : "r" (val), "r" (paddr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_rm_writeq(u64 val, volatile void *paddr)
{
 __asm__ __volatile__("stdcix %0,0,%1"
  : : "r" (val), "r" (paddr) : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_rm_writeq_be(u64 val, volatile void *paddr)
{
 __raw_rm_writeq(( u64)(( __be64)(__u64)(val)), paddr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __raw_rm_readb(volatile void *paddr)
{
 u8 ret;
 __asm__ __volatile__("lbzcix %0,0, %1"
        : "=r" (ret) : "r" (paddr) : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __raw_rm_readw(volatile void *paddr)
{
 u16 ret;
 __asm__ __volatile__("lhzcix %0,0, %1"
        : "=r" (ret) : "r" (paddr) : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __raw_rm_readl(volatile void *paddr)
{
 u32 ret;
 __asm__ __volatile__("lwzcix %0,0, %1"
        : "=r" (ret) : "r" (paddr) : "memory");
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __raw_rm_readq(volatile void *paddr)
{
 u64 ret;
 __asm__ __volatile__("ldcix %0,0, %1"
        : "=r" (ret) : "r" (paddr) : "memory");
 return ret;
}
# 589 "./arch/powerpc/include/asm/io.h"
extern struct ppc_pci_io {




# 1 "./arch/powerpc/include/asm/io-defs.h" 1




u8 (*readb) (const volatile void * addr);
u16 (*readw) (const volatile void * addr);
u32 (*readl) (const volatile void * addr);
u16 (*readw_be) (const volatile void * addr);
u32 (*readl_be) (const volatile void * addr);
void (*writeb) (u8 val, volatile void * addr);
void (*writew) (u16 val, volatile void * addr);
void (*writel) (u32 val, volatile void * addr);
void (*writew_be) (u16 val, volatile void * addr);
void (*writel_be) (u32 val, volatile void * addr);


u64 (*readq) (const volatile void * addr);
u64 (*readq_be) (const volatile void * addr);
void (*writeq) (u64 val, volatile void * addr);
void (*writeq_be) (u64 val, volatile void * addr);


u8 (*inb) (unsigned long port);
u16 (*inw) (unsigned long port);
u32 (*inl) (unsigned long port);
void (*outb) (u8 val, unsigned long port);
void (*outw) (u16 val, unsigned long port);
void (*outl) (u32 val, unsigned long port);

void (*readsb) (const volatile void * a, void *b, unsigned long c);

void (*readsw) (const volatile void * a, void *b, unsigned long c);

void (*readsl) (const volatile void * a, void *b, unsigned long c);

void (*writesb) (volatile void * a, const void *b, unsigned long c);

void (*writesw) (volatile void * a, const void *b, unsigned long c);

void (*writesl) (volatile void * a, const void *b, unsigned long c);


void (*insb) (unsigned long p, void *b, unsigned long c);

void (*insw) (unsigned long p, void *b, unsigned long c);

void (*insl) (unsigned long p, void *b, unsigned long c);

void (*outsb) (unsigned long p, const void *b, unsigned long c);

void (*outsw) (unsigned long p, const void *b, unsigned long c);

void (*outsl) (unsigned long p, const void *b, unsigned long c);


void (*memset_io) (volatile void * a, int c, unsigned long n);

void (*memcpy_fromio) (void *d, const volatile void * s, unsigned long n);

void (*memcpy_toio) (volatile void * d, const void *s, unsigned long n);
# 595 "./arch/powerpc/include/asm/io.h" 2




} ppc_pci_io;
# 619 "./arch/powerpc/include/asm/io.h"
# 1 "./arch/powerpc/include/asm/io-defs.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 readb (const volatile void * addr) { if (((void *)0) != ((void *)0)) return ppc_pci_io.readb (addr); return eeh_readb((addr)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 readw (const volatile void * addr) { if (((void *)0) != ((void *)0)) return ppc_pci_io.readw (addr); return eeh_readw((addr)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 readl (const volatile void * addr) { if (((void *)0) != ((void *)0)) return ppc_pci_io.readl (addr); return eeh_readl((addr)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 readw_be (const volatile void * addr) { if (((void *)0) != ((void *)0)) return ppc_pci_io.readw_be (addr); return eeh_readw_be((addr)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 readl_be (const volatile void * addr) { if (((void *)0) != ((void *)0)) return ppc_pci_io.readl_be (addr); return eeh_readl_be((addr)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writeb (u8 val, volatile void * addr) { if (((void *)0) != ((void *)0)) ppc_pci_io.writeb (val, addr); else out_8((addr), val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writew (u16 val, volatile void * addr) { if (((void *)0) != ((void *)0)) ppc_pci_io.writew (val, addr); else out_le16((addr), val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writel (u32 val, volatile void * addr) { if (((void *)0) != ((void *)0)) ppc_pci_io.writel (val, addr); else out_le32((addr), val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writew_be (u16 val, volatile void * addr) { if (((void *)0) != ((void *)0)) ppc_pci_io.writew_be (val, addr); else out_be16((addr), val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writel_be (u32 val, volatile void * addr) { if (((void *)0) != ((void *)0)) ppc_pci_io.writel_be (val, addr); else out_be32((addr), val); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 readq (const volatile void * addr) { if (((void *)0) != ((void *)0)) return ppc_pci_io.readq (addr); return eeh_readq((addr)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 readq_be (const volatile void * addr) { if (((void *)0) != ((void *)0)) return ppc_pci_io.readq_be (addr); return eeh_readq_be((addr)); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writeq (u64 val, volatile void * addr) { if (((void *)0) != ((void *)0)) ppc_pci_io.writeq (val, addr); else out_le64((addr), val); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writeq_be (u64 val, volatile void * addr) { if (((void *)0) != ((void *)0)) ppc_pci_io.writeq_be (val, addr); else out_be64((addr), val); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 inb (unsigned long port) { if (ppc_pci_io.inb != ((void *)0)) return ppc_pci_io.inb (port); return readb((volatile void *)pci_io_base + port);; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 inw (unsigned long port) { if (ppc_pci_io.inw != ((void *)0)) return ppc_pci_io.inw (port); return readw((volatile void *)pci_io_base + port);; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 inl (unsigned long port) { if (ppc_pci_io.inl != ((void *)0)) return ppc_pci_io.inl (port); return readl((volatile void *)pci_io_base + port);; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outb (u8 val, unsigned long port) { if (ppc_pci_io.outb != ((void *)0)) ppc_pci_io.outb (val, port); else writeb(val,(volatile void *)pci_io_base+port);; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outw (u16 val, unsigned long port) { if (ppc_pci_io.outw != ((void *)0)) ppc_pci_io.outw (val, port); else writew(val,(volatile void *)pci_io_base+port);; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outl (u32 val, unsigned long port) { if (ppc_pci_io.outl != ((void *)0)) ppc_pci_io.outl (val, port); else writel(val,(volatile void *)pci_io_base+port);; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsb (const volatile void * a, void *b, unsigned long c) { if (((void *)0) != ((void *)0)) ppc_pci_io.readsb (a, b, c); else eeh_readsb((a), (b), (c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsw (const volatile void * a, void *b, unsigned long c) { if (((void *)0) != ((void *)0)) ppc_pci_io.readsw (a, b, c); else eeh_readsw((a), (b), (c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsl (const volatile void * a, void *b, unsigned long c) { if (((void *)0) != ((void *)0)) ppc_pci_io.readsl (a, b, c); else eeh_readsl((a), (b), (c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesb (volatile void * a, const void *b, unsigned long c) { if (((void *)0) != ((void *)0)) ppc_pci_io.writesb (a, b, c); else _outsb((a),(b),(c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesw (volatile void * a, const void *b, unsigned long c) { if (((void *)0) != ((void *)0)) ppc_pci_io.writesw (a, b, c); else _outsw_ns((a),(b),(c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesl (volatile void * a, const void *b, unsigned long c) { if (((void *)0) != ((void *)0)) ppc_pci_io.writesl (a, b, c); else _outsl_ns((a),(b),(c)); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insb (unsigned long p, void *b, unsigned long c) { if (ppc_pci_io.insb != ((void *)0)) ppc_pci_io.insb (p, b, c); else readsb((volatile void *)pci_io_base+(p), (b), (c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insw (unsigned long p, void *b, unsigned long c) { if (ppc_pci_io.insw != ((void *)0)) ppc_pci_io.insw (p, b, c); else readsw((volatile void *)pci_io_base+(p), (b), (c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insl (unsigned long p, void *b, unsigned long c) { if (ppc_pci_io.insl != ((void *)0)) ppc_pci_io.insl (p, b, c); else readsl((volatile void *)pci_io_base+(p), (b), (c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsb (unsigned long p, const void *b, unsigned long c) { if (ppc_pci_io.outsb != ((void *)0)) ppc_pci_io.outsb (p, b, c); else writesb((volatile void *)pci_io_base+(p),(b),(c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsw (unsigned long p, const void *b, unsigned long c) { if (ppc_pci_io.outsw != ((void *)0)) ppc_pci_io.outsw (p, b, c); else writesw((volatile void *)pci_io_base+(p),(b),(c)); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsl (unsigned long p, const void *b, unsigned long c) { if (ppc_pci_io.outsl != ((void *)0)) ppc_pci_io.outsl (p, b, c); else writesl((volatile void *)pci_io_base+(p),(b),(c)); }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memset_io (volatile void * a, int c, unsigned long n) { if (((void *)0) != ((void *)0)) ppc_pci_io.memset_io (a, c, n); else _memset_io((a), c, n); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_fromio (void *d, const volatile void * s, unsigned long n) { if (((void *)0) != ((void *)0)) ppc_pci_io.memcpy_fromio (d, s, n); else eeh_memcpy_fromio(d, (s), n); }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_toio (volatile void * d, const void *s, unsigned long n) { if (((void *)0) != ((void *)0)) ppc_pci_io.memcpy_toio (d, s, n); else _memcpy_toio((d), s, n); }
# 620 "./arch/powerpc/include/asm/io.h" 2
# 678 "./arch/powerpc/include/asm/io.h"
# 1 "./include/asm-generic/iomap.h" 1
# 29 "./include/asm-generic/iomap.h"
extern unsigned int ioread8(const void *);
extern unsigned int ioread16(const void *);
extern unsigned int ioread16be(const void *);
extern unsigned int ioread32(const void *);
extern unsigned int ioread32be(const void *);

extern u64 ioread64(const void *);
extern u64 ioread64be(const void *);







extern u64 ioread64_lo_hi(const void *addr);
extern u64 ioread64_hi_lo(const void *addr);
extern u64 ioread64be_lo_hi(const void *addr);
extern u64 ioread64be_hi_lo(const void *addr);


extern void iowrite8(u8, void *);
extern void iowrite16(u16, void *);
extern void iowrite16be(u16, void *);
extern void iowrite32(u32, void *);
extern void iowrite32be(u32, void *);

extern void iowrite64(u64, void *);
extern void iowrite64be(u64, void *);







extern void iowrite64_lo_hi(u64 val, void *addr);
extern void iowrite64_hi_lo(u64 val, void *addr);
extern void iowrite64be_lo_hi(u64 val, void *addr);
extern void iowrite64be_hi_lo(u64 val, void *addr);
# 82 "./include/asm-generic/iomap.h"
extern void ioread8_rep(const void *port, void *buf, unsigned long count);
extern void ioread16_rep(const void *port, void *buf, unsigned long count);
extern void ioread32_rep(const void *port, void *buf, unsigned long count);

extern void iowrite8_rep(void *port, const void *buf, unsigned long count);
extern void iowrite16_rep(void *port, const void *buf, unsigned long count);
extern void iowrite32_rep(void *port, const void *buf, unsigned long count);



extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *);
# 107 "./include/asm-generic/iomap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioremap_np(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}




struct pci_dev;
extern void pci_iounmap(struct pci_dev *dev, void *);






# 1 "./include/asm-generic/pci_iomap.h" 1
# 10 "./include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
# 124 "./include/asm-generic/iomap.h" 2
# 679 "./arch/powerpc/include/asm/io.h" 2
# 778 "./arch/powerpc/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iosync(void)
{
        __asm__ __volatile__ ("sync" : : : "memory");
}
# 840 "./arch/powerpc/include/asm/io.h"
extern void *ioremap(phys_addr_t address, unsigned long size);
extern void *ioremap_prot(phys_addr_t address, unsigned long size,
      unsigned long flags);
extern void *ioremap_wc(phys_addr_t address, unsigned long size);







void *ioremap_coherent(phys_addr_t address, unsigned long size);




extern void iounmap(volatile void *addr);

void *ioremap_phb(phys_addr_t paddr, unsigned long size);

int early_ioremap_range(unsigned long ea, phys_addr_t pa,
   unsigned long size, pgprot_t prot);
void *do_ioremap(phys_addr_t pa, phys_addr_t offset, unsigned long size,
    pgprot_t prot, void *caller);

extern void *__ioremap_caller(phys_addr_t, unsigned long size,
          pgprot_t prot, void *caller);
# 904 "./arch/powerpc/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long virt_to_phys(volatile void * address)
{
 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((0 && !pfn_valid((({ do { } while (0); (unsigned long)(address) & 0x0fffffffffffffffUL; }) >> 16))))) { if (!(0 && !pfn_valid((({ do { } while (0); (unsigned long)(address) & 0x0fffffffffffffffUL; }) >> 16)))) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/io.h"), "i" (906), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/io.h"), "i" (906), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (0 && !pfn_valid((({ do { } while (0); (unsigned long)(address) & 0x0fffffffffffffffUL; }) >> 16))) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return ({ do { } while (0); (unsigned long)((unsigned long)address) & 0x0fffffffffffffffUL; });
}
# 924 "./arch/powerpc/include/asm/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * phys_to_virt(unsigned long address)
{
 return (void *)({ do { } while (0); (void *)(unsigned long)((phys_addr_t)(address) | 0xc000000000000000UL); });
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t page_to_phys(struct page *page)
{
 unsigned long pfn = (unsigned long)((page) - vmemmap);

 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((0 && !pfn_valid(pfn)))) { if (!(0 && !pfn_valid(pfn))) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/io.h"), "i" (937), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/io.h"), "i" (937), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (0 && !pfn_valid(pfn)) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return ((phys_addr_t)(pfn) << 16);
}
# 1003 "./arch/powerpc/include/asm/io.h"
# 1 "./include/asm-generic/io.h" 1
# 366 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsq(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u64 *buf = buffer;

  do {
   u64 x = __raw_readq(addr);
   *buf++ = x;
  } while (--count);
 }
}
# 429 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesq(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u64 *buf = buffer;

  do {
   __raw_writeq(*buf++, addr);
  } while (--count);
 }
}
# 526 "./include/asm-generic/io.h"
# 1 "./include/linux/logic_pio.h" 1
# 11 "./include/linux/logic_pio.h"
# 1 "./include/linux/fwnode.h" 1
# 16 "./include/linux/fwnode.h"
struct fwnode_operations;
struct device;
# 30 "./include/linux/fwnode.h"
struct fwnode_handle {
 struct fwnode_handle *secondary;
 const struct fwnode_operations *ops;
 struct device *dev;
 struct list_head suppliers;
 struct list_head consumers;
 u8 flags;
};

struct fwnode_link {
 struct fwnode_handle *supplier;
 struct list_head s_hook;
 struct fwnode_handle *consumer;
 struct list_head c_hook;
};







struct fwnode_endpoint {
 unsigned int port;
 unsigned int id;
 const struct fwnode_handle *local_fwnode;
};
# 73 "./include/linux/fwnode.h"
struct fwnode_reference_args {
 struct fwnode_handle *fwnode;
 unsigned int nargs;
 u64 args[8];
};
# 104 "./include/linux/fwnode.h"
struct fwnode_operations {
 struct fwnode_handle *(*get)(struct fwnode_handle *fwnode);
 void (*put)(struct fwnode_handle *fwnode);
 bool (*device_is_available)(const struct fwnode_handle *fwnode);
 const void *(*device_get_match_data)(const struct fwnode_handle *fwnode,
          const struct device *dev);
 bool (*property_present)(const struct fwnode_handle *fwnode,
     const char *propname);
 int (*property_read_int_array)(const struct fwnode_handle *fwnode,
           const char *propname,
           unsigned int elem_size, void *val,
           size_t nval);
 int
 (*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
          const char *propname, const char **val,
          size_t nval);
 const char *(*get_name)(const struct fwnode_handle *fwnode);
 const char *(*get_name_prefix)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*get_next_child_node)(const struct fwnode_handle *fwnode,
          struct fwnode_handle *child);
 struct fwnode_handle *
 (*get_named_child_node)(const struct fwnode_handle *fwnode,
    const char *name);
 int (*get_reference_args)(const struct fwnode_handle *fwnode,
      const char *prop, const char *nargs_prop,
      unsigned int nargs, unsigned int index,
      struct fwnode_reference_args *args);
 struct fwnode_handle *
 (*graph_get_next_endpoint)(const struct fwnode_handle *fwnode,
       struct fwnode_handle *prev);
 struct fwnode_handle *
 (*graph_get_remote_endpoint)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*graph_get_port_parent)(struct fwnode_handle *fwnode);
 int (*graph_parse_endpoint)(const struct fwnode_handle *fwnode,
        struct fwnode_endpoint *endpoint);
 int (*add_links)(struct fwnode_handle *fwnode);
};
# 166 "./include/linux/fwnode.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fwnode_init(struct fwnode_handle *fwnode,
          const struct fwnode_operations *ops)
{
 fwnode->ops = ops;
 INIT_LIST_HEAD(&fwnode->consumers);
 INIT_LIST_HEAD(&fwnode->suppliers);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fwnode_dev_initialized(struct fwnode_handle *fwnode,
       bool initialized)
{
 if (IS_ERR_OR_NULL(fwnode))
  return;

 if (initialized)
  fwnode->flags |= ((((1UL))) << (2));
 else
  fwnode->flags &= ~((((1UL))) << (2));
}

extern u32 fw_devlink_get_flags(void);
extern bool fw_devlink_is_strict(void);
int fwnode_link_add(struct fwnode_handle *con, struct fwnode_handle *sup);
void fwnode_links_purge(struct fwnode_handle *fwnode);
void fw_devlink_purge_absent_suppliers(struct fwnode_handle *fwnode);
# 12 "./include/linux/logic_pio.h" 2

enum {
 LOGIC_PIO_INDIRECT,
 LOGIC_PIO_CPU_MMIO,
};

struct logic_pio_hwaddr {
 struct list_head list;
 struct fwnode_handle *fwnode;
 resource_size_t hw_start;
 resource_size_t io_start;
 resource_size_t size;
 unsigned long flags;

 void *hostdata;
 const struct logic_pio_host_ops *ops;
};

struct logic_pio_host_ops {
 u32 (*in)(void *hostdata, unsigned long addr, size_t dwidth);
 void (*out)(void *hostdata, unsigned long addr, u32 val,
      size_t dwidth);
 u32 (*ins)(void *hostdata, unsigned long addr, void *buffer,
     size_t dwidth, unsigned int count);
 void (*outs)(void *hostdata, unsigned long addr, const void *buffer,
       size_t dwidth, unsigned int count);
};
# 116 "./include/linux/logic_pio.h"
struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *fwnode);
unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *fwnode,
   resource_size_t hw_addr, resource_size_t size);
int logic_pio_register_range(struct logic_pio_hwaddr *newrange);
void logic_pio_unregister_range(struct logic_pio_hwaddr *range);
resource_size_t logic_pio_to_hwaddr(unsigned long pio);
unsigned long logic_pio_trans_cpuaddr(resource_size_t hw_addr);
# 527 "./include/asm-generic/io.h" 2
# 658 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 insb(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 insw(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 insl(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsb(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsw(addr, buffer, count);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsl(addr, buffer, count);
}
# 911 "./include/asm-generic/io.h"
# 1 "./include/linux/vmalloc.h" 1
# 13 "./include/linux/vmalloc.h"
# 1 "./arch/powerpc/include/asm/vmalloc.h" 1
# 10 "./arch/powerpc/include/asm/vmalloc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pud_supported(pgprot_t prot)
{

 return radix_enabled();
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_pmd_supported(pgprot_t prot)
{
 return radix_enabled();
}
# 14 "./include/linux/vmalloc.h" 2

struct vm_area_struct;
struct notifier_block;
# 52 "./include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;

 unsigned int page_order;

 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;

 struct rb_node rb_node;
 struct list_head list;







 union {
  unsigned long subtree_max_size;
  struct vm_struct *vm;
 };
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_vmap_p4d_supported(pgprot_t prot)
{
 return false;
}
# 108 "./include/linux/vmalloc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_vmap_pte_range_map_size(unsigned long addr, unsigned long end,
        u64 pfn, unsigned int max_page_shift)
{
 return (1UL << 16);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_vmap_pte_supported_shift(unsigned long size)
{
 return 16;
}





extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count, int node);
extern void vm_unmap_aliases(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







__attribute__((__alloc_size__(1)))
extern void *vmalloc(unsigned long size);
__attribute__((__alloc_size__(1)))
extern void *vzalloc(unsigned long size);
__attribute__((__alloc_size__(1)))
extern void *vmalloc_user(unsigned long size);
__attribute__((__alloc_size__(1)))
extern void *vmalloc_node(unsigned long size, int node);
__attribute__((__alloc_size__(1)))
extern void *vzalloc_node(unsigned long size, int node);
__attribute__((__alloc_size__(1)))
extern void *vmalloc_32(unsigned long size);
__attribute__((__alloc_size__(1)))
extern void *vmalloc_32_user(unsigned long size);
__attribute__((__alloc_size__(1)))
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask);
__attribute__((__alloc_size__(1)))
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller);
__attribute__((__alloc_size__(1)))
void *__vmalloc_node(unsigned long size, unsigned long align, gfp_t gfp_mask,
  int node, const void *caller);
__attribute__((__alloc_size__(1)))
void *vmalloc_no_huge(unsigned long size);

extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
void *vmap_pfn(unsigned long *pfns, unsigned int count, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long pgoff, unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
# 195 "./include/linux/vmalloc.h"
void arch_sync_kernel_mappings(unsigned long start, unsigned long end);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - (1UL << 16);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
void free_vm_area(struct vm_struct *area);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_area_hugepages(const void *addr)
{
# 232 "./include/linux/vmalloc.h"
 return find_vm_area(addr)->page_order > 0;



}


int vmap_range(unsigned long addr, unsigned long end,
   phys_addr_t phys_addr, pgprot_t prot,
   unsigned int max_page_shift);
void vunmap_range(unsigned long addr, unsigned long end);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_vm_flush_reset_perms(void *addr)
{
 struct vm_struct *vm = find_vm_area(addr);

 if (vm)
  vm->flags |= 0x00000100;
}
# 258 "./include/linux/vmalloc.h"
extern long vread(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 296 "./include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);


bool vmalloc_dump_obj(void *object);
# 912 "./include/asm-generic/io.h" 2
# 1045 "./include/asm-generic/io.h"
extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *p);
# 1077 "./include/asm-generic/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr)
{
}
# 1149 "./include/asm-generic/io.h"
extern int devmem_is_allowed(unsigned long pfn);
# 1004 "./arch/powerpc/include/asm/io.h" 2
# 14 "./include/linux/io.h" 2


struct device;
struct resource;

          void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 38 "./include/linux/io.h"
void * devm_ioport_map(struct device *dev, unsigned long port,
          unsigned int nr);
void devm_ioport_unmap(struct device *dev, void *addr);
# 56 "./include/linux/io.h"
void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_uc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_np(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);
# 86 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pci_remap_cfgspace(phys_addr_t offset,
            size_t size)
{
 return ioremap_np(offset, size) ?: ioremap(offset, size);
}
# 115 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) arch_phys_wc_add(unsigned long base,
      unsigned long size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_phys_wc_del(int handle)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_phys_wc_index(int handle)
{
 return -1;
}




enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
 MEMREMAP_ENC = 1 << 3,
 MEMREMAP_DEC = 1 << 4,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 157 "./include/linux/io.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_io_reserve_memtype_wc(resource_size_t base,
          resource_size_t size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_io_free_memtype_wc(resource_size_t base,
        resource_size_t size)
{
}
# 21 "./include/linux/irq.h" 2
# 1 "./include/linux/slab.h" 1
# 138 "./include/linux/slab.h"
struct mem_cgroup;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init(void);
bool slab_is_available(void);

extern bool usercopy_fallback;

struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
   unsigned int align, slab_flags_t flags,
   void (*ctor)(void *));
struct kmem_cache *kmem_cache_create_usercopy(const char *name,
   unsigned int size, unsigned int align,
   slab_flags_t flags,
   unsigned int useroffset, unsigned int usersize,
   void (*ctor)(void *));
void kmem_cache_destroy(struct kmem_cache *s);
int kmem_cache_shrink(struct kmem_cache *s);
# 184 "./include/linux/slab.h"
__attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)))
void *krealloc(const void *objp, size_t new_size, gfp_t flags);
void kfree(const void *objp);
void kfree_sensitive(const void *objp);
size_t __ksize(const void *objp);
size_t ksize(const void *objp);

bool kmem_valid_obj(void *object);
void kmem_dump_obj(void *object);



void __check_heap_object(const void *ptr, unsigned long n, struct page *page,
   bool to_user);
# 314 "./include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,

 KMALLOC_DMA = KMALLOC_NORMAL,




 KMALLOC_CGROUP,

 KMALLOC_RECLAIM,



 NR_KMALLOC_TYPES
};


extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][(16 + 1) + 1];
# 343 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{




 if (__builtin_expect(!!((flags & ((( gfp_t)0x10u) | (0 ? (( gfp_t)0x01u) : 0) | (1 ? (( gfp_t)0x400000u) : 0))) == 0), 1))
  return KMALLOC_NORMAL;
# 359 "./include/linux/slab.h"
 if (0 && (flags & (( gfp_t)0x01u)))
  return KMALLOC_DMA;
 if (!1 || (flags & (( gfp_t)0x10u)))
  return KMALLOC_RECLAIM;
 else
  return KMALLOC_CGROUP;
}
# 380 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int __kmalloc_index(size_t size,
          bool size_is_constant)
{
 if (!size)
  return 0;

 if (size <= (1 << 3))
  return 3;

 if ((1 << 3) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((1 << 3) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;

 if ((0 || 140000 >= 110000)
     && !0 && size_is_constant)
  do { extern void __compiletime_assert_219(void) ; if (!(!(1))) __compiletime_assert_219(); } while (0);
 else
  do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/slab.h"), "i" (421), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0);


 return -1;
}



__attribute__((__alloc_size__(1)))
void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *s, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *s, void *objp);
# 441 "./include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *orig_s, size_t size, void **p);
int kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size, void **p);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}


__attribute__((__alloc_size__(1)))
void *__kmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node)
       __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
# 471 "./include/linux/slab.h"
extern void *kmem_cache_alloc_trace(struct kmem_cache *s, gfp_t flags, size_t size)
        __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));


extern void *kmem_cache_alloc_node_trace(struct kmem_cache *s, gfp_t gfpflags,
      int node, size_t size) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
# 505 "./include/linux/slab.h"
extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order)
      __attribute__((__assume_aligned__((1UL << 16)))) __attribute__((__malloc__));


extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)
     __attribute__((__assume_aligned__((1UL << 16)))) __attribute__((__malloc__));
# 519 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 579 "./include/linux/slab.h"
__attribute__((__alloc_size__(1)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << (16 + 1)))
   return kmalloc_large(size, flags);

  index = __kmalloc_index(size, true);

  if (!index)
   return ((void *)16);

  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}

__attribute__((__alloc_size__(1)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (16 + 1))) {
  unsigned int i = __kmalloc_index(size, true);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}







__attribute__((__alloc_size__(1, 2)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(bytes, flags);
 return __kmalloc(bytes, flags);
}
# 646 "./include/linux/slab.h"
__attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2, 3)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *krealloc_array(void *p, size_t new_n, size_t new_size,
       gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(new_n) __a = (new_n); typeof(new_size) __b = (new_size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return krealloc(p, bytes, flags);
}







__attribute__((__alloc_size__(1, 2)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
}
# 678 "./include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
           int node)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc_node(bytes, flags, node);
 return __kmalloc_node(bytes, flags, node);
}

__attribute__((__alloc_size__(1, 2)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
{
 return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
}



extern void *__kmalloc_node_track_caller(size_t size, gfp_t flags, int node,
      unsigned long caller);
# 718 "./include/linux/slab.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
}






__attribute__((__alloc_size__(1)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x100u));
}







__attribute__((__alloc_size__(1)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
}

__attribute__((__alloc_size__(1)))
extern void *kvmalloc_node(size_t size, gfp_t flags, int node);
__attribute__((__alloc_size__(1)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmalloc(size_t size, gfp_t flags)
{
 return kvmalloc_node(size, flags, (-1));
}
__attribute__((__alloc_size__(1)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvzalloc_node(size_t size, gfp_t flags, int node)
{
 return kvmalloc_node(size, flags | (( gfp_t)0x100u), node);
}
__attribute__((__alloc_size__(1)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvzalloc(size_t size, gfp_t flags)
{
 return kvmalloc(size, flags | (( gfp_t)0x100u));
}

__attribute__((__alloc_size__(1, 2)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(__must_check_overflow(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))), 0))
  return ((void *)0);

 return kvmalloc(bytes, flags);
}

__attribute__((__alloc_size__(1, 2)))
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvcalloc(size_t n, size_t size, gfp_t flags)
{
 return kvmalloc_array(n, size, flags | (( gfp_t)0x100u));
}

__attribute__((__alloc_size__(3)))
extern void *kvrealloc(const void *p, size_t oldsize, size_t newsize,
  gfp_t flags);
extern void kvfree(const void *addr);
extern void kvfree_sensitive(const void *addr, size_t len);

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) kmem_cache_init_late(void);
# 22 "./include/linux/irq.h" 2

# 1 "./arch/powerpc/include/asm/irq.h" 1
# 17 "./arch/powerpc/include/asm/irq.h"
extern atomic_t ppc_n_lost_interrupts;
# 28 "./arch/powerpc/include/asm/irq.h"
extern irq_hw_number_t virq_to_hw(unsigned int virq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_canonicalize(int irq)
{
 return irq;
}

extern int distribute_irqs;

struct pt_regs;
# 52 "./arch/powerpc/include/asm/irq.h"
extern void *hardirq_ctx[2048];
extern void *softirq_ctx[2048];

void __do_IRQ(struct pt_regs *regs);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) init_IRQ(void);
extern void __do_irq(struct pt_regs *regs);

int irq_choose_cpu(const struct cpumask *mask);
# 24 "./include/linux/irq.h" 2

# 1 "./arch/powerpc/include/generated/asm/irq_regs.h" 1
# 1 "./include/asm-generic/irq_regs.h" 1
# 17 "./include/asm-generic/irq_regs.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs *) __irq_regs;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pt_regs *get_irq_regs(void)
{
 return ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs;

 old_regs = ({ __this_cpu_preempt_check("read"); ({ typeof(__irq_regs) pscr_ret__; do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); });
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(__irq_regs)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }) = new_regs; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }) = new_regs; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }) = new_regs; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(__irq_regs)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(__irq_regs))) *)(&(__irq_regs))); (typeof((typeof(*(&(__irq_regs))) *)(&(__irq_regs)))) (__ptr + ((local_paca->data_offset))); }); }) = new_regs; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 return old_regs;
}
# 2 "./arch/powerpc/include/generated/asm/irq_regs.h" 2
# 26 "./include/linux/irq.h" 2

struct seq_file;
struct module;
struct msi_msg;
struct irq_affinity_desc;
enum irqchip_irq_state;
# 77 "./include/linux/irq.h"
enum {
 IRQ_TYPE_NONE = 0x00000000,
 IRQ_TYPE_EDGE_RISING = 0x00000001,
 IRQ_TYPE_EDGE_FALLING = 0x00000002,
 IRQ_TYPE_EDGE_BOTH = (IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING),
 IRQ_TYPE_LEVEL_HIGH = 0x00000004,
 IRQ_TYPE_LEVEL_LOW = 0x00000008,
 IRQ_TYPE_LEVEL_MASK = (IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH),
 IRQ_TYPE_SENSE_MASK = 0x0000000f,
 IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK,

 IRQ_TYPE_PROBE = 0x00000010,

 IRQ_LEVEL = (1 << 8),
 IRQ_PER_CPU = (1 << 9),
 IRQ_NOPROBE = (1 << 10),
 IRQ_NOREQUEST = (1 << 11),
 IRQ_NOAUTOEN = (1 << 12),
 IRQ_NO_BALANCING = (1 << 13),
 IRQ_MOVE_PCNTXT = (1 << 14),
 IRQ_NESTED_THREAD = (1 << 15),
 IRQ_NOTHREAD = (1 << 16),
 IRQ_PER_CPU_DEVID = (1 << 17),
 IRQ_IS_POLLED = (1 << 18),
 IRQ_DISABLE_UNLAZY = (1 << 19),
 IRQ_HIDDEN = (1 << 20),
 IRQ_NO_DEBUG = (1 << 21),
};
# 123 "./include/linux/irq.h"
enum {
 IRQ_SET_MASK_OK = 0,
 IRQ_SET_MASK_OK_NOCOPY,
 IRQ_SET_MASK_OK_DONE,
};

struct msi_desc;
struct irq_domain;
# 147 "./include/linux/irq.h"
struct irq_common_data {
 unsigned int state_use_accessors;

 unsigned int node;

 void *handler_data;
 struct msi_desc *msi_desc;
 cpumask_var_t affinity;






};
# 177 "./include/linux/irq.h"
struct irq_data {
 u32 mask;
 unsigned int irq;
 unsigned long hwirq;
 struct irq_common_data *common;
 struct irq_chip *chip;
 struct irq_domain *domain;

 struct irq_data *parent_data;

 void *chip_data;
};
# 225 "./include/linux/irq.h"
enum {
 IRQD_TRIGGER_MASK = 0xf,
 IRQD_SETAFFINITY_PENDING = (1 << 8),
 IRQD_ACTIVATED = (1 << 9),
 IRQD_NO_BALANCING = (1 << 10),
 IRQD_PER_CPU = (1 << 11),
 IRQD_AFFINITY_SET = (1 << 12),
 IRQD_LEVEL = (1 << 13),
 IRQD_WAKEUP_STATE = (1 << 14),
 IRQD_MOVE_PCNTXT = (1 << 15),
 IRQD_IRQ_DISABLED = (1 << 16),
 IRQD_IRQ_MASKED = (1 << 17),
 IRQD_IRQ_INPROGRESS = (1 << 18),
 IRQD_WAKEUP_ARMED = (1 << 19),
 IRQD_FORWARDED_TO_VCPU = (1 << 20),
 IRQD_AFFINITY_MANAGED = (1 << 21),
 IRQD_IRQ_STARTED = (1 << 22),
 IRQD_MANAGED_SHUTDOWN = (1 << 23),
 IRQD_SINGLE_TARGET = (1 << 24),
 IRQD_DEFAULT_TRIGGER_SET = (1 << 25),
 IRQD_CAN_RESERVE = (1 << 26),
 IRQD_MSI_NOMASK_QUIRK = (1 << 27),
 IRQD_HANDLE_ENFORCE_IRQCTX = (1 << 28),
 IRQD_AFFINITY_ON_ACTIVATE = (1 << 29),
 IRQD_IRQ_ENABLED_ON_SUSPEND = (1 << 30),
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_setaffinity_pending(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SETAFFINITY_PENDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_per_cpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_PER_CPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_balance(struct irq_data *d)
{
 return !((((d)->common)->state_use_accessors) & (IRQD_PER_CPU | IRQD_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_mark_affinity_was_set(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_trigger_type_was_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irqd_get_trigger_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_TRIGGER_MASK;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_trigger_type(struct irq_data *d, u32 type)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= type & IRQD_TRIGGER_MASK;
 (((d)->common)->state_use_accessors) |= IRQD_DEFAULT_TRIGGER_SET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_level_type(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_LEVEL;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_single_target(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_single_target(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_SINGLE_TARGET;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_handle_enforce_irqctx(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_handle_enforce_irqctx(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_HANDLE_ENFORCE_IRQCTX;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_enabled_on_suspend(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_ENABLED_ON_SUSPEND;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_wakeup_set(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_STATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_move_in_process_context(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MOVE_PCNTXT;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_disabled(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_DISABLED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_masked(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_MASKED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_irq_inprogress(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_INPROGRESS;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_wakeup_armed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_WAKEUP_ARMED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_forwarded_to_vcpu(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_forwarded_to_vcpu(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_FORWARDED_TO_VCPU;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_is_managed(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_MANAGED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_activated(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_activated(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_ACTIVATED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_started(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_IRQ_STARTED;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_is_managed_and_shutdown(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MANAGED_SHUTDOWN;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_can_reserve(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_can_reserve(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_CAN_RESERVE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_clr_msi_nomask_quirk(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) &= ~IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_msi_nomask_quirk(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_MSI_NOMASK_QUIRK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irqd_set_affinity_on_activate(struct irq_data *d)
{
 (((d)->common)->state_use_accessors) |= IRQD_AFFINITY_ON_ACTIVATE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irqd_affinity_on_activate(struct irq_data *d)
{
 return (((d)->common)->state_use_accessors) & IRQD_AFFINITY_ON_ACTIVATE;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) irq_hw_number_t irqd_to_hwirq(struct irq_data *d)
{
 return d->hwirq;
}
# 505 "./include/linux/irq.h"
struct irq_chip {
 struct device *parent_device;
 const char *name;
 unsigned int (*irq_startup)(struct irq_data *data);
 void (*irq_shutdown)(struct irq_data *data);
 void (*irq_enable)(struct irq_data *data);
 void (*irq_disable)(struct irq_data *data);

 void (*irq_ack)(struct irq_data *data);
 void (*irq_mask)(struct irq_data *data);
 void (*irq_mask_ack)(struct irq_data *data);
 void (*irq_unmask)(struct irq_data *data);
 void (*irq_eoi)(struct irq_data *data);

 int (*irq_set_affinity)(struct irq_data *data, const struct cpumask *dest, bool force);
 int (*irq_retrigger)(struct irq_data *data);
 int (*irq_set_type)(struct irq_data *data, unsigned int flow_type);
 int (*irq_set_wake)(struct irq_data *data, unsigned int on);

 void (*irq_bus_lock)(struct irq_data *data);
 void (*irq_bus_sync_unlock)(struct irq_data *data);

 void (*irq_cpu_online)(struct irq_data *data);
 void (*irq_cpu_offline)(struct irq_data *data);

 void (*irq_suspend)(struct irq_data *data);
 void (*irq_resume)(struct irq_data *data);
 void (*irq_pm_shutdown)(struct irq_data *data);

 void (*irq_calc_mask)(struct irq_data *data);

 void (*irq_print_chip)(struct irq_data *data, struct seq_file *p);
 int (*irq_request_resources)(struct irq_data *data);
 void (*irq_release_resources)(struct irq_data *data);

 void (*irq_compose_msi_msg)(struct irq_data *data, struct msi_msg *msg);
 void (*irq_write_msi_msg)(struct irq_data *data, struct msi_msg *msg);

 int (*irq_get_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool *state);
 int (*irq_set_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool state);

 int (*irq_set_vcpu_affinity)(struct irq_data *data, void *vcpu_info);

 void (*ipi_send_single)(struct irq_data *data, unsigned int cpu);
 void (*ipi_send_mask)(struct irq_data *data, const struct cpumask *dest);

 int (*irq_nmi_setup)(struct irq_data *data);
 void (*irq_nmi_teardown)(struct irq_data *data);

 unsigned long flags;
};
# 574 "./include/linux/irq.h"
enum {
 IRQCHIP_SET_TYPE_MASKED = (1 << 0),
 IRQCHIP_EOI_IF_HANDLED = (1 << 1),
 IRQCHIP_MASK_ON_SUSPEND = (1 << 2),
 IRQCHIP_ONOFFLINE_ENABLED = (1 << 3),
 IRQCHIP_SKIP_SET_WAKE = (1 << 4),
 IRQCHIP_ONESHOT_SAFE = (1 << 5),
 IRQCHIP_EOI_THREADED = (1 << 6),
 IRQCHIP_SUPPORTS_LEVEL_MSI = (1 << 7),
 IRQCHIP_SUPPORTS_NMI = (1 << 8),
 IRQCHIP_ENABLE_WAKEUP_ON_SUSPEND = (1 << 9),
 IRQCHIP_AFFINITY_PRE_STARTUP = (1 << 10),
};

# 1 "./include/linux/irqdesc.h" 1
# 13 "./include/linux/irqdesc.h"
struct irq_affinity_notify;
struct proc_dir_entry;
struct module;
struct irq_desc;
struct irq_domain;
struct pt_regs;
# 55 "./include/linux/irqdesc.h"
struct irq_desc {
 struct irq_common_data irq_common_data;
 struct irq_data irq_data;
 unsigned int *kstat_irqs;
 irq_flow_handler_t handle_irq;
 struct irqaction *action;
 unsigned int status_use_accessors;
 unsigned int core_internal_state__do_not_mess_with_it;
 unsigned int depth;
 unsigned int wake_depth;
 unsigned int tot_count;
 unsigned int irq_count;
 unsigned long last_unhandled;
 unsigned int irqs_unhandled;
 atomic_t threads_handled;
 int threads_handled_last;
 raw_spinlock_t lock;
 struct cpumask *percpu_enabled;
 const struct cpumask *percpu_affinity;

 const struct cpumask *affinity_hint;
 struct irq_affinity_notify *affinity_notify;




 unsigned long threads_oneshot;
 atomic_t threads_active;
 wait_queue_head_t wait_for_threads;

 unsigned int nr_actions;
 unsigned int no_suspend_depth;
 unsigned int cond_suspend_depth;
 unsigned int force_resume_depth;


 struct proc_dir_entry *dir;






 struct callback_head rcu;
 struct kobject kobj;

 struct mutex request_mutex;
 int parent_irq;
 struct module *owner;
 const char *name;
} __attribute__((__aligned__(1 << (7))));


extern void irq_lock_sparse(void);
extern void irq_unlock_sparse(void);






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_desc_kstat_cpu(struct irq_desc *desc,
           unsigned int cpu)
{
 return desc->kstat_irqs ? *({ do { const void *__vpp_verify = (typeof((desc->kstat_irqs) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((desc->kstat_irqs))) *)((desc->kstat_irqs))); (typeof((typeof(*((desc->kstat_irqs))) *)((desc->kstat_irqs)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_desc *irq_data_to_desc(struct irq_data *data)
{
 return ({ void *__mptr = (void *)(data->common); do { extern void __compiletime_assert_220(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(data->common)), typeof(((struct irq_desc *)0)->irq_common_data)) && !__builtin_types_compatible_p(typeof(*(data->common)), typeof(void))))) __compiletime_assert_220(); } while (0); ((struct irq_desc *)(__mptr - __builtin_offsetof(struct irq_desc, irq_common_data))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_desc_get_irq(struct irq_desc *desc)
{
 return desc->irq_data.irq;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_data *irq_desc_get_irq_data(struct irq_desc *desc)
{
 return &desc->irq_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_desc_get_chip(struct irq_desc *desc)
{
 return desc->irq_data.chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_desc_get_chip_data(struct irq_desc *desc)
{
 return desc->irq_data.chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_desc_get_handler_data(struct irq_desc *desc)
{
 return desc->irq_common_data.handler_data;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void generic_handle_irq_desc(struct irq_desc *desc)
{
 desc->handle_irq(desc);
}

int handle_irq_desc(struct irq_desc *desc);
int generic_handle_irq(unsigned int irq);







int generic_handle_domain_irq(struct irq_domain *domain, unsigned int hwirq);
# 182 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_desc_has_action(struct irq_desc *desc)
{
 return desc && desc->action != ((void *)0);
}
# 197 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_handler_locked(struct irq_data *data,
       irq_flow_handler_t handler)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
}
# 217 "./include/linux/irqdesc.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_chip_handler_name_locked(struct irq_data *data, struct irq_chip *chip,
     irq_flow_handler_t handler, const char *name)
{
 struct irq_desc *desc = irq_data_to_desc(data);

 desc->handle_irq = handler;
 desc->name = name;
 data->chip = chip;
}

bool irq_check_status_bit(unsigned int irq, unsigned int bitmask);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_balancing_disabled(unsigned int irq)
{
 return irq_check_status_bit(irq, (IRQ_PER_CPU | IRQ_NO_BALANCING));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_is_percpu(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_is_percpu_devid(unsigned int irq)
{
 return irq_check_status_bit(irq, IRQ_PER_CPU_DEVID);
}

void __irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
        struct lock_class_key *request_class)
{
 if (0)
  __irq_set_lockdep_class(irq, lock_class, request_class);
}
# 589 "./include/linux/irq.h" 2
# 605 "./include/linux/irq.h"
struct irqaction;
extern int setup_percpu_irq(unsigned int irq, struct irqaction *new);
extern void remove_percpu_irq(unsigned int irq, struct irqaction *act);

extern void irq_cpu_online(void);
extern void irq_cpu_offline(void);
extern int irq_set_affinity_locked(struct irq_data *data,
       const struct cpumask *cpumask, bool force);
extern int irq_set_vcpu_affinity(unsigned int irq, void *vcpu_info);


extern void irq_migrate_all_off_this_cpu(void);
extern int irq_affinity_online_cpu(unsigned int cpu);
# 632 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_move_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_move_masked_irq(struct irq_data *data) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_force_complete_move(struct irq_desc *desc) { }


extern int no_irq_affinity;


int irq_set_parent(int irq, int parent_irq);
# 652 "./include/linux/irq.h"
extern void handle_level_irq(struct irq_desc *desc);
extern void handle_fasteoi_irq(struct irq_desc *desc);
extern void handle_edge_irq(struct irq_desc *desc);
extern void handle_edge_eoi_irq(struct irq_desc *desc);
extern void handle_simple_irq(struct irq_desc *desc);
extern void handle_untracked_irq(struct irq_desc *desc);
extern void handle_percpu_irq(struct irq_desc *desc);
extern void handle_percpu_devid_irq(struct irq_desc *desc);
extern void handle_bad_irq(struct irq_desc *desc);
extern void handle_nested_irq(unsigned int irq);

extern void handle_fasteoi_nmi(struct irq_desc *desc);
extern void handle_percpu_devid_fasteoi_nmi(struct irq_desc *desc);

extern int irq_chip_compose_msi_msg(struct irq_data *data, struct msi_msg *msg);
extern int irq_chip_pm_get(struct irq_data *data);
extern int irq_chip_pm_put(struct irq_data *data);

extern void handle_fasteoi_ack_irq(struct irq_desc *desc);
extern void handle_fasteoi_mask_irq(struct irq_desc *desc);
extern int irq_chip_set_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool val);
extern int irq_chip_get_parent_state(struct irq_data *data,
         enum irqchip_irq_state which,
         bool *state);
extern void irq_chip_enable_parent(struct irq_data *data);
extern void irq_chip_disable_parent(struct irq_data *data);
extern void irq_chip_ack_parent(struct irq_data *data);
extern int irq_chip_retrigger_hierarchy(struct irq_data *data);
extern void irq_chip_mask_parent(struct irq_data *data);
extern void irq_chip_mask_ack_parent(struct irq_data *data);
extern void irq_chip_unmask_parent(struct irq_data *data);
extern void irq_chip_eoi_parent(struct irq_data *data);
extern int irq_chip_set_affinity_parent(struct irq_data *data,
     const struct cpumask *dest,
     bool force);
extern int irq_chip_set_wake_parent(struct irq_data *data, unsigned int on);
extern int irq_chip_set_vcpu_affinity_parent(struct irq_data *data,
          void *vcpu_info);
extern int irq_chip_set_type_parent(struct irq_data *data, unsigned int type);
extern int irq_chip_request_resources_parent(struct irq_data *data);
extern void irq_chip_release_resources_parent(struct irq_data *data);



extern void note_interrupt(struct irq_desc *desc, irqreturn_t action_ret);



extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle)
{
 irq_set_chip_and_handler_name(irq, chip, handle, ((void *)0));
}

extern int irq_set_percpu_devid(unsigned int irq);
extern int irq_set_percpu_devid_partition(unsigned int irq,
       const struct cpumask *affinity);
extern int irq_get_percpu_devid_partition(unsigned int irq,
       struct cpumask *affinity);

extern void
__irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    const char *name);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 0, ((void *)0));
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
irq_set_chained_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 1, ((void *)0));
}






void
irq_set_chained_handler_and_data(unsigned int irq, irq_flow_handler_t handle,
     void *data);

void irq_modify_status(unsigned int irq, unsigned long clr, unsigned long set);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_status_flags(unsigned int irq, unsigned long set)
{
 irq_modify_status(irq, 0, set);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
 irq_modify_status(irq, clr, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_noprobe(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOPROBE);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_probe(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOPROBE, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_nothread(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOTHREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_thread(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOTHREAD, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_nested_thread(unsigned int irq, bool nest)
{
 if (nest)
  irq_set_status_flags(irq, IRQ_NESTED_THREAD);
 else
  irq_clear_status_flags(irq, IRQ_NESTED_THREAD);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_set_percpu_devid_flags(unsigned int irq)
{
 irq_set_status_flags(irq,
        IRQ_NOAUTOEN | IRQ_PER_CPU | IRQ_NOTHREAD |
        IRQ_NOPROBE | IRQ_PER_CPU_DEVID);
}


extern int irq_set_chip(unsigned int irq, struct irq_chip *chip);
extern int irq_set_handler_data(unsigned int irq, void *data);
extern int irq_set_chip_data(unsigned int irq, void *data);
extern int irq_set_irq_type(unsigned int irq, unsigned int type);
extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
    struct msi_desc *entry);
extern struct irq_data *irq_get_irq_data(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_get_chip(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip *irq_data_get_irq_chip(struct irq_data *d)
{
 return d->chip;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_get_chip_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_data_get_irq_chip_data(struct irq_data *d)
{
 return d->chip_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_get_handler_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->handler_data : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *irq_data_get_irq_handler_data(struct irq_data *d)
{
 return d->common->handler_data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct msi_desc *irq_get_msi_desc(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->common->msi_desc : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct msi_desc *irq_data_get_msi_desc(struct irq_data *d)
{
 return d->common->msi_desc;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irq_get_trigger_type(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? irqd_get_trigger_type(d) : 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_common_data_get_node(struct irq_common_data *d)
{

 return d->node;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_data_get_node(struct irq_data *d)
{
 return irq_common_data_get_node(d->common);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_get_affinity_mask(int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? d->common->affinity : ((void *)0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_data_get_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}
# 902 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_data_update_effective_affinity(struct irq_data *d,
            const struct cpumask *m)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct cpumask *irq_data_get_effective_affinity_mask(struct irq_data *d)
{
 return d->common->affinity;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cpumask *irq_get_effective_affinity_mask(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);

 return d ? irq_data_get_effective_affinity_mask(d) : ((void *)0);
}

unsigned int arch_dynirq_lower_bound(unsigned int from);

int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
        struct module *owner,
        const struct irq_affinity_desc *affinity);

int __devm_irq_alloc_descs(struct device *dev, int irq, unsigned int from,
      unsigned int cnt, int node, struct module *owner,
      const struct irq_affinity_desc *affinity);
# 961 "./include/linux/irq.h"
void irq_free_descs(unsigned int irq, unsigned int cnt);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_free_desc(unsigned int irq)
{
 irq_free_descs(irq, 1);
}
# 981 "./include/linux/irq.h"
struct irq_chip_regs {
 unsigned long enable;
 unsigned long disable;
 unsigned long mask;
 unsigned long ack;
 unsigned long eoi;
 unsigned long type;
 unsigned long polarity;
};
# 1004 "./include/linux/irq.h"
struct irq_chip_type {
 struct irq_chip chip;
 struct irq_chip_regs regs;
 irq_flow_handler_t handler;
 u32 type;
 u32 mask_cache_priv;
 u32 *mask_cache;
};
# 1046 "./include/linux/irq.h"
struct irq_chip_generic {
 raw_spinlock_t lock;
 void *reg_base;
 u32 (*reg_readl)(void *addr);
 void (*reg_writel)(u32 val, void *addr);
 void (*suspend)(struct irq_chip_generic *gc);
 void (*resume)(struct irq_chip_generic *gc);
 unsigned int irq_base;
 unsigned int irq_cnt;
 u32 mask_cache;
 u32 type_cache;
 u32 polarity_cache;
 u32 wake_enabled;
 u32 wake_active;
 unsigned int num_ct;
 void *private;
 unsigned long installed;
 unsigned long unused;
 struct irq_domain *domain;
 struct list_head list;
 struct irq_chip_type chip_types[];
};
# 1079 "./include/linux/irq.h"
enum irq_gc_flags {
 IRQ_GC_INIT_MASK_CACHE = 1 << 0,
 IRQ_GC_INIT_NESTED_LOCK = 1 << 1,
 IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2,
 IRQ_GC_NO_MASK = 1 << 3,
 IRQ_GC_BE_IO = 1 << 4,
};
# 1096 "./include/linux/irq.h"
struct irq_domain_chip_generic {
 unsigned int irqs_per_chip;
 unsigned int num_chips;
 unsigned int irq_flags_to_clear;
 unsigned int irq_flags_to_set;
 enum irq_gc_flags gc_flags;
 struct irq_chip_generic *gc[];
};


void irq_gc_noop(struct irq_data *d);
void irq_gc_mask_disable_reg(struct irq_data *d);
void irq_gc_mask_set_bit(struct irq_data *d);
void irq_gc_mask_clr_bit(struct irq_data *d);
void irq_gc_unmask_enable_reg(struct irq_data *d);
void irq_gc_ack_set_bit(struct irq_data *d);
void irq_gc_ack_clr_bit(struct irq_data *d);
void irq_gc_mask_disable_and_ack_set(struct irq_data *d);
void irq_gc_eoi(struct irq_data *d);
int irq_gc_set_wake(struct irq_data *d, unsigned int on);


int irq_map_generic_chip(struct irq_domain *d, unsigned int virq,
    irq_hw_number_t hw_irq);
struct irq_chip_generic *
irq_alloc_generic_chip(const char *name, int nr_ct, unsigned int irq_base,
         void *reg_base, irq_flow_handler_t handler);
void irq_setup_generic_chip(struct irq_chip_generic *gc, u32 msk,
       enum irq_gc_flags flags, unsigned int clr,
       unsigned int set);
int irq_setup_alt_chip(struct irq_data *d, unsigned int type);
void irq_remove_generic_chip(struct irq_chip_generic *gc, u32 msk,
        unsigned int clr, unsigned int set);

struct irq_chip_generic *
devm_irq_alloc_generic_chip(struct device *dev, const char *name, int num_ct,
       unsigned int irq_base, void *reg_base,
       irq_flow_handler_t handler);
int devm_irq_setup_generic_chip(struct device *dev, struct irq_chip_generic *gc,
    u32 msk, enum irq_gc_flags flags,
    unsigned int clr, unsigned int set);

struct irq_chip_generic *irq_get_domain_generic_chip(struct irq_domain *d, unsigned int hw_irq);

int __irq_alloc_domain_generic_chips(struct irq_domain *d, int irqs_per_chip,
         int num_ct, const char *name,
         irq_flow_handler_t handler,
         unsigned int clr, unsigned int set,
         enum irq_gc_flags flags);
# 1154 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_free_generic_chip(struct irq_chip_generic *gc)
{
 kfree(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_destroy_generic_chip(struct irq_chip_generic *gc,
         u32 msk, unsigned int clr,
         unsigned int set)
{
 irq_remove_generic_chip(gc, msk, clr, set);
 irq_free_generic_chip(gc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
{
 return ({ void *__mptr = (void *)(d->chip); do { extern void __compiletime_assert_221(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(d->chip)), typeof(((struct irq_chip_type *)0)->chip)) && !__builtin_types_compatible_p(typeof(*(d->chip)), typeof(void))))) __compiletime_assert_221(); } while (0); ((struct irq_chip_type *)(__mptr - __builtin_offsetof(struct irq_chip_type, chip))); });
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_gc_lock(struct irq_chip_generic *gc)
{
 _raw_spin_lock(&gc->lock);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_gc_unlock(struct irq_chip_generic *gc)
{
 __raw_spin_unlock(&gc->lock);
}
# 1199 "./include/linux/irq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void irq_reg_writel(struct irq_chip_generic *gc,
      u32 val, int reg_offset)
{
 if (gc->reg_writel)
  gc->reg_writel(val, gc->reg_base + reg_offset);
 else
  writel(val, gc->reg_base + reg_offset);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 irq_reg_readl(struct irq_chip_generic *gc,
    int reg_offset)
{
 if (gc->reg_readl)
  return gc->reg_readl(gc->reg_base + reg_offset);
 else
  return readl(gc->reg_base + reg_offset);
}

struct irq_matrix;
struct irq_matrix *irq_alloc_matrix(unsigned int matrix_bits,
        unsigned int alloc_start,
        unsigned int alloc_end);
void irq_matrix_online(struct irq_matrix *m);
void irq_matrix_offline(struct irq_matrix *m);
void irq_matrix_assign_system(struct irq_matrix *m, unsigned int bit, bool replace);
int irq_matrix_reserve_managed(struct irq_matrix *m, const struct cpumask *msk);
void irq_matrix_remove_managed(struct irq_matrix *m, const struct cpumask *msk);
int irq_matrix_alloc_managed(struct irq_matrix *m, const struct cpumask *msk,
    unsigned int *mapped_cpu);
void irq_matrix_reserve(struct irq_matrix *m);
void irq_matrix_remove_reserved(struct irq_matrix *m);
int irq_matrix_alloc(struct irq_matrix *m, const struct cpumask *msk,
       bool reserved, unsigned int *mapped_cpu);
void irq_matrix_free(struct irq_matrix *m, unsigned int cpu,
       unsigned int bit, bool managed);
void irq_matrix_assign(struct irq_matrix *m, unsigned int bit);
unsigned int irq_matrix_available(struct irq_matrix *m, bool cpudown);
unsigned int irq_matrix_allocated(struct irq_matrix *m);
unsigned int irq_matrix_reserved(struct irq_matrix *m);
void irq_matrix_debug_show(struct seq_file *sf, struct irq_matrix *m, int ind);



irq_hw_number_t ipi_get_hwirq(unsigned int irq, unsigned int cpu);
int __ipi_send_single(struct irq_desc *desc, unsigned int cpu);
int __ipi_send_mask(struct irq_desc *desc, const struct cpumask *dest);
int ipi_send_single(unsigned int virq, unsigned int cpu);
int ipi_send_mask(unsigned int virq, const struct cpumask *dest);
# 7 "./arch/powerpc/include/asm/hardirq.h" 2

typedef struct {
 unsigned int __softirq_pending;
 unsigned int timer_irqs_event;
 unsigned int broadcast_irqs_event;
 unsigned int timer_irqs_others;
 unsigned int pmu_irqs;
 unsigned int mce_exceptions;
 unsigned int spurious_irqs;
 unsigned int sreset_irqs;

 unsigned int soft_nmi_irqs;


 unsigned int doorbell_irqs;

} __attribute__((__aligned__((1 << 7)))) irq_cpustat_t;

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << 7))));




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ack_bad_irq(unsigned int irq)
{
 ({ do {} while (0); _printk("\001" "2" "unexpected IRQ trap at vector %02x\n", irq); });
}

extern u64 arch_irq_stat_cpu(unsigned int cpu);
# 12 "./include/linux/hardirq.h" 2

extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_irq_enter_check_tick(void) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_irq_enter_check_tick(void)
{
 if (context_tracking_enabled())
  __rcu_irq_enter_check_tick();
}
# 55 "./include/linux/hardirq.h"
void irq_enter(void);



void irq_enter_rcu(void);
# 83 "./include/linux/hardirq.h"
void irq_exit(void);




void irq_exit_rcu(void);
# 99 "./include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 11 "./include/linux/highmem.h" 2

# 1 "./arch/powerpc/include/asm/cacheflush.h" 1
# 25 "./arch/powerpc/include/asm/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vmap(unsigned long start, unsigned long end)
{
 asm volatile("ptesync" ::: "memory");
}
# 38 "./arch/powerpc/include/asm/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_page(struct page *page)
{
 if (cpu_has_feature(0x00000001UL))
  return;

 if (arch_test_bit(PG_arch_1, &page->flags))
  clear_bit(PG_arch_1, &page->flags);
}

void flush_icache_range(unsigned long start, unsigned long stop);


void flush_icache_user_page(struct vm_area_struct *vma, struct page *page,
  unsigned long addr, int len);


void flush_dcache_icache_page(struct page *page);
# 64 "./arch/powerpc/include/asm/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_range(unsigned long start, unsigned long stop)
{
 unsigned long shift = l1_dcache_shift();
 unsigned long bytes = l1_dcache_bytes();
 void *addr = (void *)(start & ~(bytes - 1));
 unsigned long size = stop - (unsigned long)addr + (bytes - 1);
 unsigned long i;

 if (1)
  __asm__ __volatile__ ("sync" : : : "memory");

 for (i = 0; i < size >> shift; i++, addr += bytes)
  dcbf(addr);
 __asm__ __volatile__ ("sync" : : : "memory");

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clean_dcache_range(unsigned long start, unsigned long stop)
{
 unsigned long shift = l1_dcache_shift();
 unsigned long bytes = l1_dcache_bytes();
 void *addr = (void *)(start & ~(bytes - 1));
 unsigned long size = stop - (unsigned long)addr + (bytes - 1);
 unsigned long i;

 for (i = 0; i < size >> shift; i++, addr += bytes)
  dcbst(addr);
 __asm__ __volatile__ ("sync" : : : "memory");
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_dcache_range(unsigned long start,
        unsigned long stop)
{
 unsigned long shift = l1_dcache_shift();
 unsigned long bytes = l1_dcache_bytes();
 void *addr = (void *)(start & ~(bytes - 1));
 unsigned long size = stop - (unsigned long)addr + (bytes - 1);
 unsigned long i;

 for (i = 0; i < size >> shift; i++, addr += bytes)
  dcbi(addr);
 __asm__ __volatile__ ("sync" : : : "memory");
}
# 125 "./arch/powerpc/include/asm/cacheflush.h"
void flush_instruction_cache(void);


# 1 "./include/asm-generic/cacheflush.h" 1




struct mm_struct;
struct vm_area_struct;
struct page;
struct address_space;






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_all(void)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_mm(struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_dup_mm(struct mm_struct *mm)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_range(struct vm_area_struct *vma,
         unsigned long start,
         unsigned long end)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_page(struct vm_area_struct *vma,
        unsigned long vmaddr,
        unsigned long pfn)
{
}
# 59 "./include/asm-generic/cacheflush.h"
void flush_dcache_folio(struct folio *folio);



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_mmap_lock(struct address_space *mapping)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_dcache_mmap_unlock(struct address_space *mapping)
{
}
# 85 "./include/asm-generic/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_icache_page(struct vm_area_struct *vma,
         struct page *page)
{
}
# 106 "./include/asm-generic/cacheflush.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vunmap(unsigned long start, unsigned long end)
{
}
# 129 "./arch/powerpc/include/asm/cacheflush.h" 2
# 13 "./include/linux/highmem.h" 2

# 1 "././include/linux/highmem-internal.h" 1
# 20 "././include/linux/highmem-internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_local_fork(struct task_struct *tsk) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_assert_nomap(void) { }
# 154 "././include/linux/highmem-internal.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kmap_to_page(void *addr)
{
 return (vmemmap + ((({ do { } while (0); (unsigned long)(addr) & 0x0fffffffffffffffUL; }) >> 16)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap(struct page *page)
{
 do { do { } while (0); } while (0);
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap_high(struct page *page) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_flush_unused(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap(struct page *page)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page(struct page *page)
{
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_folio(struct folio *folio, size_t offset)
{
 return lowmem_page_address(&folio->page) + offset;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page_prot(struct page *page, pgprot_t prot)
{
 return kmap_local_page(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_pfn(unsigned long pfn)
{
 return kmap_local_page((vmemmap + (pfn)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kunmap_local(void *addr)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic(struct page *page)
{
 if (0)
  migrate_disable();
 else
  __asm__ __volatile__("": : :"memory");
 pagefault_disable();
 return lowmem_page_address(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic_prot(struct page *page, pgprot_t prot)
{
 return kmap_atomic(page);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic_pfn(unsigned long pfn)
{
 return kmap_atomic((vmemmap + (pfn)));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kunmap_atomic(void *addr)
{



 pagefault_enable();
 if (0)
  migrate_enable();
 else
  __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int nr_free_highpages(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalhigh_pages(void) { return 0UL; }
# 15 "./include/linux/highmem.h" 2
# 37 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap(struct page *page);
# 46 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap(struct page *page);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kmap_to_page(void *addr);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kmap_flush_unused(void);
# 97 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_page(struct page *page);
# 134 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_local_folio(struct folio *folio, size_t offset);
# 147 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic(struct page *page);
# 161 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int nr_free_highpages(void);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalhigh_pages(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_anon_page(struct vm_area_struct *vma, struct page *page, unsigned long vmaddr)
{
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_kernel_vmap_range(void *vaddr, int size)
{
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_kernel_vmap_range(void *vaddr, int size)
{
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_user_highpage(struct page *page, unsigned long vaddr)
{
 void *addr = kmap_local_page(page);
 clear_user_page(addr, vaddr, page);
 do { do { extern void __compiletime_assert_222(void) ; if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_222(); } while (0); __kunmap_local(addr); } while (0);
}
# 202 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
alloc_zeroed_user_highpage_movable(struct vm_area_struct *vma,
       unsigned long vaddr)
{
 struct page *page = alloc_pages_vma(((((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x02u)) | (( gfp_t)0x08u) | (( gfp_t)0x1000000u)), 0, vma, vaddr, numa_node_id(), false);

 if (page)
  clear_user_highpage(page, vaddr);

 return page;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_highpage(struct page *page)
{
 void *kaddr = kmap_local_page(page);
 clear_page(kaddr);
 do { do { extern void __compiletime_assert_223(void) ; if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_223(); } while (0); __kunmap_local(kaddr); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tag_clear_highpage(struct page *page)
{
}
# 238 "./include/linux/highmem.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segments(struct page *page,
  unsigned start1, unsigned end1,
  unsigned start2, unsigned end2)
{
 void *kaddr = kmap_local_page(page);
 unsigned int i;

 do { if (__builtin_constant_p(end1 > page_size(page) || end2 > page_size(page))) { if (end1 > page_size(page) || end2 > page_size(page)) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/highmem.h"), "i" (245), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/highmem.h"), "i" (245), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(end1 > page_size(page) || end2 > page_size(page)))); } } while (0);

 if (end1 > start1)
  memset(kaddr + start1, 0, end1 - start1);

 if (end2 > start2)
  memset(kaddr + start2, 0, end2 - start2);

 do { do { extern void __compiletime_assert_224(void) ; if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_224(); } while (0); __kunmap_local(kaddr); } while (0);
 for (i = 0; i < compound_nr(page); i++)
  flush_dcache_page(page + i);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segment(struct page *page,
 unsigned start, unsigned end)
{
 zero_user_segments(page, start, end, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user(struct page *page,
 unsigned start, unsigned size)
{
 zero_user_segments(page, start, start + size, 0, 0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_user_highpage(struct page *to, struct page *from,
 unsigned long vaddr, struct vm_area_struct *vma)
{
 char *vfrom, *vto;

 vfrom = kmap_local_page(from);
 vto = kmap_local_page(to);
 copy_user_page(vto, vfrom, vaddr, to);
 do { do { extern void __compiletime_assert_225(void) ; if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_225(); } while (0); __kunmap_local(vto); } while (0);
 do { do { extern void __compiletime_assert_226(void) ; if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_226(); } while (0); __kunmap_local(vfrom); } while (0);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_highpage(struct page *to, struct page *from)
{
 char *vfrom, *vto;

 vfrom = kmap_local_page(from);
 vto = kmap_local_page(to);
 copy_page(vto, vfrom);
 do { do { extern void __compiletime_assert_227(void) ; if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_227(); } while (0); __kunmap_local(vto); } while (0);
 do { do { extern void __compiletime_assert_228(void) ; if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_228(); } while (0); __kunmap_local(vfrom); } while (0);
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 ((void)(sizeof(( long)(dst_off + len > (1UL << 16) || src_off + len > (1UL << 16)))));
 memcpy(dst + dst_off, src + src_off, len);
 do { do { extern void __compiletime_assert_229(void) ; if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_229(); } while (0); __kunmap_local(src); } while (0);
 do { do { extern void __compiletime_assert_230(void) ; if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_230(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memmove_page(struct page *dst_page, size_t dst_off,
          struct page *src_page, size_t src_off,
          size_t len)
{
 char *dst = kmap_local_page(dst_page);
 char *src = kmap_local_page(src_page);

 ((void)(sizeof(( long)(dst_off + len > (1UL << 16) || src_off + len > (1UL << 16)))));
 memmove(dst + dst_off, src + src_off, len);
 do { do { extern void __compiletime_assert_231(void) ; if (!(!(__builtin_types_compatible_p(typeof((src)), typeof(struct page *))))) __compiletime_assert_231(); } while (0); __kunmap_local(src); } while (0);
 do { do { extern void __compiletime_assert_232(void) ; if (!(!(__builtin_types_compatible_p(typeof((dst)), typeof(struct page *))))) __compiletime_assert_232(); } while (0); __kunmap_local(dst); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memset_page(struct page *page, size_t offset, int val,
          size_t len)
{
 char *addr = kmap_local_page(page);

 ((void)(sizeof(( long)(offset + len > (1UL << 16)))));
 memset(addr + offset, val, len);
 do { do { extern void __compiletime_assert_233(void) ; if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_233(); } while (0); __kunmap_local(addr); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_from_page(char *to, struct page *page,
        size_t offset, size_t len)
{
 char *from = kmap_local_page(page);

 ((void)(sizeof(( long)(offset + len > (1UL << 16)))));
 memcpy(to, from + offset, len);
 do { do { extern void __compiletime_assert_234(void) ; if (!(!(__builtin_types_compatible_p(typeof((from)), typeof(struct page *))))) __compiletime_assert_234(); } while (0); __kunmap_local(from); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_to_page(struct page *page, size_t offset,
      const char *from, size_t len)
{
 char *to = kmap_local_page(page);

 ((void)(sizeof(( long)(offset + len > (1UL << 16)))));
 memcpy(to + offset, from, len);
 flush_dcache_page(page);
 do { do { extern void __compiletime_assert_235(void) ; if (!(!(__builtin_types_compatible_p(typeof((to)), typeof(struct page *))))) __compiletime_assert_235(); } while (0); __kunmap_local(to); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memzero_page(struct page *page, size_t offset, size_t len)
{
 char *addr = kmap_local_page(page);
 memset(addr + offset, 0, len);
 flush_dcache_page(page);
 do { do { extern void __compiletime_assert_236(void) ; if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_236(); } while (0); __kunmap_local(addr); } while (0);
}
# 12 "./include/linux/pagemap.h" 2





# 1 "./include/linux/hugetlb_inline.h" 1








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_hugetlb_page(struct vm_area_struct *vma)
{
 return !!(vma->vm_flags & 0x00400000);
}
# 18 "./include/linux/pagemap.h" 2

struct pagevec;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_empty(struct address_space *mapping)
{
 return xa_empty(&mapping->i_pages);
}
# 47 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_shrinkable(struct address_space *mapping)
{
 void *head;






 if (0)
  return true;


 head = ({ typeof(*(mapping->i_pages.xa_head)) *_________p1 = (typeof(*(mapping->i_pages.xa_head)) *)({ do { extern void __compiletime_assert_237(void) ; if (!((sizeof((mapping->i_pages.xa_head)) == sizeof(char) || sizeof((mapping->i_pages.xa_head)) == sizeof(short) || sizeof((mapping->i_pages.xa_head)) == sizeof(int) || sizeof((mapping->i_pages.xa_head)) == sizeof(long)) || sizeof((mapping->i_pages.xa_head)) == sizeof(long long))) __compiletime_assert_237(); } while (0); (*(const volatile typeof( _Generic(((mapping->i_pages.xa_head)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((mapping->i_pages.xa_head)))) *)&((mapping->i_pages.xa_head))); }); ; ((typeof(*(mapping->i_pages.xa_head)) *)(_________p1)); });
 if (!head)
  return true;







 if (!xa_is_node(head) && xa_is_value(head))
  return true;

 return false;
}




enum mapping_flags {
 AS_EIO = 0,
 AS_ENOSPC = 1,
 AS_MM_ALL_LOCKS = 2,
 AS_UNEVICTABLE = 3,
 AS_EXITING = 4,

 AS_NO_WRITEBACK_TAGS = 5,
 AS_THP_SUPPORT = 6,
};
# 104 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_error(struct address_space *mapping, int error)
{
 if (__builtin_expect(!!(!error), 1))
  return;


 __filemap_set_wb_err(mapping, error);


 if (mapping->host)
  errseq_set(&mapping->host->i_sb->s_wb_err, error);


 if (error == -28)
  set_bit(AS_ENOSPC, &mapping->flags);
 else
  set_bit(AS_EIO, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_unevictable(struct address_space *mapping)
{
 set_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_clear_unevictable(struct address_space *mapping)
{
 clear_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_unevictable(struct address_space *mapping)
{
 return mapping && arch_test_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_exiting(struct address_space *mapping)
{
 set_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_exiting(struct address_space *mapping)
{
 return arch_test_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_no_writeback_tags(struct address_space *mapping)
{
 set_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_use_writeback_tags(struct address_space *mapping)
{
 return !arch_test_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_mask(struct address_space * mapping)
{
 return mapping->gfp_mask;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_constraint(struct address_space *mapping,
  gfp_t gfp_mask)
{
 return mapping_gfp_mask(mapping) & gfp_mask;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_gfp_mask(struct address_space *m, gfp_t mask)
{
 m->gfp_mask = mask;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_thp_support(struct address_space *mapping)
{
 return arch_test_bit(AS_THP_SUPPORT, &mapping->flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_nr_thps(struct address_space *mapping)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_nr_thps_inc(struct address_space *mapping)
{




 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/pagemap.h"), "i" (199), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_nr_thps_dec(struct address_space *mapping)
{




 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/pagemap.h"), "i" (209), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

}

void release_pages(struct page **pages, int nr);

struct address_space *page_mapping(struct page *);
struct address_space *folio_mapping(struct folio *);
struct address_space *swapcache_mapping(struct folio *);
# 231 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct address_space *folio_file_mapping(struct folio *folio)
{
 if (__builtin_expect(!!(folio_test_swapcache(folio)), 0))
  return swapcache_mapping(folio);

 return folio->mapping;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct address_space *page_file_mapping(struct page *page)
{
 return folio_file_mapping((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct address_space *page_mapping_file(struct page *page)
{
 struct folio *folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));

 if (__builtin_expect(!!(folio_test_swapcache(folio)), 0))
  return ((void *)0);
 return folio_mapping(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_cache_add_speculative(struct page *page, int count)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return folio_ref_try_add_rcu((struct folio *)page, count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_cache_get_speculative(struct page *page)
{
 return page_cache_add_speculative(page, 1);
}
# 275 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_attach_private(struct folio *folio, void *data)
{
 folio_get(folio);
 folio->private = data;
 folio_set_private(folio);
}
# 291 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *folio_detach_private(struct folio *folio)
{
 void *data = folio_get_private(folio);

 if (!folio_test_private(folio))
  return ((void *)0);
 folio_clear_private(folio);
 folio->private = ((void *)0);
 folio_put(folio);

 return data;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void attach_page_private(struct page *page, void *data)
{
 folio_attach_private((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), data);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *detach_page_private(struct page *page)
{
 return folio_detach_private((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}


struct folio *filemap_alloc_folio(gfp_t gfp, unsigned int order);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *__page_cache_alloc(gfp_t gfp)
{
 return &filemap_alloc_folio(gfp, 0)->page;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *page_cache_alloc(struct address_space *x)
{
 return __page_cache_alloc(mapping_gfp_mask(x));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t readahead_gfp_mask(struct address_space *x)
{
 return mapping_gfp_mask(x) | (( gfp_t)0x10000u) | (( gfp_t)0x2000u);
}

typedef int filler_t(void *, struct page *);

unsigned long page_cache_next_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
unsigned long page_cache_prev_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
# 356 "./include/linux/pagemap.h"
struct folio *__filemap_get_folio(struct address_space *mapping, unsigned long index,
  int fgp_flags, gfp_t gfp);
struct page *pagecache_get_page(struct address_space *mapping, unsigned long index,
  int fgp_flags, gfp_t gfp);
# 371 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *filemap_get_folio(struct address_space *mapping,
     unsigned long index)
{
 return __filemap_get_folio(mapping, index, 0, 0);
}
# 387 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page(struct address_space *mapping,
     unsigned long offset)
{
 return pagecache_get_page(mapping, offset, 0, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page_flags(struct address_space *mapping,
     unsigned long offset, int fgp_flags)
{
 return pagecache_get_page(mapping, offset, fgp_flags, 0);
}
# 412 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_lock_page(struct address_space *mapping,
     unsigned long index)
{
 return pagecache_get_page(mapping, index, 0x00000002, 0);
}
# 437 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_or_create_page(struct address_space *mapping,
     unsigned long index, gfp_t gfp_mask)
{
 return pagecache_get_page(mapping, index,
     0x00000002|0x00000001|0x00000004,
     gfp_mask);
}
# 458 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page_nowait(struct address_space *mapping,
    unsigned long index)
{
 return pagecache_get_page(mapping, index,
   0x00000002|0x00000004|0x00000010|0x00000020,
   mapping_gfp_mask(mapping));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thp_contains(struct page *head, unsigned long index)
{

 if (PageHuge(head))
  return head->index == index;
 return page_index(head) == (index & ~(thp_nr_pages(head) - 1UL));
}
# 488 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long folio_index(struct folio *folio)
{
        if (__builtin_expect(!!(folio_test_swapcache(folio)), 0))
                return __page_file_index(&(folio)->page);
        return folio->index;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long folio_next_index(struct folio *folio)
{
 return folio->index + folio_nr_pages(folio);
}
# 516 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *folio_file_page(struct folio *folio, unsigned long index)
{

 if (folio_test_hugetlb(folio))
  return &folio->page;
 return ((&(folio)->page) + (index & (folio_nr_pages(folio) - 1)));
}
# 534 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_contains(struct folio *folio, unsigned long index)
{

 if (folio_test_hugetlb(folio))
  return folio->index == index;
 return index - folio_index(folio) < folio_nr_pages(folio);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_subpage(struct page *head, unsigned long index)
{

 if (PageHuge(head))
  return head;

 return head + (index & (thp_nr_pages(head) - 1));
}

unsigned find_get_entries(struct address_space *mapping, unsigned long start,
  unsigned long end, struct pagevec *pvec, unsigned long *indices);
unsigned find_get_pages_range(struct address_space *mapping, unsigned long *start,
   unsigned long end, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages(struct address_space *mapping,
   unsigned long *start, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range(mapping, start, (unsigned long)-1, nr_pages,
        pages);
}
unsigned find_get_pages_contig(struct address_space *mapping, unsigned long start,
          unsigned int nr_pages, struct page **pages);
unsigned find_get_pages_range_tag(struct address_space *mapping, unsigned long *index,
   unsigned long end, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages_tag(struct address_space *mapping,
   unsigned long *index, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range_tag(mapping, index, (unsigned long)-1, tag,
     nr_pages, pages);
}

struct page *grab_cache_page_write_begin(struct address_space *mapping,
   unsigned long index, unsigned flags);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page(struct address_space *mapping,
        unsigned long index)
{
 return find_or_create_page(mapping, index, mapping_gfp_mask(mapping));
}

extern struct page * read_cache_page(struct address_space *mapping,
    unsigned long index, filler_t *filler, void *data);
extern struct page * read_cache_page_gfp(struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
extern int read_cache_pages(struct address_space *mapping,
  struct list_head *pages, filler_t *filler, void *data);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *read_mapping_page(struct address_space *mapping,
    unsigned long index, void *data)
{
 return read_cache_page(mapping, index, ((void *)0), data);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_index(struct page *page)
{
 struct page *head;

 if (__builtin_expect(!!(!PageTransTail(page)), 1))
  return page->index;

 head = ((typeof(page))_compound_head(page));




 return head->index + page - head;
}

extern unsigned long hugetlb_basepage_index(struct page *page);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_pgoff(struct page *page)
{
 if (__builtin_expect(!!(PageHuge(page)), 0))
  return hugetlb_basepage_index(page);
 return page_to_index(page);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_offset(struct page *page)
{
 return ((loff_t)page->index) << 16;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_file_offset(struct page *page)
{
 return ((loff_t)page_index(page)) << 16;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t folio_pos(struct folio *folio)
{
 return page_offset(&folio->page);
}
# 666 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t folio_file_pos(struct folio *folio)
{
 return page_file_offset(&folio->page);
}

extern unsigned long linear_hugepage_index(struct vm_area_struct *vma,
         unsigned long address);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long linear_page_index(struct vm_area_struct *vma,
     unsigned long address)
{
 unsigned long pgoff;
 if (__builtin_expect(!!(is_vm_hugetlb_page(vma)), 0))
  return linear_hugepage_index(vma, address);
 pgoff = (address - vma->vm_start) >> 16;
 pgoff += vma->vm_pgoff;
 return pgoff;
}

struct wait_page_key {
 struct folio *folio;
 int bit_nr;
 int page_match;
};

struct wait_page_queue {
 struct folio *folio;
 int bit_nr;
 wait_queue_entry_t wait;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wake_page_match(struct wait_page_queue *wait_page,
      struct wait_page_key *key)
{
 if (wait_page->folio != key->folio)
        return false;
 key->page_match = 1;

 if (wait_page->bit_nr != key->bit_nr)
  return false;

 return true;
}

void __folio_lock(struct folio *folio);
int __folio_lock_killable(struct folio *folio);
bool __folio_lock_or_retry(struct folio *folio, struct mm_struct *mm,
    unsigned int flags);
void unlock_page(struct page *page);
void folio_unlock(struct folio *folio);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool folio_trylock(struct folio *folio)
{
 return __builtin_expect(!!(!test_and_set_bit_lock(PG_locked, folio_flags(folio, 0))), 1);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int trylock_page(struct page *page)
{
 return folio_trylock((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_lock(struct folio *folio)
{
 do { do { } while (0); } while (0);
 if (!folio_trylock(folio))
  __folio_lock(folio);
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_page(struct page *page)
{
 struct folio *folio;
 do { do { } while (0); } while (0);

 folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));
 if (!folio_trylock(folio))
  __folio_lock(folio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_lock_killable(struct folio *folio)
{
 do { do { } while (0); } while (0);
 if (!folio_trylock(folio))
  return __folio_lock_killable(folio);
 return 0;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_page_killable(struct page *page)
{
 return folio_lock_killable((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
# 775 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool lock_page_or_retry(struct page *page, struct mm_struct *mm,
         unsigned int flags)
{
 struct folio *folio;
 do { do { } while (0); } while (0);

 folio = (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page)));
 return folio_trylock(folio) || __folio_lock_or_retry(folio, mm, flags);
}





void folio_wait_bit(struct folio *folio, int bit_nr);
int folio_wait_bit_killable(struct folio *folio, int bit_nr);
# 799 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_wait_locked(struct folio *folio)
{
 if (folio_test_locked(folio))
  folio_wait_bit(folio, PG_locked);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int folio_wait_locked_killable(struct folio *folio)
{
 if (!folio_test_locked(folio))
  return 0;
 return folio_wait_bit_killable(folio, PG_locked);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wait_on_page_locked(struct page *page)
{
 folio_wait_locked((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int wait_on_page_locked_killable(struct page *page)
{
 return folio_wait_locked_killable((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

int put_and_wait_on_page_locked(struct page *page, int state);
void wait_on_page_writeback(struct page *page);
void folio_wait_writeback(struct folio *folio);
int folio_wait_writeback_killable(struct folio *folio);
void end_page_writeback(struct page *page);
void folio_end_writeback(struct folio *folio);
void wait_for_stable_page(struct page *page);
void folio_wait_stable(struct folio *folio);
void __folio_mark_dirty(struct folio *folio, struct address_space *, int warn);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_page_dirty(struct page *page,
  struct address_space *mapping, int warn)
{
 __folio_mark_dirty((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), mapping, warn);
}
void folio_account_cleaned(struct folio *folio, struct address_space *mapping,
     struct bdi_writeback *wb);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_page_cleaned(struct page *page,
  struct address_space *mapping, struct bdi_writeback *wb)
{
 return folio_account_cleaned((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))), mapping, wb);
}
void __folio_cancel_dirty(struct folio *folio);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void folio_cancel_dirty(struct folio *folio)
{

 if (folio_test_dirty(folio))
  __folio_cancel_dirty(folio);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cancel_dirty_page(struct page *page)
{
 folio_cancel_dirty((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
bool folio_clear_dirty_for_io(struct folio *folio);
bool clear_page_dirty_for_io(struct page *page);
int __attribute__((__warn_unused_result__)) folio_write_one(struct folio *folio);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) write_one_page(struct page *page)
{
 return folio_write_one((_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}

int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);

void page_endio(struct page *page, bool is_write, int err);

void folio_end_private_2(struct folio *folio);
void folio_wait_private_2(struct folio *folio);
int folio_wait_private_2_killable(struct folio *folio);




void folio_add_wait_queue(struct folio *folio, wait_queue_entry_t *waiter);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fault_in_pages_writeable(char *uaddr, size_t size)
{
 char *end = uaddr + size - 1;

 if (__builtin_expect(!!(size == 0), 0))
  return 0;

 if (__builtin_expect(!!(uaddr > end), 0))
  return -14;




 do {
  if (__builtin_expect(!!(({ long __pu_err; __typeof__(*(uaddr)) *__pu_addr = (uaddr); __typeof__(*(uaddr)) __pu_val = (__typeof__(*(uaddr)))(0); __typeof__(sizeof(*(uaddr))) __pu_size = sizeof(*(uaddr)); might_fault(); do { __label__ __pu_failed; allow_write_to_user(__pu_addr, __pu_size); do { __typeof__(*(__pu_addr)) *__pus_addr = (__pu_addr); switch (__pu_size) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; default: do { extern void __compiletime_assert_238(void) ; if (!(!(1))) __compiletime_assert_238(); } while (0); } } while (0); prevent_write_to_user(__pu_addr, __pu_size); __pu_err = 0; break; __pu_failed: prevent_write_to_user(__pu_addr, __pu_size); __pu_err = -14; } while (0); __pu_err; }) != 0), 0))
   return -14;
  uaddr += (1UL << 16);
 } while (uaddr <= end);


 if (((unsigned long)uaddr & (~((1 << 16) - 1))) ==
   ((unsigned long)end & (~((1 << 16) - 1))))
  return ({ long __pu_err; __typeof__(*(end)) *__pu_addr = (end); __typeof__(*(end)) __pu_val = (__typeof__(*(end)))(0); __typeof__(sizeof(*(end))) __pu_size = sizeof(*(end)); might_fault(); do { __label__ __pu_failed; allow_write_to_user(__pu_addr, __pu_size); do { __typeof__(*(__pu_addr)) *__pus_addr = (__pu_addr); switch (__pu_size) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; default: do { extern void __compiletime_assert_239(void) ; if (!(!(1))) __compiletime_assert_239(); } while (0); } } while (0); prevent_write_to_user(__pu_addr, __pu_size); __pu_err = 0; break; __pu_failed: prevent_write_to_user(__pu_addr, __pu_size); __pu_err = -14; } while (0); __pu_err; });

 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fault_in_pages_readable(const char *uaddr, size_t size)
{
 volatile char c;
 const char *end = uaddr + size - 1;

 if (__builtin_expect(!!(size == 0), 0))
  return 0;

 if (__builtin_expect(!!(uaddr > end), 0))
  return -14;

 do {
  if (__builtin_expect(!!(({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(uaddr)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(uaddr)) *__gu_addr = (uaddr); __typeof__(sizeof(*(uaddr))) __gu_size = sizeof(*(uaddr)); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_240(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_240(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_241(void) ; if (!(!(1))) __compiletime_assert_241(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (c) = (__typeof__(*(uaddr)))__gu_val; __gu_err; }) != 0), 0))
   return -14;
  uaddr += (1UL << 16);
 } while (uaddr <= end);


 if (((unsigned long)uaddr & (~((1 << 16) - 1))) ==
   ((unsigned long)end & (~((1 << 16) - 1)))) {
  return ({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(end)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(end)) *__gu_addr = (end); __typeof__(sizeof(*(end))) __gu_size = sizeof(*(end)); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_242(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_242(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_243(void) ; if (!(!(1))) __compiletime_assert_243(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (c) = (__typeof__(*(end)))__gu_val; __gu_err; });
 }

 (void)c;
 return 0;
}

int add_to_page_cache_locked(struct page *page, struct address_space *mapping,
  unsigned long index, gfp_t gfp);
int add_to_page_cache_lru(struct page *page, struct address_space *mapping,
  unsigned long index, gfp_t gfp);
int filemap_add_folio(struct address_space *mapping, struct folio *folio,
  unsigned long index, gfp_t gfp);
extern void delete_from_page_cache(struct page *page);
extern void __delete_from_page_cache(struct page *page, void *shadow);
void replace_page_cache_page(struct page *old, struct page *new);
void delete_from_page_cache_batch(struct address_space *mapping,
      struct pagevec *pvec);
loff_t mapping_seek_hole_data(struct address_space *, loff_t start, loff_t end,
  int whence);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int add_to_page_cache(struct page *page,
  struct address_space *mapping, unsigned long offset, gfp_t gfp_mask)
{
 int error;

 __SetPageLocked(page);
 error = add_to_page_cache_locked(page, mapping, offset, gfp_mask);
 if (__builtin_expect(!!(error), 0))
  __ClearPageLocked(page);
 return error;
}


int __filemap_add_folio(struct address_space *mapping, struct folio *folio,
  unsigned long index, gfp_t gfp, void **shadowp);
# 983 "./include/linux/pagemap.h"
struct readahead_control {
 struct file *file;
 struct address_space *mapping;
 struct file_ra_state *ra;

 unsigned long _index;
 unsigned int _nr_pages;
 unsigned int _batch_count;
};
# 1003 "./include/linux/pagemap.h"
void page_cache_ra_unbounded(struct readahead_control *,
  unsigned long nr_to_read, unsigned long lookahead_count);
void page_cache_sync_ra(struct readahead_control *, unsigned long req_count);
void page_cache_async_ra(struct readahead_control *, struct page *,
  unsigned long req_count);
void readahead_expand(struct readahead_control *ractl,
        loff_t new_start, size_t new_len);
# 1024 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void page_cache_sync_readahead(struct address_space *mapping,
  struct file_ra_state *ra, struct file *file, unsigned long index,
  unsigned long req_count)
{
 struct readahead_control ractl = { .file = file, .mapping = mapping, .ra = ra, ._index = index, };
 page_cache_sync_ra(&ractl, req_count);
}
# 1047 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void page_cache_async_readahead(struct address_space *mapping,
  struct file_ra_state *ra, struct file *file,
  struct page *page, unsigned long index, unsigned long req_count)
{
 struct readahead_control ractl = { .file = file, .mapping = mapping, .ra = ra, ._index = index, };
 page_cache_async_ra(&ractl, page, req_count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *__readahead_folio(struct readahead_control *ractl)
{
 struct folio *folio;

 do { if (__builtin_constant_p(ractl->_batch_count > ractl->_nr_pages)) { if (ractl->_batch_count > ractl->_nr_pages) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/pagemap.h"), "i" (1060), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/pagemap.h"), "i" (1060), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(ractl->_batch_count > ractl->_nr_pages))); } } while (0);
 ractl->_nr_pages -= ractl->_batch_count;
 ractl->_index += ractl->_batch_count;

 if (!ractl->_nr_pages) {
  ractl->_batch_count = 0;
  return ((void *)0);
 }

 folio = xa_load(&ractl->mapping->i_pages, ractl->_index);
 ((void)(sizeof(( long)(!folio_test_locked(folio)))));
 ractl->_batch_count = folio_nr_pages(folio);

 return folio;
}
# 1085 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *readahead_page(struct readahead_control *ractl)
{
 struct folio *folio = __readahead_folio(ractl);

 return &folio->page;
}
# 1100 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct folio *readahead_folio(struct readahead_control *ractl)
{
 struct folio *folio = __readahead_folio(ractl);

 if (folio)
  folio_put(folio);
 return folio;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __readahead_batch(struct readahead_control *rac,
  struct page **array, unsigned int array_sz)
{
 unsigned int i = 0;
 struct xa_state xas = { .xa = &rac->mapping->i_pages, .xa_index = 0, .xa_shift = 0, .xa_sibs = 0, .xa_offset = 0, .xa_pad = 0, .xa_node = ((struct xa_node *)3UL), .xa_alloc = ((void *)0), .xa_update = ((void *)0) };
 struct page *page;

 do { if (__builtin_constant_p(rac->_batch_count > rac->_nr_pages)) { if (rac->_batch_count > rac->_nr_pages) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/pagemap.h"), "i" (1116), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/pagemap.h"), "i" (1116), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(rac->_batch_count > rac->_nr_pages))); } } while (0);
 rac->_nr_pages -= rac->_batch_count;
 rac->_index += rac->_batch_count;
 rac->_batch_count = 0;

 xas_set(&xas, rac->_index);
 rcu_read_lock();
 for (page = xas_find(&xas, rac->_index + rac->_nr_pages - 1); page; page = xas_next_entry(&xas, rac->_index + rac->_nr_pages - 1)) {
  if (xas_retry(&xas, page))
   continue;
  ((void)(sizeof(( long)(!PageLocked(page)))));
  ((void)(sizeof(( long)(PageTail(page)))));
  array[i++] = page;
  rac->_batch_count += thp_nr_pages(page);







  if (PageHead(page))
   xas_set(&xas, rac->_index + rac->_batch_count);

  if (i == array_sz)
   break;
 }
 rcu_read_unlock();

 return i;
}
# 1166 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t readahead_pos(struct readahead_control *rac)
{
 return (loff_t)rac->_index * (1UL << 16);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t readahead_length(struct readahead_control *rac)
{
 return rac->_nr_pages * (1UL << 16);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long readahead_index(struct readahead_control *rac)
{
 return rac->_index;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int readahead_count(struct readahead_control *rac)
{
 return rac->_nr_pages;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t readahead_batch_length(struct readahead_control *rac)
{
 return rac->_batch_count * (1UL << 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dir_pages(struct inode *inode)
{
 return (unsigned long)(inode->i_size + (1UL << 16) - 1) >>
          16;
}
# 1221 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t folio_mkwrite_check_truncate(struct folio *folio,
           struct inode *inode)
{
 loff_t size = i_size_read(inode);
 unsigned long index = size >> 16;
 size_t offset = ((unsigned long)(size) & (folio_size(folio) - 1));

 if (!folio->mapping)
  return -14;


 if (folio_next_index(folio) - 1 < index)
  return folio_size(folio);

 if (folio->index > index || !offset)
  return -14;

 return offset;
}
# 1249 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mkwrite_check_truncate(struct page *page,
           struct inode *inode)
{
 loff_t size = i_size_read(inode);
 unsigned long index = size >> 16;
 int offset = ((unsigned long)(size) & ~(~((1 << 16) - 1)));

 if (page->mapping != inode->i_mapping)
  return -14;


 if (page->index < index)
  return (1UL << 16);

 if (page->index > index || !offset)
  return -14;

 return offset;
}
# 1280 "./include/linux/pagemap.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned int i_blocks_per_folio(struct inode *inode, struct folio *folio)
{
 return folio_size(folio) >> inode->i_blkbits;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned int i_blocks_per_page(struct inode *inode, struct page *page)
{
 return i_blocks_per_folio(inode, (_Generic((page), const struct page *: (const struct folio *)_compound_head(page), struct page *: (struct folio *)_compound_head(page))));
}
# 25 "arch/powerpc/kernel/signal_32.c" 2

# 1 "./include/linux/syscalls.h" 1
# 12 "./include/linux/syscalls.h"
struct __aio_sigset;
struct epoll_event;
struct iattr;
struct inode;
struct iocb;
struct io_event;
struct iovec;
struct __kernel_old_itimerval;
struct kexec_segment;
struct linux_dirent;
struct linux_dirent64;
struct list_head;
struct mmap_arg_struct;
struct msgbuf;
struct user_msghdr;
struct mmsghdr;
struct msqid_ds;
struct new_utsname;
struct nfsctl_arg;
struct __old_kernel_stat;
struct oldold_utsname;
struct old_utsname;
struct pollfd;
struct rlimit;
struct rlimit64;
struct rusage;
struct sched_param;
struct sched_attr;
struct sel_arg_struct;
struct semaphore;
struct sembuf;
struct shmid_ds;
struct sockaddr;
struct stat;
struct stat64;
struct statfs;
struct statfs64;
struct statx;
struct sysinfo;
struct timespec;
struct __kernel_old_timeval;
struct __kernel_timex;
struct timezone;
struct tms;
struct utimbuf;
struct mq_attr;
struct compat_stat;
struct old_timeval32;
struct robust_list_head;
struct getcpu_cache;
struct old_linux_dirent;
struct perf_event_attr;
struct file_handle;
struct sigaltstack;
struct rseq;
union bpf_attr;
struct io_uring_params;
struct clone_args;
struct open_how;
struct mount_attr;
struct landlock_ruleset_attr;
enum landlock_rule_type;


# 1 "./include/uapi/linux/aio_abi.h" 1
# 34 "./include/uapi/linux/aio_abi.h"
typedef __kernel_ulong_t aio_context_t;

enum {
 IOCB_CMD_PREAD = 0,
 IOCB_CMD_PWRITE = 1,
 IOCB_CMD_FSYNC = 2,
 IOCB_CMD_FDSYNC = 3,

 IOCB_CMD_POLL = 5,
 IOCB_CMD_NOOP = 6,
 IOCB_CMD_PREADV = 7,
 IOCB_CMD_PWRITEV = 8,
};
# 60 "./include/uapi/linux/aio_abi.h"
struct io_event {
 __u64 data;
 __u64 obj;
 __s64 res;
 __s64 res2;
};







struct iocb {

 __u64 aio_data;





 __kernel_rwf_t aio_rw_flags;
 __u32 aio_key;





 __u16 aio_lio_opcode;
 __s16 aio_reqprio;
 __u32 aio_fildes;

 __u64 aio_buf;
 __u64 aio_nbytes;
 __s64 aio_offset;


 __u64 aio_reserved2;


 __u32 aio_flags;





 __u32 aio_resfd;
};
# 77 "./include/linux/syscalls.h" 2





# 1 "./arch/powerpc/include/generated/uapi/asm/siginfo.h" 1
# 83 "./include/linux/syscalls.h" 2



# 1 "./include/linux/personality.h" 1




# 1 "./include/uapi/linux/personality.h" 1
# 11 "./include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 42 "./include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 6 "./include/linux/personality.h" 2
# 87 "./include/linux/syscalls.h" 2
# 1 "./include/trace/syscall.h" 1




# 1 "./include/linux/tracepoint.h" 1
# 22 "./include/linux/tracepoint.h"
# 1 "./include/linux/static_call.h" 1
# 135 "./include/linux/static_call.h"
# 1 "./include/linux/cpu.h" 1
# 17 "./include/linux/cpu.h"
# 1 "./include/linux/node.h" 1
# 31 "./include/linux/node.h"
struct node_hmem_attrs {
 unsigned int read_bandwidth;
 unsigned int write_bandwidth;
 unsigned int read_latency;
 unsigned int write_latency;
};

enum cache_indexing {
 NODE_CACHE_DIRECT_MAP,
 NODE_CACHE_INDEXED,
 NODE_CACHE_OTHER,
};

enum cache_write_policy {
 NODE_CACHE_WRITE_BACK,
 NODE_CACHE_WRITE_THROUGH,
 NODE_CACHE_WRITE_OTHER,
};
# 59 "./include/linux/node.h"
struct node_cache_attrs {
 enum cache_indexing indexing;
 enum cache_write_policy write_policy;
 u64 size;
 u16 line_size;
 u8 level;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_add_cache(unsigned int nid,
      struct node_cache_attrs *cache_attrs)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_perf_attrs(unsigned int nid,
           struct node_hmem_attrs *hmem_attrs,
           unsigned access)
{
}


struct node {
 struct device dev;
 struct list_head access_list;


 struct work_struct node_work;





};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);


void link_mem_sections(int nid, unsigned long start_pfn,
         unsigned long end_pfn,
         enum meminit_context context);
# 113 "./include/linux/node.h"
extern void unregister_node(struct node *node);


extern int __register_one_node(int nid);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_one_node(int nid)
{
 int error = 0;

 if (node_state((nid), N_ONLINE)) {
  struct pglist_data *pgdat = (node_data[nid]);
  unsigned long start_pfn = pgdat->node_start_pfn;
  unsigned long end_pfn = start_pfn + pgdat->node_spanned_pages;

  error = __register_one_node(nid);
  if (error)
   return error;

  link_mem_sections(nid, start_pfn, end_pfn, MEMINIT_EARLY);
 }

 return error;
}

extern void unregister_one_node(int nid);
extern int register_cpu_under_node(unsigned int cpu, unsigned int nid);
extern int unregister_cpu_under_node(unsigned int cpu, unsigned int nid);
extern void unregister_memory_block_under_nodes(struct memory_block *mem_blk);

extern int register_memory_node_under_compute_node(unsigned int mem_nid,
         unsigned int cpu_nid,
         unsigned access);


extern void register_hugetlbfs_with_node(node_registration_func_t doregister,
      node_registration_func_t unregister);
# 18 "./include/linux/cpu.h" 2


# 1 "./include/linux/cpuhotplug.h" 1
# 25 "./include/linux/cpuhotplug.h"
enum cpuhp_state {
 CPUHP_INVALID = -1,
 CPUHP_OFFLINE = 0,
 CPUHP_CREATE_THREADS,
 CPUHP_PERF_PREPARE,
 CPUHP_PERF_X86_PREPARE,
 CPUHP_PERF_X86_AMD_UNCORE_PREP,
 CPUHP_PERF_POWER,
 CPUHP_PERF_SUPERH,
 CPUHP_X86_HPET_DEAD,
 CPUHP_X86_APB_DEAD,
 CPUHP_X86_MCE_DEAD,
 CPUHP_VIRT_NET_DEAD,
 CPUHP_SLUB_DEAD,
 CPUHP_DEBUG_OBJ_DEAD,
 CPUHP_MM_WRITEBACK_DEAD,
 CPUHP_MM_VMSTAT_DEAD,
 CPUHP_SOFTIRQ_DEAD,
 CPUHP_NET_MVNETA_DEAD,
 CPUHP_CPUIDLE_DEAD,
 CPUHP_ARM64_FPSIMD_DEAD,
 CPUHP_ARM_OMAP_WAKE_DEAD,
 CPUHP_IRQ_POLL_DEAD,
 CPUHP_BLOCK_SOFTIRQ_DEAD,
 CPUHP_BIO_DEAD,
 CPUHP_ACPI_CPUDRV_DEAD,
 CPUHP_S390_PFAULT_DEAD,
 CPUHP_BLK_MQ_DEAD,
 CPUHP_FS_BUFF_DEAD,
 CPUHP_PRINTK_DEAD,
 CPUHP_MM_MEMCQ_DEAD,
 CPUHP_XFS_DEAD,
 CPUHP_PERCPU_CNT_DEAD,
 CPUHP_RADIX_DEAD,
 CPUHP_PAGE_ALLOC,
 CPUHP_NET_DEV_DEAD,
 CPUHP_PCI_XGENE_DEAD,
 CPUHP_IOMMU_IOVA_DEAD,
 CPUHP_LUSTRE_CFS_DEAD,
 CPUHP_AP_ARM_CACHE_B15_RAC_DEAD,
 CPUHP_PADATA_DEAD,
 CPUHP_WORKQUEUE_PREP,
 CPUHP_POWER_NUMA_PREPARE,
 CPUHP_HRTIMERS_PREPARE,
 CPUHP_PROFILE_PREPARE,
 CPUHP_X2APIC_PREPARE,
 CPUHP_SMPCFD_PREPARE,
 CPUHP_RELAY_PREPARE,
 CPUHP_SLAB_PREPARE,
 CPUHP_MD_RAID5_PREPARE,
 CPUHP_RCUTREE_PREP,
 CPUHP_CPUIDLE_COUPLED_PREPARE,
 CPUHP_POWERPC_PMAC_PREPARE,
 CPUHP_POWERPC_MMU_CTX_PREPARE,
 CPUHP_XEN_PREPARE,
 CPUHP_XEN_EVTCHN_PREPARE,
 CPUHP_ARM_SHMOBILE_SCU_PREPARE,
 CPUHP_SH_SH3X_PREPARE,
 CPUHP_NET_FLOW_PREPARE,
 CPUHP_TOPOLOGY_PREPARE,
 CPUHP_NET_IUCV_PREPARE,
 CPUHP_ARM_BL_PREPARE,
 CPUHP_TRACE_RB_PREPARE,
 CPUHP_MM_ZS_PREPARE,
 CPUHP_MM_ZSWP_MEM_PREPARE,
 CPUHP_MM_ZSWP_POOL_PREPARE,
 CPUHP_KVM_PPC_BOOK3S_PREPARE,
 CPUHP_ZCOMP_PREPARE,
 CPUHP_TIMERS_PREPARE,
 CPUHP_MIPS_SOC_PREPARE,
 CPUHP_BP_PREPARE_DYN,
 CPUHP_BP_PREPARE_DYN_END = CPUHP_BP_PREPARE_DYN + 20,
 CPUHP_BRINGUP_CPU,
 CPUHP_AP_IDLE_DEAD,
 CPUHP_AP_OFFLINE,
 CPUHP_AP_SCHED_STARTING,
 CPUHP_AP_RCUTREE_DYING,
 CPUHP_AP_CPU_PM_STARTING,
 CPUHP_AP_IRQ_GIC_STARTING,
 CPUHP_AP_IRQ_HIP04_STARTING,
 CPUHP_AP_IRQ_APPLE_AIC_STARTING,
 CPUHP_AP_IRQ_ARMADA_XP_STARTING,
 CPUHP_AP_IRQ_BCM2836_STARTING,
 CPUHP_AP_IRQ_MIPS_GIC_STARTING,
 CPUHP_AP_IRQ_RISCV_STARTING,
 CPUHP_AP_IRQ_SIFIVE_PLIC_STARTING,
 CPUHP_AP_ARM_MVEBU_COHERENCY,
 CPUHP_AP_MICROCODE_LOADER,
 CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING,
 CPUHP_AP_PERF_X86_STARTING,
 CPUHP_AP_PERF_X86_AMD_IBS_STARTING,
 CPUHP_AP_PERF_X86_CQM_STARTING,
 CPUHP_AP_PERF_X86_CSTATE_STARTING,
 CPUHP_AP_PERF_XTENSA_STARTING,
 CPUHP_AP_MIPS_OP_LOONGSON3_STARTING,
 CPUHP_AP_ARM_SDEI_STARTING,
 CPUHP_AP_ARM_VFP_STARTING,
 CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING,
 CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING,
 CPUHP_AP_PERF_ARM_ACPI_STARTING,
 CPUHP_AP_PERF_ARM_STARTING,
 CPUHP_AP_ARM_L2X0_STARTING,
 CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING,
 CPUHP_AP_ARM_ARCH_TIMER_STARTING,
 CPUHP_AP_ARM_GLOBAL_TIMER_STARTING,
 CPUHP_AP_JCORE_TIMER_STARTING,
 CPUHP_AP_ARM_TWD_STARTING,
 CPUHP_AP_QCOM_TIMER_STARTING,
 CPUHP_AP_TEGRA_TIMER_STARTING,
 CPUHP_AP_ARMADA_TIMER_STARTING,
 CPUHP_AP_MARCO_TIMER_STARTING,
 CPUHP_AP_MIPS_GIC_TIMER_STARTING,
 CPUHP_AP_ARC_TIMER_STARTING,
 CPUHP_AP_RISCV_TIMER_STARTING,
 CPUHP_AP_CLINT_TIMER_STARTING,
 CPUHP_AP_CSKY_TIMER_STARTING,
 CPUHP_AP_TI_GP_TIMER_STARTING,
 CPUHP_AP_HYPERV_TIMER_STARTING,
 CPUHP_AP_KVM_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_STARTING,
 CPUHP_AP_KVM_ARM_TIMER_STARTING,

 CPUHP_AP_DUMMY_TIMER_STARTING,
 CPUHP_AP_ARM_XEN_STARTING,
 CPUHP_AP_ARM_CORESIGHT_STARTING,
 CPUHP_AP_ARM_CORESIGHT_CTI_STARTING,
 CPUHP_AP_ARM64_ISNDEP_STARTING,
 CPUHP_AP_SMPCFD_DYING,
 CPUHP_AP_X86_TBOOT_DYING,
 CPUHP_AP_ARM_CACHE_B15_RAC_DYING,
 CPUHP_AP_ONLINE,
 CPUHP_TEARDOWN_CPU,
 CPUHP_AP_ONLINE_IDLE,
 CPUHP_AP_SCHED_WAIT_EMPTY,
 CPUHP_AP_SMPBOOT_THREADS,
 CPUHP_AP_X86_VDSO_VMA_ONLINE,
 CPUHP_AP_IRQ_AFFINITY_ONLINE,
 CPUHP_AP_BLK_MQ_ONLINE,
 CPUHP_AP_ARM_MVEBU_SYNC_CLOCKS,
 CPUHP_AP_X86_INTEL_EPB_ONLINE,
 CPUHP_AP_PERF_ONLINE,
 CPUHP_AP_PERF_X86_ONLINE,
 CPUHP_AP_PERF_X86_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_POWER_ONLINE,
 CPUHP_AP_PERF_X86_RAPL_ONLINE,
 CPUHP_AP_PERF_X86_CQM_ONLINE,
 CPUHP_AP_PERF_X86_CSTATE_ONLINE,
 CPUHP_AP_PERF_X86_IDXD_ONLINE,
 CPUHP_AP_PERF_S390_CF_ONLINE,
 CPUHP_AP_PERF_S390_SF_ONLINE,
 CPUHP_AP_PERF_ARM_CCI_ONLINE,
 CPUHP_AP_PERF_ARM_CCN_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_DDRC_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_HHA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_L3_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_PA_ONLINE,
 CPUHP_AP_PERF_ARM_HISI_SLLC_ONLINE,
 CPUHP_AP_PERF_ARM_L2X0_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE,
 CPUHP_AP_PERF_ARM_APM_XGENE_ONLINE,
 CPUHP_AP_PERF_ARM_CAVIUM_TX2_UNCORE_ONLINE,
 CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_TRACE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_24x7_ONLINE,
 CPUHP_AP_PERF_POWERPC_HV_GPCI_ONLINE,
 CPUHP_AP_PERF_CSKY_ONLINE,
 CPUHP_AP_WATCHDOG_ONLINE,
 CPUHP_AP_WORKQUEUE_ONLINE,
 CPUHP_AP_RCUTREE_ONLINE,
 CPUHP_AP_BASE_CACHEINFO_ONLINE,
 CPUHP_AP_ONLINE_DYN,
 CPUHP_AP_ONLINE_DYN_END = CPUHP_AP_ONLINE_DYN + 30,
 CPUHP_AP_X86_HPET_ONLINE,
 CPUHP_AP_X86_KVM_CLK_ONLINE,
 CPUHP_AP_DTPM_CPU_ONLINE,
 CPUHP_AP_ACTIVE,
 CPUHP_ONLINE,
};

int __cpuhp_setup_state(enum cpuhp_state state, const char *name, bool invoke,
   int (*startup)(unsigned int cpu),
   int (*teardown)(unsigned int cpu), bool multi_instance);

int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char *name,
       bool invoke,
       int (*startup)(unsigned int cpu),
       int (*teardown)(unsigned int cpu),
       bool multi_instance);
# 228 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state(enum cpuhp_state state,
        const char *name,
        int (*startup)(unsigned int cpu),
        int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, true, startup, teardown, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_cpuslocked(enum cpuhp_state state,
            const char *name,
            int (*startup)(unsigned int cpu),
            int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, true, startup,
           teardown, false);
}
# 256 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_nocalls(enum cpuhp_state state,
         const char *name,
         int (*startup)(unsigned int cpu),
         int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, false, startup, teardown,
       false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_nocalls_cpuslocked(enum cpuhp_state state,
           const char *name,
           int (*startup)(unsigned int cpu),
           int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, false, startup,
         teardown, false);
}
# 286 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_setup_state_multi(enum cpuhp_state state,
       const char *name,
       int (*startup)(unsigned int cpu,
        struct hlist_node *node),
       int (*teardown)(unsigned int cpu,
         struct hlist_node *node))
{
 return __cpuhp_setup_state(state, name, false,
       (void *) startup,
       (void *) teardown, true);
}

int __cpuhp_state_add_instance(enum cpuhp_state state, struct hlist_node *node,
          bool invoke);
int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state state,
       struct hlist_node *node, bool invoke);
# 313 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_add_instance(enum cpuhp_state state,
        struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, true);
}
# 328 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_add_instance_nocalls(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
cpuhp_state_add_instance_nocalls_cpuslocked(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance_cpuslocked(state, node, false);
}

void __cpuhp_remove_state(enum cpuhp_state state, bool invoke);
void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke);
# 351 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, true);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state_nocalls(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_state_nocalls_cpuslocked(enum cpuhp_state state)
{
 __cpuhp_remove_state_cpuslocked(state, false);
}
# 379 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpuhp_remove_multi_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

int __cpuhp_state_remove_instance(enum cpuhp_state state,
      struct hlist_node *node, bool invoke);
# 396 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_remove_instance(enum cpuhp_state state,
           struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, true);
}
# 410 "./include/linux/cpuhotplug.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_state_remove_instance_nocalls(enum cpuhp_state state,
            struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, false);
}


void cpuhp_online_idle(enum cpuhp_state state);
# 21 "./include/linux/cpu.h" 2

struct device;
struct device_node;
struct attribute_group;

struct cpu {
 int node_id;
 int hotpluggable;
 struct device dev;
};

extern void boot_cpu_init(void);
extern void boot_cpu_hotplug_init(void);
extern void cpu_init(void);
extern void trap_init(void);

extern int register_cpu(struct cpu *cpu, int num);
extern struct device *get_cpu_device(unsigned cpu);
extern bool cpu_is_hotpluggable(unsigned cpu);
extern bool arch_match_cpu_phys_id(int cpu, u64 phys_id);
extern bool arch_find_n_match_cpu_physical_id(struct device_node *cpun,
           int cpu, unsigned int *thread);

extern int cpu_add_dev_attr(struct device_attribute *attr);
extern void cpu_remove_dev_attr(struct device_attribute *attr);

extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);

extern ssize_t cpu_show_meltdown(struct device *dev,
     struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v1(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v2(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spec_store_bypass(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_l1tf(struct device *dev,
        struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_mds(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_tsx_async_abort(struct device *dev,
     struct device_attribute *attr,
     char *buf);
extern ssize_t cpu_show_itlb_multihit(struct device *dev,
          struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_srbds(struct device *dev, struct device_attribute *attr, char *buf);

extern __attribute__((__format__(printf, 4, 5)))
struct device *cpu_device_create(struct device *parent, void *drvdata,
     const struct attribute_group **groups,
     const char *fmt, ...);

extern void unregister_cpu(struct cpu *cpu);
extern ssize_t arch_cpu_probe(const char *, size_t);
extern ssize_t arch_cpu_release(const char *, size_t);
# 91 "./include/linux/cpu.h"
extern bool cpuhp_tasks_frozen;
int add_cpu(unsigned int cpu);
int cpu_device_up(struct device *dev);
void notify_cpu_starting(unsigned int cpu);
extern void cpu_maps_update_begin(void);
extern void cpu_maps_update_done(void);
int bringup_hibernate_cpu(unsigned int sleep_cpu);
void bringup_nonboot_cpus(unsigned int setup_max_cpus);
# 114 "./include/linux/cpu.h"
extern struct bus_type cpu_subsys;

extern int lockdep_is_cpus_held(void);


extern void cpus_write_lock(void);
extern void cpus_write_unlock(void);
extern void cpus_read_lock(void);
extern void cpus_read_unlock(void);
extern int cpus_read_trylock(void);
extern void lockdep_assert_cpus_held(void);
extern void cpu_hotplug_disable(void);
extern void cpu_hotplug_enable(void);
void clear_tasks_mm_cpumask(int cpu);
int remove_cpu(unsigned int cpu);
int cpu_device_down(struct device *dev);
extern void smp_shutdown_nonboot_cpus(unsigned int primary_cpu);
# 147 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_hotplug_begin(void) { cpus_write_lock(); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_hotplug_done(void) { cpus_write_unlock(); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_online_cpus(void) { cpus_read_lock(); }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_online_cpus(void) { cpus_read_unlock(); }


extern int freeze_secondary_cpus(int primary);
extern void thaw_secondary_cpus(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int suspend_disable_secondary_cpus(void)
{
 int cpu = 0;

 if (1)
  cpu = -1;

 return freeze_secondary_cpus(cpu);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void suspend_enable_secondary_cpus(void)
{
 return thaw_secondary_cpus();
}







void cpu_startup_entry(enum cpuhp_state state);

void cpu_idle_poll_ctrl(bool enable);




bool cpu_in_idle(unsigned long pc);

void arch_cpu_idle(void);
void arch_cpu_idle_prepare(void);
void arch_cpu_idle_enter(void);
void arch_cpu_idle_exit(void);
void arch_cpu_idle_dead(void);

int cpu_report_state(int cpu);
int cpu_check_up_prepare(int cpu);
void cpu_set_state_online(int cpu);
void play_idle_precise(u64 duration_ns, u64 latency_ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void play_idle(unsigned long duration_us)
{
 play_idle_precise(duration_us * 1000L, ((u64)~0ULL));
}


bool cpu_wait_death(unsigned int cpu, int seconds);
bool cpu_report_death(void);
void cpuhp_report_idle_dead(void);




enum cpuhp_smt_control {
 CPU_SMT_ENABLED,
 CPU_SMT_DISABLED,
 CPU_SMT_FORCE_DISABLED,
 CPU_SMT_NOT_SUPPORTED,
 CPU_SMT_NOT_IMPLEMENTED,
};
# 226 "./include/linux/cpu.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_smt_disable(bool force) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_smt_check_topology(void) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_smt_possible(void) { return false; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_smt_enable(void) { return 0; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval) { return 0; }


extern bool cpu_mitigations_off(void);
extern bool cpu_mitigations_auto_nosmt(void);
# 136 "./include/linux/static_call.h" 2
# 271 "./include/linux/static_call.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int static_call_init(void) { return 0; }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __static_call_return0(void)
{
 return 0;
}
# 290 "./include/linux/static_call.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __static_call_nop(void) { }
# 314 "./include/linux/static_call.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void __static_call_update(struct static_call_key *key, void *tramp, void *func)
{
 do { do { extern void __compiletime_assert_244(void) ; if (!((sizeof(key->func) == sizeof(char) || sizeof(key->func) == sizeof(short) || sizeof(key->func) == sizeof(int) || sizeof(key->func) == sizeof(long)) || sizeof(key->func) == sizeof(long long))) __compiletime_assert_244(); } while (0); do { *(volatile typeof(key->func) *)&(key->func) = (func); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int static_call_text_reserved(void *start, void *end)
{
 return 0;
}
# 23 "./include/linux/tracepoint.h" 2

struct module;
struct tracepoint;
struct notifier_block;

struct trace_eval_map {
 const char *system;
 const char *eval_string;
 unsigned long eval_value;
};



extern struct srcu_struct tracepoint_srcu;

extern int
tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data);
extern int
tracepoint_probe_register_prio(struct tracepoint *tp, void *probe, void *data,
          int prio);
extern int
tracepoint_probe_register_prio_may_exist(struct tracepoint *tp, void *probe, void *data,
      int prio);
extern int
tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
tracepoint_probe_register_may_exist(struct tracepoint *tp, void *probe,
        void *data)
{
 return tracepoint_probe_register_prio_may_exist(tp, probe, data,
       10);
}
extern void
for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),
  void *priv);


struct tp_module {
 struct list_head list;
 struct module *mod;
};

bool trace_module_has_bad_taint(struct module *mod);
extern int register_tracepoint_module_notifier(struct notifier_block *nb);
extern int unregister_tracepoint_module_notifier(struct notifier_block *nb);
# 91 "./include/linux/tracepoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracepoint_synchronize_unregister(void)
{
 synchronize_srcu(&tracepoint_srcu);
 synchronize_rcu();
}






extern int syscall_regfunc(void);
extern void syscall_unregfunc(void);
# 125 "./include/linux/tracepoint.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tracepoint *tracepoint_ptr_deref(tracepoint_ptr_t *p)
{
 return *p;
}
# 6 "./include/trace/syscall.h" 2

# 1 "./include/linux/trace_events.h" 1





# 1 "./include/linux/ring_buffer.h" 1





# 1 "./include/linux/seq_file.h" 1
# 14 "./include/linux/seq_file.h"
struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 50 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 63 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_constant_p(m->count > m->size)) { if (m->count > m->size) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_file.h"), "i" (65), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_file.h"), "i" (65), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(m->count > m->size))); } } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 83 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_constant_p(m->count + num > m->size)) { if (m->count + num > m->size) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_file.h"), "i" (88), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_file.h"), "i" (88), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(m->count + num > m->size))); } } while (0);
  m->count += num;
 }
}
# 101 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
ssize_t seq_read_iter(struct kiocb *iocb, struct iov_iter *iter);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((__format__(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((__format__(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull_width(struct seq_file *m, const char *delimiter,
          unsigned long long num, unsigned int width);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_put_hex_ll(struct seq_file *m, const char *delimiter,
      unsigned long long v, unsigned int width);

void seq_escape_mem(struct seq_file *m, const char *src, size_t len,
      unsigned int flags, const char *esc);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_escape_str(struct seq_file *m, const char *src,
      unsigned int flags, const char *esc)
{
 seq_escape_mem(m, src, strlen(src), flags, esc);
}

void seq_escape(struct seq_file *m, const char *s, const char *esc);

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);


void seq_bprintf(struct seq_file *m, const char *f, const u32 *binary);
# 207 "./include/linux/seq_file.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{

 return seq->file->f_cred->user_ns;




}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 257 "./include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);

void seq_file_init(void);
# 7 "./include/linux/ring_buffer.h" 2
# 1 "./include/linux/poll.h" 1
# 13 "./include/linux/poll.h"
# 1 "./include/uapi/linux/poll.h" 1
# 1 "./arch/powerpc/include/generated/uapi/asm/poll.h" 1
# 1 "./include/uapi/asm-generic/poll.h" 1
# 36 "./include/uapi/asm-generic/poll.h"
struct pollfd {
 int fd;
 short events;
 short revents;
};
# 2 "./arch/powerpc/include/generated/uapi/asm/poll.h" 2
# 2 "./include/uapi/linux/poll.h" 2
# 14 "./include/linux/poll.h" 2
# 1 "./include/uapi/linux/eventpoll.h" 1
# 77 "./include/uapi/linux/eventpoll.h"
struct epoll_event {
 __poll_t events;
 __u64 data;
} ;


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ep_take_care_of_epollwakeup(struct epoll_event *epev)
{
 if ((epev->events & (( __poll_t)(1U << 29))) && !capable(36))
  epev->events &= ~(( __poll_t)(1U << 29));
}
# 15 "./include/linux/poll.h" 2

extern struct ctl_table epoll_table[];
# 32 "./include/linux/poll.h"
struct poll_table_struct;




typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);





typedef struct poll_table_struct {
 poll_queue_proc _qproc;
 __poll_t _key;
} poll_table;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
 if (p && p->_qproc && wait_address)
  p->_qproc(filp, wait_address, p);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool poll_does_not_wait(const poll_table *p)
{
 return p == ((void *)0) || p->_qproc == ((void *)0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t poll_requested_events(const poll_table *p)
{
 return p ? p->_key : ~(__poll_t)0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_poll_funcptr(poll_table *pt, poll_queue_proc qproc)
{
 pt->_qproc = qproc;
 pt->_key = ~(__poll_t)0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_can_poll(struct file *file)
{
 return file->f_op->poll;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t vfs_poll(struct file *file, struct poll_table_struct *pt)
{
 if (__builtin_expect(!!(!file->f_op->poll), 0))
  return (( __poll_t)0x00000001 | ( __poll_t)0x00000004 | ( __poll_t)0x00000040 | ( __poll_t)0x00000100);
 return file->f_op->poll(file, pt);
}

struct poll_table_entry {
 struct file *filp;
 __poll_t key;
 wait_queue_entry_t wait;
 wait_queue_head_t *wait_address;
};




struct poll_wqueues {
 poll_table pt;
 struct poll_table_page *table;
 struct task_struct *polling_task;
 int triggered;
 int error;
 int inline_index;
 struct poll_table_entry inline_entries[((768 - 256) / sizeof(struct poll_table_entry))];
};

extern void poll_initwait(struct poll_wqueues *pwq);
extern void poll_freewait(struct poll_wqueues *pwq);
extern u64 select_estimate_accuracy(struct timespec64 *tv);



extern int core_sys_select(int n, fd_set *inp, fd_set *outp,
      fd_set *exp, struct timespec64 *end_time);

extern int poll_select_set_timeout(struct timespec64 *to, time64_t sec,
       long nsec);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 mangle_poll(__poll_t val)
{
 __u16 v = ( __u16)val;

 return (( __u16)( __poll_t)0x00000001 < 0x0001 ? (v & ( __u16)( __poll_t)0x00000001) * (0x0001/( __u16)( __poll_t)0x00000001) : (v & ( __u16)( __poll_t)0x00000001) / (( __u16)( __poll_t)0x00000001/0x0001)) | (( __u16)( __poll_t)0x00000004 < 0x0004 ? (v & ( __u16)( __poll_t)0x00000004) * (0x0004/( __u16)( __poll_t)0x00000004) : (v & ( __u16)( __poll_t)0x00000004) / (( __u16)( __poll_t)0x00000004/0x0004)) | (( __u16)( __poll_t)0x00000002 < 0x0002 ? (v & ( __u16)( __poll_t)0x00000002) * (0x0002/( __u16)( __poll_t)0x00000002) : (v & ( __u16)( __poll_t)0x00000002) / (( __u16)( __poll_t)0x00000002/0x0002)) | (( __u16)( __poll_t)0x00000008 < 0x0008 ? (v & ( __u16)( __poll_t)0x00000008) * (0x0008/( __u16)( __poll_t)0x00000008) : (v & ( __u16)( __poll_t)0x00000008) / (( __u16)( __poll_t)0x00000008/0x0008)) | (( __u16)( __poll_t)0x00000020 < 0x0020 ? (v & ( __u16)( __poll_t)0x00000020) * (0x0020/( __u16)( __poll_t)0x00000020) : (v & ( __u16)( __poll_t)0x00000020) / (( __u16)( __poll_t)0x00000020/0x0020)) |
  (( __u16)( __poll_t)0x00000040 < 0x0040 ? (v & ( __u16)( __poll_t)0x00000040) * (0x0040/( __u16)( __poll_t)0x00000040) : (v & ( __u16)( __poll_t)0x00000040) / (( __u16)( __poll_t)0x00000040/0x0040)) | (( __u16)( __poll_t)0x00000080 < 0x0080 ? (v & ( __u16)( __poll_t)0x00000080) * (0x0080/( __u16)( __poll_t)0x00000080) : (v & ( __u16)( __poll_t)0x00000080) / (( __u16)( __poll_t)0x00000080/0x0080)) | (( __u16)( __poll_t)0x00000100 < 0x0100 ? (v & ( __u16)( __poll_t)0x00000100) * (0x0100/( __u16)( __poll_t)0x00000100) : (v & ( __u16)( __poll_t)0x00000100) / (( __u16)( __poll_t)0x00000100/0x0100)) | (( __u16)( __poll_t)0x00000200 < 0x0200 ? (v & ( __u16)( __poll_t)0x00000200) * (0x0200/( __u16)( __poll_t)0x00000200) : (v & ( __u16)( __poll_t)0x00000200) / (( __u16)( __poll_t)0x00000200/0x0200)) |
  (( __u16)( __poll_t)0x00000010 < 0x0010 ? (v & ( __u16)( __poll_t)0x00000010) * (0x0010/( __u16)( __poll_t)0x00000010) : (v & ( __u16)( __poll_t)0x00000010) / (( __u16)( __poll_t)0x00000010/0x0010)) | (( __u16)( __poll_t)0x00002000 < 0x2000 ? (v & ( __u16)( __poll_t)0x00002000) * (0x2000/( __u16)( __poll_t)0x00002000) : (v & ( __u16)( __poll_t)0x00002000) / (( __u16)( __poll_t)0x00002000/0x2000)) | (( __u16)( __poll_t)0x00000400 < 0x0400 ? (v & ( __u16)( __poll_t)0x00000400) * (0x0400/( __u16)( __poll_t)0x00000400) : (v & ( __u16)( __poll_t)0x00000400) / (( __u16)( __poll_t)0x00000400/0x0400));

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t demangle_poll(u16 val)
{

 return ( __poll_t)(0x0001 < ( __u16)( __poll_t)0x00000001 ? (val & 0x0001) * (( __u16)( __poll_t)0x00000001/0x0001) : (val & 0x0001) / (0x0001/( __u16)( __poll_t)0x00000001)) | ( __poll_t)(0x0004 < ( __u16)( __poll_t)0x00000004 ? (val & 0x0004) * (( __u16)( __poll_t)0x00000004/0x0004) : (val & 0x0004) / (0x0004/( __u16)( __poll_t)0x00000004)) | ( __poll_t)(0x0002 < ( __u16)( __poll_t)0x00000002 ? (val & 0x0002) * (( __u16)( __poll_t)0x00000002/0x0002) : (val & 0x0002) / (0x0002/( __u16)( __poll_t)0x00000002)) | ( __poll_t)(0x0008 < ( __u16)( __poll_t)0x00000008 ? (val & 0x0008) * (( __u16)( __poll_t)0x00000008/0x0008) : (val & 0x0008) / (0x0008/( __u16)( __poll_t)0x00000008)) | ( __poll_t)(0x0020 < ( __u16)( __poll_t)0x00000020 ? (val & 0x0020) * (( __u16)( __poll_t)0x00000020/0x0020) : (val & 0x0020) / (0x0020/( __u16)( __poll_t)0x00000020)) |
  ( __poll_t)(0x0040 < ( __u16)( __poll_t)0x00000040 ? (val & 0x0040) * (( __u16)( __poll_t)0x00000040/0x0040) : (val & 0x0040) / (0x0040/( __u16)( __poll_t)0x00000040)) | ( __poll_t)(0x0080 < ( __u16)( __poll_t)0x00000080 ? (val & 0x0080) * (( __u16)( __poll_t)0x00000080/0x0080) : (val & 0x0080) / (0x0080/( __u16)( __poll_t)0x00000080)) | ( __poll_t)(0x0100 < ( __u16)( __poll_t)0x00000100 ? (val & 0x0100) * (( __u16)( __poll_t)0x00000100/0x0100) : (val & 0x0100) / (0x0100/( __u16)( __poll_t)0x00000100)) | ( __poll_t)(0x0200 < ( __u16)( __poll_t)0x00000200 ? (val & 0x0200) * (( __u16)( __poll_t)0x00000200/0x0200) : (val & 0x0200) / (0x0200/( __u16)( __poll_t)0x00000200)) |
  ( __poll_t)(0x0010 < ( __u16)( __poll_t)0x00000010 ? (val & 0x0010) * (( __u16)( __poll_t)0x00000010/0x0010) : (val & 0x0010) / (0x0010/( __u16)( __poll_t)0x00000010)) | ( __poll_t)(0x2000 < ( __u16)( __poll_t)0x00002000 ? (val & 0x2000) * (( __u16)( __poll_t)0x00002000/0x2000) : (val & 0x2000) / (0x2000/( __u16)( __poll_t)0x00002000)) | ( __poll_t)(0x0400 < ( __u16)( __poll_t)0x00000400 ? (val & 0x0400) * (( __u16)( __poll_t)0x00000400/0x0400) : (val & 0x0400) / (0x0400/( __u16)( __poll_t)0x00000400));

}
# 8 "./include/linux/ring_buffer.h" 2

struct trace_buffer;
struct ring_buffer_iter;




struct ring_buffer_event {
 u32 type_len:5, time_delta:27;

 u32 array[];
};
# 55 "./include/linux/ring_buffer.h"
enum ring_buffer_type {
 RINGBUF_TYPE_DATA_TYPE_LEN_MAX = 28,
 RINGBUF_TYPE_PADDING,
 RINGBUF_TYPE_TIME_EXTEND,
 RINGBUF_TYPE_TIME_STAMP,
};

unsigned ring_buffer_event_length(struct ring_buffer_event *event);
void *ring_buffer_event_data(struct ring_buffer_event *event);
u64 ring_buffer_event_time_stamp(struct trace_buffer *buffer,
     struct ring_buffer_event *event);
# 81 "./include/linux/ring_buffer.h"
void ring_buffer_discard_commit(struct trace_buffer *buffer,
    struct ring_buffer_event *event);




struct trace_buffer *
__ring_buffer_alloc(unsigned long size, unsigned flags, struct lock_class_key *key);
# 101 "./include/linux/ring_buffer.h"
int ring_buffer_wait(struct trace_buffer *buffer, int cpu, int full);
__poll_t ring_buffer_poll_wait(struct trace_buffer *buffer, int cpu,
     struct file *filp, poll_table *poll_table);




void ring_buffer_free(struct trace_buffer *buffer);

int ring_buffer_resize(struct trace_buffer *buffer, unsigned long size, int cpu);

void ring_buffer_change_overwrite(struct trace_buffer *buffer, int val);

struct ring_buffer_event *ring_buffer_lock_reserve(struct trace_buffer *buffer,
         unsigned long length);
int ring_buffer_unlock_commit(struct trace_buffer *buffer,
         struct ring_buffer_event *event);
int ring_buffer_write(struct trace_buffer *buffer,
        unsigned long length, void *data);

void ring_buffer_nest_start(struct trace_buffer *buffer);
void ring_buffer_nest_end(struct trace_buffer *buffer);

struct ring_buffer_event *
ring_buffer_peek(struct trace_buffer *buffer, int cpu, u64 *ts,
   unsigned long *lost_events);
struct ring_buffer_event *
ring_buffer_consume(struct trace_buffer *buffer, int cpu, u64 *ts,
      unsigned long *lost_events);

struct ring_buffer_iter *
ring_buffer_read_prepare(struct trace_buffer *buffer, int cpu, gfp_t flags);
void ring_buffer_read_prepare_sync(void);
void ring_buffer_read_start(struct ring_buffer_iter *iter);
void ring_buffer_read_finish(struct ring_buffer_iter *iter);

struct ring_buffer_event *
ring_buffer_iter_peek(struct ring_buffer_iter *iter, u64 *ts);
void ring_buffer_iter_advance(struct ring_buffer_iter *iter);
void ring_buffer_iter_reset(struct ring_buffer_iter *iter);
int ring_buffer_iter_empty(struct ring_buffer_iter *iter);
bool ring_buffer_iter_dropped(struct ring_buffer_iter *iter);

unsigned long ring_buffer_size(struct trace_buffer *buffer, int cpu);

void ring_buffer_reset_cpu(struct trace_buffer *buffer, int cpu);
void ring_buffer_reset_online_cpus(struct trace_buffer *buffer);
void ring_buffer_reset(struct trace_buffer *buffer);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
ring_buffer_swap_cpu(struct trace_buffer *buffer_a,
       struct trace_buffer *buffer_b, int cpu)
{
 return -19;
}


bool ring_buffer_empty(struct trace_buffer *buffer);
bool ring_buffer_empty_cpu(struct trace_buffer *buffer, int cpu);

void ring_buffer_record_disable(struct trace_buffer *buffer);
void ring_buffer_record_enable(struct trace_buffer *buffer);
void ring_buffer_record_off(struct trace_buffer *buffer);
void ring_buffer_record_on(struct trace_buffer *buffer);
bool ring_buffer_record_is_on(struct trace_buffer *buffer);
bool ring_buffer_record_is_set_on(struct trace_buffer *buffer);
void ring_buffer_record_disable_cpu(struct trace_buffer *buffer, int cpu);
void ring_buffer_record_enable_cpu(struct trace_buffer *buffer, int cpu);

u64 ring_buffer_oldest_event_ts(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_bytes_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_entries(struct trace_buffer *buffer);
unsigned long ring_buffer_overruns(struct trace_buffer *buffer);
unsigned long ring_buffer_entries_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_overrun_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_commit_overrun_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_dropped_events_cpu(struct trace_buffer *buffer, int cpu);
unsigned long ring_buffer_read_events_cpu(struct trace_buffer *buffer, int cpu);

u64 ring_buffer_time_stamp(struct trace_buffer *buffer);
void ring_buffer_normalize_time_stamp(struct trace_buffer *buffer,
          int cpu, u64 *ts);
void ring_buffer_set_clock(struct trace_buffer *buffer,
      u64 (*clock)(void));
void ring_buffer_set_time_stamp_abs(struct trace_buffer *buffer, bool abs);
bool ring_buffer_time_stamp_abs(struct trace_buffer *buffer);

size_t ring_buffer_nr_pages(struct trace_buffer *buffer, int cpu);
size_t ring_buffer_nr_dirty_pages(struct trace_buffer *buffer, int cpu);

void *ring_buffer_alloc_read_page(struct trace_buffer *buffer, int cpu);
void ring_buffer_free_read_page(struct trace_buffer *buffer, int cpu, void *data);
int ring_buffer_read_page(struct trace_buffer *buffer, void **data_page,
     size_t len, int cpu, int full);

struct trace_seq;

int ring_buffer_print_entry_header(struct trace_seq *s);
int ring_buffer_print_page_header(struct trace_seq *s);

enum ring_buffer_flags {
 RB_FL_OVERWRITE = 1 << 0,
};


int trace_rb_cpu_prepare(unsigned int cpu, struct hlist_node *node);
# 7 "./include/linux/trace_events.h" 2
# 1 "./include/linux/trace_seq.h" 1




# 1 "./include/linux/seq_buf.h" 1
# 19 "./include/linux/seq_buf.h"
struct seq_buf {
 char *buffer;
 size_t size;
 size_t len;
 loff_t readpos;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_buf_clear(struct seq_buf *s)
{
 s->len = 0;
 s->readpos = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
seq_buf_init(struct seq_buf *s, char *buf, unsigned int size)
{
 s->buffer = buf;
 s->size = size;
 seq_buf_clear(s);
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
seq_buf_has_overflowed(struct seq_buf *s)
{
 return s->len > s->size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
seq_buf_set_overflow(struct seq_buf *s)
{
 s->len = s->size + 1;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int
seq_buf_buffer_left(struct seq_buf *s)
{
 if (seq_buf_has_overflowed(s))
  return 0;

 return s->size - s->len;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int seq_buf_used(struct seq_buf *s)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(s->len) *)1 == (typeof(s->size) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(s->len) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(s->size) * 0l)) : (int *)8))))), ((s->len) < (s->size) ? (s->len) : (s->size)), ({ typeof(s->len) __UNIQUE_ID___x245 = (s->len); typeof(s->size) __UNIQUE_ID___y246 = (s->size); ((__UNIQUE_ID___x245) < (__UNIQUE_ID___y246) ? (__UNIQUE_ID___x245) : (__UNIQUE_ID___y246)); }));
}
# 88 "./include/linux/seq_buf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_buf_terminate(struct seq_buf *s)
{
 if (({ bool __ret_warn_on = false; do { if (__builtin_constant_p((s->size == 0))) { if (!(s->size == 0)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_buf.h"), "i" (90), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_buf.h"), "i" (90), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (s->size == 0) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return;

 if (seq_buf_buffer_left(s))
  s->buffer[s->len] = 0;
 else
  s->buffer[s->size - 1] = 0;
}
# 107 "./include/linux/seq_buf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t seq_buf_get_buf(struct seq_buf *s, char **bufp)
{
 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((s->len > s->size + 1))) { if (!(s->len > s->size + 1)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_buf.h"), "i" (109), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_buf.h"), "i" (109), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (s->len > s->size + 1) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (s->len < s->size) {
  *bufp = s->buffer + s->len;
  return s->size - s->len;
 }

 *bufp = ((void *)0);
 return 0;
}
# 129 "./include/linux/seq_buf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_buf_commit(struct seq_buf *s, int num)
{
 if (num < 0) {
  seq_buf_set_overflow(s);
 } else {

  do { if (__builtin_constant_p(s->len + num > s->size)) { if (s->len + num > s->size) do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_buf.h"), "i" (135), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else { __asm__ __volatile__( "1:	" "tdnei" " " " %4, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/seq_buf.h"), "i" (135), "i" (0), "i" (sizeof(struct bug_entry)), "r" (( long)(s->len + num > s->size))); } } while (0);
  s->len += num;
 }
}

extern __attribute__((__format__(printf, 2, 3)))
int seq_buf_printf(struct seq_buf *s, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0)))
int seq_buf_vprintf(struct seq_buf *s, const char *fmt, va_list args);
extern int seq_buf_print_seq(struct seq_file *m, struct seq_buf *s);
extern int seq_buf_to_user(struct seq_buf *s, char *ubuf,
      int cnt);
extern int seq_buf_puts(struct seq_buf *s, const char *str);
extern int seq_buf_putc(struct seq_buf *s, unsigned char c);
extern int seq_buf_putmem(struct seq_buf *s, const void *mem, unsigned int len);
extern int seq_buf_putmem_hex(struct seq_buf *s, const void *mem,
         unsigned int len);
extern int seq_buf_path(struct seq_buf *s, const struct path *path, const char *esc);
extern int seq_buf_hex_dump(struct seq_buf *s, const char *prefix_str,
       int prefix_type, int rowsize, int groupsize,
       const void *buf, size_t len, bool ascii);


extern int
seq_buf_bprintf(struct seq_buf *s, const char *fmt, const u32 *binary);
# 6 "./include/linux/trace_seq.h" 2








struct trace_seq {
 char buffer[(1UL << 16)];
 struct seq_buf seq;
 int full;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
trace_seq_init(struct trace_seq *s)
{
 seq_buf_init(&s->seq, s->buffer, (1UL << 16));
 s->full = 0;
}
# 40 "./include/linux/trace_seq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int trace_seq_used(struct trace_seq *s)
{
 return seq_buf_used(&s->seq);
}
# 54 "./include/linux/trace_seq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *
trace_seq_buffer_ptr(struct trace_seq *s)
{
 return s->buffer + seq_buf_used(&s->seq);
}
# 67 "./include/linux/trace_seq.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_seq_has_overflowed(struct trace_seq *s)
{
 return s->full || seq_buf_has_overflowed(&s->seq);
}





extern __attribute__((__format__(printf, 2, 3)))
void trace_seq_printf(struct trace_seq *s, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0)))
void trace_seq_vprintf(struct trace_seq *s, const char *fmt, va_list args);
extern void
trace_seq_bprintf(struct trace_seq *s, const char *fmt, const u32 *binary);
extern int trace_print_seq(struct seq_file *m, struct trace_seq *s);
extern int trace_seq_to_user(struct trace_seq *s, char *ubuf,
        int cnt);
extern void trace_seq_puts(struct trace_seq *s, const char *str);
extern void trace_seq_putc(struct trace_seq *s, unsigned char c);
extern void trace_seq_putmem(struct trace_seq *s, const void *mem, unsigned int len);
extern void trace_seq_putmem_hex(struct trace_seq *s, const void *mem,
    unsigned int len);
extern int trace_seq_path(struct trace_seq *s, const struct path *path);

extern void trace_seq_bitmask(struct trace_seq *s, const unsigned long *maskp,
        int nmaskbits);

extern int trace_seq_hex_dump(struct trace_seq *s, const char *prefix_str,
         int prefix_type, int rowsize, int groupsize,
         const void *buf, size_t len, bool ascii);
# 8 "./include/linux/trace_events.h" 2


# 1 "./include/linux/perf_event.h" 1
# 17 "./include/linux/perf_event.h"
# 1 "./include/uapi/linux/perf_event.h" 1
# 29 "./include/uapi/linux/perf_event.h"
enum perf_type_id {
 PERF_TYPE_HARDWARE = 0,
 PERF_TYPE_SOFTWARE = 1,
 PERF_TYPE_TRACEPOINT = 2,
 PERF_TYPE_HW_CACHE = 3,
 PERF_TYPE_RAW = 4,
 PERF_TYPE_BREAKPOINT = 5,

 PERF_TYPE_MAX,
};
# 60 "./include/uapi/linux/perf_event.h"
enum perf_hw_id {



 PERF_COUNT_HW_CPU_CYCLES = 0,
 PERF_COUNT_HW_INSTRUCTIONS = 1,
 PERF_COUNT_HW_CACHE_REFERENCES = 2,
 PERF_COUNT_HW_CACHE_MISSES = 3,
 PERF_COUNT_HW_BRANCH_INSTRUCTIONS = 4,
 PERF_COUNT_HW_BRANCH_MISSES = 5,
 PERF_COUNT_HW_BUS_CYCLES = 6,
 PERF_COUNT_HW_STALLED_CYCLES_FRONTEND = 7,
 PERF_COUNT_HW_STALLED_CYCLES_BACKEND = 8,
 PERF_COUNT_HW_REF_CPU_CYCLES = 9,

 PERF_COUNT_HW_MAX,
};
# 85 "./include/uapi/linux/perf_event.h"
enum perf_hw_cache_id {
 PERF_COUNT_HW_CACHE_L1D = 0,
 PERF_COUNT_HW_CACHE_L1I = 1,
 PERF_COUNT_HW_CACHE_LL = 2,
 PERF_COUNT_HW_CACHE_DTLB = 3,
 PERF_COUNT_HW_CACHE_ITLB = 4,
 PERF_COUNT_HW_CACHE_BPU = 5,
 PERF_COUNT_HW_CACHE_NODE = 6,

 PERF_COUNT_HW_CACHE_MAX,
};

enum perf_hw_cache_op_id {
 PERF_COUNT_HW_CACHE_OP_READ = 0,
 PERF_COUNT_HW_CACHE_OP_WRITE = 1,
 PERF_COUNT_HW_CACHE_OP_PREFETCH = 2,

 PERF_COUNT_HW_CACHE_OP_MAX,
};

enum perf_hw_cache_op_result_id {
 PERF_COUNT_HW_CACHE_RESULT_ACCESS = 0,
 PERF_COUNT_HW_CACHE_RESULT_MISS = 1,

 PERF_COUNT_HW_CACHE_RESULT_MAX,
};







enum perf_sw_ids {
 PERF_COUNT_SW_CPU_CLOCK = 0,
 PERF_COUNT_SW_TASK_CLOCK = 1,
 PERF_COUNT_SW_PAGE_FAULTS = 2,
 PERF_COUNT_SW_CONTEXT_SWITCHES = 3,
 PERF_COUNT_SW_CPU_MIGRATIONS = 4,
 PERF_COUNT_SW_PAGE_FAULTS_MIN = 5,
 PERF_COUNT_SW_PAGE_FAULTS_MAJ = 6,
 PERF_COUNT_SW_ALIGNMENT_FAULTS = 7,
 PERF_COUNT_SW_EMULATION_FAULTS = 8,
 PERF_COUNT_SW_DUMMY = 9,
 PERF_COUNT_SW_BPF_OUTPUT = 10,
 PERF_COUNT_SW_CGROUP_SWITCHES = 11,

 PERF_COUNT_SW_MAX,
};





enum perf_event_sample_format {
 PERF_SAMPLE_IP = 1U << 0,
 PERF_SAMPLE_TID = 1U << 1,
 PERF_SAMPLE_TIME = 1U << 2,
 PERF_SAMPLE_ADDR = 1U << 3,
 PERF_SAMPLE_READ = 1U << 4,
 PERF_SAMPLE_CALLCHAIN = 1U << 5,
 PERF_SAMPLE_ID = 1U << 6,
 PERF_SAMPLE_CPU = 1U << 7,
 PERF_SAMPLE_PERIOD = 1U << 8,
 PERF_SAMPLE_STREAM_ID = 1U << 9,
 PERF_SAMPLE_RAW = 1U << 10,
 PERF_SAMPLE_BRANCH_STACK = 1U << 11,
 PERF_SAMPLE_REGS_USER = 1U << 12,
 PERF_SAMPLE_STACK_USER = 1U << 13,
 PERF_SAMPLE_WEIGHT = 1U << 14,
 PERF_SAMPLE_DATA_SRC = 1U << 15,
 PERF_SAMPLE_IDENTIFIER = 1U << 16,
 PERF_SAMPLE_TRANSACTION = 1U << 17,
 PERF_SAMPLE_REGS_INTR = 1U << 18,
 PERF_SAMPLE_PHYS_ADDR = 1U << 19,
 PERF_SAMPLE_AUX = 1U << 20,
 PERF_SAMPLE_CGROUP = 1U << 21,
 PERF_SAMPLE_DATA_PAGE_SIZE = 1U << 22,
 PERF_SAMPLE_CODE_PAGE_SIZE = 1U << 23,
 PERF_SAMPLE_WEIGHT_STRUCT = 1U << 24,

 PERF_SAMPLE_MAX = 1U << 25,

 __PERF_SAMPLE_CALLCHAIN_EARLY = 1ULL << 63,
};
# 182 "./include/uapi/linux/perf_event.h"
enum perf_branch_sample_type_shift {
 PERF_SAMPLE_BRANCH_USER_SHIFT = 0,
 PERF_SAMPLE_BRANCH_KERNEL_SHIFT = 1,
 PERF_SAMPLE_BRANCH_HV_SHIFT = 2,

 PERF_SAMPLE_BRANCH_ANY_SHIFT = 3,
 PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT = 4,
 PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT = 5,
 PERF_SAMPLE_BRANCH_IND_CALL_SHIFT = 6,
 PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT = 7,
 PERF_SAMPLE_BRANCH_IN_TX_SHIFT = 8,
 PERF_SAMPLE_BRANCH_NO_TX_SHIFT = 9,
 PERF_SAMPLE_BRANCH_COND_SHIFT = 10,

 PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT = 11,
 PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT = 12,
 PERF_SAMPLE_BRANCH_CALL_SHIFT = 13,

 PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT = 14,
 PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT = 15,

 PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT = 16,

 PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT = 17,

 PERF_SAMPLE_BRANCH_MAX_SHIFT
};

enum perf_branch_sample_type {
 PERF_SAMPLE_BRANCH_USER = 1U << PERF_SAMPLE_BRANCH_USER_SHIFT,
 PERF_SAMPLE_BRANCH_KERNEL = 1U << PERF_SAMPLE_BRANCH_KERNEL_SHIFT,
 PERF_SAMPLE_BRANCH_HV = 1U << PERF_SAMPLE_BRANCH_HV_SHIFT,

 PERF_SAMPLE_BRANCH_ANY = 1U << PERF_SAMPLE_BRANCH_ANY_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_CALL = 1U << PERF_SAMPLE_BRANCH_ANY_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ANY_RETURN = 1U << PERF_SAMPLE_BRANCH_ANY_RETURN_SHIFT,
 PERF_SAMPLE_BRANCH_IND_CALL = 1U << PERF_SAMPLE_BRANCH_IND_CALL_SHIFT,
 PERF_SAMPLE_BRANCH_ABORT_TX = 1U << PERF_SAMPLE_BRANCH_ABORT_TX_SHIFT,
 PERF_SAMPLE_BRANCH_IN_TX = 1U << PERF_SAMPLE_BRANCH_IN_TX_SHIFT,
 PERF_SAMPLE_BRANCH_NO_TX = 1U << PERF_SAMPLE_BRANCH_NO_TX_SHIFT,
 PERF_SAMPLE_BRANCH_COND = 1U << PERF_SAMPLE_BRANCH_COND_SHIFT,

 PERF_SAMPLE_BRANCH_CALL_STACK = 1U << PERF_SAMPLE_BRANCH_CALL_STACK_SHIFT,
 PERF_SAMPLE_BRANCH_IND_JUMP = 1U << PERF_SAMPLE_BRANCH_IND_JUMP_SHIFT,
 PERF_SAMPLE_BRANCH_CALL = 1U << PERF_SAMPLE_BRANCH_CALL_SHIFT,

 PERF_SAMPLE_BRANCH_NO_FLAGS = 1U << PERF_SAMPLE_BRANCH_NO_FLAGS_SHIFT,
 PERF_SAMPLE_BRANCH_NO_CYCLES = 1U << PERF_SAMPLE_BRANCH_NO_CYCLES_SHIFT,

 PERF_SAMPLE_BRANCH_TYPE_SAVE =
  1U << PERF_SAMPLE_BRANCH_TYPE_SAVE_SHIFT,

 PERF_SAMPLE_BRANCH_HW_INDEX = 1U << PERF_SAMPLE_BRANCH_HW_INDEX_SHIFT,

 PERF_SAMPLE_BRANCH_MAX = 1U << PERF_SAMPLE_BRANCH_MAX_SHIFT,
};




enum {
 PERF_BR_UNKNOWN = 0,
 PERF_BR_COND = 1,
 PERF_BR_UNCOND = 2,
 PERF_BR_IND = 3,
 PERF_BR_CALL = 4,
 PERF_BR_IND_CALL = 5,
 PERF_BR_RET = 6,
 PERF_BR_SYSCALL = 7,
 PERF_BR_SYSRET = 8,
 PERF_BR_COND_CALL = 9,
 PERF_BR_COND_RET = 10,
 PERF_BR_MAX,
};
# 265 "./include/uapi/linux/perf_event.h"
enum perf_sample_regs_abi {
 PERF_SAMPLE_REGS_ABI_NONE = 0,
 PERF_SAMPLE_REGS_ABI_32 = 1,
 PERF_SAMPLE_REGS_ABI_64 = 2,
};





enum {
 PERF_TXN_ELISION = (1 << 0),
 PERF_TXN_TRANSACTION = (1 << 1),
 PERF_TXN_SYNC = (1 << 2),
 PERF_TXN_ASYNC = (1 << 3),
 PERF_TXN_RETRY = (1 << 4),
 PERF_TXN_CONFLICT = (1 << 5),
 PERF_TXN_CAPACITY_WRITE = (1 << 6),
 PERF_TXN_CAPACITY_READ = (1 << 7),

 PERF_TXN_MAX = (1 << 8),



 PERF_TXN_ABORT_MASK = (0xffffffffULL << 32),
 PERF_TXN_ABORT_SHIFT = 32,
};
# 313 "./include/uapi/linux/perf_event.h"
enum perf_event_read_format {
 PERF_FORMAT_TOTAL_TIME_ENABLED = 1U << 0,
 PERF_FORMAT_TOTAL_TIME_RUNNING = 1U << 1,
 PERF_FORMAT_ID = 1U << 2,
 PERF_FORMAT_GROUP = 1U << 3,

 PERF_FORMAT_MAX = 1U << 4,
};
# 338 "./include/uapi/linux/perf_event.h"
struct perf_event_attr {




 __u32 type;




 __u32 size;




 __u64 config;

 union {
  __u64 sample_period;
  __u64 sample_freq;
 };

 __u64 sample_type;
 __u64 read_format;

 __u64 disabled : 1,
    inherit : 1,
    pinned : 1,
    exclusive : 1,
    exclude_user : 1,
    exclude_kernel : 1,
    exclude_hv : 1,
    exclude_idle : 1,
    mmap : 1,
    comm : 1,
    freq : 1,
    inherit_stat : 1,
    enable_on_exec : 1,
    task : 1,
    watermark : 1,
# 388 "./include/uapi/linux/perf_event.h"
    precise_ip : 2,
    mmap_data : 1,
    sample_id_all : 1,

    exclude_host : 1,
    exclude_guest : 1,

    exclude_callchain_kernel : 1,
    exclude_callchain_user : 1,
    mmap2 : 1,
    comm_exec : 1,
    use_clockid : 1,
    context_switch : 1,
    write_backward : 1,
    namespaces : 1,
    ksymbol : 1,
    bpf_event : 1,
    aux_output : 1,
    cgroup : 1,
    text_poke : 1,
    build_id : 1,
    inherit_thread : 1,
    remove_on_exec : 1,
    sigtrap : 1,
    __reserved_1 : 26;

 union {
  __u32 wakeup_events;
  __u32 wakeup_watermark;
 };

 __u32 bp_type;
 union {
  __u64 bp_addr;
  __u64 kprobe_func;
  __u64 uprobe_path;
  __u64 config1;
 };
 union {
  __u64 bp_len;
  __u64 kprobe_addr;
  __u64 probe_offset;
  __u64 config2;
 };
 __u64 branch_sample_type;





 __u64 sample_regs_user;




 __u32 sample_stack_user;

 __s32 clockid;
# 454 "./include/uapi/linux/perf_event.h"
 __u64 sample_regs_intr;




 __u32 aux_watermark;
 __u16 sample_max_stack;
 __u16 __reserved_2;
 __u32 aux_sample_size;
 __u32 __reserved_3;





 __u64 sig_data;
};






struct perf_event_query_bpf {



 __u32 ids_len;




 __u32 prog_cnt;



 __u32 ids[0];
};
# 509 "./include/uapi/linux/perf_event.h"
enum perf_event_ioc_flags {
 PERF_IOC_FLAG_GROUP = 1U << 0,
};




struct perf_event_mmap_page {
 __u32 version;
 __u32 compat_version;
# 555 "./include/uapi/linux/perf_event.h"
 __u32 lock;
 __u32 index;
 __s64 offset;
 __u64 time_enabled;
 __u64 time_running;
 union {
  __u64 capabilities;
  struct {
   __u64 cap_bit0 : 1,
    cap_bit0_is_deprecated : 1,

    cap_user_rdpmc : 1,
    cap_user_time : 1,
    cap_user_time_zero : 1,
    cap_user_time_short : 1,
    cap_____res : 58;
  };
 };
# 583 "./include/uapi/linux/perf_event.h"
 __u16 pmc_width;
# 609 "./include/uapi/linux/perf_event.h"
 __u16 time_shift;
 __u32 time_mult;
 __u64 time_offset;
# 628 "./include/uapi/linux/perf_event.h"
 __u64 time_zero;

 __u32 size;
 __u32 __reserved_1;
# 644 "./include/uapi/linux/perf_event.h"
 __u64 time_cycles;
 __u64 time_mask;





 __u8 __reserved[116*8];
# 669 "./include/uapi/linux/perf_event.h"
 __u64 data_head;
 __u64 data_tail;
 __u64 data_offset;
 __u64 data_size;
# 685 "./include/uapi/linux/perf_event.h"
 __u64 aux_head;
 __u64 aux_tail;
 __u64 aux_offset;
 __u64 aux_size;
};
# 760 "./include/uapi/linux/perf_event.h"
struct perf_event_header {
 __u32 type;
 __u16 misc;
 __u16 size;
};

struct perf_ns_link_info {
 __u64 dev;
 __u64 ino;
};

enum {
 NET_NS_INDEX = 0,
 UTS_NS_INDEX = 1,
 IPC_NS_INDEX = 2,
 PID_NS_INDEX = 3,
 USER_NS_INDEX = 4,
 MNT_NS_INDEX = 5,
 CGROUP_NS_INDEX = 6,

 NR_NAMESPACES,
};

enum perf_event_type {
# 824 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_MMAP = 1,
# 834 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_LOST = 2,
# 845 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_COMM = 3,
# 856 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_EXIT = 4,
# 867 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_THROTTLE = 5,
 PERF_RECORD_UNTHROTTLE = 6,
# 879 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_FORK = 7,
# 890 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_READ = 8,
# 972 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_SAMPLE = 9,
# 1004 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_MMAP2 = 10,
# 1018 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_AUX = 11,
# 1030 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_ITRACE_START = 12,
# 1042 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_LOST_SAMPLES = 13,
# 1054 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_SWITCH = 14,
# 1068 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_SWITCH_CPU_WIDE = 15,
# 1080 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_NAMESPACES = 16,
# 1095 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_KSYMBOL = 17,
# 1114 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_BPF_EVENT = 18,
# 1124 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_CGROUP = 19,
# 1142 "./include/uapi/linux/perf_event.h"
 PERF_RECORD_TEXT_POKE = 20,

 PERF_RECORD_MAX,
};

enum perf_record_ksymbol_type {
 PERF_RECORD_KSYMBOL_TYPE_UNKNOWN = 0,
 PERF_RECORD_KSYMBOL_TYPE_BPF = 1,




 PERF_RECORD_KSYMBOL_TYPE_OOL = 2,
 PERF_RECORD_KSYMBOL_TYPE_MAX
};



enum perf_bpf_event_type {
 PERF_BPF_EVENT_UNKNOWN = 0,
 PERF_BPF_EVENT_PROG_LOAD = 1,
 PERF_BPF_EVENT_PROG_UNLOAD = 2,
 PERF_BPF_EVENT_MAX,
};




enum perf_callchain_context {
 PERF_CONTEXT_HV = (__u64)-32,
 PERF_CONTEXT_KERNEL = (__u64)-128,
 PERF_CONTEXT_USER = (__u64)-512,

 PERF_CONTEXT_GUEST = (__u64)-2048,
 PERF_CONTEXT_GUEST_KERNEL = (__u64)-2176,
 PERF_CONTEXT_GUEST_USER = (__u64)-2560,

 PERF_CONTEXT_MAX = (__u64)-4095,
};
# 1217 "./include/uapi/linux/perf_event.h"
union perf_mem_data_src {
 __u64 val;
 struct {
  __u64 mem_rsvd:21,
   mem_blk:3,
   mem_snoopx:2,
   mem_remote:1,
   mem_lvl_num:4,
   mem_dtlb:7,
   mem_lock:2,
   mem_snoop:5,
   mem_lvl:14,
   mem_op:5;
 };
};
# 1329 "./include/uapi/linux/perf_event.h"
struct perf_branch_entry {
 __u64 from;
 __u64 to;
 __u64 mispred:1,
  predicted:1,
  in_tx:1,
  abort:1,
  cycles:16,
  type:4,
  reserved:40;
};

union perf_sample_weight {
 __u64 full;







 struct {
  __u16 var3_w;
  __u16 var2_w;
  __u32 var1_dw;
 };



};
# 18 "./include/linux/perf_event.h" 2
# 1 "./include/uapi/linux/bpf_perf_event.h" 1
# 11 "./include/uapi/linux/bpf_perf_event.h"
# 1 "./arch/powerpc/include/uapi/asm/bpf_perf_event.h" 1






typedef struct user_pt_regs bpf_user_pt_regs_t;
# 12 "./include/uapi/linux/bpf_perf_event.h" 2

struct bpf_perf_event_data {
 bpf_user_pt_regs_t regs;
 __u64 sample_period;
 __u64 addr;
};
# 19 "./include/linux/perf_event.h" 2






# 1 "./arch/powerpc/include/asm/perf_event.h" 1
# 14 "./arch/powerpc/include/asm/perf_event.h"
# 1 "./arch/powerpc/include/asm/perf_event_server.h" 1
# 11 "./arch/powerpc/include/asm/perf_event_server.h"
# 1 "./arch/powerpc/include/uapi/asm/perf_event.h" 1
# 12 "./arch/powerpc/include/asm/perf_event_server.h" 2






struct perf_event;

struct mmcr_regs {
 unsigned long mmcr0;
 unsigned long mmcr1;
 unsigned long mmcr2;
 unsigned long mmcra;
 unsigned long mmcr3;
};




struct power_pmu {
 const char *name;
 int n_counter;
 int max_alternatives;
 unsigned long add_fields;
 unsigned long test_adder;
 int (*compute_mmcr)(u64 events[], int n_ev,
    unsigned int hwc[], struct mmcr_regs *mmcr,
    struct perf_event *pevents[], u32 flags);
 int (*get_constraint)(u64 event_id, unsigned long *mskp,
    unsigned long *valp, u64 event_config1);
 int (*get_alternatives)(u64 event_id, unsigned int flags,
    u64 alt[]);
 void (*get_mem_data_src)(union perf_mem_data_src *dsrc,
    u32 flags, struct pt_regs *regs);
 void (*get_mem_weight)(u64 *weight, u64 type);
 unsigned long group_constraint_mask;
 unsigned long group_constraint_val;
 u64 (*bhrb_filter_map)(u64 branch_sample_type);
 void (*config_bhrb)(u64 pmu_bhrb_filter);
 void (*disable_pmc)(unsigned int pmc, struct mmcr_regs *mmcr);
 int (*limited_pmc_event)(u64 event_id);
 u32 flags;
 const struct attribute_group **attr_groups;
 int n_generic;
 int *generic_events;
 u64 (*cache_events)[PERF_COUNT_HW_CACHE_MAX]
          [PERF_COUNT_HW_CACHE_OP_MAX]
          [PERF_COUNT_HW_CACHE_RESULT_MAX];

 int n_blacklist_ev;
 int *blacklist_ev;

 int bhrb_nr;




 int capabilities;





 int (*check_attr_config)(struct perf_event *ev);
};
# 101 "./arch/powerpc/include/asm/perf_event_server.h"
extern int register_power_pmu(struct power_pmu *);

struct pt_regs;
extern unsigned long perf_misc_flags(struct pt_regs *regs);
extern unsigned long perf_instruction_pointer(struct pt_regs *regs);
extern unsigned long int read_bhrb(int n);
# 154 "./arch/powerpc/include/asm/perf_event_server.h"
extern ssize_t power_events_sysfs_show(struct device *dev,
    struct device_attribute *attr, char *page);
# 15 "./arch/powerpc/include/asm/perf_event.h" 2
# 43 "./arch/powerpc/include/asm/perf_event.h"
extern bool is_sier_available(void);
extern unsigned long get_pmcs_ext_regs(int idx);

extern u64 PERF_REG_EXTENDED_MASK;
# 26 "./include/linux/perf_event.h" 2
# 1 "./arch/powerpc/include/generated/asm/local64.h" 1
# 1 "./include/asm-generic/local64.h" 1
# 22 "./include/asm-generic/local64.h"
# 1 "./arch/powerpc/include/asm/local.h" 1
# 13 "./arch/powerpc/include/asm/local.h"
typedef struct
{
 long v;
} local_t;



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long local_read(const local_t *l)
{
 return ({ do { extern void __compiletime_assert_247(void) ; if (!((sizeof(l->v) == sizeof(char) || sizeof(l->v) == sizeof(short) || sizeof(l->v) == sizeof(int) || sizeof(l->v) == sizeof(long)) || sizeof(l->v) == sizeof(long long))) __compiletime_assert_247(); } while (0); (*(const volatile typeof( _Generic((l->v), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (l->v))) *)&(l->v)); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_set(local_t *l, long i)
{
 do { do { extern void __compiletime_assert_248(void) ; if (!((sizeof(l->v) == sizeof(char) || sizeof(l->v) == sizeof(short) || sizeof(l->v) == sizeof(int) || sizeof(l->v) == sizeof(long)) || sizeof(l->v) == sizeof(long long))) __compiletime_assert_248(); } while (0); do { *(volatile typeof(l->v) *)&(l->v) = (i); } while (0); } while (0);
}
# 57 "./arch/powerpc/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_add(long i, local_t *l) { unsigned long flags; do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = irq_soft_mask_or_return(1 | 2); } while(0); } while(0); l->v += i; do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while(0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long local_add_return(long a, local_t *l) { long t; unsigned long flags; do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = irq_soft_mask_or_return(1 | 2); } while(0); } while(0); t = (l->v += a); do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while(0); } while (0); return t; }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_sub(long i, local_t *l) { unsigned long flags; do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = irq_soft_mask_or_return(1 | 2); } while(0); } while(0); l->v -= i; do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while(0); } while (0); } static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long local_sub_return(long a, local_t *l) { long t; unsigned long flags; do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = irq_soft_mask_or_return(1 | 2); } while(0); } while(0); t = (l->v -= a); do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while(0); } while (0); return t; }
# 79 "./arch/powerpc/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long local_cmpxchg(local_t *l, long o, long n)
{
 long t;
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = irq_soft_mask_or_return(1 | 2); } while(0); } while(0);
 t = l->v;
 if (t == o)
  l->v = n;
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while(0); } while (0);

 return t;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long local_xchg(local_t *l, long n)
{
 long t;
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = irq_soft_mask_or_return(1 | 2); } while(0); } while(0);
 t = l->v;
 l->v = n;
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while(0); } while (0);

 return t;
}
# 115 "./arch/powerpc/include/asm/local.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int local_add_unless(local_t *l, long a, long u)
{
 unsigned long flags;
 int ret = 0;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = irq_soft_mask_or_return(1 | 2); } while(0); } while(0);
 if (l->v != u) {
  l->v += a;
  ret = 1;
 }
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while(0); } while (0);

 return ret;
}
# 23 "./include/asm-generic/local64.h" 2

typedef struct {
 local_t a;
} local64_t;
# 2 "./arch/powerpc/include/generated/asm/local64.h" 2
# 27 "./include/linux/perf_event.h" 2


struct perf_guest_info_callbacks {
 int (*is_in_guest)(void);
 int (*is_user_mode)(void);
 unsigned long (*get_guest_ip)(void);
 void (*handle_intel_pt_intr)(void);
};
# 49 "./include/linux/perf_event.h"
# 1 "./include/linux/ftrace.h" 1
# 10 "./include/linux/ftrace.h"
# 1 "./include/linux/trace_recursion.h" 1




# 1 "./include/linux/interrupt.h" 1
# 20 "./include/linux/interrupt.h"
# 1 "./arch/powerpc/include/asm/irq.h" 1
# 21 "./include/linux/interrupt.h" 2
# 1 "./arch/powerpc/include/asm/sections.h" 1
# 11 "./arch/powerpc/include/asm/sections.h"
# 1 "./include/asm-generic/sections.h" 1
# 35 "./include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];
extern char __start_once[], __end_once[];


extern char __ctors_start[], __ctors_end[];


extern char __start_opd[], __end_opd[];


extern char __noinstr_text_start[], __noinstr_text_end[];

extern const void __nosave_begin, __nosave_end;
# 70 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_text(unsigned long addr)
{
 return 0;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_data(unsigned long addr)
{
 return 0;
}
# 108 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 125 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 142 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 156 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 169 "./include/asm-generic/sections.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_rodata(unsigned long addr)
{
 return addr >= (unsigned long)__start_rodata &&
        addr < (unsigned long)__end_rodata;
}
# 12 "./arch/powerpc/include/asm/sections.h" 2

extern bool init_mem_is_free;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_initmem_freed(unsigned long addr)
{
 if (!init_mem_is_free)
  return 0;

 return addr >= (unsigned long)__init_begin &&
  addr < (unsigned long)__init_end;
}

extern char __head_end[];



extern char __start_interrupts[];
extern char __end_interrupts[];

extern char __prom_init_toc_start[];
extern char __prom_init_toc_end[];


extern char start_real_trampolines[];
extern char end_real_trampolines[];
extern char start_virt_trampolines[];
extern char end_virt_trampolines[];


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kernel_toc_addr(void)
{

 extern unsigned long __toc_start;





 return (unsigned long)(&__toc_start) + 0x8000UL;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int overlaps_interrupt_vector_text(unsigned long start,
       unsigned long end)
{
 unsigned long real_start, real_end;
 real_start = __start_interrupts - _stext;
 real_end = __end_interrupts - _stext;

 return start < (unsigned long)({ do { } while (0); (void *)(unsigned long)((phys_addr_t)(real_end) | 0xc000000000000000UL); }) &&
  (unsigned long)({ do { } while (0); (void *)(unsigned long)((phys_addr_t)(real_start) | 0xc000000000000000UL); }) < end;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int overlaps_kernel_text(unsigned long start, unsigned long end)
{
 return start < (unsigned long)__init_end &&
  (unsigned long)_stext < end;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dereference_function_descriptor(void *ptr)
{
 struct ppc64_opd_entry *desc = ptr;
 void *p;

 if (!({ const typeof(p) *__gk_ptr = ((void *)&desc->funcaddr); copy_from_kernel_nofault(&(p), __gk_ptr, sizeof(p));}))
  ptr = p;
 return ptr;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dereference_kernel_function_descriptor(void *ptr)
{
 if (ptr < (void *)__start_opd || ptr >= (void *)__end_opd)
  return ptr;

 return dereference_function_descriptor(ptr);
}
# 22 "./include/linux/interrupt.h" 2
# 95 "./include/linux/interrupt.h"
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
# 118 "./include/linux/interrupt.h"
struct irqaction {
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 struct irqaction *secondary;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 const char *name;
 struct proc_dir_entry *dir;
} __attribute__((__aligned__(1 << (7))));

extern irqreturn_t no_action(int cpl, void *dev_id);
# 146 "./include/linux/interrupt.h"
extern int __attribute__((__warn_unused_result__))
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, const char *name, void *dev);
# 164 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev)
{
 return request_threaded_irq(irq, handler, ((void *)0), flags, name, dev);
}

extern int __attribute__((__warn_unused_result__))
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, const char *name, void *dev_id);

extern int __attribute__((__warn_unused_result__))
__request_percpu_irq(unsigned int irq, irq_handler_t handler,
       unsigned long flags, const char *devname,
       void *percpu_dev_id);

extern int __attribute__((__warn_unused_result__))
request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     const char *devname, void *percpu_dev_id)
{
 return __request_percpu_irq(irq, handler, 0,
        devname, percpu_dev_id);
}

extern int __attribute__((__warn_unused_result__))
request_percpu_nmi(unsigned int irq, irq_handler_t handler,
     const char *devname, void *dev);

extern const void *free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

extern const void *free_nmi(unsigned int irq, void *dev_id);
extern void free_percpu_nmi(unsigned int irq, void *percpu_dev_id);

struct device;

extern int __attribute__((__warn_unused_result__))
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, const char *devname,
     void *dev_id);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, const char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, ((void *)0), irqflags,
      devname, dev_id);
}

extern int __attribute__((__warn_unused_result__))
devm_request_any_context_irq(struct device *dev, unsigned int irq,
   irq_handler_t handler, unsigned long irqflags,
   const char *devname, void *dev_id);

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
# 243 "./include/linux/interrupt.h"
bool irq_has_action(unsigned int irq);
extern void disable_irq_nosync(unsigned int irq);
extern bool disable_hardirq(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);
extern bool irq_percpu_is_enabled(unsigned int irq);
extern void irq_wake_thread(unsigned int irq, void *dev_id);

extern void disable_nmi_nosync(unsigned int irq);
extern void disable_percpu_nmi(unsigned int irq);
extern void enable_nmi(unsigned int irq);
extern void enable_percpu_nmi(unsigned int irq, unsigned int type);
extern int prepare_percpu_nmi(unsigned int irq);
extern void teardown_percpu_nmi(unsigned int irq);

extern int irq_inject_interrupt(unsigned int irq);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);
extern void rearm_wake_irq(unsigned int irq);
# 279 "./include/linux/interrupt.h"
struct irq_affinity_notify {
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
 void (*release)(struct kref *ref);
};
# 303 "./include/linux/interrupt.h"
struct irq_affinity {
 unsigned int pre_vectors;
 unsigned int post_vectors;
 unsigned int nr_sets;
 unsigned int set_size[4];
 void (*calc_sets)(struct irq_affinity *, unsigned int nvecs);
 void *priv;
};






struct irq_affinity_desc {
 struct cpumask mask;
 unsigned int is_managed : 1;
};



extern cpumask_var_t irq_default_affinity;

extern int irq_set_affinity(unsigned int irq, const struct cpumask *cpumask);
extern int irq_force_affinity(unsigned int irq, const struct cpumask *cpumask);

extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);

extern int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m);
extern int irq_update_affinity_desc(unsigned int irq,
        struct irq_affinity_desc *affinity);

extern int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);

struct irq_affinity_desc *
irq_create_affinity_masks(unsigned int nvec, struct irq_affinity *affd);

unsigned int irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
           const struct irq_affinity *affd);
# 408 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}




enum irqchip_irq_state {
 IRQCHIP_STATE_PENDING,
 IRQCHIP_STATE_ACTIVE,
 IRQCHIP_STATE_MASKED,
 IRQCHIP_STATE_LINE_LEVEL,
};

extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool *state);
extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool state);





extern struct static_key_false force_irqthreads_key;
# 515 "./include/linux/interrupt.h"
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 IRQ_POLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,
 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern const char * const softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
 void (*action)(struct softirq_action *);
};

           void do_softirq(void);
           void __do_softirq(void);

extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_249(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_249(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 2: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_250(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_250(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 4: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_251(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_251(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 8: pscr_ret__ = ({ typeof(ksoftirqd) __ret; if ((sizeof(ksoftirqd) == sizeof(char) || sizeof(ksoftirqd) == sizeof(short) || sizeof(ksoftirqd) == sizeof(int) || sizeof(ksoftirqd) == sizeof(long))) __ret = ({ typeof(ksoftirqd) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_252(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_252(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(ksoftirqd) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 587 "./include/linux/interrupt.h"
struct tasklet_struct
{
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 bool use_callback;
 union {
  void (*func)(unsigned long data);
  void (*callback)(struct tasklet_struct *t);
 };
 unsigned long data;
};
# 629 "./include/linux/interrupt.h"
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

void tasklet_unlock(struct tasklet_struct *t);
void tasklet_unlock_wait(struct tasklet_struct *t);
void tasklet_unlock_spin_wait(struct tasklet_struct *t);
# 652 "./include/linux/interrupt.h"
extern void __tasklet_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable_nosync(struct tasklet_struct *t)
{
 atomic_inc(&t->count);
 __asm__ __volatile__ ("sync" : : : "memory");
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable_in_atomic(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_spin_wait(t);
 __asm__ __volatile__ ("sync" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 __asm__ __volatile__ ("sync" : : : "memory");
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__ ("sync" : : : "memory");
 atomic_dec(&t->count);
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);
extern void tasklet_setup(struct tasklet_struct *t,
     void (*callback)(struct tasklet_struct *));
# 733 "./include/linux/interrupt.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long probe_irq_on(void)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int probe_irq_off(unsigned long val)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int probe_irq_mask(unsigned long val)
{
 return 0;
}
# 753 "./include/linux/interrupt.h"
extern void init_irq_proc(void);
# 766 "./include/linux/interrupt.h"
struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);
# 6 "./include/linux/trace_recursion.h" 2
# 37 "./include/linux/trace_recursion.h"
enum {

 TRACE_FTRACE_BIT,
 TRACE_FTRACE_NMI_BIT,
 TRACE_FTRACE_IRQ_BIT,
 TRACE_FTRACE_SIRQ_BIT,


 TRACE_INTERNAL_BIT,
 TRACE_INTERNAL_NMI_BIT,
 TRACE_INTERNAL_IRQ_BIT,
 TRACE_INTERNAL_SIRQ_BIT,

 TRACE_BRANCH_BIT,







 TRACE_IRQ_BIT,


 TRACE_GRAPH_BIT,
# 79 "./include/linux/trace_recursion.h"
 TRACE_GRAPH_DEPTH_START_BIT,
 TRACE_GRAPH_DEPTH_END_BIT,






 TRACE_GRAPH_NOTRACE_BIT,





 TRACE_TRANSITION_BIT,


 TRACE_RECORD_RECURSION_BIT,
};
# 130 "./include/linux/trace_recursion.h"
enum {
 TRACE_CTX_NMI,
 TRACE_CTX_IRQ,
 TRACE_CTX_SOFTIRQ,
 TRACE_CTX_NORMAL,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int trace_get_context_bit(void)
{
 unsigned long pc = preempt_count();

 if (!(pc & ((((1UL << (4))-1) << (((0 + 8) + 8) + 4)) | (((1UL << (4))-1) << ((0 + 8) + 8)) | (1UL << (0 + 8)))))
  return TRACE_CTX_NORMAL;
 else
  return pc & (((1UL << (4))-1) << (((0 + 8) + 8) + 4)) ? TRACE_CTX_NMI :
   pc & (((1UL << (4))-1) << ((0 + 8) + 8)) ? TRACE_CTX_IRQ : TRACE_CTX_SOFTIRQ;
}
# 162 "./include/linux/trace_recursion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int trace_test_and_set_recursion(unsigned long ip, unsigned long pip,
       int start, int max)
{
 unsigned int val = ({ do { extern void __compiletime_assert_253(void) ; if (!((sizeof(get_current()->trace_recursion) == sizeof(char) || sizeof(get_current()->trace_recursion) == sizeof(short) || sizeof(get_current()->trace_recursion) == sizeof(int) || sizeof(get_current()->trace_recursion) == sizeof(long)) || sizeof(get_current()->trace_recursion) == sizeof(long long))) __compiletime_assert_253(); } while (0); (*(const volatile typeof( _Generic((get_current()->trace_recursion), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (get_current()->trace_recursion))) *)&(get_current()->trace_recursion)); });
 int bit;


 if ((val & ((1 << (TRACE_INTERNAL_BIT + 4)) - 1)) > max)
  return 0;

 bit = trace_get_context_bit() + start;
 if (__builtin_expect(!!(val & (1 << bit)), 0)) {




  bit = TRACE_TRANSITION_BIT;
  if (val & (1 << bit)) {
   do { } while (0);
   return -1;
  }
 } else {

  val &= ~(1 << TRACE_TRANSITION_BIT);
 }

 val |= 1 << bit;
 get_current()->trace_recursion = val;
 __asm__ __volatile__("": : :"memory");

 return bit + 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void trace_clear_recursion(int bit)
{
 if (!bit)
  return;

 __asm__ __volatile__("": : :"memory");
 bit--;
 do { (get_current())->trace_recursion &= ~(1<<(bit)); } while (0);
}
# 214 "./include/linux/trace_recursion.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int ftrace_test_recursion_trylock(unsigned long ip,
        unsigned long parent_ip)
{
 return trace_test_and_set_recursion(ip, parent_ip, TRACE_FTRACE_BIT, ((1 << (TRACE_FTRACE_BIT + 4)) - 1));
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ftrace_test_recursion_unlock(int bit)
{
 trace_clear_recursion(bit);
}
# 11 "./include/linux/ftrace.h" 2
# 1 "./include/linux/trace_clock.h" 1
# 16 "./include/linux/trace_clock.h"
# 1 "./arch/powerpc/include/asm/trace_clock.h" 1
# 13 "./arch/powerpc/include/asm/trace_clock.h"
extern u64 __attribute__((__no_instrument_function__)) trace_clock_ppc_tb(void);
# 17 "./include/linux/trace_clock.h" 2

extern u64 __attribute__((__no_instrument_function__)) trace_clock_local(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock_jiffies(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock_global(void);
extern u64 __attribute__((__no_instrument_function__)) trace_clock_counter(void);
# 12 "./include/linux/ftrace.h" 2
# 1 "./include/linux/kallsyms.h" 1
# 10 "./include/linux/kallsyms.h"
# 1 "./include/linux/buildid.h" 1








int build_id_parse(struct vm_area_struct *vma, unsigned char *build_id,
     __u32 *size);
int build_id_parse_buf(const void *buf, unsigned char *build_id, u32 buf_size);


extern unsigned char vmlinux_build_id[20];
void init_vmlinux_build_id(void);
# 11 "./include/linux/kallsyms.h" 2



# 1 "./include/linux/module.h" 1
# 17 "./include/linux/module.h"
# 1 "./include/linux/kmod.h" 1








# 1 "./include/linux/umh.h" 1
# 11 "./include/linux/umh.h"
struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} ;

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 10 "./include/linux/kmod.h" 2
# 20 "./include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((__format__(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 18 "./include/linux/module.h" 2




# 1 "./include/linux/moduleparam.h" 1
# 36 "./include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 304 "./include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 372 "./include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 382 "./include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 411 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);
int param_set_uint_minmax(const char *val, const struct kernel_param *kp,
  unsigned int min, unsigned int max);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_hexint;
extern int param_set_hexint(const char *val, const struct kernel_param *kp);
extern int param_get_hexint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 526 "./include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 587 "./include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 23 "./include/linux/module.h" 2


# 1 "./include/linux/rbtree_latch.h" 1
# 40 "./include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_latch_t seq;
 struct rb_root tree[2];
};
# 64 "./include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); do { extern void __compiletime_assert_254(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) && !__builtin_types_compatible_p(typeof(*(node)), typeof(void))))) __compiletime_assert_254(); } while (0); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ do { extern void __compiletime_assert_255(void) ; if (!((sizeof(ltr->tree[idx].rb_node) == sizeof(char) || sizeof(ltr->tree[idx].rb_node) == sizeof(short) || sizeof(ltr->tree[idx].rb_node) == sizeof(int) || sizeof(ltr->tree[idx].rb_node) == sizeof(long)) || sizeof(ltr->tree[idx].rb_node) == sizeof(long long))) __compiletime_assert_255(); } while (0); (*(const volatile typeof( _Generic((ltr->tree[idx].rb_node), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (ltr->tree[idx].rb_node))) *)&(ltr->tree[idx].rb_node)); }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ do { extern void __compiletime_assert_256(void) ; if (!((sizeof(node->rb_left) == sizeof(char) || sizeof(node->rb_left) == sizeof(short) || sizeof(node->rb_left) == sizeof(int) || sizeof(node->rb_left) == sizeof(long)) || sizeof(node->rb_left) == sizeof(long long))) __compiletime_assert_256(); } while (0); (*(const volatile typeof( _Generic((node->rb_left), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_left))) *)&(node->rb_left)); }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ do { extern void __compiletime_assert_257(void) ; if (!((sizeof(node->rb_right) == sizeof(char) || sizeof(node->rb_right) == sizeof(short) || sizeof(node->rb_right) == sizeof(int) || sizeof(node->rb_right) == sizeof(long)) || sizeof(node->rb_right) == sizeof(long long))) __compiletime_assert_257(); } while (0); (*(const volatile typeof( _Generic((node->rb_right), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (node->rb_right))) *)&(node->rb_right)); }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 143 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 170 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 199 "./include/linux/rbtree_latch.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_latch_retry(&root->seq, seq));

 return node;
}
# 26 "./include/linux/module.h" 2
# 1 "./include/linux/error-injection.h" 1





# 1 "./include/asm-generic/error-injection.h" 1





enum {
 EI_ETYPE_NONE,
 EI_ETYPE_NULL,
 EI_ETYPE_ERRNO,
 EI_ETYPE_ERRNO_NULL,
 EI_ETYPE_TRUE,
};

struct error_injection_entry {
 unsigned long addr;
 int etype;
};

struct pt_regs;
# 34 "./include/asm-generic/error-injection.h"
void override_function_with_return(struct pt_regs *regs);
# 7 "./include/linux/error-injection.h" 2



extern bool within_error_injection_list(unsigned long addr);
extern int get_injectable_error_type(unsigned long addr);
# 27 "./include/linux/module.h" 2



# 1 "./include/linux/cfi.h" 1
# 31 "./include/linux/module.h" 2


# 1 "./arch/powerpc/include/asm/module.h" 1







# 1 "./include/asm-generic/module.h" 1
# 9 "./arch/powerpc/include/asm/module.h" 2
# 27 "./arch/powerpc/include/asm/module.h"
struct mod_arch_specific {

 unsigned int stubs_section;
 unsigned int toc_section;
 bool toc_fixed;


 unsigned long start_opd;
 unsigned long end_opd;







 unsigned long tramp;






 struct list_head bug_list;
 struct bug_entry *bug_table;
 unsigned int num_bugs;
};
# 76 "./arch/powerpc/include/asm/module.h"
int module_trampoline_target(struct module *mod, unsigned long trampoline,
        unsigned long *target);
int module_finalize_ftrace(struct module *mod, const Elf64_Shdr *sechdrs);
# 34 "./include/linux/module.h" 2



struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
};

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 295 "./include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 348 "./include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
 char *typetab;
};
# 364 "./include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];







 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;







 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
 bool using_gplonly_symbols;






 bool async_probe_requested;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << 7))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;

 void *noinstr_text_start;
 unsigned int noinstr_text_size;


 unsigned int num_tracepoints;
 tracepoint_ptr_t *tracepoints_ptrs;


 unsigned int num_srcu_structs;
 struct srcu_struct **srcu_struct_ptrs;


 unsigned int num_bpf_raw_events;
 struct bpf_raw_event_map *bpf_raw_events;






 struct jump_entry *jump_entries;
 unsigned int num_jump_entries;


 unsigned int num_trace_bprintk_fmt;
 const char **trace_bprintk_fmt_start;


 struct trace_event_call **trace_events;
 unsigned int num_trace_events;
 struct trace_eval_map **trace_evals;
 unsigned int num_trace_evals;


 unsigned int num_ftrace_callsites;
 unsigned long *ftrace_callsites;


 void *kprobes_text_start;
 unsigned int kprobes_text_size;
 unsigned long *kprobe_blacklist;
 unsigned int num_kprobe_blacklist;
# 521 "./include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;
# 538 "./include/linux/module.h"
 struct error_injection_entry *ei_funcs;
 unsigned int num_ei_funcs;

} __attribute__((__aligned__((1 << 7)))) ;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
{
 return sym->st_value;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 642 "./include/linux/module.h"
void *dereference_module_function_descriptor(struct module *mod, void *ptr);




const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, const unsigned char **modbuildid,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_livepatch_module(struct module *mod)
{
 return false;
}


bool is_module_sig_enforced(void);
void set_module_sig_enforced(void);
# 823 "./include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 835 "./include/linux/module.h"
void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 852 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}
# 864 "./include/linux/module.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_sig_ok(struct module *module)
{
 return true;
}


int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);
# 15 "./include/linux/kallsyms.h" 2
# 24 "./include/linux/kallsyms.h"
struct cred;
struct module;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel_inittext(unsigned long addr)
{
 if (addr >= (unsigned long)_sinittext
     && addr <= (unsigned long)_einittext)
  return 1;
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel_text(unsigned long addr)
{
 if ((addr >= (unsigned long)_stext && addr <= (unsigned long)_etext) ||
     arch_is_kernel_text(addr))
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_kernel(unsigned long addr)
{
 if (addr >= (unsigned long)_stext && addr <= (unsigned long)_end)
  return 1;
 return in_gate_area_no_mm(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_ksym_addr(unsigned long addr)
{
 if (0)
  return is_kernel(addr);

 return is_kernel_text(addr) || is_kernel_inittext(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dereference_symbol_descriptor(void *ptr)
{

 struct module *mod;

 ptr = dereference_kernel_function_descriptor(ptr);
 if (is_ksym_addr((unsigned long)ptr))
  return ptr;

 __asm__ __volatile__("": : :"memory");
 mod = __module_address((unsigned long)ptr);
 __asm__ __volatile__("": : :"memory");

 if (mod)
  ptr = dereference_module_function_descriptor(mod, ptr);

 return ptr;
}

int kallsyms_on_each_symbol(int (*fn)(void *, const char *, struct module *,
          unsigned long),
       void *data);



unsigned long kallsyms_lookup_name(const char *name);

extern int kallsyms_lookup_size_offset(unsigned long addr,
      unsigned long *symbolsize,
      unsigned long *offset);


const char *kallsyms_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, char *namebuf);


extern int sprint_symbol(char *buffer, unsigned long address);
extern int sprint_symbol_build_id(char *buffer, unsigned long address);
extern int sprint_symbol_no_offset(char *buffer, unsigned long address);
extern int sprint_backtrace(char *buffer, unsigned long address);
extern int sprint_backtrace_build_id(char *buffer, unsigned long address);

int lookup_symbol_name(unsigned long addr, char *symname);
int lookup_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);


extern bool kallsyms_show_value(const struct cred *cred);
# 177 "./include/linux/kallsyms.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_ip_sym(const char *loglvl, unsigned long ip)
{
 ({ do {} while (0); _printk("%s[<%px>] %pS\n", loglvl, (void *) ip, (void *) ip); });
}
# 13 "./include/linux/ftrace.h" 2
# 22 "./include/linux/ftrace.h"
# 1 "./arch/powerpc/include/asm/ftrace.h" 1
# 51 "./arch/powerpc/include/asm/ftrace.h"
extern void _mcount(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ftrace_call_adjust(unsigned long addr)
{

       return addr;
}

struct dyn_arch_ftrace {
 struct module *mod;
};
# 78 "./arch/powerpc/include/asm/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_syscall_match_sym_name(const char *sym, const char *name)
{

 return !strcmp(sym + 1, name) ||
  (!strncmp(sym, ".__se_sys", 9) && !strcmp(sym + 6, name)) ||
  (!strncmp(sym, ".ppc_", 5) && !strcmp(sym + 5, name + 4)) ||
  (!strncmp(sym, ".ppc32_", 7) && !strcmp(sym + 7, name + 4)) ||
  (!strncmp(sym, ".ppc64_", 7) && !strcmp(sym + 7, name + 4));
}
# 102 "./arch/powerpc/include/asm/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void this_cpu_disable_ftrace(void)
{
 local_paca->ftrace_enabled = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void this_cpu_enable_ftrace(void)
{
 local_paca->ftrace_enabled = 1;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void this_cpu_set_ftrace_enabled(u8 ftrace_enabled)
{
 local_paca->ftrace_enabled = ftrace_enabled;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 this_cpu_get_ftrace_enabled(void)
{
 return local_paca->ftrace_enabled;
}
# 23 "./include/linux/ftrace.h" 2
# 46 "./include/linux/ftrace.h"
void trace_init(void);
void early_trace_init(void);





struct module;
struct ftrace_hash;
struct ftrace_direct_func;



const char *
ftrace_mod_address_lookup(unsigned long addr, unsigned long *size,
     unsigned long *off, char **modname, char *sym);
# 72 "./include/linux/ftrace.h"
int ftrace_mod_get_kallsym(unsigned int symnum, unsigned long *value,
      char *type, char *name,
      char *module_name, int *exported);
# 86 "./include/linux/ftrace.h"
extern int ftrace_enabled;
extern int
ftrace_enable_sysctl(struct ctl_table *table, int write,
       void *buffer, size_t *lenp, loff_t *ppos);

struct ftrace_ops;



struct ftrace_regs {
 struct pt_regs regs;
};
# 109 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct pt_regs *ftrace_get_regs(struct ftrace_regs *fregs)
{
 if (!fregs)
  return ((void *)0);

 return (&(fregs)->regs);
}

typedef void (*ftrace_func_t)(unsigned long ip, unsigned long parent_ip,
         struct ftrace_ops *op, struct ftrace_regs *fregs);

ftrace_func_t ftrace_ops_get_func(struct ftrace_ops *ops);
# 178 "./include/linux/ftrace.h"
enum {
 FTRACE_OPS_FL_ENABLED = ((((1UL))) << (0)),
 FTRACE_OPS_FL_DYNAMIC = ((((1UL))) << (1)),
 FTRACE_OPS_FL_SAVE_REGS = ((((1UL))) << (2)),
 FTRACE_OPS_FL_SAVE_REGS_IF_SUPPORTED = ((((1UL))) << (3)),
 FTRACE_OPS_FL_RECURSION = ((((1UL))) << (4)),
 FTRACE_OPS_FL_STUB = ((((1UL))) << (5)),
 FTRACE_OPS_FL_INITIALIZED = ((((1UL))) << (6)),
 FTRACE_OPS_FL_DELETED = ((((1UL))) << (7)),
 FTRACE_OPS_FL_ADDING = ((((1UL))) << (8)),
 FTRACE_OPS_FL_REMOVING = ((((1UL))) << (9)),
 FTRACE_OPS_FL_MODIFYING = ((((1UL))) << (10)),
 FTRACE_OPS_FL_ALLOC_TRAMP = ((((1UL))) << (11)),
 FTRACE_OPS_FL_IPMODIFY = ((((1UL))) << (12)),
 FTRACE_OPS_FL_PID = ((((1UL))) << (13)),
 FTRACE_OPS_FL_RCU = ((((1UL))) << (14)),
 FTRACE_OPS_FL_TRACE_ARRAY = ((((1UL))) << (15)),
 FTRACE_OPS_FL_PERMANENT = ((((1UL))) << (16)),
 FTRACE_OPS_FL_DIRECT = ((((1UL))) << (17)),
};



struct ftrace_ops_hash {
 struct ftrace_hash *notrace_hash;
 struct ftrace_hash *filter_hash;
 struct mutex regex_lock;
};

void ftrace_free_init_mem(void);
void ftrace_free_mem(struct module *mod, void *start, void *end);
# 225 "./include/linux/ftrace.h"
struct ftrace_ops {
 ftrace_func_t func;
 struct ftrace_ops *next;
 unsigned long flags;
 void *private;
 ftrace_func_t saved_func;

 struct ftrace_ops_hash local_hash;
 struct ftrace_ops_hash *func_hash;
 struct ftrace_ops_hash old_hash;
 unsigned long trampoline;
 unsigned long trampoline_size;
 struct list_head list;

};

extern struct ftrace_ops *ftrace_ops_list;
extern struct ftrace_ops ftrace_list_end;
# 267 "./include/linux/ftrace.h"
enum ftrace_tracing_type_t {
 FTRACE_TYPE_ENTER = 0,
 FTRACE_TYPE_RETURN,
};


extern enum ftrace_tracing_type_t ftrace_tracing_type;
# 282 "./include/linux/ftrace.h"
int register_ftrace_function(struct ftrace_ops *ops);
int unregister_ftrace_function(struct ftrace_ops *ops);

extern void ftrace_stub(unsigned long a0, unsigned long a1,
   struct ftrace_ops *op, struct ftrace_regs *fregs);
# 300 "./include/linux/ftrace.h"
struct ftrace_func_entry {
 struct hlist_node hlist;
 unsigned long ip;
 unsigned long direct;
};

struct dyn_ftrace;
# 321 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_ftrace_direct(unsigned long ip, unsigned long addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_ftrace_direct(unsigned long ip, unsigned long addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int modify_ftrace_direct(unsigned long ip,
           unsigned long old_addr, unsigned long new_addr)
{
 return -524;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ftrace_direct_func *ftrace_find_direct_func(unsigned long addr)
{
 return ((void *)0);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ftrace_modify_direct_caller(struct ftrace_func_entry *entry,
           struct dyn_ftrace *rec,
           unsigned long old_addr,
           unsigned long new_addr)
{
 return -19;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ftrace_find_rec_direct(unsigned long ip)
{
 return 0;
}
# 365 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_ftrace_set_direct_caller(struct pt_regs *regs,
       unsigned long addr) { }




extern int stack_tracer_enabled;

int stack_trace_sysctl(struct ctl_table *table, int write, void *buffer,
         size_t *lenp, loff_t *ppos);


extern __attribute__((section(".data..percpu" ""))) __typeof__(int) disable_stack_tracer;
# 390 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void stack_tracer_disable(void)
{

 if (0)
  ({ int __ret_warn_on = !!(!preempt_count() || !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ftrace.h"), "i" (394), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 do { do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(disable_stack_tracer)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void stack_tracer_enable(void)
{
 if (0)
  ({ int __ret_warn_on = !!(!preempt_count() || !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/ftrace.h"), "i" (407), "i" ((1 << 0) | ((1 << 1) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 do { do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(disable_stack_tracer)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(disable_stack_tracer))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(disable_stack_tracer))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(disable_stack_tracer))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(disable_stack_tracer)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer))); (typeof((typeof(*(&(disable_stack_tracer))) *)(&(disable_stack_tracer)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(disable_stack_tracer))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}







int ftrace_arch_code_modify_prepare(void);
int ftrace_arch_code_modify_post_process(void);

enum ftrace_bug_type {
 FTRACE_BUG_UNKNOWN,
 FTRACE_BUG_INIT,
 FTRACE_BUG_NOP,
 FTRACE_BUG_CALL,
 FTRACE_BUG_UPDATE,
};
extern enum ftrace_bug_type ftrace_bug_type;





extern const void *ftrace_expected;

void ftrace_bug(int err, struct dyn_ftrace *rec);

struct seq_file;

extern int ftrace_text_reserved(const void *start, const void *end);

struct ftrace_ops *ftrace_ops_trampoline(unsigned long addr);

bool is_ftrace_trampoline(unsigned long addr);
# 465 "./include/linux/ftrace.h"
enum {
 FTRACE_FL_ENABLED = (1UL << 31),
 FTRACE_FL_REGS = (1UL << 30),
 FTRACE_FL_REGS_EN = (1UL << 29),
 FTRACE_FL_TRAMP = (1UL << 28),
 FTRACE_FL_TRAMP_EN = (1UL << 27),
 FTRACE_FL_IPMODIFY = (1UL << 26),
 FTRACE_FL_DISABLED = (1UL << 25),
 FTRACE_FL_DIRECT = (1UL << 24),
 FTRACE_FL_DIRECT_EN = (1UL << 23),
};






struct dyn_ftrace {
 unsigned long ip;
 unsigned long flags;
 struct dyn_arch_ftrace arch;
};

int ftrace_set_filter_ip(struct ftrace_ops *ops, unsigned long ip,
    int remove, int reset);
int ftrace_set_filter(struct ftrace_ops *ops, unsigned char *buf,
         int len, int reset);
int ftrace_set_notrace(struct ftrace_ops *ops, unsigned char *buf,
   int len, int reset);
void ftrace_set_global_filter(unsigned char *buf, int len, int reset);
void ftrace_set_global_notrace(unsigned char *buf, int len, int reset);
void ftrace_free_filter(struct ftrace_ops *ops);
void ftrace_ops_set_global_filter(struct ftrace_ops *ops);

enum {
 FTRACE_UPDATE_CALLS = (1 << 0),
 FTRACE_DISABLE_CALLS = (1 << 1),
 FTRACE_UPDATE_TRACE_FUNC = (1 << 2),
 FTRACE_START_FUNC_RET = (1 << 3),
 FTRACE_STOP_FUNC_RET = (1 << 4),
 FTRACE_MAY_SLEEP = (1 << 5),
};
# 519 "./include/linux/ftrace.h"
enum {
 FTRACE_UPDATE_IGNORE,
 FTRACE_UPDATE_MAKE_CALL,
 FTRACE_UPDATE_MODIFY_CALL,
 FTRACE_UPDATE_MAKE_NOP,
};

enum {
 FTRACE_ITER_FILTER = (1 << 0),
 FTRACE_ITER_NOTRACE = (1 << 1),
 FTRACE_ITER_PRINTALL = (1 << 2),
 FTRACE_ITER_DO_PROBES = (1 << 3),
 FTRACE_ITER_PROBE = (1 << 4),
 FTRACE_ITER_MOD = (1 << 5),
 FTRACE_ITER_ENABLED = (1 << 6),
};

void arch_ftrace_update_code(int command);
void arch_ftrace_update_trampoline(struct ftrace_ops *ops);
void *arch_ftrace_trampoline_func(struct ftrace_ops *ops, struct dyn_ftrace *rec);
void arch_ftrace_trampoline_free(struct ftrace_ops *ops);

struct ftrace_rec_iter;

struct ftrace_rec_iter *ftrace_rec_iter_start(void);
struct ftrace_rec_iter *ftrace_rec_iter_next(struct ftrace_rec_iter *iter);
struct dyn_ftrace *ftrace_rec_iter_record(struct ftrace_rec_iter *iter);







int ftrace_update_record(struct dyn_ftrace *rec, bool enable);
int ftrace_test_record(struct dyn_ftrace *rec, bool enable);
void ftrace_run_stop_machine(int command);
unsigned long ftrace_location(unsigned long ip);
unsigned long ftrace_location_range(unsigned long start, unsigned long end);
unsigned long ftrace_get_addr_new(struct dyn_ftrace *rec);
unsigned long ftrace_get_addr_curr(struct dyn_ftrace *rec);

extern ftrace_func_t ftrace_trace_function;

int ftrace_regex_open(struct ftrace_ops *ops, int flag,
    struct inode *inode, struct file *file);
ssize_t ftrace_filter_write(struct file *file, const char *ubuf,
       size_t cnt, loff_t *ppos);
ssize_t ftrace_notrace_write(struct file *file, const char *ubuf,
        size_t cnt, loff_t *ppos);
int ftrace_regex_release(struct inode *inode, struct file *file);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi")))
ftrace_set_early_filter(struct ftrace_ops *ops, char *buf, int enable);


extern int ftrace_ip_converted(unsigned long ip);
extern int ftrace_dyn_arch_init(void);
extern void ftrace_replace_code(int enable);
extern int ftrace_update_ftrace_func(ftrace_func_t func);
extern void ftrace_caller(void);
extern void ftrace_regs_caller(void);
extern void ftrace_call(void);
extern void ftrace_regs_call(void);
extern void mcount_call(void);

void ftrace_modify_all_code(int command);
# 614 "./include/linux/ftrace.h"
extern void ftrace_graph_caller(void);
extern int ftrace_enable_ftrace_graph_caller(void);
extern int ftrace_disable_ftrace_graph_caller(void);
# 643 "./include/linux/ftrace.h"
extern int ftrace_make_nop(struct module *mod,
      struct dyn_ftrace *rec, unsigned long addr);
# 685 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ftrace_init_nop(struct module *mod, struct dyn_ftrace *rec)
{
 return ftrace_make_nop(mod, rec, ((unsigned long)(_mcount)));
}
# 711 "./include/linux/ftrace.h"
extern int ftrace_make_call(struct dyn_ftrace *rec, unsigned long addr);
# 739 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ftrace_modify_call(struct dyn_ftrace *rec, unsigned long old_addr,
         unsigned long addr)
{
 return -22;
}



extern int ftrace_arch_read_dyn_info(char *buf, int size);

extern int skip_trace(unsigned long ip);
extern void ftrace_module_init(struct module *mod);
extern void ftrace_module_enable(struct module *mod);
extern void ftrace_release_mod(struct module *mod);

extern void ftrace_disable_daemon(void);
extern void ftrace_enable_daemon(void);
# 799 "./include/linux/ftrace.h"
void ftrace_kill(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracer_disable(void)
{

 ftrace_enabled = 0;

}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ftrace_enabled_save(void)
{

 int saved_ftrace_enabled = ftrace_enabled;
 ftrace_enabled = 0;
 return saved_ftrace_enabled;



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ftrace_enabled_restore(int enabled)
{

 ftrace_enabled = enabled;

}
# 853 "./include/linux/ftrace.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_lock_parent_ip(void)
{
 unsigned long addr = ((unsigned long)__builtin_return_address(0));

 if (!in_lock_functions(addr))
  return addr;
 addr = ((unsigned long)0UL);
 if (!in_lock_functions(addr))
  return addr;
 return ((unsigned long)0UL);
}
# 878 "./include/linux/ftrace.h"
extern void ftrace_init(void);
# 893 "./include/linux/ftrace.h"
struct ftrace_graph_ent {
 unsigned long func;
 int depth;
} __attribute__((__packed__));






struct ftrace_graph_ret {
 unsigned long func;
 int depth;

 unsigned int overrun;
 unsigned long long calltime;
 unsigned long long rettime;
} __attribute__((__packed__));


typedef void (*trace_func_graph_ret_t)(struct ftrace_graph_ret *);
typedef int (*trace_func_graph_ent_t)(struct ftrace_graph_ent *);

extern int ftrace_graph_entry_stub(struct ftrace_graph_ent *trace);



struct fgraph_ops {
 trace_func_graph_ent_t entryfunc;
 trace_func_graph_ret_t retfunc;
};






struct ftrace_ret_stack {
 unsigned long ret;
 unsigned long func;
 unsigned long long calltime;







 unsigned long *retp;

};






extern void return_to_handler(void);

extern int
function_graph_enter(unsigned long ret, unsigned long func,
       unsigned long frame_pointer, unsigned long *retp);

struct ftrace_ret_stack *
ftrace_graph_get_ret_stack(struct task_struct *task, int idx);

unsigned long ftrace_graph_ret_addr(struct task_struct *task, int *idx,
        unsigned long ret, unsigned long *retp);
# 972 "./include/linux/ftrace.h"
extern int register_ftrace_graph(struct fgraph_ops *ops);
extern void unregister_ftrace_graph(struct fgraph_ops *ops);

extern bool ftrace_graph_is_dead(void);
extern void ftrace_graph_stop(void);


extern trace_func_graph_ret_t ftrace_graph_return;
extern trace_func_graph_ent_t ftrace_graph_entry;

extern void ftrace_graph_init_task(struct task_struct *t);
extern void ftrace_graph_exit_task(struct task_struct *t);
extern void ftrace_graph_init_idle_task(struct task_struct *t, int cpu);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pause_graph_tracing(void)
{
 atomic_inc(&get_current()->tracing_graph_pause);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unpause_graph_tracing(void)
{
 atomic_dec(&get_current()->tracing_graph_pause);
}
# 1021 "./include/linux/ftrace.h"
enum {
 TSK_TRACE_FL_TRACE_BIT = 0,
 TSK_TRACE_FL_GRAPH_BIT = 1,
};
enum {
 TSK_TRACE_FL_TRACE = 1 << TSK_TRACE_FL_TRACE_BIT,
 TSK_TRACE_FL_GRAPH = 1 << TSK_TRACE_FL_GRAPH_BIT,
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_trace_trace(struct task_struct *tsk)
{
 set_bit(TSK_TRACE_FL_TRACE_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_trace_trace(struct task_struct *tsk)
{
 clear_bit(TSK_TRACE_FL_TRACE_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_trace_trace(struct task_struct *tsk)
{
 return tsk->trace & TSK_TRACE_FL_TRACE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_trace_graph(struct task_struct *tsk)
{
 set_bit(TSK_TRACE_FL_GRAPH_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_trace_graph(struct task_struct *tsk)
{
 clear_bit(TSK_TRACE_FL_GRAPH_BIT, &tsk->trace);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_trace_graph(struct task_struct *tsk)
{
 return tsk->trace & TSK_TRACE_FL_GRAPH;
}

enum ftrace_dump_mode;

extern enum ftrace_dump_mode ftrace_dump_on_oops;
extern int tracepoint_printk;

extern void disable_trace_on_warning(void);
extern int __disable_trace_on_warning;

int tracepoint_printk_sysctl(struct ctl_table *table, int write,
        void *buffer, size_t *lenp, loff_t *ppos);







unsigned long arch_syscall_addr(int nr);
# 50 "./include/linux/perf_event.h" 2

# 1 "./include/linux/irq_work.h" 1
# 16 "./include/linux/irq_work.h"
struct irq_work {
 struct __call_single_node node;
 void (*func)(struct irq_work *);
};
# 33 "./include/linux/irq_work.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void init_irq_work(struct irq_work *work, void (*func)(struct irq_work *))
{
 *work = (struct irq_work){ .node = { .u_flags = (0), }, .func = (func), };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_work_is_pending(struct irq_work *work)
{
 return atomic_read(&work->node.a_flags) & IRQ_WORK_PENDING;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_work_is_busy(struct irq_work *work)
{
 return atomic_read(&work->node.a_flags) & IRQ_WORK_BUSY;
}

bool irq_work_queue(struct irq_work *work);
bool irq_work_queue_on(struct irq_work *work, int cpu);

void irq_work_tick(void);
void irq_work_sync(struct irq_work *work);


# 1 "./arch/powerpc/include/asm/irq_work.h" 1




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_irq_work_has_interrupt(void)
{
 return true;
}
extern void arch_irq_work_raise(void);
# 57 "./include/linux/irq_work.h" 2

void irq_work_run(void);
bool irq_work_needs_cpu(void);
void irq_work_single(void *arg);
# 52 "./include/linux/perf_event.h" 2
# 1 "./include/linux/static_key.h" 1
# 53 "./include/linux/perf_event.h" 2
# 1 "./include/linux/jump_label_ratelimit.h" 1








struct static_key_deferred {
 struct static_key key;
 unsigned long timeout;
 struct delayed_work work;
};

struct static_key_true_deferred {
 struct static_key_true key;
 unsigned long timeout;
 struct delayed_work work;
};

struct static_key_false_deferred {
 struct static_key_false key;
 unsigned long timeout;
 struct delayed_work work;
};
# 35 "./include/linux/jump_label_ratelimit.h"
extern void
__static_key_slow_dec_deferred(struct static_key *key,
          struct delayed_work *work,
          unsigned long timeout);
extern void __static_key_deferred_flush(void *key, struct delayed_work *work);
extern void
jump_label_rate_limit(struct static_key_deferred *key, unsigned long rl);

extern void jump_label_update_timeout(struct work_struct *work);
# 54 "./include/linux/perf_event.h" 2


# 1 "./include/linux/perf_regs.h" 1




# 1 "./include/linux/sched/task_stack.h" 1
# 10 "./include/linux/sched/task_stack.h"
# 1 "./include/uapi/linux/magic.h" 1
# 11 "./include/linux/sched/task_stack.h" 2








static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *task_stack_page(const struct task_struct *task)
{
 return task->stack;
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *end_of_stack(const struct task_struct *task)
{
 return task->stack;
}
# 62 "./include/linux/sched/task_stack.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *try_get_task_stack(struct task_struct *tsk)
{
 return refcount_inc_not_zero(&tsk->stack_refcount) ?
  task_stack_page(tsk) : ((void *)0);
}

extern void put_task_stack(struct task_struct *tsk);
# 81 "./include/linux/sched/task_stack.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int object_is_on_stack(const void *obj)
{
 void *stack = task_stack_page(get_current());

 return (obj >= stack) && (obj < (stack + (1 << 14)));
}

extern void thread_stack_cache_init(void);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long stack_not_used(struct task_struct *p)
{
 unsigned long *n = end_of_stack(p);

 do {



  n++;

 } while (!*n);




 return (unsigned long)n - (unsigned long)end_of_stack(p);

}

extern void set_task_stack_end_magic(struct task_struct *tsk);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & ((1 << 14)-sizeof(void*)));
}
# 6 "./include/linux/perf_regs.h" 2

struct perf_regs {
 __u64 abi;
 struct pt_regs *regs;
};


# 1 "./arch/powerpc/include/uapi/asm/perf_regs.h" 1




enum perf_event_powerpc_regs {
 PERF_REG_POWERPC_R0,
 PERF_REG_POWERPC_R1,
 PERF_REG_POWERPC_R2,
 PERF_REG_POWERPC_R3,
 PERF_REG_POWERPC_R4,
 PERF_REG_POWERPC_R5,
 PERF_REG_POWERPC_R6,
 PERF_REG_POWERPC_R7,
 PERF_REG_POWERPC_R8,
 PERF_REG_POWERPC_R9,
 PERF_REG_POWERPC_R10,
 PERF_REG_POWERPC_R11,
 PERF_REG_POWERPC_R12,
 PERF_REG_POWERPC_R13,
 PERF_REG_POWERPC_R14,
 PERF_REG_POWERPC_R15,
 PERF_REG_POWERPC_R16,
 PERF_REG_POWERPC_R17,
 PERF_REG_POWERPC_R18,
 PERF_REG_POWERPC_R19,
 PERF_REG_POWERPC_R20,
 PERF_REG_POWERPC_R21,
 PERF_REG_POWERPC_R22,
 PERF_REG_POWERPC_R23,
 PERF_REG_POWERPC_R24,
 PERF_REG_POWERPC_R25,
 PERF_REG_POWERPC_R26,
 PERF_REG_POWERPC_R27,
 PERF_REG_POWERPC_R28,
 PERF_REG_POWERPC_R29,
 PERF_REG_POWERPC_R30,
 PERF_REG_POWERPC_R31,
 PERF_REG_POWERPC_NIP,
 PERF_REG_POWERPC_MSR,
 PERF_REG_POWERPC_ORIG_R3,
 PERF_REG_POWERPC_CTR,
 PERF_REG_POWERPC_LINK,
 PERF_REG_POWERPC_XER,
 PERF_REG_POWERPC_CCR,
 PERF_REG_POWERPC_SOFTE,
 PERF_REG_POWERPC_TRAP,
 PERF_REG_POWERPC_DAR,
 PERF_REG_POWERPC_DSISR,
 PERF_REG_POWERPC_SIER,
 PERF_REG_POWERPC_MMCRA,

 PERF_REG_POWERPC_MMCR0,
 PERF_REG_POWERPC_MMCR1,
 PERF_REG_POWERPC_MMCR2,
 PERF_REG_POWERPC_MMCR3,
 PERF_REG_POWERPC_SIER2,
 PERF_REG_POWERPC_SIER3,
 PERF_REG_POWERPC_PMC1,
 PERF_REG_POWERPC_PMC2,
 PERF_REG_POWERPC_PMC3,
 PERF_REG_POWERPC_PMC4,
 PERF_REG_POWERPC_PMC5,
 PERF_REG_POWERPC_PMC6,

 PERF_REG_POWERPC_MAX = PERF_REG_POWERPC_MMCRA + 1,
};
# 14 "./include/linux/perf_regs.h" 2





u64 perf_reg_value(struct pt_regs *regs, int idx);
int perf_reg_validate(u64 mask);
u64 perf_reg_abi(struct task_struct *task);
void perf_get_regs_user(struct perf_regs *regs_user,
   struct pt_regs *regs);
# 57 "./include/linux/perf_event.h" 2
# 1 "./include/linux/cgroup.h" 1
# 16 "./include/linux/cgroup.h"
# 1 "./include/uapi/linux/cgroupstats.h" 1
# 20 "./include/uapi/linux/cgroupstats.h"
# 1 "./include/uapi/linux/taskstats.h" 1
# 41 "./include/uapi/linux/taskstats.h"
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 72 "./include/uapi/linux/taskstats.h"
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;

 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 132 "./include/uapi/linux/taskstats.h"
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;


 __u64 thrashing_count;
 __u64 thrashing_delay_total;


 __u64 ac_btime64;
};
# 184 "./include/uapi/linux/taskstats.h"
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 21 "./include/uapi/linux/cgroupstats.h" 2
# 32 "./include/uapi/linux/cgroupstats.h"
struct cgroupstats {
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
# 17 "./include/linux/cgroup.h" 2







# 1 "./include/linux/user_namespace.h" 1
# 17 "./include/linux/user_namespace.h"
struct uid_gid_extent {
 u32 first;
 u32 lower_first;
 u32 count;
};

struct uid_gid_map {
 u32 nr_extents;
 union {
  struct uid_gid_extent extent[5];
  struct {
   struct uid_gid_extent *forward;
   struct uid_gid_extent *reverse;
  };
 };
};





struct ucounts;

enum ucount_type {
 UCOUNT_USER_NAMESPACES,
 UCOUNT_PID_NAMESPACES,
 UCOUNT_UTS_NAMESPACES,
 UCOUNT_IPC_NAMESPACES,
 UCOUNT_NET_NAMESPACES,
 UCOUNT_MNT_NAMESPACES,
 UCOUNT_CGROUP_NAMESPACES,
 UCOUNT_TIME_NAMESPACES,

 UCOUNT_INOTIFY_INSTANCES,
 UCOUNT_INOTIFY_WATCHES,





 UCOUNT_RLIMIT_NPROC,
 UCOUNT_RLIMIT_MSGQUEUE,
 UCOUNT_RLIMIT_SIGPENDING,
 UCOUNT_RLIMIT_MEMLOCK,
 UCOUNT_COUNTS,
};



struct user_namespace {
 struct uid_gid_map uid_map;
 struct uid_gid_map gid_map;
 struct uid_gid_map projid_map;
 struct user_namespace *parent;
 int level;
 kuid_t owner;
 kgid_t group;
 struct ns_common ns;
 unsigned long flags;


 bool parent_could_setfcap;







 struct list_head keyring_name_list;
 struct key *user_keyring_register;
 struct rw_semaphore keyring_sem;






 struct work_struct work;

 struct ctl_table_set set;
 struct ctl_table_header *sysctls;

 struct ucounts *ucounts;
 long ucount_max[UCOUNT_COUNTS];
} ;

struct ucounts {
 struct hlist_node node;
 struct user_namespace *ns;
 kuid_t uid;
 atomic_t count;
 atomic_long_t ucount[UCOUNT_COUNTS];
};

extern struct user_namespace init_user_ns;
extern struct ucounts init_ucounts;

bool setup_userns_sysctls(struct user_namespace *ns);
void retire_userns_sysctls(struct user_namespace *ns);
struct ucounts *inc_ucount(struct user_namespace *ns, kuid_t uid, enum ucount_type type);
void dec_ucount(struct ucounts *ucounts, enum ucount_type type);
struct ucounts *alloc_ucounts(struct user_namespace *ns, kuid_t uid);
struct ucounts * __attribute__((__warn_unused_result__)) get_ucounts(struct ucounts *ucounts);
void put_ucounts(struct ucounts *ucounts);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long get_ucounts_value(struct ucounts *ucounts, enum ucount_type type)
{
 return atomic_long_read(&ucounts->ucount[type]);
}

long inc_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
bool dec_rlimit_ucounts(struct ucounts *ucounts, enum ucount_type type, long v);
bool is_ucounts_overlimit(struct ucounts *ucounts, enum ucount_type type, unsigned long max);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_rlimit_ucount_max(struct user_namespace *ns,
  enum ucount_type type, unsigned long max)
{
 ns->ucount_max[type] = max <= ((long)(~0UL >> 1)) ? max : ((long)(~0UL >> 1));
}



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *get_user_ns(struct user_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->ns.count);
 return ns;
}

extern int create_user_ns(struct cred *new);
extern int unshare_userns(unsigned long unshare_flags, struct cred **new_cred);
extern void __put_user_ns(struct user_namespace *ns);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_user_ns(struct user_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->ns.count))
  __put_user_ns(ns);
}

struct seq_operations;
extern const struct seq_operations proc_uid_seq_operations;
extern const struct seq_operations proc_gid_seq_operations;
extern const struct seq_operations proc_projid_seq_operations;
extern ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
extern int proc_setgroups_show(struct seq_file *m, void *v);
extern bool userns_may_setgroups(const struct user_namespace *ns);
extern bool in_userns(const struct user_namespace *ancestor,
         const struct user_namespace *child);
extern bool current_in_userns(const struct user_namespace *target_ns);
struct ns_common *ns_get_owner(struct ns_common *ns);
# 25 "./include/linux/cgroup.h" 2

# 1 "./include/linux/kernel_stat.h" 1
# 12 "./include/linux/kernel_stat.h"
# 1 "./arch/powerpc/include/asm/irq.h" 1
# 13 "./include/linux/kernel_stat.h" 2







enum cpu_usage_stat {
 CPUTIME_USER,
 CPUTIME_NICE,
 CPUTIME_SYSTEM,
 CPUTIME_SOFTIRQ,
 CPUTIME_IRQ,
 CPUTIME_IDLE,
 CPUTIME_IOWAIT,
 CPUTIME_STEAL,
 CPUTIME_GUEST,
 CPUTIME_GUEST_NICE,
 NR_STATS,
};

struct kernel_cpustat {
 u64 cpustat[NR_STATS];
};

struct kernel_stat {
 unsigned long irqs_sum;
 unsigned int softirqs[NR_SOFTIRQS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_stat) kstat;
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_cpustat) kernel_cpustat;







extern unsigned long long nr_context_switches(void);

extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);
extern void kstat_incr_irq_this_cpu(unsigned int irq);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kstat_incr_softirqs_this_cpu(unsigned int irq)
{
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(kstat.softirqs[irq])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_softirqs_cpu(unsigned int irq, int cpu)
{
       return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).softirqs[irq];
}




extern unsigned int kstat_irqs_usr(unsigned int irq);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_cpu_irqs_sum(unsigned int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).irqs_sum;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 kcpustat_field(struct kernel_cpustat *kcpustat,
     enum cpu_usage_stat usage, int cpu)
{
 return kcpustat->cpustat[usage];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcpustat_cpu_fetch(struct kernel_cpustat *dst, int cpu)
{
 *dst = (*({ do { const void *__vpp_verify = (typeof((&(kernel_cpustat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kernel_cpustat)))) *)((&(kernel_cpustat)))); (typeof((typeof(*((&(kernel_cpustat)))) *)((&(kernel_cpustat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



extern void account_user_time(struct task_struct *, u64);
extern void account_guest_time(struct task_struct *, u64);
extern void account_system_time(struct task_struct *, int, u64);
extern void account_system_index_time(struct task_struct *, u64,
          enum cpu_usage_stat);
extern void account_steal_time(u64);
extern void account_idle_time(u64);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_process_tick(struct task_struct *tsk, int user)
{
 vtime_flush(tsk);
}




extern void account_idle_ticks(unsigned long ticks);
# 27 "./include/linux/cgroup.h" 2

# 1 "./include/linux/cgroup-defs.h" 1
# 20 "./include/linux/cgroup-defs.h"
# 1 "./include/linux/u64_stats_sync.h" 1
# 68 "./include/linux/u64_stats_sync.h"
struct u64_stats_sync {



};


# 1 "./arch/powerpc/include/generated/asm/local64.h" 1
# 76 "./include/linux/u64_stats_sync.h" 2

typedef struct {
 local64_t v;
} u64_stats_t ;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 u64_stats_read(const u64_stats_t *p)
{
 return local_read(&(&p->v)->a);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_add(u64_stats_t *p, unsigned long val)
{
 local_add((val),(&(&p->v)->a));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_inc(u64_stats_t *p)
{
 local_add_return(1LL, &(&p->v)->a);
}
# 121 "./include/linux/u64_stats_sync.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_init(struct u64_stats_sync *syncp)
{
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
u64_stats_update_begin_irqsave(struct u64_stats_sync *syncp)
{
 unsigned long flags = 0;





 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
u64_stats_update_end_irqrestore(struct u64_stats_sync *syncp,
    unsigned long flags)
{




}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return 0;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return false;

}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
          unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}
# 21 "./include/linux/cgroup-defs.h" 2

# 1 "./include/linux/bpf-cgroup.h" 1




# 1 "./include/linux/bpf.h" 1






# 1 "./include/uapi/linux/bpf.h" 1
# 12 "./include/uapi/linux/bpf.h"
# 1 "./include/uapi/linux/bpf_common.h" 1
# 13 "./include/uapi/linux/bpf.h" 2
# 53 "./include/uapi/linux/bpf.h"
enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};




struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};

struct bpf_cgroup_storage_key {
 __u64 cgroup_inode_id;
 __u32 attach_type;
};

union bpf_iter_link_info {
 struct {
  __u32 map_fd;
 } map;
};
# 838 "./include/uapi/linux/bpf.h"
enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_RUN = BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
 BPF_PROG_QUERY,
 BPF_RAW_TRACEPOINT_OPEN,
 BPF_BTF_LOAD,
 BPF_BTF_GET_FD_BY_ID,
 BPF_TASK_FD_QUERY,
 BPF_MAP_LOOKUP_AND_DELETE_ELEM,
 BPF_MAP_FREEZE,
 BPF_BTF_GET_NEXT_ID,
 BPF_MAP_LOOKUP_BATCH,
 BPF_MAP_LOOKUP_AND_DELETE_BATCH,
 BPF_MAP_UPDATE_BATCH,
 BPF_MAP_DELETE_BATCH,
 BPF_LINK_CREATE,
 BPF_LINK_UPDATE,
 BPF_LINK_GET_FD_BY_ID,
 BPF_LINK_GET_NEXT_ID,
 BPF_ENABLE_STATS,
 BPF_ITER_CREATE,
 BPF_LINK_DETACH,
 BPF_PROG_BIND_MAP,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
 BPF_MAP_TYPE_CPUMAP,
 BPF_MAP_TYPE_XSKMAP,
 BPF_MAP_TYPE_SOCKHASH,
 BPF_MAP_TYPE_CGROUP_STORAGE,
 BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
 BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
 BPF_MAP_TYPE_QUEUE,
 BPF_MAP_TYPE_STACK,
 BPF_MAP_TYPE_SK_STORAGE,
 BPF_MAP_TYPE_DEVMAP_HASH,
 BPF_MAP_TYPE_STRUCT_OPS,
 BPF_MAP_TYPE_RINGBUF,
 BPF_MAP_TYPE_INODE_STORAGE,
 BPF_MAP_TYPE_TASK_STORAGE,
};
# 919 "./include/uapi/linux/bpf.h"
enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
 BPF_PROG_TYPE_CGROUP_DEVICE,
 BPF_PROG_TYPE_SK_MSG,
 BPF_PROG_TYPE_RAW_TRACEPOINT,
 BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
 BPF_PROG_TYPE_LWT_SEG6LOCAL,
 BPF_PROG_TYPE_LIRC_MODE2,
 BPF_PROG_TYPE_SK_REUSEPORT,
 BPF_PROG_TYPE_FLOW_DISSECTOR,
 BPF_PROG_TYPE_CGROUP_SYSCTL,
 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
 BPF_PROG_TYPE_CGROUP_SOCKOPT,
 BPF_PROG_TYPE_TRACING,
 BPF_PROG_TYPE_STRUCT_OPS,
 BPF_PROG_TYPE_EXT,
 BPF_PROG_TYPE_LSM,
 BPF_PROG_TYPE_SK_LOOKUP,
 BPF_PROG_TYPE_SYSCALL,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 BPF_CGROUP_DEVICE,
 BPF_SK_MSG_VERDICT,
 BPF_CGROUP_INET4_BIND,
 BPF_CGROUP_INET6_BIND,
 BPF_CGROUP_INET4_CONNECT,
 BPF_CGROUP_INET6_CONNECT,
 BPF_CGROUP_INET4_POST_BIND,
 BPF_CGROUP_INET6_POST_BIND,
 BPF_CGROUP_UDP4_SENDMSG,
 BPF_CGROUP_UDP6_SENDMSG,
 BPF_LIRC_MODE2,
 BPF_FLOW_DISSECTOR,
 BPF_CGROUP_SYSCTL,
 BPF_CGROUP_UDP4_RECVMSG,
 BPF_CGROUP_UDP6_RECVMSG,
 BPF_CGROUP_GETSOCKOPT,
 BPF_CGROUP_SETSOCKOPT,
 BPF_TRACE_RAW_TP,
 BPF_TRACE_FENTRY,
 BPF_TRACE_FEXIT,
 BPF_MODIFY_RETURN,
 BPF_LSM_MAC,
 BPF_TRACE_ITER,
 BPF_CGROUP_INET4_GETPEERNAME,
 BPF_CGROUP_INET6_GETPEERNAME,
 BPF_CGROUP_INET4_GETSOCKNAME,
 BPF_CGROUP_INET6_GETSOCKNAME,
 BPF_XDP_DEVMAP,
 BPF_CGROUP_INET_SOCK_RELEASE,
 BPF_XDP_CPUMAP,
 BPF_SK_LOOKUP,
 BPF_XDP,
 BPF_SK_SKB_VERDICT,
 BPF_SK_REUSEPORT_SELECT,
 BPF_SK_REUSEPORT_SELECT_OR_MIGRATE,
 BPF_PERF_EVENT,
 __MAX_BPF_ATTACH_TYPE
};



enum bpf_link_type {
 BPF_LINK_TYPE_UNSPEC = 0,
 BPF_LINK_TYPE_RAW_TRACEPOINT = 1,
 BPF_LINK_TYPE_TRACING = 2,
 BPF_LINK_TYPE_CGROUP = 3,
 BPF_LINK_TYPE_ITER = 4,
 BPF_LINK_TYPE_NETNS = 5,
 BPF_LINK_TYPE_XDP = 6,
 BPF_LINK_TYPE_PERF_EVENT = 7,

 MAX_BPF_LINK_TYPE,
};
# 1168 "./include/uapi/linux/bpf.h"
enum {
 BPF_ANY = 0,
 BPF_NOEXIST = 1,
 BPF_EXIST = 2,
 BPF_F_LOCK = 4,
};


enum {
 BPF_F_NO_PREALLOC = (1U << 0),






 BPF_F_NO_COMMON_LRU = (1U << 1),

 BPF_F_NUMA_NODE = (1U << 2),


 BPF_F_RDONLY = (1U << 3),
 BPF_F_WRONLY = (1U << 4),


 BPF_F_STACK_BUILD_ID = (1U << 5),


 BPF_F_ZERO_SEED = (1U << 6),


 BPF_F_RDONLY_PROG = (1U << 7),
 BPF_F_WRONLY_PROG = (1U << 8),


 BPF_F_CLONE = (1U << 9),


 BPF_F_MMAPABLE = (1U << 10),


 BPF_F_PRESERVE_ELEMS = (1U << 11),


 BPF_F_INNER_MAP = (1U << 12),
};
# 1229 "./include/uapi/linux/bpf.h"
enum bpf_stats_type {

 BPF_STATS_RUN_TIME = 0,
};

enum bpf_stack_build_id_status {

 BPF_STACK_BUILD_ID_EMPTY = 0,

 BPF_STACK_BUILD_ID_VALID = 1,

 BPF_STACK_BUILD_ID_IP = 2,
};


struct bpf_stack_build_id {
 __s32 status;
 unsigned char build_id[20];
 union {
  __u64 offset;
  __u64 ip;
 };
};



union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


  char map_name[16U];
  __u32 map_ifindex;
  __u32 btf_fd;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
  __u32 btf_vmlinux_value_type_id;



 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u64 __attribute__((aligned(8))) in_batch;


  __u64 __attribute__((aligned(8))) out_batch;
  __u64 __attribute__((aligned(8))) keys;
  __u64 __attribute__((aligned(8))) values;
  __u32 count;




  __u32 map_fd;
  __u64 elem_flags;
  __u64 flags;
 } batch;

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
  char prog_name[16U];
  __u32 prog_ifindex;




  __u32 expected_attach_type;
  __u32 prog_btf_fd;
  __u32 func_info_rec_size;
  __u64 __attribute__((aligned(8))) func_info;
  __u32 func_info_cnt;
  __u32 line_info_rec_size;
  __u64 __attribute__((aligned(8))) line_info;
  __u32 line_info_cnt;
  __u32 attach_btf_id;
  union {

   __u32 attach_prog_fd;

   __u32 attach_btf_obj_fd;
  };
  __u32 :32;
  __u64 __attribute__((aligned(8))) fd_array;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
  __u32 replace_bpf_fd;



 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;



  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
  __u32 ctx_size_in;
  __u32 ctx_size_out;



  __u64 __attribute__((aligned(8))) ctx_in;
  __u64 __attribute__((aligned(8))) ctx_out;
  __u32 flags;
  __u32 cpu;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
   __u32 btf_id;
   __u32 link_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;

 struct {
  __u32 target_fd;
  __u32 attach_type;
  __u32 query_flags;
  __u32 attach_flags;
  __u64 __attribute__((aligned(8))) prog_ids;
  __u32 prog_cnt;
 } query;

 struct {
  __u64 name;
  __u32 prog_fd;
 } raw_tracepoint;

 struct {
  __u64 __attribute__((aligned(8))) btf;
  __u64 __attribute__((aligned(8))) btf_log_buf;
  __u32 btf_size;
  __u32 btf_log_size;
  __u32 btf_log_level;
 };

 struct {
  __u32 pid;
  __u32 fd;
  __u32 flags;
  __u32 buf_len;
  __u64 __attribute__((aligned(8))) buf;




  __u32 prog_id;
  __u32 fd_type;
  __u64 probe_offset;
  __u64 probe_addr;
 } task_fd_query;

 struct {
  __u32 prog_fd;
  union {
   __u32 target_fd;
   __u32 target_ifindex;
  };
  __u32 attach_type;
  __u32 flags;
  union {
   __u32 target_btf_id;
   struct {
    __u64 __attribute__((aligned(8))) iter_info;
    __u32 iter_info_len;
   };
   struct {




    __u64 bpf_cookie;
   } perf_event;
  };
 } link_create;

 struct {
  __u32 link_fd;

  __u32 new_prog_fd;
  __u32 flags;


  __u32 old_prog_fd;
 } link_update;

 struct {
  __u32 link_fd;
 } link_detach;

 struct {
  __u32 type;
 } enable_stats;

 struct {
  __u32 link_fd;
  __u32 flags;
 } iter_create;

 struct {
  __u32 prog_fd;
  __u32 map_fd;
  __u32 flags;
 } prog_bind_map;

} __attribute__((aligned(8)));
# 5064 "./include/uapi/linux/bpf.h"
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update, BPF_FUNC_xdp_adjust_meta, BPF_FUNC_perf_event_read_value, BPF_FUNC_perf_prog_read_value, BPF_FUNC_getsockopt, BPF_FUNC_override_return, BPF_FUNC_sock_ops_cb_flags_set, BPF_FUNC_msg_redirect_map, BPF_FUNC_msg_apply_bytes, BPF_FUNC_msg_cork_bytes, BPF_FUNC_msg_pull_data, BPF_FUNC_bind, BPF_FUNC_xdp_adjust_tail, BPF_FUNC_skb_get_xfrm_state, BPF_FUNC_get_stack, BPF_FUNC_skb_load_bytes_relative, BPF_FUNC_fib_lookup, BPF_FUNC_sock_hash_update, BPF_FUNC_msg_redirect_hash, BPF_FUNC_sk_redirect_hash, BPF_FUNC_lwt_push_encap, BPF_FUNC_lwt_seg6_store_bytes, BPF_FUNC_lwt_seg6_adjust_srh, BPF_FUNC_lwt_seg6_action, BPF_FUNC_rc_repeat, BPF_FUNC_rc_keydown, BPF_FUNC_skb_cgroup_id, BPF_FUNC_get_current_cgroup_id, BPF_FUNC_get_local_storage, BPF_FUNC_sk_select_reuseport, BPF_FUNC_skb_ancestor_cgroup_id, BPF_FUNC_sk_lookup_tcp, BPF_FUNC_sk_lookup_udp, BPF_FUNC_sk_release, BPF_FUNC_map_push_elem, BPF_FUNC_map_pop_elem, BPF_FUNC_map_peek_elem, BPF_FUNC_msg_push_data, BPF_FUNC_msg_pop_data, BPF_FUNC_rc_pointer_rel, BPF_FUNC_spin_lock, BPF_FUNC_spin_unlock, BPF_FUNC_sk_fullsock, BPF_FUNC_tcp_sock, BPF_FUNC_skb_ecn_set_ce, BPF_FUNC_get_listener_sock, BPF_FUNC_skc_lookup_tcp, BPF_FUNC_tcp_check_syncookie, BPF_FUNC_sysctl_get_name, BPF_FUNC_sysctl_get_current_value, BPF_FUNC_sysctl_get_new_value, BPF_FUNC_sysctl_set_new_value, BPF_FUNC_strtol, BPF_FUNC_strtoul, BPF_FUNC_sk_storage_get, BPF_FUNC_sk_storage_delete, BPF_FUNC_send_signal, BPF_FUNC_tcp_gen_syncookie, BPF_FUNC_skb_output, BPF_FUNC_probe_read_user, BPF_FUNC_probe_read_kernel, BPF_FUNC_probe_read_user_str, BPF_FUNC_probe_read_kernel_str, BPF_FUNC_tcp_send_ack, BPF_FUNC_send_signal_thread, BPF_FUNC_jiffies64, BPF_FUNC_read_branch_records, BPF_FUNC_get_ns_current_pid_tgid, BPF_FUNC_xdp_output, BPF_FUNC_get_netns_cookie, BPF_FUNC_get_current_ancestor_cgroup_id, BPF_FUNC_sk_assign, BPF_FUNC_ktime_get_boot_ns, BPF_FUNC_seq_printf, BPF_FUNC_seq_write, BPF_FUNC_sk_cgroup_id, BPF_FUNC_sk_ancestor_cgroup_id, BPF_FUNC_ringbuf_output, BPF_FUNC_ringbuf_reserve, BPF_FUNC_ringbuf_submit, BPF_FUNC_ringbuf_discard, BPF_FUNC_ringbuf_query, BPF_FUNC_csum_level, BPF_FUNC_skc_to_tcp6_sock, BPF_FUNC_skc_to_tcp_sock, BPF_FUNC_skc_to_tcp_timewait_sock, BPF_FUNC_skc_to_tcp_request_sock, BPF_FUNC_skc_to_udp6_sock, BPF_FUNC_get_task_stack, BPF_FUNC_load_hdr_opt, BPF_FUNC_store_hdr_opt, BPF_FUNC_reserve_hdr_opt, BPF_FUNC_inode_storage_get, BPF_FUNC_inode_storage_delete, BPF_FUNC_d_path, BPF_FUNC_copy_from_user, BPF_FUNC_snprintf_btf, BPF_FUNC_seq_printf_btf, BPF_FUNC_skb_cgroup_classid, BPF_FUNC_redirect_neigh, BPF_FUNC_per_cpu_ptr, BPF_FUNC_this_cpu_ptr, BPF_FUNC_redirect_peer, BPF_FUNC_task_storage_get, BPF_FUNC_task_storage_delete, BPF_FUNC_get_current_task_btf, BPF_FUNC_bprm_opts_set, BPF_FUNC_ktime_get_coarse_ns, BPF_FUNC_ima_inode_hash, BPF_FUNC_sock_from_file, BPF_FUNC_check_mtu, BPF_FUNC_for_each_map_elem, BPF_FUNC_snprintf, BPF_FUNC_sys_bpf, BPF_FUNC_btf_find_by_name_kind, BPF_FUNC_sys_close, BPF_FUNC_timer_init, BPF_FUNC_timer_set_callback, BPF_FUNC_timer_start, BPF_FUNC_timer_cancel, BPF_FUNC_get_func_ip, BPF_FUNC_get_attach_cookie, BPF_FUNC_task_pt_regs,
 __BPF_FUNC_MAX_ID,
};





enum {
 BPF_F_RECOMPUTE_CSUM = (1ULL << 0),
 BPF_F_INVALIDATE_HASH = (1ULL << 1),
};




enum {
 BPF_F_HDR_FIELD_MASK = 0xfULL,
};


enum {
 BPF_F_PSEUDO_HDR = (1ULL << 4),
 BPF_F_MARK_MANGLED_0 = (1ULL << 5),
 BPF_F_MARK_ENFORCE = (1ULL << 6),
};


enum {
 BPF_F_INGRESS = (1ULL << 0),
};


enum {
 BPF_F_TUNINFO_IPV6 = (1ULL << 0),
};


enum {
 BPF_F_SKIP_FIELD_MASK = 0xffULL,
 BPF_F_USER_STACK = (1ULL << 8),

 BPF_F_FAST_STACK_CMP = (1ULL << 9),
 BPF_F_REUSE_STACKID = (1ULL << 10),

 BPF_F_USER_BUILD_ID = (1ULL << 11),
};


enum {
 BPF_F_ZERO_CSUM_TX = (1ULL << 1),
 BPF_F_DONT_FRAGMENT = (1ULL << 2),
 BPF_F_SEQ_NUMBER = (1ULL << 3),
};




enum {
 BPF_F_INDEX_MASK = 0xffffffffULL,
 BPF_F_CURRENT_CPU = BPF_F_INDEX_MASK,

 BPF_F_CTXLEN_MASK = (0xfffffULL << 32),
};


enum {
 BPF_F_CURRENT_NETNS = (-1L),
};


enum {
 BPF_CSUM_LEVEL_QUERY,
 BPF_CSUM_LEVEL_INC,
 BPF_CSUM_LEVEL_DEC,
 BPF_CSUM_LEVEL_RESET,
};


enum {
 BPF_F_ADJ_ROOM_FIXED_GSO = (1ULL << 0),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV4 = (1ULL << 1),
 BPF_F_ADJ_ROOM_ENCAP_L3_IPV6 = (1ULL << 2),
 BPF_F_ADJ_ROOM_ENCAP_L4_GRE = (1ULL << 3),
 BPF_F_ADJ_ROOM_ENCAP_L4_UDP = (1ULL << 4),
 BPF_F_ADJ_ROOM_NO_CSUM_RESET = (1ULL << 5),
 BPF_F_ADJ_ROOM_ENCAP_L2_ETH = (1ULL << 6),
};

enum {
 BPF_ADJ_ROOM_ENCAP_L2_MASK = 0xff,
 BPF_ADJ_ROOM_ENCAP_L2_SHIFT = 56,
};






enum {
 BPF_F_SYSCTL_BASE_NAME = (1ULL << 0),
};


enum {
 BPF_LOCAL_STORAGE_GET_F_CREATE = (1ULL << 0),



 BPF_SK_STORAGE_GET_F_CREATE = BPF_LOCAL_STORAGE_GET_F_CREATE,
};


enum {
 BPF_F_GET_BRANCH_RECORDS_SIZE = (1ULL << 0),
};




enum {
 BPF_RB_NO_WAKEUP = (1ULL << 0),
 BPF_RB_FORCE_WAKEUP = (1ULL << 1),
};


enum {
 BPF_RB_AVAIL_DATA = 0,
 BPF_RB_RING_SIZE = 1,
 BPF_RB_CONS_POS = 2,
 BPF_RB_PROD_POS = 3,
};


enum {
 BPF_RINGBUF_BUSY_BIT = (1U << 31),
 BPF_RINGBUF_DISCARD_BIT = (1U << 30),
 BPF_RINGBUF_HDR_SZ = 8,
};


enum {
 BPF_SK_LOOKUP_F_REPLACE = (1ULL << 0),
 BPF_SK_LOOKUP_F_NO_REUSEPORT = (1ULL << 1),
};


enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
 BPF_ADJ_ROOM_MAC,
};


enum bpf_hdr_start_off {
 BPF_HDR_START_MAC,
 BPF_HDR_START_NET,
};


enum bpf_lwt_encap_mode {
 BPF_LWT_ENCAP_SEG6,
 BPF_LWT_ENCAP_SEG6_INLINE,
 BPF_LWT_ENCAP_IP,
};


enum {
 BPF_F_BPRM_SECUREEXEC = (1ULL << 0),
};


enum {
 BPF_F_BROADCAST = (1ULL << 3),
 BPF_F_EXCLUDE_INGRESS = (1ULL << 4),
};
# 5250 "./include/uapi/linux/bpf.h"
struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;


 __u32 data_meta;
 union { struct bpf_flow_keys * flow_keys; __u64 :64; } __attribute__((aligned(8)));
 __u64 tstamp;
 __u32 wire_len;
 __u32 gso_segs;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 __u32 gso_size;
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};




struct bpf_xfrm_state {
 __u32 reqid;
 __u32 spi;
 __u16 family;
 __u16 ext;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
};
# 5322 "./include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,
# 5336 "./include/uapi/linux/bpf.h"
 BPF_LWT_REROUTE = 128,
};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;

 __u32 src_ip4;
 __u32 src_ip6[4];
 __u32 src_port;
 __u32 dst_port;
 __u32 dst_ip4;
 __u32 dst_ip6[4];
 __u32 state;
 __s32 rx_queue_mapping;
};

struct bpf_tcp_sock {
 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;


 __u32 data_segs_in;


 __u32 segs_out;


 __u32 data_segs_out;


 __u32 lost_out;
 __u32 sacked_out;
 __u64 bytes_received;



 __u64 bytes_acked;



 __u32 dsack_dups;


 __u32 delivered;
 __u32 delivered_ce;
 __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
 union {
  struct {
   __be32 saddr;
   __be32 daddr;
   __be16 sport;
   __be16 dport;
  } ipv4;
  struct {
   __be32 saddr[4];
   __be32 daddr[4];
   __be16 sport;
   __be16 dport;
  } ipv6;
 };
};

struct bpf_xdp_sock {
 __u32 queue_id;
};
# 5430 "./include/uapi/linux/bpf.h"
enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
 __u32 data_meta;

 __u32 ingress_ifindex;
 __u32 rx_queue_index;

 __u32 egress_ifindex;
};






struct bpf_devmap_val {
 __u32 ifindex;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};






struct bpf_cpumap_val {
 __u32 qsize;
 union {
  int fd;
  __u32 id;
 } bpf_prog;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};




struct sk_msg_md {
 union { void * data; __u64 :64; } __attribute__((aligned(8)));
 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));

 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 size;

 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};

struct sk_reuseport_md {




 union { void * data; __u64 :64; } __attribute__((aligned(8)));

 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));






 __u32 len;




 __u32 eth_protocol;
 __u32 ip_protocol;
 __u32 bind_inany;
 __u32 hash;
# 5537 "./include/uapi/linux/bpf.h"
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_sock * migrating_sk; __u64 :64; } __attribute__((aligned(8)));
};



struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
 __u64 load_time;
 __u32 created_by_uid;
 __u32 nr_map_ids;
 __u64 __attribute__((aligned(8))) map_ids;
 char name[16U];
 __u32 ifindex;
 __u32 gpl_compatible:1;
 __u32 :31;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 nr_jited_ksyms;
 __u32 nr_jited_func_lens;
 __u64 __attribute__((aligned(8))) jited_ksyms;
 __u64 __attribute__((aligned(8))) jited_func_lens;
 __u32 btf_id;
 __u32 func_info_rec_size;
 __u64 __attribute__((aligned(8))) func_info;
 __u32 nr_func_info;
 __u32 nr_line_info;
 __u64 __attribute__((aligned(8))) line_info;
 __u64 __attribute__((aligned(8))) jited_line_info;
 __u32 nr_jited_line_info;
 __u32 line_info_rec_size;
 __u32 jited_line_info_rec_size;
 __u32 nr_prog_tags;
 __u64 __attribute__((aligned(8))) prog_tags;
 __u64 run_time_ns;
 __u64 run_cnt;
 __u64 recursion_misses;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
 char name[16U];
 __u32 ifindex;
 __u32 btf_vmlinux_value_type_id;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 btf_id;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
} __attribute__((aligned(8)));

struct bpf_btf_info {
 __u64 __attribute__((aligned(8))) btf;
 __u32 btf_size;
 __u32 id;
 __u64 __attribute__((aligned(8))) name;
 __u32 name_len;
 __u32 kernel_btf;
} __attribute__((aligned(8)));

struct bpf_link_info {
 __u32 type;
 __u32 id;
 __u32 prog_id;
 union {
  struct {
   __u64 __attribute__((aligned(8))) tp_name;
   __u32 tp_name_len;
  } raw_tracepoint;
  struct {
   __u32 attach_type;
   __u32 target_obj_id;
   __u32 target_btf_id;
  } tracing;
  struct {
   __u64 cgroup_id;
   __u32 attach_type;
  } cgroup;
  struct {
   __u64 __attribute__((aligned(8))) target_name;
   __u32 target_name_len;
   union {
    struct {
     __u32 map_id;
    } map;
   };
  } iter;
  struct {
   __u32 netns_ino;
   __u32 attach_type;
  } netns;
  struct {
   __u32 ifindex;
  } xdp;
 };
} __attribute__((aligned(8)));





struct bpf_sock_addr {
 __u32 user_family;
 __u32 user_ip4;


 __u32 user_ip6[4];


 __u32 user_port;


 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 msg_src_ip4;


 __u32 msg_src_ip6[4];


 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 args[4];
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 is_fullsock;



 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 bpf_sock_ops_cb_flags;
 __u32 state;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;
 __u32 data_segs_in;
 __u32 segs_out;
 __u32 data_segs_out;
 __u32 lost_out;
 __u32 sacked_out;
 __u32 sk_txhash;
 __u64 bytes_received;
 __u64 bytes_acked;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
# 5736 "./include/uapi/linux/bpf.h"
 union { void * skb_data; __u64 :64; } __attribute__((aligned(8)));
 union { void * skb_data_end; __u64 :64; } __attribute__((aligned(8)));
 __u32 skb_len;



 __u32 skb_tcp_flags;
# 5752 "./include/uapi/linux/bpf.h"
};


enum {
 BPF_SOCK_OPS_RTO_CB_FLAG = (1<<0),
 BPF_SOCK_OPS_RETRANS_CB_FLAG = (1<<1),
 BPF_SOCK_OPS_STATE_CB_FLAG = (1<<2),
 BPF_SOCK_OPS_RTT_CB_FLAG = (1<<3),
# 5778 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_ALL_HDR_OPT_CB_FLAG = (1<<4),
# 5787 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_PARSE_UNKNOWN_HDR_OPT_CB_FLAG = (1<<5),
# 5802 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB_FLAG = (1<<6),

 BPF_SOCK_OPS_ALL_CB_FLAGS = 0x7F,
};




enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


 BPF_SOCK_OPS_BASE_RTT,






 BPF_SOCK_OPS_RTO_CB,




 BPF_SOCK_OPS_RETRANS_CB,





 BPF_SOCK_OPS_STATE_CB,



 BPF_SOCK_OPS_TCP_LISTEN_CB,


 BPF_SOCK_OPS_RTT_CB,

 BPF_SOCK_OPS_PARSE_HDR_OPT_CB,
# 5874 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_HDR_OPT_LEN_CB,
# 5891 "./include/uapi/linux/bpf.h"
 BPF_SOCK_OPS_WRITE_HDR_OPT_CB,
# 5917 "./include/uapi/linux/bpf.h"
};






enum {
 BPF_TCP_ESTABLISHED = 1,
 BPF_TCP_SYN_SENT,
 BPF_TCP_SYN_RECV,
 BPF_TCP_FIN_WAIT1,
 BPF_TCP_FIN_WAIT2,
 BPF_TCP_TIME_WAIT,
 BPF_TCP_CLOSE,
 BPF_TCP_CLOSE_WAIT,
 BPF_TCP_LAST_ACK,
 BPF_TCP_LISTEN,
 BPF_TCP_CLOSING,
 BPF_TCP_NEW_SYN_RECV,

 BPF_TCP_MAX_STATES
};

enum {
 TCP_BPF_IW = 1001,
 TCP_BPF_SNDCWND_CLAMP = 1002,
 TCP_BPF_DELACK_MAX = 1003,
 TCP_BPF_RTO_MIN = 1004,
# 5978 "./include/uapi/linux/bpf.h"
 TCP_BPF_SYN = 1005,
 TCP_BPF_SYN_IP = 1006,
 TCP_BPF_SYN_MAC = 1007,
};

enum {
 BPF_LOAD_HDR_OPT_TCP_SYN = (1ULL << 0),
};




enum {
 BPF_WRITE_HDR_TCP_CURRENT_MSS = 1,






 BPF_WRITE_HDR_TCP_SYNACK_COOKIE = 2,


};

struct bpf_perf_event_value {
 __u64 counter;
 __u64 enabled;
 __u64 running;
};

enum {
 BPF_DEVCG_ACC_MKNOD = (1ULL << 0),
 BPF_DEVCG_ACC_READ = (1ULL << 1),
 BPF_DEVCG_ACC_WRITE = (1ULL << 2),
};

enum {
 BPF_DEVCG_DEV_BLOCK = (1ULL << 0),
 BPF_DEVCG_DEV_CHAR = (1ULL << 1),
};

struct bpf_cgroup_dev_ctx {

 __u32 access_type;
 __u32 major;
 __u32 minor;
};

struct bpf_raw_tracepoint_args {
 __u64 args[0];
};




enum {
 BPF_FIB_LOOKUP_DIRECT = (1U << 0),
 BPF_FIB_LOOKUP_OUTPUT = (1U << 1),
};

enum {
 BPF_FIB_LKUP_RET_SUCCESS,
 BPF_FIB_LKUP_RET_BLACKHOLE,
 BPF_FIB_LKUP_RET_UNREACHABLE,
 BPF_FIB_LKUP_RET_PROHIBIT,
 BPF_FIB_LKUP_RET_NOT_FWDED,
 BPF_FIB_LKUP_RET_FWD_DISABLED,
 BPF_FIB_LKUP_RET_UNSUPP_LWT,
 BPF_FIB_LKUP_RET_NO_NEIGH,
 BPF_FIB_LKUP_RET_FRAG_NEEDED,
};

struct bpf_fib_lookup {



 __u8 family;


 __u8 l4_protocol;
 __be16 sport;
 __be16 dport;

 union {

  __u16 tot_len;


  __u16 mtu_result;
 };



 __u32 ifindex;

 union {

  __u8 tos;
  __be32 flowinfo;


  __u32 rt_metric;
 };

 union {
  __be32 ipv4_src;
  __u32 ipv6_src[4];
 };





 union {
  __be32 ipv4_dst;
  __u32 ipv6_dst[4];
 };


 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __u8 smac[6];
 __u8 dmac[6];
};

struct bpf_redir_neigh {

 __u32 nh_family;

 union {
  __be32 ipv4_nh;
  __u32 ipv6_nh[4];
 };
};


enum bpf_check_mtu_flags {
 BPF_MTU_CHK_SEGS = (1U << 0),
};

enum bpf_check_mtu_ret {
 BPF_MTU_CHK_RET_SUCCESS,
 BPF_MTU_CHK_RET_FRAG_NEEDED,
 BPF_MTU_CHK_RET_SEGS_TOOBIG,
};

enum bpf_task_fd_type {
 BPF_FD_TYPE_RAW_TRACEPOINT,
 BPF_FD_TYPE_TRACEPOINT,
 BPF_FD_TYPE_KPROBE,
 BPF_FD_TYPE_KRETPROBE,
 BPF_FD_TYPE_UPROBE,
 BPF_FD_TYPE_URETPROBE,
};

enum {
 BPF_FLOW_DISSECTOR_F_PARSE_1ST_FRAG = (1U << 0),
 BPF_FLOW_DISSECTOR_F_STOP_AT_FLOW_LABEL = (1U << 1),
 BPF_FLOW_DISSECTOR_F_STOP_AT_ENCAP = (1U << 2),
};

struct bpf_flow_keys {
 __u16 nhoff;
 __u16 thoff;
 __u16 addr_proto;
 __u8 is_frag;
 __u8 is_first_frag;
 __u8 is_encap;
 __u8 ip_proto;
 __be16 n_proto;
 __be16 sport;
 __be16 dport;
 union {
  struct {
   __be32 ipv4_src;
   __be32 ipv4_dst;
  };
  struct {
   __u32 ipv6_src[4];
   __u32 ipv6_dst[4];
  };
 };
 __u32 flags;
 __be32 flow_label;
};

struct bpf_func_info {
 __u32 insn_off;
 __u32 type_id;
};




struct bpf_line_info {
 __u32 insn_off;
 __u32 file_name_off;
 __u32 line_off;
 __u32 line_col;
};

struct bpf_spin_lock {
 __u32 val;
};

struct bpf_timer {
 __u64 :64;
 __u64 :64;
} __attribute__((aligned(8)));

struct bpf_sysctl {
 __u32 write;


 __u32 file_pos;


};

struct bpf_sockopt {
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval_end; __u64 :64; } __attribute__((aligned(8)));

 __s32 level;
 __s32 optname;
 __s32 optlen;
 __s32 retval;
};

struct bpf_pidns_info {
 __u32 pid;
 __u32 tgid;
};


struct bpf_sk_lookup {
 union {
  union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
  __u64 cookie;
 };

 __u32 family;
 __u32 protocol;
 __u32 remote_ip4;
 __u32 remote_ip6[4];
 __u32 remote_port;
 __u32 local_ip4;
 __u32 local_ip6[4];
 __u32 local_port;
};
# 6239 "./include/uapi/linux/bpf.h"
struct btf_ptr {
 void *ptr;
 __u32 type_id;
 __u32 flags;
};
# 6254 "./include/uapi/linux/bpf.h"
enum {
 BTF_F_COMPACT = (1ULL << 0),
 BTF_F_NONAME = (1ULL << 1),
 BTF_F_PTR_RAW = (1ULL << 2),
 BTF_F_ZERO = (1ULL << 3),
};
# 8 "./include/linux/bpf.h" 2


# 1 "./include/linux/file.h" 1
# 14 "./include/linux/file.h"
struct file;

extern void fput(struct file *);
extern void fput_many(struct file *, unsigned int);

struct file_operations;
struct task_struct;
struct vfsmount;
struct dentry;
struct inode;
struct path;
extern struct file *alloc_file_pseudo(struct inode *, struct vfsmount *,
 const char *, int flags, const struct file_operations *);
extern struct file *alloc_file_clone(struct file *, int flags,
 const struct file_operations *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fput_light(struct file *file, int fput_needed)
{
 if (fput_needed)
  fput(file);
}

struct fd {
 struct file *file;
 unsigned int flags;
};



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput(struct fd fd)
{
 if (fd.flags & 1)
  fput(fd.file);
}

extern struct file *fget(unsigned int fd);
extern struct file *fget_many(unsigned int fd, unsigned int refs);
extern struct file *fget_raw(unsigned int fd);
extern struct file *fget_task(struct task_struct *task, unsigned int fd);
extern unsigned long __fdget(unsigned int fd);
extern unsigned long __fdget_raw(unsigned int fd);
extern unsigned long __fdget_pos(unsigned int fd);
extern void __f_unlock_pos(struct file *);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd __to_fd(unsigned long v)
{
 return (struct fd){(struct file *)(v & ~3),v & 3};
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget(unsigned int fd)
{
 return __to_fd(__fdget(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_raw(unsigned int fd)
{
 return __to_fd(__fdget_raw(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_pos(int fd)
{
 return __to_fd(__fdget_pos(fd));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput_pos(struct fd f)
{
 if (f.flags & 2)
  __f_unlock_pos(f.file);
 fdput(f);
}

extern int f_dupfd(unsigned int from, struct file *file, unsigned flags);
extern int replace_fd(unsigned fd, struct file *file, unsigned flags);
extern void set_close_on_exec(unsigned int fd, int flag);
extern bool get_close_on_exec(unsigned int fd);
extern int __get_unused_fd_flags(unsigned flags, unsigned long nofile);
extern int get_unused_fd_flags(unsigned flags);
extern void put_unused_fd(unsigned int fd);

extern void fd_install(unsigned int fd, struct file *file);

extern int __receive_fd(struct file *file, int *ufd,
   unsigned int o_flags);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int receive_fd_user(struct file *file, int *ufd,
      unsigned int o_flags)
{
 if (ufd == ((void *)0))
  return -14;
 return __receive_fd(file, ufd, o_flags);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int receive_fd(struct file *file, unsigned int o_flags)
{
 return __receive_fd(file, ((void *)0), o_flags);
}
int receive_fd_replace(int new_fd, struct file *file, unsigned int o_flags);

extern void flush_delayed_fput(void);
extern void __fput_sync(struct file *);

extern unsigned int sysctl_nr_open_min, sysctl_nr_open_max;
# 11 "./include/linux/bpf.h" 2
# 22 "./include/linux/bpf.h"
# 1 "./include/linux/sched/mm.h" 1
# 10 "./include/linux/sched/mm.h"
# 1 "./include/linux/sync_core.h" 1
# 15 "./include/linux/sync_core.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sync_core_before_usermode(void)
{
}
# 11 "./include/linux/sched/mm.h" 2




extern struct mm_struct *mm_alloc(void);
# 34 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmgrab(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_count);
}

extern void __mmdrop(struct mm_struct *mm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmdrop(struct mm_struct *mm)
{





 if (__builtin_expect(!!(atomic_dec_and_test(&mm->mm_count)), 0))
  __mmdrop(mm);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmgrab_lazy_tlb(struct mm_struct *mm)
{
 if (0)
  mmgrab(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmdrop_lazy_tlb(struct mm_struct *mm)
{
 if (0) {
  mmdrop(mm);
 } else {





  __asm__ __volatile__ ("sync" : : : "memory");
 }
}
# 89 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmget(struct mm_struct *mm)
{
 atomic_inc(&mm->mm_users);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mmget_not_zero(struct mm_struct *mm)
{
 return atomic_inc_not_zero(&mm->mm_users);
}


extern void mmput(struct mm_struct *);




void mmput_async(struct mm_struct *);



extern struct mm_struct *get_task_mm(struct task_struct *task);





extern struct mm_struct *mm_access(struct task_struct *task, unsigned int mode);

extern void exit_mm_release(struct task_struct *, struct mm_struct *);

extern void exec_mm_release(struct task_struct *, struct mm_struct *);


extern void mm_update_next_owner(struct mm_struct *mm);







extern void arch_pick_mmap_layout(struct mm_struct *mm,
      struct rlimit *rlim_stack);
extern unsigned long
arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
         unsigned long, unsigned long);
extern unsigned long
arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
     unsigned long len, unsigned long pgoff,
     unsigned long flags);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_vfork(struct task_struct *tsk)
{
 bool ret;
# 163 "./include/linux/sched/mm.h"
 rcu_read_lock();
 ret = tsk->vfork_done &&
   ({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ do { extern void __compiletime_assert_258(void) ; if (!((sizeof((tsk->real_parent)) == sizeof(char) || sizeof((tsk->real_parent)) == sizeof(short) || sizeof((tsk->real_parent)) == sizeof(int) || sizeof((tsk->real_parent)) == sizeof(long)) || sizeof((tsk->real_parent)) == sizeof(long long))) __compiletime_assert_258(); } while (0); (*(const volatile typeof( _Generic(((tsk->real_parent)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((tsk->real_parent)))) *)&((tsk->real_parent))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(tsk->real_parent)) *)(________p1)); })->mm == tsk->mm;
 rcu_read_unlock();

 return ret;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t current_gfp_context(gfp_t flags)
{
 unsigned int pflags = ({ do { extern void __compiletime_assert_259(void) ; if (!((sizeof(get_current()->flags) == sizeof(char) || sizeof(get_current()->flags) == sizeof(short) || sizeof(get_current()->flags) == sizeof(int) || sizeof(get_current()->flags) == sizeof(long)) || sizeof(get_current()->flags) == sizeof(long long))) __compiletime_assert_259(); } while (0); (*(const volatile typeof( _Generic((get_current()->flags), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (get_current()->flags))) *)&(get_current()->flags)); });

 if (__builtin_expect(!!(pflags & (0x00080000 | 0x00040000 | 0x10000000)), 0)) {




  if (pflags & 0x00080000)
   flags &= ~((( gfp_t)0x40u) | (( gfp_t)0x80u));
  else if (pflags & 0x00040000)
   flags &= ~(( gfp_t)0x80u);

  if (pflags & 0x10000000)
   flags &= ~(( gfp_t)0x08u);
 }
 return flags;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fs_reclaim_acquire(unsigned long ip) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fs_reclaim_release(unsigned long ip) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fs_reclaim_acquire(gfp_t gfp_mask) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fs_reclaim_release(gfp_t gfp_mask) { }
# 217 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void might_alloc(gfp_t gfp_mask)
{
 fs_reclaim_acquire(gfp_mask);
 fs_reclaim_release(gfp_mask);

 do { if (gfpflags_allow_blocking(gfp_mask)) do { do { } while (0); } while (0); } while (0);
}
# 236 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_noio_save(void)
{
 unsigned int flags = get_current()->flags & 0x00080000;
 get_current()->flags |= 0x00080000;
 return flags;
}
# 251 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_noio_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00080000) | flags;
}
# 267 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_nofs_save(void)
{
 unsigned int flags = get_current()->flags & 0x00040000;
 get_current()->flags |= 0x00040000;
 return flags;
}
# 282 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_nofs_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00040000) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_noreclaim_save(void)
{
 unsigned int flags = get_current()->flags & 0x00000800;
 get_current()->flags |= 0x00000800;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_noreclaim_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x00000800) | flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int memalloc_pin_save(void)
{
 unsigned int flags = get_current()->flags & 0x10000000;

 get_current()->flags |= 0x10000000;
 return flags;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memalloc_pin_restore(unsigned int flags)
{
 get_current()->flags = (get_current()->flags & ~0x10000000) | flags;
}


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct mem_cgroup *) int_active_memcg;
# 325 "./include/linux/sched/mm.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *
set_active_memcg(struct mem_cgroup *memcg)
{
 struct mem_cgroup *old;

 if (!(!(((preempt_count() & (((1UL << (4))-1) << (((0 + 8) + 8) + 4)))) | ((preempt_count() & (((1UL << (4))-1) << ((0 + 8) + 8)))) | ((preempt_count() & (((1UL << (8))-1) << (0 + 8))) & (1UL << (0 + 8)))))) {
  old = ({ typeof(int_active_memcg) pscr_ret__; do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(int_active_memcg)) { case 1: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_260(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_260(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 2: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_261(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_261(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 4: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_262(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_262(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; case 8: pscr_ret__ = ({ typeof(int_active_memcg) __ret; if ((sizeof(int_active_memcg) == sizeof(char) || sizeof(int_active_memcg) == sizeof(short) || sizeof(int_active_memcg) == sizeof(int) || sizeof(int_active_memcg) == sizeof(long))) __ret = ({ typeof(int_active_memcg) ___ret; __asm__ __volatile__("": : :"memory"); ___ret = ({ do { extern void __compiletime_assert_263(void) ; if (!((sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(char) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(short) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(int) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long)) || sizeof(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })) == sizeof(long long))) __compiletime_assert_263(); } while (0); (*(const volatile typeof( _Generic((*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); })))) *)&(*({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }))); }); __asm__ __volatile__("": : :"memory"); ___ret; }); else __ret = ({ typeof(int_active_memcg) ___ret; unsigned long ___flags; do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); ___flags = arch_local_irq_save(); } while (0); ___ret = ({ *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }); }); do { ({ unsigned long __dummy; typeof(___flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(___flags); } while (0); ___ret; }); __ret; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
  do { do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(int_active_memcg)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(int_active_memcg)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg))); (typeof((typeof(*(&(int_active_memcg))) *)(&(int_active_memcg)))) (__ptr + ((local_paca->data_offset))); }); }) = memcg; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 } else {
  old = get_current()->active_memcg;
  get_current()->active_memcg = memcg;
 }

 return old;
}
# 349 "./include/linux/sched/mm.h"
enum {
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_READY = (1U << 0),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED = (1U << 1),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED_READY = (1U << 2),
 MEMBARRIER_STATE_GLOBAL_EXPEDITED = (1U << 3),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE_READY = (1U << 4),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE = (1U << 5),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ_READY = (1U << 6),
 MEMBARRIER_STATE_PRIVATE_EXPEDITED_RSEQ = (1U << 7),
};

enum {
 MEMBARRIER_FLAG_SYNC_CORE = (1U << 0),
 MEMBARRIER_FLAG_RSEQ = (1U << 1),
};


# 1 "./arch/powerpc/include/asm/membarrier.h" 1



static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void membarrier_arch_switch_mm(struct mm_struct *prev,
          struct mm_struct *next,
          struct task_struct *tsk)
{







 if (1 &&
     __builtin_expect(!!(!(atomic_read(&next->membarrier_state) & (MEMBARRIER_STATE_PRIVATE_EXPEDITED | MEMBARRIER_STATE_GLOBAL_EXPEDITED)) || !prev), 1))


  return;





 __asm__ __volatile__ ("sync" : : : "memory");
}
# 367 "./include/linux/sched/mm.h" 2


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void membarrier_mm_sync_core_before_usermode(struct mm_struct *mm)
{
 if (get_current()->mm != mm)
  return;
 if (__builtin_expect(!!(!(atomic_read(&mm->membarrier_state) & MEMBARRIER_STATE_PRIVATE_EXPEDITED_SYNC_CORE)), 1))

  return;
 sync_core_before_usermode();
}

extern void membarrier_exec_mmap(struct mm_struct *mm);

extern void membarrier_update_current_mm(struct mm_struct *next_mm);
# 23 "./include/linux/bpf.h" 2


# 1 "./include/linux/bpfptr.h" 1





# 1 "./include/linux/sockptr.h" 1
# 14 "./include/linux/sockptr.h"
typedef struct {
 union {
  void *kernel;
  void *user;
 };
 bool is_kernel : 1;
} sockptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sockptr_is_kernel(sockptr_t sockptr)
{
 return sockptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sockptr_t KERNEL_SOCKPTR(void *p)
{
 return (sockptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sockptr_t USER_SOCKPTR(void *p)
{
 return (sockptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sockptr_is_null(sockptr_t sockptr)
{
 if (sockptr_is_kernel(sockptr))
  return !sockptr.kernel;
 return !sockptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_sockptr_offset(void *dst, sockptr_t src,
  size_t offset, size_t size)
{
 if (!sockptr_is_kernel(src))
  return copy_from_user(dst, src.user + offset, size);
 memcpy(dst, src.kernel + offset, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_sockptr(void *dst, sockptr_t src, size_t size)
{
 return copy_from_sockptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_to_sockptr_offset(sockptr_t dst, size_t offset,
  const void *src, size_t size)
{
 if (!sockptr_is_kernel(dst))
  return copy_to_user(dst.user + offset, src, size);
 memcpy(dst.kernel + offset, src, size);
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memdup_sockptr(sockptr_t src, size_t len)
{
 void *p = __kmalloc_track_caller(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memdup_sockptr_nul(sockptr_t src, size_t len)
{
 char *p = __kmalloc_track_caller(len + 1, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)), (unsigned long)__builtin_return_address(0));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_sockptr(p, src, len)) {
  kfree(p);
  return ERR_PTR(-14);
 }
 p[len] = '\0';
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long strncpy_from_sockptr(char *dst, sockptr_t src, size_t count)
{
 if (sockptr_is_kernel(src)) {
  size_t len = __builtin_choose_expr(((!!(sizeof((typeof(strnlen(src.kernel, count - 1) + 1) *)1 == (typeof(count) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(strnlen(src.kernel, count - 1) + 1) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(count) * 0l)) : (int *)8))))), ((strnlen(src.kernel, count - 1) + 1) < (count) ? (strnlen(src.kernel, count - 1) + 1) : (count)), ({ typeof(strnlen(src.kernel, count - 1) + 1) __UNIQUE_ID___x264 = (strnlen(src.kernel, count - 1) + 1); typeof(count) __UNIQUE_ID___y265 = (count); ((__UNIQUE_ID___x264) < (__UNIQUE_ID___y265) ? (__UNIQUE_ID___x264) : (__UNIQUE_ID___y265)); }));

  memcpy(dst, src.kernel, len);
  return len;
 }
 return strncpy_from_user(dst, src.user, count);
}
# 7 "./include/linux/bpfptr.h" 2

typedef sockptr_t bpfptr_t;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpfptr_is_kernel(bpfptr_t bpfptr)
{
 return bpfptr.is_kernel;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t KERNEL_BPFPTR(void *p)
{
 return (bpfptr_t) { .kernel = p, .is_kernel = true };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t USER_BPFPTR(void *p)
{
 return (bpfptr_t) { .user = p };
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bpfptr_t make_bpfptr(u64 addr, bool is_kernel)
{
 if (is_kernel)
  return KERNEL_BPFPTR((void*) (uintptr_t) addr);
 else
  return USER_BPFPTR(( { ({ u64 __dummy; typeof((addr)) __dummy2; (void)(&__dummy == &__dummy2); 1; }); (void *)(uintptr_t)(addr); } ));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpfptr_is_null(bpfptr_t bpfptr)
{
 if (bpfptr_is_kernel(bpfptr))
  return !bpfptr.kernel;
 return !bpfptr.user;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpfptr_add(bpfptr_t *bpfptr, size_t val)
{
 if (bpfptr_is_kernel(*bpfptr))
  bpfptr->kernel += val;
 else
  bpfptr->user += val;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_bpfptr_offset(void *dst, bpfptr_t src,
       size_t offset, size_t size)
{
 return copy_from_sockptr_offset(dst, (sockptr_t) src, offset, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_from_bpfptr(void *dst, bpfptr_t src, size_t size)
{
 return copy_from_bpfptr_offset(dst, src, 0, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_to_bpfptr_offset(bpfptr_t dst, size_t offset,
     const void *src, size_t size)
{
 return copy_to_sockptr_offset((sockptr_t) dst, offset, src, size);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmemdup_bpfptr(bpfptr_t src, size_t len)
{
 void *p = kvmalloc(len, ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x2000u));

 if (!p)
  return ERR_PTR(-12);
 if (copy_from_bpfptr(p, src, len)) {
  kvfree(p);
  return ERR_PTR(-14);
 }
 return p;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long strncpy_from_bpfptr(char *dst, bpfptr_t src, size_t count)
{
 return strncpy_from_sockptr(dst, (sockptr_t) src, count);
}
# 26 "./include/linux/bpf.h" 2

struct bpf_verifier_env;
struct bpf_verifier_log;
struct perf_event;
struct bpf_prog;
struct bpf_prog_aux;
struct bpf_map;
struct sock;
struct seq_file;
struct btf;
struct btf_type;
struct exception_table_entry;
struct seq_operations;
struct bpf_iter_aux_info;
struct bpf_local_storage;
struct bpf_local_storage_map;
struct kobject;
struct mem_cgroup;
struct module;
struct bpf_func_state;

extern struct idr btf_idr;
extern spinlock_t btf_idr_lock;
extern struct kobject *btf_kobj;

typedef int (*bpf_iter_init_seq_priv_t)(void *private_data,
     struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_fini_seq_priv_t)(void *private_data);
struct bpf_iter_seq_info {
 const struct seq_operations *seq_ops;
 bpf_iter_init_seq_priv_t init_seq_private;
 bpf_iter_fini_seq_priv_t fini_seq_private;
 u32 seq_priv_size;
};


struct bpf_map_ops {

 int (*map_alloc_check)(union bpf_attr *attr);
 struct bpf_map *(*map_alloc)(union bpf_attr *attr);
 void (*map_release)(struct bpf_map *map, struct file *map_file);
 void (*map_free)(struct bpf_map *map);
 int (*map_get_next_key)(struct bpf_map *map, void *key, void *next_key);
 void (*map_release_uref)(struct bpf_map *map);
 void *(*map_lookup_elem_sys_only)(struct bpf_map *map, void *key);
 int (*map_lookup_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_lookup_and_delete_elem)(struct bpf_map *map, void *key,
       void *value, u64 flags);
 int (*map_lookup_and_delete_batch)(struct bpf_map *map,
        const union bpf_attr *attr,
        union bpf_attr *uattr);
 int (*map_update_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);
 int (*map_delete_batch)(struct bpf_map *map, const union bpf_attr *attr,
    union bpf_attr *uattr);


 void *(*map_lookup_elem)(struct bpf_map *map, void *key);
 int (*map_update_elem)(struct bpf_map *map, void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_map *map, void *key);
 int (*map_push_elem)(struct bpf_map *map, void *value, u64 flags);
 int (*map_pop_elem)(struct bpf_map *map, void *value);
 int (*map_peek_elem)(struct bpf_map *map, void *value);


 void *(*map_fd_get_ptr)(struct bpf_map *map, struct file *map_file,
    int fd);
 void (*map_fd_put_ptr)(void *ptr);
 int (*map_gen_lookup)(struct bpf_map *map, struct bpf_insn *insn_buf);
 u32 (*map_fd_sys_lookup_elem)(void *ptr);
 void (*map_seq_show_elem)(struct bpf_map *map, void *key,
      struct seq_file *m);
 int (*map_check_btf)(const struct bpf_map *map,
        const struct btf *btf,
        const struct btf_type *key_type,
        const struct btf_type *value_type);


 int (*map_poke_track)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_untrack)(struct bpf_map *map, struct bpf_prog_aux *aux);
 void (*map_poke_run)(struct bpf_map *map, u32 key, struct bpf_prog *old,
        struct bpf_prog *new);


 int (*map_direct_value_addr)(const struct bpf_map *map,
         u64 *imm, u32 off);
 int (*map_direct_value_meta)(const struct bpf_map *map,
         u64 imm, u32 *off);
 int (*map_mmap)(struct bpf_map *map, struct vm_area_struct *vma);
 __poll_t (*map_poll)(struct bpf_map *map, struct file *filp,
        struct poll_table_struct *pts);


 int (*map_local_storage_charge)(struct bpf_local_storage_map *smap,
     void *owner, u32 size);
 void (*map_local_storage_uncharge)(struct bpf_local_storage_map *smap,
        void *owner, u32 size);
 struct bpf_local_storage ** (*map_owner_storage_ptr)(void *owner);


 int (*map_redirect)(struct bpf_map *map, u32 ifindex, u64 flags);
# 138 "./include/linux/bpf.h"
 bool (*map_meta_equal)(const struct bpf_map *meta0,
          const struct bpf_map *meta1);


 int (*map_set_for_each_callback_args)(struct bpf_verifier_env *env,
           struct bpf_func_state *caller,
           struct bpf_func_state *callee);
 int (*map_for_each_callback)(struct bpf_map *map, void *callback_fn,
         void *callback_ctx, u64 flags);


 const char * const map_btf_name;
 int *map_btf_id;


 const struct bpf_iter_seq_info *iter_seq_info;
};

struct bpf_map {



 const struct bpf_map_ops *ops __attribute__((__aligned__((1 << 7))));
 struct bpf_map *inner_map_meta;



 enum bpf_map_type map_type;
 u32 key_size;
 u32 value_size;
 u32 max_entries;
 u32 map_flags;
 int spin_lock_off;
 int timer_off;
 u32 id;
 int numa_node;
 u32 btf_key_type_id;
 u32 btf_value_type_id;
 struct btf *btf;

 struct mem_cgroup *memcg;

 char name[16U];
 u32 btf_vmlinux_value_type_id;
 bool bypass_spec_v1;
 bool frozen;





 atomic64_t refcnt __attribute__((__aligned__((1 << 7))));
 atomic64_t usercnt;
 struct work_struct work;
 struct mutex freeze_mutex;
 u64 writecnt;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool map_value_has_spin_lock(const struct bpf_map *map)
{
 return map->spin_lock_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool map_value_has_timer(const struct bpf_map *map)
{
 return map->timer_off >= 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_and_init_map_value(struct bpf_map *map, void *dst)
{
 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0))
  *(struct bpf_spin_lock *)(dst + map->spin_lock_off) =
   (struct bpf_spin_lock){};
 if (__builtin_expect(!!(map_value_has_timer(map)), 0))
  *(struct bpf_timer *)(dst + map->timer_off) =
   (struct bpf_timer){};
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_map_value(struct bpf_map *map, void *dst, void *src)
{
 u32 s_off = 0, s_sz = 0, t_off = 0, t_sz = 0;

 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0)) {
  s_off = map->spin_lock_off;
  s_sz = sizeof(struct bpf_spin_lock);
 } else if (__builtin_expect(!!(map_value_has_timer(map)), 0)) {
  t_off = map->timer_off;
  t_sz = sizeof(struct bpf_timer);
 }

 if (__builtin_expect(!!(s_sz || t_sz), 0)) {
  if (s_off < t_off || !s_sz) {
   do { typeof(s_off) __tmp = (s_off); (s_off) = (t_off); (t_off) = __tmp; } while (0);
   do { typeof(s_sz) __tmp = (s_sz); (s_sz) = (t_sz); (t_sz) = __tmp; } while (0);
  }
  memcpy(dst, src, t_off);
  memcpy(dst + t_off + t_sz,
         src + t_off + t_sz,
         s_off - t_off - t_sz);
  memcpy(dst + s_off + s_sz,
         src + s_off + s_sz,
         map->value_size - s_off - s_sz);
 } else {
  memcpy(dst, src, map->value_size);
 }
}
void copy_map_value_locked(struct bpf_map *map, void *dst, void *src,
      bool lock_src);
void bpf_timer_cancel_and_free(void *timer);
int bpf_obj_name_cpy(char *dst, const char *src, unsigned int size);

struct bpf_offload_dev;
struct bpf_offloaded_map;

struct bpf_map_dev_ops {
 int (*map_get_next_key)(struct bpf_offloaded_map *map,
    void *key, void *next_key);
 int (*map_lookup_elem)(struct bpf_offloaded_map *map,
          void *key, void *value);
 int (*map_update_elem)(struct bpf_offloaded_map *map,
          void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_offloaded_map *map, void *key);
};

struct bpf_offloaded_map {
 struct bpf_map map;
 struct net_device *netdev;
 const struct bpf_map_dev_ops *dev_ops;
 void *dev_priv;
 struct list_head offloads;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_offloaded_map *map_to_offmap(struct bpf_map *map)
{
 return ({ void *__mptr = (void *)(map); do { extern void __compiletime_assert_266(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(map)), typeof(((struct bpf_offloaded_map *)0)->map)) && !__builtin_types_compatible_p(typeof(*(map)), typeof(void))))) __compiletime_assert_266(); } while (0); ((struct bpf_offloaded_map *)(__mptr - __builtin_offsetof(struct bpf_offloaded_map, map))); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_offload_neutral(const struct bpf_map *map)
{
 return map->map_type == BPF_MAP_TYPE_PERF_EVENT_ARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_support_seq_show(const struct bpf_map *map)
{
 return (map->btf_value_type_id || map->btf_vmlinux_value_type_id) &&
  map->ops->map_seq_show_elem;
}

int map_check_no_btf(const struct bpf_map *map,
       const struct btf *btf,
       const struct btf_type *key_type,
       const struct btf_type *value_type);

bool bpf_map_meta_equal(const struct bpf_map *meta0,
   const struct bpf_map *meta1);

extern const struct bpf_map_ops bpf_map_offload_ops;


enum bpf_arg_type {
 ARG_DONTCARE = 0,




 ARG_CONST_MAP_PTR,
 ARG_PTR_TO_MAP_KEY,
 ARG_PTR_TO_MAP_VALUE,
 ARG_PTR_TO_UNINIT_MAP_VALUE,
 ARG_PTR_TO_MAP_VALUE_OR_NULL,




 ARG_PTR_TO_MEM,
 ARG_PTR_TO_MEM_OR_NULL,
 ARG_PTR_TO_UNINIT_MEM,




 ARG_CONST_SIZE,
 ARG_CONST_SIZE_OR_ZERO,

 ARG_PTR_TO_CTX,
 ARG_PTR_TO_CTX_OR_NULL,
 ARG_ANYTHING,
 ARG_PTR_TO_SPIN_LOCK,
 ARG_PTR_TO_SOCK_COMMON,
 ARG_PTR_TO_INT,
 ARG_PTR_TO_LONG,
 ARG_PTR_TO_SOCKET,
 ARG_PTR_TO_SOCKET_OR_NULL,
 ARG_PTR_TO_BTF_ID,
 ARG_PTR_TO_ALLOC_MEM,
 ARG_PTR_TO_ALLOC_MEM_OR_NULL,
 ARG_CONST_ALLOC_SIZE_OR_ZERO,
 ARG_PTR_TO_BTF_ID_SOCK_COMMON,
 ARG_PTR_TO_PERCPU_BTF_ID,
 ARG_PTR_TO_FUNC,
 ARG_PTR_TO_STACK_OR_NULL,
 ARG_PTR_TO_CONST_STR,
 ARG_PTR_TO_TIMER,
 __BPF_ARG_TYPE_MAX,
};


enum bpf_return_type {
 RET_INTEGER,
 RET_VOID,
 RET_PTR_TO_MAP_VALUE,
 RET_PTR_TO_MAP_VALUE_OR_NULL,
 RET_PTR_TO_SOCKET_OR_NULL,
 RET_PTR_TO_TCP_SOCK_OR_NULL,
 RET_PTR_TO_SOCK_COMMON_OR_NULL,
 RET_PTR_TO_ALLOC_MEM_OR_NULL,
 RET_PTR_TO_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID_OR_NULL,
 RET_PTR_TO_MEM_OR_BTF_ID,
 RET_PTR_TO_BTF_ID,
};





struct bpf_func_proto {
 u64 (*func)(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
 bool gpl_only;
 bool pkt_access;
 enum bpf_return_type ret_type;
 union {
  struct {
   enum bpf_arg_type arg1_type;
   enum bpf_arg_type arg2_type;
   enum bpf_arg_type arg3_type;
   enum bpf_arg_type arg4_type;
   enum bpf_arg_type arg5_type;
  };
  enum bpf_arg_type arg_type[5];
 };
 union {
  struct {
   u32 *arg1_btf_id;
   u32 *arg2_btf_id;
   u32 *arg3_btf_id;
   u32 *arg4_btf_id;
   u32 *arg5_btf_id;
  };
  u32 *arg_btf_id[5];
 };
 int *ret_btf_id;
 bool (*allowed)(const struct bpf_prog *prog);
};





struct bpf_context;

enum bpf_access_type {
 BPF_READ = 1,
 BPF_WRITE = 2
};
# 415 "./include/linux/bpf.h"
enum bpf_reg_type {
 NOT_INIT = 0,
 SCALAR_VALUE,
 PTR_TO_CTX,
 CONST_PTR_TO_MAP,
 PTR_TO_MAP_VALUE,
 PTR_TO_MAP_VALUE_OR_NULL,
 PTR_TO_STACK,
 PTR_TO_PACKET_META,
 PTR_TO_PACKET,
 PTR_TO_PACKET_END,
 PTR_TO_FLOW_KEYS,
 PTR_TO_SOCKET,
 PTR_TO_SOCKET_OR_NULL,
 PTR_TO_SOCK_COMMON,
 PTR_TO_SOCK_COMMON_OR_NULL,
 PTR_TO_TCP_SOCK,
 PTR_TO_TCP_SOCK_OR_NULL,
 PTR_TO_TP_BUFFER,
 PTR_TO_XDP_SOCK,
# 445 "./include/linux/bpf.h"
 PTR_TO_BTF_ID,




 PTR_TO_BTF_ID_OR_NULL,
 PTR_TO_MEM,
 PTR_TO_MEM_OR_NULL,
 PTR_TO_RDONLY_BUF,
 PTR_TO_RDONLY_BUF_OR_NULL,
 PTR_TO_RDWR_BUF,
 PTR_TO_RDWR_BUF_OR_NULL,
 PTR_TO_PERCPU_BTF_ID,
 PTR_TO_FUNC,
 PTR_TO_MAP_KEY,
 __BPF_REG_TYPE_MAX,
};




struct bpf_insn_access_aux {
 enum bpf_reg_type reg_type;
 union {
  int ctx_field_size;
  struct {
   struct btf *btf;
   u32 btf_id;
  };
 };
 struct bpf_verifier_log *log;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
bpf_ctx_record_field_size(struct bpf_insn_access_aux *aux, u32 size)
{
 aux->ctx_field_size = size;
}

struct bpf_prog_ops {
 int (*test_run)(struct bpf_prog *prog, const union bpf_attr *kattr,
   union bpf_attr *uattr);
};

struct bpf_verifier_ops {

 const struct bpf_func_proto *
 (*get_func_proto)(enum bpf_func_id func_id,
     const struct bpf_prog *prog);




 bool (*is_valid_access)(int off, int size, enum bpf_access_type type,
    const struct bpf_prog *prog,
    struct bpf_insn_access_aux *info);
 int (*gen_prologue)(struct bpf_insn *insn, bool direct_write,
       const struct bpf_prog *prog);
 int (*gen_ld_abs)(const struct bpf_insn *orig,
     struct bpf_insn *insn_buf);
 u32 (*convert_ctx_access)(enum bpf_access_type type,
      const struct bpf_insn *src,
      struct bpf_insn *dst,
      struct bpf_prog *prog, u32 *target_size);
 int (*btf_struct_access)(struct bpf_verifier_log *log,
     const struct btf *btf,
     const struct btf_type *t, int off, int size,
     enum bpf_access_type atype,
     u32 *next_btf_id);
 bool (*check_kfunc_call)(u32 kfunc_btf_id);
};

struct bpf_prog_offload_ops {

 int (*insn_hook)(struct bpf_verifier_env *env,
    int insn_idx, int prev_insn_idx);
 int (*finalize)(struct bpf_verifier_env *env);

 int (*replace_insn)(struct bpf_verifier_env *env, u32 off,
       struct bpf_insn *insn);
 int (*remove_insns)(struct bpf_verifier_env *env, u32 off, u32 cnt);

 int (*prepare)(struct bpf_prog *prog);
 int (*translate)(struct bpf_prog *prog);
 void (*destroy)(struct bpf_prog *prog);
};

struct bpf_prog_offload {
 struct bpf_prog *prog;
 struct net_device *netdev;
 struct bpf_offload_dev *offdev;
 void *dev_priv;
 struct list_head offloads;
 bool dev_state;
 bool opt_failed;
 void *jited_image;
 u32 jited_len;
};

enum bpf_cgroup_storage_type {
 BPF_CGROUP_STORAGE_SHARED,
 BPF_CGROUP_STORAGE_PERCPU,
 __BPF_CGROUP_STORAGE_MAX
};
# 562 "./include/linux/bpf.h"
struct btf_func_model {
 u8 ret_size;
 u8 nr_args;
 u8 arg_size[12];
};
# 592 "./include/linux/bpf.h"
struct bpf_tramp_progs {
 struct bpf_prog *progs[38];
 int nr_progs;
};
# 617 "./include/linux/bpf.h"
struct bpf_tramp_image;
int arch_prepare_bpf_trampoline(struct bpf_tramp_image *tr, void *image, void *image_end,
    const struct btf_func_model *m, u32 flags,
    struct bpf_tramp_progs *tprogs,
    void *orig_call);

u64 __attribute__((__no_instrument_function__)) __bpf_prog_enter(struct bpf_prog *prog);
void __attribute__((__no_instrument_function__)) __bpf_prog_exit(struct bpf_prog *prog, u64 start);
u64 __attribute__((__no_instrument_function__)) __bpf_prog_enter_sleepable(struct bpf_prog *prog);
void __attribute__((__no_instrument_function__)) __bpf_prog_exit_sleepable(struct bpf_prog *prog, u64 start);
void __attribute__((__no_instrument_function__)) __bpf_tramp_enter(struct bpf_tramp_image *tr);
void __attribute__((__no_instrument_function__)) __bpf_tramp_exit(struct bpf_tramp_image *tr);

struct bpf_ksym {
 unsigned long start;
 unsigned long end;
 char name[512];
 struct list_head lnode;
 struct latch_tree_node tnode;
 bool prog;
};

enum bpf_tramp_prog_type {
 BPF_TRAMP_FENTRY,
 BPF_TRAMP_FEXIT,
 BPF_TRAMP_MODIFY_RETURN,
 BPF_TRAMP_MAX,
 BPF_TRAMP_REPLACE,
};

struct bpf_tramp_image {
 void *image;
 struct bpf_ksym ksym;
 struct percpu_ref pcref;
 void *ip_after_call;
 void *ip_epilogue;
 union {
  struct callback_head rcu;
  struct work_struct work;
 };
};

struct bpf_trampoline {

 struct hlist_node hlist;

 struct mutex mutex;
 refcount_t refcnt;
 u64 key;
 struct {
  struct btf_func_model model;
  void *addr;
  bool ftrace_managed;
 } func;




 struct bpf_prog *extension_prog;

 struct hlist_head progs_hlist[BPF_TRAMP_MAX];

 int progs_cnt[BPF_TRAMP_MAX];

 struct bpf_tramp_image *cur_image;
 u64 selector;
 struct module *mod;
};

struct bpf_attach_target_info {
 struct btf_func_model fmodel;
 long tgt_addr;
 const char *tgt_name;
 const struct btf_type *tgt_type;
};



struct bpf_dispatcher_prog {
 struct bpf_prog *prog;
 refcount_t users;
};

struct bpf_dispatcher {

 struct mutex mutex;
 void *func;
 struct bpf_dispatcher_prog progs[48];
 int num_progs;
 void *image;
 u32 image_off;
 struct bpf_ksym ksym;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__no_sanitize__("cfi"))) unsigned int bpf_dispatcher_nop_func(
 const void *ctx,
 const struct bpf_insn *insnsi,
 unsigned int (*bpf_func)(const void *,
     const struct bpf_insn *))
{
 return bpf_func(ctx, insnsi);
}

int bpf_trampoline_link_prog(struct bpf_prog *prog, struct bpf_trampoline *tr);
int bpf_trampoline_unlink_prog(struct bpf_prog *prog, struct bpf_trampoline *tr);
struct bpf_trampoline *bpf_trampoline_get(u64 key,
       struct bpf_attach_target_info *tgt_info);
void bpf_trampoline_put(struct bpf_trampoline *tr);
# 759 "./include/linux/bpf.h"
void bpf_dispatcher_change_prog(struct bpf_dispatcher *d, struct bpf_prog *from,
    struct bpf_prog *to);

void *bpf_jit_alloc_exec_page(void);
void bpf_image_ksym_add(void *data, struct bpf_ksym *ksym);
void bpf_image_ksym_del(struct bpf_ksym *ksym);
void bpf_ksym_add(struct bpf_ksym *ksym);
void bpf_ksym_del(struct bpf_ksym *ksym);
int bpf_jit_charge_modmem(u32 pages);
void bpf_jit_uncharge_modmem(u32 pages);
# 799 "./include/linux/bpf.h"
struct bpf_func_info_aux {
 u16 linkage;
 bool unreliable;
};

enum bpf_jit_poke_reason {
 BPF_POKE_REASON_TAIL_CALL,
};


struct bpf_jit_poke_descriptor {
 void *tailcall_target;
 void *tailcall_bypass;
 void *bypass_addr;
 void *aux;
 union {
  struct {
   struct bpf_map *map;
   u32 key;
  } tail_call;
 };
 bool tailcall_target_stable;
 u8 adj_off;
 u16 reason;
 u32 insn_idx;
};


struct bpf_ctx_arg_aux {
 u32 offset;
 enum bpf_reg_type reg_type;
 u32 btf_id;
};

struct btf_mod_pair {
 struct btf *btf;
 struct module *module;
};

struct bpf_kfunc_desc_tab;

struct bpf_prog_aux {
 atomic64_t refcnt;
 u32 used_map_cnt;
 u32 used_btf_cnt;
 u32 max_ctx_offset;
 u32 max_pkt_offset;
 u32 max_tp_access;
 u32 stack_depth;
 u32 id;
 u32 func_cnt;
 u32 func_idx;
 u32 attach_btf_id;
 u32 ctx_arg_info_size;
 u32 max_rdonly_access;
 u32 max_rdwr_access;
 struct btf *attach_btf;
 const struct bpf_ctx_arg_aux *ctx_arg_info;
 struct mutex dst_mutex;
 struct bpf_prog *dst_prog;
 struct bpf_trampoline *dst_trampoline;
 enum bpf_prog_type saved_dst_prog_type;
 enum bpf_attach_type saved_dst_attach_type;
 bool verifier_zext;
 bool offload_requested;
 bool attach_btf_trace;
 bool func_proto_unreliable;
 bool sleepable;
 bool tail_call_reachable;
 struct hlist_node tramp_hlist;

 const struct btf_type *attach_func_proto;

 const char *attach_func_name;
 struct bpf_prog **func;
 void *jit_data;
 struct bpf_jit_poke_descriptor *poke_tab;
 struct bpf_kfunc_desc_tab *kfunc_tab;
 u32 size_poke_tab;
 struct bpf_ksym ksym;
 const struct bpf_prog_ops *ops;
 struct bpf_map **used_maps;
 struct mutex used_maps_mutex;
 struct btf_mod_pair *used_btfs;
 struct bpf_prog *prog;
 struct user_struct *user;
 u64 load_time;
 struct bpf_map *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
 char name[16U];



 struct bpf_prog_offload *offload;
 struct btf *btf;
 struct bpf_func_info *func_info;
 struct bpf_func_info_aux *func_info_aux;






 struct bpf_line_info *linfo;







 void **jited_linfo;
 u32 func_info_cnt;
 u32 nr_linfo;




 u32 linfo_idx;
 u32 num_exentries;
 struct exception_table_entry *extable;
 union {
  struct work_struct work;
  struct callback_head rcu;
 };
};

struct bpf_array_aux {





 enum bpf_prog_type type;
 bool jited;

 struct list_head poke_progs;
 struct bpf_map *map;
 struct mutex poke_mutex;
 struct work_struct work;
};

struct bpf_link {
 atomic64_t refcnt;
 u32 id;
 enum bpf_link_type type;
 const struct bpf_link_ops *ops;
 struct bpf_prog *prog;
 struct work_struct work;
};

struct bpf_link_ops {
 void (*release)(struct bpf_link *link);
 void (*dealloc)(struct bpf_link *link);
 int (*detach)(struct bpf_link *link);
 int (*update_prog)(struct bpf_link *link, struct bpf_prog *new_prog,
      struct bpf_prog *old_prog);
 void (*show_fdinfo)(const struct bpf_link *link, struct seq_file *seq);
 int (*fill_link_info)(const struct bpf_link *link,
         struct bpf_link_info *info);
};

struct bpf_link_primer {
 struct bpf_link *link;
 struct file *file;
 int fd;
 u32 id;
};

struct bpf_struct_ops_value;
struct btf_member;


struct bpf_struct_ops {
 const struct bpf_verifier_ops *verifier_ops;
 int (*init)(struct btf *btf);
 int (*check_member)(const struct btf_type *t,
       const struct btf_member *member);
 int (*init_member)(const struct btf_type *t,
      const struct btf_member *member,
      void *kdata, const void *udata);
 int (*reg)(void *kdata);
 void (*unreg)(void *kdata);
 const struct btf_type *type;
 const struct btf_type *value_type;
 const char *name;
 struct btf_func_model func_models[64];
 u32 type_id;
 u32 value_id;
};



const struct bpf_struct_ops *bpf_struct_ops_find(u32 type_id);
void bpf_struct_ops_init(struct btf *btf, struct bpf_verifier_log *log);
bool bpf_struct_ops_get(const void *kdata);
void bpf_struct_ops_put(const void *kdata);
int bpf_struct_ops_map_sys_lookup_elem(struct bpf_map *map, void *key,
           void *value);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_try_module_get(const void *data, struct module *owner)
{
 if (owner == ((void *)((0xeB9FUL << 2) + (0x5deadbeef0000000UL))))
  return bpf_struct_ops_get(data);
 else
  return try_module_get(owner);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_module_put(const void *data, struct module *owner)
{
 if (owner == ((void *)((0xeB9FUL << 2) + (0x5deadbeef0000000UL))))
  bpf_struct_ops_put(data);
 else
  module_put(owner);
}
# 1036 "./include/linux/bpf.h"
struct bpf_array {
 struct bpf_map map;
 u32 elem_size;
 u32 index_mask;
 struct bpf_array_aux *aux;
 union {
  char value[0] __attribute__((__aligned__(8)));
  void *ptrs[0] __attribute__((__aligned__(8)));
  void *pptrs[0] __attribute__((__aligned__(8)));
 };
};
# 1059 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 bpf_map_flags_to_cap(struct bpf_map *map)
{
 u32 access_flags = map->map_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);




 if (access_flags & BPF_F_RDONLY_PROG)
  return ((((1UL))) << (0));
 else if (access_flags & BPF_F_WRONLY_PROG)
  return ((((1UL))) << (1));
 else
  return ((((1UL))) << (0)) | ((((1UL))) << (1));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_flags_access_ok(u32 access_flags)
{
 return (access_flags & (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG)) !=
        (BPF_F_RDONLY_PROG | BPF_F_WRONLY_PROG);
}

struct bpf_event_entry {
 struct perf_event *event;
 struct file *perf_file;
 struct file *map_file;
 struct callback_head rcu;
};

bool bpf_prog_array_compatible(struct bpf_array *array, const struct bpf_prog *fp);
int bpf_prog_calc_tag(struct bpf_prog *fp);

const struct bpf_func_proto *bpf_get_trace_printk_proto(void);

typedef unsigned long (*bpf_ctx_copy_t)(void *dst, const void *src,
     unsigned long off, unsigned long len);
typedef u32 (*bpf_convert_ctx_access_t)(enum bpf_access_type type,
     const struct bpf_insn *src,
     struct bpf_insn *dst,
     struct bpf_prog *prog,
     u32 *target_size);

u64 bpf_event_output(struct bpf_map *map, u64 flags, void *meta, u64 meta_size,
       void *ctx, u64 ctx_size, bpf_ctx_copy_t ctx_copy);
# 1115 "./include/linux/bpf.h"
struct bpf_prog_array_item {
 struct bpf_prog *prog;
 union {
  struct bpf_cgroup_storage *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
  u64 bpf_cookie;
 };
};

struct bpf_prog_array {
 struct callback_head rcu;
 struct bpf_prog_array_item items[];
};

struct bpf_prog_array *bpf_prog_array_alloc(u32 prog_cnt, gfp_t flags);
void bpf_prog_array_free(struct bpf_prog_array *progs);
int bpf_prog_array_length(struct bpf_prog_array *progs);
bool bpf_prog_array_is_empty(struct bpf_prog_array *array);
int bpf_prog_array_copy_to_user(struct bpf_prog_array *progs,
    __u32 *prog_ids, u32 cnt);

void bpf_prog_array_delete_safe(struct bpf_prog_array *progs,
    struct bpf_prog *old_prog);
int bpf_prog_array_delete_safe_at(struct bpf_prog_array *array, int index);
int bpf_prog_array_update_at(struct bpf_prog_array *array, int index,
        struct bpf_prog *prog);
int bpf_prog_array_copy_info(struct bpf_prog_array *array,
        u32 *prog_ids, u32 request_cnt,
        u32 *prog_cnt);
int bpf_prog_array_copy(struct bpf_prog_array *old_array,
   struct bpf_prog *exclude_prog,
   struct bpf_prog *include_prog,
   u64 bpf_cookie,
   struct bpf_prog_array **new_array);

struct bpf_run_ctx {};

struct bpf_cg_run_ctx {
 struct bpf_run_ctx run_ctx;
 const struct bpf_prog_array_item *prog_item;
};

struct bpf_trace_run_ctx {
 struct bpf_run_ctx run_ctx;
 u64 bpf_cookie;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_run_ctx *bpf_set_run_ctx(struct bpf_run_ctx *new_ctx)
{
 struct bpf_run_ctx *old_ctx = ((void *)0);


 old_ctx = get_current()->bpf_ctx;
 get_current()->bpf_ctx = new_ctx;

 return old_ctx;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_reset_run_ctx(struct bpf_run_ctx *old_ctx)
{

 get_current()->bpf_ctx = old_ctx;

}






typedef u32 (*bpf_prog_run_fn)(const struct bpf_prog *prog, const void *ctx);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG_FLAGS(const struct bpf_prog_array *array_rcu,
       const void *ctx, bpf_prog_run_fn run_prog,
       u32 *ret_flags)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;
 u32 func_ret;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { extern void __compiletime_assert_267(void) ; if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_267(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { extern void __compiletime_assert_268(void) ; if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_268(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  func_ret = run_prog(prog, ctx);
  ret &= (func_ret & 1);
  *(ret_flags) |= (func_ret >> 1);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY_CG(const struct bpf_prog_array *array_rcu,
        const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_cg_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { extern void __compiletime_assert_269(void) ; if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_269(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 item = &array->items[0];
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 while ((prog = ({ do { extern void __compiletime_assert_270(void) ; if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_270(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.prog_item = item;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
 rcu_read_unlock();
 migrate_enable();
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
BPF_PROG_RUN_ARRAY(const struct bpf_prog_array *array_rcu,
     const void *ctx, bpf_prog_run_fn run_prog)
{
 const struct bpf_prog_array_item *item;
 const struct bpf_prog *prog;
 const struct bpf_prog_array *array;
 struct bpf_run_ctx *old_run_ctx;
 struct bpf_trace_run_ctx run_ctx;
 u32 ret = 1;

 migrate_disable();
 rcu_read_lock();
 array = ({ typeof(*(array_rcu)) *________p1 = (typeof(*(array_rcu)) *)({ do { extern void __compiletime_assert_271(void) ; if (!((sizeof((array_rcu)) == sizeof(char) || sizeof((array_rcu)) == sizeof(short) || sizeof((array_rcu)) == sizeof(int) || sizeof((array_rcu)) == sizeof(long)) || sizeof((array_rcu)) == sizeof(long long))) __compiletime_assert_271(); } while (0); (*(const volatile typeof( _Generic(((array_rcu)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((array_rcu)))) *)&((array_rcu))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(array_rcu)) *)(________p1)); });
 if (__builtin_expect(!!(!array), 0))
  goto out;
 old_run_ctx = bpf_set_run_ctx(&run_ctx.run_ctx);
 item = &array->items[0];
 while ((prog = ({ do { extern void __compiletime_assert_272(void) ; if (!((sizeof(item->prog) == sizeof(char) || sizeof(item->prog) == sizeof(short) || sizeof(item->prog) == sizeof(int) || sizeof(item->prog) == sizeof(long)) || sizeof(item->prog) == sizeof(long long))) __compiletime_assert_272(); } while (0); (*(const volatile typeof( _Generic((item->prog), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (item->prog))) *)&(item->prog)); }))) {
  run_ctx.bpf_cookie = item->bpf_cookie;
  ret &= run_prog(prog, ctx);
  item++;
 }
 bpf_reset_run_ctx(old_run_ctx);
out:
 rcu_read_unlock();
 migrate_enable();
 return ret;
}
# 1311 "./include/linux/bpf.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) bpf_prog_active;
extern struct mutex bpf_stats_enabled_mutex;
# 1326 "./include/linux/bpf.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_disable_instrumentation(void)
{
 migrate_disable();
 if (0)
  do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_enable_instrumentation(void)
{
 if (0)
  do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 2: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 4: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; case 8: do { unsigned long __flags; do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __flags = arch_local_irq_save(); } while (0); do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0); do { ({ unsigned long __dummy; typeof(__flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(__flags); } while (0); } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_prog_active)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(bpf_prog_active)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active))); (typeof((typeof(*(&(bpf_prog_active))) *)(&(bpf_prog_active)))) (__ptr + ((local_paca->data_offset))); }); }) += -(typeof(bpf_prog_active))(1); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 migrate_enable();
}

extern const struct file_operations bpf_map_fops;
extern const struct file_operations bpf_prog_fops;
extern const struct file_operations bpf_iter_fops;







# 1 "./include/linux/bpf_types.h" 1




extern const struct bpf_prog_ops sk_filter_prog_ops; extern const struct bpf_verifier_ops sk_filter_verifier_ops;

extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;

extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;

extern const struct bpf_prog_ops xdp_prog_ops; extern const struct bpf_verifier_ops xdp_verifier_ops;


extern const struct bpf_prog_ops cg_skb_prog_ops; extern const struct bpf_verifier_ops cg_skb_verifier_ops;

extern const struct bpf_prog_ops cg_sock_prog_ops; extern const struct bpf_verifier_ops cg_sock_verifier_ops;

extern const struct bpf_prog_ops cg_sock_addr_prog_ops; extern const struct bpf_verifier_ops cg_sock_addr_verifier_ops;


extern const struct bpf_prog_ops lwt_in_prog_ops; extern const struct bpf_verifier_ops lwt_in_verifier_ops;

extern const struct bpf_prog_ops lwt_out_prog_ops; extern const struct bpf_verifier_ops lwt_out_verifier_ops;

extern const struct bpf_prog_ops lwt_xmit_prog_ops; extern const struct bpf_verifier_ops lwt_xmit_verifier_ops;

extern const struct bpf_prog_ops lwt_seg6local_prog_ops; extern const struct bpf_verifier_ops lwt_seg6local_verifier_ops;

extern const struct bpf_prog_ops sock_ops_prog_ops; extern const struct bpf_verifier_ops sock_ops_verifier_ops;

extern const struct bpf_prog_ops sk_skb_prog_ops; extern const struct bpf_verifier_ops sk_skb_verifier_ops;

extern const struct bpf_prog_ops sk_msg_prog_ops; extern const struct bpf_verifier_ops sk_msg_verifier_ops;

extern const struct bpf_prog_ops flow_dissector_prog_ops; extern const struct bpf_verifier_ops flow_dissector_verifier_ops;



extern const struct bpf_prog_ops kprobe_prog_ops; extern const struct bpf_verifier_ops kprobe_verifier_ops;

extern const struct bpf_prog_ops tracepoint_prog_ops; extern const struct bpf_verifier_ops tracepoint_verifier_ops;

extern const struct bpf_prog_ops perf_event_prog_ops; extern const struct bpf_verifier_ops perf_event_verifier_ops;

extern const struct bpf_prog_ops raw_tracepoint_prog_ops; extern const struct bpf_verifier_ops raw_tracepoint_verifier_ops;

extern const struct bpf_prog_ops raw_tracepoint_writable_prog_ops; extern const struct bpf_verifier_ops raw_tracepoint_writable_verifier_ops;

extern const struct bpf_prog_ops tracing_prog_ops; extern const struct bpf_verifier_ops tracing_verifier_ops;



extern const struct bpf_prog_ops cg_dev_prog_ops; extern const struct bpf_verifier_ops cg_dev_verifier_ops;

extern const struct bpf_prog_ops cg_sysctl_prog_ops; extern const struct bpf_verifier_ops cg_sysctl_verifier_ops;

extern const struct bpf_prog_ops cg_sockopt_prog_ops; extern const struct bpf_verifier_ops cg_sockopt_verifier_ops;







extern const struct bpf_prog_ops sk_reuseport_prog_ops; extern const struct bpf_verifier_ops sk_reuseport_verifier_ops;

extern const struct bpf_prog_ops sk_lookup_prog_ops; extern const struct bpf_verifier_ops sk_lookup_verifier_ops;



extern const struct bpf_prog_ops bpf_struct_ops_prog_ops; extern const struct bpf_verifier_ops bpf_struct_ops_verifier_ops;

extern const struct bpf_prog_ops bpf_extension_prog_ops; extern const struct bpf_verifier_ops bpf_extension_verifier_ops;






extern const struct bpf_prog_ops bpf_syscall_prog_ops; extern const struct bpf_verifier_ops bpf_syscall_verifier_ops;


extern const struct bpf_map_ops array_map_ops;
extern const struct bpf_map_ops percpu_array_map_ops;
extern const struct bpf_map_ops prog_array_map_ops;
extern const struct bpf_map_ops perf_event_array_map_ops;

extern const struct bpf_map_ops cgroup_array_map_ops;


extern const struct bpf_map_ops cgroup_storage_map_ops;
extern const struct bpf_map_ops cgroup_storage_map_ops;

extern const struct bpf_map_ops htab_map_ops;
extern const struct bpf_map_ops htab_percpu_map_ops;
extern const struct bpf_map_ops htab_lru_map_ops;
extern const struct bpf_map_ops htab_lru_percpu_map_ops;
extern const struct bpf_map_ops trie_map_ops;

extern const struct bpf_map_ops stack_trace_map_ops;

extern const struct bpf_map_ops array_of_maps_map_ops;
extern const struct bpf_map_ops htab_of_maps_map_ops;

extern const struct bpf_map_ops dev_map_ops;
extern const struct bpf_map_ops dev_map_hash_ops;
extern const struct bpf_map_ops sk_storage_map_ops;



extern const struct bpf_map_ops task_storage_map_ops;
extern const struct bpf_map_ops cpu_map_ops;




extern const struct bpf_map_ops sock_map_ops;
extern const struct bpf_map_ops sock_hash_ops;
extern const struct bpf_map_ops reuseport_array_ops;


extern const struct bpf_map_ops queue_map_ops;
extern const struct bpf_map_ops stack_map_ops;

extern const struct bpf_map_ops bpf_struct_ops_map_ops;

extern const struct bpf_map_ops ringbuf_map_ops;
# 1355 "./include/linux/bpf.h" 2




extern const struct bpf_prog_ops bpf_offload_prog_ops;
extern const struct bpf_verifier_ops tc_cls_act_analyzer_ops;
extern const struct bpf_verifier_ops xdp_analyzer_ops;

struct bpf_prog *bpf_prog_get(u32 ufd);
struct bpf_prog *bpf_prog_get_type_dev(u32 ufd, enum bpf_prog_type type,
           bool attach_drv);
void bpf_prog_add(struct bpf_prog *prog, int i);
void bpf_prog_sub(struct bpf_prog *prog, int i);
void bpf_prog_inc(struct bpf_prog *prog);
struct bpf_prog * __attribute__((__warn_unused_result__)) bpf_prog_inc_not_zero(struct bpf_prog *prog);
void bpf_prog_put(struct bpf_prog *prog);

void bpf_prog_free_id(struct bpf_prog *prog, bool do_idr_lock);
void bpf_map_free_id(struct bpf_map *map, bool do_idr_lock);

struct bpf_map *bpf_map_get(u32 ufd);
struct bpf_map *bpf_map_get_with_uref(u32 ufd);
struct bpf_map *__bpf_map_get(struct fd f);
void bpf_map_inc(struct bpf_map *map);
void bpf_map_inc_with_uref(struct bpf_map *map);
struct bpf_map * __attribute__((__warn_unused_result__)) bpf_map_inc_not_zero(struct bpf_map *map);
void bpf_map_put_with_uref(struct bpf_map *map);
void bpf_map_put(struct bpf_map *map);
void *bpf_map_area_alloc(u64 size, int numa_node);
void *bpf_map_area_mmapable_alloc(u64 size, int numa_node);
void bpf_map_area_free(void *base);
void bpf_map_init_from_attr(struct bpf_map *map, union bpf_attr *attr);
int generic_map_lookup_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
int generic_map_update_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
int generic_map_delete_batch(struct bpf_map *map,
         const union bpf_attr *attr,
         union bpf_attr *uattr);
struct bpf_map *bpf_map_get_curr_or_next(u32 *id);
struct bpf_prog *bpf_prog_get_curr_or_next(u32 *id);


void *bpf_map_kmalloc_node(const struct bpf_map *map, size_t size, gfp_t flags,
      int node);
void *bpf_map_kzalloc(const struct bpf_map *map, size_t size, gfp_t flags);
void *bpf_map_alloc_percpu(const struct bpf_map *map, size_t size,
        size_t align, gfp_t flags);
# 1427 "./include/linux/bpf.h"
extern int sysctl_unprivileged_bpf_disabled;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_ptr_leaks(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_uninit_stack(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_allow_ptr_to_map_access(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_bypass_spec_v1(void)
{
 return perfmon_capable();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_bypass_spec_v4(void)
{
 return perfmon_capable();
}

int bpf_map_new_fd(struct bpf_map *map, int flags);
int bpf_prog_new_fd(struct bpf_prog *prog);

void bpf_link_init(struct bpf_link *link, enum bpf_link_type type,
     const struct bpf_link_ops *ops, struct bpf_prog *prog);
int bpf_link_prime(struct bpf_link *link, struct bpf_link_primer *primer);
int bpf_link_settle(struct bpf_link_primer *primer);
void bpf_link_cleanup(struct bpf_link_primer *primer);
void bpf_link_inc(struct bpf_link *link);
void bpf_link_put(struct bpf_link *link);
int bpf_link_new_fd(struct bpf_link *link);
struct file *bpf_link_new_file(struct bpf_link *link, int *reserved_fd);
struct bpf_link *bpf_link_get_from_fd(u32 ufd);

int bpf_obj_pin_user(u32 ufd, const char *pathname);
int bpf_obj_get_user(const char *pathname, int flags);






struct bpf_iter_aux_info {
 struct bpf_map *map;
};

typedef int (*bpf_iter_attach_target_t)(struct bpf_prog *prog,
     union bpf_iter_link_info *linfo,
     struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_detach_target_t)(struct bpf_iter_aux_info *aux);
typedef void (*bpf_iter_show_fdinfo_t) (const struct bpf_iter_aux_info *aux,
     struct seq_file *seq);
typedef int (*bpf_iter_fill_link_info_t)(const struct bpf_iter_aux_info *aux,
      struct bpf_link_info *info);
typedef const struct bpf_func_proto *
(*bpf_iter_get_func_proto_t)(enum bpf_func_id func_id,
        const struct bpf_prog *prog);

enum bpf_iter_feature {
 BPF_ITER_RESCHED = ((((1UL))) << (0)),
};


struct bpf_iter_reg {
 const char *target;
 bpf_iter_attach_target_t attach_target;
 bpf_iter_detach_target_t detach_target;
 bpf_iter_show_fdinfo_t show_fdinfo;
 bpf_iter_fill_link_info_t fill_link_info;
 bpf_iter_get_func_proto_t get_func_proto;
 u32 ctx_arg_info_size;
 u32 feature;
 struct bpf_ctx_arg_aux ctx_arg_info[2];
 const struct bpf_iter_seq_info *seq_info;
};

struct bpf_iter_meta {
 union { struct seq_file * seq; __u64 :64; } __attribute__((aligned(8)));
 u64 session_id;
 u64 seq_num;
};

struct bpf_iter__bpf_map_elem {
 union { struct bpf_iter_meta * meta; __u64 :64; } __attribute__((aligned(8)));
 union { struct bpf_map * map; __u64 :64; } __attribute__((aligned(8)));
 union { void * key; __u64 :64; } __attribute__((aligned(8)));
 union { void * value; __u64 :64; } __attribute__((aligned(8)));
};

int bpf_iter_reg_target(const struct bpf_iter_reg *reg_info);
void bpf_iter_unreg_target(const struct bpf_iter_reg *reg_info);
bool bpf_iter_prog_supported(struct bpf_prog *prog);
const struct bpf_func_proto *
bpf_iter_get_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog);
int bpf_iter_link_attach(const union bpf_attr *attr, bpfptr_t uattr, struct bpf_prog *prog);
int bpf_iter_new_fd(struct bpf_link *link);
bool bpf_link_is_iter(struct bpf_link *link);
struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *meta, bool in_stop);
int bpf_iter_run_prog(struct bpf_prog *prog, void *ctx);
void bpf_iter_map_show_fdinfo(const struct bpf_iter_aux_info *aux,
         struct seq_file *seq);
int bpf_iter_map_fill_link_info(const struct bpf_iter_aux_info *aux,
    struct bpf_link_info *info);

int map_set_for_each_callback_args(struct bpf_verifier_env *env,
       struct bpf_func_state *caller,
       struct bpf_func_state *callee);

int bpf_percpu_hash_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_array_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_hash_update(struct bpf_map *map, void *key, void *value,
      u64 flags);
int bpf_percpu_array_update(struct bpf_map *map, void *key, void *value,
       u64 flags);

int bpf_stackmap_copy(struct bpf_map *map, void *key, void *value);

int bpf_fd_array_map_update_elem(struct bpf_map *map, struct file *map_file,
     void *key, void *value, u64 map_flags);
int bpf_fd_array_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);
int bpf_fd_htab_map_update_elem(struct bpf_map *map, struct file *map_file,
    void *key, void *value, u64 map_flags);
int bpf_fd_htab_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);

int bpf_get_file_flag(int flags);
int bpf_check_uarg_tail_zero(bpfptr_t uaddr, size_t expected_size,
        size_t actual_size);







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_long_memcpy(void *dst, const void *src, u32 size)
{
 const long *lsrc = src;
 long *ldst = dst;

 size /= sizeof(long);
 while (size--)
  *ldst++ = *lsrc++;
}


int bpf_check(struct bpf_prog **fp, union bpf_attr *attr, bpfptr_t uattr);


void bpf_patch_call_args(struct bpf_insn *insn, u32 stack_depth);


struct btf *bpf_get_btf_vmlinux(void);


struct xdp_buff;
struct sk_buff;
struct bpf_dtab_netdev;
struct bpf_cpu_map_entry;

void __dev_flush(void);
int dev_xdp_enqueue(struct net_device *dev, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int dev_map_enqueue(struct bpf_dtab_netdev *dst, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int dev_map_enqueue_multi(struct xdp_buff *xdp, struct net_device *dev_rx,
     struct bpf_map *map, bool exclude_ingress);
int dev_map_generic_redirect(struct bpf_dtab_netdev *dst, struct sk_buff *skb,
        struct bpf_prog *xdp_prog);
int dev_map_redirect_multi(struct net_device *dev, struct sk_buff *skb,
      struct bpf_prog *xdp_prog, struct bpf_map *map,
      bool exclude_ingress);

void __cpu_map_flush(void);
int cpu_map_enqueue(struct bpf_cpu_map_entry *rcpu, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int cpu_map_generic_redirect(struct bpf_cpu_map_entry *rcpu,
        struct sk_buff *skb);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_map_attr_numa_node(const union bpf_attr *attr)
{
 return (attr->map_flags & BPF_F_NUMA_NODE) ?
  attr->numa_node : (-1);
}

struct bpf_prog *bpf_prog_get_type_path(const char *name, enum bpf_prog_type type);
int array_map_alloc_check(union bpf_attr *attr);

int bpf_prog_test_run_xdp(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_skb(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_tracing(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);
int bpf_prog_test_run_flow_dissector(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);
int bpf_prog_test_run_raw_tp(struct bpf_prog *prog,
        const union bpf_attr *kattr,
        union bpf_attr *uattr);
int bpf_prog_test_run_sk_lookup(struct bpf_prog *prog,
    const union bpf_attr *kattr,
    union bpf_attr *uattr);
bool bpf_prog_test_check_kfunc_call(u32 kfunc_id);
bool btf_ctx_access(int off, int size, enum bpf_access_type type,
      const struct bpf_prog *prog,
      struct bpf_insn_access_aux *info);
int btf_struct_access(struct bpf_verifier_log *log, const struct btf *btf,
        const struct btf_type *t, int off, int size,
        enum bpf_access_type atype,
        u32 *next_btf_id);
bool btf_struct_ids_match(struct bpf_verifier_log *log,
     const struct btf *btf, u32 id, int off,
     const struct btf *need_btf, u32 need_type_id);

int btf_distill_func_proto(struct bpf_verifier_log *log,
      struct btf *btf,
      const struct btf_type *func_proto,
      const char *func_name,
      struct btf_func_model *m);

struct bpf_reg_state;
int btf_check_subprog_arg_match(struct bpf_verifier_env *env, int subprog,
    struct bpf_reg_state *regs);
int btf_check_kfunc_arg_match(struct bpf_verifier_env *env,
         const struct btf *btf, u32 func_id,
         struct bpf_reg_state *regs);
int btf_prepare_func_args(struct bpf_verifier_env *env, int subprog,
     struct bpf_reg_state *reg);
int btf_check_type_match(struct bpf_verifier_log *log, const struct bpf_prog *prog,
    struct btf *btf, const struct btf_type *t);

struct bpf_prog *bpf_prog_by_id(u32 id);
struct bpf_link *bpf_link_by_id(u32 id);

const struct bpf_func_proto *bpf_base_func_proto(enum bpf_func_id func_id);
void bpf_task_storage_free(struct task_struct *task);
bool bpf_prog_has_kfunc_call(const struct bpf_prog *prog);
const struct btf_func_model *
bpf_jit_find_kfunc_model(const struct bpf_prog *prog,
    const struct bpf_insn *insn);
# 1896 "./include/linux/bpf.h"
void __bpf_free_used_btfs(struct bpf_prog_aux *aux,
     struct btf_mod_pair *used_btfs, u32 len);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_prog *bpf_prog_get_type(u32 ufd,
       enum bpf_prog_type type)
{
 return bpf_prog_get_type_dev(ufd, type, false);
}

void __bpf_free_used_maps(struct bpf_prog_aux *aux,
     struct bpf_map **used_maps, u32 len);

bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);

int bpf_prog_offload_compile(struct bpf_prog *prog);
void bpf_prog_offload_destroy(struct bpf_prog *prog);
int bpf_prog_offload_info_fill(struct bpf_prog_info *info,
          struct bpf_prog *prog);

int bpf_map_offload_info_fill(struct bpf_map_info *info, struct bpf_map *map);

int bpf_map_offload_lookup_elem(struct bpf_map *map, void *key, void *value);
int bpf_map_offload_update_elem(struct bpf_map *map,
    void *key, void *value, u64 flags);
int bpf_map_offload_delete_elem(struct bpf_map *map, void *key);
int bpf_map_offload_get_next_key(struct bpf_map *map,
     void *key, void *next_key);

bool bpf_offload_prog_map_match(struct bpf_prog *prog, struct bpf_map *map);

struct bpf_offload_dev *
bpf_offload_dev_create(const struct bpf_prog_offload_ops *ops, void *priv);
void bpf_offload_dev_destroy(struct bpf_offload_dev *offdev);
void *bpf_offload_dev_priv(struct bpf_offload_dev *offdev);
int bpf_offload_dev_netdev_register(struct bpf_offload_dev *offdev,
        struct net_device *netdev);
void bpf_offload_dev_netdev_unregister(struct bpf_offload_dev *offdev,
           struct net_device *netdev);
bool bpf_offload_dev_match(struct bpf_prog *prog, struct net_device *netdev);


int bpf_prog_offload_init(struct bpf_prog *prog, union bpf_attr *attr);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_prog_is_dev_bound(const struct bpf_prog_aux *aux)
{
 return aux->offload_requested;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_is_dev_bound(struct bpf_map *map)
{
 return __builtin_expect(!!(map->ops == &bpf_map_offload_ops), 0);
}

struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *attr);
void bpf_map_offload_map_free(struct bpf_map *map);
int bpf_prog_test_run_syscall(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);

int sock_map_get_from_fd(const union bpf_attr *attr, struct bpf_prog *prog);
int sock_map_prog_detach(const union bpf_attr *attr, enum bpf_prog_type ptype);
int sock_map_update_elem_sys(struct bpf_map *map, void *key, void *value, u64 flags);
void sock_map_unhash(struct sock *sk);
void sock_map_close(struct sock *sk, long timeout);
# 2015 "./include/linux/bpf.h"
void bpf_sk_reuseport_detach(struct sock *sk);
int bpf_fd_reuseport_array_lookup_elem(struct bpf_map *map, void *key,
           void *value);
int bpf_fd_reuseport_array_update_elem(struct bpf_map *map, void *key,
           void *value, u64 map_flags);
# 2042 "./include/linux/bpf.h"
extern const struct bpf_func_proto bpf_map_lookup_elem_proto;
extern const struct bpf_func_proto bpf_map_update_elem_proto;
extern const struct bpf_func_proto bpf_map_delete_elem_proto;
extern const struct bpf_func_proto bpf_map_push_elem_proto;
extern const struct bpf_func_proto bpf_map_pop_elem_proto;
extern const struct bpf_func_proto bpf_map_peek_elem_proto;

extern const struct bpf_func_proto bpf_get_prandom_u32_proto;
extern const struct bpf_func_proto bpf_get_smp_processor_id_proto;
extern const struct bpf_func_proto bpf_get_numa_node_id_proto;
extern const struct bpf_func_proto bpf_tail_call_proto;
extern const struct bpf_func_proto bpf_ktime_get_ns_proto;
extern const struct bpf_func_proto bpf_ktime_get_boot_ns_proto;
extern const struct bpf_func_proto bpf_get_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_get_current_uid_gid_proto;
extern const struct bpf_func_proto bpf_get_current_comm_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto;
extern const struct bpf_func_proto bpf_get_stack_proto;
extern const struct bpf_func_proto bpf_get_task_stack_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto_pe;
extern const struct bpf_func_proto bpf_get_stack_proto_pe;
extern const struct bpf_func_proto bpf_sock_map_update_proto;
extern const struct bpf_func_proto bpf_sock_hash_update_proto;
extern const struct bpf_func_proto bpf_get_current_cgroup_id_proto;
extern const struct bpf_func_proto bpf_get_current_ancestor_cgroup_id_proto;
extern const struct bpf_func_proto bpf_msg_redirect_hash_proto;
extern const struct bpf_func_proto bpf_msg_redirect_map_proto;
extern const struct bpf_func_proto bpf_sk_redirect_hash_proto;
extern const struct bpf_func_proto bpf_sk_redirect_map_proto;
extern const struct bpf_func_proto bpf_spin_lock_proto;
extern const struct bpf_func_proto bpf_spin_unlock_proto;
extern const struct bpf_func_proto bpf_get_local_storage_proto;
extern const struct bpf_func_proto bpf_strtol_proto;
extern const struct bpf_func_proto bpf_strtoul_proto;
extern const struct bpf_func_proto bpf_tcp_sock_proto;
extern const struct bpf_func_proto bpf_jiffies64_proto;
extern const struct bpf_func_proto bpf_get_ns_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_event_output_data_proto;
extern const struct bpf_func_proto bpf_ringbuf_output_proto;
extern const struct bpf_func_proto bpf_ringbuf_reserve_proto;
extern const struct bpf_func_proto bpf_ringbuf_submit_proto;
extern const struct bpf_func_proto bpf_ringbuf_discard_proto;
extern const struct bpf_func_proto bpf_ringbuf_query_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp6_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_timewait_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_tcp_request_sock_proto;
extern const struct bpf_func_proto bpf_skc_to_udp6_sock_proto;
extern const struct bpf_func_proto bpf_copy_from_user_proto;
extern const struct bpf_func_proto bpf_snprintf_btf_proto;
extern const struct bpf_func_proto bpf_snprintf_proto;
extern const struct bpf_func_proto bpf_per_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_this_cpu_ptr_proto;
extern const struct bpf_func_proto bpf_ktime_get_coarse_ns_proto;
extern const struct bpf_func_proto bpf_sock_from_file_proto;
extern const struct bpf_func_proto bpf_get_socket_ptr_cookie_proto;
extern const struct bpf_func_proto bpf_task_storage_get_proto;
extern const struct bpf_func_proto bpf_task_storage_delete_proto;
extern const struct bpf_func_proto bpf_for_each_map_elem_proto;
extern const struct bpf_func_proto bpf_btf_find_by_name_kind_proto;
extern const struct bpf_func_proto bpf_sk_setsockopt_proto;
extern const struct bpf_func_proto bpf_sk_getsockopt_proto;

const struct bpf_func_proto *tracing_prog_func_proto(
  enum bpf_func_id func_id, const struct bpf_prog *prog);


void bpf_user_rnd_init_once(void);
u64 bpf_user_rnd_u32(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
u64 bpf_get_raw_cpu_id(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);


bool bpf_sock_common_is_valid_access(int off, int size,
         enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
bool bpf_sock_is_valid_access(int off, int size, enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
u32 bpf_sock_convert_ctx_access(enum bpf_access_type type,
    const struct bpf_insn *si,
    struct bpf_insn *insn_buf,
    struct bpf_prog *prog,
    u32 *target_size);
# 2148 "./include/linux/bpf.h"
struct sk_reuseport_kern {
 struct sk_buff *skb;
 struct sock *sk;
 struct sock *selected_sk;
 struct sock *migrating_sk;
 void *data_end;
 u32 hash;
 u32 reuseport_id;
 bool bind_inany;
};
bool bpf_tcp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);

bool bpf_xdp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);
# 2208 "./include/linux/bpf.h"
enum bpf_text_poke_type {
 BPF_MOD_CALL,
 BPF_MOD_JUMP,
};

int bpf_arch_text_poke(void *ip, enum bpf_text_poke_type t,
         void *addr1, void *addr2);

struct btf_id_set;
bool btf_id_set_contains(const struct btf_id_set *set, u32 id);

int bpf_bprintf_prepare(char *fmt, u32 fmt_size, const u64 *raw_args,
   u32 **bin_buf, u32 num_args);
void bpf_bprintf_cleanup(void);
# 6 "./include/linux/bpf-cgroup.h" 2







struct sock;
struct sockaddr;
struct cgroup;
struct sk_buff;
struct bpf_map;
struct bpf_prog;
struct bpf_sock_ops_kern;
struct bpf_cgroup_storage;
struct ctl_table;
struct ctl_table_header;
struct task_struct;


enum cgroup_bpf_attach_type {
 CGROUP_BPF_ATTACH_TYPE_INVALID = -1,
 CGROUP_INET_INGRESS = 0,
 CGROUP_INET_EGRESS,
 CGROUP_INET_SOCK_CREATE,
 CGROUP_SOCK_OPS,
 CGROUP_DEVICE,
 CGROUP_INET4_BIND,
 CGROUP_INET6_BIND,
 CGROUP_INET4_CONNECT,
 CGROUP_INET6_CONNECT,
 CGROUP_INET4_POST_BIND,
 CGROUP_INET6_POST_BIND,
 CGROUP_UDP4_SENDMSG,
 CGROUP_UDP6_SENDMSG,
 CGROUP_SYSCTL,
 CGROUP_UDP4_RECVMSG,
 CGROUP_UDP6_RECVMSG,
 CGROUP_GETSOCKOPT,
 CGROUP_SETSOCKOPT,
 CGROUP_INET4_GETPEERNAME,
 CGROUP_INET6_GETPEERNAME,
 CGROUP_INET4_GETSOCKNAME,
 CGROUP_INET6_GETSOCKNAME,
 CGROUP_INET_SOCK_RELEASE,
 MAX_CGROUP_BPF_ATTACH_TYPE
};




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum cgroup_bpf_attach_type
to_cgroup_bpf_attach_type(enum bpf_attach_type attach_type)
{
 switch (attach_type) {
 case BPF_CGROUP_INET_INGRESS: return CGROUP_INET_INGRESS;
 case BPF_CGROUP_INET_EGRESS: return CGROUP_INET_EGRESS;
 case BPF_CGROUP_INET_SOCK_CREATE: return CGROUP_INET_SOCK_CREATE;
 case BPF_CGROUP_SOCK_OPS: return CGROUP_SOCK_OPS;
 case BPF_CGROUP_DEVICE: return CGROUP_DEVICE;
 case BPF_CGROUP_INET4_BIND: return CGROUP_INET4_BIND;
 case BPF_CGROUP_INET6_BIND: return CGROUP_INET6_BIND;
 case BPF_CGROUP_INET4_CONNECT: return CGROUP_INET4_CONNECT;
 case BPF_CGROUP_INET6_CONNECT: return CGROUP_INET6_CONNECT;
 case BPF_CGROUP_INET4_POST_BIND: return CGROUP_INET4_POST_BIND;
 case BPF_CGROUP_INET6_POST_BIND: return CGROUP_INET6_POST_BIND;
 case BPF_CGROUP_UDP4_SENDMSG: return CGROUP_UDP4_SENDMSG;
 case BPF_CGROUP_UDP6_SENDMSG: return CGROUP_UDP6_SENDMSG;
 case BPF_CGROUP_SYSCTL: return CGROUP_SYSCTL;
 case BPF_CGROUP_UDP4_RECVMSG: return CGROUP_UDP4_RECVMSG;
 case BPF_CGROUP_UDP6_RECVMSG: return CGROUP_UDP6_RECVMSG;
 case BPF_CGROUP_GETSOCKOPT: return CGROUP_GETSOCKOPT;
 case BPF_CGROUP_SETSOCKOPT: return CGROUP_SETSOCKOPT;
 case BPF_CGROUP_INET4_GETPEERNAME: return CGROUP_INET4_GETPEERNAME;
 case BPF_CGROUP_INET6_GETPEERNAME: return CGROUP_INET6_GETPEERNAME;
 case BPF_CGROUP_INET4_GETSOCKNAME: return CGROUP_INET4_GETSOCKNAME;
 case BPF_CGROUP_INET6_GETSOCKNAME: return CGROUP_INET6_GETSOCKNAME;
 case BPF_CGROUP_INET_SOCK_RELEASE: return CGROUP_INET_SOCK_RELEASE;
 default:
  return CGROUP_BPF_ATTACH_TYPE_INVALID;
 }
}



extern struct static_key_false cgroup_bpf_enabled_key[MAX_CGROUP_BPF_ATTACH_TYPE];





struct bpf_cgroup_storage_map;

struct bpf_storage_buffer {
 struct callback_head rcu;
 char data[];
};

struct bpf_cgroup_storage {
 union {
  struct bpf_storage_buffer *buf;
  void *percpu_buf;
 };
 struct bpf_cgroup_storage_map *map;
 struct bpf_cgroup_storage_key key;
 struct list_head list_map;
 struct list_head list_cg;
 struct rb_node node;
 struct callback_head rcu;
};

struct bpf_cgroup_link {
 struct bpf_link link;
 struct cgroup *cgroup;
 enum bpf_attach_type type;
};

struct bpf_prog_list {
 struct list_head node;
 struct bpf_prog *prog;
 struct bpf_cgroup_link *link;
 struct bpf_cgroup_storage *storage[__BPF_CGROUP_STORAGE_MAX];
};

struct bpf_prog_array;

struct cgroup_bpf {

 struct bpf_prog_array *effective[MAX_CGROUP_BPF_ATTACH_TYPE];






 struct list_head progs[MAX_CGROUP_BPF_ATTACH_TYPE];
 u32 flags[MAX_CGROUP_BPF_ATTACH_TYPE];


 struct list_head storages;


 struct bpf_prog_array *inactive;


 struct percpu_ref refcnt;


 struct work_struct release_work;
};

int cgroup_bpf_inherit(struct cgroup *cgrp);
void cgroup_bpf_offline(struct cgroup *cgrp);

int __cgroup_bpf_attach(struct cgroup *cgrp,
   struct bpf_prog *prog, struct bpf_prog *replace_prog,
   struct bpf_cgroup_link *link,
   enum bpf_attach_type type, u32 flags);
int __cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
   struct bpf_cgroup_link *link,
   enum bpf_attach_type type);
int __cgroup_bpf_query(struct cgroup *cgrp, const union bpf_attr *attr,
         union bpf_attr *uattr);


int cgroup_bpf_attach(struct cgroup *cgrp,
        struct bpf_prog *prog, struct bpf_prog *replace_prog,
        struct bpf_cgroup_link *link, enum bpf_attach_type type,
        u32 flags);
int cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
        enum bpf_attach_type type);
int cgroup_bpf_query(struct cgroup *cgrp, const union bpf_attr *attr,
       union bpf_attr *uattr);

int __cgroup_bpf_run_filter_skb(struct sock *sk,
    struct sk_buff *skb,
    enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_sk(struct sock *sk,
          enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_sock_addr(struct sock *sk,
          struct sockaddr *uaddr,
          enum cgroup_bpf_attach_type atype,
          void *t_ctx,
          u32 *flags);

int __cgroup_bpf_run_filter_sock_ops(struct sock *sk,
         struct bpf_sock_ops_kern *sock_ops,
         enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_check_dev_permission(short dev_type, u32 major, u32 minor,
          short access, enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_sysctl(struct ctl_table_header *head,
       struct ctl_table *table, int write,
       char **buf, size_t *pcount, loff_t *ppos,
       enum cgroup_bpf_attach_type atype);

int __cgroup_bpf_run_filter_setsockopt(struct sock *sock, int *level,
           int *optname, char *optval,
           int *optlen, char **kernel_optval);
int __cgroup_bpf_run_filter_getsockopt(struct sock *sk, int level,
           int optname, char *optval,
           int *optlen, int max_optlen,
           int retval);

int __cgroup_bpf_run_filter_getsockopt_kern(struct sock *sk, int level,
         int optname, void *optval,
         int *optlen, int retval);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum bpf_cgroup_storage_type cgroup_storage_type(
 struct bpf_map *map)
{
 if (map->map_type == BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE)
  return BPF_CGROUP_STORAGE_PERCPU;

 return BPF_CGROUP_STORAGE_SHARED;
}

struct bpf_cgroup_storage *
cgroup_storage_lookup(struct bpf_cgroup_storage_map *map,
        void *key, bool locked);
struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *prog,
     enum bpf_cgroup_storage_type stype);
void bpf_cgroup_storage_free(struct bpf_cgroup_storage *storage);
void bpf_cgroup_storage_link(struct bpf_cgroup_storage *storage,
        struct cgroup *cgroup,
        enum bpf_attach_type type);
void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *storage);
int bpf_cgroup_storage_assign(struct bpf_prog_aux *aux, struct bpf_map *map);

int bpf_percpu_cgroup_storage_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_cgroup_storage_update(struct bpf_map *map, void *key,
         void *value, u64 flags);
# 465 "./include/linux/bpf-cgroup.h"
int cgroup_bpf_prog_attach(const union bpf_attr *attr,
      enum bpf_prog_type ptype, struct bpf_prog *prog);
int cgroup_bpf_prog_detach(const union bpf_attr *attr,
      enum bpf_prog_type ptype);
int cgroup_bpf_link_attach(const union bpf_attr *attr, struct bpf_prog *prog);
int cgroup_bpf_prog_query(const union bpf_attr *attr,
     union bpf_attr *uattr);
# 23 "./include/linux/cgroup-defs.h" 2
# 1 "./include/linux/psi_types.h" 1



# 1 "./include/linux/kthread.h" 1







struct mm_struct;

__attribute__((__format__(printf, 4, 5)))
struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),
        void *data,
        int node,
        const char namefmt[], ...);
# 31 "./include/linux/kthread.h"
struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
       void *data,
       unsigned int cpu,
       const char *namefmt);

void set_kthread_struct(struct task_struct *p);

void kthread_set_per_cpu(struct task_struct *k, int cpu);
bool kthread_is_per_cpu(struct task_struct *k);
# 59 "./include/linux/kthread.h"
void free_kthread_struct(struct task_struct *k);
void kthread_bind(struct task_struct *k, unsigned int cpu);
void kthread_bind_mask(struct task_struct *k, const struct cpumask *mask);
int kthread_stop(struct task_struct *k);
bool kthread_should_stop(void);
bool kthread_should_park(void);
bool __kthread_should_park(struct task_struct *k);
bool kthread_freezable_should_stop(bool *was_frozen);
void *kthread_func(struct task_struct *k);
void *kthread_data(struct task_struct *k);
void *kthread_probe_data(struct task_struct *k);
int kthread_park(struct task_struct *k);
void kthread_unpark(struct task_struct *k);
void kthread_parkme(void);

int kthreadd(void *unused);
extern struct task_struct *kthreadd_task;
extern int tsk_fork_get_node(struct task_struct *tsk);
# 86 "./include/linux/kthread.h"
struct kthread_work;
typedef void (*kthread_work_func_t)(struct kthread_work *work);
void kthread_delayed_work_timer_fn(struct timer_list *t);

enum {
 KTW_FREEZABLE = 1 << 0,
};

struct kthread_worker {
 unsigned int flags;
 raw_spinlock_t lock;
 struct list_head work_list;
 struct list_head delayed_work_list;
 struct task_struct *task;
 struct kthread_work *current_work;
};

struct kthread_work {
 struct list_head node;
 kthread_work_func_t func;
 struct kthread_worker *worker;

 int canceling;
};

struct kthread_delayed_work {
 struct kthread_work work;
 struct timer_list timer;
};
# 156 "./include/linux/kthread.h"
extern void __kthread_init_worker(struct kthread_worker *worker,
   const char *name, struct lock_class_key *key);
# 180 "./include/linux/kthread.h"
int kthread_worker_fn(void *worker_ptr);

__attribute__((__format__(printf, 2, 3)))
struct kthread_worker *
kthread_create_worker(unsigned int flags, const char namefmt[], ...);

__attribute__((__format__(printf, 3, 4))) struct kthread_worker *
kthread_create_worker_on_cpu(int cpu, unsigned int flags,
        const char namefmt[], ...);

bool kthread_queue_work(struct kthread_worker *worker,
   struct kthread_work *work);

bool kthread_queue_delayed_work(struct kthread_worker *worker,
    struct kthread_delayed_work *dwork,
    unsigned long delay);

bool kthread_mod_delayed_work(struct kthread_worker *worker,
         struct kthread_delayed_work *dwork,
         unsigned long delay);

void kthread_flush_work(struct kthread_work *work);
void kthread_flush_worker(struct kthread_worker *worker);

bool kthread_cancel_work_sync(struct kthread_work *work);
bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *work);

void kthread_destroy_worker(struct kthread_worker *worker);

void kthread_use_mm(struct mm_struct *mm);
void kthread_unuse_mm(struct mm_struct *mm);

struct cgroup_subsys_state;





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kthread_associate_blkcg(struct cgroup_subsys_state *css) { }
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *kthread_blkcg(void)
{
 return ((void *)0);
}
# 5 "./include/linux/psi_types.h" 2
# 179 "./include/linux/psi_types.h"
struct psi_group { };
# 24 "./include/linux/cgroup-defs.h" 2



struct cgroup;
struct cgroup_root;
struct cgroup_subsys;
struct cgroup_taskset;
struct kernfs_node;
struct kernfs_ops;
struct kernfs_open_file;
struct seq_file;
struct poll_table_struct;







enum cgroup_subsys_id {
# 1 "./include/linux/cgroup_subsys.h" 1
# 13 "./include/linux/cgroup_subsys.h"
cpuset_cgrp_id,



cpu_cgrp_id,



cpuacct_cgrp_id,







memory_cgrp_id,



devices_cgrp_id,



freezer_cgrp_id,







perf_event_cgrp_id,
# 45 "./include/linux/cgroup-defs.h" 2
 CGROUP_SUBSYS_COUNT,
};



enum {
 CSS_NO_REF = (1 << 0),
 CSS_ONLINE = (1 << 1),
 CSS_RELEASED = (1 << 2),
 CSS_VISIBLE = (1 << 3),
 CSS_DYING = (1 << 4),
};


enum {

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,


 CGRP_FREEZE,


 CGRP_FROZEN,


 CGRP_KILL,
};


enum {
 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),






 CGRP_ROOT_NS_DELEGATE = (1 << 3),




 CGRP_ROOT_CPUSET_V2_MODE = (1 << 4),




 CGRP_ROOT_MEMORY_LOCAL_EVENTS = (1 << 5),




 CGRP_ROOT_MEMORY_RECURSIVE_PROT = (1 << 6),
};


enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_NS_DELEGATABLE = (1 << 2),

 CFTYPE_NO_PREFIX = (1 << 3),
 CFTYPE_WORLD_WRITABLE = (1 << 4),
 CFTYPE_DEBUG = (1 << 5),
 CFTYPE_PRESSURE = (1 << 6),


 __CFTYPE_ONLY_ON_DFL = (1 << 16),
 __CFTYPE_NOT_ON_DFL = (1 << 17),
};






struct cgroup_file {

 struct kernfs_node *kn;
 unsigned long notified_at;
 struct timer_list notify_timer;
};
# 142 "./include/linux/cgroup-defs.h"
struct cgroup_subsys_state {

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct list_head sibling;
 struct list_head children;


 struct list_head rstat_css_node;





 int id;

 unsigned int flags;







 u64 serial_nr;





 atomic_t online_cnt;


 struct work_struct destroy_work;
 struct rcu_work destroy_rwork;





 struct cgroup_subsys_state *parent;
};
# 199 "./include/linux/cgroup-defs.h"
struct css_set {





 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];


 refcount_t refcount;







 struct css_set *dom_cset;


 struct cgroup *dfl_cgrp;


 int nr_tasks;
# 231 "./include/linux/cgroup-defs.h"
 struct list_head tasks;
 struct list_head mg_tasks;
 struct list_head dying_tasks;


 struct list_head task_iters;
# 245 "./include/linux/cgroup-defs.h"
 struct list_head e_cset_node[CGROUP_SUBSYS_COUNT];


 struct list_head threaded_csets;
 struct list_head threaded_csets_node;





 struct hlist_node hlist;





 struct list_head cgrp_links;





 struct list_head mg_preload_node;
 struct list_head mg_node;
# 277 "./include/linux/cgroup-defs.h"
 struct cgroup *mg_src_cgrp;
 struct cgroup *mg_dst_cgrp;
 struct css_set *mg_dst_cset;


 bool dead;


 struct callback_head callback_head;
};

struct cgroup_base_stat {
 struct task_cputime cputime;
};
# 312 "./include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {




 struct u64_stats_sync bsync;
 struct cgroup_base_stat bstat;





 struct cgroup_base_stat last_bstat;
# 337 "./include/linux/cgroup-defs.h"
 struct cgroup *updated_children;
 struct cgroup *updated_next;
};

struct cgroup_freezer_state {

 bool freeze;


 int e_freeze;




 int nr_frozen_descendants;





 int nr_frozen_tasks;
};

struct cgroup {

 struct cgroup_subsys_state self;

 unsigned long flags;







 int level;


 int max_depth;
# 388 "./include/linux/cgroup-defs.h"
 int nr_descendants;
 int nr_dying_descendants;
 int max_descendants;
# 403 "./include/linux/cgroup-defs.h"
 int nr_populated_csets;
 int nr_populated_domain_children;
 int nr_populated_threaded_children;

 int nr_threaded_children;

 struct kernfs_node *kn;
 struct cgroup_file procs_file;
 struct cgroup_file events_file;
# 420 "./include/linux/cgroup-defs.h"
 u16 subtree_control;
 u16 subtree_ss_mask;
 u16 old_subtree_control;
 u16 old_subtree_ss_mask;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroup_root *root;





 struct list_head cset_links;
# 443 "./include/linux/cgroup-defs.h"
 struct list_head e_csets[CGROUP_SUBSYS_COUNT];
# 452 "./include/linux/cgroup-defs.h"
 struct cgroup *dom_cgrp;
 struct cgroup *old_dom_cgrp;


 struct cgroup_rstat_cpu *rstat_cpu;
 struct list_head rstat_css_list;


 struct cgroup_base_stat last_bstat;
 struct cgroup_base_stat bstat;
 struct prev_cputime prev_cputime;





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 wait_queue_head_t offline_waitq;


 struct work_struct release_agent_work;


 struct psi_group psi;


 struct cgroup_bpf bpf;


 atomic_t congestion_count;


 struct cgroup_freezer_state freezer;


 u64 ancestor_ids[];
};






struct cgroup_root {
 struct kernfs_root *kf_root;


 unsigned int subsys_mask;


 int hierarchy_id;


 struct cgroup cgrp;


 u64 cgrp_ancestor_id_storage;


 atomic_t nr_cgrps;


 struct list_head root_list;


 unsigned int flags;


 char release_agent_path[4096];


 char name[64];
};
# 536 "./include/linux/cgroup-defs.h"
struct cftype {





 char name[64];
 unsigned long private;





 size_t max_write_len;


 unsigned int flags;







 unsigned int file_offset;





 struct cgroup_subsys *ss;
 struct list_head node;
 struct kernfs_ops *kf_ops;

 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);





 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);


 int (*seq_show)(struct seq_file *sf, void *v);


 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);







 ssize_t (*write)(struct kernfs_open_file *of,
    char *buf, size_t nbytes, loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);




};





struct cgroup_subsys {
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_released)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);
 void (*css_reset)(struct cgroup_subsys_state *css);
 void (*css_rstat_flush)(struct cgroup_subsys_state *css, int cpu);
 int (*css_extra_stat_show)(struct seq_file *seq,
       struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_taskset *tset);
 void (*post_attach)(void);
 int (*can_fork)(struct task_struct *task,
   struct css_set *cset);
 void (*cancel_fork)(struct task_struct *task, struct css_set *cset);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct task_struct *task);
 void (*release)(struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 bool early_init:1;
# 661 "./include/linux/cgroup-defs.h"
 bool implicit_on_dfl:1;
# 673 "./include/linux/cgroup-defs.h"
 bool threaded:1;


 int id;
 const char *name;


 const char *legacy_name;


 struct cgroup_root *root;


 struct idr css_idr;





 struct list_head cfts;





 struct cftype *dfl_cftypes;
 struct cftype *legacy_cftypes;
# 708 "./include/linux/cgroup-defs.h"
 unsigned int depends_on;
};

extern struct percpu_rw_semaphore cgroup_threadgroup_rwsem;
# 720 "./include/linux/cgroup-defs.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_begin(struct task_struct *tsk)
{
 percpu_down_read(&cgroup_threadgroup_rwsem);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_end(struct task_struct *tsk)
{
 percpu_up_read(&cgroup_threadgroup_rwsem);
}
# 778 "./include/linux/cgroup-defs.h"
struct sock_cgroup_data {
 union {
# 790 "./include/linux/cgroup-defs.h"
  struct {
   u32 classid;
   u16 prioidx;
   u8 padding;
   u8 unused : 6;
   u8 no_refcnt : 1;
   u8 is_data : 1;
  } __attribute__((__packed__));

  u64 val;
 };
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 sock_cgroup_prioidx(const struct sock_cgroup_data *skcd)
{

 return (skcd->is_data & 1) ? skcd->prioidx : 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 sock_cgroup_classid(const struct sock_cgroup_data *skcd)
{

 return (skcd->is_data & 1) ? skcd->classid : 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sock_cgroup_set_prioidx(struct sock_cgroup_data *skcd,
        u16 prioidx)
{
 struct sock_cgroup_data skcd_buf = {{ .val = ({ do { extern void __compiletime_assert_273(void) ; if (!((sizeof(skcd->val) == sizeof(char) || sizeof(skcd->val) == sizeof(short) || sizeof(skcd->val) == sizeof(int) || sizeof(skcd->val) == sizeof(long)) || sizeof(skcd->val) == sizeof(long long))) __compiletime_assert_273(); } while (0); (*(const volatile typeof( _Generic((skcd->val), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (skcd->val))) *)&(skcd->val)); }) }};

 if (sock_cgroup_prioidx(&skcd_buf) == prioidx)
  return;

 if (!(skcd_buf.is_data & 1)) {
  skcd_buf.val = 0;
  skcd_buf.is_data = 1;
 }

 skcd_buf.prioidx = prioidx;
 do { do { extern void __compiletime_assert_274(void) ; if (!((sizeof(skcd->val) == sizeof(char) || sizeof(skcd->val) == sizeof(short) || sizeof(skcd->val) == sizeof(int) || sizeof(skcd->val) == sizeof(long)) || sizeof(skcd->val) == sizeof(long long))) __compiletime_assert_274(); } while (0); do { *(volatile typeof(skcd->val) *)&(skcd->val) = (skcd_buf.val); } while (0); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sock_cgroup_set_classid(struct sock_cgroup_data *skcd,
        u32 classid)
{
 struct sock_cgroup_data skcd_buf = {{ .val = ({ do { extern void __compiletime_assert_275(void) ; if (!((sizeof(skcd->val) == sizeof(char) || sizeof(skcd->val) == sizeof(short) || sizeof(skcd->val) == sizeof(int) || sizeof(skcd->val) == sizeof(long)) || sizeof(skcd->val) == sizeof(long long))) __compiletime_assert_275(); } while (0); (*(const volatile typeof( _Generic((skcd->val), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (skcd->val))) *)&(skcd->val)); }) }};

 if (sock_cgroup_classid(&skcd_buf) == classid)
  return;

 if (!(skcd_buf.is_data & 1)) {
  skcd_buf.val = 0;
  skcd_buf.is_data = 1;
 }

 skcd_buf.classid = classid;
 do { do { extern void __compiletime_assert_276(void) ; if (!((sizeof(skcd->val) == sizeof(char) || sizeof(skcd->val) == sizeof(short) || sizeof(skcd->val) == sizeof(int) || sizeof(skcd->val) == sizeof(long)) || sizeof(skcd->val) == sizeof(long long))) __compiletime_assert_276(); } while (0); do { *(volatile typeof(skcd->val) *)&(skcd->val) = (skcd_buf.val); } while (0); } while (0);
}
# 29 "./include/linux/cgroup.h" 2

struct kernel_clone_args;
# 52 "./include/linux/cgroup.h"
struct css_task_iter {
 struct cgroup_subsys *ss;
 unsigned int flags;

 struct list_head *cset_pos;
 struct list_head *cset_head;

 struct list_head *tcset_pos;
 struct list_head *tcset_head;

 struct list_head *task_pos;

 struct list_head *cur_tasks_head;
 struct css_set *cur_cset;
 struct css_set *cur_dcset;
 struct task_struct *cur_task;
 struct list_head iters_node;
};

extern struct cgroup_root cgrp_dfl_root;
extern struct css_set init_css_set;


# 1 "./include/linux/cgroup_subsys.h" 1
# 13 "./include/linux/cgroup_subsys.h"
extern struct cgroup_subsys cpuset_cgrp_subsys;



extern struct cgroup_subsys cpu_cgrp_subsys;



extern struct cgroup_subsys cpuacct_cgrp_subsys;







extern struct cgroup_subsys memory_cgrp_subsys;



extern struct cgroup_subsys devices_cgrp_subsys;



extern struct cgroup_subsys freezer_cgrp_subsys;







extern struct cgroup_subsys perf_event_cgrp_subsys;
# 76 "./include/linux/cgroup.h" 2





# 1 "./include/linux/cgroup_subsys.h" 1
# 13 "./include/linux/cgroup_subsys.h"
extern struct static_key_true cpuset_cgrp_subsys_enabled_key; extern struct static_key_true cpuset_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpu_cgrp_subsys_enabled_key; extern struct static_key_true cpu_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpuacct_cgrp_subsys_enabled_key; extern struct static_key_true cpuacct_cgrp_subsys_on_dfl_key;







extern struct static_key_true memory_cgrp_subsys_enabled_key; extern struct static_key_true memory_cgrp_subsys_on_dfl_key;



extern struct static_key_true devices_cgrp_subsys_enabled_key; extern struct static_key_true devices_cgrp_subsys_on_dfl_key;



extern struct static_key_true freezer_cgrp_subsys_enabled_key; extern struct static_key_true freezer_cgrp_subsys_on_dfl_key;







extern struct static_key_true perf_event_cgrp_subsys_enabled_key; extern struct static_key_true perf_event_cgrp_subsys_on_dfl_key;
# 82 "./include/linux/cgroup.h" 2
# 98 "./include/linux/cgroup.h"
bool css_has_online_children(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_e_css(struct cgroup *cgroup,
      struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *cgroup,
          struct cgroup_subsys *ss);
struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *dentry,
             struct cgroup_subsys *ss);

struct cgroup *cgroup_get_from_path(const char *path);
struct cgroup *cgroup_get_from_fd(int fd);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_add_legacy_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);
void cgroup_file_notify(struct cgroup_file *cfile);

int task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);
int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry);
int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
       struct pid *pid, struct task_struct *tsk);

void cgroup_fork(struct task_struct *p);
extern int cgroup_can_fork(struct task_struct *p,
      struct kernel_clone_args *kargs);
extern void cgroup_cancel_fork(struct task_struct *p,
          struct kernel_clone_args *kargs);
extern void cgroup_post_fork(struct task_struct *p,
        struct kernel_clone_args *kargs);
void cgroup_exit(struct task_struct *p);
void cgroup_release(struct task_struct *p);
void cgroup_free(struct task_struct *p);

int cgroup_init_early(void);
int cgroup_init(void);

int cgroup_parse_float(const char *input, unsigned dec_shift, s64 *v);





struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);
struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *pos,
          struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *pos,
           struct cgroup_subsys_state *css);

struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset,
      struct cgroup_subsys_state **dst_cssp);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset,
     struct cgroup_subsys_state **dst_cssp);

void css_task_iter_start(struct cgroup_subsys_state *css, unsigned int flags,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);
# 310 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cgroup_id(const struct cgroup *cgrp)
{
 return cgrp->kn->id;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get(&css->refcnt);
}
# 334 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get_many(&css->refcnt, n);
}
# 351 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget(&css->refcnt);
 return true;
}
# 368 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget_online(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget_live(&css->refcnt);
 return true;
}
# 390 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_is_dying(struct cgroup_subsys_state *css)
{
 return !(css->flags & CSS_NO_REF) && percpu_ref_is_dying(&css->refcnt);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put(&css->refcnt);
}
# 414 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put_many(&css->refcnt, n);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_get(struct cgroup *cgrp)
{
 css_get(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_tryget(struct cgroup *cgrp)
{
 return css_tryget(&cgrp->self);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_put(struct cgroup *cgrp)
{
 css_put(&cgrp->self);
}
# 479 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct css_set *task_css_set(struct task_struct *task)
{
 return ({ typeof(*((task)->cgroups)) *________p1 = (typeof(*((task)->cgroups)) *)({ do { extern void __compiletime_assert_277(void) ; if (!((sizeof(((task)->cgroups)) == sizeof(char) || sizeof(((task)->cgroups)) == sizeof(short) || sizeof(((task)->cgroups)) == sizeof(int) || sizeof(((task)->cgroups)) == sizeof(long)) || sizeof(((task)->cgroups)) == sizeof(long long))) __compiletime_assert_277(); } while (0); (*(const volatile typeof( _Generic((((task)->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (((task)->cgroups)))) *)&(((task)->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*((task)->cgroups)) *)(________p1)); });
}
# 491 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { extern void __compiletime_assert_278(void) ; if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_278(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)];
}
# 506 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *
task_get_css(struct task_struct *task, int subsys_id)
{
 struct cgroup_subsys_state *css;

 rcu_read_lock();
 while (true) {
  css = task_css(task, subsys_id);






  if (__builtin_expect(!!(css_tryget(css)), 1))
   break;
  do { asm volatile("or 1, 1, 1	# low priority"); asm volatile("or 2, 2, 2	# medium priority"); __asm__ __volatile__("": : :"memory"); } while (0);
 }
 rcu_read_unlock();
 return css;
}
# 536 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_css_is_root(struct task_struct *task, int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { extern void __compiletime_assert_279(void) ; if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_279(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)] ==
  init_css_set.subsys[subsys_id];
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_dfl_cgroup(struct task_struct *task)
{
 return task_css_set(task)->dfl_cgrp;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_parent(struct cgroup *cgrp)
{
 struct cgroup_subsys_state *parent_css = cgrp->self.parent;

 if (parent_css)
  return ({ void *__mptr = (void *)(parent_css); do { extern void __compiletime_assert_280(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(parent_css)), typeof(((struct cgroup *)0)->self)) && !__builtin_types_compatible_p(typeof(*(parent_css)), typeof(void))))) __compiletime_assert_280(); } while (0); ((struct cgroup *)(__mptr - __builtin_offsetof(struct cgroup, self))); });
 return ((void *)0);
}
# 571 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_descendant(struct cgroup *cgrp,
     struct cgroup *ancestor)
{
 if (cgrp->root != ancestor->root || cgrp->level < ancestor->level)
  return false;
 return cgrp->ancestor_ids[ancestor->level] == cgroup_id(ancestor);
}
# 590 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_ancestor(struct cgroup *cgrp,
          int ancestor_level)
{
 if (cgrp->level < ancestor_level)
  return ((void *)0);
 while (cgrp && cgrp->level > ancestor_level)
  cgrp = cgroup_parent(cgrp);
 return cgrp;
}
# 609 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_under_cgroup_hierarchy(struct task_struct *task,
            struct cgroup *ancestor)
{
 struct css_set *cset = task_css_set(task);

 return cgroup_is_descendant(cset->dfl_cgrp, ancestor);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_populated(struct cgroup *cgrp)
{
 return cgrp->nr_populated_csets + cgrp->nr_populated_domain_children +
  cgrp->nr_populated_threaded_children;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t cgroup_ino(struct cgroup *cgrp)
{
 return kernfs_ino(cgrp->kn);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *of_cft(struct kernfs_open_file *of)
{
 return of->kn->priv;
}

struct cgroup_subsys_state *of_css(struct kernfs_open_file *of);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *seq_cft(struct seq_file *seq)
{
 return of_cft(seq->private);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *seq_css(struct seq_file *seq)
{
 return of_css(seq->private);
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_name(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_name(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_path(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_path(cgrp->kn, buf, buflen);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_name(struct cgroup *cgrp)
{
 pr_cont_kernfs_name(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_path(struct cgroup *cgrp)
{
 pr_cont_kernfs_path(cgrp->kn);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct psi_group *cgroup_psi(struct cgroup *cgrp)
{
 return &cgrp->psi;
}

bool cgroup_psi_enabled(void);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_init_kthreadd(void)
{





 get_current()->no_cgroup_migration = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_kthread_ready(void)
{




 get_current()->no_cgroup_migration = 0;
}

void cgroup_path_from_kernfs_id(u64 id, char *buf, size_t buflen);
struct cgroup *cgroup_get_from_id(u64 id);
# 765 "./include/linux/cgroup.h"
void cgroup_rstat_updated(struct cgroup *cgrp, int cpu);
void cgroup_rstat_flush(struct cgroup *cgrp);
void cgroup_rstat_flush_irqsafe(struct cgroup *cgrp);
void cgroup_rstat_flush_hold(struct cgroup *cgrp);
void cgroup_rstat_flush_release(void);





void cpuacct_charge(struct task_struct *tsk, u64 cputime);
void cpuacct_account_field(struct task_struct *tsk, int index, u64 val);






void __cgroup_account_cputime(struct cgroup *cgrp, u64 delta_exec);
void __cgroup_account_cputime_field(struct cgroup *cgrp,
        enum cpu_usage_stat index, u64 delta_exec);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime(struct task_struct *task,
       u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_charge(task, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime(cgrp, delta_exec);
 rcu_read_unlock();
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime_field(struct task_struct *task,
      enum cpu_usage_stat index,
      u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_account_field(task, index, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime_field(cgrp, index, delta_exec);
 rcu_read_unlock();
}
# 836 "./include/linux/cgroup.h"
void cgroup_sk_alloc_disable(void);
void cgroup_sk_alloc(struct sock_cgroup_data *skcd);
void cgroup_sk_clone(struct sock_cgroup_data *skcd);
void cgroup_sk_free(struct sock_cgroup_data *skcd);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *sock_cgroup_ptr(struct sock_cgroup_data *skcd)
{
# 857 "./include/linux/cgroup.h"
 return (struct cgroup *)(unsigned long)skcd->val;

}
# 869 "./include/linux/cgroup.h"
struct cgroup_namespace {
 struct ns_common ns;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct css_set *root_cset;
};

extern struct cgroup_namespace init_cgroup_ns;



void free_cgroup_ns(struct cgroup_namespace *ns);

struct cgroup_namespace *copy_cgroup_ns(unsigned long flags,
     struct user_namespace *user_ns,
     struct cgroup_namespace *old_ns);

int cgroup_path_ns(struct cgroup *cgrp, char *buf, size_t buflen,
     struct cgroup_namespace *ns);
# 901 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns)
  refcount_inc(&ns->ns.count);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns && refcount_dec_and_test(&ns->ns.count))
  free_cgroup_ns(ns);
}



void cgroup_enter_frozen(void);
void cgroup_leave_frozen(bool always_leave);
void cgroup_update_frozen(struct cgroup *cgrp);
void cgroup_freeze(struct cgroup *cgrp, bool freeze);
void cgroup_freezer_migrate_task(struct task_struct *task, struct cgroup *src,
     struct cgroup *dst);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_task_frozen(struct task_struct *task)
{
 return task->frozen;
}
# 939 "./include/linux/cgroup.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_get(struct cgroup *cgrp)
{
 percpu_ref_get(&cgrp->bpf.refcnt);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_put(struct cgroup *cgrp)
{
 percpu_ref_put(&cgrp->bpf.refcnt);
}
# 58 "./include/linux/perf_event.h" 2

# 1 "./include/linux/security.h" 1
# 26 "./include/linux/security.h"
# 1 "./include/linux/kernel_read_file.h" 1
# 22 "./include/linux/kernel_read_file.h"
enum kernel_read_file_id {
 READING_UNKNOWN, READING_FIRMWARE, READING_MODULE, READING_KEXEC_IMAGE, READING_KEXEC_INITRAMFS, READING_POLICY, READING_X509_CERTIFICATE, READING_MAX_ID,
};

static const char * const kernel_read_file_str[] = {
 "unknown", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "x509-certificate", "",
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kernel_read_file_id_str(enum kernel_read_file_id id)
{
 if ((unsigned int)id >= READING_MAX_ID)
  return kernel_read_file_str[READING_UNKNOWN];

 return kernel_read_file_str[id];
}

int kernel_read_file(struct file *file, loff_t offset,
       void **buf, size_t buf_size,
       size_t *file_size,
       enum kernel_read_file_id id);
int kernel_read_file_from_path(const char *path, loff_t offset,
          void **buf, size_t buf_size,
          size_t *file_size,
          enum kernel_read_file_id id);
int kernel_read_file_from_path_initns(const char *path, loff_t offset,
          void **buf, size_t buf_size,
          size_t *file_size,
          enum kernel_read_file_id id);
int kernel_read_file_from_fd(int fd, loff_t offset,
        void **buf, size_t buf_size,
        size_t *file_size,
        enum kernel_read_file_id id);
# 27 "./include/linux/security.h" 2








struct linux_binprm;
struct cred;
struct rlimit;
struct kernel_siginfo;
struct sembuf;
struct kern_ipc_perm;
struct audit_context;
struct super_block;
struct inode;
struct dentry;
struct file;
struct vfsmount;
struct path;
struct qstr;
struct iattr;
struct fown_struct;
struct file_operations;
struct msg_msg;
struct xattr;
struct kernfs_node;
struct xfrm_sec_ctx;
struct mm_struct;
struct fs_context;
struct fs_parameter;
enum fs_value_type;
struct watch;
struct watch_notification;
# 73 "./include/linux/security.h"
struct ctl_table;
struct audit_krule;
struct user_namespace;
struct timezone;

enum lsm_event {
 LSM_POLICY_CHANGE,
};
# 106 "./include/linux/security.h"
enum lockdown_reason {
 LOCKDOWN_NONE,
 LOCKDOWN_MODULE_SIGNATURE,
 LOCKDOWN_DEV_MEM,
 LOCKDOWN_EFI_TEST,
 LOCKDOWN_KEXEC,
 LOCKDOWN_HIBERNATION,
 LOCKDOWN_PCI_ACCESS,
 LOCKDOWN_IOPORT,
 LOCKDOWN_MSR,
 LOCKDOWN_ACPI_TABLES,
 LOCKDOWN_PCMCIA_CIS,
 LOCKDOWN_TIOCSSERIAL,
 LOCKDOWN_MODULE_PARAMETERS,
 LOCKDOWN_MMIOTRACE,
 LOCKDOWN_DEBUGFS,
 LOCKDOWN_XMON_WR,
 LOCKDOWN_BPF_WRITE_USER,
 LOCKDOWN_INTEGRITY_MAX,
 LOCKDOWN_KCORE,
 LOCKDOWN_KPROBES,
 LOCKDOWN_BPF_READ_KERNEL,
 LOCKDOWN_PERF,
 LOCKDOWN_TRACEFS,
 LOCKDOWN_XMON_RW,
 LOCKDOWN_XFRM_SECRET,
 LOCKDOWN_CONFIDENTIALITY_MAX,
};

extern const char *const lockdown_reasons[LOCKDOWN_CONFIDENTIALITY_MAX+1];


extern int cap_capable(const struct cred *cred, struct user_namespace *ns,
         int cap, unsigned int opts);
extern int cap_settime(const struct timespec64 *ts, const struct timezone *tz);
extern int cap_ptrace_access_check(struct task_struct *child, unsigned int mode);
extern int cap_ptrace_traceme(struct task_struct *parent);
extern int cap_capget(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern int cap_capset(struct cred *new, const struct cred *old,
        const kernel_cap_t *effective,
        const kernel_cap_t *inheritable,
        const kernel_cap_t *permitted);
extern int cap_bprm_creds_from_file(struct linux_binprm *bprm, struct file *file);
int cap_inode_setxattr(struct dentry *dentry, const char *name,
         const void *value, size_t size, int flags);
int cap_inode_removexattr(struct user_namespace *mnt_userns,
     struct dentry *dentry, const char *name);
int cap_inode_need_killpriv(struct dentry *dentry);
int cap_inode_killpriv(struct user_namespace *mnt_userns,
         struct dentry *dentry);
int cap_inode_getsecurity(struct user_namespace *mnt_userns,
     struct inode *inode, const char *name, void **buffer,
     bool alloc);
extern int cap_mmap_addr(unsigned long addr);
extern int cap_mmap_file(struct file *file, unsigned long reqprot,
    unsigned long prot, unsigned long flags);
extern int cap_task_fix_setuid(struct cred *new, const struct cred *old, int flags);
extern int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
     unsigned long arg4, unsigned long arg5);
extern int cap_task_setscheduler(struct task_struct *p);
extern int cap_task_setioprio(struct task_struct *p, int ioprio);
extern int cap_task_setnice(struct task_struct *p, int nice);
extern int cap_vm_enough_memory(struct mm_struct *mm, long pages);

struct msghdr;
struct sk_buff;
struct sock;
struct sockaddr;
struct socket;
struct flowi_common;
struct dst_entry;
struct xfrm_selector;
struct xfrm_policy;
struct xfrm_state;
struct xfrm_user_sec_ctx;
struct seq_file;
struct sctp_endpoint;


extern unsigned long mmap_min_addr;
extern unsigned long dac_mmap_min_addr;
# 212 "./include/linux/security.h"
struct sched_param;
struct request_sock;







extern int mmap_min_addr_handler(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);



typedef int (*initxattrs) (struct inode *inode,
      const struct xattr *xattr_array, void *fs_data);






enum kernel_load_data_id {
 LOADING_UNKNOWN, LOADING_FIRMWARE, LOADING_MODULE, LOADING_KEXEC_IMAGE, LOADING_KEXEC_INITRAMFS, LOADING_POLICY, LOADING_X509_CERTIFICATE, LOADING_MAX_ID,
};

static const char * const kernel_load_data_str[] = {
 "unknown", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "x509-certificate", "",
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kernel_load_data_id_str(enum kernel_load_data_id id)
{
 if ((unsigned)id >= LOADING_MAX_ID)
  return kernel_load_data_str[LOADING_UNKNOWN];

 return kernel_load_data_str[id];
}
# 477 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int call_blocking_lsm_notifier(enum lsm_event event, void *data)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_blocking_lsm_notifier(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_blocking_lsm_notifier(struct notifier_block *nb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_free_mnt_opts(void **mnt_opts)
{
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_init(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int early_security_init(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_binder_set_context_mgr(struct task_struct *mgr)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_binder_transaction(struct task_struct *from,
           struct task_struct *to)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_binder_transfer_binder(struct task_struct *from,
        struct task_struct *to)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_binder_transfer_file(struct task_struct *from,
      struct task_struct *to,
      struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_ptrace_access_check(struct task_struct *child,
          unsigned int mode)
{
 return cap_ptrace_access_check(child, mode);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_ptrace_traceme(struct task_struct *parent)
{
 return cap_ptrace_traceme(parent);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_capget(struct task_struct *target,
       kernel_cap_t *effective,
       kernel_cap_t *inheritable,
       kernel_cap_t *permitted)
{
 return cap_capget(target, effective, inheritable, permitted);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_capset(struct cred *new,
       const struct cred *old,
       const kernel_cap_t *effective,
       const kernel_cap_t *inheritable,
       const kernel_cap_t *permitted)
{
 return cap_capset(new, old, effective, inheritable, permitted);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_capable(const struct cred *cred,
       struct user_namespace *ns,
       int cap,
       unsigned int opts)
{
 return cap_capable(cred, ns, cap, opts);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_quotactl(int cmds, int type, int id,
         struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_quota_on(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_syslog(int type)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_settime64(const struct timespec64 *ts,
         const struct timezone *tz)
{
 return cap_settime(ts, tz);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_vm_enough_memory_mm(struct mm_struct *mm, long pages)
{
 return __vm_enough_memory(mm, pages, cap_vm_enough_memory(mm, pages));
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bprm_creds_for_exec(struct linux_binprm *bprm)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bprm_creds_from_file(struct linux_binprm *bprm,
      struct file *file)
{
 return cap_bprm_creds_from_file(bprm, file);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bprm_check(struct linux_binprm *bprm)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_bprm_committing_creds(struct linux_binprm *bprm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_bprm_committed_creds(struct linux_binprm *bprm)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_fs_context_dup(struct fs_context *fc,
       struct fs_context *src_fc)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_fs_context_parse_param(struct fs_context *fc,
        struct fs_parameter *param)
{
 return -519;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_alloc(struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sb_delete(struct super_block *sb)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sb_free(struct super_block *sb)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_eat_lsm_opts(char *options,
        void **mnt_opts)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_remount(struct super_block *sb,
          void *mnt_opts)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_mnt_opts_compat(struct super_block *sb,
           void *mnt_opts)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_kern_mount(struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_show_options(struct seq_file *m,
        struct super_block *sb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_statfs(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_mount(const char *dev_name, const struct path *path,
        const char *type, unsigned long flags,
        void *data)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_umount(struct vfsmount *mnt, int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_pivotroot(const struct path *old_path,
     const struct path *new_path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_set_mnt_opts(struct super_block *sb,
        void *mnt_opts,
        unsigned long kern_flags,
        unsigned long *set_kern_flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sb_clone_mnt_opts(const struct super_block *oldsb,
           struct super_block *newsb,
           unsigned long kern_flags,
           unsigned long *set_kern_flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_add_mnt_opt(const char *option, const char *val,
     int len, void **mnt_opts)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_move_mount(const struct path *from_path,
          const struct path *to_path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_notify(const struct path *path, u64 mask,
    unsigned int obj_type)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_alloc(struct inode *inode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_inode_free(struct inode *inode)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_dentry_init_security(struct dentry *dentry,
       int mode,
       const struct qstr *name,
       void **ctx,
       u32 *ctxlen)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_dentry_create_files_as(struct dentry *dentry,
        int mode, struct qstr *name,
        const struct cred *old,
        struct cred *new)
{
 return 0;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_init_security(struct inode *inode,
      struct inode *dir,
      const struct qstr *qstr,
      const initxattrs xattrs,
      void *fs_data)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_init_security_anon(struct inode *inode,
          const struct qstr *name,
          const struct inode *context_inode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_old_inode_init_security(struct inode *inode,
         struct inode *dir,
         const struct qstr *qstr,
         const char **name,
         void **value, size_t *len)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_create(struct inode *dir,
      struct dentry *dentry,
      umode_t mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_link(struct dentry *old_dentry,
           struct inode *dir,
           struct dentry *new_dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_unlink(struct inode *dir,
      struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_symlink(struct inode *dir,
       struct dentry *dentry,
       const char *old_name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_mkdir(struct inode *dir,
     struct dentry *dentry,
     int mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_rmdir(struct inode *dir,
     struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_mknod(struct inode *dir,
     struct dentry *dentry,
     int mode, dev_t dev)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_rename(struct inode *old_dir,
      struct dentry *old_dentry,
      struct inode *new_dir,
      struct dentry *new_dentry,
      unsigned int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_readlink(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_follow_link(struct dentry *dentry,
          struct inode *inode,
          bool rcu)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_permission(struct inode *inode, int mask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_setattr(struct dentry *dentry,
       struct iattr *attr)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_getattr(const struct path *path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_setxattr(struct user_namespace *mnt_userns,
  struct dentry *dentry, const char *name, const void *value,
  size_t size, int flags)
{
 return cap_inode_setxattr(dentry, name, value, size, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_inode_post_setxattr(struct dentry *dentry,
  const char *name, const void *value, size_t size, int flags)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_getxattr(struct dentry *dentry,
   const char *name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_listxattr(struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_removexattr(struct user_namespace *mnt_userns,
          struct dentry *dentry,
          const char *name)
{
 return cap_inode_removexattr(mnt_userns, dentry, name);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_need_killpriv(struct dentry *dentry)
{
 return cap_inode_need_killpriv(dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_killpriv(struct user_namespace *mnt_userns,
       struct dentry *dentry)
{
 return cap_inode_killpriv(mnt_userns, dentry);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_getsecurity(struct user_namespace *mnt_userns,
          struct inode *inode,
          const char *name, void **buffer,
          bool alloc)
{
 return cap_inode_getsecurity(mnt_userns, inode, name, buffer, alloc);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_setsecurity(struct inode *inode, const char *name, const void *value, size_t size, int flags)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_inode_getsecid(struct inode *inode, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_copy_up(struct dentry *src, struct cred **new)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernfs_init_security(struct kernfs_node *kn_dir,
      struct kernfs_node *kn)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_copy_up_xattr(const char *name)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_permission(struct file *file, int mask)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_alloc(struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_file_free(struct file *file)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_ioctl(struct file *file, unsigned int cmd,
          unsigned long arg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_mmap_file(struct file *file, unsigned long prot,
         unsigned long flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_mmap_addr(unsigned long addr)
{
 return cap_mmap_addr(addr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_mprotect(struct vm_area_struct *vma,
      unsigned long reqprot,
      unsigned long prot)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_lock(struct file *file, unsigned int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_fcntl(struct file *file, unsigned int cmd,
          unsigned long arg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_file_set_fowner(struct file *file)
{
 return;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_send_sigiotask(struct task_struct *tsk,
            struct fown_struct *fown,
            int sig)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_receive(struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_file_open(struct file *file)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_alloc(struct task_struct *task,
          unsigned long clone_flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_task_free(struct task_struct *task)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_cred_alloc_blank(struct cred *cred, gfp_t gfp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_cred_free(struct cred *cred)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_prepare_creds(struct cred *new,
      const struct cred *old,
      gfp_t gfp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_transfer_creds(struct cred *new,
        const struct cred *old)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernel_act_as(struct cred *cred, u32 secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernel_create_files_as(struct cred *cred,
        struct inode *inode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernel_module_request(char *kmod_name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernel_load_data(enum kernel_load_data_id id, bool contents)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernel_post_load_data(char *buf, loff_t size,
       enum kernel_load_data_id id,
       char *description)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernel_read_file(struct file *file,
         enum kernel_read_file_id id,
         bool contents)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_kernel_post_read_file(struct file *file,
       char *buf, loff_t size,
       enum kernel_read_file_id id)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_fix_setuid(struct cred *new,
        const struct cred *old,
        int flags)
{
 return cap_task_fix_setuid(new, old, flags);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_fix_setgid(struct cred *new,
        const struct cred *old,
        int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_setpgid(struct task_struct *p, pid_t pgid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_getpgid(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_getsid(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_task_getsecid_subj(struct task_struct *p, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_task_getsecid_obj(struct task_struct *p, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_setnice(struct task_struct *p, int nice)
{
 return cap_task_setnice(p, nice);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_setioprio(struct task_struct *p, int ioprio)
{
 return cap_task_setioprio(p, ioprio);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_getioprio(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_prlimit(const struct cred *cred,
     const struct cred *tcred,
     unsigned int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_setrlimit(struct task_struct *p,
       unsigned int resource,
       struct rlimit *new_rlim)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_setscheduler(struct task_struct *p)
{
 return cap_task_setscheduler(p);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_getscheduler(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_movememory(struct task_struct *p)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_kill(struct task_struct *p,
         struct kernel_siginfo *info, int sig,
         const struct cred *cred)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_task_prctl(int option, unsigned long arg2,
          unsigned long arg3,
          unsigned long arg4,
          unsigned long arg5)
{
 return cap_task_prctl(option, arg2, arg3, arg4, arg5);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_task_to_inode(struct task_struct *p, struct inode *inode)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_ipc_permission(struct kern_ipc_perm *ipcp,
       short flag)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid)
{
 *secid = 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_msg_msg_alloc(struct msg_msg *msg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_msg_msg_free(struct msg_msg *msg)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_msg_queue_alloc(struct kern_ipc_perm *msq)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_msg_queue_free(struct kern_ipc_perm *msq)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_msg_queue_associate(struct kern_ipc_perm *msq,
            int msqflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_msg_queue_msgctl(struct kern_ipc_perm *msq, int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_msg_queue_msgsnd(struct kern_ipc_perm *msq,
         struct msg_msg *msg, int msqflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_msg_queue_msgrcv(struct kern_ipc_perm *msq,
         struct msg_msg *msg,
         struct task_struct *target,
         long type, int mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_shm_alloc(struct kern_ipc_perm *shp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_shm_free(struct kern_ipc_perm *shp)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_shm_associate(struct kern_ipc_perm *shp,
      int shmflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_shm_shmctl(struct kern_ipc_perm *shp, int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_shm_shmat(struct kern_ipc_perm *shp,
         char *shmaddr, int shmflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sem_alloc(struct kern_ipc_perm *sma)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sem_free(struct kern_ipc_perm *sma)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sem_associate(struct kern_ipc_perm *sma, int semflg)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sem_semctl(struct kern_ipc_perm *sma, int cmd)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sem_semop(struct kern_ipc_perm *sma,
         struct sembuf *sops, unsigned nsops,
         int alter)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_d_instantiate(struct dentry *dentry,
       struct inode *inode)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_getprocattr(struct task_struct *p, const char *lsm,
           char *name, char **value)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_setprocattr(const char *lsm, char *name,
           void *value, size_t size)
{
 return -22;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_netlink_send(struct sock *sk, struct sk_buff *skb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_ismaclabel(const char *name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_secid_to_secctx(u32 secid, char **secdata, u32 *seclen)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_secctx_to_secid(const char *secdata,
        u32 seclen,
        u32 *secid)
{
 return -95;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_release_secctx(char *secdata, u32 seclen)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_inode_invalidate_secctx(struct inode *inode)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_notifysecctx(struct inode *inode, void *ctx, u32 ctxlen)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen)
{
 return -95;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_locked_down(enum lockdown_reason what)
{
 return 0;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_post_notification(const struct cred *w_cred,
          const struct cred *cred,
          struct watch_notification *n)
{
 return 0;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_watch_key(struct key *key)
{
 return 0;
}
# 1428 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_unix_stream_connect(struct sock *sock,
            struct sock *other,
            struct sock *newsk)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_unix_may_send(struct socket *sock,
      struct socket *other)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_create(int family, int type,
      int protocol, int kern)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_post_create(struct socket *sock,
           int family,
           int type,
           int protocol, int kern)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_socketpair(struct socket *socka,
          struct socket *sockb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_bind(struct socket *sock,
           struct sockaddr *address,
           int addrlen)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_connect(struct socket *sock,
       struct sockaddr *address,
       int addrlen)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_listen(struct socket *sock, int backlog)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_accept(struct socket *sock,
      struct socket *newsock)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_sendmsg(struct socket *sock,
       struct msghdr *msg, int size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_recvmsg(struct socket *sock,
       struct msghdr *msg, int size,
       int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_getsockname(struct socket *sock)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_getpeername(struct socket *sock)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_getsockopt(struct socket *sock,
          int level, int optname)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_setsockopt(struct socket *sock,
          int level, int optname)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_shutdown(struct socket *sock, int how)
{
 return 0;
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sock_rcv_skb(struct sock *sk,
     struct sk_buff *skb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_getpeersec_stream(struct socket *sock, char *optval,
          int *optlen, unsigned len)
{
 return -92;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid)
{
 return -92;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sk_alloc(struct sock *sk, int family, gfp_t priority)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sk_free(struct sock *sk)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sk_clone(const struct sock *sk, struct sock *newsk)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sk_classify_flow(struct sock *sk,
          struct flowi_common *flic)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_req_classify_flow(const struct request_sock *req,
           struct flowi_common *flic)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sock_graft(struct sock *sk, struct socket *parent)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_inet_conn_request(const struct sock *sk,
   struct sk_buff *skb, struct request_sock *req)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_inet_csk_clone(struct sock *newsk,
   const struct request_sock *req)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_inet_conn_established(struct sock *sk,
   struct sk_buff *skb)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_secmark_relabel_packet(u32 secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_secmark_refcount_inc(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_secmark_refcount_dec(void)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_tun_dev_alloc_security(void **security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_tun_dev_free_security(void *security)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_tun_dev_create(void)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_tun_dev_attach_queue(void *security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_tun_dev_attach(struct sock *sk, void *security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_tun_dev_open(void *security)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sctp_assoc_request(struct sctp_endpoint *ep,
           struct sk_buff *skb)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_sctp_bind_connect(struct sock *sk, int optname,
          struct sockaddr *address,
          int addrlen)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_sctp_sk_clone(struct sctp_endpoint *ep,
       struct sock *sk,
       struct sock *newsk)
{
}
# 1653 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_ib_pkey_access(void *sec, u64 subnet_prefix, u16 pkey)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_ib_endport_manage_subnet(void *sec, const char *dev_name, u8 port_num)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_ib_alloc_security(void **sec)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_ib_free_security(void *sec)
{
}
# 1694 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_policy_alloc(struct xfrm_sec_ctx **ctxp,
          struct xfrm_user_sec_ctx *sec_ctx,
          gfp_t gfp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_policy_clone(struct xfrm_sec_ctx *old, struct xfrm_sec_ctx **new_ctxp)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_xfrm_policy_free(struct xfrm_sec_ctx *ctx)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_policy_delete(struct xfrm_sec_ctx *ctx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_state_alloc(struct xfrm_state *x,
     struct xfrm_user_sec_ctx *sec_ctx)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_state_alloc_acquire(struct xfrm_state *x,
     struct xfrm_sec_ctx *polsec, u32 secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_xfrm_state_free(struct xfrm_state *x)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_state_delete(struct xfrm_state *x)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_policy_lookup(struct xfrm_sec_ctx *ctx, u32 fl_secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_state_pol_flow_match(struct xfrm_state *x,
           struct xfrm_policy *xp,
           const struct flowi_common *flic)
{
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_xfrm_decode_session(struct sk_buff *skb, u32 *secid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_skb_classify_flow(struct sk_buff *skb,
           struct flowi_common *flic)
{
}
# 1778 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_unlink(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_mkdir(const struct path *dir, struct dentry *dentry,
          umode_t mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_rmdir(const struct path *dir, struct dentry *dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_mknod(const struct path *dir, struct dentry *dentry,
          umode_t mode, unsigned int dev)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_truncate(const struct path *path)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_symlink(const struct path *dir, struct dentry *dentry,
     const char *old_name)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_link(struct dentry *old_dentry,
         const struct path *new_dir,
         struct dentry *new_dentry)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_rename(const struct path *old_dir,
           struct dentry *old_dentry,
           const struct path *new_dir,
           struct dentry *new_dentry,
           unsigned int flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_chmod(const struct path *path, umode_t mode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_path_chroot(const struct path *path)
{
 return 0;
}
# 1854 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_key_alloc(struct key *key,
         const struct cred *cred,
         unsigned long flags)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_key_free(struct key *key)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_key_permission(key_ref_t key_ref,
       const struct cred *cred,
       enum key_need_perm need_perm)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_key_getsecurity(struct key *key, char **_buffer)
{
 *_buffer = ((void *)0);
 return 0;
}
# 1890 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_audit_rule_init(u32 field, u32 op, char *rulestr,
        void **lsmrule)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_audit_rule_known(struct audit_krule *krule)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_audit_rule_match(u32 secid, u32 field, u32 op,
         void *lsmrule)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_audit_rule_free(void *lsmrule)
{ }
# 1927 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *securityfs_create_dir(const char *name,
         struct dentry *parent)
{
 return ERR_PTR(-19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *securityfs_create_file(const char *name,
          umode_t mode,
          struct dentry *parent,
          void *data,
          const struct file_operations *fops)
{
 return ERR_PTR(-19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *securityfs_create_symlink(const char *name,
     struct dentry *parent,
     const char *target,
     const struct inode_operations *iops)
{
 return ERR_PTR(-19);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void securityfs_remove(struct dentry *dentry)
{}




union bpf_attr;
struct bpf_map;
struct bpf_prog;
struct bpf_prog_aux;
# 1969 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bpf(int cmd, union bpf_attr *attr,
          unsigned int size)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bpf_map(struct bpf_map *map, fmode_t fmode)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bpf_prog(struct bpf_prog *prog)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bpf_map_alloc(struct bpf_map *map)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_bpf_map_free(struct bpf_map *map)
{ }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_bpf_prog_alloc(struct bpf_prog_aux *aux)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_bpf_prog_free(struct bpf_prog_aux *aux)
{ }




struct perf_event_attr;
struct perf_event;
# 2014 "./include/linux/security.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_perf_event_open(struct perf_event_attr *attr,
        int type)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_perf_event_alloc(struct perf_event *event)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void security_perf_event_free(struct perf_event *event)
{
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_perf_event_read(struct perf_event *event)
{
 return 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int security_perf_event_write(struct perf_event *event)
{
 return 0;
}
# 60 "./include/linux/perf_event.h" 2


struct perf_callchain_entry {
 __u64 nr;
 __u64 ip[];
};

struct perf_callchain_entry_ctx {
 struct perf_callchain_entry *entry;
 u32 max_stack;
 u32 nr;
 short contexts;
 bool contexts_maxed;
};

typedef unsigned long (*perf_copy_f)(void *dst, const void *src,
         unsigned long off, unsigned long len);

struct perf_raw_frag {
 union {
  struct perf_raw_frag *next;
  unsigned long pad;
 };
 perf_copy_f copy;
 void *data;
 u32 size;
} __attribute__((__packed__));

struct perf_raw_record {
 struct perf_raw_frag frag;
 u32 size;
};
# 113 "./include/linux/perf_event.h"
struct perf_branch_stack {
 __u64 nr;
 __u64 hw_idx;
 struct perf_branch_entry entries[];
};

struct task_struct;




struct hw_perf_event_extra {
 u64 config;
 unsigned int reg;
 int alloc;
 int idx;
};




struct hw_perf_event {

 union {
  struct {
   u64 config;
   u64 last_tag;
   unsigned long config_base;
   unsigned long event_base;
   int event_base_rdpmc;
   int idx;
   int last_cpu;
   int flags;

   struct hw_perf_event_extra extra_reg;
   struct hw_perf_event_extra branch_reg;
  };
  struct {
   struct hrtimer hrtimer;
  };
  struct {

   struct list_head tp_list;
  };
  struct {
   u64 pwr_acc;
   u64 ptsc;
  };

  struct {





   struct arch_hw_breakpoint info;
   struct list_head bp_list;
  };

  struct {
   u8 iommu_bank;
   u8 iommu_cntr;
   u16 padding;
   u64 conf;
   u64 conf1;
  };
 };




 struct task_struct *target;





 void *addr_filters;


 unsigned long addr_filters_gen;
# 202 "./include/linux/perf_event.h"
 int state;





 local64_t prev_count;




 u64 sample_period;

 union {
  struct {



   u64 last_period;







   local64_t period_left;
  };
  struct {
   u64 saved_metric;
   u64 saved_slots;
  };
 };





 u64 interrupts_seq;
 u64 interrupts;





 u64 freq_time_stamp;
 u64 freq_count_stamp;

};

struct perf_event;
# 274 "./include/linux/perf_event.h"
struct perf_output_handle;




struct pmu {
 struct list_head entry;

 struct module *module;
 struct device *dev;
 const struct attribute_group **attr_groups;
 const struct attribute_group **attr_update;
 const char *name;
 int type;




 int capabilities;

 int *pmu_disable_count;
 struct perf_cpu_context *pmu_cpu_context;
 atomic_t exclusive_cnt;
 int task_ctx_nr;
 int hrtimer_interval_ms;


 unsigned int nr_addr_filters;





 void (*pmu_enable) (struct pmu *pmu);
 void (*pmu_disable) (struct pmu *pmu);
# 326 "./include/linux/perf_event.h"
 int (*event_init) (struct perf_event *event);





 void (*event_mapped) (struct perf_event *event, struct mm_struct *mm);
 void (*event_unmapped) (struct perf_event *event, struct mm_struct *mm);
# 361 "./include/linux/perf_event.h"
 int (*add) (struct perf_event *event, int flags);
 void (*del) (struct perf_event *event, int flags);
# 382 "./include/linux/perf_event.h"
 void (*start) (struct perf_event *event, int flags);
 void (*stop) (struct perf_event *event, int flags);







 void (*read) (struct perf_event *event);
# 403 "./include/linux/perf_event.h"
 void (*start_txn) (struct pmu *pmu, unsigned int txn_flags);
# 412 "./include/linux/perf_event.h"
 int (*commit_txn) (struct pmu *pmu);






 void (*cancel_txn) (struct pmu *pmu);





 int (*event_idx) (struct perf_event *event);




 void (*sched_task) (struct perf_event_context *ctx,
     bool sched_in);




 struct kmem_cache *task_ctx_cache;







 void (*swap_task_ctx) (struct perf_event_context *prev,
      struct perf_event_context *next);





 void *(*setup_aux) (struct perf_event *event, void **pages,
      int nr_pages, bool overwrite);





 void (*free_aux) (void *aux);
# 469 "./include/linux/perf_event.h"
 long (*snapshot_aux) (struct perf_event *event,
      struct perf_output_handle *handle,
      unsigned long size);
# 481 "./include/linux/perf_event.h"
 int (*addr_filters_validate) (struct list_head *filters);
# 495 "./include/linux/perf_event.h"
 void (*addr_filters_sync) (struct perf_event *event);
# 505 "./include/linux/perf_event.h"
 int (*aux_output_match) (struct perf_event *event);





 int (*filter_match) (struct perf_event *event);




 int (*check_period) (struct perf_event *event, u64 value);
};

enum perf_addr_filter_action_t {
 PERF_ADDR_FILTER_ACTION_STOP = 0,
 PERF_ADDR_FILTER_ACTION_START,
 PERF_ADDR_FILTER_ACTION_FILTER,
};
# 535 "./include/linux/perf_event.h"
struct perf_addr_filter {
 struct list_head entry;
 struct path path;
 unsigned long offset;
 unsigned long size;
 enum perf_addr_filter_action_t action;
};
# 553 "./include/linux/perf_event.h"
struct perf_addr_filters_head {
 struct list_head list;
 raw_spinlock_t lock;
 unsigned int nr_file_filters;
};

struct perf_addr_filter_range {
 unsigned long start;
 unsigned long size;
};




enum perf_event_state {
 PERF_EVENT_STATE_DEAD = -4,
 PERF_EVENT_STATE_EXIT = -3,
 PERF_EVENT_STATE_ERROR = -2,
 PERF_EVENT_STATE_OFF = -1,
 PERF_EVENT_STATE_INACTIVE = 0,
 PERF_EVENT_STATE_ACTIVE = 1,
};

struct file;
struct perf_sample_data;

typedef void (*perf_overflow_handler_t)(struct perf_event *,
     struct perf_sample_data *,
     struct pt_regs *regs);
# 600 "./include/linux/perf_event.h"
struct swevent_hlist {
 struct hlist_head heads[(1 << 8)];
 struct callback_head callback_head;
};
# 613 "./include/linux/perf_event.h"
struct perf_cgroup;
struct perf_buffer;

struct pmu_event_list {
 raw_spinlock_t lock;
 struct list_head list;
};
# 628 "./include/linux/perf_event.h"
struct perf_event {






 struct list_head event_entry;





 struct list_head sibling_list;
 struct list_head active_list;



 struct rb_node group_node;
 u64 group_index;





 struct list_head migrate_entry;

 struct hlist_node hlist_entry;
 struct list_head active_entry;
 int nr_siblings;


 int event_caps;

 int group_caps;

 struct perf_event *group_leader;
 struct pmu *pmu;
 void *pmu_private;

 enum perf_event_state state;
 unsigned int attach_state;
 local64_t count;
 atomic64_t child_count;







 u64 total_time_enabled;
 u64 total_time_running;
 u64 tstamp;
# 691 "./include/linux/perf_event.h"
 u64 shadow_ctx_time;

 struct perf_event_attr attr;
 u16 header_size;
 u16 id_header_size;
 u16 read_size;
 struct hw_perf_event hw;

 struct perf_event_context *ctx;
 atomic_long_t refcount;





 atomic64_t child_total_time_enabled;
 atomic64_t child_total_time_running;




 struct mutex child_mutex;
 struct list_head child_list;
 struct perf_event *parent;

 int oncpu;
 int cpu;

 struct list_head owner_entry;
 struct task_struct *owner;


 struct mutex mmap_mutex;
 atomic_t mmap_count;

 struct perf_buffer *rb;
 struct list_head rb_entry;
 unsigned long rcu_batches;
 int rcu_pending;


 wait_queue_head_t waitq;
 struct fasync_struct *fasync;


 int pending_wakeup;
 int pending_kill;
 int pending_disable;
 unsigned long pending_addr;
 struct irq_work pending;

 atomic_t event_limit;


 struct perf_addr_filters_head addr_filters;

 struct perf_addr_filter_range *addr_filter_ranges;
 unsigned long addr_filters_gen;


 struct perf_event *aux_event;

 void (*destroy)(struct perf_event *);
 struct callback_head callback_head;

 struct pid_namespace *ns;
 u64 id;

 u64 (*clock)(void);
 perf_overflow_handler_t overflow_handler;
 void *overflow_handler_context;

 perf_overflow_handler_t orig_overflow_handler;
 struct bpf_prog *prog;
 u64 bpf_cookie;



 struct trace_event_call *tp_event;
 struct event_filter *filter;

 struct ftrace_ops ftrace_ops;




 struct perf_cgroup *cgrp;





 struct list_head sb_list;

};


struct perf_event_groups {
 struct rb_root tree;
 u64 index;
};






struct perf_event_context {
 struct pmu *pmu;




 raw_spinlock_t lock;





 struct mutex mutex;

 struct list_head active_ctx_list;
 struct perf_event_groups pinned_groups;
 struct perf_event_groups flexible_groups;
 struct list_head event_list;

 struct list_head pinned_active;
 struct list_head flexible_active;

 int nr_events;
 int nr_active;
 int is_active;
 int nr_stat;
 int nr_freq;
 int rotate_disable;




 int rotate_necessary;
 refcount_t refcount;
 struct task_struct *task;




 u64 time;
 u64 timestamp;





 struct perf_event_context *parent_ctx;
 u64 parent_gen;
 u64 generation;
 int pin_count;

 int nr_cgroups;

 void *task_ctx_data;
 struct callback_head callback_head;
};
# 864 "./include/linux/perf_event.h"
struct perf_cpu_context {
 struct perf_event_context ctx;
 struct perf_event_context *task_ctx;
 int active_oncpu;
 int exclusive;

 raw_spinlock_t hrtimer_lock;
 struct hrtimer hrtimer;
 ktime_t hrtimer_interval;
 unsigned int hrtimer_active;


 struct perf_cgroup *cgrp;
 struct list_head cgrp_cpuctx_entry;


 struct list_head sched_cb_entry;
 int sched_cb_usage;

 int online;




 int heap_size;
 struct perf_event **heap;
 struct perf_event *heap_default[2];
};

struct perf_output_handle {
 struct perf_event *event;
 struct perf_buffer *rb;
 unsigned long wakeup;
 unsigned long size;
 u64 aux_flags;
 union {
  void *addr;
  unsigned long head;
 };
 int page;
};

struct bpf_perf_event_data_kern {
 bpf_user_pt_regs_t *regs;
 struct perf_sample_data *data;
 struct perf_event *event;
};







struct perf_cgroup_info {
 u64 time;
 u64 timestamp;
};

struct perf_cgroup {
 struct cgroup_subsys_state css;
 struct perf_cgroup_info *info;
};






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct perf_cgroup *
perf_cgroup_from_task(struct task_struct *task, struct perf_event_context *ctx)
{
 return ({ void *__mptr = (void *)(({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { extern void __compiletime_assert_281(void) ; if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_281(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(perf_event_cgrp_id)]); do { extern void __compiletime_assert_282(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { extern void __compiletime_assert_281(void) ; if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_281(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(perf_event_cgrp_id)])), typeof(((struct perf_cgroup *)0)->css)) && !__builtin_types_compatible_p(typeof(*(({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ do { extern void __compiletime_assert_281(void) ; if (!((sizeof((((task))->cgroups)) == sizeof(char) || sizeof((((task))->cgroups)) == sizeof(short) || sizeof((((task))->cgroups)) == sizeof(int) || sizeof((((task))->cgroups)) == sizeof(long)) || sizeof((((task))->cgroups)) == sizeof(long long))) __compiletime_assert_281(); } while (0); (*(const volatile typeof( _Generic(((((task))->cgroups)), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: ((((task))->cgroups)))) *)&((((task))->cgroups))); }); do { } while (0 && (!((0) || rcu_read_lock_held()))); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(perf_event_cgrp_id)])), typeof(void))))) __compiletime_assert_282(); } while (0); ((struct perf_cgroup *)(__mptr - __builtin_offsetof(struct perf_cgroup, css))); });



}




extern void *perf_aux_output_begin(struct perf_output_handle *handle,
       struct perf_event *event);
extern void perf_aux_output_end(struct perf_output_handle *handle,
    unsigned long size);
extern int perf_aux_output_skip(struct perf_output_handle *handle,
    unsigned long size);
extern void *perf_get_aux(struct perf_output_handle *handle);
extern void perf_aux_output_flag(struct perf_output_handle *handle, u64 flags);
extern void perf_event_itrace_started(struct perf_event *event);

extern int perf_pmu_register(struct pmu *pmu, const char *name, int type);
extern void perf_pmu_unregister(struct pmu *pmu);

extern void __perf_event_task_sched_in(struct task_struct *prev,
           struct task_struct *task);
extern void __perf_event_task_sched_out(struct task_struct *prev,
     struct task_struct *next);
extern int perf_event_init_task(struct task_struct *child, u64 clone_flags);
extern void perf_event_exit_task(struct task_struct *child);
extern void perf_event_free_task(struct task_struct *task);
extern void perf_event_delayed_put(struct task_struct *task);
extern struct file *perf_event_get(unsigned int fd);
extern const struct perf_event *perf_get_event(struct file *file);
extern const struct perf_event_attr *perf_event_attrs(struct perf_event *event);
extern void perf_event_print_debug(void);
extern void perf_pmu_disable(struct pmu *pmu);
extern void perf_pmu_enable(struct pmu *pmu);
extern void perf_sched_cb_dec(struct pmu *pmu);
extern void perf_sched_cb_inc(struct pmu *pmu);
extern int perf_event_task_disable(void);
extern int perf_event_task_enable(void);

extern void perf_pmu_resched(struct pmu *pmu);

extern int perf_event_refresh(struct perf_event *event, int refresh);
extern void perf_event_update_userpage(struct perf_event *event);
extern int perf_event_release_kernel(struct perf_event *event);
extern struct perf_event *
perf_event_create_kernel_counter(struct perf_event_attr *attr,
    int cpu,
    struct task_struct *task,
    perf_overflow_handler_t callback,
    void *context);
extern void perf_pmu_migrate_context(struct pmu *pmu,
    int src_cpu, int dst_cpu);
int perf_event_read_local(struct perf_event *event, u64 *value,
     u64 *enabled, u64 *running);
extern u64 perf_event_read_value(struct perf_event *event,
     u64 *enabled, u64 *running);


struct perf_sample_data {




 u64 addr;
 struct perf_raw_record *raw;
 struct perf_branch_stack *br_stack;
 u64 period;
 union perf_sample_weight weight;
 u64 txn;
 union perf_mem_data_src data_src;





 u64 type;
 u64 ip;
 struct {
  u32 pid;
  u32 tid;
 } tid_entry;
 u64 time;
 u64 id;
 u64 stream_id;
 struct {
  u32 cpu;
  u32 reserved;
 } cpu_entry;
 struct perf_callchain_entry *callchain;
 u64 aux_size;

 struct perf_regs regs_user;
 struct perf_regs regs_intr;
 u64 stack_user_size;

 u64 phys_addr;
 u64 cgroup;
 u64 data_page_size;
 u64 code_page_size;
} __attribute__((__aligned__((1 << 7))));
# 1046 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void perf_sample_data_init(struct perf_sample_data *data,
      u64 addr, u64 period)
{

 data->addr = addr;
 data->raw = ((void *)0);
 data->br_stack = ((void *)0);
 data->period = period;
 data->weight.full = 0;
 data->data_src.val = ((((__u64)0x01) << 0) | (((__u64)0x01) << 5) | (((__u64)0x01) << 19) | (((__u64)0x01) << 24) | (((__u64)0x01) << 26));
 data->txn = 0;
}

extern void perf_output_sample(struct perf_output_handle *handle,
          struct perf_event_header *header,
          struct perf_sample_data *data,
          struct perf_event *event);
extern void perf_prepare_sample(struct perf_event_header *header,
    struct perf_sample_data *data,
    struct perf_event *event,
    struct pt_regs *regs);

extern int perf_event_overflow(struct perf_event *event,
     struct perf_sample_data *data,
     struct pt_regs *regs);

extern void perf_event_output_forward(struct perf_event *event,
         struct perf_sample_data *data,
         struct pt_regs *regs);
extern void perf_event_output_backward(struct perf_event *event,
           struct perf_sample_data *data,
           struct pt_regs *regs);
extern int perf_event_output(struct perf_event *event,
        struct perf_sample_data *data,
        struct pt_regs *regs);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_default_overflow_handler(struct perf_event *event)
{
 if (__builtin_expect(!!(event->overflow_handler == perf_event_output_forward), 1))
  return true;
 if (__builtin_expect(!!(event->overflow_handler == perf_event_output_backward), 0))
  return true;
 return false;
}

extern void
perf_event_header__init_id(struct perf_event_header *header,
      struct perf_sample_data *data,
      struct perf_event *event);
extern void
perf_event__output_id_sample(struct perf_event *event,
        struct perf_output_handle *handle,
        struct perf_sample_data *sample);

extern void
perf_log_lost_samples(struct perf_event *event, u64 lost);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool event_has_any_exclude_flag(struct perf_event *event)
{
 struct perf_event_attr *attr = &event->attr;

 return attr->exclude_idle || attr->exclude_user ||
        attr->exclude_kernel || attr->exclude_hv ||
        attr->exclude_guest || attr->exclude_host;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sampling_event(struct perf_event *event)
{
 return event->attr.sample_period != 0;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_software_event(struct perf_event *event)
{
 return event->event_caps & ((((1UL))) << (0));
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_software_context(struct perf_event *event)
{
 return event->ctx->pmu->task_ctx_nr == perf_sw_context;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_exclusive_pmu(struct pmu *pmu)
{
 return pmu->capabilities & 0x0010;
}

extern struct static_key perf_swevent_enabled[PERF_COUNT_SW_MAX];

extern void ___perf_sw_event(u32, u64, struct pt_regs *, u64);
extern void __perf_sw_event(u32, u64, struct pt_regs *, u64);
# 1162 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void perf_fetch_caller_regs(struct pt_regs *regs)
{
 do { (regs)->result = 0; (regs)->nip = ((unsigned long)__builtin_return_address(0)); (regs)->gpr[1] = current_stack_frame(); asm volatile("mfmsr %0" : "=r" ((regs)->msr)); } while (0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
perf_sw_event(u32 event_id, u64 nr, struct pt_regs *regs, u64 addr)
{
 if (static_key_false(&perf_swevent_enabled[event_id]))
  __perf_sw_event(event_id, nr, regs, addr);
}

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs) __perf_regs[4];






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __perf_sw_event_sched(u32 event_id, u64 nr, u64 addr)
{
 struct pt_regs *regs = ({ do { const void *__vpp_verify = (typeof((&__perf_regs[0]) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&__perf_regs[0])) *)(&__perf_regs[0])); (typeof((typeof(*(&__perf_regs[0])) *)(&__perf_regs[0]))) (__ptr + ((local_paca->data_offset))); }); });

 perf_fetch_caller_regs(regs);
 ___perf_sw_event(event_id, nr, regs, addr);
}

extern struct static_key_false perf_sched_events;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __perf_sw_enabled(int swevt)
{
 return static_key_false(&perf_swevent_enabled[swevt]);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void perf_event_task_migrate(struct task_struct *task)
{
 if (__perf_sw_enabled(PERF_COUNT_SW_CPU_MIGRATIONS))
  task->sched_migrated = 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void perf_event_task_sched_in(struct task_struct *prev,
         struct task_struct *task)
{
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&perf_sched_events), struct static_key_true)) branch = arch_static_branch_jump(&(&perf_sched_events)->key, false); else if (__builtin_types_compatible_p(typeof(*&perf_sched_events), struct static_key_false)) branch = arch_static_branch(&(&perf_sched_events)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }))
  __perf_event_task_sched_in(prev, task);

 if (__perf_sw_enabled(PERF_COUNT_SW_CPU_MIGRATIONS) &&
     task->sched_migrated) {
  __perf_sw_event_sched(PERF_COUNT_SW_CPU_MIGRATIONS, 1, 0);
  task->sched_migrated = 0;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void perf_event_task_sched_out(struct task_struct *prev,
          struct task_struct *next)
{
 if (__perf_sw_enabled(PERF_COUNT_SW_CONTEXT_SWITCHES))
  __perf_sw_event_sched(PERF_COUNT_SW_CONTEXT_SWITCHES, 1, 0);


 if (__perf_sw_enabled(PERF_COUNT_SW_CGROUP_SWITCHES) &&
     perf_cgroup_from_task(prev, ((void *)0)) !=
     perf_cgroup_from_task(next, ((void *)0)))
  __perf_sw_event_sched(PERF_COUNT_SW_CGROUP_SWITCHES, 1, 0);


 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&perf_sched_events), struct static_key_true)) branch = arch_static_branch_jump(&(&perf_sched_events)->key, false); else if (__builtin_types_compatible_p(typeof(*&perf_sched_events), struct static_key_false)) branch = arch_static_branch(&(&perf_sched_events)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }))
  __perf_event_task_sched_out(prev, next);
}

extern void perf_event_mmap(struct vm_area_struct *vma);

extern void perf_event_ksymbol(u16 ksym_type, u64 addr, u32 len,
          bool unregister, const char *sym);
extern void perf_event_bpf_event(struct bpf_prog *prog,
     enum perf_bpf_event_type type,
     u16 flags);

extern struct perf_guest_info_callbacks *perf_guest_cbs;
extern int perf_register_guest_info_callbacks(struct perf_guest_info_callbacks *callbacks);
extern int perf_unregister_guest_info_callbacks(struct perf_guest_info_callbacks *callbacks);

extern void perf_event_exec(void);
extern void perf_event_comm(struct task_struct *tsk, bool exec);
extern void perf_event_namespaces(struct task_struct *tsk);
extern void perf_event_fork(struct task_struct *tsk);
extern void perf_event_text_poke(const void *addr,
     const void *old_bytes, size_t old_len,
     const void *new_bytes, size_t new_len);


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct perf_callchain_entry) perf_callchain_entry;

extern void perf_callchain_user(struct perf_callchain_entry_ctx *entry, struct pt_regs *regs);
extern void perf_callchain_kernel(struct perf_callchain_entry_ctx *entry, struct pt_regs *regs);
extern struct perf_callchain_entry *
get_perf_callchain(struct pt_regs *regs, u32 init_nr, bool kernel, bool user,
     u32 max_stack, bool crosstask, bool add_mark);
extern struct perf_callchain_entry *perf_callchain(struct perf_event *event, struct pt_regs *regs);
extern int get_callchain_buffers(int max_stack);
extern void put_callchain_buffers(void);
extern struct perf_callchain_entry *get_callchain_entry(int *rctx);
extern void put_callchain_entry(int rctx);

extern int sysctl_perf_event_max_stack;
extern int sysctl_perf_event_max_contexts_per_stack;

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int perf_callchain_store_context(struct perf_callchain_entry_ctx *ctx, u64 ip)
{
 if (ctx->contexts < sysctl_perf_event_max_contexts_per_stack) {
  struct perf_callchain_entry *entry = ctx->entry;
  entry->ip[entry->nr++] = ip;
  ++ctx->contexts;
  return 0;
 } else {
  ctx->contexts_maxed = true;
  return -1;
 }
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int perf_callchain_store(struct perf_callchain_entry_ctx *ctx, u64 ip)
{
 if (ctx->nr < ctx->max_stack && !ctx->contexts_maxed) {
  struct perf_callchain_entry *entry = ctx->entry;
  entry->ip[entry->nr++] = ip;
  ++ctx->nr;
  return 0;
 } else {
  return -1;
 }
}

extern int sysctl_perf_event_paranoid;
extern int sysctl_perf_event_mlock;
extern int sysctl_perf_event_sample_rate;
extern int sysctl_perf_cpu_time_max_percent;

extern void perf_sample_event_took(u64 sample_len_ns);

int perf_proc_update_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int perf_cpu_time_max_percent_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
int perf_event_max_stack_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp, loff_t *ppos);
# 1316 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int perf_is_paranoid(void)
{
 return sysctl_perf_event_paranoid > -1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int perf_allow_kernel(struct perf_event_attr *attr)
{
 if (sysctl_perf_event_paranoid > 1 && !perfmon_capable())
  return -13;

 return security_perf_event_open(attr, 2);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int perf_allow_cpu(struct perf_event_attr *attr)
{
 if (sysctl_perf_event_paranoid > 0 && !perfmon_capable())
  return -13;

 return security_perf_event_open(attr, 1);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int perf_allow_tracepoint(struct perf_event_attr *attr)
{
 if (sysctl_perf_event_paranoid > -1 && !perfmon_capable())
  return -1;

 return security_perf_event_open(attr, 3);
}

extern void perf_event_init(void);
extern void perf_tp_event(u16 event_type, u64 count, void *record,
     int entry_size, struct pt_regs *regs,
     struct hlist_head *head, int rctx,
     struct task_struct *task);
extern void perf_bp_event(struct perf_event *event, void *data);
# 1361 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool has_branch_stack(struct perf_event *event)
{
 return event->attr.sample_type & PERF_SAMPLE_BRANCH_STACK;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool needs_branch_stack(struct perf_event *event)
{
 return event->attr.branch_sample_type != 0;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool has_aux(struct perf_event *event)
{
 return event->pmu->setup_aux;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_write_backward(struct perf_event *event)
{
 return !!event->attr.write_backward;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool has_addr_filter(struct perf_event *event)
{
 return event->pmu->nr_addr_filters;
}




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct perf_addr_filters_head *
perf_event_addr_filters(struct perf_event *event)
{
 struct perf_addr_filters_head *ifh = &event->addr_filters;

 if (event->parent)
  ifh = &event->parent->addr_filters;

 return ifh;
}

extern void perf_event_addr_filters_sync(struct perf_event *event);

extern int perf_output_begin(struct perf_output_handle *handle,
        struct perf_sample_data *data,
        struct perf_event *event, unsigned int size);
extern int perf_output_begin_forward(struct perf_output_handle *handle,
         struct perf_sample_data *data,
         struct perf_event *event,
         unsigned int size);
extern int perf_output_begin_backward(struct perf_output_handle *handle,
          struct perf_sample_data *data,
          struct perf_event *event,
          unsigned int size);

extern void perf_output_end(struct perf_output_handle *handle);
extern unsigned int perf_output_copy(struct perf_output_handle *handle,
        const void *buf, unsigned int len);
extern unsigned int perf_output_skip(struct perf_output_handle *handle,
         unsigned int len);
extern long perf_output_copy_aux(struct perf_output_handle *aux_handle,
     struct perf_output_handle *handle,
     unsigned long from, unsigned long to);
extern int perf_swevent_get_recursion_context(void);
extern void perf_swevent_put_recursion_context(int rctx);
extern u64 perf_swevent_set_period(struct perf_event *event);
extern void perf_event_enable(struct perf_event *event);
extern void perf_event_disable(struct perf_event *event);
extern void perf_event_disable_local(struct perf_event *event);
extern void perf_event_disable_inatomic(struct perf_event *event);
extern void perf_event_task_tick(void);
extern int perf_event_account_interrupt(struct perf_event *event);
extern int perf_event_period(struct perf_event *event, u64 value);
extern u64 perf_event_pause(struct perf_event *event, bool reset);
# 1529 "./include/linux/perf_event.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void perf_restore_debug_store(void) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool perf_raw_frag_last(const struct perf_raw_frag *frag)
{
 return frag->pad < sizeof(u64);
}



struct perf_pmu_events_attr {
 struct device_attribute attr;
 u64 id;
 const char *event_str;
};

struct perf_pmu_events_ht_attr {
 struct device_attribute attr;
 u64 id;
 const char *event_str_ht;
 const char *event_str_noht;
};

struct perf_pmu_events_hybrid_attr {
 struct device_attribute attr;
 u64 id;
 const char *event_str;
 u64 pmu_type;
};

struct perf_pmu_format_hybrid_attr {
 struct device_attribute attr;
 u64 pmu_type;
};

ssize_t perf_event_sysfs_show(struct device *dev, struct device_attribute *attr,
         char *page);
# 1600 "./include/linux/perf_event.h"
int perf_event_init_cpu(unsigned int cpu);
int perf_event_exit_cpu(unsigned int cpu);





extern void __attribute__((__weak__)) arch_perf_update_userpage(struct perf_event *event,
          struct perf_event_mmap_page *userpg,
          u64 now);


extern __attribute__((__weak__)) u64 arch_perf_get_page_size(struct mm_struct *mm, unsigned long addr);
# 11 "./include/linux/trace_events.h" 2
# 1 "./include/linux/tracepoint.h" 1
# 12 "./include/linux/trace_events.h" 2

struct trace_array;
struct array_buffer;
struct tracer;
struct dentry;
struct bpf_prog;

const char *trace_print_flags_seq(struct trace_seq *p, const char *delim,
      unsigned long flags,
      const struct trace_print_flags *flag_array);

const char *trace_print_symbols_seq(struct trace_seq *p, unsigned long val,
        const struct trace_print_flags *symbol_array);
# 37 "./include/linux/trace_events.h"
const char *trace_print_bitmask_seq(struct trace_seq *p, void *bitmask_ptr,
        unsigned int bitmask_size);

const char *trace_print_hex_seq(struct trace_seq *p,
    const unsigned char *buf, int len,
    bool concatenate);

const char *trace_print_array_seq(struct trace_seq *p,
       const void *buf, int count,
       size_t el_size);

const char *
trace_print_hex_dump_seq(struct trace_seq *p, const char *prefix_str,
    int prefix_type, int rowsize, int groupsize,
    const void *buf, size_t len, bool ascii);

struct trace_iterator;
struct trace_event;

int trace_raw_output_prep(struct trace_iterator *iter,
     struct trace_event *event);
extern __attribute__((__format__(printf, 2, 3)))
void trace_event_printf(struct trace_iterator *iter, const char *fmt, ...);







struct trace_entry {
 unsigned short type;
 unsigned char flags;
 unsigned char preempt_count;
 int pid;
};
# 81 "./include/linux/trace_events.h"
struct trace_iterator {
 struct trace_array *tr;
 struct tracer *trace;
 struct array_buffer *array_buffer;
 void *private;
 int cpu_file;
 struct mutex mutex;
 struct ring_buffer_iter **buffer_iter;
 unsigned long iter_flags;
 void *temp;
 unsigned int temp_size;
 char *fmt;
 unsigned int fmt_size;


 struct trace_seq tmp_seq;

 cpumask_var_t started;


 bool snapshot;


 struct trace_seq seq;
 struct trace_entry *ent;
 unsigned long lost_events;
 int leftover;
 int ent_size;
 int cpu;
 u64 ts;

 loff_t pos;
 long idx;


};

enum trace_iter_flags {
 TRACE_FILE_LAT_FMT = 1,
 TRACE_FILE_ANNOTATE = 2,
 TRACE_FILE_TIME_IN_NS = 4,
};


typedef enum print_line_t (*trace_print_func)(struct trace_iterator *iter,
          int flags, struct trace_event *event);

struct trace_event_functions {
 trace_print_func trace;
 trace_print_func raw;
 trace_print_func hex;
 trace_print_func binary;
};

struct trace_event {
 struct hlist_node node;
 struct list_head list;
 int type;
 struct trace_event_functions *funcs;
};

extern int register_trace_event(struct trace_event *event);
extern int unregister_trace_event(struct trace_event *event);


enum print_line_t {
 TRACE_TYPE_PARTIAL_LINE = 0,
 TRACE_TYPE_HANDLED = 1,
 TRACE_TYPE_UNHANDLED = 2,
 TRACE_TYPE_NO_CONSUME = 3
};

enum print_line_t trace_handle_return(struct trace_seq *s);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_generic_entry_update(struct trace_entry *entry,
      unsigned short type,
      unsigned int trace_ctx)
{
 entry->preempt_count = trace_ctx & 0xff;
 entry->pid = get_current()->pid;
 entry->type = type;
 entry->flags = trace_ctx >> 16;
}

unsigned int tracing_gen_ctx_irq_test(unsigned int irqs_status);

enum trace_flag_type {
 TRACE_FLAG_IRQS_OFF = 0x01,
 TRACE_FLAG_IRQS_NOSUPPORT = 0x02,
 TRACE_FLAG_NEED_RESCHED = 0x04,
 TRACE_FLAG_HARDIRQ = 0x08,
 TRACE_FLAG_SOFTIRQ = 0x10,
 TRACE_FLAG_PREEMPT_RESCHED = 0x20,
 TRACE_FLAG_NMI = 0x40,
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int tracing_gen_ctx_flags(unsigned long irqflags)
{
 unsigned int irq_status = ({ ({ unsigned long __dummy; typeof(irqflags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(irqflags); }) ?
  TRACE_FLAG_IRQS_OFF : 0;
 return tracing_gen_ctx_irq_test(irq_status);
}
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int tracing_gen_ctx(void)
{
 unsigned long irqflags;

 do { ({ unsigned long __dummy; typeof(irqflags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); irqflags = arch_local_save_flags(); } while (0);
 return tracing_gen_ctx_flags(irqflags);
}
# 203 "./include/linux/trace_events.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int tracing_gen_ctx_dec(void)
{
 unsigned int trace_ctx;

 trace_ctx = tracing_gen_ctx();




 if (0)
  trace_ctx--;
 return trace_ctx;
}

struct trace_event_file;

struct ring_buffer_event *
trace_event_buffer_lock_reserve(struct trace_buffer **current_buffer,
    struct trace_event_file *trace_file,
    int type, unsigned long len,
    unsigned int trace_ctx);




void tracing_record_taskinfo(struct task_struct *task, int flags);
void tracing_record_taskinfo_sched_switch(struct task_struct *prev,
       struct task_struct *next, int flags);

void tracing_record_cmdline(struct task_struct *task);
void tracing_record_tgid(struct task_struct *task);

int trace_output_call(struct trace_iterator *iter, char *name, char *fmt, ...);

struct event_filter;

enum trace_reg {
 TRACE_REG_REGISTER,
 TRACE_REG_UNREGISTER,

 TRACE_REG_PERF_REGISTER,
 TRACE_REG_PERF_UNREGISTER,
 TRACE_REG_PERF_OPEN,
 TRACE_REG_PERF_CLOSE,





 TRACE_REG_PERF_ADD,
 TRACE_REG_PERF_DEL,

};

struct trace_event_call;



struct trace_event_fields {
 const char *type;
 union {
  struct {
   const char *name;
   const int size;
   const int align;
   const int is_signed;
   const int filter_type;
  };
  int (*define_fields)(struct trace_event_call *);
 };
};

struct trace_event_class {
 const char *system;
 void *probe;

 void *perf_probe;

 int (*reg)(struct trace_event_call *event,
           enum trace_reg type, void *data);
 struct trace_event_fields *fields_array;
 struct list_head *(*get_fields)(struct trace_event_call *);
 struct list_head fields;
 int (*raw_init)(struct trace_event_call *);
};

extern int trace_event_reg(struct trace_event_call *event,
       enum trace_reg type, void *data);

struct trace_event_buffer {
 struct trace_buffer *buffer;
 struct ring_buffer_event *event;
 struct trace_event_file *trace_file;
 void *entry;
 unsigned int trace_ctx;
 struct pt_regs *regs;
};

void *trace_event_buffer_reserve(struct trace_event_buffer *fbuffer,
      struct trace_event_file *trace_file,
      unsigned long len);

void trace_event_buffer_commit(struct trace_event_buffer *fbuffer);

enum {
 TRACE_EVENT_FL_FILTERED_BIT,
 TRACE_EVENT_FL_CAP_ANY_BIT,
 TRACE_EVENT_FL_NO_SET_FILTER_BIT,
 TRACE_EVENT_FL_IGNORE_ENABLE_BIT,
 TRACE_EVENT_FL_TRACEPOINT_BIT,
 TRACE_EVENT_FL_DYNAMIC_BIT,
 TRACE_EVENT_FL_KPROBE_BIT,
 TRACE_EVENT_FL_UPROBE_BIT,
 TRACE_EVENT_FL_EPROBE_BIT,
};
# 331 "./include/linux/trace_events.h"
enum {
 TRACE_EVENT_FL_FILTERED = (1 << TRACE_EVENT_FL_FILTERED_BIT),
 TRACE_EVENT_FL_CAP_ANY = (1 << TRACE_EVENT_FL_CAP_ANY_BIT),
 TRACE_EVENT_FL_NO_SET_FILTER = (1 << TRACE_EVENT_FL_NO_SET_FILTER_BIT),
 TRACE_EVENT_FL_IGNORE_ENABLE = (1 << TRACE_EVENT_FL_IGNORE_ENABLE_BIT),
 TRACE_EVENT_FL_TRACEPOINT = (1 << TRACE_EVENT_FL_TRACEPOINT_BIT),
 TRACE_EVENT_FL_DYNAMIC = (1 << TRACE_EVENT_FL_DYNAMIC_BIT),
 TRACE_EVENT_FL_KPROBE = (1 << TRACE_EVENT_FL_KPROBE_BIT),
 TRACE_EVENT_FL_UPROBE = (1 << TRACE_EVENT_FL_UPROBE_BIT),
 TRACE_EVENT_FL_EPROBE = (1 << TRACE_EVENT_FL_EPROBE_BIT),
};



struct trace_event_call {
 struct list_head list;
 struct trace_event_class *class;
 union {
  char *name;

  struct tracepoint *tp;
 };
 struct trace_event event;
 char *print_fmt;
 struct event_filter *filter;




 union {
  void *module;
  atomic_t refcnt;
 };
 void *data;


 int flags;


 int perf_refcount;
 struct hlist_head *perf_events;
 struct bpf_prog_array *prog_array;

 int (*perf_perm)(struct trace_event_call *,
        struct perf_event *);

};


bool trace_event_dyn_try_get_ref(struct trace_event_call *call);
void trace_event_dyn_put_ref(struct trace_event_call *call);
bool trace_event_dyn_busy(struct trace_event_call *call);
# 399 "./include/linux/trace_events.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_event_try_get_ref(struct trace_event_call *call)
{
 if (call->flags & TRACE_EVENT_FL_DYNAMIC)
  return trace_event_dyn_try_get_ref(call);
 else
  return try_module_get(call->module);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_event_put_ref(struct trace_event_call *call)
{
 if (call->flags & TRACE_EVENT_FL_DYNAMIC)
  trace_event_dyn_put_ref(call);
 else
  module_put(call->module);
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_prog_array_valid(struct trace_event_call *call)
{
# 435 "./include/linux/trace_events.h"
 return !!({ do { extern void __compiletime_assert_283(void) ; if (!((sizeof(call->prog_array) == sizeof(char) || sizeof(call->prog_array) == sizeof(short) || sizeof(call->prog_array) == sizeof(int) || sizeof(call->prog_array) == sizeof(long)) || sizeof(call->prog_array) == sizeof(long long))) __compiletime_assert_283(); } while (0); (*(const volatile typeof( _Generic((call->prog_array), char: (char)0, unsigned char: (unsigned char)0, signed char: (signed char)0, unsigned short: (unsigned short)0, signed short: (signed short)0, unsigned int: (unsigned int)0, signed int: (signed int)0, unsigned long: (unsigned long)0, signed long: (signed long)0, unsigned long long: (unsigned long long)0, signed long long: (signed long long)0, default: (call->prog_array))) *)&(call->prog_array)); });
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *
trace_event_name(struct trace_event_call *call)
{
 if (call->flags & TRACE_EVENT_FL_TRACEPOINT)
  return call->tp ? call->tp->name : ((void *)0);
 else
  return call->name;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct list_head *
trace_get_fields(struct trace_event_call *event_call)
{
 if (!event_call->class->get_fields)
  return &event_call->class->fields;
 return event_call->class->get_fields(event_call);
}

struct trace_subsystem_dir;

enum {
 EVENT_FILE_FL_ENABLED_BIT,
 EVENT_FILE_FL_RECORDED_CMD_BIT,
 EVENT_FILE_FL_RECORDED_TGID_BIT,
 EVENT_FILE_FL_FILTERED_BIT,
 EVENT_FILE_FL_NO_SET_FILTER_BIT,
 EVENT_FILE_FL_SOFT_MODE_BIT,
 EVENT_FILE_FL_SOFT_DISABLED_BIT,
 EVENT_FILE_FL_TRIGGER_MODE_BIT,
 EVENT_FILE_FL_TRIGGER_COND_BIT,
 EVENT_FILE_FL_PID_FILTER_BIT,
 EVENT_FILE_FL_WAS_ENABLED_BIT,
};

extern struct trace_event_file *trace_get_event_file(const char *instance,
           const char *system,
           const char *event);
extern void trace_put_event_file(struct trace_event_file *file);



enum dynevent_type {
 DYNEVENT_TYPE_SYNTH = 1,
 DYNEVENT_TYPE_KPROBE,
 DYNEVENT_TYPE_NONE,
};

struct dynevent_cmd;

typedef int (*dynevent_create_fn_t)(struct dynevent_cmd *cmd);

struct dynevent_cmd {
 struct seq_buf seq;
 const char *event_name;
 unsigned int n_fields;
 enum dynevent_type type;
 dynevent_create_fn_t run_command;
 void *private_data;
};

extern int dynevent_create(struct dynevent_cmd *cmd);

extern int synth_event_delete(const char *name);

extern void synth_event_cmd_init(struct dynevent_cmd *cmd,
     char *buf, int maxlen);

extern int __synth_event_gen_cmd_start(struct dynevent_cmd *cmd,
           const char *name,
           struct module *mod, ...);




struct synth_field_desc {
 const char *type;
 const char *name;
};

extern int synth_event_gen_cmd_array_start(struct dynevent_cmd *cmd,
        const char *name,
        struct module *mod,
        struct synth_field_desc *fields,
        unsigned int n_fields);
extern int synth_event_create(const char *name,
         struct synth_field_desc *fields,
         unsigned int n_fields, struct module *mod);

extern int synth_event_add_field(struct dynevent_cmd *cmd,
     const char *type,
     const char *name);
extern int synth_event_add_field_str(struct dynevent_cmd *cmd,
         const char *type_name);
extern int synth_event_add_fields(struct dynevent_cmd *cmd,
      struct synth_field_desc *fields,
      unsigned int n_fields);




struct synth_event;

struct synth_event_trace_state {
 struct trace_event_buffer fbuffer;
 struct synth_trace_event *entry;
 struct trace_buffer *buffer;
 struct synth_event *event;
 unsigned int cur_field;
 unsigned int n_u64;
 bool disabled;
 bool add_next;
 bool add_name;
};

extern int synth_event_trace(struct trace_event_file *file,
        unsigned int n_vals, ...);
extern int synth_event_trace_array(struct trace_event_file *file, u64 *vals,
       unsigned int n_vals);
extern int synth_event_trace_start(struct trace_event_file *file,
       struct synth_event_trace_state *trace_state);
extern int synth_event_add_next_val(u64 val,
        struct synth_event_trace_state *trace_state);
extern int synth_event_add_val(const char *field_name, u64 val,
          struct synth_event_trace_state *trace_state);
extern int synth_event_trace_end(struct synth_event_trace_state *trace_state);

extern int kprobe_event_delete(const char *name);

extern void kprobe_event_cmd_init(struct dynevent_cmd *cmd,
      char *buf, int maxlen);







extern int __kprobe_event_gen_cmd_start(struct dynevent_cmd *cmd,
     bool kretprobe,
     const char *name,
     const char *loc, ...);







extern int __kprobe_event_add_fields(struct dynevent_cmd *cmd, ...);
# 609 "./include/linux/trace_events.h"
enum {
 EVENT_FILE_FL_ENABLED = (1 << EVENT_FILE_FL_ENABLED_BIT),
 EVENT_FILE_FL_RECORDED_CMD = (1 << EVENT_FILE_FL_RECORDED_CMD_BIT),
 EVENT_FILE_FL_RECORDED_TGID = (1 << EVENT_FILE_FL_RECORDED_TGID_BIT),
 EVENT_FILE_FL_FILTERED = (1 << EVENT_FILE_FL_FILTERED_BIT),
 EVENT_FILE_FL_NO_SET_FILTER = (1 << EVENT_FILE_FL_NO_SET_FILTER_BIT),
 EVENT_FILE_FL_SOFT_MODE = (1 << EVENT_FILE_FL_SOFT_MODE_BIT),
 EVENT_FILE_FL_SOFT_DISABLED = (1 << EVENT_FILE_FL_SOFT_DISABLED_BIT),
 EVENT_FILE_FL_TRIGGER_MODE = (1 << EVENT_FILE_FL_TRIGGER_MODE_BIT),
 EVENT_FILE_FL_TRIGGER_COND = (1 << EVENT_FILE_FL_TRIGGER_COND_BIT),
 EVENT_FILE_FL_PID_FILTER = (1 << EVENT_FILE_FL_PID_FILTER_BIT),
 EVENT_FILE_FL_WAS_ENABLED = (1 << EVENT_FILE_FL_WAS_ENABLED_BIT),
};

struct trace_event_file {
 struct list_head list;
 struct trace_event_call *event_call;
 struct event_filter *filter;
 struct dentry *dir;
 struct trace_array *tr;
 struct trace_subsystem_dir *system;
 struct list_head triggers;
# 648 "./include/linux/trace_events.h"
 unsigned long flags;
 atomic_t sm_ref;
 atomic_t tm_ref;
};
# 678 "./include/linux/trace_events.h"
enum event_trigger_type {
 ETT_NONE = (0),
 ETT_TRACE_ONOFF = (1 << 0),
 ETT_SNAPSHOT = (1 << 1),
 ETT_STACKTRACE = (1 << 2),
 ETT_EVENT_ENABLE = (1 << 3),
 ETT_EVENT_HIST = (1 << 4),
 ETT_HIST_ENABLE = (1 << 5),
 ETT_EVENT_EPROBE = (1 << 6),
};

extern int filter_match_preds(struct event_filter *filter, void *rec);

extern enum event_trigger_type
event_triggers_call(struct trace_event_file *file,
      struct trace_buffer *buffer, void *rec,
      struct ring_buffer_event *event);
extern void
event_triggers_post_call(struct trace_event_file *file,
    enum event_trigger_type tt);

bool trace_event_ignore_this_pid(struct trace_event_file *trace_file);
# 710 "./include/linux/trace_events.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
trace_trigger_soft_disabled(struct trace_event_file *file)
{
 unsigned long eflags = file->flags;

 if (!(eflags & EVENT_FILE_FL_TRIGGER_COND)) {
  if (eflags & EVENT_FILE_FL_TRIGGER_MODE)
   event_triggers_call(file, ((void *)0), ((void *)0), ((void *)0));
  if (eflags & EVENT_FILE_FL_SOFT_DISABLED)
   return true;
  if (eflags & EVENT_FILE_FL_PID_FILTER)
   return trace_event_ignore_this_pid(file);
 }
 return false;
}


unsigned int trace_call_bpf(struct trace_event_call *call, void *ctx);
int perf_event_attach_bpf_prog(struct perf_event *event, struct bpf_prog *prog, u64 bpf_cookie);
void perf_event_detach_bpf_prog(struct perf_event *event);
int perf_event_query_prog_array(struct perf_event *event, void *info);
int bpf_probe_register(struct bpf_raw_event_map *btp, struct bpf_prog *prog);
int bpf_probe_unregister(struct bpf_raw_event_map *btp, struct bpf_prog *prog);
struct bpf_raw_event_map *bpf_get_raw_tracepoint(const char *name);
void bpf_put_raw_tracepoint(struct bpf_raw_event_map *btp);
int bpf_get_perf_event_info(const struct perf_event *event, u32 *prog_id,
       u32 *fd_type, const char **buf,
       u64 *probe_offset, u64 *probe_addr);
# 781 "./include/linux/trace_events.h"
enum {
 FILTER_OTHER = 0,
 FILTER_STATIC_STRING,
 FILTER_DYN_STRING,
 FILTER_PTR_STRING,
 FILTER_TRACE_FN,
 FILTER_COMM,
 FILTER_CPU,
};

extern int trace_event_raw_init(struct trace_event_call *call);
extern int trace_define_field(struct trace_event_call *call, const char *type,
         const char *name, int offset, int size,
         int is_signed, int filter_type);
extern int trace_add_event_call(struct trace_event_call *call);
extern int trace_remove_event_call(struct trace_event_call *call);
extern int trace_event_get_offsets(struct trace_event_call *call);



int ftrace_set_clr_event(struct trace_array *tr, char *buf, int set);
int trace_set_clr_event(const char *system, const char *event, int set);
int trace_array_set_clr_event(struct trace_array *tr, const char *system,
  const char *event, bool enable);
# 825 "./include/linux/trace_events.h"
struct perf_event;

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs) perf_trace_regs;
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) bpf_kprobe_override;

extern int perf_trace_init(struct perf_event *event);
extern void perf_trace_destroy(struct perf_event *event);
extern int perf_trace_add(struct perf_event *event, int flags);
extern void perf_trace_del(struct perf_event *event, int flags);

extern int perf_kprobe_init(struct perf_event *event, bool is_retprobe);
extern void perf_kprobe_destroy(struct perf_event *event);
extern int bpf_get_kprobe_info(const struct perf_event *event,
          u32 *fd_type, const char **symbol,
          u64 *probe_offset, u64 *probe_addr,
          bool perf_type_tracepoint);


extern int perf_uprobe_init(struct perf_event *event,
        unsigned long ref_ctr_offset, bool is_retprobe);
extern void perf_uprobe_destroy(struct perf_event *event);
extern int bpf_get_uprobe_info(const struct perf_event *event,
          u32 *fd_type, const char **filename,
          u64 *probe_offset, bool perf_type_tracepoint);

extern int ftrace_profile_set_filter(struct perf_event *event, int event_id,
         char *filter_str);
extern void ftrace_profile_free_filter(struct perf_event *event);
void perf_trace_buf_update(void *record, u16 type);
void *perf_trace_buf_alloc(int size, struct pt_regs **regs, int *rctxp);

int perf_event_set_bpf_prog(struct perf_event *event, struct bpf_prog *prog, u64 bpf_cookie);
void perf_event_free_bpf_prog(struct perf_event *event);

void bpf_trace_run1(struct bpf_prog *prog, u64 arg1);
void bpf_trace_run2(struct bpf_prog *prog, u64 arg1, u64 arg2);
void bpf_trace_run3(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3);
void bpf_trace_run4(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4);
void bpf_trace_run5(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5);
void bpf_trace_run6(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6);
void bpf_trace_run7(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7);
void bpf_trace_run8(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
      u64 arg8);
void bpf_trace_run9(struct bpf_prog *prog, u64 arg1, u64 arg2,
      u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
      u64 arg8, u64 arg9);
void bpf_trace_run10(struct bpf_prog *prog, u64 arg1, u64 arg2,
       u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
       u64 arg8, u64 arg9, u64 arg10);
void bpf_trace_run11(struct bpf_prog *prog, u64 arg1, u64 arg2,
       u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
       u64 arg8, u64 arg9, u64 arg10, u64 arg11);
void bpf_trace_run12(struct bpf_prog *prog, u64 arg1, u64 arg2,
       u64 arg3, u64 arg4, u64 arg5, u64 arg6, u64 arg7,
       u64 arg8, u64 arg9, u64 arg10, u64 arg11, u64 arg12);
void perf_trace_run_bpf_submit(void *raw_data, int size, int rctx,
          struct trace_event_call *call, u64 count,
          struct pt_regs *regs, struct hlist_head *head,
          struct task_struct *task);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
perf_trace_buf_submit(void *raw_data, int size, int rctx, u16 type,
         u64 count, struct pt_regs *regs, void *head,
         struct task_struct *task)
{
 perf_tp_event(type, count, raw_data, size, regs, head, rctx, task);
}
# 8 "./include/trace/syscall.h" 2
# 25 "./include/trace/syscall.h"
struct syscall_metadata {
 const char *name;
 int syscall_nr;
 int nb_args;
 const char **types;
 const char **args;
 struct list_head enter_fields;

 struct trace_event_call *enter_event;
 struct trace_event_call *exit_event;
};


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void syscall_tracepoint_update(struct task_struct *p)
{
 if (test_ti_thread_flag(((struct thread_info *)get_current()), 15))
  set_ti_thread_flag(task_thread_info(p), 15);
 else
  clear_ti_thread_flag(task_thread_info(p), 15);
}
# 88 "./include/linux/syscalls.h" 2
# 132 "./include/linux/syscalls.h"
extern struct trace_event_class event_class_syscall_enter;
extern struct trace_event_class event_class_syscall_exit;
extern struct trace_event_functions enter_syscall_print_funcs;
extern struct trace_event_functions exit_syscall_print_funcs;
# 193 "./include/linux/syscalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_syscall_trace_event(struct trace_event_call *tp_event)
{
 return tp_event->class == &event_class_syscall_enter ||
        tp_event->class == &event_class_syscall_exit;
}
# 285 "./include/linux/syscalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void addr_limit_user_check(void)
{





 if (check_data_corruption(({ bool corruption = __builtin_expect(!!((false)), 0); if (corruption) { if (0) { ({ do {} while (0); _printk("\001" "3" "Invalid address limit on user-mode return"); }); do { __asm__ __volatile__( "1:	" "twi 31, 0, 0" "\n" ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/syscalls.h"), "i" (293), "i" (0), "i" (sizeof(struct bug_entry))); do { ; __builtin_unreachable(); } while (0); } while (0); } else ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { } while(0); __warn_printk("Invalid address limit on user-mode return"); do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("include/linux/syscalls.h"), "i" (293), "i" ((1 << 0) | ((1 << 3) | ((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); do { } while(0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } corruption; })))

  force_sig(9);




}
# 315 "./include/linux/syscalls.h"
           long sys_io_setup(unsigned nr_reqs, aio_context_t *ctx);
           long sys_io_destroy(aio_context_t ctx);
           long sys_io_submit(aio_context_t, long,
   struct iocb * *);
           long sys_io_cancel(aio_context_t ctx_id, struct iocb *iocb,
         struct io_event *result);
           long sys_io_getevents(aio_context_t ctx_id,
    long min_nr,
    long nr,
    struct io_event *events,
    struct __kernel_timespec *timeout);
           long sys_io_getevents_time32(__u32 ctx_id,
    __s32 min_nr,
    __s32 nr,
    struct io_event *events,
    struct old_timespec32 *timeout);
           long sys_io_pgetevents(aio_context_t ctx_id,
    long min_nr,
    long nr,
    struct io_event *events,
    struct __kernel_timespec *timeout,
    const struct __aio_sigset *sig);
           long sys_io_pgetevents_time32(aio_context_t ctx_id,
    long min_nr,
    long nr,
    struct io_event *events,
    struct old_timespec32 *timeout,
    const struct __aio_sigset *sig);
           long sys_io_uring_setup(u32 entries,
    struct io_uring_params *p);
           long sys_io_uring_enter(unsigned int fd, u32 to_submit,
    u32 min_complete, u32 flags,
    const void *argp, size_t argsz);
           long sys_io_uring_register(unsigned int fd, unsigned int op,
    void *arg, unsigned int nr_args);


           long sys_setxattr(const char *path, const char *name,
        const void *value, size_t size, int flags);
           long sys_lsetxattr(const char *path, const char *name,
         const void *value, size_t size, int flags);
           long sys_fsetxattr(int fd, const char *name,
         const void *value, size_t size, int flags);
           long sys_getxattr(const char *path, const char *name,
        void *value, size_t size);
           long sys_lgetxattr(const char *path, const char *name,
         void *value, size_t size);
           long sys_fgetxattr(int fd, const char *name,
         void *value, size_t size);
           long sys_listxattr(const char *path, char *list,
         size_t size);
           long sys_llistxattr(const char *path, char *list,
          size_t size);
           long sys_flistxattr(int fd, char *list, size_t size);
           long sys_removexattr(const char *path,
    const char *name);
           long sys_lremovexattr(const char *path,
     const char *name);
           long sys_fremovexattr(int fd, const char *name);


           long sys_getcwd(char *buf, unsigned long size);


           long sys_lookup_dcookie(u64 cookie64, char *buf, size_t len);


           long sys_eventfd2(unsigned int count, int flags);


           long sys_epoll_create1(int flags);
           long sys_epoll_ctl(int epfd, int op, int fd,
    struct epoll_event *event);
           long sys_epoll_pwait(int epfd, struct epoll_event *events,
    int maxevents, int timeout,
    const sigset_t *sigmask,
    size_t sigsetsize);
           long sys_epoll_pwait2(int epfd, struct epoll_event *events,
     int maxevents,
     const struct __kernel_timespec *timeout,
     const sigset_t *sigmask,
     size_t sigsetsize);


           long sys_dup(unsigned int fildes);
           long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);
           long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);






           long sys_inotify_init1(int flags);
           long sys_inotify_add_watch(int fd, const char *path,
     u32 mask);
           long sys_inotify_rm_watch(int fd, __s32 wd);


           long sys_ioctl(unsigned int fd, unsigned int cmd,
    unsigned long arg);


           long sys_ioprio_set(int which, int who, int ioprio);
           long sys_ioprio_get(int which, int who);


           long sys_flock(unsigned int fd, unsigned int cmd);


           long sys_mknodat(int dfd, const char * filename, umode_t mode,
       unsigned dev);
           long sys_mkdirat(int dfd, const char * pathname, umode_t mode);
           long sys_unlinkat(int dfd, const char * pathname, int flag);
           long sys_symlinkat(const char * oldname,
         int newdfd, const char * newname);
           long sys_linkat(int olddfd, const char *oldname,
      int newdfd, const char *newname, int flags);
           long sys_renameat(int olddfd, const char * oldname,
        int newdfd, const char * newname);


           long sys_umount(char *name, int flags);
           long sys_mount(char *dev_name, char *dir_name,
    char *type, unsigned long flags,
    void *data);
           long sys_pivot_root(const char *new_root,
    const char *put_old);




           long sys_statfs(const char * path,
    struct statfs *buf);
           long sys_statfs64(const char *path, size_t sz,
    struct statfs64 *buf);
           long sys_fstatfs(unsigned int fd, struct statfs *buf);
           long sys_fstatfs64(unsigned int fd, size_t sz,
    struct statfs64 *buf);
           long sys_truncate(const char *path, long length);
           long sys_ftruncate(unsigned int fd, unsigned long length);




           long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);
           long sys_faccessat(int dfd, const char *filename, int mode);
           long sys_faccessat2(int dfd, const char *filename, int mode,
          int flags);
           long sys_chdir(const char *filename);
           long sys_fchdir(unsigned int fd);
           long sys_chroot(const char *filename);
           long sys_fchmod(unsigned int fd, umode_t mode);
           long sys_fchmodat(int dfd, const char * filename,
        umode_t mode);
           long sys_fchownat(int dfd, const char *filename, uid_t user,
        gid_t group, int flag);
           long sys_fchown(unsigned int fd, uid_t user, gid_t group);
           long sys_openat(int dfd, const char *filename, int flags,
      umode_t mode);
           long sys_openat2(int dfd, const char *filename,
       struct open_how *how, size_t size);
           long sys_close(unsigned int fd);
           long sys_close_range(unsigned int fd, unsigned int max_fd,
    unsigned int flags);
           long sys_vhangup(void);


           long sys_pipe2(int *fildes, int flags);


           long sys_quotactl(unsigned int cmd, const char *special,
    qid_t id, void *addr);
           long sys_quotactl_fd(unsigned int fd, unsigned int cmd, qid_t id,
    void *addr);


           long sys_getdents64(unsigned int fd,
    struct linux_dirent64 *dirent,
    unsigned int count);


           long sys_llseek(unsigned int fd, unsigned long offset_high,
   unsigned long offset_low, loff_t *result,
   unsigned int whence);
           long sys_lseek(unsigned int fd, off_t offset,
     unsigned int whence);
           long sys_read(unsigned int fd, char *buf, size_t count);
           long sys_write(unsigned int fd, const char *buf,
     size_t count);
           long sys_readv(unsigned long fd,
     const struct iovec *vec,
     unsigned long vlen);
           long sys_writev(unsigned long fd,
      const struct iovec *vec,
      unsigned long vlen);
           long sys_pread64(unsigned int fd, char *buf,
       size_t count, loff_t pos);
           long sys_pwrite64(unsigned int fd, const char *buf,
        size_t count, loff_t pos);
           long sys_preadv(unsigned long fd, const struct iovec *vec,
      unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
           long sys_pwritev(unsigned long fd, const struct iovec *vec,
       unsigned long vlen, unsigned long pos_l, unsigned long pos_h);


           long sys_sendfile64(int out_fd, int in_fd,
          loff_t *offset, size_t count);


           long sys_pselect6(int, fd_set *, fd_set *,
        fd_set *, struct __kernel_timespec *,
        void *);
           long sys_pselect6_time32(int, fd_set *, fd_set *,
        fd_set *, struct old_timespec32 *,
        void *);
           long sys_ppoll(struct pollfd *, unsigned int,
     struct __kernel_timespec *, const sigset_t *,
     size_t);
           long sys_ppoll_time32(struct pollfd *, unsigned int,
     struct old_timespec32 *, const sigset_t *,
     size_t);


           long sys_signalfd4(int ufd, sigset_t *user_mask, size_t sizemask, int flags);


           long sys_vmsplice(int fd, const struct iovec *iov,
        unsigned long nr_segs, unsigned int flags);
           long sys_splice(int fd_in, loff_t *off_in,
      int fd_out, loff_t *off_out,
      size_t len, unsigned int flags);
           long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);


           long sys_readlinkat(int dfd, const char *path, char *buf,
          int bufsiz);
           long sys_newfstatat(int dfd, const char *filename,
          struct stat *statbuf, int flag);
           long sys_newfstat(unsigned int fd, struct stat *statbuf);

           long sys_fstat64(unsigned long fd, struct stat64 *statbuf);
           long sys_fstatat64(int dfd, const char *filename,
          struct stat64 *statbuf, int flag);



           long sys_sync(void);
           long sys_fsync(unsigned int fd);
           long sys_fdatasync(unsigned int fd);
           long sys_sync_file_range2(int fd, unsigned int flags,
         loff_t offset, loff_t nbytes);
           long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes,
     unsigned int flags);


           long sys_timerfd_create(int clockid, int flags);
           long sys_timerfd_settime(int ufd, int flags,
        const struct __kernel_itimerspec *utmr,
        struct __kernel_itimerspec *otmr);
           long sys_timerfd_gettime(int ufd, struct __kernel_itimerspec *otmr);
           long sys_timerfd_gettime32(int ufd,
       struct old_itimerspec32 *otmr);
           long sys_timerfd_settime32(int ufd, int flags,
       const struct old_itimerspec32 *utmr,
       struct old_itimerspec32 *otmr);


           long sys_utimensat(int dfd, const char *filename,
    struct __kernel_timespec *utimes,
    int flags);
           long sys_utimensat_time32(unsigned int dfd,
    const char *filename,
    struct old_timespec32 *t, int flags);


           long sys_acct(const char *name);


           long sys_capget(cap_user_header_t header,
    cap_user_data_t dataptr);
           long sys_capset(cap_user_header_t header,
    const cap_user_data_t data);


           long sys_personality(unsigned int personality);


           long sys_exit(int error_code);
           long sys_exit_group(int error_code);
           long sys_waitid(int which, pid_t pid,
      struct siginfo *infop,
      int options, struct rusage *ru);


           long sys_set_tid_address(int *tidptr);
           long sys_unshare(unsigned long unshare_flags);


           long sys_futex(u32 *uaddr, int op, u32 val,
     const struct __kernel_timespec *utime,
     u32 *uaddr2, u32 val3);
           long sys_futex_time32(u32 *uaddr, int op, u32 val,
     const struct old_timespec32 *utime,
     u32 *uaddr2, u32 val3);
           long sys_get_robust_list(int pid,
        struct robust_list_head * *head_ptr,
        size_t *len_ptr);
           long sys_set_robust_list(struct robust_list_head *head,
        size_t len);


           long sys_nanosleep(struct __kernel_timespec *rqtp,
         struct __kernel_timespec *rmtp);
           long sys_nanosleep_time32(struct old_timespec32 *rqtp,
         struct old_timespec32 *rmtp);


           long sys_getitimer(int which, struct __kernel_old_itimerval *value);
           long sys_setitimer(int which,
    struct __kernel_old_itimerval *value,
    struct __kernel_old_itimerval *ovalue);


           long sys_kexec_load(unsigned long entry, unsigned long nr_segments,
    struct kexec_segment *segments,
    unsigned long flags);


           long sys_init_module(void *umod, unsigned long len,
    const char *uargs);
           long sys_delete_module(const char *name_user,
    unsigned int flags);


           long sys_timer_create(clockid_t which_clock,
     struct sigevent *timer_event_spec,
     timer_t * created_timer_id);
           long sys_timer_gettime(timer_t timer_id,
    struct __kernel_itimerspec *setting);
           long sys_timer_getoverrun(timer_t timer_id);
           long sys_timer_settime(timer_t timer_id, int flags,
    const struct __kernel_itimerspec *new_setting,
    struct __kernel_itimerspec *old_setting);
           long sys_timer_delete(timer_t timer_id);
           long sys_clock_settime(clockid_t which_clock,
    const struct __kernel_timespec *tp);
           long sys_clock_gettime(clockid_t which_clock,
    struct __kernel_timespec *tp);
           long sys_clock_getres(clockid_t which_clock,
    struct __kernel_timespec *tp);
           long sys_clock_nanosleep(clockid_t which_clock, int flags,
    const struct __kernel_timespec *rqtp,
    struct __kernel_timespec *rmtp);
           long sys_timer_gettime32(timer_t timer_id,
     struct old_itimerspec32 *setting);
           long sys_timer_settime32(timer_t timer_id, int flags,
      struct old_itimerspec32 *new,
      struct old_itimerspec32 *old);
           long sys_clock_settime32(clockid_t which_clock,
    struct old_timespec32 *tp);
           long sys_clock_gettime32(clockid_t which_clock,
    struct old_timespec32 *tp);
           long sys_clock_getres_time32(clockid_t which_clock,
    struct old_timespec32 *tp);
           long sys_clock_nanosleep_time32(clockid_t which_clock, int flags,
    struct old_timespec32 *rqtp,
    struct old_timespec32 *rmtp);


           long sys_syslog(int type, char *buf, int len);


           long sys_ptrace(long request, long pid, unsigned long addr,
      unsigned long data);


           long sys_sched_setparam(pid_t pid,
     struct sched_param *param);
           long sys_sched_setscheduler(pid_t pid, int policy,
     struct sched_param *param);
           long sys_sched_getscheduler(pid_t pid);
           long sys_sched_getparam(pid_t pid,
     struct sched_param *param);
           long sys_sched_setaffinity(pid_t pid, unsigned int len,
     unsigned long *user_mask_ptr);
           long sys_sched_getaffinity(pid_t pid, unsigned int len,
     unsigned long *user_mask_ptr);
           long sys_sched_yield(void);
           long sys_sched_get_priority_max(int policy);
           long sys_sched_get_priority_min(int policy);
           long sys_sched_rr_get_interval(pid_t pid,
    struct __kernel_timespec *interval);
           long sys_sched_rr_get_interval_time32(pid_t pid,
       struct old_timespec32 *interval);


           long sys_restart_syscall(void);
           long sys_kill(pid_t pid, int sig);
           long sys_tkill(pid_t pid, int sig);
           long sys_tgkill(pid_t tgid, pid_t pid, int sig);
           long sys_sigaltstack(const struct sigaltstack *uss,
    struct sigaltstack *uoss);
           long sys_rt_sigsuspend(sigset_t *unewset, size_t sigsetsize);

           long sys_rt_sigaction(int,
     const struct sigaction *,
     struct sigaction *,
     size_t);

           long sys_rt_sigprocmask(int how, sigset_t *set,
    sigset_t *oset, size_t sigsetsize);
           long sys_rt_sigpending(sigset_t *set, size_t sigsetsize);
           long sys_rt_sigtimedwait(const sigset_t *uthese,
    siginfo_t *uinfo,
    const struct __kernel_timespec *uts,
    size_t sigsetsize);
           long sys_rt_sigtimedwait_time32(const sigset_t *uthese,
    siginfo_t *uinfo,
    const struct old_timespec32 *uts,
    size_t sigsetsize);
           long sys_rt_sigqueueinfo(pid_t pid, int sig, siginfo_t *uinfo);


           long sys_setpriority(int which, int who, int niceval);
           long sys_getpriority(int which, int who);
           long sys_reboot(int magic1, int magic2, unsigned int cmd,
    void *arg);
           long sys_setregid(gid_t rgid, gid_t egid);
           long sys_setgid(gid_t gid);
           long sys_setreuid(uid_t ruid, uid_t euid);
           long sys_setuid(uid_t uid);
           long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);
           long sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
           long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);
           long sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
           long sys_setfsuid(uid_t uid);
           long sys_setfsgid(gid_t gid);
           long sys_times(struct tms *tbuf);
           long sys_setpgid(pid_t pid, pid_t pgid);
           long sys_getpgid(pid_t pid);
           long sys_getsid(pid_t pid);
           long sys_setsid(void);
           long sys_getgroups(int gidsetsize, gid_t *grouplist);
           long sys_setgroups(int gidsetsize, gid_t *grouplist);
           long sys_newuname(struct new_utsname *name);
           long sys_sethostname(char *name, int len);
           long sys_setdomainname(char *name, int len);
           long sys_getrlimit(unsigned int resource,
    struct rlimit *rlim);
           long sys_setrlimit(unsigned int resource,
    struct rlimit *rlim);
           long sys_getrusage(int who, struct rusage *ru);
           long sys_umask(int mask);
           long sys_prctl(int option, unsigned long arg2, unsigned long arg3,
   unsigned long arg4, unsigned long arg5);
           long sys_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *cache);


           long sys_gettimeofday(struct __kernel_old_timeval *tv,
    struct timezone *tz);
           long sys_settimeofday(struct __kernel_old_timeval *tv,
    struct timezone *tz);
           long sys_adjtimex(struct __kernel_timex *txc_p);
           long sys_adjtimex_time32(struct old_timex32 *txc_p);


           long sys_getpid(void);
           long sys_getppid(void);
           long sys_getuid(void);
           long sys_geteuid(void);
           long sys_getgid(void);
           long sys_getegid(void);
           long sys_gettid(void);
           long sys_sysinfo(struct sysinfo *info);


           long sys_mq_open(const char *name, int oflag, umode_t mode, struct mq_attr *attr);
           long sys_mq_unlink(const char *name);
           long sys_mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct __kernel_timespec *abs_timeout);
           long sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio, const struct __kernel_timespec *abs_timeout);
           long sys_mq_notify(mqd_t mqdes, const struct sigevent *notification);
           long sys_mq_getsetattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat);
           long sys_mq_timedreceive_time32(mqd_t mqdes,
   char *u_msg_ptr,
   unsigned int msg_len, unsigned int *u_msg_prio,
   const struct old_timespec32 *u_abs_timeout);
           long sys_mq_timedsend_time32(mqd_t mqdes,
   const char *u_msg_ptr,
   unsigned int msg_len, unsigned int msg_prio,
   const struct old_timespec32 *u_abs_timeout);


           long sys_msgget(key_t key, int msgflg);
           long sys_old_msgctl(int msqid, int cmd, struct msqid_ds *buf);
           long sys_msgctl(int msqid, int cmd, struct msqid_ds *buf);
           long sys_msgrcv(int msqid, struct msgbuf *msgp,
    size_t msgsz, long msgtyp, int msgflg);
           long sys_msgsnd(int msqid, struct msgbuf *msgp,
    size_t msgsz, int msgflg);


           long sys_semget(key_t key, int nsems, int semflg);
           long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);
           long sys_old_semctl(int semid, int semnum, int cmd, unsigned long arg);
           long sys_semtimedop(int semid, struct sembuf *sops,
    unsigned nsops,
    const struct __kernel_timespec *timeout);
           long sys_semtimedop_time32(int semid, struct sembuf *sops,
    unsigned nsops,
    const struct old_timespec32 *timeout);
           long sys_semop(int semid, struct sembuf *sops,
    unsigned nsops);


           long sys_shmget(key_t key, size_t size, int flag);
           long sys_old_shmctl(int shmid, int cmd, struct shmid_ds *buf);
           long sys_shmctl(int shmid, int cmd, struct shmid_ds *buf);
           long sys_shmat(int shmid, char *shmaddr, int shmflg);
           long sys_shmdt(char *shmaddr);


           long sys_socket(int, int, int);
           long sys_socketpair(int, int, int, int *);
           long sys_bind(int, struct sockaddr *, int);
           long sys_listen(int, int);
           long sys_accept(int, struct sockaddr *, int *);
           long sys_connect(int, struct sockaddr *, int);
           long sys_getsockname(int, struct sockaddr *, int *);
           long sys_getpeername(int, struct sockaddr *, int *);
           long sys_sendto(int, void *, size_t, unsigned,
    struct sockaddr *, int);
           long sys_recvfrom(int, void *, size_t, unsigned,
    struct sockaddr *, int *);
           long sys_setsockopt(int fd, int level, int optname,
    char *optval, int optlen);
           long sys_getsockopt(int fd, int level, int optname,
    char *optval, int *optlen);
           long sys_shutdown(int, int);
           long sys_sendmsg(int fd, struct user_msghdr *msg, unsigned flags);
           long sys_recvmsg(int fd, struct user_msghdr *msg, unsigned flags);


           long sys_readahead(int fd, loff_t offset, size_t count);


           long sys_brk(unsigned long brk);
           long sys_munmap(unsigned long addr, size_t len);
           long sys_mremap(unsigned long addr,
      unsigned long old_len, unsigned long new_len,
      unsigned long flags, unsigned long new_addr);


           long sys_add_key(const char *_type,
       const char *_description,
       const void *_payload,
       size_t plen,
       key_serial_t destringid);
           long sys_request_key(const char *_type,
    const char *_description,
    const char *_callout_info,
    key_serial_t destringid);
           long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3,
      unsigned long arg4, unsigned long arg5);



           long sys_clone(unsigned long, unsigned long, int *, unsigned long,
        int *);
# 894 "./include/linux/syscalls.h"
           long sys_clone3(struct clone_args *uargs, size_t size);

           long sys_execve(const char *filename,
  const char *const *argv,
  const char *const *envp);


           long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);


           long sys_swapon(const char *specialfile, int swap_flags);
           long sys_swapoff(const char *specialfile);
           long sys_mprotect(unsigned long start, size_t len,
    unsigned long prot);
           long sys_msync(unsigned long start, size_t len, int flags);
           long sys_mlock(unsigned long start, size_t len);
           long sys_munlock(unsigned long start, size_t len);
           long sys_mlockall(int flags);
           long sys_munlockall(void);
           long sys_mincore(unsigned long start, size_t len,
    unsigned char * vec);
           long sys_madvise(unsigned long start, size_t len, int behavior);
           long sys_process_madvise(int pidfd, const struct iovec *vec,
   size_t vlen, int behavior, unsigned int flags);
           long sys_process_mrelease(int pidfd, unsigned int flags);
           long sys_remap_file_pages(unsigned long start, unsigned long size,
   unsigned long prot, unsigned long pgoff,
   unsigned long flags);
           long sys_mbind(unsigned long start, unsigned long len,
    unsigned long mode,
    const unsigned long *nmask,
    unsigned long maxnode,
    unsigned flags);
           long sys_get_mempolicy(int *policy,
    unsigned long *nmask,
    unsigned long maxnode,
    unsigned long addr, unsigned long flags);
           long sys_set_mempolicy(int mode, const unsigned long *nmask,
    unsigned long maxnode);
           long sys_migrate_pages(pid_t pid, unsigned long maxnode,
    const unsigned long *from,
    const unsigned long *to);
           long sys_move_pages(pid_t pid, unsigned long nr_pages,
    const void * *pages,
    const int *nodes,
    int *status,
    int flags);

           long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig,
  siginfo_t *uinfo);
           long sys_perf_event_open(
  struct perf_event_attr *attr_uptr,
  pid_t pid, int cpu, int group_fd, unsigned long flags);
           long sys_accept4(int, struct sockaddr *, int *, int);
           long sys_recvmmsg(int fd, struct mmsghdr *msg,
        unsigned int vlen, unsigned flags,
        struct __kernel_timespec *timeout);
           long sys_recvmmsg_time32(int fd, struct mmsghdr *msg,
        unsigned int vlen, unsigned flags,
        struct old_timespec32 *timeout);

           long sys_wait4(pid_t pid, int *stat_addr,
    int options, struct rusage *ru);
           long sys_prlimit64(pid_t pid, unsigned int resource,
    const struct rlimit64 *new_rlim,
    struct rlimit64 *old_rlim);
           long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);
           long sys_fanotify_mark(int fanotify_fd, unsigned int flags,
      u64 mask, int fd,
      const char *pathname);
           long sys_name_to_handle_at(int dfd, const char *name,
          struct file_handle *handle,
          int *mnt_id, int flag);
           long sys_open_by_handle_at(int mountdirfd,
          struct file_handle *handle,
          int flags);
           long sys_clock_adjtime(clockid_t which_clock,
    struct __kernel_timex *tx);
           long sys_clock_adjtime32(clockid_t which_clock,
    struct old_timex32 *tx);
           long sys_syncfs(int fd);
           long sys_setns(int fd, int nstype);
           long sys_pidfd_open(pid_t pid, unsigned int flags);
           long sys_sendmmsg(int fd, struct mmsghdr *msg,
        unsigned int vlen, unsigned flags);
           long sys_process_vm_readv(pid_t pid,
         const struct iovec *lvec,
         unsigned long liovcnt,
         const struct iovec *rvec,
         unsigned long riovcnt,
         unsigned long flags);
           long sys_process_vm_writev(pid_t pid,
          const struct iovec *lvec,
          unsigned long liovcnt,
          const struct iovec *rvec,
          unsigned long riovcnt,
          unsigned long flags);
           long sys_kcmp(pid_t pid1, pid_t pid2, int type,
    unsigned long idx1, unsigned long idx2);
           long sys_finit_module(int fd, const char *uargs, int flags);
           long sys_sched_setattr(pid_t pid,
     struct sched_attr *attr,
     unsigned int flags);
           long sys_sched_getattr(pid_t pid,
     struct sched_attr *attr,
     unsigned int size,
     unsigned int flags);
           long sys_renameat2(int olddfd, const char *oldname,
         int newdfd, const char *newname,
         unsigned int flags);
           long sys_seccomp(unsigned int op, unsigned int flags,
       void *uargs);
           long sys_getrandom(char *buf, size_t count,
         unsigned int flags);
           long sys_memfd_create(const char *uname_ptr, unsigned int flags);
           long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);
           long sys_execveat(int dfd, const char *filename,
   const char *const *argv,
   const char *const *envp, int flags);
           long sys_userfaultfd(int flags);
           long sys_membarrier(int cmd, unsigned int flags, int cpu_id);
           long sys_mlock2(unsigned long start, size_t len, int flags);
           long sys_copy_file_range(int fd_in, loff_t *off_in,
        int fd_out, loff_t *off_out,
        size_t len, unsigned int flags);
           long sys_preadv2(unsigned long fd, const struct iovec *vec,
       unsigned long vlen, unsigned long pos_l, unsigned long pos_h,
       rwf_t flags);
           long sys_pwritev2(unsigned long fd, const struct iovec *vec,
       unsigned long vlen, unsigned long pos_l, unsigned long pos_h,
       rwf_t flags);
           long sys_pkey_mprotect(unsigned long start, size_t len,
      unsigned long prot, int pkey);
           long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
           long sys_pkey_free(int pkey);
           long sys_statx(int dfd, const char *path, unsigned flags,
     unsigned mask, struct statx *buffer);
           long sys_rseq(struct rseq *rseq, uint32_t rseq_len,
    int flags, uint32_t sig);
           long sys_open_tree(int dfd, const char *path, unsigned flags);
           long sys_move_mount(int from_dfd, const char *from_path,
          int to_dfd, const char *to_path,
          unsigned int ms_flags);
           long sys_mount_setattr(int dfd, const char *path,
      unsigned int flags,
      struct mount_attr *uattr, size_t usize);
           long sys_fsopen(const char *fs_name, unsigned int flags);
           long sys_fsconfig(int fs_fd, unsigned int cmd, const char *key,
        const void *value, int aux);
           long sys_fsmount(int fs_fd, unsigned int flags, unsigned int ms_flags);
           long sys_fspick(int dfd, const char *path, unsigned int flags);
           long sys_pidfd_send_signal(int pidfd, int sig,
           siginfo_t *info,
           unsigned int flags);
           long sys_pidfd_getfd(int pidfd, int fd, unsigned int flags);
           long sys_landlock_create_ruleset(const struct landlock_ruleset_attr *attr,
  size_t size, __u32 flags);
           long sys_landlock_add_rule(int ruleset_fd, enum landlock_rule_type rule_type,
  const void *rule_attr, __u32 flags);
           long sys_landlock_restrict_self(int ruleset_fd, __u32 flags);
           long sys_memfd_secret(unsigned int flags);






           long sys_ioperm(unsigned long from, unsigned long num, int on);


           long sys_pciconfig_read(unsigned long bus, unsigned long dfn,
    unsigned long off, unsigned long len,
    void *buf);
           long sys_pciconfig_write(unsigned long bus, unsigned long dfn,
    unsigned long off, unsigned long len,
    void *buf);
           long sys_pciconfig_iobase(long which, unsigned long bus, unsigned long devfn);


           long sys_spu_run(int fd, __u32 *unpc,
     __u32 *ustatus);
           long sys_spu_create(const char *name,
  unsigned int flags, umode_t mode, int fd);
# 1085 "./include/linux/syscalls.h"
           long sys_open(const char *filename,
    int flags, umode_t mode);
           long sys_link(const char *oldname,
    const char *newname);
           long sys_unlink(const char *pathname);
           long sys_mknod(const char *filename, umode_t mode,
    unsigned dev);
           long sys_chmod(const char *filename, umode_t mode);
           long sys_chown(const char *filename,
    uid_t user, gid_t group);
           long sys_mkdir(const char *pathname, umode_t mode);
           long sys_rmdir(const char *pathname);
           long sys_lchown(const char *filename,
    uid_t user, gid_t group);
           long sys_access(const char *filename, int mode);
           long sys_rename(const char *oldname,
    const char *newname);
           long sys_symlink(const char *old, const char *new);

           long sys_stat64(const char *filename,
    struct stat64 *statbuf);
           long sys_lstat64(const char *filename,
    struct stat64 *statbuf);



           long sys_pipe(int *fildes);
           long sys_dup2(unsigned int oldfd, unsigned int newfd);
           long sys_epoll_create(int size);
           long sys_inotify_init(void);
           long sys_eventfd(unsigned int count);
           long sys_signalfd(int ufd, sigset_t *user_mask, size_t sizemask);


           long sys_sendfile(int out_fd, int in_fd,
        off_t *offset, size_t count);
           long sys_newstat(const char *filename,
    struct stat *statbuf);
           long sys_newlstat(const char *filename,
    struct stat *statbuf);
           long sys_fadvise64(int fd, loff_t offset, size_t len, int advice);


           long sys_alarm(unsigned int seconds);
           long sys_getpgrp(void);
           long sys_pause(void);
           long sys_time(__kernel_old_time_t *tloc);
           long sys_time32(old_time32_t *tloc);

           long sys_utime(char *filename,
    struct utimbuf *times);
           long sys_utimes(char *filename,
    struct __kernel_old_timeval *utimes);
           long sys_futimesat(int dfd, const char *filename,
         struct __kernel_old_timeval *utimes);

           long sys_futimesat_time32(unsigned int dfd,
         const char *filename,
         struct old_timeval32 *t);
           long sys_utime32(const char *filename,
     struct old_utimbuf32 *t);
           long sys_utimes_time32(const char *filename,
      struct old_timeval32 *t);
           long sys_creat(const char *pathname, umode_t mode);
           long sys_getdents(unsigned int fd,
    struct linux_dirent *dirent,
    unsigned int count);
           long sys_select(int n, fd_set *inp, fd_set *outp,
   fd_set *exp, struct __kernel_old_timeval *tvp);
           long sys_poll(struct pollfd *ufds, unsigned int nfds,
    int timeout);
           long sys_epoll_wait(int epfd, struct epoll_event *events,
    int maxevents, int timeout);
           long sys_ustat(unsigned dev, struct ustat *ubuf);
           long sys_vfork(void);
           long sys_recv(int, void *, size_t, unsigned);
           long sys_send(int, void *, size_t, unsigned);
           long sys_oldumount(char *name);
           long sys_uselib(const char *library);
           long sys_sysfs(int option,
    unsigned long arg1, unsigned long arg2);
           long sys_fork(void);


           long sys_stime(__kernel_old_time_t *tptr);
           long sys_stime32(old_time32_t *tptr);


           long sys_sigpending(old_sigset_t *uset);
           long sys_sigprocmask(int how, old_sigset_t *set,
    old_sigset_t *oset);

           long sys_sigsuspend(old_sigset_t mask);
# 1188 "./include/linux/syscalls.h"
           long sys_sgetmask(void);
           long sys_ssetmask(int newmask);
           long sys_signal(int sig, __sighandler_t handler);


           long sys_nice(int increment);


           long sys_kexec_file_load(int kernel_fd, int initrd_fd,
        unsigned long cmdline_len,
        const char *cmdline_ptr,
        unsigned long flags);


           long sys_waitpid(pid_t pid, int *stat_addr, int options);
# 1232 "./include/linux/syscalls.h"
           long sys_socketcall(int call, unsigned long *args);


           long sys_stat(const char *filename,
   struct __old_kernel_stat *statbuf);
           long sys_lstat(const char *filename,
   struct __old_kernel_stat *statbuf);
           long sys_fstat(unsigned int fd,
   struct __old_kernel_stat *statbuf);
           long sys_readlink(const char *path,
    char *buf, int bufsiz);


           long sys_old_select(struct sel_arg_struct *arg);


           long sys_old_readdir(unsigned int, struct old_linux_dirent *, unsigned int);


           long sys_gethostname(char *name, int len);
           long sys_uname(struct old_utsname *);
           long sys_olduname(struct oldold_utsname *);

           long sys_old_getrlimit(unsigned int resource, struct rlimit *rlim);



           long sys_ipc(unsigned int call, int first, unsigned long second,
  unsigned long third, void *ptr, long fifth);


           long sys_mmap_pgoff(unsigned long addr, unsigned long len,
   unsigned long prot, unsigned long flags,
   unsigned long fd, unsigned long pgoff);
           long sys_old_mmap(struct mmap_arg_struct *arg);






           long sys_ni_syscall(void);
# 1283 "./include/linux/syscalls.h"
ssize_t ksys_write(unsigned int fd, const char *buf, size_t count);
int ksys_fchown(unsigned int fd, uid_t user, gid_t group);
ssize_t ksys_read(unsigned int fd, char *buf, size_t count);
void ksys_sync(void);
int ksys_unshare(unsigned long unshare_flags);
int ksys_setsid(void);
int ksys_sync_file_range(int fd, loff_t offset, loff_t nbytes,
    unsigned int flags);
ssize_t ksys_pread64(unsigned int fd, char *buf, size_t count,
       loff_t pos);
ssize_t ksys_pwrite64(unsigned int fd, const char *buf,
        size_t count, loff_t pos);
int ksys_fallocate(int fd, int mode, loff_t offset, loff_t len);

int ksys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);







unsigned long ksys_mmap_pgoff(unsigned long addr, unsigned long len,
         unsigned long prot, unsigned long flags,
         unsigned long fd, unsigned long pgoff);
ssize_t ksys_readahead(int fd, loff_t offset, size_t count);
int ksys_ipc(unsigned int call, int first, unsigned long second,
 unsigned long third, void * ptr, long fifth);
int compat_ksys_ipc(u32 call, int first, int second,
 u32 third, u32 ptr, u32 fifth);





extern int do_fchownat(int dfd, const char *filename, uid_t user,
         gid_t group, int flag);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long ksys_chown(const char *filename, uid_t user,
         gid_t group)
{
 return do_fchownat(-100, filename, user, group, 0);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long ksys_lchown(const char *filename, uid_t user,
          gid_t group)
{
 return do_fchownat(-100, filename, user, group,
        0x100);
}

extern long do_sys_ftruncate(unsigned int fd, loff_t length, int small);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long ksys_ftruncate(unsigned int fd, loff_t length)
{
 return do_sys_ftruncate(fd, length, 1);
}

extern long do_sys_truncate(const char *pathname, loff_t length);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long ksys_truncate(const char *pathname, loff_t length)
{
 return do_sys_truncate(pathname, length);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ksys_personality(unsigned int personality)
{
 unsigned int old = get_current()->personality;

 if (personality != 0xffffffff)
  (get_current()->personality = (personality));

 return old;
}


long ksys_semtimedop(int semid, struct sembuf *tsops,
       unsigned int nsops,
       const struct __kernel_timespec *timeout);
long ksys_semget(key_t key, int nsems, int semflg);
long ksys_old_semctl(int semid, int semnum, int cmd, unsigned long arg);
long ksys_msgget(key_t key, int msgflg);
long ksys_old_msgctl(int msqid, int cmd, struct msqid_ds *buf);
long ksys_msgrcv(int msqid, struct msgbuf *msgp, size_t msgsz,
   long msgtyp, int msgflg);
long ksys_msgsnd(int msqid, struct msgbuf *msgp, size_t msgsz,
   int msgflg);
long ksys_shmget(key_t key, size_t size, int shmflg);
long ksys_shmdt(char *shmaddr);
long ksys_old_shmctl(int shmid, int cmd, struct shmid_ds *buf);
long compat_ksys_semtimedop(int semid, struct sembuf *tsems,
       unsigned int nsops,
       const struct old_timespec32 *timeout);
long __do_semtimedop(int semid, struct sembuf *tsems, unsigned int nsops,
       const struct timespec64 *timeout,
       struct ipc_namespace *ns);

int __sys_getsockopt(int fd, int level, int optname, char *optval,
  int *optlen);
int __sys_setsockopt(int fd, int level, int optname, char *optval,
  int optlen);
# 27 "arch/powerpc/kernel/signal_32.c" 2

# 1 "./include/linux/compat.h" 1
# 15 "./include/linux/compat.h"
# 1 "./include/linux/socket.h" 1





# 1 "./arch/powerpc/include/uapi/asm/socket.h" 1
# 19 "./arch/powerpc/include/uapi/asm/socket.h"
# 1 "./include/uapi/asm-generic/socket.h" 1





# 1 "./arch/powerpc/include/generated/uapi/asm/sockios.h" 1
# 1 "./include/uapi/asm-generic/sockios.h" 1
# 2 "./arch/powerpc/include/generated/uapi/asm/sockios.h" 2
# 7 "./include/uapi/asm-generic/socket.h" 2
# 20 "./arch/powerpc/include/uapi/asm/socket.h" 2
# 7 "./include/linux/socket.h" 2
# 1 "./include/uapi/linux/sockios.h" 1
# 23 "./include/uapi/linux/sockios.h"
# 1 "./arch/powerpc/include/generated/uapi/asm/sockios.h" 1
# 24 "./include/uapi/linux/sockios.h" 2
# 8 "./include/linux/socket.h" 2
# 1 "./include/linux/uio.h" 1
# 10 "./include/linux/uio.h"
# 1 "./include/uapi/linux/uio.h" 1
# 17 "./include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 11 "./include/linux/uio.h" 2

struct page;
struct pipe_inode_info;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum iter_type {

 ITER_IOVEC,
 ITER_KVEC,
 ITER_BVEC,
 ITER_PIPE,
 ITER_XARRAY,
 ITER_DISCARD,
};

struct iov_iter {
 u8 iter_type;
 bool data_source;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
  struct xarray *xarray;
  struct pipe_inode_info *pipe;
 };
 union {
  unsigned long nr_segs;
  struct {
   unsigned int head;
   unsigned int start_head;
  };
  loff_t xarray_start;
 };
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum iter_type iov_iter_type(const struct iov_iter *i)
{
 return i->iter_type;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iter_is_iovec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_IOVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_kvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_KVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_bvec(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_BVEC;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_pipe(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_PIPE;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_discard(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_DISCARD;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool iov_iter_is_xarray(const struct iov_iter *i)
{
 return iov_iter_type(i) == ITER_XARRAY;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char iov_iter_rw(const struct iov_iter *i)
{
 return i->data_source ? 1 : 0;
}
# 99 "./include/linux/uio.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = __builtin_choose_expr(((!!(sizeof((typeof(iter->count) *)1 == (typeof(iter->iov->iov_len - iter->iov_offset) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->count) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(iter->iov->iov_len - iter->iov_offset) * 0l)) : (int *)8))))), ((iter->count) < (iter->iov->iov_len - iter->iov_offset) ? (iter->count) : (iter->iov->iov_len - iter->iov_offset)), ({ typeof(iter->count) __UNIQUE_ID___x284 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) __UNIQUE_ID___y285 = (iter->iov->iov_len - iter->iov_offset); ((__UNIQUE_ID___x284) < (__UNIQUE_ID___y285) ? (__UNIQUE_ID___x284) : (__UNIQUE_ID___y285)); })),

 };
}

size_t copy_page_from_iter_atomic(struct page *page, unsigned offset,
      size_t bytes, struct iov_iter *i);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
void iov_iter_revert(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_readable(const struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);

size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 size_t copied = copy_from_iter_nocache(addr, bytes, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
# 187 "./include/linux/uio.h"
size_t _copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i);





size_t _copy_mc_to_iter(const void *addr, size_t bytes, struct iov_iter *i);




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_flushcache(addr, bytes, i);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
size_t copy_mc_to_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_mc_to_iter(addr, bytes, i);
}

size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, unsigned int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, unsigned int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, unsigned int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
void iov_iter_pipe(struct iov_iter *i, unsigned int direction, struct pipe_inode_info *pipe,
   size_t count);
void iov_iter_discard(struct iov_iter *i, unsigned int direction, size_t count);
void iov_iter_xarray(struct iov_iter *i, unsigned int direction, struct xarray *xarray,
       loff_t start, size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t iov_iter_count(const struct iov_iter *i)
{
 return i->count;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}

struct csum_state {
 __wsum csum;
 size_t off;
};

size_t csum_and_copy_to_iter(const void *addr, size_t bytes, void *csstate, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((__warn_unused_result__))
bool csum_and_copy_from_iter_full(void *addr, size_t bytes,
      __wsum *csum, struct iov_iter *i)
{
 size_t copied = csum_and_copy_from_iter(addr, bytes, csum, i);
 if (__builtin_expect(!!(copied == bytes), 1))
  return true;
 iov_iter_revert(i, copied);
 return false;
}
size_t hash_and_copy_to_iter(const void *addr, size_t bytes, void *hashp,
  struct iov_iter *i);

struct iovec *iovec_from_user(const struct iovec *uvector,
  unsigned long nr_segs, unsigned long fast_segs,
  struct iovec *fast_iov, bool compat);
ssize_t import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i);
ssize_t __import_iovec(int type, const struct iovec *uvec,
   unsigned nr_segs, unsigned fast_segs, struct iovec **iovp,
   struct iov_iter *i, bool compat);
int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 9 "./include/linux/socket.h" 2


# 1 "./include/uapi/linux/socket.h" 1
# 10 "./include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;





struct __kernel_sockaddr_storage {
 union {
  struct {
   __kernel_sa_family_t ss_family;

   char __data[128 - sizeof(unsigned short)];


  };
  void *__align;
 };
};
# 12 "./include/linux/socket.h" 2

struct file;
struct pid;
struct cred;
struct socket;





struct seq_file;
extern void socket_seq_show(struct seq_file *seq);


typedef __kernel_sa_family_t sa_family_t;





struct sockaddr {
 sa_family_t sa_family;
 char sa_data[14];
};

struct linger {
 int l_onoff;
 int l_linger;
};
# 50 "./include/linux/socket.h"
struct msghdr {
 void *msg_name;
 int msg_namelen;
 struct iov_iter msg_iter;






 union {
  void *msg_control;
  void *msg_control_user;
 };
 bool msg_control_is_user : 1;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
 struct kiocb *msg_iocb;
};

struct user_msghdr {
 void *msg_name;
 int msg_namelen;
 struct iovec *msg_iov;
 __kernel_size_t msg_iovlen;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
};


struct mmsghdr {
 struct user_msghdr msg_hdr;
 unsigned int msg_len;
};







struct cmsghdr {
 __kernel_size_t cmsg_len;
        int cmsg_level;
        int cmsg_type;
};
# 141 "./include/linux/socket.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
            struct cmsghdr *__cmsg)
{
 struct cmsghdr * __ptr;

 __ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) + ( ((__cmsg->cmsg_len)+sizeof(long)-1) & ~(sizeof(long)-1) ));
 if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
  return (struct cmsghdr *)0;

 return __ptr;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
 return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t msg_data_left(struct msghdr *msg)
{
 return iov_iter_count(&msg->msg_iter);
}







struct ucred {
 __u32 pid;
 __u32 uid;
 __u32 gid;
};
# 371 "./include/linux/socket.h"
extern int move_addr_to_kernel(void *uaddr, int ulen, struct __kernel_sockaddr_storage *kaddr);
extern int put_cmsg(struct msghdr*, int level, int type, int len, void *data);

struct timespec64;
struct __kernel_timespec;
struct old_timespec32;

struct scm_timestamping_internal {
 struct timespec64 ts[3];
};

extern void put_cmsg_scm_timestamping64(struct msghdr *msg, struct scm_timestamping_internal *tss);
extern void put_cmsg_scm_timestamping(struct msghdr *msg, struct scm_timestamping_internal *tss);




extern long __sys_recvmsg(int fd, struct user_msghdr *msg,
     unsigned int flags, bool forbid_cmsg_compat);
extern long __sys_sendmsg(int fd, struct user_msghdr *msg,
     unsigned int flags, bool forbid_cmsg_compat);
extern int __sys_recvmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags,
     struct __kernel_timespec *timeout,
     struct old_timespec32 *timeout32);
extern int __sys_sendmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags,
     bool forbid_cmsg_compat);
extern long __sys_sendmsg_sock(struct socket *sock, struct msghdr *msg,
          unsigned int flags);
extern long __sys_recvmsg_sock(struct socket *sock, struct msghdr *msg,
          struct user_msghdr *umsg,
          struct sockaddr *uaddr,
          unsigned int flags);
extern int sendmsg_copy_msghdr(struct msghdr *msg,
          struct user_msghdr *umsg, unsigned flags,
          struct iovec **iov);
extern int recvmsg_copy_msghdr(struct msghdr *msg,
          struct user_msghdr *umsg, unsigned flags,
          struct sockaddr **uaddr,
          struct iovec **iov);
extern int __copy_msghdr_from_user(struct msghdr *kmsg,
       struct user_msghdr *umsg,
       struct sockaddr **save_addr,
       struct iovec **uiov, size_t *nsegs);


extern int __sys_recvfrom(int fd, void *ubuf, size_t size,
     unsigned int flags, struct sockaddr *addr,
     int *addr_len);
extern int __sys_sendto(int fd, void *buff, size_t len,
   unsigned int flags, struct sockaddr *addr,
   int addr_len);
extern int __sys_accept4_file(struct file *file, unsigned file_flags,
   struct sockaddr *upeer_sockaddr,
    int *upeer_addrlen, int flags,
    unsigned long nofile);
extern struct file *do_accept(struct file *file, unsigned file_flags,
         struct sockaddr *upeer_sockaddr,
         int *upeer_addrlen, int flags);
extern int __sys_accept4(int fd, struct sockaddr *upeer_sockaddr,
    int *upeer_addrlen, int flags);
extern int __sys_socket(int family, int type, int protocol);
extern int __sys_bind(int fd, struct sockaddr *umyaddr, int addrlen);
extern int __sys_connect_file(struct file *file, struct __kernel_sockaddr_storage *addr,
         int addrlen, int file_flags);
extern int __sys_connect(int fd, struct sockaddr *uservaddr,
    int addrlen);
extern int __sys_listen(int fd, int backlog);
extern int __sys_getsockname(int fd, struct sockaddr *usockaddr,
        int *usockaddr_len);
extern int __sys_getpeername(int fd, struct sockaddr *usockaddr,
        int *usockaddr_len);
extern int __sys_socketpair(int family, int type, int protocol,
       int *usockvec);
extern int __sys_shutdown_sock(struct socket *sock, int how);
extern int __sys_shutdown(int fd, int how);
# 16 "./include/linux/compat.h" 2
# 1 "./include/uapi/linux/if.h" 1
# 23 "./include/uapi/linux/if.h"
# 1 "./include/uapi/linux/libc-compat.h" 1
# 24 "./include/uapi/linux/if.h" 2
# 37 "./include/uapi/linux/if.h"
# 1 "./include/uapi/linux/hdlc/ioctl.h" 1
# 40 "./include/uapi/linux/hdlc/ioctl.h"
typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
} sync_serial_settings;

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
 unsigned int slot_map;
} te1_settings;

typedef struct {
 unsigned short encoding;
 unsigned short parity;
} raw_hdlc_proto;

typedef struct {
 unsigned int t391;
 unsigned int t392;
 unsigned int n391;
 unsigned int n392;
 unsigned int n393;
 unsigned short lmi;
 unsigned short dce;
} fr_proto;

typedef struct {
 unsigned int dlci;
} fr_proto_pvc;

typedef struct {
 unsigned int dlci;
 char master[16];
}fr_proto_pvc_info;

typedef struct {
    unsigned int interval;
    unsigned int timeout;
} cisco_proto;

typedef struct {
 unsigned short dce;
 unsigned int modulo;
 unsigned int window;
 unsigned int t1;
 unsigned int t2;
 unsigned int n2;
} x25_hdlc_proto;
# 38 "./include/uapi/linux/if.h" 2
# 82 "./include/uapi/linux/if.h"
enum net_device_flags {


 IFF_UP = 1<<0,
 IFF_BROADCAST = 1<<1,
 IFF_DEBUG = 1<<2,
 IFF_LOOPBACK = 1<<3,
 IFF_POINTOPOINT = 1<<4,
 IFF_NOTRAILERS = 1<<5,
 IFF_RUNNING = 1<<6,
 IFF_NOARP = 1<<7,
 IFF_PROMISC = 1<<8,
 IFF_ALLMULTI = 1<<9,
 IFF_MASTER = 1<<10,
 IFF_SLAVE = 1<<11,
 IFF_MULTICAST = 1<<12,
 IFF_PORTSEL = 1<<13,
 IFF_AUTOMEDIA = 1<<14,
 IFF_DYNAMIC = 1<<15,


 IFF_LOWER_UP = 1<<16,
 IFF_DORMANT = 1<<17,
 IFF_ECHO = 1<<18,

};
# 167 "./include/uapi/linux/if.h"
enum {
 IF_OPER_UNKNOWN,
 IF_OPER_NOTPRESENT,
 IF_OPER_DOWN,
 IF_OPER_LOWERLAYERDOWN,
 IF_OPER_TESTING,
 IF_OPER_DORMANT,
 IF_OPER_UP,
};


enum {
 IF_LINK_MODE_DEFAULT,
 IF_LINK_MODE_DORMANT,
 IF_LINK_MODE_TESTING,
};
# 196 "./include/uapi/linux/if.h"
struct ifmap {
 unsigned long mem_start;
 unsigned long mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;

};


struct if_settings {
 unsigned int type;
 unsigned int size;
 union {

  raw_hdlc_proto *raw_hdlc;
  cisco_proto *cisco;
  fr_proto *fr;
  fr_proto_pvc *fr_pvc;
  fr_proto_pvc_info *fr_pvc_info;
  x25_hdlc_proto *x25;


  sync_serial_settings *sync;
  te1_settings *te1;
 } ifs_ifsu;
};
# 234 "./include/uapi/linux/if.h"
struct ifreq {

 union
 {
  char ifrn_name[16];
 } ifr_ifrn;

 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  int ifru_ivalue;
  int ifru_mtu;
  struct ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  void * ifru_data;
  struct if_settings ifru_settings;
 } ifr_ifru;
};
# 286 "./include/uapi/linux/if.h"
struct ifconf {
 int ifc_len;
 union {
  char *ifcu_buf;
  struct ifreq *ifcu_req;
 } ifc_ifcu;
};
# 17 "./include/linux/compat.h" 2





# 1 "./arch/powerpc/include/asm/compat.h" 1
# 11 "./arch/powerpc/include/asm/compat.h"
# 1 "./include/asm-generic/compat.h" 1





typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u32 compat_ino_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef s32 compat_daddr_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;
typedef s16 compat_short_t;
typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef u16 compat_ushort_t;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u32 compat_uptr_t;
typedef u32 compat_caddr_t;
typedef u32 compat_aio_context_t;
typedef u32 compat_old_sigset_t;


typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;



typedef u32 compat_mode_t;






typedef s64 compat_s64;
typedef u64 compat_u64;



typedef u32 compat_sigset_word;
# 12 "./arch/powerpc/include/asm/compat.h" 2








typedef u32 __compat_uid_t;
typedef u32 __compat_gid_t;
typedef u32 compat_dev_t;
typedef s16 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef __kernel_fsid_t compat_fsid_t;

struct compat_stat {
 compat_dev_t st_dev;
 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_nlink_t st_nlink;
 __compat_uid32_t st_uid;
 __compat_gid32_t st_gid;
 compat_dev_t st_rdev;
 compat_off_t st_size;
 compat_off_t st_blksize;
 compat_off_t st_blocks;
 old_time32_t st_atime;
 u32 st_atime_nsec;
 old_time32_t st_mtime;
 u32 st_mtime_nsec;
 old_time32_t st_ctime;
 u32 st_ctime_nsec;
 u32 __unused4[2];
};

struct compat_flock {
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;
};





struct compat_flock64 {
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;
};

struct compat_statfs {
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];
};
# 90 "./arch/powerpc/include/asm/compat.h"
struct compat_ipc64_perm {
 compat_key_t key;
 __compat_uid_t uid;
 __compat_gid_t gid;
 __compat_uid_t cuid;
 __compat_gid_t cgid;
 compat_mode_t mode;
 unsigned int seq;
 unsigned int __pad2;
 unsigned long __unused1;
 unsigned long __unused2;
};

struct compat_semid64_ds {
 struct compat_ipc64_perm sem_perm;
 unsigned int sem_otime_high;
 unsigned int sem_otime;
 unsigned int sem_ctime_high;
 unsigned int sem_ctime;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;
};

struct compat_msqid64_ds {
 struct compat_ipc64_perm msg_perm;
 unsigned int msg_stime_high;
 unsigned int msg_stime;
 unsigned int msg_rtime_high;
 unsigned int msg_rtime;
 unsigned int msg_ctime_high;
 unsigned int msg_ctime;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

struct compat_shmid64_ds {
 struct compat_ipc64_perm shm_perm;
 unsigned int shm_atime_high;
 unsigned int shm_atime;
 unsigned int shm_dtime_high;
 unsigned int shm_dtime;
 unsigned int shm_ctime_high;
 unsigned int shm_ctime;
 unsigned int __unused4;
 compat_size_t shm_segsz;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused5;
 compat_ulong_t __unused6;
};

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_compat_task(void)
{
 return (test_ti_thread_flag(((struct thread_info *)get_current()), 20));
}
# 23 "./include/linux/compat.h" 2
# 1 "./arch/powerpc/include/generated/uapi/asm/siginfo.h" 1
# 24 "./include/linux/compat.h" 2
# 90 "./include/linux/compat.h"
struct compat_iovec {
 compat_uptr_t iov_base;
 compat_size_t iov_len;
};





typedef struct compat_sigaltstack {
 compat_uptr_t ss_sp;
 int ss_flags;
 compat_size_t ss_size;
} compat_stack_t;
# 112 "./include/linux/compat.h"
typedef __compat_uid32_t compat_uid_t;
typedef __compat_gid32_t compat_gid_t;

struct compat_sel_arg_struct;
struct rusage;

struct old_itimerval32;

struct compat_tms {
 compat_clock_t tms_utime;
 compat_clock_t tms_stime;
 compat_clock_t tms_cutime;
 compat_clock_t tms_cstime;
};




typedef struct {
 compat_sigset_word sig[(64 / 32)];
} compat_sigset_t;


int set_compat_user_sigmask(const compat_sigset_t *umask,
       size_t sigsetsize);

struct compat_sigaction {

 compat_uptr_t sa_handler;
 compat_ulong_t sa_flags;





 compat_uptr_t sa_restorer;

 compat_sigset_t sa_mask __attribute__((__packed__));
};

typedef union compat_sigval {
 compat_int_t sival_int;
 compat_uptr_t sival_ptr;
} compat_sigval_t;

typedef struct compat_siginfo {
 int si_signo;

 int si_errno;
 int si_code;





 union {
  int _pad[128/sizeof(int) - 3];


  struct {
   compat_pid_t _pid;
   __compat_uid32_t _uid;
  } _kill;


  struct {
   compat_timer_t _tid;
   int _overrun;
   compat_sigval_t _sigval;
  } _timer;


  struct {
   compat_pid_t _pid;
   __compat_uid32_t _uid;
   compat_sigval_t _sigval;
  } _rt;


  struct {
   compat_pid_t _pid;
   __compat_uid32_t _uid;
   int _status;
   compat_clock_t _utime;
   compat_clock_t _stime;
  } _sigchld;
# 211 "./include/linux/compat.h"
  struct {
   compat_uptr_t _addr;


   union {

    int _trapno;




    short int _addr_lsb;

    struct {
     char _dummy_bnd[(__alignof__(compat_uptr_t) < sizeof(short) ? sizeof(short) : __alignof__(compat_uptr_t))];
     compat_uptr_t _lower;
     compat_uptr_t _upper;
    } _addr_bnd;

    struct {
     char _dummy_pkey[(__alignof__(compat_uptr_t) < sizeof(short) ? sizeof(short) : __alignof__(compat_uptr_t))];
     u32 _pkey;
    } _addr_pkey;

    struct {
     compat_ulong_t _data;
     u32 _type;
    } _perf;
   };
  } _sigfault;


  struct {
   compat_long_t _band;
   int _fd;
  } _sigpoll;

  struct {
   compat_uptr_t _call_addr;
   int _syscall;
   unsigned int _arch;
  } _sigsys;
 } _sifields;
} compat_siginfo_t;

struct compat_rlimit {
 compat_ulong_t rlim_cur;
 compat_ulong_t rlim_max;
};

struct compat_rusage {
 struct old_timeval32 ru_utime;
 struct old_timeval32 ru_stime;
 compat_long_t ru_maxrss;
 compat_long_t ru_ixrss;
 compat_long_t ru_idrss;
 compat_long_t ru_isrss;
 compat_long_t ru_minflt;
 compat_long_t ru_majflt;
 compat_long_t ru_nswap;
 compat_long_t ru_inblock;
 compat_long_t ru_oublock;
 compat_long_t ru_msgsnd;
 compat_long_t ru_msgrcv;
 compat_long_t ru_nsignals;
 compat_long_t ru_nvcsw;
 compat_long_t ru_nivcsw;
};

extern int put_compat_rusage(const struct rusage *,
        struct compat_rusage *);

struct compat_siginfo;
struct __compat_aio_sigset;

struct compat_dirent {
 u32 d_ino;
 compat_off_t d_off;
 u16 d_reclen;
 char d_name[256];
};

struct compat_ustat {
 compat_daddr_t f_tfree;
 compat_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};



typedef struct compat_sigevent {
 compat_sigval_t sigev_value;
 compat_int_t sigev_signo;
 compat_int_t sigev_notify;
 union {
  compat_int_t _pad[((64/sizeof(int)) - 3)];
  compat_int_t _tid;

  struct {
   compat_uptr_t _function;
   compat_uptr_t _attribute;
  } _sigev_thread;
 } _sigev_un;
} compat_sigevent_t;

struct compat_ifmap {
 compat_ulong_t mem_start;
 compat_ulong_t mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;
};

struct compat_if_settings {
 unsigned int type;
 unsigned int size;
 compat_uptr_t ifs_ifsu;
};

struct compat_ifreq {
 union {
  char ifrn_name[16];
 } ifr_ifrn;
 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  compat_int_t ifru_ivalue;
  compat_int_t ifru_mtu;
  struct compat_ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  compat_caddr_t ifru_data;
  struct compat_if_settings ifru_settings;
 } ifr_ifru;
};

struct compat_ifconf {
 compat_int_t ifc_len;
 compat_caddr_t ifcbuf;
};

struct compat_robust_list {
 compat_uptr_t next;
};

struct compat_robust_list_head {
 struct compat_robust_list list;
 compat_long_t futex_offset;
 compat_uptr_t list_op_pending;
};


struct compat_old_sigaction {
 compat_uptr_t sa_handler;
 compat_old_sigset_t sa_mask;
 compat_ulong_t sa_flags;
 compat_uptr_t sa_restorer;
};


struct compat_keyctl_kdf_params {
 compat_uptr_t hashname;
 compat_uptr_t otherinfo;
 __u32 otherinfolen;
 __u32 __spare[8];
};

struct compat_stat;
struct compat_statfs;
struct compat_statfs64;
struct compat_old_linux_dirent;
struct compat_linux_dirent;
struct linux_dirent64;
struct compat_msghdr;
struct compat_mmsghdr;
struct compat_sysinfo;
struct compat_sysctl_args;
struct compat_kexec_segment;
struct compat_mq_attr;
struct compat_msgbuf;

void copy_siginfo_to_external32(struct compat_siginfo *to,
  const struct kernel_siginfo *from);
int copy_siginfo_from_user32(kernel_siginfo_t *to,
  const struct compat_siginfo *from);
int __copy_siginfo_to_user32(struct compat_siginfo *to,
  const kernel_siginfo_t *from);



int get_compat_sigevent(struct sigevent *event,
  const struct compat_sigevent *u_event);

extern int get_compat_sigset(sigset_t *set, const compat_sigset_t *compat);





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
put_compat_sigset(compat_sigset_t *compat, const sigset_t *set,
    unsigned int size)
{


 compat_sigset_t v;
 switch ((64 / 64)) {
 case 4: v.sig[7] = (set->sig[3] >> 32); v.sig[6] = set->sig[3];
  __attribute__((__fallthrough__));
 case 3: v.sig[5] = (set->sig[2] >> 32); v.sig[4] = set->sig[2];
  __attribute__((__fallthrough__));
 case 2: v.sig[3] = (set->sig[1] >> 32); v.sig[2] = set->sig[1];
  __attribute__((__fallthrough__));
 case 1: v.sig[1] = (set->sig[0] >> 32); v.sig[0] = set->sig[0];
 }
 return copy_to_user(compat, &v, size) ? -14 : 0;



}
# 505 "./include/linux/compat.h"
extern int compat_ptrace_request(struct task_struct *child,
     compat_long_t request,
     compat_ulong_t addr, compat_ulong_t data);

extern long compat_arch_ptrace(struct task_struct *child, compat_long_t request,
          compat_ulong_t addr, compat_ulong_t data);

struct epoll_event;

int compat_restore_altstack(const compat_stack_t *uss);
int __compat_save_altstack(compat_stack_t *, unsigned long);
# 539 "./include/linux/compat.h"
           long compat_sys_io_setup(unsigned nr_reqs, u32 *ctx32p);
           long compat_sys_io_submit(compat_aio_context_t ctx_id, int nr,
         u32 *iocb);
           long compat_sys_io_pgetevents(compat_aio_context_t ctx_id,
     compat_long_t min_nr,
     compat_long_t nr,
     struct io_event *events,
     struct old_timespec32 *timeout,
     const struct __compat_aio_sigset *usig);
           long compat_sys_io_pgetevents_time64(compat_aio_context_t ctx_id,
     compat_long_t min_nr,
     compat_long_t nr,
     struct io_event *events,
     struct __kernel_timespec *timeout,
     const struct __compat_aio_sigset *usig);


           long compat_sys_lookup_dcookie(u32, u32, char *, compat_size_t);


           long compat_sys_epoll_pwait(int epfd,
   struct epoll_event *events,
   int maxevents, int timeout,
   const compat_sigset_t *sigmask,
   compat_size_t sigsetsize);
           long compat_sys_epoll_pwait2(int epfd,
   struct epoll_event *events,
   int maxevents,
   const struct __kernel_timespec *timeout,
   const compat_sigset_t *sigmask,
   compat_size_t sigsetsize);


           long compat_sys_fcntl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);
           long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,
       compat_ulong_t arg);


           long compat_sys_ioctl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);


           long compat_sys_statfs(const char *pathname,
      struct compat_statfs *buf);
           long compat_sys_statfs64(const char *pathname,
        compat_size_t sz,
        struct compat_statfs64 *buf);
           long compat_sys_fstatfs(unsigned int fd,
       struct compat_statfs *buf);
           long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz,
         struct compat_statfs64 *buf);
           long compat_sys_truncate(const char *, compat_off_t);
           long compat_sys_ftruncate(unsigned int, compat_ulong_t);

           long compat_sys_openat(int dfd, const char *filename,
      int flags, umode_t mode);


           long compat_sys_getdents(unsigned int fd,
        struct compat_linux_dirent *dirent,
        unsigned int count);


           long compat_sys_lseek(unsigned int, compat_off_t, unsigned int);

           ssize_t compat_sys_preadv(compat_ulong_t fd,
  const struct iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
           ssize_t compat_sys_pwritev(compat_ulong_t fd,
  const struct iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
# 624 "./include/linux/compat.h"
           long compat_sys_sendfile(int out_fd, int in_fd,
        compat_off_t *offset, compat_size_t count);
           long compat_sys_sendfile64(int out_fd, int in_fd,
        compat_loff_t *offset, compat_size_t count);


           long compat_sys_pselect6_time32(int n, compat_ulong_t *inp,
        compat_ulong_t *outp,
        compat_ulong_t *exp,
        struct old_timespec32 *tsp,
        void *sig);
           long compat_sys_pselect6_time64(int n, compat_ulong_t *inp,
        compat_ulong_t *outp,
        compat_ulong_t *exp,
        struct __kernel_timespec *tsp,
        void *sig);
           long compat_sys_ppoll_time32(struct pollfd *ufds,
     unsigned int nfds,
     struct old_timespec32 *tsp,
     const compat_sigset_t *sigmask,
     compat_size_t sigsetsize);
           long compat_sys_ppoll_time64(struct pollfd *ufds,
     unsigned int nfds,
     struct __kernel_timespec *tsp,
     const compat_sigset_t *sigmask,
     compat_size_t sigsetsize);


           long compat_sys_signalfd4(int ufd,
         const compat_sigset_t *sigmask,
         compat_size_t sigsetsize, int flags);


           long compat_sys_newfstatat(unsigned int dfd,
          const char *filename,
          struct compat_stat *statbuf,
          int flag);
           long compat_sys_newfstat(unsigned int fd,
        struct compat_stat *statbuf);




           long compat_sys_waitid(int, compat_pid_t,
  struct compat_siginfo *, int,
  struct compat_rusage *);




           long
compat_sys_set_robust_list(struct compat_robust_list_head *head,
      compat_size_t len);
           long
compat_sys_get_robust_list(int pid, compat_uptr_t *head_ptr,
      compat_size_t *len_ptr);


           long compat_sys_getitimer(int which,
         struct old_itimerval32 *it);
           long compat_sys_setitimer(int which,
         struct old_itimerval32 *in,
         struct old_itimerval32 *out);


           long compat_sys_kexec_load(compat_ulong_t entry,
          compat_ulong_t nr_segments,
          struct compat_kexec_segment *,
          compat_ulong_t flags);


           long compat_sys_timer_create(clockid_t which_clock,
   struct compat_sigevent *timer_event_spec,
   timer_t *created_timer_id);


           long compat_sys_ptrace(compat_long_t request, compat_long_t pid,
      compat_long_t addr, compat_long_t data);


           long compat_sys_sched_setaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
           long compat_sys_sched_getaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);


           long compat_sys_sigaltstack(const compat_stack_t *uss_ptr,
           compat_stack_t *uoss_ptr);
           long compat_sys_rt_sigsuspend(compat_sigset_t *unewset,
      compat_size_t sigsetsize);

           long compat_sys_rt_sigaction(int,
     const struct compat_sigaction *,
     struct compat_sigaction *,
     compat_size_t);

           long compat_sys_rt_sigprocmask(int how, compat_sigset_t *set,
       compat_sigset_t *oset,
       compat_size_t sigsetsize);
           long compat_sys_rt_sigpending(compat_sigset_t *uset,
      compat_size_t sigsetsize);
           long compat_sys_rt_sigtimedwait_time32(compat_sigset_t *uthese,
  struct compat_siginfo *uinfo,
  struct old_timespec32 *uts, compat_size_t sigsetsize);
           long compat_sys_rt_sigtimedwait_time64(compat_sigset_t *uthese,
  struct compat_siginfo *uinfo,
  struct __kernel_timespec *uts, compat_size_t sigsetsize);
           long compat_sys_rt_sigqueueinfo(compat_pid_t pid, int sig,
    struct compat_siginfo *uinfo);



           long compat_sys_times(struct compat_tms *tbuf);
           long compat_sys_getrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
           long compat_sys_setrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
           long compat_sys_getrusage(int who, struct compat_rusage *ru);


           long compat_sys_gettimeofday(struct old_timeval32 *tv,
  struct timezone *tz);
           long compat_sys_settimeofday(struct old_timeval32 *tv,
  struct timezone *tz);


           long compat_sys_sysinfo(struct compat_sysinfo *info);


           long compat_sys_mq_open(const char *u_name,
   int oflag, compat_mode_t mode,
   struct compat_mq_attr *u_attr);
           long compat_sys_mq_notify(mqd_t mqdes,
   const struct compat_sigevent *u_notification);
           long compat_sys_mq_getsetattr(mqd_t mqdes,
   const struct compat_mq_attr *u_mqstat,
   struct compat_mq_attr *u_omqstat);


           long compat_sys_msgctl(int first, int second, void *uptr);
           long compat_sys_msgrcv(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, compat_long_t msgtyp, int msgflg);
           long compat_sys_msgsnd(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, int msgflg);


           long compat_sys_semctl(int semid, int semnum, int cmd, int arg);


           long compat_sys_shmctl(int first, int second, void *uptr);
           long compat_sys_shmat(int shmid, compat_uptr_t shmaddr, int shmflg);


           long compat_sys_recvfrom(int fd, void *buf, compat_size_t len,
       unsigned flags, struct sockaddr *addr,
       int *addrlen);
           long compat_sys_sendmsg(int fd, struct compat_msghdr *msg,
       unsigned flags);
           long compat_sys_recvmsg(int fd, struct compat_msghdr *msg,
       unsigned int flags);




           long compat_sys_keyctl(u32 option,
         u32 arg2, u32 arg3, u32 arg4, u32 arg5);


           long compat_sys_execve(const char *filename, const compat_uptr_t *argv,
       const compat_uptr_t *envp);




           long compat_sys_rt_tgsigqueueinfo(compat_pid_t tgid,
     compat_pid_t pid, int sig,
     struct compat_siginfo *uinfo);
           long compat_sys_recvmmsg_time64(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags,
        struct __kernel_timespec *timeout);
           long compat_sys_recvmmsg_time32(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags,
        struct old_timespec32 *timeout);
           long compat_sys_wait4(compat_pid_t pid,
     compat_uint_t *stat_addr, int options,
     struct compat_rusage *ru);
           long compat_sys_fanotify_mark(int, unsigned int, __u32, __u32,
         int, const char *);
           long compat_sys_open_by_handle_at(int mountdirfd,
          struct file_handle *handle,
          int flags);
           long compat_sys_sendmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags);
           long compat_sys_execveat(int dfd, const char *filename,
       const compat_uptr_t *argv,
       const compat_uptr_t *envp, int flags);
           ssize_t compat_sys_preadv2(compat_ulong_t fd,
  const struct iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, rwf_t flags);
           ssize_t compat_sys_pwritev2(compat_ulong_t fd,
  const struct iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, rwf_t flags);
# 847 "./include/linux/compat.h"
           long compat_sys_open(const char *filename, int flags,
    umode_t mode);


           long compat_sys_signalfd(int ufd,
        const compat_sigset_t *sigmask,
        compat_size_t sigsetsize);


           long compat_sys_newstat(const char *filename,
       struct compat_stat *statbuf);
           long compat_sys_newlstat(const char *filename,
        struct compat_stat *statbuf);


           long compat_sys_select(int n, compat_ulong_t *inp,
  compat_ulong_t *outp, compat_ulong_t *exp,
  struct old_timeval32 *tvp);
           long compat_sys_ustat(unsigned dev, struct compat_ustat *u32);
           long compat_sys_recv(int fd, void *buf, compat_size_t len,
    unsigned flags);


           long compat_sys_old_readdir(unsigned int fd,
           struct compat_old_linux_dirent *,
           unsigned int count);


           long compat_sys_old_select(struct compat_sel_arg_struct *arg);


           long compat_sys_ipc(u32, int, int, u32, compat_uptr_t, u32);



           long compat_sys_sigpending(compat_old_sigset_t *set);



           long compat_sys_sigprocmask(int how, compat_old_sigset_t *nset,
           compat_old_sigset_t *oset);


           long compat_sys_sigaction(int sig,
                                   const struct compat_old_sigaction *act,
                                   struct compat_old_sigaction *oact);



           long compat_sys_socketcall(int call, u32 *args);
# 906 "./include/linux/compat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct old_timeval32 ns_to_old_timeval32(s64 nsec)
{
 struct __kernel_old_timeval tv;
 struct old_timeval32 ctv;

 tv = ns_to_kernel_old_timeval(nsec);
 ctv.tv_sec = tv.tv_sec;
 ctv.tv_usec = tv.tv_usec;

 return ctv;
}







int kcompat_sys_statfs64(const char * pathname, compat_size_t sz,
       struct compat_statfs64 * buf);
int kcompat_sys_fstatfs64(unsigned int fd, compat_size_t sz,
     struct compat_statfs64 * buf);
# 937 "./include/linux/compat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_compat_syscall(void) { return is_compat_task(); }
# 953 "./include/linux/compat.h"
long compat_get_bitmap(unsigned long *mask, const compat_ulong_t *umask,
         unsigned long bitmap_size);
long compat_put_bitmap(compat_ulong_t *umask, unsigned long *mask,
         unsigned long bitmap_size);
# 974 "./include/linux/compat.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *compat_ptr(compat_uptr_t uptr)
{
 return (void *)(unsigned long)uptr;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) compat_uptr_t ptr_to_compat(void *uptr)
{
 return (u32)(unsigned long)uptr;
}
# 29 "arch/powerpc/kernel/signal_32.c" 2
# 39 "arch/powerpc/kernel/signal_32.c"
# 1 "./arch/powerpc/include/asm/syscalls.h" 1
# 11 "./arch/powerpc/include/asm/syscalls.h"
struct rtas_args;

           long sys_mmap(unsigned long addr, size_t len,
  unsigned long prot, unsigned long flags,
  unsigned long fd, off_t offset);
           long sys_mmap2(unsigned long addr, size_t len,
  unsigned long prot, unsigned long flags,
  unsigned long fd, unsigned long pgoff);
           long ppc64_personality(unsigned long personality);
           long sys_rtas(struct rtas_args *uargs);


unsigned long compat_sys_mmap2(unsigned long addr, size_t len,
          unsigned long prot, unsigned long flags,
          unsigned long fd, unsigned long pgoff);

compat_ssize_t compat_sys_pread64(unsigned int fd, char *ubuf, compat_size_t count,
      u32 reg6, u32 pos1, u32 pos2);

compat_ssize_t compat_sys_pwrite64(unsigned int fd, const char *ubuf, compat_size_t count,
       u32 reg6, u32 pos1, u32 pos2);

compat_ssize_t compat_sys_readahead(int fd, u32 r4, u32 offset1, u32 offset2, u32 count);

int compat_sys_truncate64(const char *path, u32 reg4,
     unsigned long len1, unsigned long len2);

long compat_sys_fallocate(int fd, int mode, u32 offset1, u32 offset2, u32 len1, u32 len2);

int compat_sys_ftruncate64(unsigned int fd, u32 reg4, unsigned long len1,
      unsigned long len2);

long ppc32_fadvise64(int fd, u32 unused, u32 offset1, u32 offset2,
       size_t len, int advice);

long compat_sys_sync_file_range2(int fd, unsigned int flags,
     unsigned int offset1, unsigned int offset2,
     unsigned int nbytes1, unsigned int nbytes2);
# 40 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./arch/powerpc/include/uapi/asm/sigcontext.h" 1
# 17 "./arch/powerpc/include/uapi/asm/sigcontext.h"
struct sigcontext {
 unsigned long _unused[4];
 int signal;

 int _pad0;

 unsigned long handler;
 unsigned long oldmask;

 struct user_pt_regs *regs;




 elf_gregset_t gp_regs;
 elf_fpregset_t fp_regs;
# 87 "./arch/powerpc/include/uapi/asm/sigcontext.h"
 elf_vrreg_t *v_regs;
 long vmx_reserve[34 + 34 + 1 + 32];

};
# 41 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./arch/powerpc/include/asm/vdso.h" 1
# 13 "./arch/powerpc/include/asm/vdso.h"
# 1 "./include/generated/vdso64-offsets.h" 1
# 14 "./arch/powerpc/include/asm/vdso.h" 2



# 1 "./include/generated/vdso32-offsets.h" 1
# 18 "./arch/powerpc/include/asm/vdso.h" 2






int vdso_getcpu_init(void);
# 42 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./arch/powerpc/include/asm/switch_to.h" 1
# 11 "./arch/powerpc/include/asm/switch_to.h"
struct thread_struct;
struct task_struct;
struct pt_regs;

extern struct task_struct *__switch_to(struct task_struct *,
 struct task_struct *);


extern struct task_struct *_switch(struct thread_struct *prev,
       struct thread_struct *next);

extern void switch_booke_debug_regs(struct debug_reg *new_debug);

extern int emulate_altivec(struct pt_regs *);


void restore_math(struct pt_regs *regs);






void restore_tm_state(struct pt_regs *regs);

extern void flush_all_to_thread(struct task_struct *);
extern void giveup_all(struct task_struct *);


extern void enable_kernel_fp(void);
extern void flush_fp_to_thread(struct task_struct *);
extern void giveup_fpu(struct task_struct *);
extern void save_fpu(struct task_struct *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_kernel_fp(void)
{
 msr_check_and_clear((1UL<<(13)));
}






extern void enable_kernel_altivec(void);
extern void flush_altivec_to_thread(struct task_struct *);
extern void giveup_altivec(struct task_struct *);
extern void save_altivec(struct task_struct *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_kernel_altivec(void)
{
 msr_check_and_clear((1UL<<(25)));
}






extern void enable_kernel_vsx(void);
extern void flush_vsx_to_thread(struct task_struct *);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_kernel_vsx(void)
{
 msr_check_and_clear((1UL<<(13))|(1UL<<(25))|(1UL<<(23)));
}
# 96 "./arch/powerpc/include/asm/switch_to.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __giveup_spe(struct task_struct *t) { }


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_task_ebb(struct task_struct *t)
{


    t->thread.ebbrr = 0;
    t->thread.ebbhr = 0;
    t->thread.bescr = 0;
    t->thread.mmcr2 = 0;
    t->thread.mmcr0 = 0;
    t->thread.siar = 0;
    t->thread.sdar = 0;
    t->thread.sier = 0;
    t->thread.used_ebb = 0;

}

extern int set_thread_tidr(struct task_struct *t);
# 43 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./arch/powerpc/include/asm/tm.h" 1








# 1 "./arch/powerpc/include/uapi/asm/tm.h" 1
# 10 "./arch/powerpc/include/asm/tm.h" 2



extern void tm_reclaim(struct thread_struct *thread,
         uint8_t cause);
extern void tm_reclaim_current(uint8_t cause);
extern void tm_recheckpoint(struct thread_struct *thread);
extern void tm_save_sprs(struct thread_struct *thread);
extern void tm_restore_sprs(struct thread_struct *thread);

extern bool tm_suspend_disabled;
# 44 "arch/powerpc/kernel/signal_32.c" 2
# 1 "./arch/powerpc/include/asm/asm-prototypes.h" 1
# 13 "./arch/powerpc/include/asm/asm-prototypes.h"
# 1 "./arch/powerpc/include/asm/checksum.h" 1
# 10 "./arch/powerpc/include/asm/checksum.h"
# 1 "./include/linux/in6.h" 1
# 19 "./include/linux/in6.h"
# 1 "./include/uapi/linux/in6.h" 1
# 33 "./include/uapi/linux/in6.h"
struct in6_addr {
 union {
  __u8 u6_addr8[16];

  __be16 u6_addr16[8];
  __be32 u6_addr32[4];

 } in6_u;





};



struct sockaddr_in6 {
 unsigned short int sin6_family;
 __be16 sin6_port;
 __be32 sin6_flowinfo;
 struct in6_addr sin6_addr;
 __u32 sin6_scope_id;
};



struct ipv6_mreq {

 struct in6_addr ipv6mr_multiaddr;


 int ipv6mr_ifindex;
};




struct in6_flowlabel_req {
 struct in6_addr flr_dst;
 __be32 flr_label;
 __u8 flr_action;
 __u8 flr_share;
 __u16 flr_flags;
 __u16 flr_expires;
 __u16 flr_linger;
 __u32 __flr_pad;

};
# 20 "./include/linux/in6.h" 2





extern const struct in6_addr in6addr_any;

extern const struct in6_addr in6addr_loopback;

extern const struct in6_addr in6addr_linklocal_allnodes;


extern const struct in6_addr in6addr_linklocal_allrouters;


extern const struct in6_addr in6addr_interfacelocal_allnodes;


extern const struct in6_addr in6addr_interfacelocal_allrouters;


extern const struct in6_addr in6addr_sitelocal_allrouters;
# 11 "./arch/powerpc/include/asm/checksum.h" 2
# 21 "./arch/powerpc/include/asm/checksum.h"
extern __wsum csum_partial_copy_generic(const void *src, void *dst, int len);


extern __wsum csum_and_copy_from_user(const void *src, void *dst,
          int len);

extern __wsum csum_and_copy_to_user(const void *src, void *dst,
        int len);
# 39 "./arch/powerpc/include/asm/checksum.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 csum_fold(__wsum sum)
{
 unsigned int tmp;


 __asm__("rlwinm %0,%1,16,0,31" : "=r" (tmp) : "r" (sum));



 return ( __sum16)(~(( u32)sum + tmp) >> 16);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 from64to32(u64 x)
{
 return (x + ror64(x, 32)) >> 32;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, __u32 len,
     __u8 proto, __wsum sum)
{

 u64 s = ( u32)sum;

 s += ( u32)saddr;
 s += ( u32)daddr;

 s += proto + len;



 return ( __wsum) from64to32(s);
# 81 "./arch/powerpc/include/asm/checksum.h"
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, __u32 len,
     __u8 proto, __wsum sum)
{
 return csum_fold(csum_tcpudp_nofold(saddr, daddr, len, proto, sum));
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __wsum csum_add(__wsum csum, __wsum addend)
{

 u64 res = ( u64)csum;

 if (__builtin_constant_p(csum) && csum == 0)
  return addend;
 if (__builtin_constant_p(addend) && addend == 0)
  return csum;


 res += ( u64)addend;
 return ( __wsum)((u32)res + (res >> 32));






}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __wsum ip_fast_csum_nofold(const void *iph, unsigned int ihl)
{
 const u32 *ptr = (const u32 *)iph + 1;

 unsigned int i;
 u64 s = *(const u32 *)iph;

 for (i = 0; i < ihl - 1; i++, ptr++)
  s += *ptr;
 return ( __wsum)from64to32(s);
# 145 "./arch/powerpc/include/asm/checksum.h"
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 ip_fast_csum(const void *iph, unsigned int ihl)
{
 return csum_fold(ip_fast_csum_nofold(iph, ihl));
}
# 164 "./arch/powerpc/include/asm/checksum.h"
__wsum __csum_partial(const void *buff, int len, __wsum sum);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __wsum csum_partial(const void *buff, int len, __wsum sum)
{
 if (__builtin_constant_p(len) && len <= 16 && (len & 1) == 0) {
  if (len == 2)
   sum = csum_add(sum, ( __wsum)*(const u16 *)buff);
  if (len >= 4)
   sum = csum_add(sum, ( __wsum)*(const u32 *)buff);
  if (len == 6)
   sum = csum_add(sum, ( __wsum)
         *(const u16 *)(buff + 4));
  if (len >= 8)
   sum = csum_add(sum, ( __wsum)
         *(const u32 *)(buff + 4));
  if (len == 10)
   sum = csum_add(sum, ( __wsum)
         *(const u16 *)(buff + 8));
  if (len >= 12)
   sum = csum_add(sum, ( __wsum)
         *(const u32 *)(buff + 8));
  if (len == 14)
   sum = csum_add(sum, ( __wsum)
         *(const u16 *)(buff + 12));
  if (len >= 16)
   sum = csum_add(sum, ( __wsum)
         *(const u32 *)(buff + 12));
 } else if (__builtin_constant_p(len) && (len & 3) == 0) {
  sum = csum_add(sum, ip_fast_csum_nofold(buff, len >> 2));
 } else {
  sum = __csum_partial(buff, len, sum);
 }
 return sum;
}





static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __sum16 ip_compute_csum(const void *buff, int len)
{
 return csum_fold(csum_partial(buff, len, 0));
}


__sum16 csum_ipv6_magic(const struct in6_addr *saddr,
   const struct in6_addr *daddr,
   __u32 len, __u8 proto, __wsum sum);
# 14 "./arch/powerpc/include/asm/asm-prototypes.h" 2

# 1 "./arch/powerpc/include/asm/epapr_hcalls.h" 1
# 53 "./arch/powerpc/include/asm/epapr_hcalls.h"
# 1 "./arch/powerpc/include/uapi/asm/epapr_hcalls.h" 1
# 54 "./arch/powerpc/include/asm/epapr_hcalls.h" 2
# 105 "./arch/powerpc/include/asm/epapr_hcalls.h"
extern bool epapr_paravirt_enabled;
extern u32 epapr_hypercall_start[];




static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int epapr_paravirt_early_init(void) { return 0; }
# 136 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_int_set_config(unsigned int interrupt,
 uint32_t config, unsigned int priority, uint32_t destination)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");
 register uintptr_t r5 __asm__("r5");
 register uintptr_t r6 __asm__("r6");

 r11 = (((1) << 16) | (4));
 r3 = interrupt;
 r4 = config;
 r5 = priority;
 r6 = destination;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3), "+r" (r4), "+r" (r5), "+r" (r6)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7"
 );

 return r3;
}
# 168 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_int_get_config(unsigned int interrupt,
 uint32_t *config, unsigned int *priority, uint32_t *destination)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");
 register uintptr_t r5 __asm__("r5");
 register uintptr_t r6 __asm__("r6");

 r11 = (((1) << 16) | (5));
 r3 = interrupt;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3), "=r" (r4), "=r" (r5), "=r" (r6)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7"
 );

 *config = r4;
 *priority = r5;
 *destination = r6;

 return r3;
}
# 199 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_int_set_mask(unsigned int interrupt,
 unsigned int mask)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");

 r11 = (((1) << 16) | (6));
 r3 = interrupt;
 r4 = mask;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3), "+r" (r4)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7", "r6", "r5"
 );

 return r3;
}
# 225 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_int_get_mask(unsigned int interrupt,
 unsigned int *mask)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");

 r11 = (((1) << 16) | (7));
 r3 = interrupt;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3), "=r" (r4)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7", "r6", "r5"
 );

 *mask = r4;

 return r3;
}
# 255 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_int_eoi(unsigned int interrupt)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");

 r11 = (((1) << 16) | (10));
 r3 = interrupt;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7", "r6", "r5", "r4"
 );

 return r3;
}
# 282 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_byte_channel_send(unsigned int handle,
 unsigned int *count, const char buffer[16])
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");
 register uintptr_t r5 __asm__("r5");
 register uintptr_t r6 __asm__("r6");
 register uintptr_t r7 __asm__("r7");
 register uintptr_t r8 __asm__("r8");
 const uint32_t *p = (const uint32_t *) buffer;

 r11 = (((1) << 16) | (1));
 r3 = handle;
 r4 = *count;
 r5 = (( __u32)(__be32)(p[0]));
 r6 = (( __u32)(__be32)(p[1]));
 r7 = (( __u32)(__be32)(p[2]));
 r8 = (( __u32)(__be32)(p[3]));

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3),
    "+r" (r4), "+r" (r5), "+r" (r6), "+r" (r7), "+r" (r8)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9"
 );

 *count = r4;

 return r3;
}
# 325 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_byte_channel_receive(unsigned int handle,
 unsigned int *count, char buffer[16])
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");
 register uintptr_t r5 __asm__("r5");
 register uintptr_t r6 __asm__("r6");
 register uintptr_t r7 __asm__("r7");
 register uintptr_t r8 __asm__("r8");
 uint32_t *p = (uint32_t *) buffer;

 r11 = (((1) << 16) | (2));
 r3 = handle;
 r4 = *count;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3), "+r" (r4),
    "=r" (r5), "=r" (r6), "=r" (r7), "=r" (r8)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9"
 );

 *count = r4;
 p[0] = (( __be32)(__u32)(r5));
 p[1] = (( __be32)(__u32)(r6));
 p[2] = (( __be32)(__u32)(r7));
 p[3] = (( __be32)(__u32)(r8));

 return r3;
}
# 368 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_byte_channel_poll(unsigned int handle,
 unsigned int *rx_count, unsigned int *tx_count)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");
 register uintptr_t r5 __asm__("r5");

 r11 = (((1) << 16) | (3));
 r3 = handle;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3), "=r" (r4), "=r" (r5)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7", "r6"
 );

 *rx_count = r4;
 *tx_count = r5;

 return r3;
}
# 402 "./arch/powerpc/include/asm/epapr_hcalls.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_int_iack(unsigned int handle,
 unsigned int *vector)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");
 register uintptr_t r4 __asm__("r4");

 r11 = (((1) << 16) | (9));
 r3 = handle;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3), "=r" (r4)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7", "r6", "r5"
 );

 *vector = r4;

 return r3;
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_doorbell_send(unsigned int handle)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");

 r11 = (((1) << 16) | (14));
 r3 = handle;

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "+r" (r3)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7", "r6", "r5", "r4"
 );

 return r3;
}






static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int ev_idle(void)
{
 register uintptr_t r11 __asm__("r11");
 register uintptr_t r3 __asm__("r3");

 r11 = (((1) << 16) | (16));

 asm volatile("bl	epapr_hypercall_start"
  : "+r" (r11), "=r" (r3)
  : : "r0", "r12", "xer", "ctr", "lr", "cc", "memory", "r10", "r9", "r8", "r7", "r6", "r5", "r4"
 );

 return r3;
}
# 501 "./arch/powerpc/include/asm/epapr_hcalls.h"
static unsigned long epapr_hypercall(unsigned long *in,
       unsigned long *out,
       unsigned long nr)
{
 return 12;
}


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long epapr_hypercall0_1(unsigned int nr, unsigned long *r2)
{
 unsigned long in[8] = {0};
 unsigned long out[8];
 unsigned long r;

 r = epapr_hypercall(in, out, nr);
 *r2 = out[0];

 return r;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long epapr_hypercall0(unsigned int nr)
{
 unsigned long in[8] = {0};
 unsigned long out[8];

 return epapr_hypercall(in, out, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long epapr_hypercall1(unsigned int nr, unsigned long p1)
{
 unsigned long in[8] = {0};
 unsigned long out[8];

 in[0] = p1;
 return epapr_hypercall(in, out, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long epapr_hypercall2(unsigned int nr, unsigned long p1,
        unsigned long p2)
{
 unsigned long in[8] = {0};
 unsigned long out[8];

 in[0] = p1;
 in[1] = p2;
 return epapr_hypercall(in, out, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long epapr_hypercall3(unsigned int nr, unsigned long p1,
        unsigned long p2, unsigned long p3)
{
 unsigned long in[8] = {0};
 unsigned long out[8];

 in[0] = p1;
 in[1] = p2;
 in[2] = p3;
 return epapr_hypercall(in, out, nr);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long epapr_hypercall4(unsigned int nr, unsigned long p1,
        unsigned long p2, unsigned long p3,
        unsigned long p4)
{
 unsigned long in[8] = {0};
 unsigned long out[8];

 in[0] = p1;
 in[1] = p2;
 in[2] = p3;
 in[3] = p4;
 return epapr_hypercall(in, out, nr);
}
# 16 "./arch/powerpc/include/asm/asm-prototypes.h" 2
# 1 "./arch/powerpc/include/asm/dcr.h" 1
# 17 "./arch/powerpc/include/asm/asm-prototypes.h" 2
# 1 "./arch/powerpc/include/asm/mmu_context.h" 1
# 18 "./arch/powerpc/include/asm/mmu_context.h"
extern int init_new_context(struct task_struct *tsk, struct mm_struct *mm);

extern void destroy_context(struct mm_struct *mm);

struct mm_iommu_table_group_mem_t;

extern int isolate_lru_page(struct page *page);
extern bool mm_iommu_preregistered(struct mm_struct *mm);
extern long mm_iommu_new(struct mm_struct *mm,
  unsigned long ua, unsigned long entries,
  struct mm_iommu_table_group_mem_t **pmem);
extern long mm_iommu_newdev(struct mm_struct *mm, unsigned long ua,
  unsigned long entries, unsigned long dev_hpa,
  struct mm_iommu_table_group_mem_t **pmem);
extern long mm_iommu_put(struct mm_struct *mm,
  struct mm_iommu_table_group_mem_t *mem);
extern void mm_iommu_init(struct mm_struct *mm);
extern void mm_iommu_cleanup(struct mm_struct *mm);
extern struct mm_iommu_table_group_mem_t *mm_iommu_lookup(struct mm_struct *mm,
  unsigned long ua, unsigned long size);
extern struct mm_iommu_table_group_mem_t *mm_iommu_lookup_rm(
  struct mm_struct *mm, unsigned long ua, unsigned long size);
extern struct mm_iommu_table_group_mem_t *mm_iommu_get(struct mm_struct *mm,
  unsigned long ua, unsigned long entries);
extern long mm_iommu_ua_to_hpa(struct mm_iommu_table_group_mem_t *mem,
  unsigned long ua, unsigned int pageshift, unsigned long *hpa);
extern long mm_iommu_ua_to_hpa_rm(struct mm_iommu_table_group_mem_t *mem,
  unsigned long ua, unsigned int pageshift, unsigned long *hpa);
extern void mm_iommu_ua_mark_dirty_rm(struct mm_struct *mm, unsigned long ua);
extern bool mm_iommu_is_devmem(struct mm_struct *mm, unsigned long hpa,
  unsigned int pageshift, unsigned long *size);
extern long mm_iommu_mapped_inc(struct mm_iommu_table_group_mem_t *mem);
extern void mm_iommu_mapped_dec(struct mm_iommu_table_group_mem_t *mem);
# 59 "./arch/powerpc/include/asm/mmu_context.h"
extern void switch_slb(struct task_struct *tsk, struct mm_struct *mm);


extern void radix__switch_mmu_context(struct mm_struct *prev,
          struct mm_struct *next);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void switch_mmu_context(struct mm_struct *prev,
          struct mm_struct *next,
          struct task_struct *tsk)
{
 if (radix_enabled())
  return radix__switch_mmu_context(prev, next);
 return switch_slb(tsk, next);
}

extern int hash__alloc_context_id(void);
extern void hash__reserve_context_id(int id);
extern void __destroy_context(int context_id);
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_context_init(void) { }

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int alloc_extended_context(struct mm_struct *mm,
      unsigned long ea)
{
 int context_id;

 int index = ea >> 49;

 context_id = hash__alloc_context_id();
 if (context_id < 0)
  return context_id;

 ((void)(sizeof(( long)(mm->context.extended_id[index]))));
 mm->context.extended_id[index] = context_id;
 return context_id;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool need_extra_context(struct mm_struct *mm, unsigned long ea)
{
 int context_id;

 context_id = get_user_context(&mm->context, ea);
 if (!context_id)
  return true;
 return false;
}
# 124 "./arch/powerpc/include/asm/mmu_context.h"
extern void switch_cop(struct mm_struct *next);
extern int use_cop(unsigned long acop, struct mm_struct *mm);
extern void drop_cop(unsigned long acop, struct mm_struct *mm);


static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_mm_active_cpus(struct mm_struct *mm)
{
 atomic_inc(&mm->context.active_cpus);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_mm_active_cpus(struct mm_struct *mm)
{
 atomic_dec(&mm->context.active_cpus);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_context_add_copro(struct mm_struct *mm)
{





 if (atomic_inc_return(&mm->context.copros) == 1)
  inc_mm_active_cpus(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_context_remove_copro(struct mm_struct *mm)
{
 int c;
# 172 "./arch/powerpc/include/asm/mmu_context.h"
 if (radix_enabled()) {
  flush_all_mm(mm);

  c = atomic_dec_if_positive(&mm->context.copros);

  ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((c < 0))) { if (!(c < 0)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/mmu_context.h"), "i" (177), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/mmu_context.h"), "i" (177), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (c < 0) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

  if (c == 0)
   dec_mm_active_cpus(mm);
 }
}
# 195 "./arch/powerpc/include/asm/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_context_add_vas_window(struct mm_struct *mm)
{
 atomic_inc(&mm->context.vas_windows);
 mm_context_add_copro(mm);
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_context_remove_vas_window(struct mm_struct *mm)
{
 int v;

 mm_context_remove_copro(mm);
 v = atomic_dec_if_positive(&mm->context.vas_windows);


 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((v < 0))) { if (!(v < 0)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/mmu_context.h"), "i" (209), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/include/asm/mmu_context.h"), "i" (209), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (v < 0) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}
# 219 "./arch/powerpc/include/asm/mmu_context.h"
void do_h_rpt_invalidate_prt(unsigned long pid, unsigned long lpid,
        unsigned long type, unsigned long pg_sizes,
        unsigned long start, unsigned long end);
# 231 "./arch/powerpc/include/asm/mmu_context.h"
extern void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,
          struct task_struct *tsk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void switch_mm(struct mm_struct *prev, struct mm_struct *next,
        struct task_struct *tsk)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 switch_mm_irqs_off(prev, next, tsk);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { } while (0); arch_local_irq_restore(flags); } while (0); } while (0);
}







static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void activate_mm(struct mm_struct *prev, struct mm_struct *next)
{
 switch_mm_irqs_off(prev, next, get_current());
}
# 266 "./arch/powerpc/include/asm/mmu_context.h"
extern void arch_exit_mmap(struct mm_struct *mm);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_unmap(struct mm_struct *mm,
         unsigned long start, unsigned long end)
{
 unsigned long vdso_base = (unsigned long)mm->context.vdso;

 if (start <= vdso_base && vdso_base < end)
  mm->context.vdso = ((void *)0);
}


bool arch_vma_access_permitted(struct vm_area_struct *vma, bool write,
          bool execute, bool foreign);
void arch_dup_pkeys(struct mm_struct *oldmm, struct mm_struct *mm);
# 299 "./arch/powerpc/include/asm/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_dup_mmap(struct mm_struct *oldmm,
    struct mm_struct *mm)
{
 arch_dup_pkeys(oldmm, mm);
 return 0;
}

# 1 "./include/asm-generic/mmu_context.h" 1








struct task_struct;
struct mm_struct;
# 21 "./include/asm-generic/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enter_lazy_tlb(struct mm_struct *mm,
   struct task_struct *tsk)
{
}
# 70 "./include/asm-generic/mmu_context.h"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void deactivate_mm(struct task_struct *tsk,
   struct mm_struct *mm)
{
}
# 307 "./arch/powerpc/include/asm/mmu_context.h" 2
# 18 "./arch/powerpc/include/asm/asm-prototypes.h" 2
# 1 "./arch/powerpc/include/asm/ultravisor-api.h" 1
# 19 "./arch/powerpc/include/asm/asm-prototypes.h" 2

# 1 "./arch/powerpc/include/uapi/asm/ucontext.h" 1
# 21 "./arch/powerpc/include/uapi/asm/ucontext.h"
struct ucontext {
 unsigned long uc_flags;
 struct ucontext *uc_link;
 stack_t uc_stack;




 sigset_t uc_sigmask;


 sigset_t __unused[15];
 struct sigcontext uc_mcontext;





};
# 21 "./arch/powerpc/include/asm/asm-prototypes.h" 2


extern struct task_struct *current_set[2048];
extern struct task_struct *secondary_current;
void start_secondary(void *unused);


struct paca_struct;
struct kimage;
extern struct paca_struct kexec_paca;
void kexec_copy_flush(struct kimage *image);


extern struct static_key hcall_tracepoint_key;
void __trace_hcall_entry(unsigned long opcode, unsigned long *args);
void __trace_hcall_exit(long opcode, long retval, unsigned long *retbuf);



long ucall_norets(unsigned long opcode, ...);
# 49 "./arch/powerpc/include/asm/asm-prototypes.h"
int64_t __opal_call(int64_t a0, int64_t a1, int64_t a2, int64_t a3,
      int64_t a4, int64_t a5, int64_t a6, int64_t a7,
      int64_t opcode, uint64_t msr);


int enter_vmx_usercopy(void);
int exit_vmx_usercopy(void);
int enter_vmx_ops(void);
void *exit_vmx_ops(void *dest);


long sys_swapcontext(struct ucontext *old_ctx,
      struct ucontext *new_ctx,
      long ctx_size);
# 72 "./arch/powerpc/include/asm/asm-prototypes.h"
long system_call_exception(long r3, long r4, long r5, long r6, long r7, long r8, unsigned long r0, struct pt_regs *regs);
__attribute__((__no_instrument_function__)) unsigned long syscall_exit_prepare(unsigned long r3, struct pt_regs *regs, long scv);
__attribute__((__no_instrument_function__)) unsigned long interrupt_exit_user_prepare(struct pt_regs *regs);
__attribute__((__no_instrument_function__)) unsigned long interrupt_exit_kernel_prepare(struct pt_regs *regs);

unsigned long syscall_exit_restart(unsigned long r3, struct pt_regs *regs);
unsigned long interrupt_exit_user_restart(struct pt_regs *regs);
unsigned long interrupt_exit_kernel_restart(struct pt_regs *regs);


long ppc_fadvise64_64(int fd, int advice, u32 offset_high, u32 offset_low,
        u32 len_high, u32 len_low);
long sys_switch_endian(void);


unsigned long __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) prom_init(unsigned long r3, unsigned long r4,
          unsigned long pp,
          unsigned long r6, unsigned long r7,
          unsigned long kbase);


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((__no_sanitize__("cfi"))) early_setup(unsigned long dt_ptr);
void early_setup_secondary(void);


extern u64 __bswapdi2(u64);
extern s64 __lshrdi3(s64, int);
extern s64 __ashldi3(s64, int);
extern s64 __ashrdi3(s64, int);
extern int __cmpdi2(s64, s64);
extern int __ucmpdi2(u64, u64);


void _mcount(void);
unsigned long prepare_ftrace_return(unsigned long parent, unsigned long ip,
      unsigned long sp);

void pnv_power9_force_smt4_catch(void);
void pnv_power9_force_smt4_release(void);


void tm_enable(void);
void tm_disable(void);
void tm_abort(uint8_t cause);

struct kvm_vcpu;
void _kvmppc_restore_tm_pr(struct kvm_vcpu *vcpu, u64 guest_msr);
void _kvmppc_save_tm_pr(struct kvm_vcpu *vcpu, u64 guest_msr);


extern s32 patch__call_flush_branch_caches1;
extern s32 patch__call_flush_branch_caches2;
extern s32 patch__call_flush_branch_caches3;
extern s32 patch__flush_count_cache_return;
extern s32 patch__flush_link_stack_return;
extern s32 patch__call_kvm_flush_link_stack;
extern s32 patch__call_kvm_flush_link_stack_p9;
extern s32 patch__memset_nocache, patch__memcpy_nocache;

extern long flush_branch_caches;
extern long kvm_flush_link_stack;


void kvmppc_save_tm_hv(struct kvm_vcpu *vcpu, u64 msr, bool preserve_nv);
void kvmppc_restore_tm_hv(struct kvm_vcpu *vcpu, u64 msr, bool preserve_nv);







void kvmhv_save_host_pmu(void);
void kvmhv_load_host_pmu(void);
void kvmhv_save_guest_pmu(struct kvm_vcpu *vcpu, bool pmu_in_use);
void kvmhv_load_guest_pmu(struct kvm_vcpu *vcpu);

void kvmppc_p9_enter_guest(struct kvm_vcpu *vcpu);

long kvmppc_h_set_dabr(struct kvm_vcpu *vcpu, unsigned long dabr);
long kvmppc_h_set_xdabr(struct kvm_vcpu *vcpu, unsigned long dabr,
   unsigned long dabrx);
# 45 "arch/powerpc/kernel/signal_32.c" 2

# 1 "arch/powerpc/kernel/ppc32.h" 1





# 1 "./arch/powerpc/include/generated/uapi/asm/siginfo.h" 1
# 7 "arch/powerpc/kernel/ppc32.h" 2








struct pt_regs32 {
 unsigned int gpr[32];
 unsigned int nip;
 unsigned int msr;
 unsigned int orig_gpr3;
 unsigned int ctr;
 unsigned int link;
 unsigned int xer;
 unsigned int ccr;
 unsigned int mq;
 unsigned int trap;
 unsigned int dar;
 unsigned int dsisr;
 unsigned int result;
};

struct sigcontext32 {
 unsigned int _unused[4];
 int signal;
 compat_uptr_t handler;
 unsigned int oldmask;
 compat_uptr_t regs;
};

struct mcontext32 {
 elf_gregset_t32 mc_gregs;
 elf_fpregset_t mc_fregs;
 unsigned int mc_pad[2];
 elf_vrregset_t32 mc_vregs __attribute__((__aligned__(16)));
 elf_vsrreghalf_t32 mc_vsregs __attribute__((__aligned__(16)));
};

struct ucontext32 {
 unsigned int uc_flags;
 unsigned int uc_link;
 compat_stack_t uc_stack;
 int uc_pad[7];
 compat_uptr_t uc_regs;
 compat_sigset_t uc_sigmask;

 int uc_maskext[30];
 int uc_pad2[3];
 struct mcontext32 uc_mcontext;
};
# 47 "arch/powerpc/kernel/signal_32.c" 2





# 1 "arch/powerpc/kernel/signal.h" 1
# 13 "arch/powerpc/kernel/signal.h"
void *get_sigframe(struct ksignal *ksig, struct task_struct *tsk,
     size_t frame_size, int is_32);

extern int handle_signal32(struct ksignal *ksig, sigset_t *oldset,
      struct task_struct *tsk);

extern int handle_rt_signal32(struct ksignal *ksig, sigset_t *oldset,
         struct task_struct *tsk);

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __get_user_sigset(sigset_t *dst, const sigset_t *src)
{
 do { extern void __compiletime_assert_286(void) ; if (!(!(sizeof(sigset_t) != sizeof(u64)))) __compiletime_assert_286(); } while (0);

 return ({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*((u64 *)&src->sig[0])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u64 *)&src->sig[0])) *__gu_addr = ((u64 *)&src->sig[0]); __typeof__(sizeof(*((u64 *)&src->sig[0]))) __gu_size = sizeof(*((u64 *)&src->sig[0])); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_287(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_287(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_288(void) ; if (!(!(1))) __compiletime_assert_288(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (dst->sig[0]) = (__typeof__(*((u64 *)&src->sig[0])))__gu_val; __gu_err; });
}




extern unsigned long copy_vsx_to_user(void *to,
          struct task_struct *task);
extern unsigned long copy_ckvsx_to_user(void *to,
            struct task_struct *task);
extern unsigned long copy_vsx_from_user(struct task_struct *task,
     void *from);
extern unsigned long copy_ckvsx_from_user(struct task_struct *task,
       void *from);
unsigned long copy_fpr_to_user(void *to, struct task_struct *task);
unsigned long copy_ckfpr_to_user(void *to, struct task_struct *task);
unsigned long copy_fpr_from_user(struct task_struct *task, void *from);
unsigned long copy_ckfpr_from_user(struct task_struct *task, void *from);
# 188 "arch/powerpc/kernel/signal.h"
extern int handle_rt_signal64(struct ksignal *ksig, sigset_t *set,
         struct task_struct *tsk);
# 204 "arch/powerpc/kernel/signal.h"
void signal_fault(struct task_struct *tsk, struct pt_regs *regs,
    const char *where, void *ptr);
# 53 "arch/powerpc/kernel/signal_32.c" 2
# 91 "arch/powerpc/kernel/signal_32.c"
static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
__unsafe_save_general_regs(struct pt_regs *regs, struct mcontext32 *frame)
{
 elf_greg_t64 *gregs = (elf_greg_t64 *)regs;
 int val, i;

 for (i = 0; i <= 43; i ++) {

  if (i == 39)
   val = 1;
  else
   val = gregs[i];

  do { __typeof__(*((&frame->mc_gregs[i]))) *__pus_addr = ((&frame->mc_gregs[i])); switch (sizeof(*(&frame->mc_gregs[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[i])))(val)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[i])))(val)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[i])))(val)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[i])))(val)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_289(void) ; if (!(!(1))) __compiletime_assert_289(); } while (0); } } while (0);
 }
 return 0;

failed:
 return 1;
}

static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int
__unsafe_restore_general_regs(struct pt_regs *regs, struct mcontext32 *sr)
{
 elf_greg_t64 *gregs = (elf_greg_t64 *)regs;
 int i;

 for (i = 0; i <= 43; i++) {
  if ((i == 33) || (i == 39))
   continue;
  do { __typeof__(__builtin_choose_expr(sizeof(*(&sr->mc_gregs[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&sr->mc_gregs[i])) *__gu_addr = (&sr->mc_gregs[i]); do { do { extern void __compiletime_assert_290(void) ; if (!(!(sizeof(*(&sr->mc_gregs[i])) > sizeof(__gu_val)))) __compiletime_assert_290(); } while (0); switch (sizeof(*(&sr->mc_gregs[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_291(void) ; if (!(!(1))) __compiletime_assert_291(); } while (0); } } while (0); (gregs[i]) = (__typeof__(*(&sr->mc_gregs[i])))__gu_val; } while (0);
 }
 return 0;

failed:
 return 1;
}
# 194 "arch/powerpc/kernel/signal_32.c"
struct sigframe {
 struct sigcontext32 sctx;
 struct mcontext32 mctx;

 struct sigcontext32 sctx_transact;
 struct mcontext32 mctx_transact;





 int abigap[56];
};
# 219 "arch/powerpc/kernel/signal_32.c"
struct rt_sigframe {

 compat_siginfo_t info;



 struct ucontext32 uc;

 struct ucontext32 uc_transact;





 int abigap[56];
};






static void prepare_save_user_regs(int ctx_has_vsx_region)
{

 flush_fp_to_thread(get_current());

 if (get_current()->thread.used_vr)
  flush_altivec_to_thread(get_current());
 if (cpu_has_feature(0x00000002UL))
  get_current()->thread.vrsave = ({unsigned long rval; asm volatile("mfspr %0," "0x100" : "=r" (rval)); rval;});


 if (get_current()->thread.used_vsr && ctx_has_vsx_region)
  flush_vsx_to_thread(get_current());





}

static int __unsafe_save_user_regs(struct pt_regs *regs, struct mcontext32 *frame,
       struct mcontext32 *tm_frame, int ctx_has_vsx_region)
{
 unsigned long msr = regs->msr;


 do { if (__unsafe_save_general_regs(regs, frame)) goto failed; } while (0);



 if (get_current()->thread.used_vr) {
  do { u8 *_dst = (u8 *)(&frame->mc_vregs); const u8 *_src = (const u8 *)(&get_current()->thread.vr_state); size_t _len = (33 * sizeof(vector128)); int _i; for (_i = 0; _i < (_len & ~(sizeof(u64) - 1)); _i += sizeof(u64)) do { __typeof__(*(((u64 *)(_dst + _i)))) *__pus_addr = (((u64 *)(_dst + _i))); switch (sizeof(*((u64 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_292(void) ; if (!(!(1))) __compiletime_assert_292(); } while (0); } } while (0); if (_len & 4) { do { __typeof__(*(((u32 *)(_dst + _i)))) *__pus_addr = (((u32 *)(_dst + _i))); switch (sizeof(*((u32 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_293(void) ; if (!(!(1))) __compiletime_assert_293(); } while (0); } } while (0); _i += 4; } if (_len & 2) { do { __typeof__(*(((u16 *)(_dst + _i)))) *__pus_addr = (((u16 *)(_dst + _i))); switch (sizeof(*((u16 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_294(void) ; if (!(!(1))) __compiletime_assert_294(); } while (0); } } while (0); _i += 2; } if (_len & 1) do { __typeof__(*(((u8 *)(_dst + _i)))) *__pus_addr = (((u8 *)(_dst + _i))); switch (sizeof(*((u8 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_295(void) ; if (!(!(1))) __compiletime_assert_295(); } while (0); } } while (0); } while (0);



  msr |= (1UL<<(25));
 }
# 286 "arch/powerpc/kernel/signal_32.c"
 do { __typeof__(*(((u32 *)&frame->mc_vregs[32]))) *__pus_addr = (((u32 *)&frame->mc_vregs[32])); switch (sizeof(*((u32 *)&frame->mc_vregs[32]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_296(void) ; if (!(!(1))) __compiletime_assert_296(); } while (0); } } while (0);


 do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&frame->mc_fregs; int i; for (i = 0; i < 33 - 1 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_297(void) ; if (!(!(1))) __compiletime_assert_297(); } while (0); } } while (0); do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_298(void) ; if (!(!(1))) __compiletime_assert_298(); } while (0); } } while (0); } while (0);





 msr &= ~(1UL<<(23));







 if (get_current()->thread.used_vsr && ctx_has_vsx_region) {
  do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&frame->mc_vsregs; int i; for (i = 0; i < 32 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_299(void) ; if (!(!(1))) __compiletime_assert_299(); } while (0); } } while (0);} while (0);
  msr |= (1UL<<(23));
 }
# 324 "arch/powerpc/kernel/signal_32.c"
 do { __typeof__(*((&frame->mc_gregs[33]))) *__pus_addr = ((&frame->mc_gregs[33])); switch (sizeof(*(&frame->mc_gregs[33]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_300(void) ; if (!(!(1))) __compiletime_assert_300(); } while (0); } } while (0);




 if (tm_frame)
  do { __typeof__(*((&tm_frame->mc_gregs[33]))) *__pus_addr = ((&tm_frame->mc_gregs[33])); switch (sizeof(*(&tm_frame->mc_gregs[33]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))(0)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))(0)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))(0)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))(0)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_301(void) ; if (!(!(1))) __compiletime_assert_301(); } while (0); } } while (0);

 return 0;

failed:
 return 1;
}
# 353 "arch/powerpc/kernel/signal_32.c"
static void prepare_save_tm_user_regs(void)
{
 ({ bool __ret_warn_on = false; do { if (__builtin_constant_p((tm_suspend_disabled))) { if (!(tm_suspend_disabled)) break; do { __label__ __label_warn_on; asm goto("1:	" "twi 31, 0, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/kernel/signal_32.c"), "i" (355), "i" ((1 << 0) | (((9) << 8))), "i" (sizeof(struct bug_entry)) : : __label_warn_on); do { ; __builtin_unreachable(); } while (0); __label_warn_on: break; } while (0); __ret_warn_on = true; } else { __label__ __label_warn_on; asm goto("1:	" "tdnei" " " " %4, 0" "\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l[__label_warn_on]) - . ;" " " ".previous" " " ".section __bug_table,\"aw\"\n" "2:\t.4byte 1b - 2b, %0 - 2b\n" "\t.short %1, %2\n" ".org 2b+%3\n" ".previous\n" : : "i" ("arch/powerpc/kernel/signal_32.c"), "i" (355), "i" ((1 << 0) | ((9) << 8)), "i" (sizeof(struct bug_entry)), "r" (tm_suspend_disabled) : : __label_warn_on); break; __label_warn_on: __ret_warn_on = true; } } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (cpu_has_feature(0x00000002UL))
  get_current()->thread.ckvrsave = ({unsigned long rval; asm volatile("mfspr %0," "0x100" : "=r" (rval)); rval;});
}

static int save_tm_user_regs_unsafe(struct pt_regs *regs, struct mcontext32 *frame,
        struct mcontext32 *tm_frame, unsigned long msr)
{

 do { if (__unsafe_save_general_regs(&get_current()->thread.ckpt_regs, frame)) goto failed; } while (0);
 do { if (__unsafe_save_general_regs(regs, tm_frame)) goto failed; } while (0);







 do { __typeof__(*((&tm_frame->mc_gregs[33]))) *__pus_addr = ((&tm_frame->mc_gregs[33])); switch (sizeof(*(&tm_frame->mc_gregs[33]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))((msr >> 32))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))((msr >> 32))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))((msr >> 32))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&tm_frame->mc_gregs[33])))((msr >> 32))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_302(void) ; if (!(!(1))) __compiletime_assert_302(); } while (0); } } while (0);


 if (get_current()->thread.used_vr) {
  do { u8 *_dst = (u8 *)(&frame->mc_vregs); const u8 *_src = (const u8 *)(&get_current()->thread.ckvr_state); size_t _len = (33 * sizeof(vector128)); int _i; for (_i = 0; _i < (_len & ~(sizeof(u64) - 1)); _i += sizeof(u64)) do { __typeof__(*(((u64 *)(_dst + _i)))) *__pus_addr = (((u64 *)(_dst + _i))); switch (sizeof(*((u64 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_303(void) ; if (!(!(1))) __compiletime_assert_303(); } while (0); } } while (0); if (_len & 4) { do { __typeof__(*(((u32 *)(_dst + _i)))) *__pus_addr = (((u32 *)(_dst + _i))); switch (sizeof(*((u32 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_304(void) ; if (!(!(1))) __compiletime_assert_304(); } while (0); } } while (0); _i += 4; } if (_len & 2) { do { __typeof__(*(((u16 *)(_dst + _i)))) *__pus_addr = (((u16 *)(_dst + _i))); switch (sizeof(*((u16 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_305(void) ; if (!(!(1))) __compiletime_assert_305(); } while (0); } } while (0); _i += 2; } if (_len & 1) do { __typeof__(*(((u8 *)(_dst + _i)))) *__pus_addr = (((u8 *)(_dst + _i))); switch (sizeof(*((u8 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_306(void) ; if (!(!(1))) __compiletime_assert_306(); } while (0); } } while (0); } while (0);

  if (msr & (1UL<<(25)))
   do { u8 *_dst = (u8 *)(&tm_frame->mc_vregs); const u8 *_src = (const u8 *)(&get_current()->thread.vr_state); size_t _len = (33 * sizeof(vector128)); int _i; for (_i = 0; _i < (_len & ~(sizeof(u64) - 1)); _i += sizeof(u64)) do { __typeof__(*(((u64 *)(_dst + _i)))) *__pus_addr = (((u64 *)(_dst + _i))); switch (sizeof(*((u64 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_307(void) ; if (!(!(1))) __compiletime_assert_307(); } while (0); } } while (0); if (_len & 4) { do { __typeof__(*(((u32 *)(_dst + _i)))) *__pus_addr = (((u32 *)(_dst + _i))); switch (sizeof(*((u32 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_308(void) ; if (!(!(1))) __compiletime_assert_308(); } while (0); } } while (0); _i += 4; } if (_len & 2) { do { __typeof__(*(((u16 *)(_dst + _i)))) *__pus_addr = (((u16 *)(_dst + _i))); switch (sizeof(*((u16 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_309(void) ; if (!(!(1))) __compiletime_assert_309(); } while (0); } } while (0); _i += 2; } if (_len & 1) do { __typeof__(*(((u8 *)(_dst + _i)))) *__pus_addr = (((u8 *)(_dst + _i))); switch (sizeof(*((u8 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_310(void) ; if (!(!(1))) __compiletime_assert_310(); } while (0); } } while (0); } while (0);


  else
   do { u8 *_dst = (u8 *)(&tm_frame->mc_vregs); const u8 *_src = (const u8 *)(&get_current()->thread.ckvr_state); size_t _len = (33 * sizeof(vector128)); int _i; for (_i = 0; _i < (_len & ~(sizeof(u64) - 1)); _i += sizeof(u64)) do { __typeof__(*(((u64 *)(_dst + _i)))) *__pus_addr = (((u64 *)(_dst + _i))); switch (sizeof(*((u64 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u64 *)(_dst + _i))))(*(u64 *)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_311(void) ; if (!(!(1))) __compiletime_assert_311(); } while (0); } } while (0); if (_len & 4) { do { __typeof__(*(((u32 *)(_dst + _i)))) *__pus_addr = (((u32 *)(_dst + _i))); switch (sizeof(*((u32 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)(_dst + _i))))(*(u32*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_312(void) ; if (!(!(1))) __compiletime_assert_312(); } while (0); } } while (0); _i += 4; } if (_len & 2) { do { __typeof__(*(((u16 *)(_dst + _i)))) *__pus_addr = (((u16 *)(_dst + _i))); switch (sizeof(*((u16 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u16 *)(_dst + _i))))(*(u16*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_313(void) ; if (!(!(1))) __compiletime_assert_313(); } while (0); } } while (0); _i += 2; } if (_len & 1) do { __typeof__(*(((u8 *)(_dst + _i)))) *__pus_addr = (((u8 *)(_dst + _i))); switch (sizeof(*((u8 *)(_dst + _i)))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u8 *)(_dst + _i))))(*(u8*)(_src + _i))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_314(void) ; if (!(!(1))) __compiletime_assert_314(); } while (0); } } while (0); } while (0);






  msr |= (1UL<<(25));
 }






 do { __typeof__(*(((u32 *)&frame->mc_vregs[32]))) *__pus_addr = (((u32 *)&frame->mc_vregs[32])); switch (sizeof(*((u32 *)&frame->mc_vregs[32]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_315(void) ; if (!(!(1))) __compiletime_assert_315(); } while (0); } } while (0);

 if (msr & (1UL<<(25)))
  do { __typeof__(*(((u32 *)&tm_frame->mc_vregs[32]))) *__pus_addr = (((u32 *)&tm_frame->mc_vregs[32])); switch (sizeof(*((u32 *)&tm_frame->mc_vregs[32]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.vrsave)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_316(void) ; if (!(!(1))) __compiletime_assert_316(); } while (0); } } while (0);

 else
  do { __typeof__(*(((u32 *)&tm_frame->mc_vregs[32]))) *__pus_addr = (((u32 *)&tm_frame->mc_vregs[32])); switch (sizeof(*((u32 *)&tm_frame->mc_vregs[32]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*((u32 *)&tm_frame->mc_vregs[32])))(get_current()->thread.ckvrsave)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_317(void) ; if (!(!(1))) __compiletime_assert_317(); } while (0); } } while (0);


 do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&frame->mc_fregs; int i; for (i = 0; i < 33 - 1 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_318(void) ; if (!(!(1))) __compiletime_assert_318(); } while (0); } } while (0); do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_319(void) ; if (!(!(1))) __compiletime_assert_319(); } while (0); } } while (0); } while (0);
 if (msr & (1UL<<(13)))
  do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&tm_frame->mc_fregs; int i; for (i = 0; i < 33 - 1 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_320(void) ; if (!(!(1))) __compiletime_assert_320(); } while (0); } } while (0); do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_321(void) ; if (!(!(1))) __compiletime_assert_321(); } while (0); } } while (0); } while (0);
 else
  do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&tm_frame->mc_fregs; int i; for (i = 0; i < 33 - 1 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][0])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_322(void) ; if (!(!(1))) __compiletime_assert_322(); } while (0); } } while (0); do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpscr)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_323(void) ; if (!(!(1))) __compiletime_assert_323(); } while (0); } } while (0); } while (0);







 if (get_current()->thread.used_vsr) {
  do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&frame->mc_vsregs; int i; for (i = 0; i < 32 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_324(void) ; if (!(!(1))) __compiletime_assert_324(); } while (0); } } while (0);} while (0);
  if (msr & (1UL<<(23)))
   do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&tm_frame->mc_vsregs; int i; for (i = 0; i < 32 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.fp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_325(void) ; if (!(!(1))) __compiletime_assert_325(); } while (0); } } while (0);} while (0);
  else
   do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&tm_frame->mc_vsregs; int i; for (i = 0; i < 32 ; i++) do { __typeof__(*((&buf[i]))) *__pus_addr = ((&buf[i])); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&buf[i])))(__t->thread.ckfp_state.fpr[i][1])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_326(void) ; if (!(!(1))) __compiletime_assert_326(); } while (0); } } while (0);} while (0);

  msr |= (1UL<<(23));
 }

 do { __typeof__(*((&frame->mc_gregs[33]))) *__pus_addr = ((&frame->mc_gregs[33])); switch (sizeof(*(&frame->mc_gregs[33]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->mc_gregs[33])))(msr)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_327(void) ; if (!(!(1))) __compiletime_assert_327(); } while (0); } } while (0);

 return 0;

failed:
 return 1;
}
# 457 "arch/powerpc/kernel/signal_32.c"
static long restore_user_regs(struct pt_regs *regs,
         struct mcontext32 *sr, int sig)
{
 unsigned int save_r2 = 0;
 unsigned long msr;

 int i;


 if (!user_read_access_begin(sr, sizeof(*sr)))
  return 1;




 if (!sig)
  save_r2 = (unsigned int)regs->gpr[2];
 do { if (__unsafe_restore_general_regs(regs, sr)) goto failed; } while (0);
 set_trap_norestart(regs);
 do { __typeof__(__builtin_choose_expr(sizeof(*(&sr->mc_gregs[33])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&sr->mc_gregs[33])) *__gu_addr = (&sr->mc_gregs[33]); do { do { extern void __compiletime_assert_328(void) ; if (!(!(sizeof(*(&sr->mc_gregs[33])) > sizeof(__gu_val)))) __compiletime_assert_328(); } while (0); switch (sizeof(*(&sr->mc_gregs[33]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_329(void) ; if (!(!(1))) __compiletime_assert_329(); } while (0); } } while (0); (msr) = (__typeof__(*(&sr->mc_gregs[33])))__gu_val; } while (0);
 if (!sig)
  regs->gpr[2] = (unsigned long) save_r2;


 if (sig)
  regs_set_return_msr(regs, (regs->msr & ~(1UL<<(0))) | (msr & (1UL<<(0))));






 regs_set_return_msr(regs, regs->msr & ~(1UL<<(25)));
 if (msr & (1UL<<(25))) {

  do { u8 *_dst = (u8 *)(&get_current()->thread.vr_state); const u8 *_src = (const u8 *)(&sr->mc_vregs); size_t _len = (sizeof(sr->mc_vregs)); int _i; for (_i = 0; _i < (_len & ~(sizeof(u64) - 1)); _i += sizeof(u64)) do { __typeof__(__builtin_choose_expr(sizeof(*((u64 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u64 *)(_src + _i))) *__gu_addr = ((u64 *)(_src + _i)); do { do { extern void __compiletime_assert_330(void) ; if (!(!(sizeof(*((u64 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_330(); } while (0); switch (sizeof(*((u64 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_331(void) ; if (!(!(1))) __compiletime_assert_331(); } while (0); } } while (0); (*(u64 *)(_dst + _i)) = (__typeof__(*((u64 *)(_src + _i))))__gu_val; } while (0); if (_len & 4) { do { __typeof__(__builtin_choose_expr(sizeof(*((u32 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u32 *)(_src + _i))) *__gu_addr = ((u32 *)(_src + _i)); do { do { extern void __compiletime_assert_332(void) ; if (!(!(sizeof(*((u32 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_332(); } while (0); switch (sizeof(*((u32 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_333(void) ; if (!(!(1))) __compiletime_assert_333(); } while (0); } } while (0); (*(u32 *)(_dst + _i)) = (__typeof__(*((u32 *)(_src + _i))))__gu_val; } while (0); _i += 4; } if (_len & 2) { do { __typeof__(__builtin_choose_expr(sizeof(*((u16 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u16 *)(_src + _i))) *__gu_addr = ((u16 *)(_src + _i)); do { do { extern void __compiletime_assert_334(void) ; if (!(!(sizeof(*((u16 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_334(); } while (0); switch (sizeof(*((u16 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_335(void) ; if (!(!(1))) __compiletime_assert_335(); } while (0); } } while (0); (*(u16 *)(_dst + _i)) = (__typeof__(*((u16 *)(_src + _i))))__gu_val; } while (0); _i += 2; } if (_len & 1) do { __typeof__(__builtin_choose_expr(sizeof(*((u8 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u8 *)(_src + _i))) *__gu_addr = ((u8 *)(_src + _i)); do { do { extern void __compiletime_assert_336(void) ; if (!(!(sizeof(*((u8 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_336(); } while (0); switch (sizeof(*((u8 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_337(void) ; if (!(!(1))) __compiletime_assert_337(); } while (0); } } while (0); (*(u8 *)(_dst + _i)) = (__typeof__(*((u8 *)(_src + _i))))__gu_val; } while (0); } while (0);

  get_current()->thread.used_vr = true;
 } else if (get_current()->thread.used_vr)
  memset(&get_current()->thread.vr_state, 0,
         33 * sizeof(vector128));


 do { __typeof__(__builtin_choose_expr(sizeof(*((u32 *)&sr->mc_vregs[32])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u32 *)&sr->mc_vregs[32])) *__gu_addr = ((u32 *)&sr->mc_vregs[32]); do { do { extern void __compiletime_assert_338(void) ; if (!(!(sizeof(*((u32 *)&sr->mc_vregs[32])) > sizeof(__gu_val)))) __compiletime_assert_338(); } while (0); switch (sizeof(*((u32 *)&sr->mc_vregs[32]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_339(void) ; if (!(!(1))) __compiletime_assert_339(); } while (0); } } while (0); (get_current()->thread.vrsave) = (__typeof__(*((u32 *)&sr->mc_vregs[32])))__gu_val; } while (0);
 if (cpu_has_feature(0x00000002UL))
  asm volatile("mtspr " "0x100" ",%0" : : "r" ((unsigned long)(get_current()->thread.vrsave)) : "memory");

 do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&sr->mc_fregs; int i; for (i = 0; i < 33 - 1; i++) do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_340(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_340(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_341(void) ; if (!(!(1))) __compiletime_assert_341(); } while (0); } } while (0); (__t->thread.fp_state.fpr[i][0]) = (__typeof__(*(&buf[i])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_342(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_342(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_343(void) ; if (!(!(1))) __compiletime_assert_343(); } while (0); } } while (0); (__t->thread.fp_state.fpscr) = (__typeof__(*(&buf[i])))__gu_val; } while (0); } while (0);






 regs_set_return_msr(regs, regs->msr & ~(1UL<<(23)));
 if (msr & (1UL<<(23))) {




  do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&sr->mc_vsregs; int i; for (i = 0; i < 32 ; i++) do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_344(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_344(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_345(void) ; if (!(!(1))) __compiletime_assert_345(); } while (0); } } while (0); (__t->thread.fp_state.fpr[i][1]) = (__typeof__(*(&buf[i])))__gu_val; } while (0); } while (0);
  get_current()->thread.used_vsr = true;
 } else if (get_current()->thread.used_vsr)
  for (i = 0; i < 32 ; i++)
   get_current()->thread.fp_state.fpr[i][1] = 0;





 regs_set_return_msr(regs, regs->msr & ~((1UL<<(13)) | (1UL<<(11)) | (1UL<<(8))));
# 545 "arch/powerpc/kernel/signal_32.c"
 prevent_current_read_from_user();
 return 0;

failed:
 prevent_current_read_from_user();
 return 1;
}







static long restore_tm_user_regs(struct pt_regs *regs,
     struct mcontext32 *sr,
     struct mcontext32 *tm_sr)
{
 unsigned long msr, msr_hi;
 int i;

 if (tm_suspend_disabled)
  return 1;







 if (!user_read_access_begin(sr, sizeof(*sr)))
  return 1;

 do { if (__unsafe_restore_general_regs(&get_current()->thread.ckpt_regs, sr)) goto failed; } while (0);
 do { __typeof__(__builtin_choose_expr(sizeof(*(&sr->mc_gregs[32])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&sr->mc_gregs[32])) *__gu_addr = (&sr->mc_gregs[32]); do { do { extern void __compiletime_assert_346(void) ; if (!(!(sizeof(*(&sr->mc_gregs[32])) > sizeof(__gu_val)))) __compiletime_assert_346(); } while (0); switch (sizeof(*(&sr->mc_gregs[32]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_347(void) ; if (!(!(1))) __compiletime_assert_347(); } while (0); } } while (0); (get_current()->thread.tm_tfhar) = (__typeof__(*(&sr->mc_gregs[32])))__gu_val; } while (0);
 do { __typeof__(__builtin_choose_expr(sizeof(*(&sr->mc_gregs[33])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&sr->mc_gregs[33])) *__gu_addr = (&sr->mc_gregs[33]); do { do { extern void __compiletime_assert_348(void) ; if (!(!(sizeof(*(&sr->mc_gregs[33])) > sizeof(__gu_val)))) __compiletime_assert_348(); } while (0); switch (sizeof(*(&sr->mc_gregs[33]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_349(void) ; if (!(!(1))) __compiletime_assert_349(); } while (0); } } while (0); (msr) = (__typeof__(*(&sr->mc_gregs[33])))__gu_val; } while (0);


 regs_set_return_msr(regs, (regs->msr & ~(1UL<<(0))) | (msr & (1UL<<(0))));

 regs_set_return_msr(regs, regs->msr & ~(1UL<<(25)));
 if (msr & (1UL<<(25))) {

  do { u8 *_dst = (u8 *)(&get_current()->thread.ckvr_state); const u8 *_src = (const u8 *)(&sr->mc_vregs); size_t _len = (sizeof(sr->mc_vregs)); int _i; for (_i = 0; _i < (_len & ~(sizeof(u64) - 1)); _i += sizeof(u64)) do { __typeof__(__builtin_choose_expr(sizeof(*((u64 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u64 *)(_src + _i))) *__gu_addr = ((u64 *)(_src + _i)); do { do { extern void __compiletime_assert_350(void) ; if (!(!(sizeof(*((u64 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_350(); } while (0); switch (sizeof(*((u64 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_351(void) ; if (!(!(1))) __compiletime_assert_351(); } while (0); } } while (0); (*(u64 *)(_dst + _i)) = (__typeof__(*((u64 *)(_src + _i))))__gu_val; } while (0); if (_len & 4) { do { __typeof__(__builtin_choose_expr(sizeof(*((u32 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u32 *)(_src + _i))) *__gu_addr = ((u32 *)(_src + _i)); do { do { extern void __compiletime_assert_352(void) ; if (!(!(sizeof(*((u32 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_352(); } while (0); switch (sizeof(*((u32 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_353(void) ; if (!(!(1))) __compiletime_assert_353(); } while (0); } } while (0); (*(u32 *)(_dst + _i)) = (__typeof__(*((u32 *)(_src + _i))))__gu_val; } while (0); _i += 4; } if (_len & 2) { do { __typeof__(__builtin_choose_expr(sizeof(*((u16 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u16 *)(_src + _i))) *__gu_addr = ((u16 *)(_src + _i)); do { do { extern void __compiletime_assert_354(void) ; if (!(!(sizeof(*((u16 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_354(); } while (0); switch (sizeof(*((u16 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_355(void) ; if (!(!(1))) __compiletime_assert_355(); } while (0); } } while (0); (*(u16 *)(_dst + _i)) = (__typeof__(*((u16 *)(_src + _i))))__gu_val; } while (0); _i += 2; } if (_len & 1) do { __typeof__(__builtin_choose_expr(sizeof(*((u8 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u8 *)(_src + _i))) *__gu_addr = ((u8 *)(_src + _i)); do { do { extern void __compiletime_assert_356(void) ; if (!(!(sizeof(*((u8 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_356(); } while (0); switch (sizeof(*((u8 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_357(void) ; if (!(!(1))) __compiletime_assert_357(); } while (0); } } while (0); (*(u8 *)(_dst + _i)) = (__typeof__(*((u8 *)(_src + _i))))__gu_val; } while (0); } while (0);

  get_current()->thread.used_vr = true;
 } else if (get_current()->thread.used_vr) {
  memset(&get_current()->thread.vr_state, 0,
         33 * sizeof(vector128));
  memset(&get_current()->thread.ckvr_state, 0,
         33 * sizeof(vector128));
 }


 do { __typeof__(__builtin_choose_expr(sizeof(*((u32 *)&sr->mc_vregs[32])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u32 *)&sr->mc_vregs[32])) *__gu_addr = ((u32 *)&sr->mc_vregs[32]); do { do { extern void __compiletime_assert_358(void) ; if (!(!(sizeof(*((u32 *)&sr->mc_vregs[32])) > sizeof(__gu_val)))) __compiletime_assert_358(); } while (0); switch (sizeof(*((u32 *)&sr->mc_vregs[32]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_359(void) ; if (!(!(1))) __compiletime_assert_359(); } while (0); } } while (0); (get_current()->thread.ckvrsave) = (__typeof__(*((u32 *)&sr->mc_vregs[32])))__gu_val; } while (0);

 if (cpu_has_feature(0x00000002UL))
  asm volatile("mtspr " "0x100" ",%0" : : "r" ((unsigned long)(get_current()->thread.ckvrsave)) : "memory");

 regs_set_return_msr(regs, regs->msr & ~((1UL<<(13)) | (1UL<<(11)) | (1UL<<(8))));

 do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&sr->mc_fregs; int i; for (i = 0; i < 33 - 1; i++) do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_360(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_360(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_361(void) ; if (!(!(1))) __compiletime_assert_361(); } while (0); } } while (0); (__t->thread.fp_state.fpr[i][0]) = (__typeof__(*(&buf[i])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_362(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_362(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_363(void) ; if (!(!(1))) __compiletime_assert_363(); } while (0); } } while (0); (__t->thread.fp_state.fpscr) = (__typeof__(*(&buf[i])))__gu_val; } while (0); } while (0);

 regs_set_return_msr(regs, regs->msr & ~(1UL<<(23)));
 if (msr & (1UL<<(23))) {




  do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&sr->mc_vsregs; int i; for (i = 0; i < 32 ; i++) do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_364(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_364(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_365(void) ; if (!(!(1))) __compiletime_assert_365(); } while (0); } } while (0); (__t->thread.ckfp_state.fpr[i][1]) = (__typeof__(*(&buf[i])))__gu_val; } while (0); } while (0);
  get_current()->thread.used_vsr = true;
 } else if (get_current()->thread.used_vsr)
  for (i = 0; i < 32 ; i++) {
   get_current()->thread.fp_state.fpr[i][1] = 0;
   get_current()->thread.ckfp_state.fpr[i][1] = 0;
  }

 prevent_current_read_from_user();

 if (!user_read_access_begin(tm_sr, sizeof(*tm_sr)))
  return 1;

 do { if (__unsafe_restore_general_regs(regs, tm_sr)) goto failed; } while (0);


 if (msr & (1UL<<(25)))
  do { u8 *_dst = (u8 *)(&get_current()->thread.vr_state); const u8 *_src = (const u8 *)(&tm_sr->mc_vregs); size_t _len = (sizeof(sr->mc_vregs)); int _i; for (_i = 0; _i < (_len & ~(sizeof(u64) - 1)); _i += sizeof(u64)) do { __typeof__(__builtin_choose_expr(sizeof(*((u64 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u64 *)(_src + _i))) *__gu_addr = ((u64 *)(_src + _i)); do { do { extern void __compiletime_assert_366(void) ; if (!(!(sizeof(*((u64 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_366(); } while (0); switch (sizeof(*((u64 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_367(void) ; if (!(!(1))) __compiletime_assert_367(); } while (0); } } while (0); (*(u64 *)(_dst + _i)) = (__typeof__(*((u64 *)(_src + _i))))__gu_val; } while (0); if (_len & 4) { do { __typeof__(__builtin_choose_expr(sizeof(*((u32 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u32 *)(_src + _i))) *__gu_addr = ((u32 *)(_src + _i)); do { do { extern void __compiletime_assert_368(void) ; if (!(!(sizeof(*((u32 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_368(); } while (0); switch (sizeof(*((u32 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_369(void) ; if (!(!(1))) __compiletime_assert_369(); } while (0); } } while (0); (*(u32 *)(_dst + _i)) = (__typeof__(*((u32 *)(_src + _i))))__gu_val; } while (0); _i += 4; } if (_len & 2) { do { __typeof__(__builtin_choose_expr(sizeof(*((u16 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u16 *)(_src + _i))) *__gu_addr = ((u16 *)(_src + _i)); do { do { extern void __compiletime_assert_370(void) ; if (!(!(sizeof(*((u16 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_370(); } while (0); switch (sizeof(*((u16 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_371(void) ; if (!(!(1))) __compiletime_assert_371(); } while (0); } } while (0); (*(u16 *)(_dst + _i)) = (__typeof__(*((u16 *)(_src + _i))))__gu_val; } while (0); _i += 2; } if (_len & 1) do { __typeof__(__builtin_choose_expr(sizeof(*((u8 *)(_src + _i))) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u8 *)(_src + _i))) *__gu_addr = ((u8 *)(_src + _i)); do { do { extern void __compiletime_assert_372(void) ; if (!(!(sizeof(*((u8 *)(_src + _i))) > sizeof(__gu_val)))) __compiletime_assert_372(); } while (0); switch (sizeof(*((u8 *)(_src + _i)))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_373(void) ; if (!(!(1))) __compiletime_assert_373(); } while (0); } } while (0); (*(u8 *)(_dst + _i)) = (__typeof__(*((u8 *)(_src + _i))))__gu_val; } while (0); } while (0);



 do { __typeof__(__builtin_choose_expr(sizeof(*((u32 *)&tm_sr->mc_vregs[32])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*((u32 *)&tm_sr->mc_vregs[32])) *__gu_addr = ((u32 *)&tm_sr->mc_vregs[32]); do { do { extern void __compiletime_assert_374(void) ; if (!(!(sizeof(*((u32 *)&tm_sr->mc_vregs[32])) > sizeof(__gu_val)))) __compiletime_assert_374(); } while (0); switch (sizeof(*((u32 *)&tm_sr->mc_vregs[32]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_375(void) ; if (!(!(1))) __compiletime_assert_375(); } while (0); } } while (0); (get_current()->thread.vrsave) = (__typeof__(*((u32 *)&tm_sr->mc_vregs[32])))__gu_val; } while (0);


 do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&tm_sr->mc_fregs; int i; for (i = 0; i < 33 - 1 ; i++) do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_376(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_376(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_377(void) ; if (!(!(1))) __compiletime_assert_377(); } while (0); } } while (0); (__t->thread.ckfp_state.fpr[i][0]) = (__typeof__(*(&buf[i])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_378(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_378(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_379(void) ; if (!(!(1))) __compiletime_assert_379(); } while (0); } } while (0); (__t->thread.ckfp_state.fpscr) = (__typeof__(*(&buf[i])))__gu_val; } while (0); } while (0);

 if (msr & (1UL<<(23))) {




  do { struct task_struct *__t = get_current(); u64 *buf = (u64 *)&tm_sr->mc_vsregs; int i; for (i = 0; i < 32 ; i++) do { __typeof__(__builtin_choose_expr(sizeof(*(&buf[i])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&buf[i])) *__gu_addr = (&buf[i]); do { do { extern void __compiletime_assert_380(void) ; if (!(!(sizeof(*(&buf[i])) > sizeof(__gu_val)))) __compiletime_assert_380(); } while (0); switch (sizeof(*(&buf[i]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_381(void) ; if (!(!(1))) __compiletime_assert_381(); } while (0); } } while (0); (__t->thread.fp_state.fpr[i][1]) = (__typeof__(*(&buf[i])))__gu_val; } while (0); } while (0);
  get_current()->thread.used_vsr = true;
 }


 do { __typeof__(__builtin_choose_expr(sizeof(*(&tm_sr->mc_gregs[33])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&tm_sr->mc_gregs[33])) *__gu_addr = (&tm_sr->mc_gregs[33]); do { do { extern void __compiletime_assert_382(void) ; if (!(!(sizeof(*(&tm_sr->mc_gregs[33])) > sizeof(__gu_val)))) __compiletime_assert_382(); } while (0); switch (sizeof(*(&tm_sr->mc_gregs[33]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_383(void) ; if (!(!(1))) __compiletime_assert_383(); } while (0); } } while (0); (msr_hi) = (__typeof__(*(&tm_sr->mc_gregs[33])))__gu_val; } while (0);
 msr_hi <<= 32;

 prevent_current_read_from_user();


 if ((((msr_hi) & ((1UL<<(34)) | (1UL<<(33)))) == ((1UL<<(34)) | (1UL<<(33)))))
  return 1;





 __asm__ __volatile__("": : :"memory");
# 675 "arch/powerpc/kernel/signal_32.c"
 regs_set_return_msr(regs, (regs->msr & ~((1UL<<(34)) | (1UL<<(33)))) | (msr_hi & ((1UL<<(34)) | (1UL<<(33)))));




 tm_enable();

 get_current()->thread.tm_texasr |= (1UL<<((63 - 36)));

 tm_recheckpoint(&get_current()->thread);


 msr_check_and_set(msr & ((1UL<<(13)) | (1UL<<(25))));
 if (msr & (1UL<<(13))) {
  load_fp_state(&get_current()->thread.fp_state);
  regs_set_return_msr(regs, regs->msr | ((1UL<<(13)) | get_current()->thread.fpexc_mode));
 }
 if (msr & (1UL<<(25))) {
  load_vr_state(&get_current()->thread.vr_state);
  regs_set_return_msr(regs, regs->msr | (1UL<<(25)));
 }

 __asm__ __volatile__("": : :"memory");

 return 0;

failed:
 prevent_current_read_from_user();
 return 1;
}
# 723 "arch/powerpc/kernel/signal_32.c"
int handle_rt_signal32(struct ksignal *ksig, sigset_t *oldset,
         struct task_struct *tsk)
{
 struct rt_sigframe *frame;
 struct mcontext32 *mctx;
 struct mcontext32 *tm_mctx = ((void *)0);
 unsigned long newsp = 0;
 unsigned long tramp;
 struct pt_regs *regs = tsk->thread.regs;

 unsigned long msr = regs->msr;


 frame = get_sigframe(ksig, tsk, sizeof(*frame), 1);
 mctx = &frame->uc.uc_mcontext;

 tm_mctx = &frame->uc_transact.uc_mcontext;

 if ((((msr) & ((1UL<<(34)) | (1UL<<(33)))) != 0))
  prepare_save_tm_user_regs();
 else
  prepare_save_user_regs(1);

 if (!user_access_begin(frame, sizeof(*frame)))
  goto badframe;


 do { __typeof__(*((&frame->uc.uc_flags))) *__pus_addr = ((&frame->uc.uc_flags)); switch (sizeof(*(&frame->uc.uc_flags))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_flags)))(0)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_flags)))(0)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_flags)))(0)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_flags)))(0)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_384(void) ; if (!(!(1))) __compiletime_assert_384(); } while (0); } } while (0);

 do { compat_stack_t *__uss = &frame->uc.uc_stack; struct task_struct *t = get_current(); do { __typeof__(*((&__uss->ss_sp))) *__pus_addr = ((&__uss->ss_sp)); switch (sizeof(*(&__uss->ss_sp))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_sp)))(ptr_to_compat((void *)t->sas_ss_sp))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_sp)))(ptr_to_compat((void *)t->sas_ss_sp))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_sp)))(ptr_to_compat((void *)t->sas_ss_sp))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_sp)))(ptr_to_compat((void *)t->sas_ss_sp))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_385(void) ; if (!(!(1))) __compiletime_assert_385(); } while (0); } } while (0); do { __typeof__(*((&__uss->ss_flags))) *__pus_addr = ((&__uss->ss_flags)); switch (sizeof(*(&__uss->ss_flags))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_flags)))(t->sas_ss_flags)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_flags)))(t->sas_ss_flags)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_flags)))(t->sas_ss_flags)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_flags)))(t->sas_ss_flags)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_386(void) ; if (!(!(1))) __compiletime_assert_386(); } while (0); } } while (0); do { __typeof__(*((&__uss->ss_size))) *__pus_addr = ((&__uss->ss_size)); switch (sizeof(*(&__uss->ss_size))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_size)))(t->sas_ss_size)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_size)))(t->sas_ss_size)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_size)))(t->sas_ss_size)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__uss->ss_size)))(t->sas_ss_size)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_387(void) ; if (!(!(1))) __compiletime_assert_387(); } while (0); } } while (0); } while (0);;



 do { __typeof__(*((&frame->uc.uc_regs))) *__pus_addr = ((&frame->uc.uc_regs)); switch (sizeof(*(&frame->uc.uc_regs))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_regs)))(ptr_to_compat(&frame->uc.uc_mcontext))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_regs)))(ptr_to_compat(&frame->uc.uc_mcontext))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_regs)))(ptr_to_compat(&frame->uc.uc_mcontext))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_regs)))(ptr_to_compat(&frame->uc.uc_mcontext))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_388(void) ; if (!(!(1))) __compiletime_assert_388(); } while (0); } } while (0);

 if ((((msr) & ((1UL<<(34)) | (1UL<<(33)))) != 0)) {

  do { __typeof__(*((&frame->uc.uc_link))) *__pus_addr = ((&frame->uc.uc_link)); switch (sizeof(*(&frame->uc.uc_link))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))((unsigned long)&frame->uc_transact)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))((unsigned long)&frame->uc_transact)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))((unsigned long)&frame->uc_transact)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))((unsigned long)&frame->uc_transact)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_389(void) ; if (!(!(1))) __compiletime_assert_389(); } while (0); } } while (0);

  do { __typeof__(*((&frame->uc_transact.uc_regs))) *__pus_addr = ((&frame->uc_transact.uc_regs)); switch (sizeof(*(&frame->uc_transact.uc_regs))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc_transact.uc_regs)))((unsigned long)tm_mctx)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc_transact.uc_regs)))((unsigned long)tm_mctx)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc_transact.uc_regs)))((unsigned long)tm_mctx)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc_transact.uc_regs)))((unsigned long)tm_mctx)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_390(void) ; if (!(!(1))) __compiletime_assert_390(); } while (0); } } while (0);


  do { if (save_tm_user_regs_unsafe(regs, mctx, tm_mctx, msr)) goto failed; } while (0);
 } else {
  do { __typeof__(*((&frame->uc.uc_link))) *__pus_addr = ((&frame->uc.uc_link)); switch (sizeof(*(&frame->uc.uc_link))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))(0)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))(0)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))(0)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&frame->uc.uc_link)))(0)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_391(void) ; if (!(!(1))) __compiletime_assert_391(); } while (0); } } while (0);
  do { if (__unsafe_save_user_regs(regs, mctx, tm_mctx, 1)) goto failed; } while (0);
 }


 if (tsk->mm->context.vdso) {
  tramp = ((unsigned long)(tsk->mm->context.vdso) + (0x03d0));
 } else {
  tramp = (unsigned long)mctx->mc_pad;
  do { __typeof__(*((&mctx->mc_pad[0]))) *__pus_addr = ((&mctx->mc_pad[0])); switch (sizeof(*(&mctx->mc_pad[0]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(172) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(172) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(172) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(172) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_392(void) ; if (!(!(1))) __compiletime_assert_392(); } while (0); } } while (0);
  do { __typeof__(*((&mctx->mc_pad[1]))) *__pus_addr = ((&mctx->mc_pad[1])); switch (sizeof(*(&mctx->mc_pad[1]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_393(void) ; if (!(!(1))) __compiletime_assert_393(); } while (0); } } while (0);
  asm("dcbst %y0; sync; icbi %y0; sync" :: "Z" (mctx->mc_pad[0]));
 }
 do { compat_sigset_t *__c = &frame->uc.uc_sigmask; const sigset_t *__s = oldset; switch ((64 / 64)) { case 4: do { __typeof__(*((&__c->sig[7]))) *__pus_addr = ((&__c->sig[7])); switch (sizeof(*(&__c->sig[7]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_394(void) ; if (!(!(1))) __compiletime_assert_394(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[6]))) *__pus_addr = ((&__c->sig[6])); switch (sizeof(*(&__c->sig[6]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_395(void) ; if (!(!(1))) __compiletime_assert_395(); } while (0); } } while (0); __attribute__((__fallthrough__)); case 3: do { __typeof__(*((&__c->sig[5]))) *__pus_addr = ((&__c->sig[5])); switch (sizeof(*(&__c->sig[5]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_396(void) ; if (!(!(1))) __compiletime_assert_396(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[4]))) *__pus_addr = ((&__c->sig[4])); switch (sizeof(*(&__c->sig[4]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_397(void) ; if (!(!(1))) __compiletime_assert_397(); } while (0); } } while (0); __attribute__((__fallthrough__)); case 2: do { __typeof__(*((&__c->sig[3]))) *__pus_addr = ((&__c->sig[3])); switch (sizeof(*(&__c->sig[3]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_398(void) ; if (!(!(1))) __compiletime_assert_398(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[2]))) *__pus_addr = ((&__c->sig[2])); switch (sizeof(*(&__c->sig[2]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_399(void) ; if (!(!(1))) __compiletime_assert_399(); } while (0); } } while (0); __attribute__((__fallthrough__)); case 1: do { __typeof__(*((&__c->sig[1]))) *__pus_addr = ((&__c->sig[1])); switch (sizeof(*(&__c->sig[1]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_400(void) ; if (!(!(1))) __compiletime_assert_400(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[0]))) *__pus_addr = ((&__c->sig[0])); switch (sizeof(*(&__c->sig[0]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_401(void) ; if (!(!(1))) __compiletime_assert_401(); } while (0); } } while (0); } } while (0);

 prevent_current_access_user();

 if (__copy_siginfo_to_user32(&frame->info, &ksig->info))
  goto badframe;

 regs->link = tramp;


 tsk->thread.fp_state.fpscr = 0;



 newsp = ((unsigned long)frame) - (64 + 16);
 if (({ __typeof__(*((u32 *)newsp)) *_pu_addr = ((u32 *)newsp); ((void)0, __access_ok((unsigned long)(_pu_addr), (sizeof(*((u32 *)newsp))))) ? ({ long __pu_err; __typeof__(*(_pu_addr)) *__pu_addr = (_pu_addr); __typeof__(*(_pu_addr)) __pu_val = (__typeof__(*(_pu_addr)))(regs->gpr[1]); __typeof__(sizeof(*(_pu_addr))) __pu_size = sizeof(*(_pu_addr)); might_fault(); do { __label__ __pu_failed; allow_write_to_user(__pu_addr, __pu_size); do { __typeof__(*(__pu_addr)) *__pus_addr = (__pu_addr); switch (__pu_size) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; default: do { extern void __compiletime_assert_402(void) ; if (!(!(1))) __compiletime_assert_402(); } while (0); } } while (0); prevent_write_to_user(__pu_addr, __pu_size); __pu_err = 0; break; __pu_failed: prevent_write_to_user(__pu_addr, __pu_size); __pu_err = -14; } while (0); __pu_err; }) : -14; }))
  goto badframe;


 regs->gpr[1] = newsp;
 regs->gpr[3] = ksig->sig;
 regs->gpr[4] = (unsigned long)&frame->info;
 regs->gpr[5] = (unsigned long)&frame->uc;
 regs->gpr[6] = (unsigned long)frame;
 regs_set_return_ip(regs, (unsigned long) ksig->ka.sa.sa_handler);

 regs_set_return_msr(regs, (regs->msr & ~(1UL<<(0))) | ((((1UL<<(12)) | (1UL<<(1)) | (1UL<<(5)) | (1UL<<(4)) | (1UL<<(60))) | (1UL<<(63))) & (1UL<<(0))));

 return 0;

failed:
 prevent_current_access_user();

badframe:
 signal_fault(tsk, regs, "handle_rt_signal32", frame);

 return 1;
}




int handle_signal32(struct ksignal *ksig, sigset_t *oldset,
  struct task_struct *tsk)
{
 struct sigcontext32 *sc;
 struct sigframe *frame;
 struct mcontext32 *mctx;
 struct mcontext32 *tm_mctx = ((void *)0);
 unsigned long newsp = 0;
 unsigned long tramp;
 struct pt_regs *regs = tsk->thread.regs;

 unsigned long msr = regs->msr;


 frame = get_sigframe(ksig, tsk, sizeof(*frame), 1);
 mctx = &frame->mctx;

 tm_mctx = &frame->mctx_transact;

 if ((((msr) & ((1UL<<(34)) | (1UL<<(33)))) != 0))
  prepare_save_tm_user_regs();
 else
  prepare_save_user_regs(1);

 if (!user_access_begin(frame, sizeof(*frame)))
  goto badframe;
 sc = (struct sigcontext32 *) &frame->sctx;




 do { __typeof__(*((&sc->handler))) *__pus_addr = ((&sc->handler)); switch (sizeof(*(&sc->handler))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->handler)))(ptr_to_compat(ksig->ka.sa.sa_handler))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->handler)))(ptr_to_compat(ksig->ka.sa.sa_handler))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->handler)))(ptr_to_compat(ksig->ka.sa.sa_handler))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->handler)))(ptr_to_compat(ksig->ka.sa.sa_handler))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_403(void) ; if (!(!(1))) __compiletime_assert_403(); } while (0); } } while (0);
 do { __typeof__(*((&sc->oldmask))) *__pus_addr = ((&sc->oldmask)); switch (sizeof(*(&sc->oldmask))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->oldmask)))(oldset->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->oldmask)))(oldset->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->oldmask)))(oldset->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->oldmask)))(oldset->sig[0])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_404(void) ; if (!(!(1))) __compiletime_assert_404(); } while (0); } } while (0);

 do { __typeof__(*((&sc->_unused[3]))) *__pus_addr = ((&sc->_unused[3])); switch (sizeof(*(&sc->_unused[3]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->_unused[3])))((oldset->sig[0] >> 32))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->_unused[3])))((oldset->sig[0] >> 32))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->_unused[3])))((oldset->sig[0] >> 32))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->_unused[3])))((oldset->sig[0] >> 32))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_405(void) ; if (!(!(1))) __compiletime_assert_405(); } while (0); } } while (0);



 do { __typeof__(*((&sc->regs))) *__pus_addr = ((&sc->regs)); switch (sizeof(*(&sc->regs))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_406(void) ; if (!(!(1))) __compiletime_assert_406(); } while (0); } } while (0);
 do { __typeof__(*((&sc->signal))) *__pus_addr = ((&sc->signal)); switch (sizeof(*(&sc->signal))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->signal)))(ksig->sig)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->signal)))(ksig->sig)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->signal)))(ksig->sig)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&sc->signal)))(ksig->sig)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_407(void) ; if (!(!(1))) __compiletime_assert_407(); } while (0); } } while (0);

 if ((((msr) & ((1UL<<(34)) | (1UL<<(33)))) != 0))
  do { if (save_tm_user_regs_unsafe(regs, mctx, tm_mctx, msr)) goto failed; } while (0);
 else
  do { if (__unsafe_save_user_regs(regs, mctx, tm_mctx, 1)) goto failed; } while (0);

 if (tsk->mm->context.vdso) {
  tramp = ((unsigned long)(tsk->mm->context.vdso) + (0x03c4));
 } else {
  tramp = (unsigned long)mctx->mc_pad;
  do { __typeof__(*((&mctx->mc_pad[0]))) *__pus_addr = ((&mctx->mc_pad[0])); switch (sizeof(*(&mctx->mc_pad[0]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(119) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(119) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(119) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[0])))((0x38000000 | (((0) & 0x1f) << 21) | (((0) & 0x1f) << 16) | ((uintptr_t)(119) & 0xffff)))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_408(void) ; if (!(!(1))) __compiletime_assert_408(); } while (0); } } while (0);
  do { __typeof__(*((&mctx->mc_pad[1]))) *__pus_addr = ((&mctx->mc_pad[1])); switch (sizeof(*(&mctx->mc_pad[1]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&mctx->mc_pad[1])))((0x44000002))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_409(void) ; if (!(!(1))) __compiletime_assert_409(); } while (0); } } while (0);
  asm("dcbst %y0; sync; icbi %y0; sync" :: "Z" (mctx->mc_pad[0]));
 }
 prevent_current_access_user();

 regs->link = tramp;


 tsk->thread.fp_state.fpscr = 0;



 newsp = ((unsigned long)frame) - 64;
 if (({ __typeof__(*((u32 *)newsp)) *_pu_addr = ((u32 *)newsp); ((void)0, __access_ok((unsigned long)(_pu_addr), (sizeof(*((u32 *)newsp))))) ? ({ long __pu_err; __typeof__(*(_pu_addr)) *__pu_addr = (_pu_addr); __typeof__(*(_pu_addr)) __pu_val = (__typeof__(*(_pu_addr)))(regs->gpr[1]); __typeof__(sizeof(*(_pu_addr))) __pu_size = sizeof(*(_pu_addr)); might_fault(); do { __label__ __pu_failed; allow_write_to_user(__pu_addr, __pu_size); do { __typeof__(*(__pu_addr)) *__pus_addr = (__pu_addr); switch (__pu_size) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" (__pu_val), "m""<>" (*__pus_addr) : : __pu_failed); break; default: do { extern void __compiletime_assert_410(void) ; if (!(!(1))) __compiletime_assert_410(); } while (0); } } while (0); prevent_write_to_user(__pu_addr, __pu_size); __pu_err = 0; break; __pu_failed: prevent_write_to_user(__pu_addr, __pu_size); __pu_err = -14; } while (0); __pu_err; }) : -14; }))
  goto badframe;

 regs->gpr[1] = newsp;
 regs->gpr[3] = ksig->sig;
 regs->gpr[4] = (unsigned long) sc;
 regs_set_return_ip(regs, (unsigned long) ksig->ka.sa.sa_handler);

 regs_set_return_msr(regs, (regs->msr & ~(1UL<<(0))) | ((((1UL<<(12)) | (1UL<<(1)) | (1UL<<(5)) | (1UL<<(4)) | (1UL<<(60))) | (1UL<<(63))) & (1UL<<(0))));

 return 0;

failed:
 prevent_current_access_user();

badframe:
 signal_fault(tsk, regs, "handle_signal32", frame);

 return 1;
}

static int do_setcontext(struct ucontext32 *ucp, struct pt_regs *regs, int sig)
{
 sigset_t set;
 struct mcontext32 *mcp;

 if (!user_read_access_begin(ucp, sizeof(*ucp)))
  return -14;

 do { const compat_sigset_t *__c = &ucp->uc_sigmask; compat_sigset_word hi, lo; sigset_t *__s = &set; switch ((64 / 64)) { case 4: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[7])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[7])) *__gu_addr = (&__c->sig[7]); do { do { extern void __compiletime_assert_411(void) ; if (!(!(sizeof(*(&__c->sig[7])) > sizeof(__gu_val)))) __compiletime_assert_411(); } while (0); switch (sizeof(*(&__c->sig[7]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_412(void) ; if (!(!(1))) __compiletime_assert_412(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[7])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[6])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[6])) *__gu_addr = (&__c->sig[6]); do { do { extern void __compiletime_assert_413(void) ; if (!(!(sizeof(*(&__c->sig[6])) > sizeof(__gu_val)))) __compiletime_assert_413(); } while (0); switch (sizeof(*(&__c->sig[6]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_414(void) ; if (!(!(1))) __compiletime_assert_414(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[6])))__gu_val; } while (0); __s->sig[3] = hi | (((long)lo) << 32); __attribute__((__fallthrough__)); case 3: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[5])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[5])) *__gu_addr = (&__c->sig[5]); do { do { extern void __compiletime_assert_415(void) ; if (!(!(sizeof(*(&__c->sig[5])) > sizeof(__gu_val)))) __compiletime_assert_415(); } while (0); switch (sizeof(*(&__c->sig[5]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_416(void) ; if (!(!(1))) __compiletime_assert_416(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[5])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[4])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[4])) *__gu_addr = (&__c->sig[4]); do { do { extern void __compiletime_assert_417(void) ; if (!(!(sizeof(*(&__c->sig[4])) > sizeof(__gu_val)))) __compiletime_assert_417(); } while (0); switch (sizeof(*(&__c->sig[4]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_418(void) ; if (!(!(1))) __compiletime_assert_418(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[4])))__gu_val; } while (0); __s->sig[2] = hi | (((long)lo) << 32); __attribute__((__fallthrough__)); case 2: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[3])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[3])) *__gu_addr = (&__c->sig[3]); do { do { extern void __compiletime_assert_419(void) ; if (!(!(sizeof(*(&__c->sig[3])) > sizeof(__gu_val)))) __compiletime_assert_419(); } while (0); switch (sizeof(*(&__c->sig[3]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_420(void) ; if (!(!(1))) __compiletime_assert_420(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[3])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[2])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[2])) *__gu_addr = (&__c->sig[2]); do { do { extern void __compiletime_assert_421(void) ; if (!(!(sizeof(*(&__c->sig[2])) > sizeof(__gu_val)))) __compiletime_assert_421(); } while (0); switch (sizeof(*(&__c->sig[2]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_422(void) ; if (!(!(1))) __compiletime_assert_422(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[2])))__gu_val; } while (0); __s->sig[1] = hi | (((long)lo) << 32); __attribute__((__fallthrough__)); case 1: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[1])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[1])) *__gu_addr = (&__c->sig[1]); do { do { extern void __compiletime_assert_423(void) ; if (!(!(sizeof(*(&__c->sig[1])) > sizeof(__gu_val)))) __compiletime_assert_423(); } while (0); switch (sizeof(*(&__c->sig[1]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_424(void) ; if (!(!(1))) __compiletime_assert_424(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[1])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[0])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[0])) *__gu_addr = (&__c->sig[0]); do { do { extern void __compiletime_assert_425(void) ; if (!(!(sizeof(*(&__c->sig[0])) > sizeof(__gu_val)))) __compiletime_assert_425(); } while (0); switch (sizeof(*(&__c->sig[0]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_426(void) ; if (!(!(1))) __compiletime_assert_426(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[0])))__gu_val; } while (0); __s->sig[0] = hi | (((long)lo) << 32); } } while (0);

 {
  u32 cmcp;

  do { __typeof__(__builtin_choose_expr(sizeof(*(&ucp->uc_regs)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&ucp->uc_regs)) *__gu_addr = (&ucp->uc_regs); do { do { extern void __compiletime_assert_427(void) ; if (!(!(sizeof(*(&ucp->uc_regs)) > sizeof(__gu_val)))) __compiletime_assert_427(); } while (0); switch (sizeof(*(&ucp->uc_regs))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_428(void) ; if (!(!(1))) __compiletime_assert_428(); } while (0); } } while (0); (cmcp) = (__typeof__(*(&ucp->uc_regs)))__gu_val; } while (0);
  mcp = (struct mcontext32 *)(u64)cmcp;
 }



 prevent_current_read_from_user();

 set_current_blocked(&set);
 if (restore_user_regs(regs, mcp, sig))
  return -14;

 return 0;

failed:
 prevent_current_read_from_user();
 return -14;
}


static int do_setcontext_tm(struct ucontext32 *ucp,
       struct ucontext32 *tm_ucp,
       struct pt_regs *regs)
{
 sigset_t set;
 struct mcontext32 *mcp;
 struct mcontext32 *tm_mcp;
 u32 cmcp;
 u32 tm_cmcp;

 if (!user_read_access_begin(ucp, sizeof(*ucp)))
  return -14;

 do { const compat_sigset_t *__c = &ucp->uc_sigmask; compat_sigset_word hi, lo; sigset_t *__s = &set; switch ((64 / 64)) { case 4: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[7])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[7])) *__gu_addr = (&__c->sig[7]); do { do { extern void __compiletime_assert_429(void) ; if (!(!(sizeof(*(&__c->sig[7])) > sizeof(__gu_val)))) __compiletime_assert_429(); } while (0); switch (sizeof(*(&__c->sig[7]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_430(void) ; if (!(!(1))) __compiletime_assert_430(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[7])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[6])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[6])) *__gu_addr = (&__c->sig[6]); do { do { extern void __compiletime_assert_431(void) ; if (!(!(sizeof(*(&__c->sig[6])) > sizeof(__gu_val)))) __compiletime_assert_431(); } while (0); switch (sizeof(*(&__c->sig[6]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_432(void) ; if (!(!(1))) __compiletime_assert_432(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[6])))__gu_val; } while (0); __s->sig[3] = hi | (((long)lo) << 32); __attribute__((__fallthrough__)); case 3: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[5])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[5])) *__gu_addr = (&__c->sig[5]); do { do { extern void __compiletime_assert_433(void) ; if (!(!(sizeof(*(&__c->sig[5])) > sizeof(__gu_val)))) __compiletime_assert_433(); } while (0); switch (sizeof(*(&__c->sig[5]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_434(void) ; if (!(!(1))) __compiletime_assert_434(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[5])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[4])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[4])) *__gu_addr = (&__c->sig[4]); do { do { extern void __compiletime_assert_435(void) ; if (!(!(sizeof(*(&__c->sig[4])) > sizeof(__gu_val)))) __compiletime_assert_435(); } while (0); switch (sizeof(*(&__c->sig[4]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_436(void) ; if (!(!(1))) __compiletime_assert_436(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[4])))__gu_val; } while (0); __s->sig[2] = hi | (((long)lo) << 32); __attribute__((__fallthrough__)); case 2: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[3])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[3])) *__gu_addr = (&__c->sig[3]); do { do { extern void __compiletime_assert_437(void) ; if (!(!(sizeof(*(&__c->sig[3])) > sizeof(__gu_val)))) __compiletime_assert_437(); } while (0); switch (sizeof(*(&__c->sig[3]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_438(void) ; if (!(!(1))) __compiletime_assert_438(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[3])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[2])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[2])) *__gu_addr = (&__c->sig[2]); do { do { extern void __compiletime_assert_439(void) ; if (!(!(sizeof(*(&__c->sig[2])) > sizeof(__gu_val)))) __compiletime_assert_439(); } while (0); switch (sizeof(*(&__c->sig[2]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_440(void) ; if (!(!(1))) __compiletime_assert_440(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[2])))__gu_val; } while (0); __s->sig[1] = hi | (((long)lo) << 32); __attribute__((__fallthrough__)); case 1: do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[1])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[1])) *__gu_addr = (&__c->sig[1]); do { do { extern void __compiletime_assert_441(void) ; if (!(!(sizeof(*(&__c->sig[1])) > sizeof(__gu_val)))) __compiletime_assert_441(); } while (0); switch (sizeof(*(&__c->sig[1]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_442(void) ; if (!(!(1))) __compiletime_assert_442(); } while (0); } } while (0); (lo) = (__typeof__(*(&__c->sig[1])))__gu_val; } while (0); do { __typeof__(__builtin_choose_expr(sizeof(*(&__c->sig[0])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&__c->sig[0])) *__gu_addr = (&__c->sig[0]); do { do { extern void __compiletime_assert_443(void) ; if (!(!(sizeof(*(&__c->sig[0])) > sizeof(__gu_val)))) __compiletime_assert_443(); } while (0); switch (sizeof(*(&__c->sig[0]))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_444(void) ; if (!(!(1))) __compiletime_assert_444(); } while (0); } } while (0); (hi) = (__typeof__(*(&__c->sig[0])))__gu_val; } while (0); __s->sig[0] = hi | (((long)lo) << 32); } } while (0);
 do { __typeof__(__builtin_choose_expr(sizeof(*(&ucp->uc_regs)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&ucp->uc_regs)) *__gu_addr = (&ucp->uc_regs); do { do { extern void __compiletime_assert_445(void) ; if (!(!(sizeof(*(&ucp->uc_regs)) > sizeof(__gu_val)))) __compiletime_assert_445(); } while (0); switch (sizeof(*(&ucp->uc_regs))) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_446(void) ; if (!(!(1))) __compiletime_assert_446(); } while (0); } } while (0); (cmcp) = (__typeof__(*(&ucp->uc_regs)))__gu_val; } while (0);

 prevent_current_read_from_user();

 if (({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(&tm_ucp->uc_regs)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&tm_ucp->uc_regs)) *__gu_addr = (&tm_ucp->uc_regs); __typeof__(sizeof(*(&tm_ucp->uc_regs))) __gu_size = sizeof(*(&tm_ucp->uc_regs)); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_447(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_447(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_448(void) ; if (!(!(1))) __compiletime_assert_448(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (tm_cmcp) = (__typeof__(*(&tm_ucp->uc_regs)))__gu_val; __gu_err; }))
  return -14;
 mcp = (struct mcontext32 *)(u64)cmcp;
 tm_mcp = (struct mcontext32 *)(u64)tm_cmcp;


 set_current_blocked(&set);
 if (restore_tm_user_regs(regs, mcp, tm_mcp))
  return -14;

 return 0;

failed:
 prevent_current_read_from_user();
 return -14;
}



; ; long compat_sys_swapcontext(struct ucontext32 * old_ctx, struct ucontext32 * new_ctx, int ctx_size) __attribute__((alias("__se_compat_sys_swapcontext"))); static struct error_injection_entry __attribute__((__used__)) __attribute__((__section__("_error_injection_whitelist"))) _eil_addr_compat_sys_swapcontext = { .addr = (unsigned long)compat_sys_swapcontext, .etype = EI_ETYPE_ERRNO, };; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __do_compat_sys_swapcontext(struct ucontext32 * old_ctx, struct ucontext32 * new_ctx, int ctx_size); long __se_compat_sys_swapcontext(__typeof(__builtin_choose_expr((__builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0ULL))), 0LL, 0L)) old_ctx, __typeof(__builtin_choose_expr((__builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0ULL))), 0LL, 0L)) new_ctx, __typeof(__builtin_choose_expr((__builtin_types_compatible_p(typeof(( int)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( int)0), typeof(0ULL))), 0LL, 0L)) ctx_size); long __se_compat_sys_swapcontext(__typeof(__builtin_choose_expr((__builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0ULL))), 0LL, 0L)) old_ctx, __typeof(__builtin_choose_expr((__builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0ULL))), 0LL, 0L)) new_ctx, __typeof(__builtin_choose_expr((__builtin_types_compatible_p(typeof(( int)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( int)0), typeof(0ULL))), 0LL, 0L)) ctx_size) { long ret = __do_compat_sys_swapcontext((( struct ucontext32 *)(unsigned long)(old_ctx)), (( struct ucontext32 *)(unsigned long)(new_ctx)), (( int)(unsigned long)(ctx_size))); (void)((int)(sizeof(struct { int:(-!!(!(__builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0ULL))) && sizeof(struct ucontext32 *) > sizeof(long))); }))), (void)((int)(sizeof(struct { int:(-!!(!(__builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( struct ucontext32 *)0), typeof(0ULL))) && sizeof(struct ucontext32 *) > sizeof(long))); }))), (void)((int)(sizeof(struct { int:(-!!(!(__builtin_types_compatible_p(typeof(( int)0), typeof(0LL)) || __builtin_types_compatible_p(typeof(( int)0), typeof(0ULL))) && sizeof(int) > sizeof(long))); }))); return ret; } ; static inline __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __do_compat_sys_swapcontext(struct ucontext32 * old_ctx, struct ucontext32 * new_ctx, int ctx_size)





{
 struct pt_regs *regs = ((struct pt_regs *)((unsigned long)task_stack_page(get_current()) + (1 << 14)) - 1);
 int ctx_has_vsx_region = 0;


 unsigned long new_msr = 0;

 if (new_ctx) {
  struct mcontext32 *mcp;
  u32 cmcp;






  if (({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(&new_ctx->uc_regs)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&new_ctx->uc_regs)) *__gu_addr = (&new_ctx->uc_regs); __typeof__(sizeof(*(&new_ctx->uc_regs))) __gu_size = sizeof(*(&new_ctx->uc_regs)); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_449(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_449(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_450(void) ; if (!(!(1))) __compiletime_assert_450(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (cmcp) = (__typeof__(*(&new_ctx->uc_regs)))__gu_val; __gu_err; }))
   return -14;
  mcp = (struct mcontext32 *)(u64)cmcp;
  if (({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(&mcp->mc_gregs[33])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&mcp->mc_gregs[33])) *__gu_addr = (&mcp->mc_gregs[33]); __typeof__(sizeof(*(&mcp->mc_gregs[33]))) __gu_size = sizeof(*(&mcp->mc_gregs[33])); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_451(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_451(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_452(void) ; if (!(!(1))) __compiletime_assert_452(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (new_msr) = (__typeof__(*(&mcp->mc_gregs[33])))__gu_val; __gu_err; }))
   return -14;
 }




 if (ctx_size < (sizeof(struct ucontext32) - sizeof(elf_vsrreghalf_t32)))
  return -22;




 if ((ctx_size < sizeof(struct ucontext32)) &&
     (new_msr & (1UL<<(23))))
  return -22;

 if (ctx_size >= sizeof(struct ucontext32))
  ctx_has_vsx_region = 1;







 if (old_ctx != ((void *)0)) {
  struct mcontext32 *mctx;
# 1038 "arch/powerpc/kernel/signal_32.c"
  mctx = (struct mcontext32 *)
   ((unsigned long) &old_ctx->uc_mcontext & ~0xfUL);
  prepare_save_user_regs(ctx_has_vsx_region);
  if (!user_write_access_begin(old_ctx, ctx_size))
   return -14;
  do { if (__unsafe_save_user_regs(regs, mctx, ((void *)0), ctx_has_vsx_region)) goto failed; } while (0);
  do { compat_sigset_t *__c = &old_ctx->uc_sigmask; const sigset_t *__s = &get_current()->blocked; switch ((64 / 64)) { case 4: do { __typeof__(*((&__c->sig[7]))) *__pus_addr = ((&__c->sig[7])); switch (sizeof(*(&__c->sig[7]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[7])))(__s->sig[3] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_453(void) ; if (!(!(1))) __compiletime_assert_453(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[6]))) *__pus_addr = ((&__c->sig[6])); switch (sizeof(*(&__c->sig[6]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[6])))(__s->sig[3])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_454(void) ; if (!(!(1))) __compiletime_assert_454(); } while (0); } } while (0); __attribute__((__fallthrough__)); case 3: do { __typeof__(*((&__c->sig[5]))) *__pus_addr = ((&__c->sig[5])); switch (sizeof(*(&__c->sig[5]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[5])))(__s->sig[2] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_455(void) ; if (!(!(1))) __compiletime_assert_455(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[4]))) *__pus_addr = ((&__c->sig[4])); switch (sizeof(*(&__c->sig[4]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[4])))(__s->sig[2])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_456(void) ; if (!(!(1))) __compiletime_assert_456(); } while (0); } } while (0); __attribute__((__fallthrough__)); case 2: do { __typeof__(*((&__c->sig[3]))) *__pus_addr = ((&__c->sig[3])); switch (sizeof(*(&__c->sig[3]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[3])))(__s->sig[1] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_457(void) ; if (!(!(1))) __compiletime_assert_457(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[2]))) *__pus_addr = ((&__c->sig[2])); switch (sizeof(*(&__c->sig[2]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[2])))(__s->sig[1])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_458(void) ; if (!(!(1))) __compiletime_assert_458(); } while (0); } } while (0); __attribute__((__fallthrough__)); case 1: do { __typeof__(*((&__c->sig[1]))) *__pus_addr = ((&__c->sig[1])); switch (sizeof(*(&__c->sig[1]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[1])))(__s->sig[0] >> 32)), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_459(void) ; if (!(!(1))) __compiletime_assert_459(); } while (0); } } while (0); do { __typeof__(*((&__c->sig[0]))) *__pus_addr = ((&__c->sig[0])); switch (sizeof(*(&__c->sig[0]))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&__c->sig[0])))(__s->sig[0])), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_460(void) ; if (!(!(1))) __compiletime_assert_460(); } while (0); } } while (0); } } while (0);
  do { __typeof__(*((&old_ctx->uc_regs))) *__pus_addr = ((&old_ctx->uc_regs)); switch (sizeof(*(&old_ctx->uc_regs))) { case 1: asm goto("1:	" "stb" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&old_ctx->uc_regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; case 2: asm goto("1:	" "sth" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&old_ctx->uc_regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; case 4: asm goto("1:	" "stw" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&old_ctx->uc_regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; case 8: asm goto("1:	" "std" "%U1%X1 %0,%1	# put_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : : "r" ((__typeof__(*(&old_ctx->uc_regs)))(ptr_to_compat(mctx))), "m""<>" (*__pus_addr) : : failed); break; default: do { extern void __compiletime_assert_461(void) ; if (!(!(1))) __compiletime_assert_461(); } while (0); } } while (0);
  prevent_current_write_to_user();
 }
 if (new_ctx == ((void *)0))
  return 0;
 if (!((void)0, __access_ok((unsigned long)(new_ctx), (ctx_size))) ||
     fault_in_pages_readable((u8 *)new_ctx, ctx_size))
  return -14;
# 1065 "arch/powerpc/kernel/signal_32.c"
 if (do_setcontext(new_ctx, regs, 0))
  do_exit(11);

 set_ti_thread_flag(((struct thread_info *)get_current()), 11);
 return 0;

failed:
 prevent_current_write_to_user();
 return -14;
}


 long compat_sys_rt_sigreturn(void); static struct error_injection_entry __attribute__((__used__)) __attribute__((__section__("_error_injection_whitelist"))) _eil_addr_compat_sys_rt_sigreturn = { .addr = (unsigned long)compat_sys_rt_sigreturn, .etype = EI_ETYPE_ERRNO, };; long compat_sys_rt_sigreturn(void)



{
 struct rt_sigframe *rt_sf;
 struct pt_regs *regs = ((struct pt_regs *)((unsigned long)task_stack_page(get_current()) + (1 << 14)) - 1);
 int tm_restore = 0;

 struct ucontext32 *uc_transact;
 unsigned long msr_hi;
 unsigned long tmp;


 get_current()->restart_block.fn = do_no_restart_syscall;

 rt_sf = (struct rt_sigframe *)
  (regs->gpr[1] + 64 + 16);
 if (!((void)0, __access_ok((unsigned long)(rt_sf), (sizeof(*rt_sf)))))
  goto bad;
# 1109 "arch/powerpc/kernel/signal_32.c"
 if ((((({unsigned long rval; asm volatile("mfmsr %0" : "=r" (rval) : : "memory"); rval;})) & ((1UL<<(34)) | (1UL<<(33)))) == (1UL<<(33))))
  tm_reclaim_current(0);

 if (({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(&rt_sf->uc.uc_link)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&rt_sf->uc.uc_link)) *__gu_addr = (&rt_sf->uc.uc_link); __typeof__(sizeof(*(&rt_sf->uc.uc_link))) __gu_size = sizeof(*(&rt_sf->uc.uc_link)); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_462(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_462(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_463(void) ; if (!(!(1))) __compiletime_assert_463(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (tmp) = (__typeof__(*(&rt_sf->uc.uc_link)))__gu_val; __gu_err; }))
  goto bad;
 uc_transact = (struct ucontext32 *)(uintptr_t)tmp;
 if (uc_transact) {
  u32 cmcp;
  struct mcontext32 *mcp;

  if (({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(&uc_transact->uc_regs)) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&uc_transact->uc_regs)) *__gu_addr = (&uc_transact->uc_regs); __typeof__(sizeof(*(&uc_transact->uc_regs))) __gu_size = sizeof(*(&uc_transact->uc_regs)); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_464(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_464(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_465(void) ; if (!(!(1))) __compiletime_assert_465(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (cmcp) = (__typeof__(*(&uc_transact->uc_regs)))__gu_val; __gu_err; }))
   return -14;
  mcp = (struct mcontext32 *)(u64)cmcp;


  if (({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(&mcp->mc_gregs[33])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&mcp->mc_gregs[33])) *__gu_addr = (&mcp->mc_gregs[33]); __typeof__(sizeof(*(&mcp->mc_gregs[33]))) __gu_size = sizeof(*(&mcp->mc_gregs[33])); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_466(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_466(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_467(void) ; if (!(!(1))) __compiletime_assert_467(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (msr_hi) = (__typeof__(*(&mcp->mc_gregs[33])))__gu_val; __gu_err; }))
   goto bad;

  if ((((msr_hi<<32) & ((1UL<<(34)) | (1UL<<(33)))) != 0)) {

   if (!cpu_has_feature(0x0000001000000000UL))
    goto bad;



   tm_restore = 1;
   if (do_setcontext_tm(&rt_sf->uc, uc_transact, regs))
    goto bad;
  }
 }
 if (!tm_restore) {





  regs_set_return_msr(regs, regs->msr & ~((1UL<<(34)) | (1UL<<(33))));
 }


 if (!tm_restore)
  if (do_setcontext(&rt_sf->uc, regs, 1))
   goto bad;
# 1161 "arch/powerpc/kernel/signal_32.c"
 if (compat_restore_altstack(&rt_sf->uc.uc_stack))
  goto bad;




 set_ti_thread_flag(((struct thread_info *)get_current()), 11);
 return 0;

 bad:
 signal_fault(get_current(), regs, "sys_rt_sigreturn", rt_sf);

 force_sig(11);
 return 0;
}
# 1280 "arch/powerpc/kernel/signal_32.c"
 long compat_sys_sigreturn(void); static struct error_injection_entry __attribute__((__used__)) __attribute__((__section__("_error_injection_whitelist"))) _eil_addr_compat_sys_sigreturn = { .addr = (unsigned long)compat_sys_sigreturn, .etype = EI_ETYPE_ERRNO, };; long compat_sys_sigreturn(void)



{
 struct pt_regs *regs = ((struct pt_regs *)((unsigned long)task_stack_page(get_current()) + (1 << 14)) - 1);
 struct sigframe *sf;
 struct sigcontext32 *sc;
 struct sigcontext32 sigctx;
 struct mcontext32 *sr;
 sigset_t set;
 struct mcontext32 *mcp;
 struct mcontext32 *tm_mcp = ((void *)0);
 unsigned long long msr_hi = 0;


 get_current()->restart_block.fn = do_no_restart_syscall;

 sf = (struct sigframe *)(regs->gpr[1] + 64);
 sc = &sf->sctx;
 if (copy_from_user(&sigctx, sc, sizeof(sigctx)))
  goto badframe;






 set.sig[0] = sigctx.oldmask + ((long)(sigctx._unused[3]) << 32);




 set_current_blocked(&set);

 mcp = (struct mcontext32 *)&sf->mctx;

 tm_mcp = (struct mcontext32 *)&sf->mctx_transact;
 if (({ long __gu_err; __typeof__(__builtin_choose_expr(sizeof(*(&tm_mcp->mc_gregs[33])) > sizeof(0UL), 0ULL, 0UL)) __gu_val; __typeof__(*(&tm_mcp->mc_gregs[33])) *__gu_addr = (&tm_mcp->mc_gregs[33]); __typeof__(sizeof(*(&tm_mcp->mc_gregs[33]))) __gu_size = sizeof(*(&tm_mcp->mc_gregs[33])); might_fault(); allow_read_from_user(__gu_addr, __gu_size); do { __label__ __gus_failed; do { do { extern void __compiletime_assert_468(void) ; if (!(!(__gu_size > sizeof(__gu_val)))) __compiletime_assert_468(); } while (0); switch (__gu_size) { case 1: asm goto("1:	""lbz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u8 *)__gu_addr) : : __gus_failed); break; case 2: asm goto("1:	""lhz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u16 *)__gu_addr) : : __gus_failed); break; case 4: asm goto("1:	""lwz""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u32 *)__gu_addr) : : __gus_failed); break; case 8: asm goto("1:	""ld""%U1%X1 %0, %1	# get_user\n" ".section __ex_table,\"a\";" " " ".balign 4;" " " ".long (1b) - . ;" " " ".long (%l2) - . ;" " " ".previous" " " : "=r" (__gu_val) : "m""<>" (*(u64 *)__gu_addr) : : __gus_failed); break; default: __gu_val = 0; do { extern void __compiletime_assert_469(void) ; if (!(!(1))) __compiletime_assert_469(); } while (0); } } while (0); __gu_err = 0; break; __gus_failed: __gu_val = 0; __gu_err = -14; } while (0); prevent_read_from_user(__gu_addr, __gu_size); (msr_hi) = (__typeof__(*(&tm_mcp->mc_gregs[33])))__gu_val; __gu_err; }))
  goto badframe;

 if ((((msr_hi<<32) & ((1UL<<(34)) | (1UL<<(33)))) != 0)) {
  if (!cpu_has_feature(0x0000001000000000UL))
   goto badframe;
  if (restore_tm_user_regs(regs, mcp, tm_mcp))
   goto badframe;
 } else {
  sr = (struct mcontext32 *)compat_ptr(sigctx.regs);
  if (restore_user_regs(regs, sr, 1)) {
   signal_fault(get_current(), regs, "sys_sigreturn", sr);

   force_sig(11);
   return 0;
  }
 }

 set_ti_thread_flag(((struct thread_info *)get_current()), 11);
 return 0;

badframe:
 signal_fault(get_current(), regs, "sys_sigreturn", sc);

 force_sig(11);
 return 0;
}
