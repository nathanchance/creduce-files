# 1 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 358 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "./../include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "./../include/linux/kconfig.h" 2
# 2 "<built-in>" 2
# 1 "./../include/linux/compiler_types.h" 1
# 59 "./../include/linux/compiler_types.h"
# 1 "../include/linux/compiler_attributes.h" 1
# 60 "./../include/linux/compiler_types.h" 2



# 1 "../include/linux/compiler-clang.h" 1
# 64 "./../include/linux/compiler_types.h" 2
# 85 "./../include/linux/compiler_types.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 3 "<built-in>" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 24 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
# 1 "../include/linux/delay.h" 1
# 22 "../include/linux/delay.h"
# 1 "../include/linux/kernel.h" 1





# 1 "/home/nathan/cbl/git/tc-build/build/llvm/stage1/lib/clang/10.0.0/include/stdarg.h" 1 3
# 14 "/home/nathan/cbl/git/tc-build/build/llvm/stage1/lib/clang/10.0.0/include/stdarg.h" 3
typedef __builtin_va_list va_list;
# 32 "/home/nathan/cbl/git/tc-build/build/llvm/stage1/lib/clang/10.0.0/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 7 "../include/linux/kernel.h" 2
# 1 "../include/linux/limits.h" 1




# 1 "../include/uapi/linux/limits.h" 1
# 6 "../include/linux/limits.h" 2
# 1 "../include/linux/types.h" 1





# 1 "../include/uapi/linux/types.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 1 "../include/uapi/asm-generic/types.h" 1






# 1 "../include/asm-generic/int-ll64.h" 1
# 11 "../include/asm-generic/int-ll64.h"
# 1 "../include/uapi/asm-generic/int-ll64.h" 1
# 12 "../include/uapi/asm-generic/int-ll64.h"
# 1 "../arch/arm64/include/uapi/asm/bitsperlong.h" 1
# 22 "../arch/arm64/include/uapi/asm/bitsperlong.h"
# 1 "../include/asm-generic/bitsperlong.h" 1




# 1 "../include/uapi/asm-generic/bitsperlong.h" 1
# 6 "../include/asm-generic/bitsperlong.h" 2
# 23 "../arch/arm64/include/uapi/asm/bitsperlong.h" 2
# 13 "../include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "../include/asm-generic/int-ll64.h" 2




typedef __s8 s8;
typedef __u8 u8;
typedef __s16 s16;
typedef __u16 u16;
typedef __s32 s32;
typedef __u32 u32;
typedef __s64 s64;
typedef __u64 u64;
# 8 "../include/uapi/asm-generic/types.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/types.h" 2
# 6 "../include/uapi/linux/types.h" 2








# 1 "../include/uapi/linux/posix_types.h" 1




# 1 "../include/linux/stddef.h" 1




# 1 "../include/uapi/linux/stddef.h" 1
# 6 "../include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "../include/uapi/linux/posix_types.h" 2
# 25 "../include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;


# 1 "../arch/arm64/include/uapi/asm/posix_types.h" 1




typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;



# 1 "../include/uapi/asm-generic/posix_types.h" 1
# 15 "../include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 59 "../include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_old_dev_t;
# 72 "../include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 10 "../arch/arm64/include/uapi/asm/posix_types.h" 2
# 37 "../include/uapi/linux/posix_types.h" 2
# 15 "../include/uapi/linux/types.h" 2
# 29 "../include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 52 "../include/uapi/linux/types.h"
typedef unsigned __poll_t;
# 7 "../include/linux/types.h" 2






typedef u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;



typedef __kernel_loff_t loff_t;
# 55 "../include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_time_t time_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef u8 u_int8_t;
typedef s8 int8_t;
typedef u16 u_int16_t;
typedef s16 int16_t;
typedef u32 u_int32_t;
typedef s32 int32_t;



typedef u8 uint8_t;
typedef u16 uint16_t;
typedef u32 uint32_t;


typedef u64 uint64_t;
typedef u64 u_int64_t;
typedef s64 int64_t;
# 130 "../include/linux/types.h"
typedef u64 sector_t;
typedef u64 blkcnt_t;
# 148 "../include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned int gfp_t;
typedef unsigned int slab_flags_t;
typedef unsigned int fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;


typedef struct {
 s64 counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 219 "../include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);
# 7 "../include/linux/limits.h" 2
# 8 "../include/linux/kernel.h" 2
# 1 "../include/linux/linkage.h" 1





# 1 "../include/linux/stringify.h" 1
# 7 "../include/linux/linkage.h" 2
# 1 "../include/linux/export.h" 1
# 15 "../include/linux/export.h"
extern struct module __this_module;
# 44 "../include/linux/export.h"
# 1 "../include/linux/compiler.h" 1
# 196 "../include/linux/compiler.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void __read_once_size(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("" : : : "memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("" : : : "memory"); } });
}
# 214 "../include/linux/compiler.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void __read_once_size_nocheck(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("" : : : "memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("" : : : "memory"); } });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
 case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
 case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
 case 8: *(volatile __u64 *)p = *(__u64 *)res; break;
 default:
  __asm__ __volatile__("" : : : "memory");
  __builtin_memcpy((void *)p, (const void *)res, size);
  __asm__ __volatile__("" : : : "memory");
 }
}
# 256 "../include/linux/compiler.h"
# 1 "../arch/arm64/include/asm/barrier.h" 1
# 12 "../arch/arm64/include/asm/barrier.h"
# 1 "../include/linux/kasan-checks.h" 1
# 16 "../include/linux/kasan-checks.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 34 "../include/linux/kasan-checks.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_read(const volatile void *p, unsigned int size)
{
 return true;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_check_write(const volatile void *p, unsigned int size)
{
 return true;
}
# 13 "../arch/arm64/include/asm/barrier.h" 2
# 44 "../arch/arm64/include/asm/barrier.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long array_index_mask_nospec(unsigned long idx,
          unsigned long sz)
{
 unsigned long mask;

 asm volatile(
 "	cmp	%1, %2\n"
 "	sbc	%0, xzr, xzr\n"
 : "=r" (mask)
 : "r" (idx), "Ir" (sz)
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return mask;
}
# 156 "../arch/arm64/include/asm/barrier.h"
# 1 "../include/asm-generic/barrier.h" 1
# 16 "../include/asm-generic/barrier.h"
# 1 "../include/linux/compiler.h" 1
# 17 "../include/asm-generic/barrier.h" 2
# 157 "../arch/arm64/include/asm/barrier.h" 2
# 257 "../include/linux/compiler.h" 2
# 277 "../include/linux/compiler.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 308 "../include/linux/compiler.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *offset_to_ptr(const int *off)
{
 return (void *)((unsigned long)off + *off);
}
# 45 "../include/linux/export.h" 2
# 71 "../include/linux/export.h"
struct kernel_symbol {
 int value_offset;
 int name_offset;
 int namespace_offset;
};
# 8 "../include/linux/linkage.h" 2
# 1 "../arch/arm64/include/asm/linkage.h" 1
# 9 "../include/linux/linkage.h" 2
# 9 "../include/linux/kernel.h" 2



# 1 "../include/linux/bitops.h" 1



# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 5 "../include/linux/bitops.h" 2
# 1 "../include/linux/bits.h" 1




# 1 "../include/linux/const.h" 1



# 1 "../include/uapi/linux/const.h" 1
# 5 "../include/linux/const.h" 2
# 6 "../include/linux/bits.h" 2
# 6 "../include/linux/bitops.h" 2




extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);






# 1 "../arch/arm64/include/asm/bitops.h" 1
# 14 "../arch/arm64/include/asm/bitops.h"
# 1 "../include/asm-generic/bitops/builtin-__ffs.h" 1
# 11 "../include/asm-generic/bitops/builtin-__ffs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __ffs(unsigned long word)
{
 return __builtin_ctzl(word);
}
# 15 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-ffs.h" 1
# 13 "../include/asm-generic/bitops/builtin-ffs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int ffs(int x)
{
 return __builtin_ffs(x);
}
# 16 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-__fls.h" 1
# 11 "../include/asm-generic/bitops/builtin-__fls.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __fls(unsigned long word)
{
 return (sizeof(word) * 8) - 1 - __builtin_clzl(word);
}
# 17 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/builtin-fls.h" 1
# 12 "../include/asm-generic/bitops/builtin-fls.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls(unsigned int x)
{
 return x ? sizeof(x) * 8 - __builtin_clz(x) : 0;
}
# 18 "../arch/arm64/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/ffz.h" 1
# 20 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/fls64.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/fls64.h" 2
# 27 "../include/asm-generic/bitops/fls64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int fls64(__u64 x)
{
 if (x == 0)
  return 0;
 return __fls(x) + 1;
}
# 21 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/find.h" 1
# 15 "../include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(const unsigned long *addr, unsigned long
  size, unsigned long offset);
# 30 "../include/asm-generic/bitops/find.h"
extern unsigned long find_next_and_bit(const unsigned long *addr1,
  const unsigned long *addr2, unsigned long size,
  unsigned long offset);
# 45 "../include/asm-generic/bitops/find.h"
extern unsigned long find_next_zero_bit(const unsigned long *addr, unsigned
  long size, unsigned long offset);
# 22 "../arch/arm64/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/sched.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 7 "../include/asm-generic/bitops/sched.h" 2






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "../include/asm-generic/bitops/sched.h"
}
# 24 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/hweight.h" 1




# 1 "../include/asm-generic/bitops/arch_hweight.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/arch_hweight.h" 2

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight32(unsigned int w)
{
 return __sw_hweight32(w);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight16(unsigned int w)
{
 return __sw_hweight16(w);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __arch_hweight8(unsigned int w)
{
 return __sw_hweight8(w);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __arch_hweight64(__u64 w)
{
 return __sw_hweight64(w);
}
# 6 "../include/asm-generic/bitops/hweight.h" 2
# 1 "../include/asm-generic/bitops/const_hweight.h" 1
# 7 "../include/asm-generic/bitops/hweight.h" 2
# 25 "../arch/arm64/include/asm/bitops.h" 2

# 1 "../include/asm-generic/bitops/atomic.h" 1




# 1 "../include/linux/atomic.h" 1






# 1 "../arch/arm64/include/asm/atomic.h" 1
# 16 "../arch/arm64/include/asm/atomic.h"
# 1 "../arch/arm64/include/asm/cmpxchg.h" 1
# 10 "../arch/arm64/include/asm/cmpxchg.h"
# 1 "../include/linux/build_bug.h" 1
# 11 "../arch/arm64/include/asm/cmpxchg.h" 2



# 1 "../arch/arm64/include/asm/lse.h" 1




# 1 "../arch/arm64/include/asm/atomic_ll_sc.h" 1
# 111 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_add(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_add_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "add" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "add" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_add_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "add" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "add" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_sub(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return_relaxed(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return_acquire(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_sub_return_release(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "sub" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%w0, %2\n" "	" "sub" "	%w0, %w0, %w3\n" "	st" "l" "xr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_sub_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "sub" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "sub" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; }
# 122 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_and(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "and" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "and" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_and_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "and" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "and" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_or(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "or" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "orr" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_or_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "or" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "orr" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_xor(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "xor" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "eor" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_xor_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "xor" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "eor" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "K" "r" (i) : "memory"); return result; }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic_andnot(int i, atomic_t *v) { unsigned long tmp; int result; asm volatile("// atomic_" "andnot" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%w0, %2\n" "	" "bic" "	%w0, %w0, %w3\n" "	stxr	%w1, %w0, %2\n" "	cbnz	%w1, 1b\n" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot_relaxed(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot_acquire(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ll_sc_atomic_fetch_andnot_release(int i, atomic_t *v) { unsigned long tmp; int val, result; asm volatile("// atomic_fetch_" "andnot" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%w0, %3\n" "	" "bic" "	%w1, %w0, %w4\n" "	st" "l" "xr	%w2, %w1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }
# 210 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_add(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return_relaxed(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return_acquire(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_add_return_release(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "add" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "add" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_add_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "add" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "add" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "I" "r" (i) : "memory"); return result; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_sub(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return_relaxed(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_relaxed" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return_acquire(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_acquire" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_sub_return_release(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "sub" "_return" "_release" "\n" "	prfm	pstl1strm, %2\n" "1:	ld" "" "xr	%0, %2\n" "	" "sub" "	%0, %0, %3\n" "	st" "l" "xr	%w1, %0, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_sub_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "sub" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "sub" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "J" "r" (i) : "memory"); return result; }
# 221 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_and(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "and" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "and" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_and_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "and" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "and" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_or(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "or" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "orr" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_or_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "or" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "orr" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_xor(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "xor" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "eor" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_xor_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "xor" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "eor" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "L" "r" (i) : "memory"); return result; }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ll_sc_atomic64_andnot(s64 i, atomic64_t *v) { s64 result; unsigned long tmp; asm volatile("// atomic64_" "andnot" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxr	%0, %2\n" "	" "bic" "	%0, %0, %3\n" "	stxr	%w1, %0, %2\n" "	cbnz	%w1, 1b" : "=&r" (result), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i)); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "dmb ish" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_relaxed" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : ); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_acquire" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "a" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc_atomic64_fetch_andnot_release(s64 i, atomic64_t *v) { s64 result, val; unsigned long tmp; asm volatile("// atomic64_fetch_" "andnot" "_release" "\n" "	prfm	pstl1strm, %3\n" "1:	ld" "" "xr	%0, %3\n" "	" "bic" "	%1, %0, %4\n" "	st" "l" "xr	%w2, %1, %3\n" "	cbnz	%w2, 1b\n" "	" "" : "=&r" (result), "=&r" (val), "=&r" (tmp), "+Q" (v->counter) : "" "r" (i) : "memory"); return result; }






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
__ll_sc_atomic64_dec_if_positive(atomic64_t *v)
{
 s64 result;
 unsigned long tmp;

 asm volatile("// atomic64_dec_if_positive\n"
 "	prfm	pstl1strm, %2\n""1:	ldxr	%0, %2\n""	subs	%0, %0, #1\n""	b.lt	2f\n""	stlxr	%w1, %0, %2\n""	cbnz	%w1, 1b\n""	dmb	ish\n""2:"
# 252 "../arch/arm64/include/asm/atomic_ll_sc.h"
 : "=&r" (result), "=&r" (tmp), "+Q" (v->counter)
 :
 : "cc", "memory");

 return result;
}
# 299 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : ); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_acq_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_acq_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_acq_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_acq_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "a" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_rel_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_rel_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_rel_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_rel_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __ll_sc__cmpxchg_case_mb_8(volatile void *ptr, unsigned long old, u8 new) { unsigned long tmp; u8 oldval; if (8 < 32) old = (u8)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "b" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "b" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u8 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __ll_sc__cmpxchg_case_mb_16(volatile void *ptr, unsigned long old, u16 new) { unsigned long tmp; u16 oldval; if (16 < 32) old = (u16)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "h" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "h" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u16 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __ll_sc__cmpxchg_case_mb_32(volatile void *ptr, unsigned long old, u32 new) { unsigned long tmp; u32 oldval; if (32 < 32) old = (u32)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "w" "[oldval], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[oldval], %" "w" "[old]\n" "	cbnz	%" "w" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "w" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u32 *)ptr) : [old] "K" "r" (old), [new] "r" (new) : "memory"); return oldval; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __ll_sc__cmpxchg_case_mb_64(volatile void *ptr, unsigned long old, u64 new) { unsigned long tmp; u64 oldval; if (64 < 32) old = (u64)old; asm volatile( "	prfm	pstl1strm, %[v]\n" "1:	ld" "" "xr" "" "\t%" "" "[oldval], %[v]\n" "	eor	%" "" "[tmp], %" "" "[oldval], %" "" "[old]\n" "	cbnz	%" "" "[tmp], 2f\n" "	st" "l" "xr" "" "\t%w[tmp], %" "" "[new], %[v]\n" "	cbnz	%w[tmp], 1b\n" "	" "dmb ish" "\n" "2:" : [tmp] "=&r" (tmp), [oldval] "=&r" (oldval), [v] "+Q" (*(u64 *)ptr) : [old] "L" "r" (old), [new] "r" (new) : "memory"); return oldval; }
# 347 "../arch/arm64/include/asm/atomic_ll_sc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc__cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "" "\n" "2:" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : ); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __ll_sc__cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { unsigned long tmp, ret; asm volatile("// __cmpxchg_double" "_mb" "\n" "	prfm	pstl1strm, %2\n" "1:	ldxp	%0, %1, %2\n" "	eor	%0, %0, %3\n" "	eor	%1, %1, %4\n" "	orr	%1, %0, %1\n" "	cbnz	%1, 2f\n" "	st" "l" "xp	%w0, %5, %6, %2\n" "	cbnz	%w0, 1b\n" "	" "dmb ish" "\n" "2:" : "=&r" (tmp), "=&r" (ret), "+Q" (*(unsigned long *)ptr) : "r" (old1), "r" (old2), "r" (new1), "r" (new2) : "memory"); return ret; }
# 6 "../arch/arm64/include/asm/lse.h" 2
# 41 "../arch/arm64/include/asm/lse.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_uses_lse_atomics(void) { return false; }
# 15 "../arch/arm64/include/asm/cmpxchg.h" 2
# 45 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : ); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_acq_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "b" "\t%" "w" "0, %2\n" "	st" "" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_acq_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "h" "\t%" "w" "0, %2\n" "	st" "" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_acq_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "w" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_acq_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "a" "xr" "" "\t%" "" "0, %2\n" "	st" "" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_rel_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_rel_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_rel_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_rel_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __xchg_case_mb_8(u8 x, volatile void *ptr) { u8 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "b" "\t%" "w" "0, %2\n" "	st" "l" "xr" "b" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u8 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __xchg_case_mb_16(u16 x, volatile void *ptr) { u16 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "h" "\t%" "w" "0, %2\n" "	st" "l" "xr" "h" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u16 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __xchg_case_mb_32(u32 x, volatile void *ptr) { u32 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "w" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "w" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u32 *)ptr) : "r" (x) : "memory"); return ret; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __xchg_case_mb_64(u64 x, volatile void *ptr) { u64 ret; unsigned long tmp; asm volatile("	prfm	pstl1strm, %2\n" "1:	ld" "" "xr" "" "\t%" "" "0, %2\n" "	st" "l" "xr" "" "\t%w1, %" "" "3, %2\n" "	cbnz	%w1, 1b\n" "	" "dmb ish" : "=&r" (ret), "=&r" (tmp), "+Q" (*(u64 *)ptr) : "r" (x) : "memory"); return ret; }
# 85 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_8(x, ptr); case 2: return __xchg_case_16(x, ptr); case 4: return __xchg_case_32(x, ptr); case 8: return __xchg_case_64(x, ptr); default: do { extern void __compiletime_assert_85(void) ; if (!(!(1))) __compiletime_assert_85(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg_acq(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_acq_8(x, ptr); case 2: return __xchg_case_acq_16(x, ptr); case 4: return __xchg_case_acq_32(x, ptr); case 8: return __xchg_case_acq_64(x, ptr); default: do { extern void __compiletime_assert_86(void) ; if (!(!(1))) __compiletime_assert_86(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg_rel(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_rel_8(x, ptr); case 2: return __xchg_case_rel_16(x, ptr); case 4: return __xchg_case_rel_32(x, ptr); case 8: return __xchg_case_rel_64(x, ptr); default: do { extern void __compiletime_assert_87(void) ; if (!(!(1))) __compiletime_assert_87(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __xchg_mb(unsigned long x, volatile void *ptr, int size) { switch (size) { case 1: return __xchg_case_mb_8(x, ptr); case 2: return __xchg_case_mb_16(x, ptr); case 4: return __xchg_case_mb_32(x, ptr); case 8: return __xchg_case_mb_64(x, ptr); default: do { extern void __compiletime_assert_88(void) ; if (!(!(1))) __compiletime_assert_88(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
# 115 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_8(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_16(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_32(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_64(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_acq_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_acq_8(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_acq_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_acq_16(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_acq_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_acq_32(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_acq_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_acq_64(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_rel_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_rel_8(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_rel_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_rel_16(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_rel_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_rel_32(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_rel_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_rel_64(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __cmpxchg_case_mb_8(volatile void *ptr, u8 old, u8 new) { return __ll_sc__cmpxchg_case_mb_8(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __cmpxchg_case_mb_16(volatile void *ptr, u16 old, u16 new) { return __ll_sc__cmpxchg_case_mb_16(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __cmpxchg_case_mb_32(volatile void *ptr, u32 old, u32 new) { return __ll_sc__cmpxchg_case_mb_32(ptr, old, new); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __cmpxchg_case_mb_64(volatile void *ptr, u64 old, u64 new) { return __ll_sc__cmpxchg_case_mb_64(ptr, old, new); }
# 145 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __cmpxchg_double(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { return __ll_sc__cmpxchg_double(old1, old2, new1, new2, ptr); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __cmpxchg_double_mb(unsigned long old1, unsigned long old2, unsigned long new1, unsigned long new2, volatile void *ptr) { return __ll_sc__cmpxchg_double_mb(old1, old2, new1, new2, ptr); }
# 172 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_8(ptr, old, new); case 2: return __cmpxchg_case_16(ptr, old, new); case 4: return __cmpxchg_case_32(ptr, old, new); case 8: return __cmpxchg_case_64(ptr, old, new); default: do { extern void __compiletime_assert_172(void) ; if (!(!(1))) __compiletime_assert_172(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg_acq(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_acq_8(ptr, old, new); case 2: return __cmpxchg_case_acq_16(ptr, old, new); case 4: return __cmpxchg_case_acq_32(ptr, old, new); case 8: return __cmpxchg_case_acq_64(ptr, old, new); default: do { extern void __compiletime_assert_173(void) ; if (!(!(1))) __compiletime_assert_173(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg_rel(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_rel_8(ptr, old, new); case 2: return __cmpxchg_case_rel_16(ptr, old, new); case 4: return __cmpxchg_case_rel_32(ptr, old, new); case 8: return __cmpxchg_case_rel_64(ptr, old, new); default: do { extern void __compiletime_assert_174(void) ; if (!(!(1))) __compiletime_assert_174(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __cmpxchg_mb(volatile void *ptr, unsigned long old, unsigned long new, int size) { switch (size) { case 1: return __cmpxchg_case_mb_8(ptr, old, new); case 2: return __cmpxchg_case_mb_16(ptr, old, new); case 4: return __cmpxchg_case_mb_32(ptr, old, new); case 8: return __cmpxchg_case_mb_64(ptr, old, new); default: do { extern void __compiletime_assert_175(void) ; if (!(!(1))) __compiletime_assert_175(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
# 250 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_8(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "b" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_16(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "h" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_32(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "w" "[tmp], %[v]\n" "	eor	%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	cbnz	%" "w" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cmpwait_case_64(volatile void *ptr, unsigned long val) { unsigned long tmp; asm volatile( "	sevl\n" "	wfe\n" "	ldxr" "" "\t%" "" "[tmp], %[v]\n" "	eor	%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	cbnz	%" "" "[tmp], 1f\n" "	wfe\n" "1:" : [tmp] "=&r" (tmp), [v] "+Q" (*(unsigned long *)ptr) : [val] "r" (val)); };
# 278 "../arch/arm64/include/asm/cmpxchg.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __cmpwait(volatile void *ptr, unsigned long val, int size) { switch (size) { case 1: return __cmpwait_case_8(ptr, (u8)val); case 2: return __cmpwait_case_16(ptr, (u16)val); case 4: return __cmpwait_case_32(ptr, val); case 8: return __cmpwait_case_64(ptr, val); default: do { extern void __compiletime_assert_278(void) ; if (!(!(1))) __compiletime_assert_278(); } while (0); } do { ; __builtin_unreachable(); } while (0); }
# 17 "../arch/arm64/include/asm/atomic.h" 2








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_andnot(int i, atomic_t *v) { __ll_sc_atomic_andnot(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_or(int i, atomic_t *v) { __ll_sc_atomic_or(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_xor(int i, atomic_t *v) { __ll_sc_atomic_xor(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_add(int i, atomic_t *v) { __ll_sc_atomic_add(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_and(int i, atomic_t *v) { __ll_sc_atomic_and(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic_sub(int i, atomic_t *v) { __ll_sc_atomic_sub(i, v); }
# 46 "../arch/arm64/include/asm/atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_andnot_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_andnot_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_andnot_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_andnot(int i, atomic_t *v) { return __ll_sc_atomic_fetch_andnot(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_or_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_or_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_or_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_or(int i, atomic_t *v) { return __ll_sc_atomic_fetch_or(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_xor_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_xor_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_xor_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_xor(int i, atomic_t *v) { return __ll_sc_atomic_fetch_xor(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_add_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_add_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_add_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_add(int i, atomic_t *v) { return __ll_sc_atomic_fetch_add(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_and_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_and_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_and_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_and(int i, atomic_t *v) { return __ll_sc_atomic_fetch_and(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_sub_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_sub_acquire(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_sub_release(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_fetch_sub(int i, atomic_t *v) { return __ll_sc_atomic_fetch_sub(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_add_return_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_add_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_add_return_acquire(int i, atomic_t *v) { return __ll_sc_atomic_add_return_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_add_return_release(int i, atomic_t *v) { return __ll_sc_atomic_add_return_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_add_return(int i, atomic_t *v) { return __ll_sc_atomic_add_return(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_sub_return_relaxed(int i, atomic_t *v) { return __ll_sc_atomic_sub_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_sub_return_acquire(int i, atomic_t *v) { return __ll_sc_atomic_sub_return_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_sub_return_release(int i, atomic_t *v) { return __ll_sc_atomic_sub_return_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_atomic_sub_return(int i, atomic_t *v) { return __ll_sc_atomic_sub_return(i, v); }
# 64 "../arch/arm64/include/asm/atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_andnot(long i, atomic64_t *v) { __ll_sc_atomic64_andnot(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_or(long i, atomic64_t *v) { __ll_sc_atomic64_or(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_xor(long i, atomic64_t *v) { __ll_sc_atomic64_xor(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_add(long i, atomic64_t *v) { __ll_sc_atomic64_add(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_and(long i, atomic64_t *v) { __ll_sc_atomic64_and(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_atomic64_sub(long i, atomic64_t *v) { __ll_sc_atomic64_sub(i, v); }
# 85 "../arch/arm64/include/asm/atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_andnot_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_andnot_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_andnot_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_andnot(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_andnot(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_or_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_or_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_or_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_or(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_or(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_xor_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_xor_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_xor_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_xor(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_xor(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_add_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_add_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_add_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_add(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_add(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_and_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_and_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_and_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_and(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_and(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_sub_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_sub_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_sub_release(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_fetch_sub(long i, atomic64_t *v) { return __ll_sc_atomic64_fetch_sub(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_add_return_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_add_return_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_add_return_release(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_add_return(long i, atomic64_t *v) { return __ll_sc_atomic64_add_return(i, v); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_sub_return_relaxed(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return_relaxed(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_sub_return_acquire(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return_acquire(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_sub_return_release(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return_release(i, v); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_sub_return(long i, atomic64_t *v) { return __ll_sc_atomic64_sub_return(i, v); }




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long arch_atomic64_dec_if_positive(atomic64_t *v)
{
 return __ll_sc_atomic64_dec_if_positive(v);
}
# 228 "../arch/arm64/include/asm/atomic.h"
# 1 "../include/asm-generic/atomic-instrumented.h" 1
# 23 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_read(const atomic_t *v)
{
 kasan_check_read(v, sizeof(*v));
 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });
}
# 41 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_set(atomic_t *v, int i)
{
 kasan_check_write(v, sizeof(*v));
 ({ union { typeof(((v)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((v)->counter))) ((i)) }; __write_once_size(&(((v)->counter)), __u.__c, sizeof(((v)->counter))); __u.__val; });
}
# 59 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_add(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_add_return(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_add_return_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_add_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_add_return_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_add_return_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_add_return_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_add_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_add_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_add_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_add_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_sub(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_sub_return(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_sub_return_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_sub_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_sub_return_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_sub_return_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_sub_return_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_sub_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_sub(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_sub_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_sub_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_sub_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_sub_relaxed(i, v);
}
# 415 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_and(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_and(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_and_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_and_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_and_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_and_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_and_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_and_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_andnot(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_andnot(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_andnot(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_andnot_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_andnot_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_or(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_or(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_or_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_or_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_or_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_or_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_or_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_or_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_xor(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_xor(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_xor_acquire(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_xor_release(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_xor_relaxed(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_xchg(atomic_t *v, int i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_mb((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_xchg_acquire(atomic_t *v, int i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_acq((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_xchg_release(atomic_t *v, int i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_rel((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_xchg_relaxed(atomic_t *v, int i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_cmpxchg(atomic_t *v, int old, int new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_cmpxchg_acquire(atomic_t *v, int old, int new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_cmpxchg_release(atomic_t *v, int old, int new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_cmpxchg_relaxed(atomic_t *v, int old, int new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}
# 833 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_read(const atomic64_t *v)
{
 kasan_check_read(v, sizeof(*v));
 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });
}
# 851 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_set(atomic64_t *v, s64 i)
{
 kasan_check_write(v, sizeof(*v));
 ({ union { typeof(((v)->counter)) __val; char __c[1]; } __u = { .__val = ( typeof(((v)->counter))) ((i)) }; __write_once_size(&(((v)->counter)), __u.__c, sizeof(((v)->counter))); __u.__val; });
}
# 869 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_add(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_add_return(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_add_return_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_add_return_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_return_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_add_return_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_add(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_add_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_add_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_add_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_add_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_sub(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_sub_return(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_sub_return_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_sub_return_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_sub_return_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_sub_return_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_sub_return_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_sub_return_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_sub_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_sub_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_sub_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub_relaxed(i, v);
}
# 1225 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_and(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_and(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_and_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_and_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_and_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_and_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_andnot(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_andnot(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_andnot_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_andnot_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_or(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_or(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_or_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_or_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_or_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_or_relaxed(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_xor(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_xor_acquire(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_acquire(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_xor_release(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_release(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_xor_relaxed(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor_relaxed(i, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_xchg(atomic64_t *v, s64 i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_mb((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_xchg_acquire(atomic64_t *v, s64 i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_acq((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_xchg_release(atomic64_t *v, s64 i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg_rel((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_xchg_relaxed(atomic64_t *v, s64 i)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __xchg((unsigned long)((i)), (&((v)->counter)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_mb((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_cmpxchg_acquire(atomic64_t *v, s64 old, s64 new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_acq((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_cmpxchg_release(atomic64_t *v, s64 old, s64 new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg_rel((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_cmpxchg_relaxed(atomic64_t *v, s64 old, s64 new)
{
 kasan_check_write(v, sizeof(*v));
 return ({ __typeof__(*(&((v)->counter))) __ret; __ret = (__typeof__(*(&((v)->counter)))) __cmpxchg((&((v)->counter)), (unsigned long)((old)), (unsigned long)((new)), sizeof(*(&((v)->counter)))); __ret; });
}
# 1634 "../include/asm-generic/atomic-instrumented.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_if_positive(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_dec_if_positive(v);
}
# 229 "../arch/arm64/include/asm/atomic.h" 2
# 8 "../include/linux/atomic.h" 2
# 74 "../include/linux/atomic.h"
# 1 "../include/linux/atomic-fallback.h" 1
# 79 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_read_acquire(const atomic_t *v)
{
 return ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u; typeof(&(v)->counter) __p = (&(v)->counter); do { extern void __compiletime_assert_82(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_82(); } while (0); kasan_check_read(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*__p) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*__p) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*__p) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*__p) : "memory"); break; } __u.__val; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_set_release(atomic_t *v, int i)
{
 do { typeof(&(v)->counter) __p = (&(v)->counter); union { typeof(*&(v)->counter) __val; char __c[1]; } __u = { .__val = ( typeof(*&(v)->counter)) (i) }; do { extern void __compiletime_assert_91(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_91(); } while (0); kasan_check_write(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}
# 265 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_inc(atomic_t *v)
{
 atomic_add(1, v);
}
# 281 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return(atomic_t *v)
{
 return atomic_add_return(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return_acquire(atomic_t *v)
{
 return atomic_add_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return_release(atomic_t *v)
{
 return atomic_add_return_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_inc_return_relaxed(atomic_t *v)
{
 return atomic_add_return_relaxed(1, v);
}
# 362 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc(atomic_t *v)
{
 return atomic_fetch_add(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc_acquire(atomic_t *v)
{
 return atomic_fetch_add_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc_release(atomic_t *v)
{
 return atomic_fetch_add_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_inc_relaxed(atomic_t *v)
{
 return atomic_fetch_add_relaxed(1, v);
}
# 436 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_dec(atomic_t *v)
{
 atomic_sub(1, v);
}
# 452 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return(atomic_t *v)
{
 return atomic_sub_return(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return_acquire(atomic_t *v)
{
 return atomic_sub_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return_release(atomic_t *v)
{
 return atomic_sub_return_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_return_relaxed(atomic_t *v)
{
 return atomic_sub_return_relaxed(1, v);
}
# 533 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec(atomic_t *v)
{
 return atomic_fetch_sub(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec_acquire(atomic_t *v)
{
 return atomic_fetch_sub_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec_release(atomic_t *v)
{
 return atomic_fetch_sub_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_dec_relaxed(atomic_t *v)
{
 return atomic_fetch_sub_relaxed(1, v);
}
# 914 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg_acquire(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg_acquire(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg_release(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg_release(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_try_cmpxchg_relaxed(atomic_t *v, int *old, int new)
{
 int r, o = *old;
 r = atomic_cmpxchg_relaxed(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 1013 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_sub_and_test(int i, atomic_t *v)
{
 return atomic_sub_return(i, v) == 0;
}
# 1030 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_dec_and_test(atomic_t *v)
{
 return atomic_dec_return(v) == 0;
}
# 1047 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_inc_and_test(atomic_t *v)
{
 return atomic_inc_return(v) == 0;
}
# 1065 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_add_negative(int i, atomic_t *v)
{
 return atomic_add_return(i, v) < 0;
}
# 1083 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_fetch_add_unless(atomic_t *v, int a, int u)
{
 int c = atomic_read(v);

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!atomic_try_cmpxchg(v, &c, c + a));

 return c;
}
# 1108 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_add_unless(atomic_t *v, int a, int u)
{
 return atomic_fetch_add_unless(v, a, u) != u;
}
# 1124 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_inc_not_zero(atomic_t *v)
{
 return atomic_add_unless(v, 1, 0);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_inc_unless_negative(atomic_t *v)
{
 int c = atomic_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!atomic_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_dec_unless_positive(atomic_t *v)
{
 int c = atomic_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!atomic_try_cmpxchg(v, &c, c - 1));

 return true;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
atomic_dec_if_positive(atomic_t *v)
{
 int dec, c = atomic_read(v);

 do {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
 } while (!atomic_try_cmpxchg(v, &c, dec));

 return dec;
}
# 1189 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_read_acquire(const atomic64_t *v)
{
 return ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u; typeof(&(v)->counter) __p = (&(v)->counter); do { extern void __compiletime_assert_1192(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_1192(); } while (0); kasan_check_read(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*__p) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*__p) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*__p) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*__p) : "memory"); break; } __u.__val; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_set_release(atomic64_t *v, s64 i)
{
 do { typeof(&(v)->counter) __p = (&(v)->counter); union { typeof(*&(v)->counter) __val; char __c[1]; } __u = { .__val = ( typeof(*&(v)->counter)) (i) }; do { extern void __compiletime_assert_1201(void) ; if (!((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long)))) __compiletime_assert_1201(); } while (0); kasan_check_write(__p, sizeof(*&(v)->counter)); switch (sizeof(*&(v)->counter)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}
# 1375 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_inc(atomic64_t *v)
{
 atomic64_add(1, v);
}
# 1391 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return(atomic64_t *v)
{
 return atomic64_add_return(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return_acquire(atomic64_t *v)
{
 return atomic64_add_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return_release(atomic64_t *v)
{
 return atomic64_add_return_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_inc_return_relaxed(atomic64_t *v)
{
 return atomic64_add_return_relaxed(1, v);
}
# 1472 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc(atomic64_t *v)
{
 return atomic64_fetch_add(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc_acquire(atomic64_t *v)
{
 return atomic64_fetch_add_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc_release(atomic64_t *v)
{
 return atomic64_fetch_add_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_inc_relaxed(atomic64_t *v)
{
 return atomic64_fetch_add_relaxed(1, v);
}
# 1546 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic64_dec(atomic64_t *v)
{
 atomic64_sub(1, v);
}
# 1562 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return(atomic64_t *v)
{
 return atomic64_sub_return(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return_acquire(atomic64_t *v)
{
 return atomic64_sub_return_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return_release(atomic64_t *v)
{
 return atomic64_sub_return_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_dec_return_relaxed(atomic64_t *v)
{
 return atomic64_sub_return_relaxed(1, v);
}
# 1643 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec(atomic64_t *v)
{
 return atomic64_fetch_sub(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec_acquire(atomic64_t *v)
{
 return atomic64_fetch_sub_acquire(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec_release(atomic64_t *v)
{
 return atomic64_fetch_sub_release(1, v);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_dec_relaxed(atomic64_t *v)
{
 return atomic64_fetch_sub_relaxed(1, v);
}
# 2024 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg_acquire(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg_acquire(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg_release(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg_release(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_try_cmpxchg_relaxed(atomic64_t *v, s64 *old, s64 new)
{
 s64 r, o = *old;
 r = atomic64_cmpxchg_relaxed(v, o, new);
 if (__builtin_expect(!!(r != o), 0))
  *old = r;
 return __builtin_expect(!!(r == o), 1);
}
# 2123 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 return atomic64_sub_return(i, v) == 0;
}
# 2140 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_dec_and_test(atomic64_t *v)
{
 return atomic64_dec_return(v) == 0;
}
# 2157 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_inc_and_test(atomic64_t *v)
{
 return atomic64_inc_return(v) == 0;
}
# 2175 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_add_negative(s64 i, atomic64_t *v)
{
 return atomic64_add_return(i, v) < 0;
}
# 2193 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64
atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
{
 s64 c = atomic64_read(v);

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!atomic64_try_cmpxchg(v, &c, c + a));

 return c;
}
# 2218 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 return atomic64_fetch_add_unless(v, a, u) != u;
}
# 2234 "../include/linux/atomic-fallback.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_inc_not_zero(atomic64_t *v)
{
 return atomic64_add_unless(v, 1, 0);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_inc_unless_negative(atomic64_t *v)
{
 s64 c = atomic64_read(v);

 do {
  if (__builtin_expect(!!(c < 0), 0))
   return false;
 } while (!atomic64_try_cmpxchg(v, &c, c + 1));

 return true;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic64_dec_unless_positive(atomic64_t *v)
{
 s64 c = atomic64_read(v);

 do {
  if (__builtin_expect(!!(c > 0), 0))
   return false;
 } while (!atomic64_try_cmpxchg(v, &c, c - 1));

 return true;
}
# 75 "../include/linux/atomic.h" 2

# 1 "../include/asm-generic/atomic-long.h" 1








# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 10 "../include/asm-generic/atomic-long.h" 2


typedef atomic64_t atomic_long_t;
# 25 "../include/asm-generic/atomic-long.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_read(const atomic_long_t *v)
{
 return atomic64_read(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_read_acquire(const atomic_long_t *v)
{
 return atomic64_read_acquire(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_set(atomic_long_t *v, long i)
{
 atomic64_set(v, i);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_set_release(atomic_long_t *v, long i)
{
 atomic64_set_release(v, i);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_add(long i, atomic_long_t *v)
{
 atomic64_add(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return(long i, atomic_long_t *v)
{
 return atomic64_add_return(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return_acquire(long i, atomic_long_t *v)
{
 return atomic64_add_return_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return_release(long i, atomic_long_t *v)
{
 return atomic64_add_return_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_add_return_relaxed(long i, atomic_long_t *v)
{
 return atomic64_add_return_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add(long i, atomic_long_t *v)
{
 return atomic64_fetch_add(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_acquire(long i, atomic_long_t *v)
{
 return atomic64_fetch_add_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_release(long i, atomic_long_t *v)
{
 return atomic64_fetch_add_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_relaxed(long i, atomic_long_t *v)
{
 return atomic64_fetch_add_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_sub(long i, atomic_long_t *v)
{
 atomic64_sub(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return(long i, atomic_long_t *v)
{
 return atomic64_sub_return(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return_acquire(long i, atomic_long_t *v)
{
 return atomic64_sub_return_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return_release(long i, atomic_long_t *v)
{
 return atomic64_sub_return_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_sub_return_relaxed(long i, atomic_long_t *v)
{
 return atomic64_sub_return_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub(long i, atomic_long_t *v)
{
 return atomic64_fetch_sub(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub_acquire(long i, atomic_long_t *v)
{
 return atomic64_fetch_sub_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub_release(long i, atomic_long_t *v)
{
 return atomic64_fetch_sub_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_sub_relaxed(long i, atomic_long_t *v)
{
 return atomic64_fetch_sub_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_inc(atomic_long_t *v)
{
 atomic64_inc(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return(atomic_long_t *v)
{
 return atomic64_inc_return(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return_acquire(atomic_long_t *v)
{
 return atomic64_inc_return_acquire(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return_release(atomic_long_t *v)
{
 return atomic64_inc_return_release(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_inc_return_relaxed(atomic_long_t *v)
{
 return atomic64_inc_return_relaxed(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc(atomic_long_t *v)
{
 return atomic64_fetch_inc(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc_acquire(atomic_long_t *v)
{
 return atomic64_fetch_inc_acquire(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc_release(atomic_long_t *v)
{
 return atomic64_fetch_inc_release(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_inc_relaxed(atomic_long_t *v)
{
 return atomic64_fetch_inc_relaxed(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_dec(atomic_long_t *v)
{
 atomic64_dec(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return(atomic_long_t *v)
{
 return atomic64_dec_return(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return_acquire(atomic_long_t *v)
{
 return atomic64_dec_return_acquire(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return_release(atomic_long_t *v)
{
 return atomic64_dec_return_release(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_return_relaxed(atomic_long_t *v)
{
 return atomic64_dec_return_relaxed(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec(atomic_long_t *v)
{
 return atomic64_fetch_dec(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec_acquire(atomic_long_t *v)
{
 return atomic64_fetch_dec_acquire(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec_release(atomic_long_t *v)
{
 return atomic64_fetch_dec_release(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_dec_relaxed(atomic_long_t *v)
{
 return atomic64_fetch_dec_relaxed(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_and(long i, atomic_long_t *v)
{
 atomic64_and(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and(long i, atomic_long_t *v)
{
 return atomic64_fetch_and(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and_acquire(long i, atomic_long_t *v)
{
 return atomic64_fetch_and_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and_release(long i, atomic_long_t *v)
{
 return atomic64_fetch_and_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_and_relaxed(long i, atomic_long_t *v)
{
 return atomic64_fetch_and_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_andnot(long i, atomic_long_t *v)
{
 atomic64_andnot(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot(long i, atomic_long_t *v)
{
 return atomic64_fetch_andnot(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot_acquire(long i, atomic_long_t *v)
{
 return atomic64_fetch_andnot_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot_release(long i, atomic_long_t *v)
{
 return atomic64_fetch_andnot_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *v)
{
 return atomic64_fetch_andnot_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_or(long i, atomic_long_t *v)
{
 atomic64_or(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or(long i, atomic_long_t *v)
{
 return atomic64_fetch_or(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or_acquire(long i, atomic_long_t *v)
{
 return atomic64_fetch_or_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or_release(long i, atomic_long_t *v)
{
 return atomic64_fetch_or_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_or_relaxed(long i, atomic_long_t *v)
{
 return atomic64_fetch_or_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
atomic_long_xor(long i, atomic_long_t *v)
{
 atomic64_xor(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor(long i, atomic_long_t *v)
{
 return atomic64_fetch_xor(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor_acquire(long i, atomic_long_t *v)
{
 return atomic64_fetch_xor_acquire(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor_release(long i, atomic_long_t *v)
{
 return atomic64_fetch_xor_release(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_xor_relaxed(long i, atomic_long_t *v)
{
 return atomic64_fetch_xor_relaxed(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg(atomic_long_t *v, long i)
{
 return atomic64_xchg(v, i);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg_acquire(atomic_long_t *v, long i)
{
 return atomic64_xchg_acquire(v, i);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg_release(atomic_long_t *v, long i)
{
 return atomic64_xchg_release(v, i);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_xchg_relaxed(atomic_long_t *v, long i)
{
 return atomic64_xchg_relaxed(v, i);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg(atomic_long_t *v, long old, long new)
{
 return atomic64_cmpxchg(v, old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg_acquire(atomic_long_t *v, long old, long new)
{
 return atomic64_cmpxchg_acquire(v, old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg_release(atomic_long_t *v, long old, long new)
{
 return atomic64_cmpxchg_release(v, old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_cmpxchg_relaxed(atomic_long_t *v, long old, long new)
{
 return atomic64_cmpxchg_relaxed(v, old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg(atomic_long_t *v, long *old, long new)
{
 return atomic64_try_cmpxchg(v, (s64 *)old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg_acquire(atomic_long_t *v, long *old, long new)
{
 return atomic64_try_cmpxchg_acquire(v, (s64 *)old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg_release(atomic_long_t *v, long *old, long new)
{
 return atomic64_try_cmpxchg_release(v, (s64 *)old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_try_cmpxchg_relaxed(atomic_long_t *v, long *old, long new)
{
 return atomic64_try_cmpxchg_relaxed(v, (s64 *)old, new);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_sub_and_test(long i, atomic_long_t *v)
{
 return atomic64_sub_and_test(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_dec_and_test(atomic_long_t *v)
{
 return atomic64_dec_and_test(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_inc_and_test(atomic_long_t *v)
{
 return atomic64_inc_and_test(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_add_negative(long i, atomic_long_t *v)
{
 return atomic64_add_negative(i, v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_fetch_add_unless(atomic_long_t *v, long a, long u)
{
 return atomic64_fetch_add_unless(v, a, u);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_add_unless(atomic_long_t *v, long a, long u)
{
 return atomic64_add_unless(v, a, u);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_inc_not_zero(atomic_long_t *v)
{
 return atomic64_inc_not_zero(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_inc_unless_negative(atomic_long_t *v)
{
 return atomic64_inc_unless_negative(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
atomic_long_dec_unless_positive(atomic_long_t *v)
{
 return atomic64_dec_unless_positive(v);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long
atomic_long_dec_if_positive(atomic_long_t *v)
{
 return atomic64_dec_if_positive(v);
}
# 77 "../include/linux/atomic.h" 2
# 6 "../include/asm-generic/bitops/atomic.h" 2








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 atomic_long_or(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 atomic_long_andnot(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void change_bit(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 atomic_long_xor(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 if (({ union { typeof(*p) __val; char __c[1]; } __u; if (1) __read_once_size(&(*p), __u.__c, sizeof(*p)); else __read_once_size_nocheck(&(*p), __u.__c, sizeof(*p)); do { } while (0); __u.__val; }) & mask)
  return 1;

 old = atomic_long_fetch_or(mask, (atomic_long_t *)p);
 return !!(old & mask);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 if (!(({ union { typeof(*p) __val; char __c[1]; } __u; if (1) __read_once_size(&(*p), __u.__c, sizeof(*p)); else __read_once_size_nocheck(&(*p), __u.__c, sizeof(*p)); do { } while (0); __u.__val; }) & mask))
  return 0;

 old = atomic_long_fetch_andnot(mask, (atomic_long_t *)p);
 return !!(old & mask);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_change_bit(unsigned int nr, volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 old = atomic_long_fetch_xor(mask, (atomic_long_t *)p);
 return !!(old & mask);
}
# 27 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/lock.h" 1
# 18 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_lock(unsigned int nr,
     volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 if (({ union { typeof(*p) __val; char __c[1]; } __u; if (1) __read_once_size(&(*p), __u.__c, sizeof(*p)); else __read_once_size_nocheck(&(*p), __u.__c, sizeof(*p)); do { } while (0); __u.__val; }) & mask)
  return 1;

 old = atomic_long_fetch_or_acquire(mask, (atomic_long_t *)p);
 return !!(old & mask);
}
# 40 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_unlock(unsigned int nr, volatile unsigned long *p)
{
 p += ((nr) / 64);
 atomic_long_fetch_andnot_release(((((1UL))) << ((nr) % 64)), (atomic_long_t *)p);
}
# 57 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_unlock(unsigned int nr,
          volatile unsigned long *p)
{
 unsigned long old;

 p += ((nr) / 64);
 old = ({ union { typeof(*p) __val; char __c[1]; } __u; if (1) __read_once_size(&(*p), __u.__c, sizeof(*p)); else __read_once_size_nocheck(&(*p), __u.__c, sizeof(*p)); do { } while (0); __u.__val; });
 old &= ~((((1UL))) << ((nr) % 64));
 atomic_long_set_release((atomic_long_t *)p, old);
}
# 78 "../include/asm-generic/bitops/lock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool clear_bit_unlock_is_negative_byte(unsigned int nr,
           volatile unsigned long *p)
{
 long old;
 unsigned long mask = ((((1UL))) << ((nr) % 64));

 p += ((nr) / 64);
 old = atomic_long_fetch_andnot_release(mask, (atomic_long_t *)p);
 return !!(old & ((((1UL))) << (7)));
}
# 28 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/non-atomic.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/non-atomic.h" 2
# 16 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p |= mask;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p &= ~mask;
}
# 41 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __change_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);

 *p ^= mask;
}
# 58 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old | mask;
 return (old & mask) != 0;
}
# 77 "../include/asm-generic/bitops/non-atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit(int nr, volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old & ~mask;
 return (old & mask) != 0;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_change_bit(int nr,
         volatile unsigned long *addr)
{
 unsigned long mask = ((((1UL))) << ((nr) % 64));
 unsigned long *p = ((unsigned long *)addr) + ((nr) / 64);
 unsigned long old = *p;

 *p = old ^ mask;
 return (old & mask) != 0;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit(int nr, const volatile unsigned long *addr)
{
 return 1UL & (addr[((nr) / 64)] >> (nr & (64 -1)));
}
# 29 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/le.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 6 "../include/asm-generic/bitops/le.h" 2
# 1 "../arch/arm64/include/uapi/asm/byteorder.h" 1
# 23 "../arch/arm64/include/uapi/asm/byteorder.h"
# 1 "../include/linux/byteorder/little_endian.h" 1




# 1 "../include/uapi/linux/byteorder/little_endian.h" 1
# 13 "../include/uapi/linux/byteorder/little_endian.h"
# 1 "../include/linux/swab.h" 1




# 1 "../include/uapi/linux/swab.h" 1






# 1 "./arch/arm64/include/generated/uapi/asm/swab.h" 1
# 1 "../include/uapi/asm-generic/swab.h" 1
# 2 "./arch/arm64/include/generated/uapi/asm/swab.h" 2
# 8 "../include/uapi/linux/swab.h" 2
# 47 "../include/uapi/linux/swab.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x000000ffUL) << 24) | (((__u32)(val) & (__u32)0x0000ff00UL) << 8) | (((__u32)(val) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(val) & (__u32)0xff000000UL) >> 24)));

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{







 return ((__u64)( (((__u64)(val) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(val) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(val) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(val) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(val) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(val) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(val) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(val) & (__u64)0xff00000000000000ULL) >> 56)));

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 161 "../include/uapi/linux/swab.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "../include/linux/swab.h" 2
# 14 "../include/uapi/linux/byteorder/little_endian.h" 2
# 44 "../include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "../include/linux/byteorder/little_endian.h" 2





# 1 "../include/linux/byteorder/generic.h" 1
# 144 "../include/linux/byteorder/generic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void le32_to_cpu_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_le32_array(u32 *buf, unsigned int words)
{
 while (words--) {
  do { (void)(buf); } while (0);
  buf++;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_to_be32_array(__be32 *dst, const u32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (( __be32)(__builtin_constant_p((__u32)((src[i]))) ? ((__u32)( (((__u32)((src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)((src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)((src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32((src[i]))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void be32_to_cpu_array(u32 *dst, const __be32 *src, size_t len)
{
 int i;

 for (i = 0; i < len; i++)
  dst[i] = (__builtin_constant_p((__u32)(( __u32)(__be32)(src[i]))) ? ((__u32)( (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(src[i])) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(src[i])));
}
# 12 "../include/linux/byteorder/little_endian.h" 2
# 24 "../arch/arm64/include/uapi/asm/byteorder.h" 2
# 7 "../include/asm-generic/bitops/le.h" 2





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_next_zero_bit((addr), (size), 0);
}
# 53 "../include/asm-generic/bitops/le.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_bit_le(int nr, const void *addr)
{
 return test_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __set_bit_le(int nr, void *addr)
{
 __set_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __clear_bit_le(int nr, void *addr)
{
 __clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_set_bit_le(int nr, void *addr)
{
 return __test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return __test_and_clear_bit(nr ^ 0, addr);
}
# 30 "../arch/arm64/include/asm/bitops.h" 2
# 1 "../include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 31 "../arch/arm64/include/asm/bitops.h" 2
# 20 "../include/linux/bitops.h" 2
# 43 "../include/linux/bitops.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p(w) ? (((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!(((w) >> 32) & (1ULL << 0))) + (!!(((w) >> 32) & (1ULL << 1))) + (!!(((w) >> 32) & (1ULL << 2))) + (!!(((w) >> 32) & (1ULL << 3))) + (!!(((w) >> 32) & (1ULL << 4))) + (!!(((w) >> 32) & (1ULL << 5))) + (!!(((w) >> 32) & (1ULL << 6))) + (!!(((w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 32) >> 8) & (1ULL << 0))) + (!!((((w) >> 32) >> 8) & (1ULL << 1))) + (!!((((w) >> 32) >> 8) & (1ULL << 2))) + (!!((((w) >> 32) >> 8) & (1ULL << 3))) + (!!((((w) >> 32) >> 8) & (1ULL << 4))) + (!!((((w) >> 32) >> 8) & (1ULL << 5))) + (!!((((w) >> 32) >> 8) & (1ULL << 6))) + (!!((((w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((w) >> 32) >> 16) & (1ULL << 0))) + (!!((((w) >> 32) >> 16) & (1ULL << 1))) + (!!((((w) >> 32) >> 16) & (1ULL << 2))) + (!!((((w) >> 32) >> 16) & (1ULL << 3))) + (!!((((w) >> 32) >> 16) & (1ULL << 4))) + (!!((((w) >> 32) >> 16) & (1ULL << 5))) + (!!((((w) >> 32) >> 16) & (1ULL << 6))) + (!!((((w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64(w));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 143 "../include/linux/bitops.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order(unsigned int count)
{
 int order;

 order = fls(count) - 1;
 if (count & (count - 1))
  order++;
 return order;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 else if (l & (l - 1UL))
  return (int)fls_long(l);
 else
  return (int)fls_long(l) - 1;
}
# 201 "../include/linux/bitops.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void assign_bit(long nr, volatile unsigned long *addr,
           bool value)
{
 if (value)
  set_bit(nr, addr);
 else
  clear_bit(nr, addr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __assign_bit(long nr, volatile unsigned long *addr,
      bool value)
{
 if (value)
  __set_bit(nr, addr);
 else
  __clear_bit(nr, addr);
}
# 277 "../include/linux/bitops.h"
extern unsigned long find_last_bit(const unsigned long *addr,
       unsigned long size);
# 13 "../include/linux/kernel.h" 2
# 1 "../include/linux/log2.h" 1
# 21 "../include/linux/log2.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}
# 44 "../include/linux/log2.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 197 "../include/linux/log2.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ( __builtin_constant_p(n - 1) ? ( (n - 1) < 2 ? 0 : (n - 1) & (1ULL << 63) ? 63 : (n - 1) & (1ULL << 62) ? 62 : (n - 1) & (1ULL << 61) ? 61 : (n - 1) & (1ULL << 60) ? 60 : (n - 1) & (1ULL << 59) ? 59 : (n - 1) & (1ULL << 58) ? 58 : (n - 1) & (1ULL << 57) ? 57 : (n - 1) & (1ULL << 56) ? 56 : (n - 1) & (1ULL << 55) ? 55 : (n - 1) & (1ULL << 54) ? 54 : (n - 1) & (1ULL << 53) ? 53 : (n - 1) & (1ULL << 52) ? 52 : (n - 1) & (1ULL << 51) ? 51 : (n - 1) & (1ULL << 50) ? 50 : (n - 1) & (1ULL << 49) ? 49 : (n - 1) & (1ULL << 48) ? 48 : (n - 1) & (1ULL << 47) ? 47 : (n - 1) & (1ULL << 46) ? 46 : (n - 1) & (1ULL << 45) ? 45 : (n - 1) & (1ULL << 44) ? 44 : (n - 1) & (1ULL << 43) ? 43 : (n - 1) & (1ULL << 42) ? 42 : (n - 1) & (1ULL << 41) ? 41 : (n - 1) & (1ULL << 40) ? 40 : (n - 1) & (1ULL << 39) ? 39 : (n - 1) & (1ULL << 38) ? 38 : (n - 1) & (1ULL << 37) ? 37 : (n - 1) & (1ULL << 36) ? 36 : (n - 1) & (1ULL << 35) ? 35 : (n - 1) & (1ULL << 34) ? 34 : (n - 1) & (1ULL << 33) ? 33 : (n - 1) & (1ULL << 32) ? 32 : (n - 1) & (1ULL << 31) ? 31 : (n - 1) & (1ULL << 30) ? 30 : (n - 1) & (1ULL << 29) ? 29 : (n - 1) & (1ULL << 28) ? 28 : (n - 1) & (1ULL << 27) ? 27 : (n - 1) & (1ULL << 26) ? 26 : (n - 1) & (1ULL << 25) ? 25 : (n - 1) & (1ULL << 24) ? 24 : (n - 1) & (1ULL << 23) ? 23 : (n - 1) & (1ULL << 22) ? 22 : (n - 1) & (1ULL << 21) ? 21 : (n - 1) & (1ULL << 20) ? 20 : (n - 1) & (1ULL << 19) ? 19 : (n - 1) & (1ULL << 18) ? 18 : (n - 1) & (1ULL << 17) ? 17 : (n - 1) & (1ULL << 16) ? 16 : (n - 1) & (1ULL << 15) ? 15 : (n - 1) & (1ULL << 14) ? 14 : (n - 1) & (1ULL << 13) ? 13 : (n - 1) & (1ULL << 12) ? 12 : (n - 1) & (1ULL << 11) ? 11 : (n - 1) & (1ULL << 10) ? 10 : (n - 1) & (1ULL << 9) ? 9 : (n - 1) & (1ULL << 8) ? 8 : (n - 1) & (1ULL << 7) ? 7 : (n - 1) & (1ULL << 6) ? 6 : (n - 1) & (1ULL << 5) ? 5 : (n - 1) & (1ULL << 4) ? 4 : (n - 1) & (1ULL << 3) ? 3 : (n - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 224 "../include/linux/log2.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((const))
int __bits_per(unsigned long n)
{
 if (n < 2)
  return 1;
 if (is_power_of_2(n))
  return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? ( __builtin_constant_p((n) - 1) ? ( ((n) - 1) < 2 ? 0 : ((n) - 1) & (1ULL << 63) ? 63 : ((n) - 1) & (1ULL << 62) ? 62 : ((n) - 1) & (1ULL << 61) ? 61 : ((n) - 1) & (1ULL << 60) ? 60 : ((n) - 1) & (1ULL << 59) ? 59 : ((n) - 1) & (1ULL << 58) ? 58 : ((n) - 1) & (1ULL << 57) ? 57 : ((n) - 1) & (1ULL << 56) ? 56 : ((n) - 1) & (1ULL << 55) ? 55 : ((n) - 1) & (1ULL << 54) ? 54 : ((n) - 1) & (1ULL << 53) ? 53 : ((n) - 1) & (1ULL << 52) ? 52 : ((n) - 1) & (1ULL << 51) ? 51 : ((n) - 1) & (1ULL << 50) ? 50 : ((n) - 1) & (1ULL << 49) ? 49 : ((n) - 1) & (1ULL << 48) ? 48 : ((n) - 1) & (1ULL << 47) ? 47 : ((n) - 1) & (1ULL << 46) ? 46 : ((n) - 1) & (1ULL << 45) ? 45 : ((n) - 1) & (1ULL << 44) ? 44 : ((n) - 1) & (1ULL << 43) ? 43 : ((n) - 1) & (1ULL << 42) ? 42 : ((n) - 1) & (1ULL << 41) ? 41 : ((n) - 1) & (1ULL << 40) ? 40 : ((n) - 1) & (1ULL << 39) ? 39 : ((n) - 1) & (1ULL << 38) ? 38 : ((n) - 1) & (1ULL << 37) ? 37 : ((n) - 1) & (1ULL << 36) ? 36 : ((n) - 1) & (1ULL << 35) ? 35 : ((n) - 1) & (1ULL << 34) ? 34 : ((n) - 1) & (1ULL << 33) ? 33 : ((n) - 1) & (1ULL << 32) ? 32 : ((n) - 1) & (1ULL << 31) ? 31 : ((n) - 1) & (1ULL << 30) ? 30 : ((n) - 1) & (1ULL << 29) ? 29 : ((n) - 1) & (1ULL << 28) ? 28 : ((n) - 1) & (1ULL << 27) ? 27 : ((n) - 1) & (1ULL << 26) ? 26 : ((n) - 1) & (1ULL << 25) ? 25 : ((n) - 1) & (1ULL << 24) ? 24 : ((n) - 1) & (1ULL << 23) ? 23 : ((n) - 1) & (1ULL << 22) ? 22 : ((n) - 1) & (1ULL << 21) ? 21 : ((n) - 1) & (1ULL << 20) ? 20 : ((n) - 1) & (1ULL << 19) ? 19 : ((n) - 1) & (1ULL << 18) ? 18 : ((n) - 1) & (1ULL << 17) ? 17 : ((n) - 1) & (1ULL << 16) ? 16 : ((n) - 1) & (1ULL << 15) ? 15 : ((n) - 1) & (1ULL << 14) ? 14 : ((n) - 1) & (1ULL << 13) ? 13 : ((n) - 1) & (1ULL << 12) ? 12 : ((n) - 1) & (1ULL << 11) ? 11 : ((n) - 1) & (1ULL << 10) ? 10 : ((n) - 1) & (1ULL << 9) ? 9 : ((n) - 1) & (1ULL << 8) ? 8 : ((n) - 1) & (1ULL << 7) ? 7 : ((n) - 1) & (1ULL << 6) ? 6 : ((n) - 1) & (1ULL << 5) ? 5 : ((n) - 1) & (1ULL << 4) ? 4 : ((n) - 1) & (1ULL << 3) ? 3 : ((n) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) ) + 1;
 return ( __builtin_constant_p(n) ? ( ((n) == 0 || (n) == 1) ? 0 : ( __builtin_constant_p((n) - 1) ? ( __builtin_constant_p((n) - 1) ? ( ((n) - 1) < 2 ? 0 : ((n) - 1) & (1ULL << 63) ? 63 : ((n) - 1) & (1ULL << 62) ? 62 : ((n) - 1) & (1ULL << 61) ? 61 : ((n) - 1) & (1ULL << 60) ? 60 : ((n) - 1) & (1ULL << 59) ? 59 : ((n) - 1) & (1ULL << 58) ? 58 : ((n) - 1) & (1ULL << 57) ? 57 : ((n) - 1) & (1ULL << 56) ? 56 : ((n) - 1) & (1ULL << 55) ? 55 : ((n) - 1) & (1ULL << 54) ? 54 : ((n) - 1) & (1ULL << 53) ? 53 : ((n) - 1) & (1ULL << 52) ? 52 : ((n) - 1) & (1ULL << 51) ? 51 : ((n) - 1) & (1ULL << 50) ? 50 : ((n) - 1) & (1ULL << 49) ? 49 : ((n) - 1) & (1ULL << 48) ? 48 : ((n) - 1) & (1ULL << 47) ? 47 : ((n) - 1) & (1ULL << 46) ? 46 : ((n) - 1) & (1ULL << 45) ? 45 : ((n) - 1) & (1ULL << 44) ? 44 : ((n) - 1) & (1ULL << 43) ? 43 : ((n) - 1) & (1ULL << 42) ? 42 : ((n) - 1) & (1ULL << 41) ? 41 : ((n) - 1) & (1ULL << 40) ? 40 : ((n) - 1) & (1ULL << 39) ? 39 : ((n) - 1) & (1ULL << 38) ? 38 : ((n) - 1) & (1ULL << 37) ? 37 : ((n) - 1) & (1ULL << 36) ? 36 : ((n) - 1) & (1ULL << 35) ? 35 : ((n) - 1) & (1ULL << 34) ? 34 : ((n) - 1) & (1ULL << 33) ? 33 : ((n) - 1) & (1ULL << 32) ? 32 : ((n) - 1) & (1ULL << 31) ? 31 : ((n) - 1) & (1ULL << 30) ? 30 : ((n) - 1) & (1ULL << 29) ? 29 : ((n) - 1) & (1ULL << 28) ? 28 : ((n) - 1) & (1ULL << 27) ? 27 : ((n) - 1) & (1ULL << 26) ? 26 : ((n) - 1) & (1ULL << 25) ? 25 : ((n) - 1) & (1ULL << 24) ? 24 : ((n) - 1) & (1ULL << 23) ? 23 : ((n) - 1) & (1ULL << 22) ? 22 : ((n) - 1) & (1ULL << 21) ? 21 : ((n) - 1) & (1ULL << 20) ? 20 : ((n) - 1) & (1ULL << 19) ? 19 : ((n) - 1) & (1ULL << 18) ? 18 : ((n) - 1) & (1ULL << 17) ? 17 : ((n) - 1) & (1ULL << 16) ? 16 : ((n) - 1) & (1ULL << 15) ? 15 : ((n) - 1) & (1ULL << 14) ? 14 : ((n) - 1) & (1ULL << 13) ? 13 : ((n) - 1) & (1ULL << 12) ? 12 : ((n) - 1) & (1ULL << 11) ? 11 : ((n) - 1) & (1ULL << 10) ? 10 : ((n) - 1) & (1ULL << 9) ? 9 : ((n) - 1) & (1ULL << 8) ? 8 : ((n) - 1) & (1ULL << 7) ? 7 : ((n) - 1) & (1ULL << 6) ? 6 : ((n) - 1) & (1ULL << 5) ? 5 : ((n) - 1) & (1ULL << 4) ? 4 : ((n) - 1) & (1ULL << 3) ? 3 : ((n) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((n) - 1) <= 4) ? __ilog2_u32((n) - 1) : __ilog2_u64((n) - 1) ) + 1) : __order_base_2(n) );
}
# 14 "../include/linux/kernel.h" 2
# 1 "../include/linux/typecheck.h" 1
# 15 "../include/linux/kernel.h" 2
# 1 "../include/linux/printk.h" 1





# 1 "../include/linux/init.h" 1
# 116 "../include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);


typedef int initcall_entry_t;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) initcall_t initcall_from_entry(initcall_entry_t *entry)
{
 return offset_to_ptr(entry);
}
# 135 "../include/linux/init.h"
extern initcall_entry_t __con_initcall_start[], __con_initcall_end[];


typedef void (*ctor_fn_t)(void);

struct file_system_type;


extern int do_one_initcall(initcall_t fn);
extern char __attribute__((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) init_rootfs(void);
extern struct file_system_type rootfs_fs_type;


extern bool rodata_enabled;


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 7 "../include/linux/printk.h" 2
# 1 "../include/linux/kern_levels.h" 1
# 8 "../include/linux/printk.h" 2

# 1 "../include/linux/cache.h" 1




# 1 "../include/uapi/linux/kernel.h" 1




# 1 "../include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "../include/uapi/linux/kernel.h" 2
# 6 "../include/linux/cache.h" 2
# 1 "../arch/arm64/include/asm/cache.h" 1







# 1 "../arch/arm64/include/asm/cputype.h" 1
# 124 "../arch/arm64/include/asm/cputype.h"
# 1 "../arch/arm64/include/asm/sysreg.h" 1
# 125 "../arch/arm64/include/asm/cputype.h" 2
# 137 "../arch/arm64/include/asm/cputype.h"
struct midr_range {
 u32 model;
 u32 rv_min;
 u32 rv_max;
};
# 154 "../arch/arm64/include/asm/cputype.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool midr_is_cpu_model_range(u32 midr, u32 model, u32 rv_min,
        u32 rv_max)
{
 u32 _model = midr & ((0xff << 24) | (0xfff << 4) | (0xf << 16));
 u32 rv = midr & (0xf | (0xf << 20));

 return _model == model && rv >= rv_min && rv <= rv_max;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_midr_in_range(u32 midr, struct midr_range const *range)
{
 return midr_is_cpu_model_range(midr, range->model,
           range->rv_min, range->rv_max);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_midr_in_range_list(u32 midr, struct midr_range const *ranges)
{
 while (ranges->model)
  if (is_midr_in_range(midr, ranges++))
   return true;
 return false;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __attribute__((__const__)) read_cpuid_id(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __attribute__((__const__)) read_cpuid_mpidr(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((0) << 8) | ((5) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __attribute__((__const__)) read_cpuid_implementor(void)
{
 return (((read_cpuid_id()) & (0xff << 24)) >> 24);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __attribute__((__const__)) read_cpuid_part_number(void)
{
 return (((read_cpuid_id()) & (0xfff << 4)) >> 4);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __attribute__((__const__)) read_cpuid_cachetype(void)
{
 return ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((3) << 16) | ((0) << 12) | ((0) << 8) | ((1) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });
}
# 9 "../arch/arm64/include/asm/cache.h" 2
# 60 "../arch/arm64/include/asm/cache.h"
extern unsigned long __icache_flags;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int icache_is_aliasing(void)
{
 return test_bit(0, &__icache_flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int icache_is_vpipt(void)
{
 return test_bit(1, &__icache_flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 cache_type_cwg(void)
{
 return (read_cpuid_cachetype() >> 24) & 15;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cache_line_size_of_cpu(void)
{
 u32 cwg = cache_type_cwg();

 return cwg ? 4 << cwg : (128);
}

int cache_line_size(void);
# 108 "../arch/arm64/include/asm/cache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __attribute__((__const__)) read_cpuid_effective_cachetype(void)
{
 u32 ctr = read_cpuid_cachetype();

 if (!(ctr & ((((1UL))) << (28)))) {
  u64 clidr = ({ u64 __val; asm volatile("mrs %0, " "clidr_el1" : "=r" (__val)); __val; });

  if ((((clidr) >> 24) & 0x7) == 0 ||
      ((((clidr) >> 21) & 0x7) == 0 && (((clidr) >> 27) & 0x7) == 0))
   ctr |= ((((1UL))) << (28));
 }

 return ctr;
}
# 7 "../include/linux/cache.h" 2
# 10 "../include/linux/printk.h" 2

extern const char linux_banner[];
extern const char linux_proc_banner[];



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 62 "../include/linux/printk.h"
extern int console_printk[];






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}



extern char devkmsg_log_str[];
struct ctl_table;

extern int suppress_printk;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 145 "../include/linux/printk.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
void early_printk(const char *s, ...) { }



extern void printk_nmi_enter(void);
extern void printk_nmi_exit(void);
extern void printk_nmi_direct_enter(void);
extern void printk_nmi_direct_exit(void);
# 162 "../include/linux/printk.h"
           __attribute__((__format__(printf, 5, 0)))
int vprintk_emit(int facility, int level,
   const char *dict, size_t dictlen,
   const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((__format__(printf, 1, 2))) __attribute__((__cold__))
int printk(const char *fmt, ...);




__attribute__((__format__(printf, 1, 2))) __attribute__((__cold__)) int printk_deferred(const char *fmt, ...);






extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_log_buf(int early);
__attribute__((__format__(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void dump_stack(void) __attribute__((__cold__));
extern void printk_safe_init(void);
extern void printk_safe_flush(void);
extern void printk_safe_flush_on_panic(void);
# 285 "../include/linux/printk.h"
extern int kptr_restrict;
# 477 "../include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);




extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
     const void *buf, size_t len);
# 522 "../include/linux/printk.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 16 "../include/linux/kernel.h" 2


# 1 "./arch/arm64/include/generated/asm/div64.h" 1
# 1 "../include/asm-generic/div64.h" 1
# 2 "./arch/arm64/include/generated/asm/div64.h" 2
# 19 "../include/linux/kernel.h" 2

# 1 "./arch/arm64/include/generated/asm/div64.h" 1
# 21 "../include/linux/kernel.h" 2
# 200 "../include/linux/kernel.h"
struct completion;
struct pt_regs;
struct user;
# 256 "../include/linux/kernel.h"
  static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ___might_sleep(const char *file, int line,
       int preempt_offset) { }
  static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __might_sleep(const char *file, int line,
       int preempt_offset) { }
# 306 "../include/linux/kernel.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void might_fault(void) { }


extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(int state);
__attribute__((__format__(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((__noreturn__)) __attribute__((__cold__));
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
void print_oops_end_marker(void);
extern int oops_may_print(void);
void do_exit(long error_code) __attribute__((__noreturn__));
void complete_and_exit(struct completion *, long) __attribute__((__noreturn__));




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_error_report(struct pt_regs *regs, const char *err)
{ }



int __attribute__((__warn_unused_result__)) _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) _kstrtol(const char *s, unsigned int base, long *res);

int __attribute__((__warn_unused_result__)) kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll(const char *s, unsigned int base, long long *res);
# 361 "../include/linux/kernel.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 390 "../include/linux/kernel.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtouint(const char *s, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int __attribute__((__warn_unused_result__)) kstrtou16(const char *s, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16(const char *s, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8(const char *s, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8(const char *s, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool(const char *s, bool *res);

int __attribute__((__warn_unused_result__)) kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int __attribute__((__warn_unused_result__)) kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int __attribute__((__warn_unused_result__)) kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int __attribute__((__warn_unused_result__)) kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int __attribute__((__warn_unused_result__)) kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int __attribute__((__warn_unused_result__)) kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int __attribute__((__warn_unused_result__)) kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int __attribute__((__warn_unused_result__)) kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int __attribute__((__warn_unused_result__)) kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int __attribute__((__warn_unused_result__)) kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int __attribute__((__warn_unused_result__)) kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}



extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

extern int num_to_str(char *buf, int size,
        unsigned long long num, unsigned int width);



extern __attribute__((__format__(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((__format__(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((__format__(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((__format__(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((__format__(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((__format__(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((__format__(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int init_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

u64 int_pow(u64 base, unsigned int exp);
unsigned long int_sqrt(unsigned long);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 int_sqrt64(u64 x)
{
 return (u32)int_sqrt(x);
}


extern void bust_spinlocks(int yes);
extern int oops_in_progress;
extern int panic_timeout;
extern unsigned long panic_print;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;
extern int sysctl_panic_on_rcu_stall;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
extern const char *print_tainted(void);
enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE
};
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND,
} system_state;
# 600 "../include/linux/kernel.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[18];

extern const char hex_asc[];



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int __attribute__((__warn_unused_result__)) hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 656 "../include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};
# 806 "../include/linux/kernel.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_start(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_stop(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_dump_stack(int skip) { }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_on(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_off(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int tracing_is_on(void) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_snapshot(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracing_snapshot_alloc(void) { }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
int trace_printk(const char *fmt, ...)
{
 return 0;
}
static __attribute__((__format__(printf, 1, 0))) inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
ftrace_vprintk(const char *fmt, va_list ap)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_dump(enum ftrace_dump_mode oops_dump_mode) { }
# 23 "../include/linux/delay.h" 2

extern unsigned long loops_per_jiffy;


# 1 "./arch/arm64/include/generated/asm/delay.h" 1
# 1 "../include/asm-generic/delay.h" 1





extern void __bad_udelay(void);
extern void __bad_ndelay(void);

extern void __udelay(unsigned long usecs);
extern void __ndelay(unsigned long nsecs);
extern void __const_udelay(unsigned long xloops);
extern void __delay(unsigned long loops);
# 2 "./arch/arm64/include/generated/asm/delay.h" 2
# 27 "../include/linux/delay.h" 2
# 56 "../include/linux/delay.h"
extern unsigned long lpj_fine;
void calibrate_delay(void);
void __attribute__((weak)) calibration_delay_done(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);
void usleep_range(unsigned long min, unsigned long max);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}
# 25 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../include/linux/firmware.h" 1






# 1 "../include/linux/gfp.h" 1




# 1 "../include/linux/mmdebug.h" 1




# 1 "../include/linux/bug.h" 1




# 1 "../arch/arm64/include/asm/bug.h" 1
# 12 "../arch/arm64/include/asm/bug.h"
# 1 "../arch/arm64/include/asm/asm-bug.h" 1







# 1 "../arch/arm64/include/asm/brk-imm.h" 1
# 9 "../arch/arm64/include/asm/asm-bug.h" 2
# 13 "../arch/arm64/include/asm/bug.h" 2
# 26 "../arch/arm64/include/asm/bug.h"
# 1 "../include/asm-generic/bug.h" 1
# 23 "../include/asm-generic/bug.h"
struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 106 "../include/asm-generic/bug.h"
extern __attribute__((__format__(printf, 1, 2))) void __warn_printk(const char *fmt, ...);
# 116 "../include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 27 "../arch/arm64/include/asm/bug.h" 2
# 6 "../include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "../include/linux/bug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);

void generic_bug_clear_once(void);
# 70 "../include/linux/bug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool check_data_corruption(bool v) { return v; }
# 6 "../include/linux/mmdebug.h" 2


struct page;
struct vm_area_struct;
struct mm_struct;

extern void dump_page(struct page *page, const char *reason);
extern void __dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 6 "../include/linux/gfp.h" 2
# 1 "../include/linux/mmzone.h" 1







# 1 "../include/linux/spinlock.h" 1
# 51 "../include/linux/spinlock.h"
# 1 "../include/linux/preempt.h" 1
# 11 "../include/linux/preempt.h"
# 1 "../include/linux/list.h" 1






# 1 "../include/linux/poison.h" 1
# 8 "../include/linux/list.h" 2
# 26 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 list->prev = list;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_add_valid(struct list_head *new,
    struct list_head *prev,
    struct list_head *next)
{
 return true;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __list_del_entry_valid(struct list_head *entry)
{
 return true;
}
# 56 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (new) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 77 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 91 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 103 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (next) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 117 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_clearprev(struct list_head *entry)
{
 __list_del(entry->prev, entry->next);
 entry->prev = ((void *)0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + (0xdead000000000000UL));
 entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 151 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_init(struct list_head *old,
     struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_swap(struct list_head *entry1,
        struct list_head *entry2)
{
 struct list_head *pos = entry2->prev;

 list_del(entry2);
 list_replace(entry1, entry2);
 if (pos == entry1)
  pos = entry2;
 list_add(entry1, pos);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}
# 226 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_bulk_move_tail(struct list_head *head,
           struct list_head *first,
           struct list_head *last)
{
 first->prev->next = last->next;
 last->next->prev = first->prev;

 head->prev->next = first;
 first->prev = head->prev;

 last->next = head;
 head->prev = last;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_first(const struct list_head *list,
     const struct list_head *head)
{
 return list->prev == head;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty(const struct list_head *head)
{
 return ({ union { typeof(head->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(head->next), __u.__c, sizeof(head->next)); else __read_once_size_nocheck(&(head->next), __u.__c, sizeof(head->next)); do { } while (0); __u.__val; }) == head;
}
# 284 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = head->next;
 return (next == head) && (next == head->prev);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}
# 311 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_rotate_to_front(struct list_head *list,
     struct list_head *head)
{





 list_move_tail(head, list);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 357 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 385 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 446 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 463 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 741 "../include/linux/list.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hlist_empty(const struct hlist_head *h)
{
 return !({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 n->next = first;
 if (first)
  first->pprev = &n->next;
 ({ union { typeof(h->first) __val; char __c[1]; } __u = { .__val = ( typeof(h->first)) (n) }; __write_once_size(&(h->first), __u.__c, sizeof(h->first)); __u.__val; });
 n->pprev = &h->first;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 next->pprev = &n->next;
 ({ union { typeof(*(n->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof(*(n->pprev))) (n) }; __write_once_size(&(*(n->pprev)), __u.__c, sizeof(*(n->pprev))); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 n->next = prev->next;
 prev->next = n;
 n->pprev = &prev->next;

 if (n->next)
  n->next->pprev = &n->next;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 12 "../include/linux/preempt.h" 2
# 78 "../include/linux/preempt.h"
# 1 "../arch/arm64/include/asm/preempt.h" 1




# 1 "../include/linux/thread_info.h" 1
# 13 "../include/linux/thread_info.h"
# 1 "../include/linux/restart_block.h" 1
# 10 "../include/linux/restart_block.h"
# 1 "../include/linux/time64.h" 1




# 1 "../include/linux/math64.h" 1





# 1 "./arch/arm64/include/generated/asm/div64.h" 1
# 7 "../include/linux/math64.h" 2
# 24 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 38 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 52 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}
# 65 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}
# 77 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 123 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}
# 136 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u64_shr(u64 a, u64 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}
# 256 "../include/linux/math64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}
# 6 "../include/linux/time64.h" 2

typedef __s64 time64_t;
typedef __u64 timeu64_t;


# 1 "../include/uapi/linux/time.h" 1





# 1 "../include/uapi/linux/time_types.h" 1






struct __kernel_timespec {
 __kernel_time64_t tv_sec;
 long long tv_nsec;
};

struct __kernel_itimerspec {
 struct __kernel_timespec it_interval;
 struct __kernel_timespec it_value;
};
# 25 "../include/uapi/linux/time_types.h"
struct __kernel_old_timeval {
 __kernel_long_t tv_sec;
 __kernel_long_t tv_usec;
};


struct __kernel_sock_timeval {
 __s64 tv_sec;
 __s64 tv_usec;
};
# 7 "../include/uapi/linux/time.h" 2



struct timespec {
 __kernel_time_t tv_sec;
 long tv_nsec;
};


struct timeval {
 __kernel_time_t tv_sec;
 __kernel_suseconds_t tv_usec;
};

struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 34 "../include/uapi/linux/time.h"
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};

struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};
# 11 "../include/linux/time64.h" 2

struct timespec64 {
 time64_t tv_sec;
 long tv_nsec;
};

struct itimerspec64 {
 struct timespec64 it_interval;
 struct timespec64 it_value;
};
# 49 "../include/linux/time64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_equal(const struct timespec64 *a,
       const struct timespec64 *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec64_compare(const struct timespec64 *lhs, const struct timespec64 *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern void set_normalized_timespec64(struct timespec64 *ts, time64_t sec, s64 nsec);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_add(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec64_sub(struct timespec64 lhs,
      struct timespec64 rhs)
{
 struct timespec64 ts_delta;
 set_normalized_timespec64(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid(const struct timespec64 *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_strict(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec64_valid_settod(const struct timespec64 *ts)
{
 if (!timespec64_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= ((((s64)~((u64)1 << 63)) / 1000000000L) - (30LL * 365 * 24 *3600)))
  return false;
 return true;
}
# 133 "../include/linux/time64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec64_to_ns(const struct timespec64 *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec64 ns_to_timespec64(const s64 nsec);
# 154 "../include/linux/time64.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec64_add_ns(struct timespec64 *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}





extern struct timespec64 timespec64_add_safe(const struct timespec64 lhs,
      const struct timespec64 rhs);
# 11 "../include/linux/restart_block.h" 2

struct timespec;
struct old_timespec32;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,
 TT_COMPAT = 2,
};




struct restart_block {
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct __kernel_timespec *rmtp;
    struct old_timespec32 *compat_rmtp;
   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 14 "../include/linux/thread_info.h" 2







# 1 "../arch/arm64/include/asm/current.h" 1








struct task_struct;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct task_struct *get_current(void)
{
 unsigned long sp_el0;

 asm ("mrs %0, sp_el0" : "=r" (sp_el0));

 return (struct task_struct *)sp_el0;
}
# 22 "../include/linux/thread_info.h" 2
# 31 "../include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};


# 1 "../arch/arm64/include/asm/thread_info.h" 1
# 15 "../arch/arm64/include/asm/thread_info.h"
struct task_struct;


# 1 "../arch/arm64/include/asm/memory.h" 1
# 15 "../arch/arm64/include/asm/memory.h"
# 1 "../include/linux/sizes.h" 1
# 16 "../arch/arm64/include/asm/memory.h" 2


# 1 "../arch/arm64/include/asm/page-def.h" 1
# 19 "../arch/arm64/include/asm/memory.h" 2
# 175 "../arch/arm64/include/asm/memory.h"
extern u64 vabits_actual;





extern s64 physvirt_offset;
extern s64 memstart_addr;




extern u64 kimage_vaddr;


extern u64 kimage_voffset;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kaslr_offset(void)
{
 return kimage_vaddr - (((((((-((((1UL))) << ((((48))) - 1))))) + (0x08000000))) + (0x08000000)));
}
# 231 "../arch/arm64/include/asm/memory.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const void *__tag_set(const void *addr, u8 tag)
{
 u64 __addr = (u64)addr & ~0UL;
 return (const void *)(__addr | 0UL);
}
# 284 "../arch/arm64/include/asm/memory.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t virt_to_phys(const volatile void *x)
{
 return ({ phys_addr_t __x = (phys_addr_t)(((unsigned long)(x))); (!(((u64)__x) & ((((1UL))) << (vabits_actual - 1)))) ? (((__x) + physvirt_offset)) : ((__x) - kimage_voffset); });
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *phys_to_virt(phys_addr_t x)
{
 return (void *)(((unsigned long)((x) - physvirt_offset)));
}
# 347 "../arch/arm64/include/asm/memory.h"
# 1 "../include/asm-generic/memory_model.h" 1




# 1 "../include/linux/pfn.h" 1
# 13 "../include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "../include/asm-generic/memory_model.h" 2
# 348 "../arch/arm64/include/asm/memory.h" 2
# 18 "../arch/arm64/include/asm/thread_info.h" 2
# 1 "../arch/arm64/include/asm/stack_pointer.h" 1







register unsigned long current_stack_pointer asm ("sp");
# 19 "../arch/arm64/include/asm/thread_info.h" 2
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 20 "../arch/arm64/include/asm/thread_info.h" 2

typedef unsigned long mm_segment_t;




struct thread_info {
 unsigned long flags;
 mm_segment_t addr_limit;

 u64 ttbr0;

 union {
  u64 preempt_count;
  struct {




   u32 count;
   u32 need_resched;

  } preempt;
 };
};
# 53 "../arch/arm64/include/asm/thread_info.h"
void arch_setup_new_exec(void);


void arch_release_task_struct(struct task_struct *tsk);
# 39 "../include/linux/thread_info.h" 2
# 53 "../include/linux/thread_info.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_bit(flag, (unsigned long *)&ti->flags);
}
# 103 "../include/linux/thread_info.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{
 return 0;
}



extern void __check_object_size(const void *ptr, unsigned long n,
     bool to_user);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void check_object_size(const void *ptr, unsigned long n,
           bool to_user)
{
 if (!__builtin_constant_p(n))
  __check_object_size(ptr, n, to_user);
}






extern void
__bad_copy_from(void);
extern void
__bad_copy_to(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __warn_printk("Buffer overflow detected (%d < %lu)!\n", size, count); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/thread_info.h\"; .popsection; .long 14472b - 14470b; .short 134; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = -1;
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 check_object_size(addr, bytes, is_source);
 return true;
}
# 6 "../arch/arm64/include/asm/preempt.h" 2




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int preempt_count(void)
{
 return ({ union { typeof(((struct thread_info *)get_current())->preempt.count) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); else __read_once_size_nocheck(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); do { } while (0); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void preempt_count_set(u64 pc)
{

 ({ union { typeof(((struct thread_info *)get_current())->preempt.count) __val; char __c[1]; } __u = { .__val = ( typeof(((struct thread_info *)get_current())->preempt.count)) (pc) }; __write_once_size(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); __u.__val; });
}
# 29 "../arch/arm64/include/asm/preempt.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_preempt_need_resched(void)
{
 ((struct thread_info *)get_current())->preempt.need_resched = 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_preempt_need_resched(void)
{
 ((struct thread_info *)get_current())->preempt.need_resched = 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_preempt_need_resched(void)
{
 return !((struct thread_info *)get_current())->preempt.need_resched;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __preempt_count_add(int val)
{
 u32 pc = ({ union { typeof(((struct thread_info *)get_current())->preempt.count) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); else __read_once_size_nocheck(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); do { } while (0); __u.__val; });
 pc += val;
 ({ union { typeof(((struct thread_info *)get_current())->preempt.count) __val; char __c[1]; } __u = { .__val = ( typeof(((struct thread_info *)get_current())->preempt.count)) (pc) }; __write_once_size(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __preempt_count_sub(int val)
{
 u32 pc = ({ union { typeof(((struct thread_info *)get_current())->preempt.count) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); else __read_once_size_nocheck(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); do { } while (0); __u.__val; });
 pc -= val;
 ({ union { typeof(((struct thread_info *)get_current())->preempt.count) __val; char __c[1]; } __u = { .__val = ( typeof(((struct thread_info *)get_current())->preempt.count)) (pc) }; __write_once_size(&(((struct thread_info *)get_current())->preempt.count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt.count)); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __preempt_count_dec_and_test(void)
{
 struct thread_info *ti = ((struct thread_info *)get_current());
 u64 pc = ({ union { typeof(ti->preempt_count) __val; char __c[1]; } __u; if (1) __read_once_size(&(ti->preempt_count), __u.__c, sizeof(ti->preempt_count)); else __read_once_size_nocheck(&(ti->preempt_count), __u.__c, sizeof(ti->preempt_count)); do { } while (0); __u.__val; });


 ({ union { typeof(ti->preempt.count) __val; char __c[1]; } __u = { .__val = ( typeof(ti->preempt.count)) (--pc) }; __write_once_size(&(ti->preempt.count), __u.__c, sizeof(ti->preempt.count)); __u.__val; });
# 73 "../arch/arm64/include/asm/preempt.h"
 return !pc || !({ union { typeof(ti->preempt_count) __val; char __c[1]; } __u; if (1) __read_once_size(&(ti->preempt_count), __u.__c, sizeof(ti->preempt_count)); else __read_once_size_nocheck(&(ti->preempt_count), __u.__c, sizeof(ti->preempt_count)); do { } while (0); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool should_resched(int preempt_offset)
{
 u64 pc = ({ union { typeof(((struct thread_info *)get_current())->preempt_count) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)get_current())->preempt_count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt_count)); else __read_once_size_nocheck(&(((struct thread_info *)get_current())->preempt_count), __u.__c, sizeof(((struct thread_info *)get_current())->preempt_count)); do { } while (0); __u.__val; });
 return pc == preempt_offset;
}
# 79 "../include/linux/preempt.h" 2
# 52 "../include/linux/spinlock.h" 2


# 1 "../include/linux/irqflags.h" 1
# 16 "../include/linux/irqflags.h"
# 1 "../arch/arm64/include/asm/irqflags.h" 1







# 1 "../arch/arm64/include/asm/alternative.h" 1




# 1 "../arch/arm64/include/asm/cpucaps.h" 1
# 6 "../arch/arm64/include/asm/alternative.h" 2
# 1 "../arch/arm64/include/asm/insn.h" 1
# 32 "../arch/arm64/include/asm/insn.h"
enum aarch64_insn_encoding_class {
 AARCH64_INSN_CLS_UNKNOWN,
 AARCH64_INSN_CLS_DP_IMM,
 AARCH64_INSN_CLS_DP_REG,
 AARCH64_INSN_CLS_DP_FPSIMD,
 AARCH64_INSN_CLS_LDST,
 AARCH64_INSN_CLS_BR_SYS,

};

enum aarch64_insn_hint_op {
 AARCH64_INSN_HINT_NOP = 0x0 << 5,
 AARCH64_INSN_HINT_YIELD = 0x1 << 5,
 AARCH64_INSN_HINT_WFE = 0x2 << 5,
 AARCH64_INSN_HINT_WFI = 0x3 << 5,
 AARCH64_INSN_HINT_SEV = 0x4 << 5,
 AARCH64_INSN_HINT_SEVL = 0x5 << 5,
};

enum aarch64_insn_imm_type {
 AARCH64_INSN_IMM_ADR,
 AARCH64_INSN_IMM_26,
 AARCH64_INSN_IMM_19,
 AARCH64_INSN_IMM_16,
 AARCH64_INSN_IMM_14,
 AARCH64_INSN_IMM_12,
 AARCH64_INSN_IMM_9,
 AARCH64_INSN_IMM_7,
 AARCH64_INSN_IMM_6,
 AARCH64_INSN_IMM_S,
 AARCH64_INSN_IMM_R,
 AARCH64_INSN_IMM_N,
 AARCH64_INSN_IMM_MAX
};

enum aarch64_insn_register_type {
 AARCH64_INSN_REGTYPE_RT,
 AARCH64_INSN_REGTYPE_RN,
 AARCH64_INSN_REGTYPE_RT2,
 AARCH64_INSN_REGTYPE_RM,
 AARCH64_INSN_REGTYPE_RD,
 AARCH64_INSN_REGTYPE_RA,
 AARCH64_INSN_REGTYPE_RS,
};

enum aarch64_insn_register {
 AARCH64_INSN_REG_0 = 0,
 AARCH64_INSN_REG_1 = 1,
 AARCH64_INSN_REG_2 = 2,
 AARCH64_INSN_REG_3 = 3,
 AARCH64_INSN_REG_4 = 4,
 AARCH64_INSN_REG_5 = 5,
 AARCH64_INSN_REG_6 = 6,
 AARCH64_INSN_REG_7 = 7,
 AARCH64_INSN_REG_8 = 8,
 AARCH64_INSN_REG_9 = 9,
 AARCH64_INSN_REG_10 = 10,
 AARCH64_INSN_REG_11 = 11,
 AARCH64_INSN_REG_12 = 12,
 AARCH64_INSN_REG_13 = 13,
 AARCH64_INSN_REG_14 = 14,
 AARCH64_INSN_REG_15 = 15,
 AARCH64_INSN_REG_16 = 16,
 AARCH64_INSN_REG_17 = 17,
 AARCH64_INSN_REG_18 = 18,
 AARCH64_INSN_REG_19 = 19,
 AARCH64_INSN_REG_20 = 20,
 AARCH64_INSN_REG_21 = 21,
 AARCH64_INSN_REG_22 = 22,
 AARCH64_INSN_REG_23 = 23,
 AARCH64_INSN_REG_24 = 24,
 AARCH64_INSN_REG_25 = 25,
 AARCH64_INSN_REG_26 = 26,
 AARCH64_INSN_REG_27 = 27,
 AARCH64_INSN_REG_28 = 28,
 AARCH64_INSN_REG_29 = 29,
 AARCH64_INSN_REG_FP = 29,
 AARCH64_INSN_REG_30 = 30,
 AARCH64_INSN_REG_LR = 30,
 AARCH64_INSN_REG_ZR = 31,
 AARCH64_INSN_REG_SP = 31
};

enum aarch64_insn_special_register {
 AARCH64_INSN_SPCLREG_SPSR_EL1 = 0xC200,
 AARCH64_INSN_SPCLREG_ELR_EL1 = 0xC201,
 AARCH64_INSN_SPCLREG_SP_EL0 = 0xC208,
 AARCH64_INSN_SPCLREG_SPSEL = 0xC210,
 AARCH64_INSN_SPCLREG_CURRENTEL = 0xC212,
 AARCH64_INSN_SPCLREG_DAIF = 0xDA11,
 AARCH64_INSN_SPCLREG_NZCV = 0xDA10,
 AARCH64_INSN_SPCLREG_FPCR = 0xDA20,
 AARCH64_INSN_SPCLREG_DSPSR_EL0 = 0xDA28,
 AARCH64_INSN_SPCLREG_DLR_EL0 = 0xDA29,
 AARCH64_INSN_SPCLREG_SPSR_EL2 = 0xE200,
 AARCH64_INSN_SPCLREG_ELR_EL2 = 0xE201,
 AARCH64_INSN_SPCLREG_SP_EL1 = 0xE208,
 AARCH64_INSN_SPCLREG_SPSR_INQ = 0xE218,
 AARCH64_INSN_SPCLREG_SPSR_ABT = 0xE219,
 AARCH64_INSN_SPCLREG_SPSR_UND = 0xE21A,
 AARCH64_INSN_SPCLREG_SPSR_FIQ = 0xE21B,
 AARCH64_INSN_SPCLREG_SPSR_EL3 = 0xF200,
 AARCH64_INSN_SPCLREG_ELR_EL3 = 0xF201,
 AARCH64_INSN_SPCLREG_SP_EL2 = 0xF210
};

enum aarch64_insn_variant {
 AARCH64_INSN_VARIANT_32BIT,
 AARCH64_INSN_VARIANT_64BIT
};

enum aarch64_insn_condition {
 AARCH64_INSN_COND_EQ = 0x0,
 AARCH64_INSN_COND_NE = 0x1,
 AARCH64_INSN_COND_CS = 0x2,
 AARCH64_INSN_COND_CC = 0x3,
 AARCH64_INSN_COND_MI = 0x4,
 AARCH64_INSN_COND_PL = 0x5,
 AARCH64_INSN_COND_VS = 0x6,
 AARCH64_INSN_COND_VC = 0x7,
 AARCH64_INSN_COND_HI = 0x8,
 AARCH64_INSN_COND_LS = 0x9,
 AARCH64_INSN_COND_GE = 0xa,
 AARCH64_INSN_COND_LT = 0xb,
 AARCH64_INSN_COND_GT = 0xc,
 AARCH64_INSN_COND_LE = 0xd,
 AARCH64_INSN_COND_AL = 0xe,
};

enum aarch64_insn_branch_type {
 AARCH64_INSN_BRANCH_NOLINK,
 AARCH64_INSN_BRANCH_LINK,
 AARCH64_INSN_BRANCH_RETURN,
 AARCH64_INSN_BRANCH_COMP_ZERO,
 AARCH64_INSN_BRANCH_COMP_NONZERO,
};

enum aarch64_insn_size_type {
 AARCH64_INSN_SIZE_8,
 AARCH64_INSN_SIZE_16,
 AARCH64_INSN_SIZE_32,
 AARCH64_INSN_SIZE_64,
};

enum aarch64_insn_ldst_type {
 AARCH64_INSN_LDST_LOAD_REG_OFFSET,
 AARCH64_INSN_LDST_STORE_REG_OFFSET,
 AARCH64_INSN_LDST_LOAD_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_PRE_INDEX,
 AARCH64_INSN_LDST_LOAD_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_STORE_PAIR_POST_INDEX,
 AARCH64_INSN_LDST_LOAD_EX,
 AARCH64_INSN_LDST_STORE_EX,
};

enum aarch64_insn_adsb_type {
 AARCH64_INSN_ADSB_ADD,
 AARCH64_INSN_ADSB_SUB,
 AARCH64_INSN_ADSB_ADD_SETFLAGS,
 AARCH64_INSN_ADSB_SUB_SETFLAGS
};

enum aarch64_insn_movewide_type {
 AARCH64_INSN_MOVEWIDE_ZERO,
 AARCH64_INSN_MOVEWIDE_KEEP,
 AARCH64_INSN_MOVEWIDE_INVERSE
};

enum aarch64_insn_bitfield_type {
 AARCH64_INSN_BITFIELD_MOVE,
 AARCH64_INSN_BITFIELD_MOVE_UNSIGNED,
 AARCH64_INSN_BITFIELD_MOVE_SIGNED
};

enum aarch64_insn_data1_type {
 AARCH64_INSN_DATA1_REVERSE_16,
 AARCH64_INSN_DATA1_REVERSE_32,
 AARCH64_INSN_DATA1_REVERSE_64,
};

enum aarch64_insn_data2_type {
 AARCH64_INSN_DATA2_UDIV,
 AARCH64_INSN_DATA2_SDIV,
 AARCH64_INSN_DATA2_LSLV,
 AARCH64_INSN_DATA2_LSRV,
 AARCH64_INSN_DATA2_ASRV,
 AARCH64_INSN_DATA2_RORV,
};

enum aarch64_insn_data3_type {
 AARCH64_INSN_DATA3_MADD,
 AARCH64_INSN_DATA3_MSUB,
};

enum aarch64_insn_logic_type {
 AARCH64_INSN_LOGIC_AND,
 AARCH64_INSN_LOGIC_BIC,
 AARCH64_INSN_LOGIC_ORR,
 AARCH64_INSN_LOGIC_ORN,
 AARCH64_INSN_LOGIC_EOR,
 AARCH64_INSN_LOGIC_EON,
 AARCH64_INSN_LOGIC_AND_SETFLAGS,
 AARCH64_INSN_LOGIC_BIC_SETFLAGS
};

enum aarch64_insn_prfm_type {
 AARCH64_INSN_PRFM_TYPE_PLD,
 AARCH64_INSN_PRFM_TYPE_PLI,
 AARCH64_INSN_PRFM_TYPE_PST,
};

enum aarch64_insn_prfm_target {
 AARCH64_INSN_PRFM_TARGET_L1,
 AARCH64_INSN_PRFM_TARGET_L2,
 AARCH64_INSN_PRFM_TARGET_L3,
};

enum aarch64_insn_prfm_policy {
 AARCH64_INSN_PRFM_POLICY_KEEP,
 AARCH64_INSN_PRFM_POLICY_STRM,
};

enum aarch64_insn_adr_type {
 AARCH64_INSN_ADR_TYPE_ADRP,
 AARCH64_INSN_ADR_TYPE_ADR,
};
# 270 "../arch/arm64/include/asm/insn.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adr(u32 code) { do { extern void __compiletime_assert_270(void) ; if (!(!(~(0x9F000000) & (0x10000000)))) __compiletime_assert_270(); } while (0); return (code & (0x9F000000)) == (0x10000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adr_value(void) { return (0x10000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adrp(u32 code) { do { extern void __compiletime_assert_271(void) ; if (!(!(~(0x9F000000) & (0x90000000)))) __compiletime_assert_271(); } while (0); return (code & (0x9F000000)) == (0x90000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adrp_value(void) { return (0x90000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_prfm(u32 code) { do { extern void __compiletime_assert_272(void) ; if (!(!(~(0x3FC00000) & (0x39800000)))) __compiletime_assert_272(); } while (0); return (code & (0x3FC00000)) == (0x39800000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_prfm_value(void) { return (0x39800000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_prfm_lit(u32 code) { do { extern void __compiletime_assert_273(void) ; if (!(!(~(0xFF000000) & (0xD8000000)))) __compiletime_assert_273(); } while (0); return (code & (0xFF000000)) == (0xD8000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_prfm_lit_value(void) { return (0xD8000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_str_reg(u32 code) { do { extern void __compiletime_assert_274(void) ; if (!(!(~(0x3FE0EC00) & (0x38206800)))) __compiletime_assert_274(); } while (0); return (code & (0x3FE0EC00)) == (0x38206800); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_str_reg_value(void) { return (0x38206800); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldadd(u32 code) { do { extern void __compiletime_assert_275(void) ; if (!(!(~(0x3F20FC00) & (0x38200000)))) __compiletime_assert_275(); } while (0); return (code & (0x3F20FC00)) == (0x38200000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldadd_value(void) { return (0x38200000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldr_reg(u32 code) { do { extern void __compiletime_assert_276(void) ; if (!(!(~(0x3FE0EC00) & (0x38606800)))) __compiletime_assert_276(); } while (0); return (code & (0x3FE0EC00)) == (0x38606800); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldr_reg_value(void) { return (0x38606800); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldr_lit(u32 code) { do { extern void __compiletime_assert_277(void) ; if (!(!(~(0xBF000000) & (0x18000000)))) __compiletime_assert_277(); } while (0); return (code & (0xBF000000)) == (0x18000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldr_lit_value(void) { return (0x18000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldrsw_lit(u32 code) { do { extern void __compiletime_assert_278(void) ; if (!(!(~(0xFF000000) & (0x98000000)))) __compiletime_assert_278(); } while (0); return (code & (0xFF000000)) == (0x98000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldrsw_lit_value(void) { return (0x98000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_exclusive(u32 code) { do { extern void __compiletime_assert_279(void) ; if (!(!(~(0x3F800000) & (0x08000000)))) __compiletime_assert_279(); } while (0); return (code & (0x3F800000)) == (0x08000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_exclusive_value(void) { return (0x08000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_load_ex(u32 code) { do { extern void __compiletime_assert_280(void) ; if (!(!(~(0x3F400000) & (0x08400000)))) __compiletime_assert_280(); } while (0); return (code & (0x3F400000)) == (0x08400000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_load_ex_value(void) { return (0x08400000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_store_ex(u32 code) { do { extern void __compiletime_assert_281(void) ; if (!(!(~(0x3F400000) & (0x08000000)))) __compiletime_assert_281(); } while (0); return (code & (0x3F400000)) == (0x08000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_store_ex_value(void) { return (0x08000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_stp_post(u32 code) { do { extern void __compiletime_assert_282(void) ; if (!(!(~(0x7FC00000) & (0x28800000)))) __compiletime_assert_282(); } while (0); return (code & (0x7FC00000)) == (0x28800000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_stp_post_value(void) { return (0x28800000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldp_post(u32 code) { do { extern void __compiletime_assert_283(void) ; if (!(!(~(0x7FC00000) & (0x28C00000)))) __compiletime_assert_283(); } while (0); return (code & (0x7FC00000)) == (0x28C00000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldp_post_value(void) { return (0x28C00000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_stp_pre(u32 code) { do { extern void __compiletime_assert_284(void) ; if (!(!(~(0x7FC00000) & (0x29800000)))) __compiletime_assert_284(); } while (0); return (code & (0x7FC00000)) == (0x29800000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_stp_pre_value(void) { return (0x29800000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ldp_pre(u32 code) { do { extern void __compiletime_assert_285(void) ; if (!(!(~(0x7FC00000) & (0x29C00000)))) __compiletime_assert_285(); } while (0); return (code & (0x7FC00000)) == (0x29C00000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ldp_pre_value(void) { return (0x29C00000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_add_imm(u32 code) { do { extern void __compiletime_assert_286(void) ; if (!(!(~(0x7F000000) & (0x11000000)))) __compiletime_assert_286(); } while (0); return (code & (0x7F000000)) == (0x11000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_add_imm_value(void) { return (0x11000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adds_imm(u32 code) { do { extern void __compiletime_assert_287(void) ; if (!(!(~(0x7F000000) & (0x31000000)))) __compiletime_assert_287(); } while (0); return (code & (0x7F000000)) == (0x31000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adds_imm_value(void) { return (0x31000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sub_imm(u32 code) { do { extern void __compiletime_assert_288(void) ; if (!(!(~(0x7F000000) & (0x51000000)))) __compiletime_assert_288(); } while (0); return (code & (0x7F000000)) == (0x51000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sub_imm_value(void) { return (0x51000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_subs_imm(u32 code) { do { extern void __compiletime_assert_289(void) ; if (!(!(~(0x7F000000) & (0x71000000)))) __compiletime_assert_289(); } while (0); return (code & (0x7F000000)) == (0x71000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_subs_imm_value(void) { return (0x71000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_movn(u32 code) { do { extern void __compiletime_assert_290(void) ; if (!(!(~(0x7F800000) & (0x12800000)))) __compiletime_assert_290(); } while (0); return (code & (0x7F800000)) == (0x12800000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_movn_value(void) { return (0x12800000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sbfm(u32 code) { do { extern void __compiletime_assert_291(void) ; if (!(!(~(0x7F800000) & (0x13000000)))) __compiletime_assert_291(); } while (0); return (code & (0x7F800000)) == (0x13000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sbfm_value(void) { return (0x13000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bfm(u32 code) { do { extern void __compiletime_assert_292(void) ; if (!(!(~(0x7F800000) & (0x33000000)))) __compiletime_assert_292(); } while (0); return (code & (0x7F800000)) == (0x33000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bfm_value(void) { return (0x33000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_movz(u32 code) { do { extern void __compiletime_assert_293(void) ; if (!(!(~(0x7F800000) & (0x52800000)))) __compiletime_assert_293(); } while (0); return (code & (0x7F800000)) == (0x52800000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_movz_value(void) { return (0x52800000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ubfm(u32 code) { do { extern void __compiletime_assert_294(void) ; if (!(!(~(0x7F800000) & (0x53000000)))) __compiletime_assert_294(); } while (0); return (code & (0x7F800000)) == (0x53000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ubfm_value(void) { return (0x53000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_movk(u32 code) { do { extern void __compiletime_assert_295(void) ; if (!(!(~(0x7F800000) & (0x72800000)))) __compiletime_assert_295(); } while (0); return (code & (0x7F800000)) == (0x72800000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_movk_value(void) { return (0x72800000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_add(u32 code) { do { extern void __compiletime_assert_296(void) ; if (!(!(~(0x7F200000) & (0x0B000000)))) __compiletime_assert_296(); } while (0); return (code & (0x7F200000)) == (0x0B000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_add_value(void) { return (0x0B000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_adds(u32 code) { do { extern void __compiletime_assert_297(void) ; if (!(!(~(0x7F200000) & (0x2B000000)))) __compiletime_assert_297(); } while (0); return (code & (0x7F200000)) == (0x2B000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_adds_value(void) { return (0x2B000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sub(u32 code) { do { extern void __compiletime_assert_298(void) ; if (!(!(~(0x7F200000) & (0x4B000000)))) __compiletime_assert_298(); } while (0); return (code & (0x7F200000)) == (0x4B000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sub_value(void) { return (0x4B000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_subs(u32 code) { do { extern void __compiletime_assert_299(void) ; if (!(!(~(0x7F200000) & (0x6B000000)))) __compiletime_assert_299(); } while (0); return (code & (0x7F200000)) == (0x6B000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_subs_value(void) { return (0x6B000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_madd(u32 code) { do { extern void __compiletime_assert_300(void) ; if (!(!(~(0x7FE08000) & (0x1B000000)))) __compiletime_assert_300(); } while (0); return (code & (0x7FE08000)) == (0x1B000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_madd_value(void) { return (0x1B000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_msub(u32 code) { do { extern void __compiletime_assert_301(void) ; if (!(!(~(0x7FE08000) & (0x1B008000)))) __compiletime_assert_301(); } while (0); return (code & (0x7FE08000)) == (0x1B008000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_msub_value(void) { return (0x1B008000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_udiv(u32 code) { do { extern void __compiletime_assert_302(void) ; if (!(!(~(0x7FE0FC00) & (0x1AC00800)))) __compiletime_assert_302(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC00800); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_udiv_value(void) { return (0x1AC00800); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_sdiv(u32 code) { do { extern void __compiletime_assert_303(void) ; if (!(!(~(0x7FE0FC00) & (0x1AC00C00)))) __compiletime_assert_303(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC00C00); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_sdiv_value(void) { return (0x1AC00C00); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_lslv(u32 code) { do { extern void __compiletime_assert_304(void) ; if (!(!(~(0x7FE0FC00) & (0x1AC02000)))) __compiletime_assert_304(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_lslv_value(void) { return (0x1AC02000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_lsrv(u32 code) { do { extern void __compiletime_assert_305(void) ; if (!(!(~(0x7FE0FC00) & (0x1AC02400)))) __compiletime_assert_305(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02400); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_lsrv_value(void) { return (0x1AC02400); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_asrv(u32 code) { do { extern void __compiletime_assert_306(void) ; if (!(!(~(0x7FE0FC00) & (0x1AC02800)))) __compiletime_assert_306(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02800); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_asrv_value(void) { return (0x1AC02800); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rorv(u32 code) { do { extern void __compiletime_assert_307(void) ; if (!(!(~(0x7FE0FC00) & (0x1AC02C00)))) __compiletime_assert_307(); } while (0); return (code & (0x7FE0FC00)) == (0x1AC02C00); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rorv_value(void) { return (0x1AC02C00); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rev16(u32 code) { do { extern void __compiletime_assert_308(void) ; if (!(!(~(0x7FFFFC00) & (0x5AC00400)))) __compiletime_assert_308(); } while (0); return (code & (0x7FFFFC00)) == (0x5AC00400); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rev16_value(void) { return (0x5AC00400); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rev32(u32 code) { do { extern void __compiletime_assert_309(void) ; if (!(!(~(0x7FFFFC00) & (0x5AC00800)))) __compiletime_assert_309(); } while (0); return (code & (0x7FFFFC00)) == (0x5AC00800); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rev32_value(void) { return (0x5AC00800); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_rev64(u32 code) { do { extern void __compiletime_assert_310(void) ; if (!(!(~(0x7FFFFC00) & (0x5AC00C00)))) __compiletime_assert_310(); } while (0); return (code & (0x7FFFFC00)) == (0x5AC00C00); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_rev64_value(void) { return (0x5AC00C00); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_and(u32 code) { do { extern void __compiletime_assert_311(void) ; if (!(!(~(0x7F200000) & (0x0A000000)))) __compiletime_assert_311(); } while (0); return (code & (0x7F200000)) == (0x0A000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_and_value(void) { return (0x0A000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bic(u32 code) { do { extern void __compiletime_assert_312(void) ; if (!(!(~(0x7F200000) & (0x0A200000)))) __compiletime_assert_312(); } while (0); return (code & (0x7F200000)) == (0x0A200000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bic_value(void) { return (0x0A200000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_orr(u32 code) { do { extern void __compiletime_assert_313(void) ; if (!(!(~(0x7F200000) & (0x2A000000)))) __compiletime_assert_313(); } while (0); return (code & (0x7F200000)) == (0x2A000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_orr_value(void) { return (0x2A000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_orn(u32 code) { do { extern void __compiletime_assert_314(void) ; if (!(!(~(0x7F200000) & (0x2A200000)))) __compiletime_assert_314(); } while (0); return (code & (0x7F200000)) == (0x2A200000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_orn_value(void) { return (0x2A200000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eor(u32 code) { do { extern void __compiletime_assert_315(void) ; if (!(!(~(0x7F200000) & (0x4A000000)))) __compiletime_assert_315(); } while (0); return (code & (0x7F200000)) == (0x4A000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eor_value(void) { return (0x4A000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eon(u32 code) { do { extern void __compiletime_assert_316(void) ; if (!(!(~(0x7F200000) & (0x4A200000)))) __compiletime_assert_316(); } while (0); return (code & (0x7F200000)) == (0x4A200000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eon_value(void) { return (0x4A200000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ands(u32 code) { do { extern void __compiletime_assert_317(void) ; if (!(!(~(0x7F200000) & (0x6A000000)))) __compiletime_assert_317(); } while (0); return (code & (0x7F200000)) == (0x6A000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ands_value(void) { return (0x6A000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bics(u32 code) { do { extern void __compiletime_assert_318(void) ; if (!(!(~(0x7F200000) & (0x6A200000)))) __compiletime_assert_318(); } while (0); return (code & (0x7F200000)) == (0x6A200000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bics_value(void) { return (0x6A200000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_and_imm(u32 code) { do { extern void __compiletime_assert_319(void) ; if (!(!(~(0x7F800000) & (0x12000000)))) __compiletime_assert_319(); } while (0); return (code & (0x7F800000)) == (0x12000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_and_imm_value(void) { return (0x12000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_orr_imm(u32 code) { do { extern void __compiletime_assert_320(void) ; if (!(!(~(0x7F800000) & (0x32000000)))) __compiletime_assert_320(); } while (0); return (code & (0x7F800000)) == (0x32000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_orr_imm_value(void) { return (0x32000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eor_imm(u32 code) { do { extern void __compiletime_assert_321(void) ; if (!(!(~(0x7F800000) & (0x52000000)))) __compiletime_assert_321(); } while (0); return (code & (0x7F800000)) == (0x52000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eor_imm_value(void) { return (0x52000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ands_imm(u32 code) { do { extern void __compiletime_assert_322(void) ; if (!(!(~(0x7F800000) & (0x72000000)))) __compiletime_assert_322(); } while (0); return (code & (0x7F800000)) == (0x72000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ands_imm_value(void) { return (0x72000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_extr(u32 code) { do { extern void __compiletime_assert_323(void) ; if (!(!(~(0x7FA00000) & (0x13800000)))) __compiletime_assert_323(); } while (0); return (code & (0x7FA00000)) == (0x13800000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_extr_value(void) { return (0x13800000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_b(u32 code) { do { extern void __compiletime_assert_324(void) ; if (!(!(~(0xFC000000) & (0x14000000)))) __compiletime_assert_324(); } while (0); return (code & (0xFC000000)) == (0x14000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_b_value(void) { return (0x14000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bl(u32 code) { do { extern void __compiletime_assert_325(void) ; if (!(!(~(0xFC000000) & (0x94000000)))) __compiletime_assert_325(); } while (0); return (code & (0xFC000000)) == (0x94000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bl_value(void) { return (0x94000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_cbz(u32 code) { do { extern void __compiletime_assert_326(void) ; if (!(!(~(0x7F000000) & (0x34000000)))) __compiletime_assert_326(); } while (0); return (code & (0x7F000000)) == (0x34000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_cbz_value(void) { return (0x34000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_cbnz(u32 code) { do { extern void __compiletime_assert_327(void) ; if (!(!(~(0x7F000000) & (0x35000000)))) __compiletime_assert_327(); } while (0); return (code & (0x7F000000)) == (0x35000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_cbnz_value(void) { return (0x35000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_tbz(u32 code) { do { extern void __compiletime_assert_328(void) ; if (!(!(~(0x7F000000) & (0x36000000)))) __compiletime_assert_328(); } while (0); return (code & (0x7F000000)) == (0x36000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_tbz_value(void) { return (0x36000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_tbnz(u32 code) { do { extern void __compiletime_assert_329(void) ; if (!(!(~(0x7F000000) & (0x37000000)))) __compiletime_assert_329(); } while (0); return (code & (0x7F000000)) == (0x37000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_tbnz_value(void) { return (0x37000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_bcond(u32 code) { do { extern void __compiletime_assert_330(void) ; if (!(!(~(0xFF000010) & (0x54000000)))) __compiletime_assert_330(); } while (0); return (code & (0xFF000010)) == (0x54000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_bcond_value(void) { return (0x54000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_svc(u32 code) { do { extern void __compiletime_assert_331(void) ; if (!(!(~(0xFFE0001F) & (0xD4000001)))) __compiletime_assert_331(); } while (0); return (code & (0xFFE0001F)) == (0xD4000001); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_svc_value(void) { return (0xD4000001); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_hvc(u32 code) { do { extern void __compiletime_assert_332(void) ; if (!(!(~(0xFFE0001F) & (0xD4000002)))) __compiletime_assert_332(); } while (0); return (code & (0xFFE0001F)) == (0xD4000002); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_hvc_value(void) { return (0xD4000002); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_smc(u32 code) { do { extern void __compiletime_assert_333(void) ; if (!(!(~(0xFFE0001F) & (0xD4000003)))) __compiletime_assert_333(); } while (0); return (code & (0xFFE0001F)) == (0xD4000003); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_smc_value(void) { return (0xD4000003); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_brk(u32 code) { do { extern void __compiletime_assert_334(void) ; if (!(!(~(0xFFE0001F) & (0xD4200000)))) __compiletime_assert_334(); } while (0); return (code & (0xFFE0001F)) == (0xD4200000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_brk_value(void) { return (0xD4200000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_exception(u32 code) { do { extern void __compiletime_assert_335(void) ; if (!(!(~(0xFF000000) & (0xD4000000)))) __compiletime_assert_335(); } while (0); return (code & (0xFF000000)) == (0xD4000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_exception_value(void) { return (0xD4000000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_hint(u32 code) { do { extern void __compiletime_assert_336(void) ; if (!(!(~(0xFFFFF01F) & (0xD503201F)))) __compiletime_assert_336(); } while (0); return (code & (0xFFFFF01F)) == (0xD503201F); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_hint_value(void) { return (0xD503201F); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_br(u32 code) { do { extern void __compiletime_assert_337(void) ; if (!(!(~(0xFFFFFC1F) & (0xD61F0000)))) __compiletime_assert_337(); } while (0); return (code & (0xFFFFFC1F)) == (0xD61F0000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_br_value(void) { return (0xD61F0000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_blr(u32 code) { do { extern void __compiletime_assert_338(void) ; if (!(!(~(0xFFFFFC1F) & (0xD63F0000)))) __compiletime_assert_338(); } while (0); return (code & (0xFFFFFC1F)) == (0xD63F0000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_blr_value(void) { return (0xD63F0000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_ret(u32 code) { do { extern void __compiletime_assert_339(void) ; if (!(!(~(0xFFFFFC1F) & (0xD65F0000)))) __compiletime_assert_339(); } while (0); return (code & (0xFFFFFC1F)) == (0xD65F0000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_ret_value(void) { return (0xD65F0000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_eret(u32 code) { do { extern void __compiletime_assert_340(void) ; if (!(!(~(0xFFFFFFFF) & (0xD69F03E0)))) __compiletime_assert_340(); } while (0); return (code & (0xFFFFFFFF)) == (0xD69F03E0); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_eret_value(void) { return (0xD69F03E0); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_mrs(u32 code) { do { extern void __compiletime_assert_341(void) ; if (!(!(~(0xFFF00000) & (0xD5300000)))) __compiletime_assert_341(); } while (0); return (code & (0xFFF00000)) == (0xD5300000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_mrs_value(void) { return (0xD5300000); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_msr_imm(u32 code) { do { extern void __compiletime_assert_342(void) ; if (!(!(~(0xFFF8F01F) & (0xD500401F)))) __compiletime_assert_342(); } while (0); return (code & (0xFFF8F01F)) == (0xD500401F); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_msr_imm_value(void) { return (0xD500401F); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool aarch64_insn_is_msr_reg(u32 code) { do { extern void __compiletime_assert_343(void) ; if (!(!(~(0xFFF00000) & (0xD5100000)))) __compiletime_assert_343(); } while (0); return (code & (0xFFF00000)) == (0xD5100000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 aarch64_insn_get_msr_reg_value(void) { return (0xD5100000); }



bool aarch64_insn_is_nop(u32 insn);
bool aarch64_insn_is_branch_imm(u32 insn);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool aarch64_insn_is_adr_adrp(u32 insn)
{
 return aarch64_insn_is_adr(insn) || aarch64_insn_is_adrp(insn);
}

int aarch64_insn_read(void *addr, u32 *insnp);
int aarch64_insn_write(void *addr, u32 insn);
enum aarch64_insn_encoding_class aarch64_get_insn_class(u32 insn);
bool aarch64_insn_uses_literal(u32 insn);
bool aarch64_insn_is_branch(u32 insn);
u64 aarch64_insn_decode_immediate(enum aarch64_insn_imm_type type, u32 insn);
u32 aarch64_insn_encode_immediate(enum aarch64_insn_imm_type type,
      u32 insn, u64 imm);
u32 aarch64_insn_decode_register(enum aarch64_insn_register_type type,
      u32 insn);
u32 aarch64_insn_gen_branch_imm(unsigned long pc, unsigned long addr,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_comp_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_register reg,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_cond_branch_imm(unsigned long pc, unsigned long addr,
         enum aarch64_insn_condition cond);
u32 aarch64_insn_gen_hint(enum aarch64_insn_hint_op op);
u32 aarch64_insn_gen_nop(void);
u32 aarch64_insn_gen_branch_reg(enum aarch64_insn_register reg,
    enum aarch64_insn_branch_type type);
u32 aarch64_insn_gen_load_store_reg(enum aarch64_insn_register reg,
        enum aarch64_insn_register base,
        enum aarch64_insn_register offset,
        enum aarch64_insn_size_type size,
        enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_pair(enum aarch64_insn_register reg1,
         enum aarch64_insn_register reg2,
         enum aarch64_insn_register base,
         int offset,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_load_store_ex(enum aarch64_insn_register reg,
       enum aarch64_insn_register base,
       enum aarch64_insn_register state,
       enum aarch64_insn_size_type size,
       enum aarch64_insn_ldst_type type);
u32 aarch64_insn_gen_ldadd(enum aarch64_insn_register result,
      enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_stadd(enum aarch64_insn_register address,
      enum aarch64_insn_register value,
      enum aarch64_insn_size_type size);
u32 aarch64_insn_gen_add_sub_imm(enum aarch64_insn_register dst,
     enum aarch64_insn_register src,
     int imm, enum aarch64_insn_variant variant,
     enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_adr(unsigned long pc, unsigned long addr,
    enum aarch64_insn_register reg,
    enum aarch64_insn_adr_type type);
u32 aarch64_insn_gen_bitfield(enum aarch64_insn_register dst,
         enum aarch64_insn_register src,
         int immr, int imms,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_bitfield_type type);
u32 aarch64_insn_gen_movewide(enum aarch64_insn_register dst,
         int imm, int shift,
         enum aarch64_insn_variant variant,
         enum aarch64_insn_movewide_type type);
u32 aarch64_insn_gen_add_sub_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_adsb_type type);
u32 aarch64_insn_gen_data1(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data1_type type);
u32 aarch64_insn_gen_data2(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data2_type type);
u32 aarch64_insn_gen_data3(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg1,
      enum aarch64_insn_register reg2,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_data3_type type);
u32 aarch64_insn_gen_logical_shifted_reg(enum aarch64_insn_register dst,
      enum aarch64_insn_register src,
      enum aarch64_insn_register reg,
      int shift,
      enum aarch64_insn_variant variant,
      enum aarch64_insn_logic_type type);
u32 aarch64_insn_gen_logical_immediate(enum aarch64_insn_logic_type type,
           enum aarch64_insn_variant variant,
           enum aarch64_insn_register Rn,
           enum aarch64_insn_register Rd,
           u64 imm);
u32 aarch64_insn_gen_extr(enum aarch64_insn_variant variant,
     enum aarch64_insn_register Rm,
     enum aarch64_insn_register Rn,
     enum aarch64_insn_register Rd,
     u8 lsb);
u32 aarch64_insn_gen_prefetch(enum aarch64_insn_register base,
         enum aarch64_insn_prfm_type type,
         enum aarch64_insn_prfm_target target,
         enum aarch64_insn_prfm_policy policy);
s32 aarch64_get_branch_offset(u32 insn);
u32 aarch64_set_branch_offset(u32 insn, s32 offset);

int aarch64_insn_patch_text_nosync(void *addr, u32 insn);
int aarch64_insn_patch_text(void *addrs[], u32 insns[], int cnt);

s32 aarch64_insn_adrp_get_offset(u32 insn);
u32 aarch64_insn_adrp_set_offset(u32 insn, s32 offset);

bool aarch32_insn_is_wide(u32 insn);





u32 aarch64_insn_extract_system_reg(u32 insn);
u32 aarch32_insn_extract_reg_num(u32 insn, int offset);
u32 aarch32_insn_mcr_extract_opc2(u32 insn);
u32 aarch32_insn_mcr_extract_crm(u32 insn);

typedef bool (pstate_check_t)(unsigned long);
extern pstate_check_t * const aarch32_opcode_cond_checks[16];
# 7 "../arch/arm64/include/asm/alternative.h" 2
# 17 "../arch/arm64/include/asm/alternative.h"
struct alt_instr {
 s32 orig_offset;
 s32 alt_offset;
 u16 cpufeature;
 u8 orig_len;
 u8 alt_len;
};

typedef void (*alternative_cb_t)(struct alt_instr *alt,
     __le32 *origptr, __le32 *updptr, int nr_inst);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) apply_boot_alternatives(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) apply_alternatives_all(void);
bool alternative_is_applied(u16 cpufeature);


void apply_alternatives_module(void *start, size_t length);
# 9 "../arch/arm64/include/asm/irqflags.h" 2
# 1 "../arch/arm64/include/asm/ptrace.h" 1
# 11 "../arch/arm64/include/asm/ptrace.h"
# 1 "../arch/arm64/include/asm/cpufeature.h" 1
# 11 "../arch/arm64/include/asm/cpufeature.h"
# 1 "../arch/arm64/include/asm/hwcap.h" 1







# 1 "../arch/arm64/include/uapi/asm/hwcap.h" 1
# 9 "../arch/arm64/include/asm/hwcap.h" 2
# 1 "../arch/arm64/include/asm/cpufeature.h" 1
# 10 "../arch/arm64/include/asm/hwcap.h" 2
# 100 "../arch/arm64/include/asm/hwcap.h"
extern unsigned int compat_elf_hwcap, compat_elf_hwcap2;


enum {
 CAP_HWCAP = 1,

 CAP_COMPAT_HWCAP,
 CAP_COMPAT_HWCAP2,

};
# 12 "../arch/arm64/include/asm/cpufeature.h" 2








# 1 "../include/linux/jump_label.h" 1
# 79 "../include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;
# 102 "../include/linux/jump_label.h"
 union {
  unsigned long type;
  struct jump_entry *entries;
  struct static_key_mod *next;
 };
};
# 117 "../include/linux/jump_label.h"
# 1 "../arch/arm64/include/asm/jump_label.h" 1
# 18 "../arch/arm64/include/asm/jump_label.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch(struct static_key *key,
            bool branch)
{
 asm goto("1:	nop					\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		3			\n\t" "	.long		1b - ., %l[l_yes] - .	\n\t" "	.quad		%c0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : l_yes);
# 30 "../arch/arm64/include/asm/jump_label.h"
 return false;
l_yes:
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool arch_static_branch_jump(struct static_key *key,
          bool branch)
{
 asm goto("1:	b		%l[l_yes]		\n\t" "	.pushsection	__jump_table, \"aw\"	\n\t" "	.align		3			\n\t" "	.long		1b - ., %l[l_yes] - .	\n\t" "	.quad		%c0 - .			\n\t" "	.popsection				\n\t" : : "i"(&((char *)key)[branch]) : : l_yes);
# 47 "../arch/arm64/include/asm/jump_label.h"
 return false;
l_yes:
 return true;
}
# 118 "../include/linux/jump_label.h" 2




struct jump_entry {
 s32 code;
 s32 target;
 long key;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_code(const struct jump_entry *entry)
{
 return (unsigned long)&entry->code + entry->code;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long jump_entry_target(const struct jump_entry *entry)
{
 return (unsigned long)&entry->target + entry->target;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct static_key *jump_entry_key(const struct jump_entry *entry)
{
 long offset = entry->key & ~3L;

 return (struct static_key *)((unsigned long)&entry->key + offset);
}
# 164 "../include/linux/jump_label.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_branch(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 1UL;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool jump_entry_is_init(const struct jump_entry *entry)
{
 return (unsigned long)entry->key & 2UL;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jump_entry_set_init(struct jump_entry *entry)
{
 entry->key |= 2;
}






enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 198 "../include/linux/jump_label.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern bool arch_jump_label_transform_queue(struct jump_entry *entry,
         enum jump_label_type type);
extern void arch_jump_label_transform_apply(void);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void static_key_slow_inc_cpuslocked(struct static_key *key);
extern void static_key_slow_dec_cpuslocked(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
extern int static_key_count(struct static_key *key);
extern void static_key_enable(struct static_key *key);
extern void static_key_disable(struct static_key *key);
extern void static_key_enable_cpuslocked(struct static_key *key);
extern void static_key_disable_cpuslocked(struct static_key *key);
# 346 "../include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 385 "../include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 21 "../arch/arm64/include/asm/cpufeature.h" 2
# 37 "../arch/arm64/include/asm/cpufeature.h"
enum ftr_type {
 FTR_EXACT,
 FTR_LOWER_SAFE,
 FTR_HIGHER_SAFE,
 FTR_HIGHER_OR_ZERO_SAFE,
};
# 56 "../arch/arm64/include/asm/cpufeature.h"
struct arm64_ftr_bits {
 bool sign;
 bool visible;
 bool strict;
 enum ftr_type type;
 u8 shift;
 u8 width;
 s64 safe_val;
};






struct arm64_ftr_reg {
 const char *name;
 u64 strict_mask;
 u64 user_mask;
 u64 sys_val;
 u64 user_val;
 const struct arm64_ftr_bits *ftr_bits;
};

extern struct arm64_ftr_reg arm64_ftr_reg_ctrel0;
# 286 "../arch/arm64/include/asm/cpufeature.h"
struct arm64_cpu_capabilities {
 const char *desc;
 u16 capability;
 u16 type;
 bool (*matches)(const struct arm64_cpu_capabilities *caps, int scope);
# 303 "../arch/arm64/include/asm/cpufeature.h"
 void (*cpu_enable)(const struct arm64_cpu_capabilities *cap);
 union {
  struct {
   struct midr_range midr_range;
   const struct arm64_midr_revidr {
    u32 midr_rv;
    u32 revidr_mask;
   } * const fixed_revs;
  };

  const struct midr_range *midr_range_list;
  struct {
   u32 sys_reg;
   u8 field_pos;
   u8 min_field_value;
   u8 hwcap_type;
   bool sign;
   unsigned long hwcap;
  };
 };
# 335 "../arch/arm64/include/asm/cpufeature.h"
 const struct arm64_cpu_capabilities *match_list;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpucap_default_scope(const struct arm64_cpu_capabilities *cap)
{
 return cap->type & (((u16)((((1UL))) << (1))) | ((u16)((((1UL))) << (0))) | ((u16)((((1UL))) << (2))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
cpucap_late_cpu_optional(const struct arm64_cpu_capabilities *cap)
{
 return !!(cap->type & ((u16)((((1UL))) << (5))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
cpucap_late_cpu_permitted(const struct arm64_cpu_capabilities *cap)
{
 return !!(cap->type & ((u16)((((1UL))) << (4))));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
cpucap_multi_entry_cap_matches(const struct arm64_cpu_capabilities *entry,
          int scope)
{
 const struct arm64_cpu_capabilities *caps;

 for (caps = entry->match_list; caps->matches; caps++)
  if (caps->matches(caps, scope))
   return true;

 return false;
}

extern unsigned long cpu_hwcaps[(((45) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
extern struct static_key_false cpu_hwcap_keys[45];
extern struct static_key_false arm64_const_caps_ready;



extern unsigned long boot_capabilities[((((45 + 1)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];




bool this_cpu_has_cap(unsigned int cap);
void cpu_set_feature(unsigned int num);
bool cpu_have_feature(unsigned int num);
unsigned long cpu_get_elf_hwcap(void);
unsigned long cpu_get_elf_hwcap2(void);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool __cpus_have_const_cap(int num)
{
 if (num >= 45)
  return false;
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[num]), struct static_key_true)) branch = arch_static_branch_jump(&(&cpu_hwcap_keys[num])->key, false); else if (__builtin_types_compatible_p(typeof(*&cpu_hwcap_keys[num]), struct static_key_false)) branch = arch_static_branch(&(&cpu_hwcap_keys[num])->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpus_have_cap(unsigned int num)
{
 if (num >= 45)
  return false;
 return test_bit(num, cpu_hwcaps);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool cpus_have_const_cap(int num)
{
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_true)) branch = !arch_static_branch(&(&arm64_const_caps_ready)->key, true); else if (__builtin_types_compatible_p(typeof(*&arm64_const_caps_ready), struct static_key_false)) branch = !arch_static_branch_jump(&(&arm64_const_caps_ready)->key, true); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 1); }))
  return __cpus_have_const_cap(num);
 else
  return cpus_have_cap(num);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpus_set_cap(unsigned int num)
{
 if (num >= 45) {
  printk("\001" "4" "Attempt to set an illegal CPU capability (%d >= %d)\n", num, 45);

 } else {
  __set_bit(num, cpu_hwcaps);
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_signed_field_width(u64 features, int field, int width)
{
 return (s64)(features << (64 - width - field)) >> (64 - width);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_signed_field(u64 features, int field)
{
 return cpuid_feature_extract_signed_field_width(features, field, 4);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field_width(u64 features, int field, int width)
{
 return (u64)(features << (64 - width - field)) >> (64 - width);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __attribute__((__const__))
cpuid_feature_extract_unsigned_field(u64 features, int field)
{
 return cpuid_feature_extract_unsigned_field_width(features, field, 4);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 arm64_ftr_mask(const struct arm64_ftr_bits *ftrp)
{
 return (u64)(((~(((0UL)))) - ((((1UL))) << (ftrp->shift)) + 1) & (~(((0UL))) >> (64 - 1 - (ftrp->shift + ftrp->width - 1))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 arm64_ftr_reg_user_value(const struct arm64_ftr_reg *reg)
{
 return (reg->user_val | (reg->sys_val & reg->user_mask));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_field_width(u64 features, int field, int width, bool sign)
{
 return (sign) ?
  cpuid_feature_extract_signed_field_width(features, field, width) :
  cpuid_feature_extract_unsigned_field_width(features, field, width);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__const__))
cpuid_feature_extract_field(u64 features, int field, bool sign)
{
 return cpuid_feature_extract_field_width(features, field, 4, sign);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 arm64_ftr_value(const struct arm64_ftr_bits *ftrp, u64 val)
{
 return (s64)cpuid_feature_extract_field_width(val, ftrp->shift, ftrp->width, ftrp->sign);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64mmfr0_mixed_endian_el0(u64 mmfr0)
{
 return cpuid_feature_extract_unsigned_field(mmfr0, 8) == 0x1 ||
  cpuid_feature_extract_unsigned_field(mmfr0, 16) == 0x1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64pfr0_32bit_el0(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 0);

 return val == 0x2;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool id_aa64pfr0_sve(u64 pfr0)
{
 u32 val = cpuid_feature_extract_unsigned_field(pfr0, 32);

 return val > 0;
}

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_cpu_features(void);
void check_local_cpu_capabilities(void);

u64 read_sanitised_ftr_reg(u32 id);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; }));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_32bit_el0(void)
{
 return cpus_have_const_cap(13);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_4kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      28);

 return val == 0x0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_64kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      24);

 return val == 0x0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_16kb_granule(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      20);

 return val == 0x1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_mixed_endian_el0(void)
{
 return id_aa64mmfr0_mixed_endian_el0(read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_mixed_endian(void)
{
 u64 mmfr0;
 u32 val;

 mmfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((7) << 8) | ((0) << 5)));
 val = cpuid_feature_extract_unsigned_field(mmfr0,
      8);

 return val == 0x1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_fpsimd(void)
{
 return !cpus_have_const_cap(16);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_uses_ttbr0_pan(void)
{
 return 1 &&
  !cpus_have_const_cap(4);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_sve(void)
{
 return 1 &&
  cpus_have_const_cap(22);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_cnp(void)
{
 return 0 &&
  cpus_have_const_cap(15);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_address_auth(void)
{
 return 1 &&
  (cpus_have_const_cap(38) ||
   cpus_have_const_cap(39));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_supports_generic_auth(void)
{
 return 1 &&
  (cpus_have_const_cap(40) ||
   cpus_have_const_cap(41));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_uses_irq_prio_masking(void)
{
 return 0 &&
        cpus_have_const_cap(42);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool system_has_prio_mask_debugging(void)
{
 return 0 &&
        system_uses_irq_prio_masking();
}





int get_spectre_v2_workaround_state(void);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arm64_get_ssbd_state(void)
{

 extern int ssbd_state;
 return ssbd_state;



}

void arm64_set_ssbd_mitigation(bool state);

extern int do_emulate_mrs(struct pt_regs *regs, u32 sys_reg, u32 rt);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 id_aa64mmfr0_parange_to_phys_shift(int parange)
{
 switch (parange) {
 case 0: return 32;
 case 1: return 36;
 case 2: return 40;
 case 3: return 42;
 case 4: return 44;
 case 5: return 48;
 case 6: return 52;







 default: return 48;
 }
}
# 12 "../arch/arm64/include/asm/ptrace.h" 2

# 1 "../arch/arm64/include/uapi/asm/ptrace.h" 1
# 26 "../arch/arm64/include/uapi/asm/ptrace.h"
# 1 "../arch/arm64/include/uapi/asm/sve_context.h" 1
# 27 "../arch/arm64/include/uapi/asm/ptrace.h" 2
# 74 "../arch/arm64/include/uapi/asm/ptrace.h"
struct user_pt_regs {
 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;
};

struct user_fpsimd_state {
 __uint128_t vregs[32];
 __u32 fpsr;
 __u32 fpcr;
 __u32 __reserved[2];
};

struct user_hwdebug_state {
 __u32 dbg_info;
 __u32 pad;
 struct {
  __u64 addr;
  __u32 ctrl;
  __u32 pad;
 } dbg_regs[16];
};



struct user_sve_header {
 __u32 size;
 __u32 max_size;
 __u16 vl;
 __u16 max_vl;
 __u16 flags;
 __u16 __reserved;
};
# 236 "../arch/arm64/include/uapi/asm/ptrace.h"
struct user_pac_mask {
 __u64 data_mask;
 __u64 insn_mask;
};



struct user_pac_address_keys {
 __uint128_t apiakey;
 __uint128_t apibkey;
 __uint128_t apdakey;
 __uint128_t apdbkey;
};

struct user_pac_generic_keys {
 __uint128_t apgakey;
};
# 14 "../arch/arm64/include/asm/ptrace.h" 2
# 130 "../arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long compat_psr_to_pstate(const unsigned long psr)
{
 unsigned long pstate;

 pstate = psr & ~0x00200000;

 if (psr & 0x00200000)
  pstate |= 0x01000000;

 return pstate;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pstate_to_compat_psr(const unsigned long pstate)
{
 unsigned long psr;

 psr = pstate & ~0x01000000;

 if (pstate & 0x01000000)
  psr |= 0x00200000;

 return psr;
}






struct pt_regs {
 union {
  struct user_pt_regs user_regs;
  struct {
   u64 regs[31];
   u64 sp;
   u64 pc;
   u64 pstate;
  };
 };
 u64 orig_x0;




 s32 syscallno;
 u32 unused2;


 u64 orig_addr_limit;

 u64 pmr_save;
 u64 stackframe[2];
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_syscall(struct pt_regs const *regs)
{
 return regs->syscallno != (-1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void forget_syscall(struct pt_regs *regs)
{
 regs->syscallno = (-1);
}
# 226 "../arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 if ((((regs)->pstate & (0x00000010 | 0x0000000f)) == (0x00000010 | 0x00000000)))
  return regs->regs[13];
 return regs->sp;
}

extern int regs_query_register_offset(const char *name);
extern unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n);
# 246 "../arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 regs_get_register(struct pt_regs *regs, unsigned int offset)
{
 u64 val = 0;

 ({ int __ret_warn_on = !!(offset & 7); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../arch/arm64/include/asm/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 250; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 offset >>= 3;
 switch (offset) {
 case 0 ... 30:
  val = regs->regs[offset];
  break;
 case __builtin_offsetof(struct pt_regs, sp) >> 3:
  val = regs->sp;
  break;
 case __builtin_offsetof(struct pt_regs, pc) >> 3:
  val = regs->pc;
  break;
 case __builtin_offsetof(struct pt_regs, pstate) >> 3:
  val = regs->pstate;
  break;
 default:
  val = 0;
 }

 return val;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pt_regs_read_reg(const struct pt_regs *regs, int r)
{
 return (r == 31) ? 0 : regs->regs[r];
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pt_regs_write_reg(struct pt_regs *regs, int r,
         unsigned long val)
{
 if (r != 31)
  regs->regs[r] = val;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_return_value(struct pt_regs *regs)
{
 return regs->regs[0];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void regs_set_return_value(struct pt_regs *regs, unsigned long rc)
{
 regs->regs[0] = rc;
}
# 322 "../arch/arm64/include/asm/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long regs_get_kernel_argument(struct pt_regs *regs,
           unsigned int n)
{

 if (n < 8)
  return pt_regs_read_reg(regs, n);
 return 0;
}


struct task_struct;
int valid_user_regs(struct user_pt_regs *regs, struct task_struct *task);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return regs->pc;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void instruction_pointer_set(struct pt_regs *regs,
  unsigned long val)
{
 regs->pc = val;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return regs->regs[29];
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void procedure_link_pointer_set(struct pt_regs *regs,
        unsigned long val)
{
 ((regs)->regs[30]) = val;
}

extern unsigned long profile_pc(struct pt_regs *regs);
# 10 "../arch/arm64/include/asm/irqflags.h" 2
# 28 "../arch/arm64/include/asm/irqflags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_enable(void)
{
 if (system_has_prio_mask_debugging()) {
  u32 pmr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });

  ({ int __ret_warn_on = !!(pmr != 0xe0 && pmr != (0xe0 & ~0x80)); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../arch/arm64/include/asm/irqflags.h\"; .popsection; .long 14472b - 14470b; .short 33; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 }

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daifclr, #2		// arch_local_irq_enable\n" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "dsb	sy" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"





  :
  : "r" ((unsigned long) 0xe0)
  : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_disable(void)
{
 if (system_has_prio_mask_debugging()) {
  u32 pmr = ({ u64 __val; asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" : "=r" (__val)); __val; });

  ({ int __ret_warn_on = !!(pmr != 0xe0 && pmr != (0xe0 & ~0x80)); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../arch/arm64/include/asm/irqflags.h\"; .popsection; .long 14472b - 14470b; .short 52; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 }

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daifset, #2		// arch_local_irq_disable" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"



  :
  : "r" ((unsigned long) (0xe0 & ~0x80))
  : "memory");
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_save_flags(void)
{
 unsigned long flags;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "mrs	%0, daif" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	mrs_s, rt, sreg\n" ".inst " "(0xd5200000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	mrs_s " "%0" ", " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" "\n" "	.purgem	mrs_s\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"



  : "=&r" (flags)
  :
  : "memory");

 return flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_irqs_disabled_flags(unsigned long flags)
{
 int res;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "and	%w0, %w1, #" "0x00000080" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "eor	%w0, %w1, #" "0xe0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"



  : "=&r" (res)
  : "r" ((int) flags)
  : "memory");

 return res;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long arch_local_irq_save(void)
{
 unsigned long flags;

 flags = arch_local_save_flags();





 if (!arch_irqs_disabled_flags(flags))
  arch_local_irq_disable();

 return flags;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_local_irq_restore(unsigned long flags)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr	daif, %0\n" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "42" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((4) << 12) | ((6) << 8) | ((0) << 5))" ", " "%0" "\n" "	.purgem	msr_s\n" "dsb	sy" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"





  :
  : "r" (flags)
  : "memory");
}
# 17 "../include/linux/irqflags.h" 2








  static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_softirqs_on(unsigned long ip) { }
  static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_softirqs_off(unsigned long ip) { }
  static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_on(unsigned long ip) { }
  static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_hardirqs_off(unsigned long ip) { }
# 55 "../include/linux/spinlock.h" 2



# 1 "../include/linux/bottom_half.h" 1
# 10 "../include/linux/bottom_half.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 __preempt_count_add(cnt);
 __asm__ __volatile__("" : : : "memory");
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}
# 59 "../include/linux/spinlock.h" 2

# 1 "./arch/arm64/include/generated/asm/mmiowb.h" 1
# 1 "../include/asm-generic/mmiowb.h" 1
# 2 "./arch/arm64/include/generated/asm/mmiowb.h" 2
# 61 "../include/linux/spinlock.h" 2
# 83 "../include/linux/spinlock.h"
# 1 "../include/linux/spinlock_types.h" 1
# 13 "../include/linux/spinlock_types.h"
# 1 "../arch/arm64/include/asm/spinlock_types.h" 1
# 12 "../arch/arm64/include/asm/spinlock_types.h"
# 1 "../include/asm-generic/qspinlock_types.h" 1
# 22 "../include/asm-generic/qspinlock_types.h"
typedef struct qspinlock {
 union {
  atomic_t val;







  struct {
   u8 locked;
   u8 pending;
  };
  struct {
   u16 locked_pending;
   u16 tail;
  };
# 51 "../include/asm-generic/qspinlock_types.h"
 };
} arch_spinlock_t;
# 13 "../arch/arm64/include/asm/spinlock_types.h" 2
# 1 "../include/asm-generic/qrwlock_types.h" 1






# 1 "../arch/arm64/include/asm/spinlock_types.h" 1
# 8 "../include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 union {
  atomic_t cnts;
  struct {

   u8 wlocked;
   u8 __lstate[3];




  };
 };
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 14 "../arch/arm64/include/asm/spinlock_types.h" 2
# 14 "../include/linux/spinlock_types.h" 2




# 1 "../include/linux/lockdep.h" 1
# 13 "../include/linux/lockdep.h"
struct task_struct;
struct lockdep_map;


extern int prove_locking;
extern int lock_stat;
# 414 "../include/linux/lockdep.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_init_task(struct task_struct *task)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_off(void)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_on(void)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_set_selftest_task(struct task_struct *task)
{
}
# 459 "../include/linux/lockdep.h"
struct lock_class_key { };

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_register_key(struct lock_class_key *key)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_unregister_key(struct lock_class_key *key)
{
}




struct lockdep_map { };
# 485 "../include/linux/lockdep.h"
struct pin_cookie { };
# 495 "../include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 509 "../include/linux/lockdep.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_free_task(struct task_struct *task) {}
# 571 "../include/linux/lockdep.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 661 "../include/linux/lockdep.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 19 "../include/linux/spinlock_types.h" 2

typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;







} raw_spinlock_t;
# 61 "../include/linux/spinlock_types.h"
typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 72 "../include/linux/spinlock_types.h"
 };
} spinlock_t;
# 83 "../include/linux/spinlock_types.h"
# 1 "../include/linux/rwlock_types.h" 1
# 11 "../include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;







} rwlock_t;
# 84 "../include/linux/spinlock_types.h" 2
# 84 "../include/linux/spinlock.h" 2





# 1 "../arch/arm64/include/asm/spinlock.h" 1







# 1 "./arch/arm64/include/generated/asm/qrwlock.h" 1
# 1 "../include/asm-generic/qrwlock.h" 1
# 14 "../include/asm-generic/qrwlock.h"
# 1 "../arch/arm64/include/asm/processor.h" 1
# 28 "../arch/arm64/include/asm/processor.h"
# 1 "../include/linux/string.h" 1
# 10 "../include/linux/string.h"
# 1 "../include/uapi/linux/string.h" 1
# 11 "../include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *vmemdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);





# 1 "../arch/arm64/include/asm/string.h" 1
# 10 "../arch/arm64/include/asm/string.h"
extern char *strrchr(const char *, int c);


extern char *strchr(const char *, int c);


extern int strcmp(const char *, const char *);


extern int strncmp(const char *, const char *, __kernel_size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *, __kernel_size_t);


extern int memcmp(const void *, const void *, size_t);


extern void *memchr(const void *, int, __kernel_size_t);



extern void *memcpy(void *, const void *, __kernel_size_t);
extern void *__memcpy(void *, const void *, __kernel_size_t);


extern void *memmove(void *, const void *, __kernel_size_t);
extern void *__memmove(void *, const void *, __kernel_size_t);


extern void *memset(void *, int, __kernel_size_t);
extern void *__memset(void *, int, __kernel_size_t);



void memcpy_flushcache(void *dst, const void *src, size_t cnt);
# 21 "../include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);



ssize_t strscpy_pad(char *dest, const char *src, size_t count);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);
# 54 "../include/linux/string.h"
extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);





extern char * strchrnul(const char *,int);


extern char * strnchr(const char *, size_t, int);




extern char * __attribute__((__warn_unused_result__)) skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);
# 93 "../include/linux/string.h"
extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);







extern void *memset16(uint16_t *, uint16_t, __kernel_size_t);



extern void *memset32(uint32_t *, uint32_t, __kernel_size_t);



extern void *memset64(uint64_t *, uint64_t, __kernel_size_t);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}

extern void **__memcat_p(void **a, void **b);
# 152 "../include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);





extern int bcmp(const void *,const void *,__kernel_size_t);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) unsigned long memcpy_mcsafe(void *dst,
  const void *src, size_t cnt)
{
 memcpy(dst, src, cnt);
 return 0;
}







void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
extern int kstrtobool(const char *s, bool *res);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}

int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 216 "../include/linux/string.h"
extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
void memzero_explicit(void *s, size_t count);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}




void fortify_panic(const char *name) __attribute__((__noreturn__)) __attribute__((__cold__));
void __read_overflow(void) ;
void __read_overflow2(void) ;
void __read_overflow3(void) ;
void __write_overflow(void) ;


extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strncpy(char *p, const char *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __write_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_strncpy(p, q, size);
}

extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strcat(char *p, const char *q)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (p_size == (size_t)-1)
  return __builtin_strcat(p, q);
 if (strlcat(p, q, p_size) >= p_size)
  fortify_panic(__func__);
 return p;
}

extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) __kernel_size_t strlen(const char *p)
{
 __kernel_size_t ret;
 size_t p_size = __builtin_object_size(p, 0);


 if (p_size == (size_t)-1 ||
     (__builtin_constant_p(p[p_size - 1]) && p[p_size - 1] == '\0'))
  return __builtin_strlen(p);
 ret = strnlen(p, p_size);
 if (p_size <= ret)
  fortify_panic(__func__);
 return ret;
}

extern __kernel_size_t __real_strnlen(const char *, __kernel_size_t) __asm__("strnlen");
extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) __kernel_size_t strnlen(const char *p, __kernel_size_t maxlen)
{
 size_t p_size = __builtin_object_size(p, 0);
 __kernel_size_t ret = __real_strnlen(p, maxlen < p_size ? maxlen : p_size);
 if (p_size <= ret && maxlen != ret)
  fortify_panic(__func__);
 return ret;
}


extern size_t __real_strlcpy(char *, const char *, size_t) __asm__("strlcpy");
extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) size_t strlcpy(char *p, const char *q, size_t size)
{
 size_t ret;
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __real_strlcpy(p, q, size);
 ret = strlen(q);
 if (size) {
  size_t len = (ret >= size) ? size - 1 : ret;
  if (__builtin_constant_p(len) && len >= p_size)
   __write_overflow();
  if (len >= p_size)
   fortify_panic(__func__);
  __builtin_memcpy(p, q, len);
  p[len] = '\0';
 }
 return ret;
}


extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strncat(char *p, const char *q, __kernel_size_t count)
{
 size_t p_len, copy_len;
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __builtin_strncat(p, q, count);
 p_len = strlen(p);
 copy_len = strnlen(q, count);
 if (p_size < p_len + copy_len + 1)
  fortify_panic(__func__);
 __builtin_memcpy(p + p_len, q, copy_len);
 p[p_len + copy_len] = '\0';
 return p;
}

extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memset(void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __write_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_memset(p, c, size);
}

extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memcpy(void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __write_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memcpy(p, q, size);
}

extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memmove(void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __write_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memmove(p, q, size);
}

extern void *__real_memscan(void *, int, __kernel_size_t) __asm__("memscan");
extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memscan(void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_memscan(p, c, size);
}

extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) int memcmp(const void *p, const void *q, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (__builtin_constant_p(size)) {
  if (p_size < size)
   __read_overflow();
  if (q_size < size)
   __read_overflow2();
 }
 if (p_size < size || q_size < size)
  fortify_panic(__func__);
 return __builtin_memcmp(p, q, size);
}

extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memchr(const void *p, int c, __kernel_size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __builtin_memchr(p, c, size);
}

void *__real_memchr_inv(const void *s, int c, size_t n) __asm__("memchr_inv");
extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *memchr_inv(const void *p, int c, size_t size)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_memchr_inv(p, c, size);
}

extern void *__real_kmemdup(const void *src, size_t len, gfp_t gfp) __asm__("kmemdup");
extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) void *kmemdup(const void *p, size_t size, gfp_t gfp)
{
 size_t p_size = __builtin_object_size(p, 0);
 if (__builtin_constant_p(size) && p_size < size)
  __read_overflow();
 if (p_size < size)
  fortify_panic(__func__);
 return __real_kmemdup(p, size, gfp);
}


extern inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) __attribute__((gnu_inline)) char *strcpy(char *p, const char *q)
{
 size_t p_size = __builtin_object_size(p, 0);
 size_t q_size = __builtin_object_size(q, 0);
 if (p_size == (size_t)-1 && q_size == (size_t)-1)
  return __builtin_strcpy(p, q);
 memcpy(p, q, strlen(q) + 1);
 return p;
}
# 456 "../include/linux/string.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memcpy_and_pad(void *dest, size_t dest_len,
      const void *src, size_t count, int pad)
{
 if (dest_len > count) {
  memcpy(dest, src, count);
  memset(dest + count, pad, dest_len - count);
 } else
  memcpy(dest, src, dest_len);
}
# 480 "../include/linux/string.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) size_t str_has_prefix(const char *str, const char *prefix)
{
 size_t len = strlen(prefix);
 return strncmp(str, prefix, len) == 0 ? len : 0;
}
# 29 "../arch/arm64/include/asm/processor.h" 2



# 1 "../arch/arm64/include/asm/hw_breakpoint.h" 1
# 11 "../arch/arm64/include/asm/hw_breakpoint.h"
# 1 "../arch/arm64/include/asm/virt.h" 1
# 50 "../arch/arm64/include/asm/virt.h"
# 1 "../arch/arm64/include/asm/sections.h" 1







# 1 "../include/asm-generic/sections.h" 1
# 35 "../include/asm-generic/sections.h"
extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char __start_ro_after_init[], __end_ro_after_init[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __softirqentry_text_start[], __softirqentry_text_end[];
extern char __start_once[], __end_once[];


extern char __ctors_start[], __ctors_end[];


extern char __start_opd[], __end_opd[];

extern const void __nosave_begin, __nosave_end;
# 67 "../include/asm-generic/sections.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_text(unsigned long addr)
{
 return 0;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_data(unsigned long addr)
{
 return 0;
}
# 88 "../include/asm-generic/sections.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_is_kernel_initmem_freed(unsigned long addr)
{
 return 0;
}
# 105 "../include/asm-generic/sections.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_contains(void *begin, void *end, void *virt,
       size_t size)
{
 return virt >= begin && virt + size <= end;
}
# 122 "../include/asm-generic/sections.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memory_intersects(void *begin, void *end, void *virt,
         size_t size)
{
 void *vend = virt + size;

 return (virt >= begin && virt < end) || (vend >= begin && vend < end);
}
# 139 "../include/asm-generic/sections.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_contains(void *virt, size_t size)
{
 return memory_contains(__init_begin, __init_end, virt, size);
}
# 153 "../include/asm-generic/sections.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool init_section_intersects(void *virt, size_t size)
{
 return memory_intersects(__init_begin, __init_end, virt, size);
}
# 166 "../include/asm-generic/sections.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_rodata(unsigned long addr)
{
 return addr >= (unsigned long)__start_rodata &&
        addr < (unsigned long)__end_rodata;
}
# 9 "../arch/arm64/include/asm/sections.h" 2

extern char __alt_instructions[], __alt_instructions_end[];
extern char __exception_text_start[], __exception_text_end[];
extern char __hibernate_exit_text_start[], __hibernate_exit_text_end[];
extern char __hyp_idmap_text_start[], __hyp_idmap_text_end[];
extern char __hyp_text_start[], __hyp_text_end[];
extern char __idmap_text_start[], __idmap_text_end[];
extern char __initdata_begin[], __initdata_end[];
extern char __inittext_begin[], __inittext_end[];
extern char __irqentry_text_start[], __irqentry_text_end[];
extern char __mmuoff_data_start[], __mmuoff_data_end[];
extern char __entry_tramp_text_start[], __entry_tramp_text_end[];
# 51 "../arch/arm64/include/asm/virt.h" 2
# 63 "../arch/arm64/include/asm/virt.h"
extern u32 __boot_cpu_mode[2];

void __hyp_set_vectors(phys_addr_t phys_vector_base);
void __hyp_reset_vectors(void);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_hyp_mode_available(void)
{
 return (__boot_cpu_mode[0] == (0xe12) &&
  __boot_cpu_mode[1] == (0xe12));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_hyp_mode_mismatched(void)
{
 return __boot_cpu_mode[0] != __boot_cpu_mode[1];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_kernel_in_hyp_mode(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "CurrentEL" : "=r" (__val)); __val; }) == (2 << 2);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool has_vhe(void)
{
 if (cpus_have_const_cap(11))
  return true;

 return false;
}
# 12 "../arch/arm64/include/asm/hw_breakpoint.h" 2

struct arch_hw_breakpoint_ctrl {
 u32 __reserved : 19,
 len : 8,
 type : 2,
 privilege : 2,
 enabled : 1;
};

struct arch_hw_breakpoint {
 u64 address;
 u64 trigger;
 struct arch_hw_breakpoint_ctrl ctrl;
};







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 encode_ctrl_reg(struct arch_hw_breakpoint_ctrl ctrl)
{
 u32 val = (ctrl.len << 5) | (ctrl.type << 3) | (ctrl.privilege << 1) |
  ctrl.enabled;

 if (is_kernel_in_hyp_mode() && ctrl.privilege == 1)
  val |= (1 << 13);

 return val;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void decode_ctrl_reg(u32 reg,
       struct arch_hw_breakpoint_ctrl *ctrl)
{
 ctrl->enabled = reg & 0x1;
 reg >>= 1;
 ctrl->privilege = reg & 0x3;
 reg >>= 2;
 ctrl->type = reg & 0x3;
 reg >>= 2;
 ctrl->len = reg & 0xff;
}
# 107 "../arch/arm64/include/asm/hw_breakpoint.h"
struct task_struct;
struct notifier_block;
struct perf_event_attr;
struct perf_event;
struct pmu;

extern int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl ctrl,
      int *gen_len, int *gen_type, int *offset);
extern int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_arch_parse(struct perf_event *bp,
        const struct perf_event_attr *attr,
        struct arch_hw_breakpoint *hw);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
        unsigned long val, void *data);

extern int arch_install_hw_breakpoint(struct perf_event *bp);
extern void arch_uninstall_hw_breakpoint(struct perf_event *bp);
extern void hw_breakpoint_pmu_read(struct perf_event *bp);
extern int hw_breakpoint_slots(int type);


extern void hw_breakpoint_thread_switch(struct task_struct *next);
extern void ptrace_hw_copy_thread(struct task_struct *task);
# 140 "../arch/arm64/include/asm/hw_breakpoint.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_num_brps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      12);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_num_wrps(void)
{
 u64 dfr0 = read_sanitised_ftr_reg((((3) << 19) | ((0) << 16) | ((0) << 12) | ((5) << 8) | ((0) << 5)));
 return 1 +
  cpuid_feature_extract_unsigned_field(dfr0,
      20);
}
# 33 "../arch/arm64/include/asm/processor.h" 2

# 1 "../arch/arm64/include/asm/pgtable-hwdef.h" 1
# 35 "../arch/arm64/include/asm/processor.h" 2
# 1 "../arch/arm64/include/asm/pointer_auth.h" 1





# 1 "../include/linux/random.h" 1
# 11 "../include/linux/random.h"
# 1 "../include/linux/once.h" 1







bool __do_once_start(bool *done, unsigned long *flags);
void __do_once_done(bool *done, struct static_key_true *once_key,
      unsigned long *flags);
# 12 "../include/linux/random.h" 2

# 1 "../include/uapi/linux/random.h" 1
# 12 "../include/uapi/linux/random.h"
# 1 "../include/uapi/linux/ioctl.h" 1




# 1 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 1
# 1 "../include/asm-generic/ioctl.h" 1




# 1 "../include/uapi/asm-generic/ioctl.h" 1
# 6 "../include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 2 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 2
# 6 "../include/uapi/linux/ioctl.h" 2
# 13 "../include/uapi/linux/random.h" 2
# 1 "../include/linux/irqnr.h" 1




# 1 "../include/uapi/linux/irqnr.h" 1
# 6 "../include/linux/irqnr.h" 2


extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
# 14 "../include/uapi/linux/random.h" 2
# 41 "../include/uapi/linux/random.h"
struct rand_pool_info {
 int entropy_count;
 int buf_size;
 __u32 buf[0];
};
# 14 "../include/linux/random.h" 2

struct random_ready_callback {
 struct list_head list;
 void (*func)(struct random_ready_callback *rdy);
 struct module *owner;
};

extern void add_device_randomness(const void *, unsigned int);
extern void add_bootloader_randomness(const void *, unsigned int);
# 31 "../include/linux/random.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_latent_entropy(void) {}


extern void add_input_randomness(unsigned int type, unsigned int code,
     unsigned int value) ;
extern void add_interrupt_randomness(int irq, int irq_flags) ;

extern void get_random_bytes(void *buf, int nbytes);
extern int wait_for_random_bytes(void);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) rand_initialize(void);
extern bool rng_is_initialized(void);
extern int add_random_ready_callback(struct random_ready_callback *rdy);
extern void del_random_ready_callback(struct random_ready_callback *rdy);
extern int __attribute__((__warn_unused_result__)) get_random_bytes_arch(void *buf, int nbytes);





u32 get_random_u32(void);
u64 get_random_u64(void);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int get_random_int(void)
{
 return get_random_u32();
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_random_long(void)
{

 return get_random_u64();



}
# 79 "../include/linux/random.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_random_canary(void)
{
 unsigned long val = get_random_long();

 return val & 0xffffffffffffff00UL;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_bytes_wait(void *buf, int nbytes)
{
 int ret = wait_for_random_bytes();
 get_random_bytes(buf, nbytes);
 return ret;
}
# 103 "../include/linux/random.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_u32_wait(u32 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u32(); return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_u64_wait(u64 *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_u64(); return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_int_wait(int *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_int(); return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_random_long_wait(long *out) { int ret = wait_for_random_bytes(); if (__builtin_expect(!!(ret), 0)) return ret; *out = get_random_long(); return 0; }


unsigned long randomize_page(unsigned long start, unsigned long range);

u32 prandom_u32(void);
void prandom_bytes(void *buf, size_t nbytes);
void prandom_seed(u32 seed);
void prandom_reseed_late(void);

struct rnd_state {
 __u32 s1, s2, s3, s4;
};

u32 prandom_u32_state(struct rnd_state *state);
void prandom_bytes_state(struct rnd_state *state, void *buf, size_t nbytes);
void prandom_seed_full_state(struct rnd_state *pcpu_state);
# 139 "../include/linux/random.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 prandom_u32_max(u32 ep_ro)
{
 return (u32)(((u64) prandom_u32() * ep_ro) >> 32);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __seed(u32 x, u32 m)
{
 return (x < m) ? x + m : x;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prandom_seed_state(struct rnd_state *state, u64 seed)
{
 u32 i = (seed >> 32) ^ (seed << 10) ^ seed;

 state->s1 = __seed(i, 2U);
 state->s2 = __seed(i, 8U);
 state->s3 = __seed(i, 16U);
 state->s4 = __seed(i, 128U);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_get_random_long(unsigned long *v)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_get_random_int(unsigned int *v)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_has_random(void)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_get_random_seed_long(unsigned long *v)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_get_random_seed_int(unsigned int *v)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_has_random_seed(void)
{
 return 0;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 next_pseudo_random32(u32 seed)
{
 return seed * 1664525 + 1013904223;
}
# 7 "../arch/arm64/include/asm/pointer_auth.h" 2
# 17 "../arch/arm64/include/asm/pointer_auth.h"
struct ptrauth_key {
 unsigned long lo, hi;
};





struct ptrauth_keys {
 struct ptrauth_key apia;
 struct ptrauth_key apib;
 struct ptrauth_key apda;
 struct ptrauth_key apdb;
 struct ptrauth_key apga;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrauth_keys_init(struct ptrauth_keys *keys)
{
 if (system_supports_address_auth()) {
  get_random_bytes(&keys->apia, sizeof(keys->apia));
  get_random_bytes(&keys->apib, sizeof(keys->apib));
  get_random_bytes(&keys->apda, sizeof(keys->apda));
  get_random_bytes(&keys->apdb, sizeof(keys->apdb));
 }

 if (system_supports_generic_auth())
  get_random_bytes(&keys->apga, sizeof(keys->apga));
}
# 53 "../arch/arm64/include/asm/pointer_auth.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrauth_keys_switch(struct ptrauth_keys *keys)
{
 if (system_supports_address_auth()) {
  do { struct ptrauth_key __pki_v = (keys->apia); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
  do { struct ptrauth_key __pki_v = (keys->apib); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((2) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((1) << 8) | ((3) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
  do { struct ptrauth_key __pki_v = (keys->apda); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
  do { struct ptrauth_key __pki_v = (keys->apdb); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((2) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((2) << 8) | ((3) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
 }

 if (system_supports_generic_auth())
  do { struct ptrauth_key __pki_v = (keys->apga); do { u64 __val = (u64)(__pki_v.lo); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((3) << 8) | ((0) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); do { u64 __val = (u64)(__pki_v.hi); asm volatile("	.irp	num,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30\n" "	.equ	.L__reg_num_x\\num, \\num\n" "	.endr\n" "	.equ	.L__reg_num_xzr, 31\n" "	.macro	msr_s, sreg, rt\n" ".inst " "(0xd5000000|(\\sreg)|(.L__reg_num_\\rt))" "\n\t" "	.endm\n" "	msr_s " "(((3) << 19) | ((0) << 16) | ((2) << 12) | ((3) << 8) | ((1) << 5))" ", " "%x0" "\n" "	.purgem	msr_s\n" : : "rZ" (__val)); } while (0); } while (0);
}

extern int ptrauth_prctl_reset_keys(struct task_struct *tsk, unsigned long arg);
# 75 "../arch/arm64/include/asm/pointer_auth.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long ptrauth_strip_insn_pac(unsigned long ptr)
{
 return ptr & ~(((~(((0UL)))) - ((((1UL))) << (vabits_actual)) + 1) & (~(((0UL))) >> (64 - 1 - (54))));
}
# 36 "../arch/arm64/include/asm/processor.h" 2

# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 38 "../arch/arm64/include/asm/processor.h" 2
# 93 "../arch/arm64/include/asm/processor.h"
extern phys_addr_t arm64_dma_phys_limit;


struct debug_info {


 int suspended_step;

 int bps_disabled;
 int wps_disabled;

 struct perf_event *hbp_break[16];
 struct perf_event *hbp_watch[16];

};

struct cpu_context {
 unsigned long x19;
 unsigned long x20;
 unsigned long x21;
 unsigned long x22;
 unsigned long x23;
 unsigned long x24;
 unsigned long x25;
 unsigned long x26;
 unsigned long x27;
 unsigned long x28;
 unsigned long fp;
 unsigned long sp;
 unsigned long pc;
};

struct thread_struct {
 struct cpu_context cpu_context;






 struct {
  unsigned long tp_value;
  unsigned long tp2_value;
  struct user_fpsimd_state fpsimd_state;
 } uw;

 unsigned int fpsimd_cpu;
 void *sve_state;
 unsigned int sve_vl;
 unsigned int sve_vl_onexec;
 unsigned long fault_address;
 unsigned long fault_code;
 struct debug_info debug;

 struct ptrauth_keys keys_user;

};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_thread_struct_whitelist(unsigned long *offset,
      unsigned long *size)
{

 do { extern void __compiletime_assert_158(void) ; if (!(!(sizeof((((struct thread_struct *)0)->uw)) != sizeof((((struct thread_struct *)0)->uw.tp_value)) + sizeof((((struct thread_struct *)0)->uw.tp2_value)) + sizeof((((struct thread_struct *)0)->uw.fpsimd_state))))) __compiletime_assert_158(); } while (0);




 *offset = __builtin_offsetof(struct thread_struct, uw);
 *size = sizeof((((struct thread_struct *)0)->uw));
}
# 179 "../arch/arm64/include/asm/processor.h"
void tls_preserve_current_state(void);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void start_thread_common(struct pt_regs *regs, unsigned long pc)
{
 memset(regs, 0, sizeof(*regs));
 forget_syscall(regs);
 regs->pc = pc;

 if (system_uses_irq_prio_masking())
  regs->pmr_save = 0xe0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_ssbs_bit(struct pt_regs *regs)
{
 regs->pstate |= 0x00001000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compat_ssbs_bit(struct pt_regs *regs)
{
 regs->pstate |= 0x00800000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void start_thread(struct pt_regs *regs, unsigned long pc,
    unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000000;

 if (arm64_get_ssbd_state() != 2)
  set_ssbs_bit(regs);

 regs->sp = sp;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void compat_start_thread(struct pt_regs *regs, unsigned long pc,
           unsigned long sp)
{
 start_thread_common(regs, pc);
 regs->pstate = 0x00000010;
 if (pc & 1)
  regs->pstate |= 0x00000020;





 if (arm64_get_ssbd_state() != 2)
  set_compat_ssbs_bit(regs);

 regs->regs[13] = sp;
}



struct task_struct;


extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_relax(void)
{
 asm volatile("yield" ::: "memory");
}


extern struct task_struct *cpu_switch_to(struct task_struct *prev,
      struct task_struct *next);
# 264 "../arch/arm64/include/asm/processor.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetch(const void *ptr)
{
 asm volatile("prfm pldl1keep, %a0\n" : : "p" (ptr));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void prefetchw(const void *ptr)
{
 asm volatile("prfm pstl1keep, %a0\n" : : "p" (ptr));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void spin_lock_prefetch(const void *ptr)
{
 asm volatile("prfm pstl1strm, %a0" : : "p" (ptr));


}



extern unsigned long __attribute__((__section__(".data..ro_after_init"))) signal_minsigstksz;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) minsigstksz_setup(void);
# 297 "../arch/arm64/include/asm/processor.h"
# 1 "../arch/arm64/include/asm/fpsimd.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 1 "../include/uapi/asm-generic/errno.h" 1




# 1 "../include/uapi/asm-generic/errno-base.h" 1
# 6 "../include/uapi/asm-generic/errno.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/errno.h" 2
# 9 "../arch/arm64/include/asm/fpsimd.h" 2

# 1 "../arch/arm64/include/asm/processor.h" 1
# 11 "../arch/arm64/include/asm/fpsimd.h" 2
# 1 "../arch/arm64/include/uapi/asm/sigcontext.h" 1
# 28 "../arch/arm64/include/uapi/asm/sigcontext.h"
struct sigcontext {
 __u64 fault_address;

 __u64 regs[31];
 __u64 sp;
 __u64 pc;
 __u64 pstate;

 __u8 __reserved[4096] __attribute__((__aligned__(16)));
};
# 66 "../arch/arm64/include/uapi/asm/sigcontext.h"
struct _aarch64_ctx {
 __u32 magic;
 __u32 size;
};



struct fpsimd_context {
 struct _aarch64_ctx head;
 __u32 fpsr;
 __u32 fpcr;
 __uint128_t vregs[32];
};
# 92 "../arch/arm64/include/uapi/asm/sigcontext.h"
struct esr_context {
 struct _aarch64_ctx head;
 __u64 esr;
};
# 125 "../arch/arm64/include/uapi/asm/sigcontext.h"
struct extra_context {
 struct _aarch64_ctx head;
 __u64 datap;
 __u32 size;
 __u32 __reserved[3];
};



struct sve_context {
 struct _aarch64_ctx head;
 __u16 vl;
 __u16 __reserved[3];
};
# 12 "../arch/arm64/include/asm/fpsimd.h" 2




# 1 "../include/linux/bitmap.h" 1
# 111 "../include/linux/bitmap.h"
extern unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
extern unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
extern void bitmap_free(const unsigned long *bitmap);





extern int __bitmap_empty(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_full(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
extern bool __attribute__((__pure__)) __bitmap_or_equal(const unsigned long *src1,
         const unsigned long *src2,
         const unsigned long *src3,
         unsigned int nbits);
extern void __bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits);
extern void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_subset(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
extern void __bitmap_set(unsigned long *map, unsigned int start, int len);
extern void __bitmap_clear(unsigned long *map, unsigned int start, int len);

extern unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 168 "../include/linux/bitmap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

extern int __bitmap_parse(const char *buf, unsigned int buflen, int is_user,
   unsigned long *dst, int nbits);
extern int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
extern int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
extern int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
extern void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
extern void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
extern int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
extern void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
extern int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);






extern unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
extern int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);
# 219 "../include/linux/bitmap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0, len);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memset(dst, 0xff, len);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
 memcpy(dst, src, len);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_copy_clear_tail(unsigned long *dst,
  const unsigned long *src, unsigned int nbits)
{
 bitmap_copy(dst, src, nbits);
 if (nbits % 64)
  dst[nbits / 64] &= (~0UL >> (-(nbits) & (64 - 1)));
}






extern void bitmap_from_arr32(unsigned long *bitmap, const u32 *buf,
       unsigned int nbits);
extern void bitmap_to_arr32(u32 *buf, const unsigned long *bitmap,
       unsigned int nbits);
# 267 "../include/linux/bitmap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 317 "../include/linux/bitmap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}
# 336 "../include/linux/bitmap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bitmap_or_equal(const unsigned long *src1,
       const unsigned long *src2,
       const unsigned long *src3,
       unsigned int nbits)
{
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return __bitmap_or_equal(src1, src2, src3, nbits);

 return !(((*src1 | *src2) ^ *src3) & (~0UL >> (-(nbits) & (64 - 1))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_next_bit((src), (nbits), 0) == nbits;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_next_zero_bit((src), (nbits), 0) == nbits;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *maskp, int nmaskbits)
{
 return __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
}
# 483 "../include/linux/bitmap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 17 "../arch/arm64/include/asm/fpsimd.h" 2
# 35 "../arch/arm64/include/asm/fpsimd.h"
struct task_struct;

extern void fpsimd_save_state(struct user_fpsimd_state *state);
extern void fpsimd_load_state(struct user_fpsimd_state *state);

extern void fpsimd_thread_switch(struct task_struct *next);
extern void fpsimd_flush_thread(void);

extern void fpsimd_signal_preserve_current_state(void);
extern void fpsimd_preserve_current_state(void);
extern void fpsimd_restore_current_state(void);
extern void fpsimd_update_current_state(struct user_fpsimd_state const *state);

extern void fpsimd_bind_task_to_cpu(void);
extern void fpsimd_bind_state_to_cpu(struct user_fpsimd_state *state,
         void *sve_state, unsigned int sve_vl);

extern void fpsimd_flush_task_state(struct task_struct *target);
extern void fpsimd_save_and_flush_cpu_state(void);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t sve_ffr_offset(int vl)
{
 return (((sizeof(struct sve_context) + (16 - 1)) / 16 * 16) + ((0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0)) + (((0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0)) + ((__u32)(((vl) / 16)) * (16 / 8)) * (16)) - (0 + ((0 + ((__u32)(((vl) / 16)) * 16) * (32)) - 0))))) - ((sizeof(struct sve_context) + (16 - 1)) / 16 * 16);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *sve_pffr(struct thread_struct *thread)
{
 return (char *)thread->sve_state + sve_ffr_offset(thread->sve_vl);
}

extern void sve_save_state(void *state, u32 *pfpsr);
extern void sve_load_state(void const *state, u32 const *pfpsr,
      unsigned long vq_minus_1);
extern unsigned int sve_get_vl(void);

struct arm64_cpu_capabilities;
extern void sve_kernel_enable(const struct arm64_cpu_capabilities *__unused);

extern u64 read_zcr_features(void);

extern int __attribute__((__section__(".data..ro_after_init"))) sve_max_vl;
extern int __attribute__((__section__(".data..ro_after_init"))) sve_max_virtualisable_vl;
extern __attribute__((__section__(".data..ro_after_init"))) unsigned long sve_vq_map[(((512) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __vq_to_bit(unsigned int vq)
{
 return 512 - vq;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __bit_to_vq(unsigned int bit)
{
 return 512 - bit;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sve_vq_available(unsigned int vq)
{
 return test_bit(__vq_to_bit(vq), sve_vq_map);
}



extern size_t sve_state_size(struct task_struct const *task);

extern void sve_alloc(struct task_struct *task);
extern void fpsimd_release_task(struct task_struct *task);
extern void fpsimd_sync_to_sve(struct task_struct *task);
extern void sve_sync_to_fpsimd(struct task_struct *task);
extern void sve_sync_from_fpsimd_zeropad(struct task_struct *task);

extern int sve_set_vector_length(struct task_struct *task,
     unsigned long vl, unsigned long flags);

extern int sve_set_current_vl(unsigned long arg);
extern int sve_get_current_vl(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sve_user_disable(void)
{
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "cpacr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)((((((1UL))) << (17))))) | (0); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "cpacr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sve_user_enable(void)
{
 do { u64 __scs_val = ({ u64 __val; asm volatile("mrs %0, " "cpacr_el1" : "=r" (__val)); __val; }); u64 __scs_new = (__scs_val & ~(u64)(0)) | ((((((1UL))) << (17)))); if (__scs_new != __scs_val) do { u64 __val = (u64)(__scs_new); asm volatile("msr " "cpacr_el1" ", %x0" : : "rZ" (__val)); } while (0); } while (0);
}





extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sve_init_vq_map(void);
extern void sve_update_vq_map(void);
extern int sve_verify_vq_map(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) sve_setup(void);
# 167 "../arch/arm64/include/asm/fpsimd.h"
extern void __efi_fpsimd_begin(void);
extern void __efi_fpsimd_end(void);
# 298 "../arch/arm64/include/asm/processor.h" 2
# 308 "../arch/arm64/include/asm/processor.h"
long set_tagged_addr_ctrl(unsigned long arg);
long get_tagged_addr_ctrl(void);
# 15 "../include/asm-generic/qrwlock.h" 2
# 30 "../include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock);
extern void queued_write_lock_slowpath(struct qrwlock *lock);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_read_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1)) {
  cnts = (u32)atomic_add_return_acquire((1U << 9), &lock->cnts);
  if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
   return 1;
  atomic_sub((1U << 9), &lock->cnts);
 }
 return 0;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int queued_write_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(cnts), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1);

}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_lock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_add_return_acquire((1U << 9), &lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0x1ff)), 1))
  return;


 queued_read_lock_slowpath(lock);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_lock(struct qrwlock *lock)
{
 u32 cnts = 0;

 if (__builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->cnts, &cnts, 0x0ff)), 1))
  return;

 queued_write_lock_slowpath(lock);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return_release((1U << 9), &lock->cnts);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void queued_write_unlock(struct qrwlock *lock)
{
 do { typeof(&lock->wlocked) __p = (&lock->wlocked); union { typeof(*&lock->wlocked) __val; char __c[1]; } __u = { .__val = ( typeof(*&lock->wlocked)) (0) }; do { extern void __compiletime_assert_116(void) ; if (!((sizeof(*&lock->wlocked) == sizeof(char) || sizeof(*&lock->wlocked) == sizeof(short) || sizeof(*&lock->wlocked) == sizeof(int) || sizeof(*&lock->wlocked) == sizeof(long)))) __compiletime_assert_116(); } while (0); kasan_check_write(__p, sizeof(*&lock->wlocked)); switch (sizeof(*&lock->wlocked)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}
# 2 "./arch/arm64/include/generated/asm/qrwlock.h" 2
# 9 "../arch/arm64/include/asm/spinlock.h" 2
# 1 "./arch/arm64/include/generated/asm/qspinlock.h" 1
# 1 "../include/asm-generic/qspinlock.h" 1
# 20 "../include/asm-generic/qspinlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_locked(struct qspinlock *lock)
{




 return atomic_read(&lock->val);
}
# 39 "../include/asm-generic/qspinlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_value_unlocked(struct qspinlock lock)
{
 return !atomic_read(&lock.val);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_is_contended(struct qspinlock *lock)
{
 return atomic_read(&lock->val) & ~(((1U << 8) - 1) << 0);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int queued_spin_trylock(struct qspinlock *lock)
{
 u32 val = atomic_read(&lock->val);

 if (__builtin_expect(!!(val), 0))
  return 0;

 return __builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))), 1);
}

extern void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void queued_spin_lock(struct qspinlock *lock)
{
 u32 val = 0;

 if (__builtin_expect(!!(atomic_try_cmpxchg_acquire(&lock->val, &val, (1U << 0))), 1))
  return;

 queued_spin_lock_slowpath(lock, val);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void queued_spin_unlock(struct qspinlock *lock)
{



 do { typeof(&lock->locked) __p = (&lock->locked); union { typeof(*&lock->locked) __val; char __c[1]; } __u = { .__val = ( typeof(*&lock->locked)) (0) }; do { extern void __compiletime_assert_94(void) ; if (!((sizeof(*&lock->locked) == sizeof(char) || sizeof(*&lock->locked) == sizeof(short) || sizeof(*&lock->locked) == sizeof(int) || sizeof(*&lock->locked) == sizeof(long)))) __compiletime_assert_94(); } while (0); kasan_check_write(__p, sizeof(*&lock->locked)); switch (sizeof(*&lock->locked)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool virt_spin_lock(struct qspinlock *lock)
{
 return false;
}
# 2 "./arch/arm64/include/generated/asm/qspinlock.h" 2
# 10 "../arch/arm64/include/asm/spinlock.h" 2
# 90 "../include/linux/spinlock.h" 2
# 178 "../include/linux/spinlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 do { } while (0);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
 do { } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 int ret = queued_spin_trylock(&(lock)->raw_lock);

 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 queued_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 310 "../include/linux/spinlock.h"
# 1 "../include/linux/rwlock.h" 1
# 311 "../include/linux/spinlock.h" 2





# 1 "../include/linux/spinlock_api_smp.h" 1
# 18 "../include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((section(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((section(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((section(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((section(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "../include/linux/spinlock_api_smp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 __asm__ __volatile__("" : : : "memory");
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("" : : : "memory");
 return 0;
}
# 104 "../include/linux/spinlock_api_smp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
# 119 "../include/linux/spinlock_api_smp.h"
 do_raw_spin_lock_flags(lock, &flags);

 return flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 return 0;
}


# 1 "../include/linux/rwlock_api_smp.h" 1
# 18 "../include/linux/rwlock_api_smp.h"
void __attribute__((section(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((section(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((section(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "../include/linux/rwlock_api_smp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_read_trylock(rwlock_t *lock)
{
 __asm__ __volatile__("" : : : "memory");
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("" : : : "memory");
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __raw_write_trylock(rwlock_t *lock)
{
 __asm__ __volatile__("" : : : "memory");
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 __asm__ __volatile__("" : : : "memory");
 return 0;
}
# 146 "../include/linux/rwlock_api_smp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock(rwlock_t *lock)
{
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do {(void)0; queued_read_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_lock(rwlock_t *lock)
{
 __asm__ __volatile__("" : : : "memory");
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + 0));
}
# 191 "../include/linux/spinlock_api_smp.h" 2
# 317 "../include/linux/spinlock.h" 2








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock(spinlock_t *lock)
{
 __raw_spin_lock(&lock->rlock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_bh(spinlock_t *lock)
{
 __raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock(spinlock_t *lock)
{
 return (__raw_spin_trylock(&lock->rlock));
}
# 361 "../include/linux/spinlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_lock_irq(spinlock_t *lock)
{
 __raw_spin_lock_irq(&lock->rlock);
}
# 376 "../include/linux/spinlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock(spinlock_t *lock)
{
 __raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_bh(spinlock_t *lock)
{
 __raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irq(spinlock_t *lock)
{
 __raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_bh(spinlock_t *lock)
{
 return (__raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (__raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}
# 429 "../include/linux/spinlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_locked(spinlock_t *lock)
{
 return queued_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int spin_is_contended(spinlock_t *lock)
{
 return queued_spin_is_contended(&(&lock->rlock)->raw_lock);
}
# 454 "../include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);



int __alloc_bucket_spinlocks(spinlock_t **locks, unsigned int *lock_mask,
        size_t max_size, unsigned int cpu_mult,
        gfp_t gfp, const char *name,
        struct lock_class_key *key);
# 478 "../include/linux/spinlock.h"
void free_bucket_spinlocks(spinlock_t *locks);
# 9 "../include/linux/mmzone.h" 2

# 1 "../include/linux/wait.h" 1
# 12 "../include/linux/wait.h"
# 1 "../include/uapi/linux/wait.h" 1
# 13 "../include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 27 "../include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 61 "../include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 79 "../include/linux/wait.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 124 "../include/linux/wait.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 137 "../include/linux/wait.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_single_sleeper(struct wait_queue_head *wq_head)
{
 return list_is_singular(&wq_head->head);
}
# 150 "../include/linux/wait.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 asm volatile("dmb " "ish" : : : "memory");
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add(&wq_entry->entry, &wq_head->head);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode, int nr);
# 245 "../include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 729 "../include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 1123 "../include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 11 "../include/linux/mmzone.h" 2


# 1 "../include/linux/threads.h" 1
# 14 "../include/linux/mmzone.h" 2
# 1 "../include/linux/numa.h" 1
# 15 "../include/linux/mmzone.h" 2

# 1 "../include/linux/seqlock.h" 1
# 48 "../include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 108 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret;

repeat:
 ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 if (__builtin_expect(!!(ret & 1), 0)) {
  cpu_relax();
  goto repeat;
 }
 return ret;
}
# 130 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 asm volatile("dmb " "ishld" : : : "memory");
 return ret;
}
# 146 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = __read_seqcount_begin(s);
 asm volatile("dmb " "ishld" : : : "memory");
 return ret;
}
# 162 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqcount_begin(const seqcount_t *s)
{
                                  ;
 return raw_read_seqcount_begin(s);
}
# 182 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned raw_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 asm volatile("dmb " "ishld" : : : "memory");
 return ret & ~1;
}
# 203 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 return __builtin_expect(!!(s->sequence != start), 0);
}
# 218 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 asm volatile("dmb " "ishld" : : : "memory");
 return __read_seqcount_retry(s, start);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_begin(seqcount_t *s)
{
 s->sequence++;
 asm volatile("dmb " "ishst" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_end(seqcount_t *s)
{
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence++;
}
# 272 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_barrier(seqcount_t *s)
{
 s->sequence++;
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence++;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int raw_read_seqcount_latch(seqcount_t *s)
{

 int seq = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 return seq;
}
# 363 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void raw_write_seqcount_latch(seqcount_t *s)
{
       asm volatile("dmb " "ishst" : : : "memory");
       s->sequence++;
       asm volatile("dmb " "ishst" : : : "memory");
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 raw_write_seqcount_begin(s);
 do { } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_begin(seqcount_t *s)
{
 write_seqcount_begin_nested(s, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 raw_write_seqcount_end(s);
}
# 398 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqcount_invalidate(seqcount_t *s)
{
 asm volatile("dmb " "ishst" : : : "memory");
 s->sequence+=2;
}

typedef struct {
 struct seqcount seqcount;
 spinlock_t lock;
} seqlock_t;
# 431 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqbegin(const seqlock_t *sl)
{
 return read_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{
 return read_seqcount_retry(&sl->seqcount, start);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_bh(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void write_sequnlock_irq(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = __raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 write_seqcount_begin(&sl->seqcount);
 return flags;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 526 "../include/linux/seqlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = __raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 17 "../include/linux/mmzone.h" 2
# 1 "../include/linux/nodemask.h" 1
# 98 "../include/linux/nodemask.h"
typedef struct { unsigned long bits[((((1 << 6)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 109 "../include/linux/nodemask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __nodemask_pr_numnodes(const nodemask_t *m)
{
 return m ? (1 << 6) : 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const unsigned long *__nodemask_pr_bits(const nodemask_t *m)
{
 return m ? m->bits : ((void *)0);
}
# 128 "../include/linux/nodemask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_node(const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 6))) *)1 == (typeof((int)(find_next_bit((srcp->bits), ((1 << 6)), 0))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 6))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit((srcp->bits), ((1 << 6)), 0))) * 0l)) : (int *)8))))), (((int)((1 << 6))) < ((int)(find_next_bit((srcp->bits), ((1 << 6)), 0))) ? ((int)((1 << 6))) : ((int)(find_next_bit((srcp->bits), ((1 << 6)), 0)))), ({ typeof((int)((1 << 6))) __UNIQUE_ID___x0 = ((int)((1 << 6))); typeof((int)(find_next_bit((srcp->bits), ((1 << 6)), 0))) __UNIQUE_ID___y1 = ((int)(find_next_bit((srcp->bits), ((1 << 6)), 0))); ((__UNIQUE_ID___x0) < (__UNIQUE_ID___y1) ? (__UNIQUE_ID___x0) : (__UNIQUE_ID___y1)); }));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __next_node(int n, const nodemask_t *srcp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 6))) *)1 == (typeof((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 6))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) * 0l)) : (int *)8))))), (((int)((1 << 6))) < ((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) ? ((int)((1 << 6))) : ((int)(find_next_bit(srcp->bits, (1 << 6), n+1)))), ({ typeof((int)((1 << 6))) __UNIQUE_ID___x2 = ((int)((1 << 6))); typeof((int)(find_next_bit(srcp->bits, (1 << 6), n+1))) __UNIQUE_ID___y3 = ((int)(find_next_bit(srcp->bits, (1 << 6), n+1))); ((__UNIQUE_ID___x2) < (__UNIQUE_ID___y3) ? (__UNIQUE_ID___x2) : (__UNIQUE_ID___y3)); }));
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 6));
 __node_set((node), &(*mask));
}
# 299 "../include/linux/nodemask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __first_unset_node(const nodemask_t *maskp)
{
 return __builtin_choose_expr(((!!(sizeof((typeof((int)((1 << 6))) *)1 == (typeof((int)(find_next_zero_bit((maskp->bits), ((1 << 6)), 0))) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)((1 << 6))) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)((int)(find_next_zero_bit((maskp->bits), ((1 << 6)), 0))) * 0l)) : (int *)8))))), (((int)((1 << 6))) < ((int)(find_next_zero_bit((maskp->bits), ((1 << 6)), 0))) ? ((int)((1 << 6))) : ((int)(find_next_zero_bit((maskp->bits), ((1 << 6)), 0)))), ({ typeof((int)((1 << 6))) __UNIQUE_ID___x4 = ((int)((1 << 6))); typeof((int)(find_next_zero_bit((maskp->bits), ((1 << 6)), 0))) __UNIQUE_ID___y5 = ((int)(find_next_zero_bit((maskp->bits), ((1 << 6)), 0))); ((__UNIQUE_ID___x4) < (__UNIQUE_ID___y5) ? (__UNIQUE_ID___x4) : (__UNIQUE_ID___y5)); }));

}
# 333 "../include/linux/nodemask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 391 "../include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_state(int node, enum node_states state)
{
 return test_bit((node), (node_states[state]).bits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 6));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_online_node(int nid)
{
 return __next_node((nid), &(node_states[N_ONLINE]));
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int next_memory_node(int nid)
{
 return __next_node((nid), &(node_states[N_MEMORY]));
}

extern unsigned int nr_node_ids;
extern unsigned int nr_online_nodes;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_online(int nid)
{
 node_set_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_set_offline(int nid)
{
 node_clear_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}
# 497 "../include/linux/nodemask.h"
extern int node_random(const nodemask_t *maskp);
# 531 "../include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 18 "../include/linux/mmzone.h" 2
# 1 "../include/linux/pageblock-flags.h" 1
# 18 "../include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 55 "../include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(struct page *page,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);
# 19 "../include/linux/mmzone.h" 2
# 1 "../include/linux/page-flags-layout.h" 1





# 1 "./include/generated/bounds.h" 1
# 7 "../include/linux/page-flags-layout.h" 2
# 28 "../include/linux/page-flags-layout.h"
# 1 "../arch/arm64/include/asm/sparsemem.h" 1
# 29 "../include/linux/page-flags-layout.h" 2
# 20 "../include/linux/mmzone.h" 2

# 1 "../include/linux/mm_types.h" 1




# 1 "../include/linux/mm_types_task.h" 1
# 14 "../include/linux/mm_types_task.h"
# 1 "../include/linux/cpumask.h" 1
# 17 "../include/linux/cpumask.h"
typedef struct cpumask { unsigned long bits[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 39 "../include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 90 "../include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;





extern atomic_t __num_online_cpus;
# 110 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int num_online_cpus(void)
{
 return atomic_read(&__num_online_cpus);
}
# 132 "../include/linux/cpumask.h"
extern cpumask_t cpus_booted_once_mask;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{



}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_check(unsigned int cpu)
{
 cpu_max_bits_warn(cpu, ((unsigned int)128));
 return cpu;
}
# 212 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_next_bit((((srcp)->bits)), (((unsigned int)128)), 0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_last(const struct cpumask *srcp)
{
 return find_last_bit(((srcp)->bits), ((unsigned int)128));
}

unsigned int cpumask_next(int n, const struct cpumask *srcp);
# 237 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)128), n+1);
}

int cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
# 273 "../include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 325 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 __set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 __clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 358 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return test_bit(cpumask_check(cpu), (((cpumask))->bits));
}
# 372 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 386 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)128));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)128));
}
# 417 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)128));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)128));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)128));
}
# 460 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)128));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)128));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)128));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_or_equal(const struct cpumask *src1p,
        const struct cpumask *src2p,
        const struct cpumask *src3p)
{
 return bitmap_or_equal(((src1p)->bits), ((src2p)->bits),
          ((src3p)->bits), ((unsigned int)128));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)128));
}
# 525 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)128));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)128));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)128));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)128));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)128));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)128));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)128));
}
# 636 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)128));
}
# 650 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)128));
}
# 664 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 unsigned int len = strchrnul(buf, '\n') - buf;

 return bitmap_parse(buf, len, ((dstp)->bits), ((unsigned int)128));
}
# 678 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)128));
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int cpumask_size(void)
{
 return (((((unsigned int)128)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 751 "../include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 811 "../include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 128);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

void set_cpu_online(unsigned int cpu, bool online);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}
# 864 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 876 "../include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 913 "../include/linux/cpumask.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 15 "../include/linux/mm_types_task.h" 2

# 1 "../arch/arm64/include/asm/page.h" 1
# 15 "../arch/arm64/include/asm/page.h"
# 1 "../include/linux/personality.h" 1




# 1 "../include/uapi/linux/personality.h" 1
# 11 "../include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 42 "../include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 6 "../include/linux/personality.h" 2
# 16 "../arch/arm64/include/asm/page.h" 2
# 1 "../arch/arm64/include/asm/pgtable-types.h" 1
# 12 "../arch/arm64/include/asm/pgtable-types.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 13 "../arch/arm64/include/asm/pgtable-types.h" 2

typedef u64 pteval_t;
typedef u64 pmdval_t;
typedef u64 pudval_t;
typedef u64 pgdval_t;




typedef struct { pteval_t pte; } pte_t;




typedef struct { pmdval_t pmd; } pmd_t;
# 38 "../arch/arm64/include/asm/pgtable-types.h"
typedef struct { pgdval_t pgd; } pgd_t;



typedef struct { pteval_t pgprot; } pgprot_t;
# 51 "../arch/arm64/include/asm/pgtable-types.h"
# 1 "../include/asm-generic/pgtable-nopud.h" 1







# 1 "../include/asm-generic/pgtable-nop4d-hack.h" 1





# 1 "../include/asm-generic/5level-fixup.h" 1
# 24 "../include/asm-generic/5level-fixup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none(pgd_t p4d)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_bad(pgd_t p4d)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_present(pgd_t p4d)
{
 return 1;
}
# 7 "../include/asm-generic/pgtable-nop4d-hack.h" 2








typedef struct { pgd_t pgd; } pud_t;
# 27 "../include/asm-generic/pgtable-nop4d-hack.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none(pgd_t pgd) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_bad(pgd_t pgd) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_present(pgd_t pgd) { return 1; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgd_clear(pgd_t *pgd) { }
# 41 "../include/asm-generic/pgtable-nop4d-hack.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t *pud_offset(pgd_t *pgd, unsigned long address)
{
 return (pud_t *)pgd;
}
# 9 "../include/asm-generic/pgtable-nopud.h" 2
# 52 "../arch/arm64/include/asm/pgtable-types.h" 2
# 17 "../arch/arm64/include/asm/page.h" 2

extern void __cpu_clear_user_page(void *p, unsigned long user);
extern void __cpu_copy_user_page(void *to, const void *from,
     unsigned long user);
extern void copy_page(void *to, const void *from);
extern void clear_page(void *to);




typedef struct page *pgtable_t;

extern int pfn_valid(unsigned long);
# 39 "../arch/arm64/include/asm/page.h"
# 1 "../include/asm-generic/getorder.h" 1
# 29 "../include/asm-generic/getorder.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - 16;

  if (size < (1UL << 16))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? ( __builtin_constant_p((size) - 1) ? ( ((size) - 1) < 2 ? 0 : ((size) - 1) & (1ULL << 63) ? 63 : ((size) - 1) & (1ULL << 62) ? 62 : ((size) - 1) & (1ULL << 61) ? 61 : ((size) - 1) & (1ULL << 60) ? 60 : ((size) - 1) & (1ULL << 59) ? 59 : ((size) - 1) & (1ULL << 58) ? 58 : ((size) - 1) & (1ULL << 57) ? 57 : ((size) - 1) & (1ULL << 56) ? 56 : ((size) - 1) & (1ULL << 55) ? 55 : ((size) - 1) & (1ULL << 54) ? 54 : ((size) - 1) & (1ULL << 53) ? 53 : ((size) - 1) & (1ULL << 52) ? 52 : ((size) - 1) & (1ULL << 51) ? 51 : ((size) - 1) & (1ULL << 50) ? 50 : ((size) - 1) & (1ULL << 49) ? 49 : ((size) - 1) & (1ULL << 48) ? 48 : ((size) - 1) & (1ULL << 47) ? 47 : ((size) - 1) & (1ULL << 46) ? 46 : ((size) - 1) & (1ULL << 45) ? 45 : ((size) - 1) & (1ULL << 44) ? 44 : ((size) - 1) & (1ULL << 43) ? 43 : ((size) - 1) & (1ULL << 42) ? 42 : ((size) - 1) & (1ULL << 41) ? 41 : ((size) - 1) & (1ULL << 40) ? 40 : ((size) - 1) & (1ULL << 39) ? 39 : ((size) - 1) & (1ULL << 38) ? 38 : ((size) - 1) & (1ULL << 37) ? 37 : ((size) - 1) & (1ULL << 36) ? 36 : ((size) - 1) & (1ULL << 35) ? 35 : ((size) - 1) & (1ULL << 34) ? 34 : ((size) - 1) & (1ULL << 33) ? 33 : ((size) - 1) & (1ULL << 32) ? 32 : ((size) - 1) & (1ULL << 31) ? 31 : ((size) - 1) & (1ULL << 30) ? 30 : ((size) - 1) & (1ULL << 29) ? 29 : ((size) - 1) & (1ULL << 28) ? 28 : ((size) - 1) & (1ULL << 27) ? 27 : ((size) - 1) & (1ULL << 26) ? 26 : ((size) - 1) & (1ULL << 25) ? 25 : ((size) - 1) & (1ULL << 24) ? 24 : ((size) - 1) & (1ULL << 23) ? 23 : ((size) - 1) & (1ULL << 22) ? 22 : ((size) - 1) & (1ULL << 21) ? 21 : ((size) - 1) & (1ULL << 20) ? 20 : ((size) - 1) & (1ULL << 19) ? 19 : ((size) - 1) & (1ULL << 18) ? 18 : ((size) - 1) & (1ULL << 17) ? 17 : ((size) - 1) & (1ULL << 16) ? 16 : ((size) - 1) & (1ULL << 15) ? 15 : ((size) - 1) & (1ULL << 14) ? 14 : ((size) - 1) & (1ULL << 13) ? 13 : ((size) - 1) & (1ULL << 12) ? 12 : ((size) - 1) & (1ULL << 11) ? 11 : ((size) - 1) & (1ULL << 10) ? 10 : ((size) - 1) & (1ULL << 9) ? 9 : ((size) - 1) & (1ULL << 8) ? 8 : ((size) - 1) & (1ULL << 7) ? 7 : ((size) - 1) & (1ULL << 6) ? 6 : ((size) - 1) & (1ULL << 5) ? 5 : ((size) - 1) & (1ULL << 4) ? 4 : ((size) - 1) & (1ULL << 3) ? 3 : ((size) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 16 + 1;
 }

 size--;
 size >>= 16;



 return fls64(size);

}
# 40 "../arch/arm64/include/asm/page.h" 2
# 17 "../include/linux/mm_types_task.h" 2
# 34 "../include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};

enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};


struct tlbflush_unmap_batch {
# 93 "../include/linux/mm_types_task.h"
};
# 6 "../include/linux/mm_types.h" 2

# 1 "../include/linux/auxvec.h" 1




# 1 "../include/uapi/linux/auxvec.h" 1




# 1 "../arch/arm64/include/uapi/asm/auxvec.h" 1
# 6 "../include/uapi/linux/auxvec.h" 2
# 6 "../include/linux/auxvec.h" 2
# 8 "../include/linux/mm_types.h" 2


# 1 "../include/linux/rbtree.h" 1
# 22 "../include/linux/rbtree.h"
# 1 "../include/linux/rcupdate.h" 1
# 38 "../include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);
void rcu_barrier_tasks(void);
void synchronize_rcu(void);
# 57 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_lock(void)
{
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __rcu_read_unlock(void)
{
 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_preempt_depth(void)
{
 return 0;
}




void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_clock_irq(int user);
void rcu_report_dead(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 93 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_enter(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_user_exit(void) { }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_init_nohz(void) { }
# 139 "../include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 171 "../include/linux/rcupdate.h"
# 1 "../include/linux/rcutree.h" 1
# 20 "../include/linux/rcutree.h"
void rcu_softirq_qs(void);
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_expedited(void);
void kfree_call_rcu(struct callback_head *head, rcu_callback_t func);

void rcu_barrier(void);
bool rcu_eqs_special_set(int cpu);
unsigned long get_state_synchronize_rcu(void);
void cond_synchronize_rcu(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);

void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_is_watching(void);

void rcu_all_qs(void);



int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
# 172 "../include/linux/rcupdate.h" 2
# 192 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_lockdep_current_cpu_online(void) { return true; }
# 231 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_sched_held(void)
{
 return !0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rcu_read_lock_any_held(void)
{
 return !0;
}
# 595 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0);

}
# 647 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock(void)
{
 do { } while (0);

 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 668 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0);

}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_bh(void)
{
 do { } while (0);

 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 703 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched(void)
{
 __asm__ __volatile__("" : : : "memory");
 (void)0;
 do { } while (0);
 do { } while (0);

}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_lock_sched_notrace(void)
{
 __asm__ __volatile__("" : : : "memory");
 (void)0;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched(void)
{
 do { } while (0);

 do { } while (0);
 (void)0;
 __asm__ __volatile__("" : : : "memory");
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 __asm__ __volatile__("" : : : "memory");
}
# 868 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcu_head_init(struct callback_head *rhp)
{
 rhp->func = (rcu_callback_t)~0L;
}
# 886 "../include/linux/rcupdate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
rcu_head_after_call_rcu(struct callback_head *rhp, rcu_callback_t f)
{
 rcu_callback_t func = ({ union { typeof(rhp->func) __val; char __c[1]; } __u; if (1) __read_once_size(&(rhp->func), __u.__c, sizeof(rhp->func)); else __read_once_size_nocheck(&(rhp->func), __u.__c, sizeof(rhp->func)); do { } while (0); __u.__val; });

 if (func == f)
  return true;
 ({ int __ret_warn_on = !!(func != (rcu_callback_t)~0L); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/rcupdate.h\"; .popsection; .long 14472b - 14470b; .short 893; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return false;
}
# 23 "../include/linux/rbtree.h" 2

struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 49 "../include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);


extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 do { uintptr_t _r_a_p__v = (uintptr_t)(node); ; if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*rb_link)) __val; char __c[1]; } __u = { .__val = ( typeof((*rb_link))) ((typeof(*rb_link))(_r_a_p__v)) }; __write_once_size(&((*rb_link)), __u.__c, sizeof((*rb_link))); __u.__val; }); else do { typeof(&*rb_link) __p = (&*rb_link); union { typeof(*&*rb_link) __val; char __c[1]; } __u = { .__val = ( typeof(*&*rb_link)) ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)) }; do { extern void __compiletime_assert_84(void) ; if (!((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long)))) __compiletime_assert_84(); } while (0); kasan_check_write(__p, sizeof(*&*rb_link)); switch (sizeof(*&*rb_link)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
}
# 125 "../include/linux/rbtree.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_insert_color_cached(struct rb_node *node,
       struct rb_root_cached *root,
       bool leftmost)
{
 if (leftmost)
  root->rb_leftmost = node;
 rb_insert_color(node, &root->rb_root);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_erase_cached(struct rb_node *node,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == node)
  root->rb_leftmost = rb_next(node);
 rb_erase(node, &root->rb_root);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rb_replace_node_cached(struct rb_node *victim,
       struct rb_node *new,
       struct rb_root_cached *root)
{
 if (root->rb_leftmost == victim)
  root->rb_leftmost = new;
 rb_replace_node(victim, new, &root->rb_root);
}
# 11 "../include/linux/mm_types.h" 2
# 1 "../include/linux/rwsem.h" 1
# 18 "../include/linux/rwsem.h"
# 1 "../include/linux/err.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 9 "../include/linux/err.h" 2
# 24 "../include/linux/err.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long __attribute__((__warn_unused_result__)) PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "../include/linux/err.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__warn_unused_result__)) ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 19 "../include/linux/rwsem.h" 2

# 1 "../include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 21 "../include/linux/rwsem.h" 2
# 35 "../include/linux/rwsem.h"
struct rw_semaphore {
 atomic_long_t count;





 atomic_long_t owner;

 struct optimistic_spin_queue osq;

 raw_spinlock_t wait_lock;
 struct list_head wait_list;






};
# 63 "../include/linux/rwsem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 103 "../include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 119 "../include/linux/rwsem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}




extern void down_read(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_read_killable(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 12 "../include/linux/mm_types.h" 2
# 1 "../include/linux/completion.h" 1
# 26 "../include/linux/completion.h"
struct completion {
 unsigned int done;
 wait_queue_head_t wait;
};



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_acquire(struct completion *x) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void complete_release(struct completion *x) {}
# 85 "../include/linux/completion.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_waitqueue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 98 "../include/linux/completion.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 13 "../include/linux/mm_types.h" 2

# 1 "../include/linux/uprobes.h" 1
# 14 "../include/linux/uprobes.h"
# 1 "../include/linux/errno.h" 1




# 1 "../include/uapi/linux/errno.h" 1
# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 2 "../include/uapi/linux/errno.h" 2
# 6 "../include/linux/errno.h" 2
# 15 "../include/linux/uprobes.h" 2




struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};
# 142 "../include/linux/uprobes.h"
struct uprobes_state {
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobes_init(void)
{
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uprobe_register_refctr(struct inode *inode, loff_t offset, loff_t ref_ctr_offset, struct uprobe_consumer *uc)
{
 return -38;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool add)
{
 return -38;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uprobe_mmap(struct vm_area_struct *vma)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_start_dup_mmap(void)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_end_dup_mmap(void)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_notify_resume(struct pt_regs *regs)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uprobe_deny_signal(void)
{
 return false;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_free_utask(struct task_struct *t)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_copy_process(struct task_struct *t, unsigned long flags)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uprobe_clear_state(struct mm_struct *mm)
{
}
# 15 "../include/linux/mm_types.h" 2

# 1 "../include/linux/workqueue.h" 1








# 1 "../include/linux/timer.h" 1





# 1 "../include/linux/ktime.h" 1
# 24 "../include/linux/ktime.h"
# 1 "../include/linux/time.h" 1
# 10 "../include/linux/time.h"
extern struct timezone sys_tz;

int get_timespec64(struct timespec64 *ts,
  const struct __kernel_timespec *uts);
int put_timespec64(const struct timespec64 *ts,
  struct __kernel_timespec *uts);
int get_itimerspec64(struct itimerspec64 *it,
   const struct __kernel_itimerspec *uit);
int put_itimerspec64(const struct itimerspec64 *it,
   struct __kernel_itimerspec *uit);

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);
# 38 "../include/linux/time.h"
struct itimerval;
extern int do_setitimer(int which, struct itimerval *value,
   struct itimerval *ovalue);
extern int do_getitimer(int which, struct itimerval *value);

extern long do_utimes(int dfd, const char *filename, struct timespec64 *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);


# 1 "../include/linux/time32.h" 1
# 13 "../include/linux/time32.h"
# 1 "../include/linux/timex.h" 1
# 56 "../include/linux/timex.h"
# 1 "../include/uapi/linux/timex.h" 1
# 56 "../include/uapi/linux/timex.h"
# 1 "../include/linux/time.h" 1
# 57 "../include/uapi/linux/timex.h" 2







struct timex {
 unsigned int modes;
 __kernel_long_t offset;
 __kernel_long_t freq;
 __kernel_long_t maxerror;
 __kernel_long_t esterror;
 int status;
 __kernel_long_t constant;
 __kernel_long_t precision;
 __kernel_long_t tolerance;


 struct timeval time;
 __kernel_long_t tick;

 __kernel_long_t ppsfreq;
 __kernel_long_t jitter;
 int shift;
 __kernel_long_t stabil;
 __kernel_long_t jitcnt;
 __kernel_long_t calcnt;
 __kernel_long_t errcnt;
 __kernel_long_t stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};

struct __kernel_timex_timeval {
 __kernel_time64_t tv_sec;
 long long tv_usec;
};

struct __kernel_timex {
 unsigned int modes;
 int :32;
 long long offset;
 long long freq;
 long long maxerror;
 long long esterror;
 int status;
 int :32;
 long long constant;
 long long precision;
 long long tolerance;


 struct __kernel_timex_timeval time;
 long long tick;

 long long ppsfreq;
 long long jitter;
 int shift;
 int :32;
 long long stabil;
 long long jitcnt;
 long long calcnt;
 long long errcnt;
 long long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "../include/linux/timex.h" 2






# 1 "../include/uapi/linux/param.h" 1




# 1 "../arch/arm64/include/uapi/asm/param.h" 1
# 22 "../arch/arm64/include/uapi/asm/param.h"
# 1 "../include/asm-generic/param.h" 1




# 1 "../include/uapi/asm-generic/param.h" 1
# 6 "../include/asm-generic/param.h" 2
# 23 "../arch/arm64/include/uapi/asm/param.h" 2
# 6 "../include/uapi/linux/param.h" 2
# 64 "../include/linux/timex.h" 2

# 1 "../arch/arm64/include/asm/timex.h" 1







# 1 "../arch/arm64/include/asm/arch_timer.h" 1
# 18 "../arch/arm64/include/asm/arch_timer.h"
# 1 "../include/linux/smp.h" 1
# 15 "../include/linux/smp.h"
# 1 "../include/linux/llist.h" 1
# 54 "../include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 69 "../include/linux/llist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 187 "../include/linux/llist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_empty(const struct llist_head *head)
{
 return ({ union { typeof(head->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(head->first), __u.__c, sizeof(head->first)); else __read_once_size_nocheck(&(head->first), __u.__c, sizeof(head->first)); do { } while (0); __u.__val; }) == ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}
# 220 "../include/linux/llist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(&head->first) __ai_ptr = (&head->first); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg_mb((unsigned long)(((void *)0)), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); });
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 16 "../include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
struct __call_single_data {
 struct llist_node llist;
 smp_call_func_t func;
 void *info;
 unsigned int flags;
};


typedef struct __call_single_data call_single_data_t
 __attribute__((__aligned__(sizeof(struct __call_single_data))));


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);




void on_each_cpu(smp_call_func_t func, void *info, int wait);





void on_each_cpu_mask(const struct cpumask *mask, smp_call_func_t func,
  void *info, bool wait);






void on_each_cpu_cond(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags);

void on_each_cpu_cond_mask(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags, const struct cpumask *mask);

int smp_call_function_single_async(int cpu, call_single_data_t *csd);








# 1 "../arch/arm64/include/asm/smp.h" 1
# 28 "../arch/arm64/include/asm/smp.h"
# 1 "../arch/arm64/include/asm/percpu.h" 1
# 14 "../arch/arm64/include/asm/percpu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_my_cpu_offset(unsigned long off)
{
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "msr tpidr_el1, %0" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "11" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "msr tpidr_el2, %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"


   :: "r" (off) : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __my_cpu_offset(void)
{
 unsigned long off;





 asm(".if ""1"" == 1\n" "661:\n\t" "mrs %0, tpidr_el1" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "11" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "mrs %0, tpidr_el2" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"


  : "=r" (off) :
  "Q" (*(const unsigned long *)current_stack_pointer));

 return off;
}
# 108 "../arch/arm64/include/asm/percpu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_8(void *ptr) { return ({ union { typeof(*(u8 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u8 *)ptr), __u.__c, sizeof(*(u8 *)ptr)); else __read_once_size_nocheck(&(*(u8 *)ptr), __u.__c, sizeof(*(u8 *)ptr)); do { } while (0); __u.__val; }); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_8(void *ptr, unsigned long val) { ({ union { typeof(*(u8 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u8 *)ptr)) ((u8)val) }; __write_once_size(&(*(u8 *)ptr), __u.__c, sizeof(*(u8 *)ptr)); __u.__val; }); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_16(void *ptr) { return ({ union { typeof(*(u16 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u16 *)ptr), __u.__c, sizeof(*(u16 *)ptr)); else __read_once_size_nocheck(&(*(u16 *)ptr), __u.__c, sizeof(*(u16 *)ptr)); do { } while (0); __u.__val; }); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_16(void *ptr, unsigned long val) { ({ union { typeof(*(u16 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u16 *)ptr)) ((u16)val) }; __write_once_size(&(*(u16 *)ptr), __u.__c, sizeof(*(u16 *)ptr)); __u.__val; }); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_32(void *ptr) { return ({ union { typeof(*(u32 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u32 *)ptr), __u.__c, sizeof(*(u32 *)ptr)); else __read_once_size_nocheck(&(*(u32 *)ptr), __u.__c, sizeof(*(u32 *)ptr)); do { } while (0); __u.__val; }); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_32(void *ptr, unsigned long val) { ({ union { typeof(*(u32 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u32 *)ptr)) ((u32)val) }; __write_once_size(&(*(u32 *)ptr), __u.__c, sizeof(*(u32 *)ptr)); __u.__val; }); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __percpu_read_64(void *ptr) { return ({ union { typeof(*(u64 *)ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(*(u64 *)ptr), __u.__c, sizeof(*(u64 *)ptr)); else __read_once_size_nocheck(&(*(u64 *)ptr), __u.__c, sizeof(*(u64 *)ptr)); do { } while (0); __u.__val; }); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_write_64(void *ptr, unsigned long val) { ({ union { typeof(*(u64 *)ptr) __val; char __c[1]; } __u = { .__val = ( typeof(*(u64 *)ptr)) ((u64)val) }; __write_once_size(&(*(u64 *)ptr), __u.__c, sizeof(*(u64 *)ptr)); __u.__val; }); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile ("1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile ("1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile ("1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "add" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_add_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile ("1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "add" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile ("1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile ("1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile ("1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "bic" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_andnot_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile ("1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "bic" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 tmp; asm volatile ("1:	ldxr" "b" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 tmp; asm volatile ("1:	ldxr" "h" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 tmp; asm volatile ("1:	ldxr" "" "\t%" "w" "[tmp], %[ptr]\n" "orr" "\t%" "w" "[tmp], %" "w" "[tmp], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __percpu_or_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 tmp; asm volatile ("1:	ldxr" "" "\t%" "" "[tmp], %[ptr]\n" "orr" "\t%" "" "[tmp], %" "" "[tmp], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[tmp], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [tmp] "=&r" (tmp), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __percpu_add_return_case_8(void *ptr, unsigned long val) { unsigned int loop; u8 ret; asm volatile ("1:	ldxr" "b" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "b" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u8 *)ptr) : [val] "r" ((u8)(val))); return ret; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __percpu_add_return_case_16(void *ptr, unsigned long val) { unsigned int loop; u16 ret; asm volatile ("1:	ldxr" "h" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "h" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u16 *)ptr) : [val] "r" ((u16)(val))); return ret; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __percpu_add_return_case_32(void *ptr, unsigned long val) { unsigned int loop; u32 ret; asm volatile ("1:	ldxr" "" "\t%" "w" "[ret], %[ptr]\n" "add" "\t%" "w" "[ret], %" "w" "[ret], %" "w" "[val]\n" "	stxr" "" "\t%w[loop], %" "w" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u32 *)ptr) : [val] "r" ((u32)(val))); return ret; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __percpu_add_return_case_64(void *ptr, unsigned long val) { unsigned int loop; u64 ret; asm volatile ("1:	ldxr" "" "\t%" "" "[ret], %[ptr]\n" "add" "\t%" "" "[ret], %" "" "[ret], %" "" "[val]\n" "	stxr" "" "\t%w[loop], %" "" "[ret], %[ptr]\n" "	cbnz	%w[loop], 1b" : [loop] "=&r" (loop), [ret] "=&r" (ret), [ptr] "+Q"(*(u64 *)ptr) : [val] "r" ((u64)(val))); return ret; }
# 228 "../arch/arm64/include/asm/percpu.h"
# 1 "../include/asm-generic/percpu.h" 1






# 1 "../include/linux/percpu-defs.h" 1
# 309 "../include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __this_cpu_preempt_check(const char *op) { }
# 8 "../include/asm-generic/percpu.h" 2
# 19 "../include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[128];
# 48 "../include/asm-generic/percpu.h"
extern void setup_per_cpu_areas(void);
# 229 "../arch/arm64/include/asm/percpu.h" 2
# 29 "../arch/arm64/include/asm/smp.h" 2





extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) cpu_number;
# 48 "../arch/arm64/include/asm/smp.h"
extern u64 __cpu_logical_map[128];


struct seq_file;




extern void show_ipi_list(struct seq_file *p, int prec);




extern void handle_IPI(int ipinr, struct pt_regs *regs);





extern void smp_init_cpus(void);




extern void set_smp_cross_call(void (*)(const struct cpumask *, unsigned int));

extern void (*__smp_cross_call)(const struct cpumask *, unsigned int);




           void secondary_start_kernel(void);







struct secondary_data {
 void *stack;
 struct task_struct *task;
 long status;
};

extern struct secondary_data secondary_data;
extern long __early_cpu_boot_status;
extern void secondary_entry(void);

extern void arch_send_call_function_single_ipi(int cpu);
extern void arch_send_call_function_ipi_mask(const struct cpumask *mask);


extern void arch_send_wakeup_ipi_mask(const struct cpumask *mask);







extern int __cpu_disable(void);

extern void __cpu_die(unsigned int cpu);
extern void cpu_die(void);
extern void cpu_die_early(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_park_loop(void)
{
 for (;;) {
  asm volatile("wfe" : : : "memory");
  asm volatile("wfi" : : : "memory");
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_cpu_boot_status(int val)
{
 ({ union { typeof(secondary_data.status) __val; char __c[1]; } __u = { .__val = ( typeof(secondary_data.status)) (val) }; __write_once_size(&(secondary_data.status), __u.__c, sizeof(secondary_data.status)); __u.__val; });

 asm volatile("dsb " "ishst" : : : "memory");
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_panic_kernel(void)
{
 update_cpu_boot_status((3));
 cpu_park_loop();
}
# 151 "../arch/arm64/include/asm/smp.h"
bool cpus_are_stuck_in_kernel(void);

extern void crash_smp_send_stop(void);
extern bool smp_crash_stop_failed(void);
# 69 "../include/linux/smp.h" 2
# 78 "../include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




void smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_nr_cpu_ids(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 229 "../include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_enable_nonboot_cpus_begin(void);
extern void arch_enable_nonboot_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 19 "../arch/arm64/include/asm/arch_timer.h" 2


# 1 "../include/clocksource/arm_arch_timer.h" 1








# 1 "../include/linux/timecounter.h" 1
# 30 "../include/linux/timecounter.h"
struct cyclecounter {
 u64 (*read)(const struct cyclecounter *cc);
 u64 mask;
 u32 mult;
 u32 shift;
};
# 55 "../include/linux/timecounter.h"
struct timecounter {
 const struct cyclecounter *cc;
 u64 cycle_last;
 u64 nsec;
 u64 mask;
 u64 frac;
};
# 70 "../include/linux/timecounter.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cyclecounter_cyc2ns(const struct cyclecounter *cc,
          u64 cycles, u64 mask, u64 *frac)
{
 u64 ns = (u64) cycles;

 ns = (ns * cc->mult) + *frac;
 *frac = ns & mask;
 return ns >> cc->shift;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
 tc->nsec += delta;
}
# 99 "../include/linux/timecounter.h"
extern void timecounter_init(struct timecounter *tc,
        const struct cyclecounter *cc,
        u64 start_tstamp);
# 111 "../include/linux/timecounter.h"
extern u64 timecounter_read(struct timecounter *tc);
# 127 "../include/linux/timecounter.h"
extern u64 timecounter_cyc2time(struct timecounter *tc,
    u64 cycle_tstamp);
# 10 "../include/clocksource/arm_arch_timer.h" 2
# 25 "../include/clocksource/arm_arch_timer.h"
enum arch_timer_reg {
 ARCH_TIMER_REG_CTRL,
 ARCH_TIMER_REG_TVAL,
};

enum arch_timer_ppi_nr {
 ARCH_TIMER_PHYS_SECURE_PPI,
 ARCH_TIMER_PHYS_NONSECURE_PPI,
 ARCH_TIMER_VIRT_PPI,
 ARCH_TIMER_HYP_PPI,
 ARCH_TIMER_MAX_TIMER_PPI
};

enum arch_timer_spi_nr {
 ARCH_TIMER_PHYS_SPI,
 ARCH_TIMER_VIRT_SPI,
 ARCH_TIMER_MAX_TIMER_SPI
};
# 63 "../include/clocksource/arm_arch_timer.h"
struct arch_timer_kvm_info {
 struct timecounter timecounter;
 int virtual_irq;
 int physical_irq;
};

struct arch_timer_mem_frame {
 bool valid;
 phys_addr_t cntbase;
 size_t size;
 int phys_irq;
 int virt_irq;
};

struct arch_timer_mem {
 phys_addr_t cntctlbase;
 size_t size;
 struct arch_timer_mem_frame frame[8];
};



extern u32 arch_timer_get_rate(void);
extern u64 (*arch_timer_read_counter)(void);
extern struct arch_timer_kvm_info *arch_timer_get_kvm_info(void);
extern bool arch_timer_evtstrm_available(void);
# 22 "../arch/arm64/include/asm/arch_timer.h" 2
# 43 "../arch/arm64/include/asm/arch_timer.h"
enum arch_timer_erratum_match_type {
 ate_match_dt,
 ate_match_local_cap_id,
 ate_match_acpi_oem_info,
};

struct clock_event_device;

struct arch_timer_erratum_workaround {
 enum arch_timer_erratum_match_type match_type;
 const void *id;
 const char *desc;
 u32 (*read_cntp_tval_el0)(void);
 u32 (*read_cntv_tval_el0)(void);
 u64 (*read_cntpct_el0)(void);
 u64 (*read_cntvct_el0)(void);
 int (*set_next_event_phys)(unsigned long, struct clock_event_device *);
 int (*set_next_event_virt)(unsigned long, struct clock_event_device *);
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(const struct arch_timer_erratum_workaround *) timer_unstable_counter_workaround;



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) u32 arch_timer_read_cntp_tval_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntp_tval_el0" : "=r" (__val)); __val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) u32 arch_timer_read_cntv_tval_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntv_tval_el0" : "=r" (__val)); __val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) u64 arch_timer_read_cntpct_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntpct_el0" : "=r" (__val)); __val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) u64 arch_timer_read_cntvct_el0(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntvct_el0" : "=r" (__val)); __val; });
}
# 103 "../arch/arm64/include/asm/arch_timer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
void arch_timer_reg_write_cp15(int access, enum arch_timer_reg reg, u32 val)
{
 if (access == 0) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntp_ctl_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  case ARCH_TIMER_REG_TVAL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntp_tval_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  }
 } else if (access == 1) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntv_ctl_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  case ARCH_TIMER_REG_TVAL:
   do { u64 __val = (u64)(val); asm volatile("msr " "cntv_tval_el0" ", %x0" : : "rZ" (__val)); } while (0);
   break;
  }
 }

 asm volatile("isb" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__))
u32 arch_timer_reg_read_cp15(int access, enum arch_timer_reg reg)
{
 if (access == 0) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   return ({ u64 __val; asm volatile("mrs %0, " "cntp_ctl_el0" : "=r" (__val)); __val; });
  case ARCH_TIMER_REG_TVAL:
   return ({ u64 _val; __asm__ __volatile__("" : : : "memory"); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntp_tval_el0) ? __wa->read_cntp_tval_el0 : arch_timer_read_cntp_tval_el0; })(); __asm__ __volatile__("" : : : "memory"); _val; });
  }
 } else if (access == 1) {
  switch (reg) {
  case ARCH_TIMER_REG_CTRL:
   return ({ u64 __val; asm volatile("mrs %0, " "cntv_ctl_el0" : "=r" (__val)); __val; });
  case ARCH_TIMER_REG_TVAL:
   return ({ u64 _val; __asm__ __volatile__("" : : : "memory"); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntv_tval_el0) ? __wa->read_cntv_tval_el0 : arch_timer_read_cntv_tval_el0; })(); __asm__ __volatile__("" : : : "memory"); _val; });
  }
 }

 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../arch/arm64/include/asm/arch_timer.h\"; .popsection; .long 14472b - 14470b; .short 148; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 arch_timer_get_cntfrq(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntfrq_el0" : "=r" (__val)); __val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 arch_timer_get_cntkctl(void)
{
 return ({ u64 __val; asm volatile("mrs %0, " "cntkctl_el1" : "=r" (__val)); __val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_timer_set_cntkctl(u32 cntkctl)
{
 do { u64 __val = (u64)(cntkctl); asm volatile("msr " "cntkctl_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");
}
# 186 "../arch/arm64/include/asm/arch_timer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __arch_counter_get_cntpct_stable(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 _val; __asm__ __volatile__("" : : : "memory"); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntpct_el0) ? __wa->read_cntpct_el0 : arch_timer_read_cntpct_el0; })(); __asm__ __volatile__("" : : : "memory"); _val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __arch_counter_get_cntpct(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 __val; asm volatile("mrs %0, " "cntpct_el0" : "=r" (__val)); __val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __arch_counter_get_cntvct_stable(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 _val; __asm__ __volatile__("" : : : "memory"); _val = ({ const struct arch_timer_erratum_workaround *__wa; __wa = ({ __this_cpu_preempt_check("read"); ({ typeof(timer_unstable_counter_workaround) pscr_ret__; do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(timer_unstable_counter_workaround)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(timer_unstable_counter_workaround)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround))); (typeof((typeof(*(&(timer_unstable_counter_workaround))) *)(&(timer_unstable_counter_workaround)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }); }); (__wa && __wa->read_cntvct_el0) ? __wa->read_cntvct_el0 : arch_timer_read_cntvct_el0; })(); __asm__ __volatile__("" : : : "memory"); _val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u64 __arch_counter_get_cntvct(void)
{
 u64 cnt;

 asm volatile("isb" : : : "memory");
 cnt = ({ u64 __val; asm volatile("mrs %0, " "cntvct_el0" : "=r" (__val)); __val; });
 do { u64 tmp, _val = (cnt); asm volatile( "	eor	%0, %1, %1\n" "	add	%0, sp, %0\n" "	ldr	xzr, [%0]" : "=r" (tmp) : "r" (_val)); } while (0);
 return cnt;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_timer_arch_init(void)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_timer_set_evtstrm_feature(void)
{
 cpu_set_feature(( __builtin_constant_p((1 << 2)) ? ( ((1 << 2)) < 2 ? 0 : ((1 << 2)) & (1ULL << 63) ? 63 : ((1 << 2)) & (1ULL << 62) ? 62 : ((1 << 2)) & (1ULL << 61) ? 61 : ((1 << 2)) & (1ULL << 60) ? 60 : ((1 << 2)) & (1ULL << 59) ? 59 : ((1 << 2)) & (1ULL << 58) ? 58 : ((1 << 2)) & (1ULL << 57) ? 57 : ((1 << 2)) & (1ULL << 56) ? 56 : ((1 << 2)) & (1ULL << 55) ? 55 : ((1 << 2)) & (1ULL << 54) ? 54 : ((1 << 2)) & (1ULL << 53) ? 53 : ((1 << 2)) & (1ULL << 52) ? 52 : ((1 << 2)) & (1ULL << 51) ? 51 : ((1 << 2)) & (1ULL << 50) ? 50 : ((1 << 2)) & (1ULL << 49) ? 49 : ((1 << 2)) & (1ULL << 48) ? 48 : ((1 << 2)) & (1ULL << 47) ? 47 : ((1 << 2)) & (1ULL << 46) ? 46 : ((1 << 2)) & (1ULL << 45) ? 45 : ((1 << 2)) & (1ULL << 44) ? 44 : ((1 << 2)) & (1ULL << 43) ? 43 : ((1 << 2)) & (1ULL << 42) ? 42 : ((1 << 2)) & (1ULL << 41) ? 41 : ((1 << 2)) & (1ULL << 40) ? 40 : ((1 << 2)) & (1ULL << 39) ? 39 : ((1 << 2)) & (1ULL << 38) ? 38 : ((1 << 2)) & (1ULL << 37) ? 37 : ((1 << 2)) & (1ULL << 36) ? 36 : ((1 << 2)) & (1ULL << 35) ? 35 : ((1 << 2)) & (1ULL << 34) ? 34 : ((1 << 2)) & (1ULL << 33) ? 33 : ((1 << 2)) & (1ULL << 32) ? 32 : ((1 << 2)) & (1ULL << 31) ? 31 : ((1 << 2)) & (1ULL << 30) ? 30 : ((1 << 2)) & (1ULL << 29) ? 29 : ((1 << 2)) & (1ULL << 28) ? 28 : ((1 << 2)) & (1ULL << 27) ? 27 : ((1 << 2)) & (1ULL << 26) ? 26 : ((1 << 2)) & (1ULL << 25) ? 25 : ((1 << 2)) & (1ULL << 24) ? 24 : ((1 << 2)) & (1ULL << 23) ? 23 : ((1 << 2)) & (1ULL << 22) ? 22 : ((1 << 2)) & (1ULL << 21) ? 21 : ((1 << 2)) & (1ULL << 20) ? 20 : ((1 << 2)) & (1ULL << 19) ? 19 : ((1 << 2)) & (1ULL << 18) ? 18 : ((1 << 2)) & (1ULL << 17) ? 17 : ((1 << 2)) & (1ULL << 16) ? 16 : ((1 << 2)) & (1ULL << 15) ? 15 : ((1 << 2)) & (1ULL << 14) ? 14 : ((1 << 2)) & (1ULL << 13) ? 13 : ((1 << 2)) & (1ULL << 12) ? 12 : ((1 << 2)) & (1ULL << 11) ? 11 : ((1 << 2)) & (1ULL << 10) ? 10 : ((1 << 2)) & (1ULL << 9) ? 9 : ((1 << 2)) & (1ULL << 8) ? 8 : ((1 << 2)) & (1ULL << 7) ? 7 : ((1 << 2)) & (1ULL << 6) ? 6 : ((1 << 2)) & (1ULL << 5) ? 5 : ((1 << 2)) & (1ULL << 4) ? 4 : ((1 << 2)) & (1ULL << 3) ? 3 : ((1 << 2)) & (1ULL << 2) ? 2 : 1) : -1));

 compat_elf_hwcap |= (1 << 21);

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_timer_have_evtstrm_feature(void)
{
 return cpu_have_feature(( __builtin_constant_p((1 << 2)) ? ( ((1 << 2)) < 2 ? 0 : ((1 << 2)) & (1ULL << 63) ? 63 : ((1 << 2)) & (1ULL << 62) ? 62 : ((1 << 2)) & (1ULL << 61) ? 61 : ((1 << 2)) & (1ULL << 60) ? 60 : ((1 << 2)) & (1ULL << 59) ? 59 : ((1 << 2)) & (1ULL << 58) ? 58 : ((1 << 2)) & (1ULL << 57) ? 57 : ((1 << 2)) & (1ULL << 56) ? 56 : ((1 << 2)) & (1ULL << 55) ? 55 : ((1 << 2)) & (1ULL << 54) ? 54 : ((1 << 2)) & (1ULL << 53) ? 53 : ((1 << 2)) & (1ULL << 52) ? 52 : ((1 << 2)) & (1ULL << 51) ? 51 : ((1 << 2)) & (1ULL << 50) ? 50 : ((1 << 2)) & (1ULL << 49) ? 49 : ((1 << 2)) & (1ULL << 48) ? 48 : ((1 << 2)) & (1ULL << 47) ? 47 : ((1 << 2)) & (1ULL << 46) ? 46 : ((1 << 2)) & (1ULL << 45) ? 45 : ((1 << 2)) & (1ULL << 44) ? 44 : ((1 << 2)) & (1ULL << 43) ? 43 : ((1 << 2)) & (1ULL << 42) ? 42 : ((1 << 2)) & (1ULL << 41) ? 41 : ((1 << 2)) & (1ULL << 40) ? 40 : ((1 << 2)) & (1ULL << 39) ? 39 : ((1 << 2)) & (1ULL << 38) ? 38 : ((1 << 2)) & (1ULL << 37) ? 37 : ((1 << 2)) & (1ULL << 36) ? 36 : ((1 << 2)) & (1ULL << 35) ? 35 : ((1 << 2)) & (1ULL << 34) ? 34 : ((1 << 2)) & (1ULL << 33) ? 33 : ((1 << 2)) & (1ULL << 32) ? 32 : ((1 << 2)) & (1ULL << 31) ? 31 : ((1 << 2)) & (1ULL << 30) ? 30 : ((1 << 2)) & (1ULL << 29) ? 29 : ((1 << 2)) & (1ULL << 28) ? 28 : ((1 << 2)) & (1ULL << 27) ? 27 : ((1 << 2)) & (1ULL << 26) ? 26 : ((1 << 2)) & (1ULL << 25) ? 25 : ((1 << 2)) & (1ULL << 24) ? 24 : ((1 << 2)) & (1ULL << 23) ? 23 : ((1 << 2)) & (1ULL << 22) ? 22 : ((1 << 2)) & (1ULL << 21) ? 21 : ((1 << 2)) & (1ULL << 20) ? 20 : ((1 << 2)) & (1ULL << 19) ? 19 : ((1 << 2)) & (1ULL << 18) ? 18 : ((1 << 2)) & (1ULL << 17) ? 17 : ((1 << 2)) & (1ULL << 16) ? 16 : ((1 << 2)) & (1ULL << 15) ? 15 : ((1 << 2)) & (1ULL << 14) ? 14 : ((1 << 2)) & (1ULL << 13) ? 13 : ((1 << 2)) & (1ULL << 12) ? 12 : ((1 << 2)) & (1ULL << 11) ? 11 : ((1 << 2)) & (1ULL << 10) ? 10 : ((1 << 2)) & (1ULL << 9) ? 9 : ((1 << 2)) & (1ULL << 8) ? 8 : ((1 << 2)) & (1ULL << 7) ? 7 : ((1 << 2)) & (1ULL << 6) ? 6 : ((1 << 2)) & (1ULL << 5) ? 5 : ((1 << 2)) & (1ULL << 4) ? 4 : ((1 << 2)) & (1ULL << 3) ? 3 : ((1 << 2)) & (1ULL << 2) ? 2 : 1) : -1));
}
# 9 "../arch/arm64/include/asm/timex.h" 2







# 1 "../include/asm-generic/timex.h" 1







typedef unsigned long cycles_t;
# 17 "../arch/arm64/include/asm/timex.h" 2
# 66 "../include/linux/timex.h" 2
# 139 "../include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "../include/linux/timex.h"
extern int do_adjtimex(struct __kernel_timex *);
extern int do_clock_adjtime(const clockid_t which_clock, struct __kernel_timex * ktx);

extern void hardpps(const struct timespec64 *, const struct timespec64 *);

int read_current_timer(unsigned long *timer_val);
void ntp_notify_cmos_timer(void);
# 14 "../include/linux/time32.h" 2



typedef s32 old_time32_t;

struct old_timespec32 {
 old_time32_t tv_sec;
 s32 tv_nsec;
};

struct old_timeval32 {
 old_time32_t tv_sec;
 s32 tv_usec;
};

struct old_itimerspec32 {
 struct old_timespec32 it_interval;
 struct old_timespec32 it_value;
};

struct old_utimbuf32 {
 old_time32_t actime;
 old_time32_t modtime;
};

struct old_timex32 {
 u32 modes;
 s32 offset;
 s32 freq;
 s32 maxerror;
 s32 esterror;
 s32 status;
 s32 constant;
 s32 precision;
 s32 tolerance;
 struct old_timeval32 time;
 s32 tick;
 s32 ppsfreq;
 s32 jitter;
 s32 shift;
 s32 stabil;
 s32 jitcnt;
 s32 calcnt;
 s32 errcnt;
 s32 stbcnt;
 s32 tai;

 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32; s32:32;
 s32:32; s32:32; s32:32;
};

extern int get_old_timespec32(struct timespec64 *, const void *);
extern int put_old_timespec32(const struct timespec64 *, void *);
extern int get_old_itimerspec32(struct itimerspec64 *its,
   const struct old_itimerspec32 *uits);
extern int put_old_itimerspec32(const struct itimerspec64 *its,
   struct old_itimerspec32 *uits);
struct __kernel_timex;
int get_old_timex32(struct __kernel_timex *, const struct old_timex32 *);
int put_old_timex32(struct old_timex32 *, const struct __kernel_timex *);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec timespec64_to_timespec(const struct timespec64 ts64)
{
 return *(const struct timespec *)&ts64;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct timespec64 timespec_to_timespec64(const struct timespec ts)
{
 return *(const struct timespec64 *)&ts;
}
# 109 "../include/linux/time32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec_equal(const struct timespec *a,
     const struct timespec *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timespec_compare(const struct timespec *lhs, const struct timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timespec_valid(const struct timespec *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}
# 150 "../include/linux/time32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timespec_to_ns(const struct timespec *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}







extern struct timespec ns_to_timespec(const s64 nsec);
# 171 "../include/linux/time32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void timespec_add_ns(struct timespec *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mktime(const unsigned int year,
   const unsigned int mon, const unsigned int day,
   const unsigned int hour, const unsigned int min,
   const unsigned int sec)
{
 return mktime64(year, mon, day, hour, min, sec);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timeval_valid(const struct timeval *tv)
{

 if (tv->tv_sec < 0)
  return false;


 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;

 return true;
}
# 205 "../include/linux/time32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 timeval_to_ns(const struct timeval *tv)
{
 return ((s64) tv->tv_sec * 1000000000L) +
  tv->tv_usec * 1000L;
}







extern struct timeval ns_to_timeval(const s64 nsec);
extern struct __kernel_old_timeval ns_to_kernel_old_timeval(s64 nsec);
# 74 "../include/linux/time.h" 2

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool itimerspec64_valid(const struct itimerspec64 *its)
{
 if (!timespec64_valid(&(its->it_interval)) ||
  !timespec64_valid(&(its->it_value)))
  return false;

 return true;
}
# 25 "../include/linux/ktime.h" 2
# 1 "../include/linux/jiffies.h" 1
# 12 "../include/linux/jiffies.h"
# 1 "./include/generated/timeconst.h" 1
# 13 "../include/linux/jiffies.h" 2
# 60 "../include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 80 "../include/linux/jiffies.h"
extern u64 __attribute__((__aligned__((1 << (6))), __section__(".data..cacheline_aligned"))) jiffies_64;
extern unsigned long volatile __attribute__((__aligned__((1 << (6))), __section__(".data..cacheline_aligned"))) jiffies;




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 190 "../include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 291 "../include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);
extern u64 jiffies64_to_msecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 1000) - 1) / (1000L / 1000);
}
# 364 "../include/linux/jiffies.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 1000) - 1) / (1000000L / 1000);
}
# 411 "../include/linux/jiffies.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL >> 1)) >> 1)-1)))
   return ((((long)(~0UL >> 1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec64 *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec64 *value);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long timespec_to_jiffies(const struct timespec *value)
{
 struct timespec64 ts = timespec_to_timespec64(*value);

 return timespec64_to_jiffies(&ts);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void jiffies_to_timespec(const unsigned long jiffies,
           struct timespec *value)
{
 struct timespec64 ts;

 jiffies_to_timespec64(jiffies, &ts);
 *value = timespec64_to_timespec(ts);
}

extern unsigned long timeval_to_jiffies(const struct timeval *value);
extern void jiffies_to_timeval(const unsigned long jiffies,
          struct timeval *value);

extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x6 = (0L); typeof(delta) __UNIQUE_ID___y7 = (delta); ((__UNIQUE_ID___x6) > (__UNIQUE_ID___y7) ? (__UNIQUE_ID___x6) : (__UNIQUE_ID___y7)); })));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int jiffies_delta_to_msecs(long delta)
{
 return jiffies_to_msecs(__builtin_choose_expr(((!!(sizeof((typeof(0L) *)1 == (typeof(delta) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(0L) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(delta) * 0l)) : (int *)8))))), ((0L) > (delta) ? (0L) : (delta)), ({ typeof(0L) __UNIQUE_ID___x8 = (0L); typeof(delta) __UNIQUE_ID___y9 = (delta); ((__UNIQUE_ID___x8) > (__UNIQUE_ID___y9) ? (__UNIQUE_ID___x8) : (__UNIQUE_ID___y9)); })));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "../include/linux/ktime.h" 2


typedef s64 ktime_t;
# 37 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 70 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timespec64_to_ktime(struct timespec64 ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t timeval_to_ktime(struct timeval tv)
{
 return ktime_set(tv.tv_sec, tv.tv_usec * 1000L);
}
# 97 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ns(const ktime_t kt)
{
 return kt;
}
# 112 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 128 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 140 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 165 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/ktime.h\"; .popsection; .long 14472b - 14470b; .short 171; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 226 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt) {
  *ts = ns_to_timespec((kt));
  return true;
 } else {
  return false;
 }
}
# 245 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec64 *ts)
{
 if (kt) {
  *ts = ns_to_timespec64((kt));
  return true;
 } else {
  return false;
 }
}
# 265 "../include/linux/ktime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}


# 1 "../include/linux/timekeeping.h" 1








void timekeeping_init(void);
extern int timekeeping_suspended;


extern void update_process_times(int user);
extern void xtime_update(unsigned long ticks);




extern int do_settimeofday64(const struct timespec64 *ts);
extern int do_sys_settimeofday64(const struct timespec64 *tv,
     const struct timezone *tz);
# 41 "../include/linux/timekeeping.h"
extern void ktime_get_raw_ts64(struct timespec64 *ts);
extern void ktime_get_ts64(struct timespec64 *ts);
extern void ktime_get_real_ts64(struct timespec64 *tv);
extern void ktime_get_coarse_ts64(struct timespec64 *ts);
extern void ktime_get_coarse_real_ts64(struct timespec64 *ts);

void getboottime64(struct timespec64 *ts);




extern time64_t ktime_get_seconds(void);
extern time64_t __ktime_get_real_seconds(void);
extern time64_t ktime_get_real_seconds(void);





enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_real(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_boottime(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse_clocktai(void)
{
 return ktime_get_coarse_with_offset(TK_OFFS_TAI);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_get_coarse(void)
{
 struct timespec64 ts;

 ktime_get_coarse_ts64(&ts);
 return timespec64_to_ktime(ts);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_ns(void)
{
 return ktime_to_ns(ktime_get_coarse());
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_real_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_real());
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_boottime());
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_coarse_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_coarse_clocktai());
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_ns(void)
{
 return ktime_to_ns(ktime_get());
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_real_ns(void)
{
 return ktime_to_ns(ktime_get_real());
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_boottime_ns(void)
{
 return ktime_to_ns(ktime_get_boottime());
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_clocktai_ns(void)
{
 return ktime_to_ns(ktime_get_clocktai());
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ktime_get_raw_ns(void)
{
 return ktime_to_ns(ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);
extern u64 ktime_get_real_fast_ns(void);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_boottime()));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_boottime_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_boottime()));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_boottime_seconds(void)
{
 return ktime_divns(ktime_get_coarse_boottime(), 1000000000L);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_clocktai()));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_coarse_clocktai_ts64(struct timespec64 *ts)
{
 *ts = ns_to_timespec64((ktime_get_coarse_clocktai()));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t ktime_get_clocktai_seconds(void)
{
 return ktime_divns(ktime_get_coarse_clocktai(), 1000000000L);
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(const struct timespec64 *delta);
# 234 "../include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 249 "../include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 262 "../include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);




extern int persistent_clock_is_local;

extern void read_persistent_clock64(struct timespec64 *ts);
void read_persistent_wall_and_boot_offset(struct timespec64 *wall_clock,
       struct timespec64 *boot_offset);
extern int update_persistent_clock64(struct timespec64 now);
# 276 "../include/linux/ktime.h" 2
# 1 "../include/linux/timekeeping32.h" 1








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_seconds(void)
{
 return ktime_get_real_seconds();
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void getnstimeofday(struct timespec *ts)
{
 struct timespec64 ts64;

 ktime_get_real_ts64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ktime_get_ts(struct timespec *ts)
{
 struct timespec64 ts64;

 ktime_get_ts64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void getrawmonotonic(struct timespec *ts)
{
 struct timespec64 ts64;

 ktime_get_raw_ts64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void getboottime(struct timespec *ts)
{
 struct timespec64 ts64;

 getboottime64(&ts64);
 *ts = timespec64_to_timespec(ts64);
}
# 277 "../include/linux/ktime.h" 2
# 7 "../include/linux/timer.h" 2

# 1 "../include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "../include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 struct debug_obj_descr *descr;
};
# 55 "../include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 88 "../include/linux/debugobjects.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_init_on_stack(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
debug_object_activate (void *addr, struct debug_obj_descr *descr) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_deactivate(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_destroy (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_free (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_object_assert_init(void *addr, struct debug_obj_descr *descr) { }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_early_init(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_objects_mem_init(void) { }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 9 "../include/linux/timer.h" 2


struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(struct timer_list *);
 u32 flags;




};
# 90 "../include/linux/timer.h"
void init_timer_key(struct timer_list *timer,
      void (*func)(struct timer_list *), unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_timer_on_stack_key(struct timer_list *timer,
        void (*func)(struct timer_list *),
        unsigned int flags,
        const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, func, flags, name, key);
}
# 149 "../include/linux/timer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_timer_on_stack(struct timer_list *timer) { }
# 165 "../include/linux/timer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int timer_pending(const struct timer_list * timer)
{
 return timer->entry.pprev != ((void *)0);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int timer_reduce(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
extern void run_local_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "../include/linux/workqueue.h" 2








struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(struct timer_list *t);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_DELAYED_BIT = 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,






 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
 WORK_NO_COLOR = WORK_NR_COLORS,


 WORK_CPU_UNBOUND = 128,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};

struct rcu_work {
 struct work_struct work;
 struct callback_head rcu;


 struct workqueue_struct *wq;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 155 "../include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_160(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_160(); } while (0); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct rcu_work *to_rcu_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { extern void __compiletime_assert_165(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct rcu_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void))))) __compiletime_assert_165(); } while (0); ((struct rcu_work *)(__mptr - __builtin_offsetof(struct rcu_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 215 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __init_work(struct work_struct *work, int onstack) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int work_static(struct work_struct *work) { return 0; }
# 308 "../include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 341 "../include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 385 "../include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;
# 407 "../include/linux/workqueue.h"
struct workqueue_struct *alloc_workqueue(const char *fmt,
      unsigned int flags,
      int max_active, ...);
# 436 "../include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(void);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_work_node(int node, struct workqueue_struct *wq,
       struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);
extern bool queue_rcu_work(struct workqueue_struct *wq, struct rcu_work *rwork);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern bool flush_rcu_work(struct rcu_work *rwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((__format__(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
extern void wq_worker_comm(char *buf, size_t size, struct task_struct *task);
# 491 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 505 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 520 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 534 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 550 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 579 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 593 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 607 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 623 "../include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 643 "../include/linux/workqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wq_watchdog_touch(int cpu) { }



int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init_early(void);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) workqueue_init(void);
# 17 "../include/linux/mm_types.h" 2

# 1 "../arch/arm64/include/asm/mmu.h" 1
# 19 "../arch/arm64/include/asm/mmu.h"
typedef struct {
 atomic64_t id;
 void *vdso;
 unsigned long flags;
} mm_context_t;
# 32 "../arch/arm64/include/asm/mmu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arm64_kernel_unmapped_at_el0(void)
{
 return 1 &&
        cpus_have_const_cap(23);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arm64_kernel_use_ng_mappings(void)
{
 bool tx1_bug;


 if (!1)
  return false;







 if (arm64_kernel_unmapped_at_el0())
  return true;

 if (!1)
  return false;







 if (!1) {
  tx1_bug = false;







 } else {
  tx1_bug = __cpus_have_const_cap(12);
 }

 return !tx1_bug && kaslr_offset() > 0;
}

typedef void (*bp_hardening_cb_t)(void);

struct bp_hardening_data {
 int hyp_vectors_slot;
 bp_hardening_cb_t fn;
};



extern char __bp_harden_hyp_vecs_start[], __bp_harden_hyp_vecs_end[];
extern atomic_t arm64_el2_vector_last_slot;



extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(struct bp_hardening_data) bp_hardening_data;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bp_hardening_data *arm64_get_bp_hardening_data(void)
{
 return ({ do { const void *__vpp_verify = (typeof((&bp_hardening_data) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&bp_hardening_data)) *)(&bp_hardening_data)); (typeof((typeof(*(&bp_hardening_data)) *)(&bp_hardening_data))) (__ptr + ((__my_cpu_offset()))); }); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arm64_apply_bp_hardening(void)
{
 struct bp_hardening_data *d;

 if (!cpus_have_const_cap(24))
  return;

 d = arm64_get_bp_hardening_data();
 if (d->fn)
  d->fn();
}
# 121 "../arch/arm64/include/asm/mmu.h"
extern void arm64_memblock_init(void);
extern void paging_init(void);
extern void bootmem_init(void);
extern void *early_io_map(phys_addr_t phys, unsigned long virt);
extern void init_mem_pgprot(void);
extern void create_pgd_mapping(struct mm_struct *mm, phys_addr_t phys,
          unsigned long virt, phys_addr_t size,
          pgprot_t prot, bool page_mappings_only);
extern void *fixmap_remap_fdt(phys_addr_t dt_phys, int *size, pgprot_t prot);
extern void mark_linear_text_alias_ro(void);
# 19 "../include/linux/mm_types.h" 2







struct address_space;
struct mem_cgroup;
# 68 "../include/linux/mm_types.h"
struct page {
 unsigned long flags;







 union {
  struct {





   struct list_head lru;

   struct address_space *mapping;
   unsigned long index;






   unsigned long private;
  };
  struct {




   dma_addr_t dma_addr;
  };
  struct {
   union {
    struct list_head slab_list;
    struct {
     struct page *next;

     int pages;
     int pobjects;




    };
   };
   struct kmem_cache *slab_cache;

   void *freelist;
   union {
    void *s_mem;
    unsigned long counters;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
   };
  };
  struct {
   unsigned long compound_head;


   unsigned char compound_dtor;
   unsigned char compound_order;
   atomic_t compound_mapcount;
  };
  struct {
   unsigned long _compound_pad_1;
   unsigned long _compound_pad_2;
   struct list_head deferred_list;
  };
  struct {
   unsigned long _pt_pad_1;
   pgtable_t pmd_huge_pte;
   unsigned long _pt_pad_2;
   union {
    struct mm_struct *pt_mm;
    atomic_t pt_frag_refcount;
   };



   spinlock_t ptl;

  };
  struct {

   struct dev_pagemap *pgmap;
   void *zone_device_data;
# 171 "../include/linux/mm_types.h"
  };


  struct callback_head callback_head;
 };

 union {




  atomic_t _mapcount;







  unsigned int page_type;

  unsigned int active;
  int units;
 };


 atomic_t _refcount;


 struct mem_cgroup *mem_cgroup;
# 221 "../include/linux/mm_types.h"
} ;
# 234 "../include/linux/mm_types.h"
struct page_frag_cache {
 void * va;




 __u32 offset;




 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 277 "../include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 286 "../include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;
 pgprot_t vm_page_prot;
 unsigned long vm_flags;





 struct {
  struct rb_node rb;
  unsigned long rb_subtree_last;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;


 atomic_long_t swap_readahead_info;





 struct mempolicy *vm_policy;

 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

struct kioctx_table;
struct mm_struct {
 struct {
  struct vm_area_struct *mmap;
  struct rb_root mm_rb;
  u64 vmacache_seqnum;

  unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

  unsigned long mmap_base;
  unsigned long mmap_legacy_base;





  unsigned long task_size;
  unsigned long highest_vm_end;
  pgd_t * pgd;
# 394 "../include/linux/mm_types.h"
  atomic_t mm_users;
# 403 "../include/linux/mm_types.h"
  atomic_t mm_count;


  atomic_long_t pgtables_bytes;

  int map_count;

  spinlock_t page_table_lock;


  struct rw_semaphore mmap_sem;

  struct list_head mmlist;






  unsigned long hiwater_rss;
  unsigned long hiwater_vm;

  unsigned long total_vm;
  unsigned long locked_vm;
  atomic64_t pinned_vm;
  unsigned long data_vm;
  unsigned long exec_vm;
  unsigned long stack_vm;
  unsigned long def_flags;

  spinlock_t arg_lock;
  unsigned long start_code, end_code, start_data, end_data;
  unsigned long start_brk, brk, start_stack;
  unsigned long arg_start, arg_end, env_start, env_end;

  unsigned long saved_auxv[(2*(2 + 20 + 1))];





  struct mm_rss_stat rss_stat;

  struct linux_binfmt *binfmt;


  mm_context_t context;

  unsigned long flags;

  struct core_state *core_state;

  atomic_t membarrier_state;


  spinlock_t ioctx_lock;
  struct kioctx_table *ioctx_table;
# 472 "../include/linux/mm_types.h"
  struct task_struct *owner;

  struct user_namespace *user_ns;


  struct file *exe_file;

  struct mmu_notifier_mm *mmu_notifier_mm;
# 490 "../include/linux/mm_types.h"
  unsigned long numa_next_scan;


  unsigned long numa_scan_offset;


  int numa_scan_seq;






  atomic_t tlb_flush_pending;




  struct uprobes_state uprobes_state;

  atomic_long_t hugetlb_usage;

  struct work_struct async_put_work;
 } ;





 unsigned long cpu_bitmap[];
};

extern struct mm_struct init_mm;


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_init_cpumask(struct mm_struct *mm)
{
 unsigned long cpu_bitmap = (unsigned long)mm;

 cpu_bitmap += __builtin_offsetof(struct mm_struct, cpu_bitmap);
 cpumask_clear((struct cpumask *)cpu_bitmap);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return (struct cpumask *)&mm->cpu_bitmap;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
    unsigned long start, unsigned long end);
extern void tlb_finish_mmu(struct mmu_gather *tlb,
    unsigned long start, unsigned long end);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_set(&mm->tlb_flush_pending, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 589 "../include/linux/mm_types.h"
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 601 "../include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 614 "../include/linux/mm_types.h"
 return atomic_read(&mm->tlb_flush_pending);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return atomic_read(&mm->tlb_flush_pending) > 1;
}

struct vm_fault;






typedef unsigned int vm_fault_t;
# 663 "../include/linux/mm_types.h"
enum vm_fault_reason {
 VM_FAULT_OOM = ( vm_fault_t)0x000001,
 VM_FAULT_SIGBUS = ( vm_fault_t)0x000002,
 VM_FAULT_MAJOR = ( vm_fault_t)0x000004,
 VM_FAULT_WRITE = ( vm_fault_t)0x000008,
 VM_FAULT_HWPOISON = ( vm_fault_t)0x000010,
 VM_FAULT_HWPOISON_LARGE = ( vm_fault_t)0x000020,
 VM_FAULT_SIGSEGV = ( vm_fault_t)0x000040,
 VM_FAULT_NOPAGE = ( vm_fault_t)0x000100,
 VM_FAULT_LOCKED = ( vm_fault_t)0x000200,
 VM_FAULT_RETRY = ( vm_fault_t)0x000400,
 VM_FAULT_FALLBACK = ( vm_fault_t)0x000800,
 VM_FAULT_DONE_COW = ( vm_fault_t)0x001000,
 VM_FAULT_NEEDDSYNC = ( vm_fault_t)0x002000,
 VM_FAULT_HINDEX_MASK = ( vm_fault_t)0x0f0000,
};
# 703 "../include/linux/mm_types.h"
struct vm_special_mapping {
 const char *name;







 struct page **pages;





 vm_fault_t (*fault)(const struct vm_special_mapping *sm,
    struct vm_area_struct *vma,
    struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;
# 22 "../include/linux/mmzone.h" 2
# 1 "../include/linux/page-flags.h" 1
# 99 "../include/linux/page-flags.h"
enum pageflags {
 PG_locked,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_workingset,
 PG_waiters,
 PG_error,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,
 PG_head,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,





 PG_hwpoison,





 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,


 PG_swapcache = PG_owner_priv_1,





 PG_fscache = PG_private_2,



 PG_pinned = PG_owner_priv_1,

 PG_savepinned = PG_dirty,

 PG_foreign = PG_owner_priv_1,

 PG_xen_remapped = PG_owner_priv_1,


 PG_slob_free = PG_private,


 PG_double_map = PG_private_2,


 PG_isolated = PG_reclaim,
};



struct page;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *compound_head(struct page *page)
{
 unsigned long head = ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); do { } while (0); __u.__val; });

 if (__builtin_expect(!!(head & 1), 0))
  return (struct page *) (head - 1);
 return page;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTail(struct page *page)
{
 return ({ union { typeof(page->compound_head) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); else __read_once_size_nocheck(&(page->compound_head), __u.__c, sizeof(page->compound_head)); do { } while (0); __u.__val; }) & 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageCompound(struct page *page)
{
 return test_bit(PG_head, &page->flags) || PageTail(page);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PagePoisoned(const struct page *page)
{
 return page->flags == -1l;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_init_poison(struct page *page, size_t size)
{
}
# 312 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLocked(struct page *page) { return test_bit(PG_locked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageLocked(struct page *page) { __set_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLocked(struct page *page) { __clear_bit(PG_locked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWaiters(struct page *page) { return test_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWaiters(struct page *page) { set_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWaiters(struct page *page) { clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageWaiters(struct page *page) { __clear_bit(PG_waiters, &({ ((void)(sizeof(( long)(PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageError(struct page *page) { return test_bit(PG_error, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageError(struct page *page) { set_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageError(struct page *page) { clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReferenced(struct page *page) { return test_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReferenced(struct page *page) { __set_bit(PG_referenced, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageDirty(struct page *page) { return test_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageDirty(struct page *page) { set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageLRU(struct page *page) { return test_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageLRU(struct page *page) { set_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageActive(struct page *page) { return test_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageActive(struct page *page) { set_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageActive(struct page *page) { clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWorkingset(struct page *page) { return test_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageWorkingset(struct page *page) { set_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageWorkingset(struct page *page) { clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWorkingset(struct page *page) { return test_and_clear_bit(PG_workingset, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlab(struct page *page) { return test_bit(PG_slab, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSlobFree(struct page *page) { return test_bit(PG_slob_free, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageChecked(struct page *page) { return test_bit(PG_checked, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageChecked(struct page *page) { set_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePinned(struct page *page) { return test_bit(PG_pinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePinned(struct page *page) { set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSavePinned(struct page *page) { return test_bit(PG_savepinned, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageForeign(struct page *page) { return test_bit(PG_foreign, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageForeign(struct page *page) { set_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageForeign(struct page *page) { clear_bit(PG_foreign, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); };
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageXenRemapped(struct page *page) { return test_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageXenRemapped(struct page *page) { set_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageXenRemapped(struct page *page) { clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageXenRemapped(struct page *page) { return test_and_clear_bit(PG_xen_remapped, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReserved(struct page *page) { return test_bit(PG_reserved, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReserved(struct page *page) { set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageReserved(struct page *page) { __set_bit(PG_reserved, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapBacked(struct page *page) { return test_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageSwapBacked(struct page *page) { __set_bit(PG_swapbacked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate(struct page *page) { return test_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate(struct page *page) { set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPagePrivate(struct page *page) { __set_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPagePrivate(struct page *page) { __clear_bit(PG_private, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PagePrivate2(struct page *page) { return test_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOwnerPriv1(struct page *page) { return test_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageWriteback(struct page *page) { return test_bit(PG_writeback, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappedToDisk(struct page *page) { return test_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReclaim(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageReadahead(struct page *page) { return test_bit(PG_reclaim, &({ ((void)(sizeof(( long)(0 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageReadahead(struct page *page) { return test_and_clear_bit(PG_reclaim, &({ ((void)(sizeof(( long)(1 && PageCompound(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; }); })->flags); }
# 376 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageHighMem(const struct page *page) { return 0; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageHighMem(struct page *page) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageHighMem(struct page *page) { }



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageSwapCache(struct page *page)
{



 return PageSwapBacked(page) && test_bit(PG_swapcache, &page->flags);

}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageUnevictable(struct page *page) { return test_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); })->flags); }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMlocked(struct page *page) { return test_bit(PG_mlocked, &({ ((void)(sizeof(( long)(0 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }
# 410 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUncached(const struct page *page) { return 0; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageUncached(struct page *page) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageUncached(struct page *page) { }



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHWPoison(struct page *page) { return test_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageHWPoison(struct page *page) { set_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHWPoison(struct page *page) { clear_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestSetPageHWPoison(struct page *page) { return test_and_set_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int TestClearPageHWPoison(struct page *page) { return test_and_clear_bit(PG_hwpoison, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }

extern bool set_hwpoison_free_buddy_page(struct page *page);
# 456 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageMappingFlags(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) != 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageAnon(struct page *page)
{
 page = compound_head(page);
 return ((unsigned long)page->mapping & 0x1) != 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int __PageMovable(struct page *page)
{
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    0x2;
}
# 480 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageKsm(struct page *page)
{
 page = compound_head(page);
 return ((unsigned long)page->mapping & (0x1 | 0x2)) ==
    (0x1 | 0x2);
}




u64 stable_page_flags(struct page *page);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageUptodate(struct page *page)
{
 int ret;
 page = compound_head(page);
 ret = test_bit(PG_uptodate, &(page)->flags);
# 505 "../include/linux/page-flags.h"
 if (ret)
  asm volatile("dmb " "ishld" : : : "memory");

 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 asm volatile("dmb " "ishst" : : : "memory");
 __set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void SetPageUptodate(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));





 asm volatile("dmb " "ishst" : : : "memory");
 set_bit(PG_uptodate, &page->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &({ ((void)(sizeof(( long)(1 && PageTail(page))))); ({ ((void)(sizeof(( long)(PagePoisoned(compound_head(page)))))); compound_head(page); }); })->flags); }

int test_clear_page_writeback(struct page *page);
int __test_set_page_writeback(struct page *page, bool keep_write);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback(struct page *page)
{
 __test_set_page_writeback(page, false);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_writeback_keepwrite(struct page *page)
{
 __test_set_page_writeback(page, true);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageHead(struct page *page) { return test_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageHead(struct page *page) { __set_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void ClearPageHead(struct page *page) { clear_bit(PG_head, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void set_compound_head(struct page *page, struct page *head)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) ((unsigned long)head + 1) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void clear_compound_head(struct page *page)
{
 ({ union { typeof(page->compound_head) __val; char __c[1]; } __u = { .__val = ( typeof(page->compound_head)) (0) }; __write_once_size(&(page->compound_head), __u.__c, sizeof(page->compound_head)); __u.__val; });
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageCompound(struct page *page)
{
 do { if (__builtin_expect(!!(!PageHead(page)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/page-flags.h\"; .popsection; .long 14472b - 14470b; .short 565; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 ClearPageHead(page);
}





int PageHuge(struct page *page);
int PageHeadHuge(struct page *page);
bool page_huge_active(struct page *page);
# 596 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransHuge(struct page *page)
{
 ((void)(sizeof(( long)(PageTail(page)))));
 return PageHead(page);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompound(struct page *page)
{
 return PageCompound(page);
}
# 628 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransCompoundMap(struct page *page)
{
 return PageTransCompound(page) && atomic_read(&page->_mapcount) < 0;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageTransTail(struct page *page)
{
 return PageTail(page);
}
# 656 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageDoubleMap(struct page *page)
{
 return PageHead(page) && test_bit(PG_double_map, &page[1].flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageDoubleMap(struct page *page)
{
 ((void)(sizeof(( long)(!PageHead(page)))));
 set_bit(PG_double_map, &page[1].flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageDoubleMap(struct page *page)
{
 ((void)(sizeof(( long)(!PageHead(page)))));
 clear_bit(PG_double_map, &page[1].flags);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestSetPageDoubleMap(struct page *page)
{
 ((void)(sizeof(( long)(!PageHead(page)))));
 return test_and_set_bit(PG_double_map, &page[1].flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int TestClearPageDoubleMap(struct page *page)
{
 ((void)(sizeof(( long)(!PageHead(page)))));
 return test_and_clear_bit(PG_double_map, &page[1].flags);
}
# 715 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_type(struct page *page)
{
 return (int)page->page_type < -128;
}
# 740 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageBuddy(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000080)) == 0xf0000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageBuddy(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000080; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageBuddy(struct page *page) { ((void)(sizeof(( long)(!PageBuddy(page))))); page->page_type |= 0x00000080; }
# 749 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageOffline(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000100)) == 0xf0000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageOffline(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000100; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageOffline(struct page *page) { ((void)(sizeof(( long)(!PageOffline(page))))); page->page_type |= 0x00000100; }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageKmemcg(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000200)) == 0xf0000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageKmemcg(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000200; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageKmemcg(struct page *page) { ((void)(sizeof(( long)(!PageKmemcg(page))))); page->page_type |= 0x00000200; }




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageTable(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000400)) == 0xf0000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageTable(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000400; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageTable(struct page *page) { ((void)(sizeof(( long)(!PageTable(page))))); page->page_type |= 0x00000400; }




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageGuard(struct page *page) { return ((page->page_type & (0xf0000000 | 0x00000800)) == 0xf0000000); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageGuard(struct page *page) { ((void)(sizeof(( long)(!((page->page_type & (0xf0000000 | 0)) == 0xf0000000))))); page->page_type &= ~0x00000800; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageGuard(struct page *page) { ((void)(sizeof(( long)(!PageGuard(page))))); page->page_type |= 0x00000800; }

extern bool is_free_buddy_page(struct page *page);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) int PageIsolated(struct page *page) { return test_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __SetPageIsolated(struct page *page) { __set_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void __ClearPageIsolated(struct page *page) { __clear_bit(PG_isolated, &({ ((void)(sizeof(( long)(PagePoisoned(page))))); page; })->flags); };





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int PageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 return PageActive(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void SetPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 SetPageActive(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 __ClearPageActive(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ClearPageSlabPfmemalloc(struct page *page)
{
 ((void)(sizeof(( long)(!PageSlab(page)))));
 ClearPageActive(page);
}
# 836 "../include/linux/page-flags.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_has_private(struct page *page)
{
 return !!(page->flags & (1UL << PG_private | 1UL << PG_private_2));
}
# 23 "../include/linux/mmzone.h" 2
# 41 "../include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 61 "../include/linux/mmzone.h"
 MIGRATE_CMA,


 MIGRATE_ISOLATE,

 MIGRATE_TYPES
};


extern const char * const migratetype_names[MIGRATE_TYPES];
# 80 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_migrate_movable(int mt)
{
 return __builtin_expect(!!((mt) == MIGRATE_CMA), 0) || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;
# 98 "../include/linux/mmzone.h"
struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_to_free_area(struct page *page, struct free_area *area,
        int migratetype)
{
 list_add(&page->lru, &area->free_list[migratetype]);
 area->nr_free++;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_to_free_area_tail(struct page *page, struct free_area *area,
      int migratetype)
{
 list_add_tail(&page->lru, &area->free_list[migratetype]);
 area->nr_free++;
}



void add_to_free_area_random(struct page *page, struct free_area *area,
  int migratetype);
# 132 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void move_to_free_area(struct page *page, struct free_area *area,
        int migratetype)
{
 list_move(&page->lru, &area->free_list[migratetype]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *get_page_from_free_area(struct free_area *area,
         int migratetype)
{
 return ({ struct list_head *head__ = (&area->free_list[migratetype]); struct list_head *pos__ = ({ union { typeof(head__->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(head__->next), __u.__c, sizeof(head__->next)); else __read_once_size_nocheck(&(head__->next), __u.__c, sizeof(head__->next)); do { } while (0); __u.__val; }); pos__ != head__ ? ({ void *__mptr = (void *)(pos__); do { extern void __compiletime_assert_142(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(pos__)), typeof(((struct page *)0)->lru)) && !__builtin_types_compatible_p(typeof(*(pos__)), typeof(void))))) __compiletime_assert_142(); } while (0); ((struct page *)(__mptr - __builtin_offsetof(struct page, lru))); }) : ((void *)0); });

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void del_page_from_free_area(struct page *page,
  struct free_area *area)
{
 list_del(&page->lru);
 __ClearPageBuddy(page);
 ((page)->private = (0));
 area->nr_free--;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool free_area_empty(struct free_area *area, int migratetype)
{
 return list_empty(&area->free_list[migratetype]);
}

struct pglist_data;
# 168 "../include/linux/mmzone.h"
struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << ((6)))));






enum numa_stat_item {
 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,
 NR_VM_NUMA_STAT_ITEMS
};




enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,
 NR_PAGETABLE,
 NR_KERNEL_STACK_KB,

 NR_BOUNCE,

 NR_ZSPAGES,

 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE,
 NR_SLAB_UNRECLAIMABLE,

 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_NODES,
 WORKINGSET_REFAULT,
 WORKINGSET_ACTIVATE,
 WORKINGSET_RESTORE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_ANON_THPS,
 NR_UNSTABLE_NFS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_VM_NODE_STAT_ITEMS
};
# 261 "../include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}

struct zone_reclaim_stat {
# 293 "../include/linux/mmzone.h"
 unsigned long recent_rotated[2];
 unsigned long recent_scanned[2];
};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];
 struct zone_reclaim_stat reclaim_stat;

 atomic_long_t inactive_age;

 unsigned long refaults;

 struct pglist_data *pgdat;

};
# 317 "../include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};






struct per_cpu_pages {
 int count;
 int high;
 int batch;


 struct list_head lists[MIGRATE_PCPTYPES];
};

struct per_cpu_pageset {
 struct per_cpu_pages pcp;

 s8 expire;
 u16 vm_numa_stat_diff[NR_VM_NUMA_STAT_ITEMS];


 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 387 "../include/linux/mmzone.h"
 ZONE_DMA32,






 ZONE_NORMAL,
# 406 "../include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};



struct zone {



 unsigned long _watermark[NR_WMARK];
 unsigned long watermark_boost;

 unsigned long nr_reserved_highatomic;
# 434 "../include/linux/mmzone.h"
 long lowmem_reserve[3];


 int node;

 struct pglist_data *zone_pgdat;
 struct per_cpu_pageset *pageset;
# 451 "../include/linux/mmzone.h"
 unsigned long zone_start_pfn;
# 488 "../include/linux/mmzone.h"
 atomic_long_t managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;

 const char *name;







 unsigned long nr_isolate_pageblock;




 seqlock_t span_seqlock;


 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[14];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
 unsigned long compact_init_migrate_pfn;
 unsigned long compact_init_free_pfn;
# 547 "../include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_stat[NR_VM_NUMA_STAT_ITEMS];
} __attribute__((__aligned__(1 << ((6)))));

enum pgdat_flags {
 PGDAT_CONGESTED,


 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

enum zone_flags {
 ZONE_BOOSTED_WATERMARK,


};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_managed_pages(struct zone *zone)
{
 return (unsigned long)atomic_long_read(&zone->managed_pages);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 636 "../include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,





 ZONELIST_NOFALLBACK,

 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 671 "../include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 6) * 3) + 1];
};



extern struct page *mem_map;
# 688 "../include/linux/mmzone.h"
struct bootmem_data;
typedef struct pglist_data {
 struct zone node_zones[3];
 struct zonelist node_zonelists[MAX_ZONELISTS];
 int nr_zones;
# 710 "../include/linux/mmzone.h"
 spinlock_t node_size_lock;

 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_classzone_idx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_classzone_idx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;





 unsigned long totalreserve_pages;





 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;



 struct zone_padding _pad1_;
 spinlock_t lru_lock;
# 759 "../include/linux/mmzone.h"
 spinlock_t split_queue_lock;
 struct list_head split_queue;
 unsigned long split_queue_len;



 struct lruvec lruvec;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 788 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct lruvec *node_lruvec(struct pglist_data *pgdat)
{
 return &pgdat->lruvec;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}


# 1 "../include/linux/memory_hotplug.h" 1




# 1 "../include/linux/mmzone.h" 1
# 6 "../include/linux/memory_hotplug.h" 2

# 1 "../include/linux/notifier.h" 1
# 14 "../include/linux/notifier.h"
# 1 "../include/linux/mutex.h" 1
# 21 "../include/linux/mutex.h"
# 1 "../include/linux/debug_locks.h" 1








struct task_struct;

extern int debug_locks __attribute__((__section__(".data..read_mostly")));
extern int debug_locks_silent __attribute__((__section__(".data..read_mostly")));


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __debug_locks_off(void)
{
 return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg_mb((unsigned long)(0), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); });
}




extern int debug_locks_off(void);
# 49 "../include/linux/debug_locks.h"
struct task_struct;







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_all_locks(void)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
debug_check_no_locks_held(void)
{
}
# 22 "../include/linux/mutex.h" 2

struct ww_acquire_ctx;
# 53 "../include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;






};





struct mutex_waiter {
 struct list_head list;
 struct task_struct *task;
 struct ww_acquire_ctx *ww_ctx;



};
# 92 "../include/linux/mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mutex_destroy(struct mutex *lock) {}
# 128 "../include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







extern bool mutex_is_locked(struct mutex *lock);
# 165 "../include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_interruptible(struct mutex *lock);
extern int __attribute__((__warn_unused_result__)) mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 183 "../include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);





enum mutex_trylock_recursive_enum {
 MUTEX_TRYLOCK_FAILED = 0,
 MUTEX_TRYLOCK_SUCCESS = 1,
 MUTEX_TRYLOCK_RECURSIVE,
};
# 210 "../include/linux/mutex.h"
extern __attribute__((__warn_unused_result__)) enum mutex_trylock_recursive_enum
mutex_trylock_recursive(struct mutex *lock);
# 15 "../include/linux/notifier.h" 2

# 1 "../include/linux/srcu.h" 1
# 22 "../include/linux/srcu.h"
# 1 "../include/linux/rcu_segcblist.h" 1
# 21 "../include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
 long len_lazy;
};
# 67 "../include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];



 long len;

 long len_lazy;
 u8 enabled;
 u8 offloaded;
};
# 23 "../include/linux/srcu.h" 2

struct srcu_struct;
# 41 "../include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *ssp);








# 1 "../include/linux/srcutree.h" 1
# 14 "../include/linux/srcutree.h"
# 1 "../include/linux/rcu_node_tree.h" 1
# 15 "../include/linux/srcutree.h" 2


struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 spinlock_t lock __attribute__((__aligned__(1 << ((6)))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct timer_list delay_work;
 struct work_struct work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *ssp;
};




struct srcu_node {
 spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[(1 + (((128) + ((16)) - 1) / ((16))))];
 struct srcu_node *level[2 + 1];

 struct mutex srcu_cb_mutex;
 spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;



};
# 137 "../include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *ssp);
void srcu_barrier(struct srcu_struct *ssp);
void srcu_torture_stats_print(struct srcu_struct *ssp, char *tt, char *tf);
# 50 "../include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *ssp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *ssp);
int __srcu_read_lock(struct srcu_struct *ssp) ;
void __srcu_read_unlock(struct srcu_struct *ssp, int idx) ;
void synchronize_srcu(struct srcu_struct *ssp);
# 91 "../include/linux/srcu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock_held(const struct srcu_struct *ssp)
{
 return 1;
}
# 150 "../include/linux/srcu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int srcu_read_lock(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 do { } while (0);
 return retval;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) int
srcu_read_lock_notrace(struct srcu_struct *ssp)
{
 int retval;

 retval = __srcu_read_lock(ssp);
 return retval;
}
# 176 "../include/linux/srcu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void srcu_read_unlock(struct srcu_struct *ssp, int idx)

{
 ({ int __ret_warn_on = !!(idx & ~0x1); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/srcu.h\"; .popsection; .long 14472b - 14470b; .short 179; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 do { } while (0);
 __srcu_read_unlock(ssp, idx);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__no_instrument_function__)) void
srcu_read_unlock_notrace(struct srcu_struct *ssp, int idx)
{
 __srcu_read_unlock(ssp, idx);
}
# 200 "../include/linux/srcu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "../include/linux/notifier.h" 2
# 49 "../include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 93 "../include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 144 "../include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int blocking_notifier_chain_cond_register(
  struct blocking_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);
extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
# 194 "../include/linux/notifier.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 238 "../include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 8 "../include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct resource;
struct vmem_altmap;
# 40 "../include/linux/memory_hotplug.h"
enum {
 MEMORY_HOTPLUG_MIN_BOOTMEM_TYPE = 12,
 SECTION_INFO = MEMORY_HOTPLUG_MIN_BOOTMEM_TYPE,
 MIX_SECTION_INFO,
 NODE_INFO,
 MEMORY_HOTPLUG_MAX_BOOTMEM_TYPE = NODE_INFO,
};


enum {
 MMOP_OFFLINE = -1,
 MMOP_ONLINE_KEEP,
 MMOP_ONLINE_KERNEL,
 MMOP_ONLINE_MOVABLE,
};






struct mhp_restrictions {
 unsigned long flags;
 struct vmem_altmap *altmap;
};
# 73 "../include/linux/memory_hotplug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return read_seqbegin(&zone->span_seqlock);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return read_seqretry(&zone->span_seqlock, iv);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writelock(struct zone *zone)
{
 write_seqlock(&zone->span_seqlock);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_span_writeunlock(struct zone *zone)
{
 write_sequnlock(&zone->span_seqlock);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_seqlock_init(struct zone *zone)
{
 do { __seqcount_init(&(&zone->span_seqlock)->seqcount, ((void *)0), ((void *)0)); do { spinlock_check(&(&zone->span_seqlock)->lock); do { *(&(&(&zone->span_seqlock)->lock)->rlock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0); } while (0); } while (0);
}
extern int zone_grow_free_lists(struct zone *zone, unsigned long new_nr_pages);
extern int zone_grow_waitqueues(struct zone *zone, unsigned long nr_pages);
extern int add_one_highpage(struct page *page, int pfn, int bad_ppro);

extern int online_pages(unsigned long, unsigned long, int);
extern int test_pages_in_a_zone(unsigned long start_pfn, unsigned long end_pfn,
 unsigned long *valid_start, unsigned long *valid_end);
extern unsigned long __offline_isolated_pages(unsigned long start_pfn,
      unsigned long end_pfn);

typedef void (*online_page_callback_t)(struct page *page, unsigned int order);

extern int set_online_page_callback(online_page_callback_t callback);
extern int restore_online_page_callback(online_page_callback_t callback);

extern void __online_page_set_limits(struct page *page);
extern void __online_page_increment_counters(struct page *page);
extern void __online_page_free(struct page *page);

extern int try_online_node(int nid);

extern int arch_add_memory(int nid, u64 start, u64 size,
   struct mhp_restrictions *restrictions);
extern u64 max_mem_size;

extern bool memhp_auto_online;

extern bool movable_node_enabled;
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool movable_node_is_enabled(void)
{
 return movable_node_enabled;
}

extern void arch_remove_memory(int nid, u64 start, u64 size,
          struct vmem_altmap *altmap);
extern void __remove_pages(struct zone *zone, unsigned long start_pfn,
      unsigned long nr_pages, struct vmem_altmap *altmap);


extern int __add_pages(int nid, unsigned long start_pfn, unsigned long nr_pages,
         struct mhp_restrictions *restrictions);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int add_pages(int nid, unsigned long start_pfn,
  unsigned long nr_pages, struct mhp_restrictions *restrictions)
{
 return __add_pages(nid, start_pfn, nr_pages, restrictions);
}






extern int memory_add_physaddr_to_nid(u64 start);
# 192 "../include/linux/memory_hotplug.h"
extern pg_data_t *node_data[];
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_refresh_nodedata(int nid, pg_data_t *pgdat)
{
 node_data[nid] = pgdat;
}
# 218 "../include/linux/memory_hotplug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void register_page_bootmem_info_node(struct pglist_data *pgdat)
{
}

extern void put_page_bootmem(struct page *page);
extern void get_page_bootmem(unsigned long ingo, struct page *page,
        unsigned long type);

void get_online_mems(void);
void put_online_mems(void);

void mem_hotplug_begin(void);
void mem_hotplug_done(void);

extern void set_zone_contiguous(struct zone *zone);
extern void clear_zone_contiguous(struct zone *zone);
# 288 "../include/linux/memory_hotplug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void pgdat_resize_lock(struct pglist_data *pgdat, unsigned long *flags)
{
 do { do { ({ unsigned long __dummy; typeof(*flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); *flags = __raw_spin_lock_irqsave(spinlock_check(&pgdat->node_size_lock)); } while (0); } while (0);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void pgdat_resize_unlock(struct pglist_data *pgdat, unsigned long *flags)
{
 spin_unlock_irqrestore(&pgdat->node_size_lock, *flags);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
void pgdat_resize_init(struct pglist_data *pgdat)
{
 do { spinlock_check(&pgdat->node_size_lock); do { *(&(&pgdat->node_size_lock)->rlock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0); } while (0);
}
# 321 "../include/linux/memory_hotplug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_mem_section_removable(unsigned long pfn,
     unsigned long nr_pages)
{
 return false;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void try_offline_node(int nid) {}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
{
 return -22;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int remove_memory(int nid, u64 start, u64 size)
{
 return -16;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __remove_memory(int nid, u64 start, u64 size) {}


extern void __attribute__((__section__(".ref.text"))) __attribute__((__noinline__)) free_area_init_core_hotplug(int nid);
extern int __add_memory(int nid, u64 start, u64 size);
extern int add_memory(int nid, u64 start, u64 size);
extern int add_memory_resource(int nid, struct resource *resource);
extern void move_pfn_range_to_zone(struct zone *zone, unsigned long start_pfn,
  unsigned long nr_pages, struct vmem_altmap *altmap);
extern bool is_memblock_offlined(struct memory_block *mem);
extern int sparse_add_section(int nid, unsigned long pfn,
  unsigned long nr_pages, struct vmem_altmap *altmap);
extern void sparse_remove_section(struct mem_section *ms,
  unsigned long pfn, unsigned long nr_pages,
  unsigned long map_offset, struct vmem_altmap *altmap);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);
extern bool allow_online_pfn_range(int nid, unsigned long pfn, unsigned long nr_pages,
  int online_type);
extern struct zone *zone_for_pfn_range(int online_type, int nid, unsigned start_pfn,
  unsigned long nr_pages);
# 804 "../include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, gfp_t gfp_mask, int order,
     enum zone_type classzone_idx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int classzone_idx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx);
enum memmap_context {
 MEMMAP_EARLY,
 MEMMAP_HOTPLUG,
};
extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}

extern unsigned long lruvec_lru_size(struct lruvec *lruvec, enum lru_list lru, int zone_idx);


void memory_present(int nid, unsigned long start, unsigned long end);





void memblocks_present(void);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int local_memory_node(int node_id) { return node_id; };
# 865 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool managed_zone(struct zone *zone)
{
 return zone_managed_pages(zone);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zone_to_nid(struct zone *zone)
{
 return zone->node;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_set_nid(struct zone *zone, int nid)
{
 zone->node = nid;
}
# 895 "../include/linux/mmzone.h"
extern int movable_zone;
# 908 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;
int min_free_kbytes_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int watermark_boost_factor_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[3];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);

extern int numa_zonelist_order_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
extern char numa_zonelist_order[];
# 964 "../include/linux/mmzone.h"
# 1 "../arch/arm64/include/asm/mmzone.h" 1






# 1 "../arch/arm64/include/asm/numa.h" 1




# 1 "../arch/arm64/include/asm/topology.h" 1








struct pci_bus;
int pcibus_to_node(struct pci_bus *bus);







# 1 "../include/linux/arch_topology.h" 1








# 1 "../include/linux/percpu.h" 1
# 65 "../include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);
# 126 "../include/linux/percpu.h"
extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);





extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 146 "../include/linux/percpu.h"
extern unsigned long pcpu_nr_pages(void);
# 10 "../include/linux/arch_topology.h" 2

void topology_normalize_cpu_scale(void);
int topology_update_cpu_topology(void);

struct device_node;
bool topology_parse_cpu_capacity(struct device_node *cpu_node, int cpu);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) cpu_scale;

struct sched_domain;
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long topology_get_cpu_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(cpu_scale)))) *)((&(cpu_scale)))); (typeof((typeof(*((&(cpu_scale)))) *)((&(cpu_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

void topology_set_cpu_scale(unsigned int cpu, unsigned long capacity);

extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) freq_scale;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
unsigned long topology_get_freq_scale(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(freq_scale)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(freq_scale)))) *)((&(freq_scale)))); (typeof((typeof(*((&(freq_scale)))) *)((&(freq_scale))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

struct cpu_topology {
 int thread_id;
 int core_id;
 int package_id;
 int llc_id;
 cpumask_t thread_sibling;
 cpumask_t core_sibling;
 cpumask_t llc_sibling;
};


extern struct cpu_topology cpu_topology[128];






void init_cpu_topology(void);
void store_cpu_topology(unsigned int cpuid);
const struct cpumask *cpu_coregroup_mask(int cpu);
void update_siblings_masks(unsigned int cpu);
void remove_cpu_topology(unsigned int cpuid);
void reset_cpu_topology(void);
# 18 "../arch/arm64/include/asm/topology.h" 2
# 28 "../arch/arm64/include/asm/topology.h"
# 1 "../include/asm-generic/topology.h" 1
# 29 "../arch/arm64/include/asm/topology.h" 2
# 6 "../arch/arm64/include/asm/numa.h" 2





int __node_distance(int from, int to);


extern nodemask_t numa_nodes_parsed __attribute__((__section__(".init.data")));

extern bool numa_off;


extern cpumask_var_t node_to_cpumask_map[(1 << 6)];
void numa_clear_node(unsigned int cpu);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpumask_of_node(int node)
{
 return node_to_cpumask_map[node];
}


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) arm64_numa_init(void);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) numa_add_memblk(int nodeid, u64 start, u64 end);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) numa_set_distance(int from, int to, int distance);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) numa_free_distance(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) early_map_cpu_to_node(unsigned int cpu, int nid);
void numa_store_cpu_info(unsigned int cpu);
void numa_add_cpu(unsigned int cpu);
void numa_remove_cpu(unsigned int cpu);
# 8 "../arch/arm64/include/asm/mmzone.h" 2

extern struct pglist_data *node_data[];
# 965 "../include/linux/mmzone.h" 2



extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 1000 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int zonelist_node_idx(struct zoneref *zoneref)
{
 return zone_to_nid(zoneref->zone);
}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 1031 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1056 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1140 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long pfn_to_section_nr(unsigned long pfn)
{
 return pfn >> (30 - 16);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long section_nr_to_pfn(unsigned long sec)
{
 return sec << (30 - 16);
}
# 1167 "../include/linux/mmzone.h"
struct mem_section_usage {
 unsigned long subsection_map[((((1UL << (30 - 21))) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

 unsigned long pageblock_flags[0];
};

void subsection_map_init(unsigned long pfn, unsigned long nr_pages);

struct page;
struct page_ext;
struct mem_section {
# 1190 "../include/linux/mmzone.h"
 unsigned long section_mem_map;

 struct mem_section_usage *usage;
# 1205 "../include/linux/mmzone.h"
};
# 1218 "../include/linux/mmzone.h"
extern struct mem_section **mem_section;




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *section_to_usemap(struct mem_section *ms)
{
 return ms->usage->pageblock_flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_section *__nr_to_section(unsigned long nr)
{

 if (!mem_section)
  return ((void *)0);

 if (!mem_section[((nr) / (((1UL) << 16) / sizeof (struct mem_section)))])
  return ((void *)0);
 return &mem_section[((nr) / (((1UL) << 16) / sizeof (struct mem_section)))][nr & ((((1UL) << 16) / sizeof (struct mem_section)) - 1)];
}
extern unsigned long __section_nr(struct mem_section *ms);
extern size_t mem_section_usage_size(void);
# 1262 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<4)-1));
 return (struct page *)map;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int early_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<3)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<2)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int online_section_nr(unsigned long nr)
{
 return online_section(__nr_to_section(nr));
}


void online_mem_sections(unsigned long start_pfn, unsigned long end_pfn);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(pfn_to_section_nr(pfn));
}

extern unsigned long __highest_present_section_nr;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int subsection_map_index(unsigned long pfn)
{
 return (pfn & ~((~((1UL << (30 - 16))-1)))) / (1UL << (21 - 16));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_section_valid(struct mem_section *ms, unsigned long pfn)
{
 int idx = subsection_map_index(pfn);

 return test_bit(idx, ms->usage->subsection_map);
}
# 1355 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pfn_present(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (48 - 30)))
  return 0;
 return present_section(__nr_to_section(pfn_to_section_nr(pfn)));
}
# 1378 "../include/linux/mmzone.h"
void sparse_init(void);
# 1391 "../include/linux/mmzone.h"
struct mminit_pfnnid_cache {
 unsigned long last_start;
 unsigned long last_end;
 int last_nid;
};





void memory_present(int nid, unsigned long start, unsigned long end);
# 1439 "../include/linux/mmzone.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memmap_valid_within(unsigned long pfn,
     struct page *page, struct zone *zone)
{
 return true;
}
# 7 "../include/linux/gfp.h" 2


# 1 "../include/linux/topology.h" 1
# 46 "../include/linux/topology.h"
int topology_update_cpu_topology(void);
# 75 "../include/linux/topology.h"
extern int __attribute__((__section__(".data..read_mostly"))) node_reclaim_distance;






extern __attribute__((section(".data..percpu" ""))) __typeof__(int) numa_node;



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_node_id(void)
{
 return ({ typeof(numa_node) pscr_ret__; do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 2: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 4: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; case 8: pscr_ret__ = ({ *({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }); }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_to_node(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(numa_node)))) *)((&(numa_node)))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_numa_node(int node)
{
 do { do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(numa_node)) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_8(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)node); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_16(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)node); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_32(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)node); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_64(({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(numa_node))) *)(&(numa_node))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)node); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_cpu_numa_node(int cpu, int node)
{
 (*({ do { const void *__vpp_verify = (typeof((&(numa_node)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(numa_node)))) *)((&(numa_node)))); (typeof((typeof(*((&(numa_node)))) *)((&(numa_node))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })) = node;
}
# 177 "../include/linux/topology.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int numa_mem_id(void)
{
 return numa_node_id();
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int node_to_mem_node(int node)
{
 return node;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_to_mem(int cpu)
{
 return cpu_to_node(cpu);
}
# 219 "../include/linux/topology.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_smt_mask(int cpu)
{
 return (&cpu_topology[cpu].thread_sibling);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return cpumask_of_node(cpu_to_node(cpu));
}
# 10 "../include/linux/gfp.h" 2

struct vm_area_struct;
# 308 "../include/linux/gfp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfpflags_to_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { extern void __compiletime_assert_311(void) ; if (!(!((1UL << 3) != 0x08u))) __compiletime_assert_311(); } while (0);
 do { extern void __compiletime_assert_312(void) ; if (!(!((0x08u >> 3) != MIGRATE_MOVABLE))) __compiletime_assert_312(); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400u));
}
# 418 "../include/linux/gfp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_NORMAL << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_NORMAL << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 436 "../include/linux/gfp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int gfp_zonelist(gfp_t flags)
{

 if (__builtin_expect(!!(flags & (( gfp_t)0x200000u)), 0))
  return ZONELIST_NOFALLBACK;

 return ZONELIST_FALLBACK;
}
# 454 "../include/linux/gfp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (node_data[(nid)])->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_alloc_page(struct page *page, int order) { }


struct page *
__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,
       nodemask_t *nodemask);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
 return __alloc_pages_nodemask(gfp_mask, order, preferred_nid, ((void *)0));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 6)))));
 ((void)(sizeof(( long)((gfp_mask & (( gfp_t)0x200000u)) && !node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, nid);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}


extern struct page *alloc_pages_current(gfp_t gfp_mask, unsigned order);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
alloc_pages(gfp_t gfp_mask, unsigned int order)
{
 return alloc_pages_current(gfp_mask, order);
}
extern struct page *alloc_pages_vma(gfp_t gfp_mask, int order,
   struct vm_area_struct *vma, unsigned long addr,
   int node);
# 526 "../include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
void * __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);
extern void free_unref_page(struct page *page);
extern void free_unref_page_list(struct list_head *list);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask);
extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 567 "../include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);


extern bool pm_suspended_storage(void);
# 586 "../include/linux/gfp.h"
extern int alloc_contig_range(unsigned long start, unsigned long end,
         unsigned migratetype, gfp_t gfp_mask);

void free_contig_range(unsigned long pfn, unsigned int nr_pages);



extern void init_cma_reserved_pageblock(struct page *page);
# 8 "../include/linux/firmware.h" 2




struct firmware {
 size_t size;
 const u8 *data;
 struct page **pages;


 void *priv;
};

struct module;
struct device;

struct builtin_fw {
 char *name;
 void *data;
 unsigned long size;
};
# 43 "../include/linux/firmware.h"
int request_firmware(const struct firmware **fw, const char *name,
       struct device *device);
int firmware_request_nowarn(const struct firmware **fw, const char *name,
       struct device *device);
int request_firmware_nowait(
 struct module *module, bool uevent,
 const char *name, struct device *device, gfp_t gfp, void *context,
 void (*cont)(const struct firmware *fw, void *context));
int request_firmware_direct(const struct firmware **fw, const char *name,
       struct device *device);
int request_firmware_into_buf(const struct firmware **firmware_p,
 const char *name, struct device *device, void *buf, size_t size);

void release_firmware(const struct firmware *fw);
# 99 "../include/linux/firmware.h"
int firmware_request_cache(struct device *device, const char *name);
# 26 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../include/linux/module.h" 1
# 10 "../include/linux/module.h"
# 1 "../include/linux/stat.h" 1





# 1 "../arch/arm64/include/asm/stat.h" 1







# 1 "./arch/arm64/include/generated/uapi/asm/stat.h" 1
# 1 "../include/uapi/asm-generic/stat.h" 1
# 24 "../include/uapi/asm-generic/stat.h"
struct stat {
 unsigned long st_dev;
 unsigned long st_ino;
 unsigned int st_mode;
 unsigned int st_nlink;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned long st_rdev;
 unsigned long __pad1;
 long st_size;
 int st_blksize;
 int __pad2;
 long st_blocks;
 long st_atime;
 unsigned long st_atime_nsec;
 long st_mtime;
 unsigned long st_mtime_nsec;
 long st_ctime;
 unsigned long st_ctime_nsec;
 unsigned int __unused4;
 unsigned int __unused5;
};
# 2 "./arch/arm64/include/generated/uapi/asm/stat.h" 2
# 9 "../arch/arm64/include/asm/stat.h" 2




# 1 "../arch/arm64/include/asm/compat.h" 1
# 13 "../arch/arm64/include/asm/compat.h"
# 1 "../include/linux/sched.h" 1
# 10 "../include/linux/sched.h"
# 1 "../include/uapi/linux/sched.h" 1
# 39 "../include/uapi/linux/sched.h"
struct clone_args {
 __u64 __attribute__((aligned(8))) flags;
 __u64 __attribute__((aligned(8))) pidfd;
 __u64 __attribute__((aligned(8))) child_tid;
 __u64 __attribute__((aligned(8))) parent_tid;
 __u64 __attribute__((aligned(8))) exit_signal;
 __u64 __attribute__((aligned(8))) stack;
 __u64 __attribute__((aligned(8))) stack_size;
 __u64 __attribute__((aligned(8))) tls;
};
# 11 "../include/linux/sched.h" 2



# 1 "../include/linux/pid.h" 1




# 1 "../include/linux/rculist.h" 1
# 31 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 ({ union { typeof(list->prev) __val; char __c[1]; } __u = { .__val = ( typeof(list->prev)) (list) }; __write_once_size(&(list->prev), __u.__c, sizeof(list->prev)); __u.__val; });
}
# 67 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { typeof(&(*((struct list_head **)(&(prev)->next)))) __p = (&(*((struct list_head **)(&(prev)->next)))); union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; do { extern void __compiletime_assert_75(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_75(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct list_head **)(&(prev)->next))))); switch (sizeof(*&(*((struct list_head **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 next->prev = new;
}
# 95 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 116 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 146 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 172 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  n->pprev = ((void *)0);
 }
}
# 188 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(new->prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(new->prev)->next)))))) ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(new->prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(new->prev)->next)))))); __u.__val; }); else do { typeof(&(*((struct list_head **)(&(new->prev)->next)))) __p = (&(*((struct list_head **)(&(new->prev)->next)))); union { typeof(*&(*((struct list_head **)(&(new->prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(new->prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) }; do { extern void __compiletime_assert_193(void) ; if (!((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long)))) __compiletime_assert_193(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct list_head **)(&(new->prev)->next))))); switch (sizeof(*&(*((struct list_head **)(&(new->prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 new->next->prev = new;
 old->prev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 217 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 240 "../include/linux/rculist.h"
 sync();
# 250 "../include/linux/rculist.h"
 last->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(first); ; if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { typeof(&(*((struct list_head **)(&(prev)->next)))) __p = (&(*((struct list_head **)(&(prev)->next)))); union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; do { extern void __compiletime_assert_251(void) ; if (!((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_251(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct list_head **)(&(prev)->next))))); switch (sizeof(*&(*((struct list_head **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 first->prev = prev;
 next->prev = last;
}
# 263 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 278 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 473 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 486 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 new->pprev = old->pprev;
 do { uintptr_t _r_a_p__v = (uintptr_t)(new); ; if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*(struct hlist_node **)new->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*(struct hlist_node **)new->pprev))) ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)) }; __write_once_size(&((*(struct hlist_node **)new->pprev)), __u.__c, sizeof((*(struct hlist_node **)new->pprev))); __u.__val; }); else do { typeof(&*(struct hlist_node **)new->pprev) __p = (&*(struct hlist_node **)new->pprev); union { typeof(*&*(struct hlist_node **)new->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*(struct hlist_node **)new->pprev)) ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) }; do { extern void __compiletime_assert_493(void) ; if (!((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long)))) __compiletime_assert_493(); } while (0); kasan_check_write(__p, sizeof(*&*(struct hlist_node **)new->pprev)); switch (sizeof(*&*(struct hlist_node **)new->pprev)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 if (next)
  new->next->pprev = &new->next;
 old->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 525 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 n->pprev = &h->first;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(h)->first))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(h)->first)))))) ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(h)->first))))), __u.__c, sizeof(((*((struct hlist_node **)(&(h)->first)))))); __u.__val; }); else do { typeof(&(*((struct hlist_node **)(&(h)->first)))) __p = (&(*((struct hlist_node **)(&(h)->first)))); union { typeof(*&(*((struct hlist_node **)(&(h)->first)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(h)->first))))) ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) }; do { extern void __compiletime_assert_532(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long)))) __compiletime_assert_532(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)(&(h)->first))))); switch (sizeof(*&(*((struct hlist_node **)(&(h)->first))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 if (first)
  first->pprev = &n->next;
}
# 556 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  n->pprev = &last->next;
  do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(last)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(last)->next)))))) ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(last)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(last)->next)))))); __u.__val; }); else do { typeof(&(*((struct hlist_node **)(&(last)->next)))) __p = (&(*((struct hlist_node **)(&(last)->next)))); union { typeof(*&(*((struct hlist_node **)(&(last)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(last)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) }; do { extern void __compiletime_assert_568(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long)))) __compiletime_assert_568(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)(&(last)->next))))); switch (sizeof(*&(*((struct hlist_node **)(&(last)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 592 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)((n)->pprev))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)((n)->pprev)))))) ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)((n)->pprev))))), __u.__c, sizeof(((*((struct hlist_node **)((n)->pprev)))))); __u.__val; }); else do { typeof(&(*((struct hlist_node **)((n)->pprev)))) __p = (&(*((struct hlist_node **)((n)->pprev)))); union { typeof(*&(*((struct hlist_node **)((n)->pprev)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)((n)->pprev))))) ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) }; do { extern void __compiletime_assert_597(void) ; if (!((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long)))) __compiletime_assert_597(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)((n)->pprev))))); switch (sizeof(*&(*((struct hlist_node **)((n)->pprev))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 next->pprev = &n->next;
}
# 619 "../include/linux/rculist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 do { uintptr_t _r_a_p__v = (uintptr_t)(n); ; if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(prev)->next)))))) ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(prev)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(prev)->next)))))); __u.__val; }); else do { typeof(&(*((struct hlist_node **)(&(prev)->next)))) __p = (&(*((struct hlist_node **)(&(prev)->next)))); union { typeof(*&(*((struct hlist_node **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(prev)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) }; do { extern void __compiletime_assert_624(void) ; if (!((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long)))) __compiletime_assert_624(); } while (0); kasan_check_write(__p, sizeof(*&(*((struct hlist_node **)(&(prev)->next))))); switch (sizeof(*&(*((struct hlist_node **)(&(prev)->next))))) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);
 if (n->next)
  n->next->pprev = &n->next;
}
# 6 "../include/linux/pid.h" 2

# 1 "../include/linux/refcount.h" 1








struct mutex;
# 19 "../include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;
# 30 "../include/linux/refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void refcount_set(refcount_t *r, unsigned int n)
{
 atomic_set(&r->refs, n);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}

extern __attribute__((__warn_unused_result__)) bool refcount_add_not_zero_checked(unsigned int i, refcount_t *r);
extern void refcount_add_checked(unsigned int i, refcount_t *r);

extern __attribute__((__warn_unused_result__)) bool refcount_inc_not_zero_checked(refcount_t *r);
extern void refcount_inc_checked(refcount_t *r);

extern __attribute__((__warn_unused_result__)) bool refcount_sub_and_test_checked(unsigned int i, refcount_t *r);

extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_test_checked(refcount_t *r);
extern void refcount_dec_checked(refcount_t *r);
# 111 "../include/linux/refcount.h"
extern __attribute__((__warn_unused_result__)) bool refcount_dec_if_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_not_one(refcount_t *r);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
extern __attribute__((__warn_unused_result__)) bool refcount_dec_and_lock_irqsave(refcount_t *r,
             spinlock_t *lock,
             unsigned long *flags);
# 8 "../include/linux/pid.h" 2

enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_TGID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,
};
# 54 "../include/linux/pid.h"
struct upid {
 int nr;
 struct pid_namespace *ns;
};

struct pid
{
 refcount_t count;
 unsigned int level;

 struct hlist_head tasks[PIDTYPE_MAX];

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

extern const struct file_operations pidfd_fops;

struct file;

extern struct pid *pidfd_pid(const struct file *file);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  refcount_inc_checked(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
# 114 "../include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);

extern struct pid *alloc_pid(struct pid_namespace *ns);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 137 "../include/linux/pid.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 167 "../include/linux/pid.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "../include/linux/sched.h" 2
# 1 "../include/linux/sem.h" 1




# 1 "../include/uapi/linux/sem.h" 1




# 1 "../include/linux/ipc.h" 1





# 1 "../include/linux/uidgid.h" 1
# 16 "../include/linux/uidgid.h"
# 1 "../include/linux/highuid.h" 1
# 35 "../include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "../include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "../include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "../include/linux/uidgid.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}
# 7 "../include/linux/ipc.h" 2
# 1 "../include/linux/rhashtable-types.h" 1
# 17 "../include/linux/rhashtable-types.h"
struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};

struct bucket_table;






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);
# 56 "../include/linux/rhashtable-types.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 81 "../include/linux/rhashtable-types.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 120 "../include/linux/rhashtable-types.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
 bool end_of_table;
};

int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);
# 8 "../include/linux/ipc.h" 2
# 1 "../include/uapi/linux/ipc.h" 1
# 10 "../include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};



# 1 "./arch/arm64/include/generated/uapi/asm/ipcbuf.h" 1
# 1 "../include/uapi/asm-generic/ipcbuf.h" 1
# 20 "../include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 2 "./arch/arm64/include/generated/uapi/asm/ipcbuf.h" 2
# 23 "../include/uapi/linux/ipc.h" 2
# 58 "../include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "../include/linux/ipc.h" 2



struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__aligned__((1 << (6))))) ;
# 6 "../include/uapi/linux/sem.h" 2
# 25 "../include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};



# 1 "./arch/arm64/include/generated/uapi/asm/sembuf.h" 1
# 1 "../include/uapi/asm-generic/sembuf.h" 1
# 29 "../include/uapi/asm-generic/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;

 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;






 unsigned long sem_nsems;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 2 "./arch/arm64/include/generated/uapi/asm/sembuf.h" 2
# 38 "../include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 6 "../include/linux/sem.h" 2

struct task_struct;
struct sem_undo_list;



struct sysv_sem {
 struct sem_undo_list *undo_list;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);
# 16 "../include/linux/sched.h" 2
# 1 "../include/linux/shm.h" 1






# 1 "../include/uapi/linux/shm.h" 1






# 1 "../include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "../include/uapi/linux/shm.h" 2
# 28 "../include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_time_t shm_atime;
 __kernel_time_t shm_dtime;
 __kernel_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};



# 1 "./arch/arm64/include/generated/uapi/asm/shmbuf.h" 1
# 1 "../include/uapi/asm-generic/shmbuf.h" 1
# 25 "../include/uapi/asm-generic/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;

 __kernel_time_t shm_atime;
 __kernel_time_t shm_dtime;
 __kernel_time_t shm_ctime;
# 40 "../include/uapi/asm-generic/shmbuf.h"
 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused4;
 unsigned long __unused5;
};

struct shminfo64 {
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;
};
# 2 "./arch/arm64/include/generated/uapi/asm/shmbuf.h" 2
# 44 "../include/uapi/linux/shm.h" 2
# 93 "../include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "../include/linux/shm.h" 2
# 1 "../arch/arm64/include/asm/shmparam.h" 1
# 15 "../arch/arm64/include/asm/shmparam.h"
# 1 "../include/asm-generic/shmparam.h" 1
# 16 "../arch/arm64/include/asm/shmparam.h" 2
# 9 "../include/linux/shm.h" 2

struct file;


struct sysv_shm {
 struct list_head shm_clist;
};

long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr,
       unsigned long shmlba);
bool is_file_shm_hugepages(struct file *file);
void exit_shm(struct task_struct *task);
# 17 "../include/linux/sched.h" 2
# 1 "../include/linux/kcov.h" 1




# 1 "../include/uapi/linux/kcov.h" 1
# 11 "../include/uapi/linux/kcov.h"
enum {
# 20 "../include/uapi/linux/kcov.h"
 KCOV_TRACE_PC = 0,

 KCOV_TRACE_CMP = 1,
};
# 6 "../include/linux/kcov.h" 2

struct task_struct;
# 42 "../include/linux/kcov.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcov_task_init(struct task_struct *t) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcov_task_exit(struct task_struct *t) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcov_prepare_switch(struct task_struct *t) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kcov_finish_switch(struct task_struct *t) {}
# 18 "../include/linux/sched.h" 2

# 1 "../include/linux/plist.h" 1
# 79 "../include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 121 "../include/linux/plist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 210 "../include/linux/plist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 280 "../include/linux/plist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); do { extern void __compiletime_assert_283(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void))))) __compiletime_assert_283(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); do { extern void __compiletime_assert_295(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void))))) __compiletime_assert_295(); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 20 "../include/linux/sched.h" 2
# 1 "../include/linux/hrtimer.h" 1
# 15 "../include/linux/hrtimer.h"
# 1 "../include/linux/hrtimer_defs.h" 1
# 16 "../include/linux/hrtimer.h" 2





# 1 "../include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root_cached rb_root;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 33 "../include/linux/timerqueue.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 struct rb_node *leftmost = (&head->rb_root)->rb_leftmost;

 return ({ void *__mptr = (void *)(leftmost); do { extern void __compiletime_assert_38(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(leftmost)), typeof(((struct timerqueue_node *)0)->node)) && !__builtin_types_compatible_p(typeof(*(leftmost)), typeof(void))))) __compiletime_assert_38(); } while (0); ((struct timerqueue_node *)(__mptr - __builtin_offsetof(struct timerqueue_node, node))); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_queued(struct timerqueue_node *node)
{
 return !((&node->node)->__rb_parent_color == (unsigned long)(&node->node));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool timerqueue_node_expires(struct timerqueue_node *node)
{
 return node->expires;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->rb_root = (struct rb_root_cached) { {((void *)0), }, ((void *)0) };
}
# 22 "../include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;
# 38 "../include/linux/hrtimer.h"
enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x00,
 HRTIMER_MODE_REL = 0x01,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_SOFT = 0x04,
 HRTIMER_MODE_HARD = 0x08,

 HRTIMER_MODE_ABS_PINNED = HRTIMER_MODE_ABS | HRTIMER_MODE_PINNED,
 HRTIMER_MODE_REL_PINNED = HRTIMER_MODE_REL | HRTIMER_MODE_PINNED,

 HRTIMER_MODE_ABS_SOFT = HRTIMER_MODE_ABS | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_SOFT = HRTIMER_MODE_REL | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_PINNED_SOFT = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_SOFT,
 HRTIMER_MODE_REL_PINNED_SOFT = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_SOFT,

 HRTIMER_MODE_ABS_HARD = HRTIMER_MODE_ABS | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_HARD = HRTIMER_MODE_REL | HRTIMER_MODE_HARD,

 HRTIMER_MODE_ABS_PINNED_HARD = HRTIMER_MODE_ABS_PINNED | HRTIMER_MODE_HARD,
 HRTIMER_MODE_REL_PINNED_HARD = HRTIMER_MODE_REL_PINNED | HRTIMER_MODE_HARD,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 117 "../include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
 u8 is_soft;
 u8 is_hard;
};
# 135 "../include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 158 "../include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 unsigned int index;
 clockid_t clockid;
 seqcount_t seq;
 struct hrtimer *running;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__((1 << (6)))));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_BASE_MONOTONIC_SOFT,
 HRTIMER_BASE_REALTIME_SOFT,
 HRTIMER_BASE_BOOTTIME_SOFT,
 HRTIMER_BASE_TAI_SOFT,
 HRTIMER_MAX_CLOCK_BASES,
};
# 213 "../include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 unsigned int hres_active : 1,
     in_hrtirq : 1,
     hang_detected : 1,
     softirq_activated : 1;

 unsigned int nr_events;
 unsigned short nr_retries;
 unsigned short nr_hangs;
 unsigned int max_hang_time;





 ktime_t expires_next;
 struct hrtimer *next_timer;
 ktime_t softirq_expires_next;
 struct hrtimer *softirq_next_timer;
 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return ktime_to_ns(timer->node.expires);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return 1 ?
  timer->base->cpu_base->hres_active : 0;
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

extern void clock_was_set_delayed(void);

extern unsigned int hrtimer_resolution;
# 332 "../include/linux/hrtimer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}

extern void clock_was_set(void);

extern void timerfd_clock_was_set(void);



extern void hrtimers_resume(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_cancel_wait_running(struct hrtimer *timer)
{
 cpu_relax();
}





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);
extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl, clockid_t clock_id,
     enum hrtimer_mode mode);
# 389 "../include/linux/hrtimer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_init_sleeper_on_stack(struct hrtimer_sleeper *sl,
       clockid_t clock_id,
       enum hrtimer_mode mode)
{
 hrtimer_init_sleeper(sl, clock_id, mode);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 418 "../include/linux/hrtimer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ktime_to_ns(((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *sl,
       enum hrtimer_mode mode);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_is_queued(struct hrtimer *timer)
{
 return timer->state & 0x01;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 496 "../include/linux/hrtimer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec64 *);
extern long hrtimer_nanosleep(const struct timespec64 *rqtp,
         const enum hrtimer_mode mode,
         const clockid_t clockid);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
        const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       clockid_t clock_id);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 21 "../include/linux/sched.h" 2
# 1 "../include/linux/seccomp.h" 1




# 1 "../include/uapi/linux/seccomp.h" 1
# 59 "../include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};

struct seccomp_notif_sizes {
 __u16 seccomp_notif;
 __u16 seccomp_notif_resp;
 __u16 seccomp_data;
};

struct seccomp_notif {
 __u64 id;
 __u32 pid;
 __u32 flags;
 struct seccomp_data data;
};

struct seccomp_notif_resp {
 __u64 id;
 __s64 val;
 __s32 error;
 __u32 flags;
};
# 6 "../include/linux/seccomp.h" 2
# 15 "../include/linux/seccomp.h"
# 1 "../arch/arm64/include/asm/seccomp.h" 1
# 11 "../arch/arm64/include/asm/seccomp.h"
# 1 "../arch/arm64/include/asm/unistd.h" 1
# 48 "../arch/arm64/include/asm/unistd.h"
# 1 "../arch/arm64/include/uapi/asm/unistd.h" 1
# 23 "../arch/arm64/include/uapi/asm/unistd.h"
# 1 "../include/uapi/asm-generic/unistd.h" 1
# 24 "../arch/arm64/include/uapi/asm/unistd.h" 2
# 49 "../arch/arm64/include/asm/unistd.h" 2
# 12 "../arch/arm64/include/asm/seccomp.h" 2








# 1 "../include/asm-generic/seccomp.h" 1
# 11 "../include/asm-generic/seccomp.h"
# 1 "../include/uapi/linux/unistd.h" 1







# 1 "../arch/arm64/include/asm/unistd.h" 1
# 48 "../arch/arm64/include/asm/unistd.h"
# 1 "../arch/arm64/include/uapi/asm/unistd.h" 1
# 23 "../arch/arm64/include/uapi/asm/unistd.h"
# 1 "../include/uapi/asm-generic/unistd.h" 1
# 24 "../arch/arm64/include/uapi/asm/unistd.h" 2
# 49 "../arch/arm64/include/asm/unistd.h" 2
# 9 "../include/uapi/linux/unistd.h" 2
# 12 "../include/asm-generic/seccomp.h" 2
# 31 "../include/asm-generic/seccomp.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const int *get_compat_mode1_syscalls(void)
{
 static const int mode1_syscalls_32[] = {
  3, 4,
  1, 173,
  0,
 };
 return mode1_syscalls_32;
}
# 21 "../arch/arm64/include/asm/seccomp.h" 2
# 16 "../include/linux/seccomp.h" 2

struct seccomp_filter;
# 29 "../include/linux/seccomp.h"
struct seccomp {
 int mode;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int secure_computing(const struct seccomp_data *sd)
{
 if (__builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 11)), 0))
  return __secure_computing(sd);
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, void *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 84 "../include/linux/seccomp.h"
extern void put_seccomp_filter(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 98 "../include/linux/seccomp.h"
extern long seccomp_get_filter(struct task_struct *task,
          unsigned long filter_off, void *data);
extern long seccomp_get_metadata(struct task_struct *task,
     unsigned long filter_off, void *data);
# 22 "../include/linux/sched.h" 2



# 1 "../include/linux/resource.h" 1




# 1 "../include/uapi/linux/resource.h" 1
# 24 "../include/uapi/linux/resource.h"
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "../include/uapi/linux/resource.h"
# 1 "./arch/arm64/include/generated/uapi/asm/resource.h" 1
# 1 "../include/asm-generic/resource.h" 1




# 1 "../include/uapi/asm-generic/resource.h" 1
# 6 "../include/asm-generic/resource.h" 2
# 2 "./arch/arm64/include/generated/uapi/asm/resource.h" 2
# 79 "../include/uapi/linux/resource.h" 2
# 6 "../include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 26 "../include/linux/sched.h" 2
# 1 "../include/linux/latencytop.h" 1
# 14 "../include/linux/latencytop.h"
struct task_struct;
# 46 "../include/linux/latencytop.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_latency_tracing(struct task_struct *p)
{
}
# 27 "../include/linux/sched.h" 2
# 1 "../include/linux/sched/prio.h" 1
# 48 "../include/linux/sched/prio.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 28 "../include/linux/sched.h" 2
# 1 "../include/linux/sched/types.h" 1
# 17 "../include/linux/sched/types.h"
struct task_cputime {
 u64 stime;
 u64 utime;
 unsigned long long sum_exec_runtime;
};
# 29 "../include/linux/sched.h" 2
# 1 "../include/linux/signal_types.h" 1
# 10 "../include/linux/signal_types.h"
# 1 "../include/uapi/linux/signal.h" 1




# 1 "../arch/arm64/include/uapi/asm/signal.h" 1
# 26 "../arch/arm64/include/uapi/asm/signal.h"
# 1 "../include/asm-generic/signal.h" 1




# 1 "../include/uapi/asm-generic/signal.h" 1
# 90 "../include/uapi/asm-generic/signal.h"
typedef struct {
 unsigned long sig[(64 / 64)];
} sigset_t;


typedef unsigned long old_sigset_t;


# 1 "../include/uapi/asm-generic/signal-defs.h" 1
# 18 "../include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 98 "../include/uapi/asm-generic/signal.h" 2
# 114 "../include/uapi/asm-generic/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 6 "../include/asm-generic/signal.h" 2
# 27 "../arch/arm64/include/uapi/asm/signal.h" 2
# 6 "../include/uapi/linux/signal.h" 2
# 1 "./arch/arm64/include/generated/uapi/asm/siginfo.h" 1
# 1 "../include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 32 "../include/uapi/asm-generic/siginfo.h"
union __sifields {

 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
 } _kill;


 struct {
  __kernel_timer_t _tid;
  int _overrun;
  sigval_t _sigval;
  int _sys_private;
 } _timer;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  sigval_t _sigval;
 } _rt;


 struct {
  __kernel_pid_t _pid;
  __kernel_uid32_t _uid;
  int _status;
  __kernel_clock_t _utime;
  __kernel_clock_t _stime;
 } _sigchld;


 struct {
  void *_addr;
# 77 "../include/uapi/asm-generic/siginfo.h"
  union {




   short _addr_lsb;

   struct {
    char _dummy_bnd[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    void *_lower;
    void *_upper;
   } _addr_bnd;

   struct {
    char _dummy_pkey[(__alignof__(void *) < sizeof(short) ? sizeof(short) : __alignof__(void *))];
    __u32 _pkey;
   } _addr_pkey;
  };
 } _sigfault;


 struct {
  long _band;
  int _fd;
 } _sigpoll;


 struct {
  void *_call_addr;
  int _syscall;
  unsigned int _arch;
 } _sigsys;
};
# 129 "../include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 union {
  struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
  int _si_pad[128/sizeof(int)];
 };
} siginfo_t;
# 320 "../include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 2 "./arch/arm64/include/generated/uapi/asm/siginfo.h" 2
# 7 "../include/uapi/linux/signal.h" 2
# 11 "../include/linux/signal_types.h" 2

typedef struct kernel_siginfo {
 struct { int si_signo; int si_errno; int si_code; union __sifields _sifields; };
} kernel_siginfo_t;





struct sigqueue {
 struct list_head list;
 int flags;
 kernel_siginfo_t info;
 struct user_struct *user;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 65 "../include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 kernel_siginfo_t info;
 int sig;
};
# 30 "../include/linux/sched.h" 2

# 1 "../include/linux/task_io_accounting.h" 1
# 12 "../include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
# 44 "../include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 32 "../include/linux/sched.h" 2
# 1 "../include/linux/posix-timers.h" 1






# 1 "../include/linux/alarmtimer.h" 1








struct rtc_device;

enum alarmtimer_type {
 ALARM_REALTIME,
 ALARM_BOOTTIME,


 ALARM_NUMTYPE,


 ALARM_REALTIME_FREEZER,
 ALARM_BOOTTIME_FREEZER,
};

enum alarmtimer_restart {
 ALARMTIMER_NORESTART,
 ALARMTIMER_RESTART,
};
# 42 "../include/linux/alarmtimer.h"
struct alarm {
 struct timerqueue_node node;
 struct hrtimer timer;
 enum alarmtimer_restart (*function)(struct alarm *, ktime_t now);
 enum alarmtimer_type type;
 int state;
 void *data;
};

void alarm_init(struct alarm *alarm, enum alarmtimer_type type,
  enum alarmtimer_restart (*function)(struct alarm *, ktime_t));
void alarm_start(struct alarm *alarm, ktime_t start);
void alarm_start_relative(struct alarm *alarm, ktime_t start);
void alarm_restart(struct alarm *alarm);
int alarm_try_to_cancel(struct alarm *alarm);
int alarm_cancel(struct alarm *alarm);

u64 alarm_forward(struct alarm *alarm, ktime_t now, ktime_t interval);
u64 alarm_forward_now(struct alarm *alarm, ktime_t interval);
ktime_t alarm_expires_remaining(const struct alarm *alarm);


struct rtc_device *alarmtimer_get_rtcdev(void);
# 8 "../include/linux/posix-timers.h" 2


struct kernel_siginfo;
struct task_struct;
# 38 "../include/linux/posix-timers.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_process_cpuclock(const unsigned int pid,
  const clockid_t clock)
{
 return ((~pid) << 3) | clock;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t make_thread_cpuclock(const unsigned int tid,
  const clockid_t clock)
{
 return make_process_cpuclock(tid, clock | 4);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) clockid_t fd_to_clockid(const int fd)
{
 return make_process_cpuclock((unsigned int) fd, 3);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int clockid_to_fd(const clockid_t clk)
{
 return ~(clk >> 3);
}
# 69 "../include/linux/posix-timers.h"
struct cpu_timer {
 struct timerqueue_node node;
 struct timerqueue_head *head;
 struct task_struct *task;
 struct list_head elist;
 int firing;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpu_timer_enqueue(struct timerqueue_head *head,
         struct cpu_timer *ctmr)
{
 ctmr->head = head;
 return timerqueue_add(head, &ctmr->node);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_timer_dequeue(struct cpu_timer *ctmr)
{
 if (ctmr->head) {
  timerqueue_del(ctmr->head, &ctmr->node);
  ctmr->head = ((void *)0);
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 cpu_timer_getexpires(struct cpu_timer *ctmr)
{
 return ctmr->node.expires;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cpu_timer_setexpires(struct cpu_timer *ctmr, u64 exp)
{
 ctmr->node.expires = exp;
}






struct posix_cputimer_base {
 u64 nextevt;
 struct timerqueue_head tqhead;
};
# 122 "../include/linux/posix-timers.h"
struct posix_cputimers {
 struct posix_cputimer_base bases[3];
 unsigned int timers_active;
 unsigned int expiry_active;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_init(struct posix_cputimers *pct)
{
 memset(pct, 0, sizeof(*pct));
 pct->bases[0].nextevt = ((u64)~0ULL);
 pct->bases[1].nextevt = ((u64)~0ULL);
 pct->bases[2].nextevt = ((u64)~0ULL);
}

void posix_cputimers_group_init(struct posix_cputimers *pct, u64 cpu_limit);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void posix_cputimers_rt_watchdog(struct posix_cputimers *pct,
            u64 runtime)
{
 pct->bases[2].nextevt = runtime;
}
# 193 "../include/linux/posix-timers.h"
struct k_itimer {
 struct list_head list;
 struct hlist_node t_hash;
 spinlock_t it_lock;
 const struct k_clock *kclock;
 clockid_t it_clock;
 timer_t it_id;
 int it_active;
 s64 it_overrun;
 s64 it_overrun_last;
 int it_requeue_pending;
 int it_sigev_notify;
 ktime_t it_interval;
 struct signal_struct *it_signal;
 union {
  struct pid *it_pid;
  struct task_struct *it_process;
 };
 struct sigqueue *sigq;
 union {
  struct {
   struct hrtimer timer;
  } real;
  struct cpu_timer cpu;
  struct {
   struct alarm alarmtimer;
  } alarm;
 } it;
 struct callback_head rcu;
};

void run_posix_cpu_timers(void);
void posix_cpu_timers_exit(struct task_struct *task);
void posix_cpu_timers_exit_group(struct task_struct *task);
void set_process_cpu_timer(struct task_struct *task, unsigned int clock_idx,
      u64 *newval, u64 *oldval);

void update_rlimit_cpu(struct task_struct *task, unsigned long rlim_new);

void posixtimer_rearm(struct kernel_siginfo *info);
# 33 "../include/linux/sched.h" 2
# 1 "../include/uapi/linux/rseq.h" 1
# 16 "../include/uapi/linux/rseq.h"
enum rseq_cpu_id_state {
 RSEQ_CPU_ID_UNINITIALIZED = -1,
 RSEQ_CPU_ID_REGISTRATION_FAILED = -2,
};

enum rseq_flags {
 RSEQ_FLAG_UNREGISTER = (1 << 0),
};

enum rseq_cs_flags_bit {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT = 0,
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT = 1,
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT = 2,
};

enum rseq_cs_flags {
 RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT),
 RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE =
  (1U << RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT),
};






struct rseq_cs {

 __u32 version;

 __u32 flags;
 __u64 start_ip;

 __u64 post_commit_offset;
 __u64 abort_ip;
} __attribute__((aligned(4 * sizeof(__u64))));







struct rseq {
# 75 "../include/uapi/linux/rseq.h"
 __u32 cpu_id_start;
# 90 "../include/uapi/linux/rseq.h"
 __u32 cpu_id;
# 109 "../include/uapi/linux/rseq.h"
 union {
  __u64 ptr64;

  __u64 ptr;
# 124 "../include/uapi/linux/rseq.h"
 } rseq_cs;
# 144 "../include/uapi/linux/rseq.h"
 __u32 flags;
} __attribute__((aligned(4 * sizeof(__u64))));
# 34 "../include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct capture_control;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct root_domain;
struct rq;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 215 "../include/linux/sched.h"
extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);

extern int __attribute__((__warn_unused_result__)) io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 241 "../include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};

enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_USER,

 VTIME_SYS,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 u64 utime;
 u64 stime;
 u64 gtime;
};







enum uclamp_id {
 UCLAMP_MIN = 0,
 UCLAMP_MAX,
 UCLAMP_CNT
};


extern struct root_domain def_root_domain;
extern struct mutex sched_domains_mutex;


struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 319 "../include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 346 "../include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;

} __attribute__((__aligned__(sizeof(u64))));
# 395 "../include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u64 runnable_load_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long runnable_load_avg;
 unsigned long util_avg;
 struct util_est util_est;
} __attribute__((__aligned__((1 << (6)))));

struct sched_statistics {
# 441 "../include/linux/sched.h"
};

struct sched_entity {

 struct load_weight load;
 unsigned long runnable_weight;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;

 struct sched_statistics statistics;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;
# 476 "../include/linux/sched.h"
 struct sched_avg avg;

};

struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 545 "../include/linux/sched.h"
 unsigned int dl_throttled : 1;
 unsigned int dl_boosted : 1;
 unsigned int dl_yielded : 1;
 unsigned int dl_non_contending : 1;
 unsigned int dl_overrun : 1;





 struct hrtimer dl_timer;
# 564 "../include/linux/sched.h"
 struct hrtimer inactive_timer;
};
# 602 "../include/linux/sched.h"
union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_hint;
  u8 deferred_qs;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct task_struct {





 struct thread_info thread_info;


 volatile long state;







 void *stack;
 refcount_t usage;

 unsigned int flags;
 unsigned int ptrace;


 struct llist_node wake_entry;
 int on_cpu;


 unsigned int cpu;

 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;
# 664 "../include/linux/sched.h"
 int recent_used_cpu;
 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;

 struct task_group *sched_task_group;

 struct sched_dl_entity dl;
# 698 "../include/linux/sched.h"
 unsigned int policy;
 int nr_cpus_allowed;
 const cpumask_t *cpus_ptr;
 cpumask_t cpus_mask;
# 711 "../include/linux/sched.h"
 unsigned long rcu_tasks_nvcsw;
 u8 rcu_tasks_holdout;
 u8 rcu_tasks_idx;
 int rcu_tasks_idle_cpu;
 struct list_head rcu_tasks_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;
 unsigned sched_remote_wakeup:1;





 unsigned :0;




 unsigned in_execve:1;
 unsigned in_iowait:1;




 unsigned in_user_fault:1;






 unsigned no_cgroup_migration:1;

 unsigned frozen:1;



 unsigned use_memdelay:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 801 "../include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid *thread_pid;
 struct hlist_node pid_links[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;

 u64 utime;
 u64 stime;




 u64 gtime;
 struct prev_cputime prev_cputime;
# 852 "../include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 real_start_time;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct posix_cputimers posix_cputimers;




 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;



 struct key *cached_requested_key;
# 891 "../include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;


 struct sysv_sem sysvsem;
 struct sysv_shm sysvshm;


 unsigned long last_switch_count;
 unsigned long last_switch_time;


 struct fs_struct *fs;


 struct files_struct *files;


 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;



 struct audit_context *audit_context;

 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;


 u32 parent_exec_id;
 u32 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;
# 994 "../include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 struct capture_control *capture_control;


 unsigned long ptrace_message;
 kernel_siginfo_t *last_siginfo;

 struct task_io_accounting ioac;






 u64 acct_rss_mem1;

 u64 acct_vm_mem1;

 u64 acct_timexpd;



 nodemask_t mems_allowed;

 seqcount_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;






 struct mempolicy *mempolicy;
 short il_prev;
 short pref_node_fork;


 int numa_scan_seq;
 unsigned int numa_scan_period;
 unsigned int numa_scan_period_max;
 int numa_preferred_nid;
 unsigned long numa_migrate_retry;

 u64 node_stamp;
 u64 last_task_numa_placement;
 u64 last_sum_exec_runtime;
 struct callback_head numa_work;
# 1091 "../include/linux/sched.h"
 struct numa_group *numa_group;
# 1107 "../include/linux/sched.h"
 unsigned long *numa_faults;
 unsigned long total_numa_faults;







 unsigned long numa_faults_locality[3];

 unsigned long numa_pages_migrated;



 struct rseq *rseq;
 u32 rseq_sig;




 unsigned long rseq_event_mask;


 struct tlbflush_unmap_batch tlb_ubc;

 struct callback_head rcu;


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;
# 1152 "../include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1165 "../include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1216 "../include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;


 struct mem_cgroup *active_memcg;



 struct request_queue *throttle_queue;






 unsigned int sequential_io;
 unsigned int sequential_io_avg;




 int pagefault_disabled;

 struct task_struct *oom_reaper_list;


 struct vm_struct *stack_vm_area;



 refcount_t stack_refcount;






 void *security;
# 1272 "../include/linux/sched.h"
 struct thread_struct thread;







};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pid(struct task_struct *task)
{
 return task->thread_pid;
}
# 1298 "../include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1331 "../include/linux/sched.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pid_alive(const struct task_struct *p)
{
 return p->thread_pid != ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ns);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ union { typeof((tsk->real_parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); else __read_once_size_nocheck(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_state_index(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ union { typeof(tsk->state) __val; char __c[1]; } __u; if (1) __read_once_size(&(tsk->state), __u.__c, sizeof(tsk->state)); else __read_once_size_nocheck(&(tsk->state), __u.__c, sizeof(tsk->state)); do { } while (0); __u.__val; });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { extern void __compiletime_assert_1398(void) ; if (!(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0)))) __compiletime_assert_1398(); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_index_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { extern void __compiletime_assert_1410(void) ; if (!(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 63) ? 63 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 62) ? 62 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 61) ? 61 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 60) ? 60 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 59) ? 59 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 58) ? 58 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 57) ? 57 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 56) ? 56 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 55) ? 55 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 54) ? 54 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 53) ? 53 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 52) ? 52 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 51) ? 51 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 50) ? 50 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 49) ? 49 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 48) ? 48 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 47) ? 47 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 46) ? 46 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 45) ? 45 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 44) ? 44 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 43) ? 43 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 42) ? 42 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 41) ? 41 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 40) ? 40 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 39) ? 39 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 38) ? 38 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 37) ? 37 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 36) ? 36 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 35) ? 35 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 34) ? 34 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 33) ? 33 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 32) ? 32 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 31) ? 31 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 30) ? 30 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 29) ? 29 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 28) ? 28 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 27) ? 27 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 26) ? 26 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 25) ? 25 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 24) ? 24 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 23) ? 23 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 22) ? 22 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 21) ? 21 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 20) ? 20 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 19) ? 19 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 18) ? 18 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 17) ? 17 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 16) ? 16 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 15) ? 15 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 14) ? 14 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 13) ? 13 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 12) ? 12 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 11) ? 11 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 10) ? 10 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 9) ? 9 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 8) ? 8 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 7) ? 7 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 6) ? 6 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 5) ? 5 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 4) ? 4 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 3) ? 3 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1))) __compiletime_assert_1410(); } while (0);

 return state_char[state];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char task_state_to_char(struct task_struct *tsk)
{
 return task_index_to_char(task_state_index(tsk));
}
# 1429 "../include/linux/sched.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1498 "../include/linux/sched.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_percpu_thread(void)
{

 return (get_current()->flags & 0x04000000) &&
  (get_current()->nr_cpus_allowed == 1);



}
# 1530 "../include/linux/sched.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_no_new_privs(struct task_struct *p) { return test_bit(0, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_page(struct task_struct *p) { return test_bit(1, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spread_slab(struct task_struct *p) { return test_bit(2, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_disable(struct task_struct *p) { return test_bit(3, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_noexec(struct task_struct *p) { return test_bit(7, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_noexec(struct task_struct *p) { set_bit(7, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ssb_noexec(struct task_struct *p) { clear_bit(7, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ssb_force_disable(struct task_struct *p) { return test_bit(4, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_disable(struct task_struct *p) { return test_bit(5, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_spec_ib_force_disable(struct task_struct *p) { return test_bit(6, &p->atomic_flags); }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 get_current()->flags &= ~flags;
 get_current()->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
# 1583 "../include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int available_idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {

 struct task_struct task;




 unsigned long stack[((((1UL))) << 16)/sizeof(long)];
};





extern unsigned long init_stack[((((1UL))) << 16) / sizeof(unsigned long)];


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct thread_info *task_thread_info(struct task_struct *task)
{
 return &task->thread_info;
}
# 1660 "../include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);




extern struct task_struct *find_get_task_by_vpid(pid_t nr);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






void scheduler_ipi(void);
extern unsigned long wait_task_inactive(struct task_struct *, long match_state);
# 1706 "../include/linux/sched.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(task_thread_info(tsk), flag, value);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,1)), 0);
}
# 1759 "../include/linux/sched.h"
extern int _cond_resched(void);
# 1769 "../include/linux/sched.h"
extern int __cond_resched_lock(spinlock_t *lock);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cond_resched_rcu(void)
{

 rcu_read_unlock();
 ({ ___might_sleep("../include/linux/sched.h", 1780, 0); _cond_resched(); });
 rcu_read_lock();

}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int spin_needbreak(spinlock_t *lock)
{



 return 0;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 1)), 0);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int task_cpu(const struct task_struct *p)
{

 return ({ union { typeof(p->cpu) __val; char __c[1]; } __u; if (1) __read_once_size(&(p->cpu), __u.__c, sizeof(p->cpu)); else __read_once_size_nocheck(&(p->cpu), __u.__c, sizeof(p->cpu)); do { } while (0); __u.__val; });



}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 1845 "../include/linux/sched.h"
extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);
# 1858 "../include/linux/sched.h"
enum rseq_event_mask_bits {
 RSEQ_EVENT_PREEMPT_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_PREEMPT_BIT,
 RSEQ_EVENT_SIGNAL_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_SIGNAL_BIT,
 RSEQ_EVENT_MIGRATE_BIT = RSEQ_CS_FLAG_NO_RESTART_ON_MIGRATE_BIT,
};

enum rseq_event_mask {
 RSEQ_EVENT_PREEMPT = (1U << RSEQ_EVENT_PREEMPT_BIT),
 RSEQ_EVENT_SIGNAL = (1U << RSEQ_EVENT_SIGNAL_BIT),
 RSEQ_EVENT_MIGRATE = (1U << RSEQ_EVENT_MIGRATE_BIT),
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_set_notify_resume(struct task_struct *t)
{
 if (t->rseq)
  set_tsk_thread_flag(t, 2);
}

void __rseq_handle_notify_resume(struct ksignal *sig, struct pt_regs *regs);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_handle_notify_resume(struct ksignal *ksig,
          struct pt_regs *regs)
{
 if (get_current()->rseq)
  __rseq_handle_notify_resume(ksig, regs);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_signal_deliver(struct ksignal *ksig,
           struct pt_regs *regs)
{
 __asm__ __volatile__("" : : : "memory");
 __set_bit(RSEQ_EVENT_SIGNAL_BIT, &get_current()->rseq_event_mask);
 __asm__ __volatile__("" : : : "memory");
 rseq_handle_notify_resume(ksig, regs);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_preempt(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_PREEMPT_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_migrate(struct task_struct *t)
{
 __set_bit(RSEQ_EVENT_MIGRATE_BIT, &t->rseq_event_mask);
 rseq_set_notify_resume(t);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_fork(struct task_struct *t, unsigned long clone_flags)
{
 if (clone_flags & 0x00010000) {
  t->rseq = ((void *)0);
  t->rseq_sig = 0;
  t->rseq_event_mask = 0;
 } else {
  t->rseq = get_current()->rseq;
  t->rseq_sig = get_current()->rseq_sig;
  t->rseq_event_mask = get_current()->rseq_event_mask;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_execve(struct task_struct *t)
{
 t->rseq = ((void *)0);
 t->rseq_sig = 0;
 t->rseq_event_mask = 0;
}
# 1960 "../include/linux/sched.h"
void __exit_umh(struct task_struct *tsk);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_umh(struct task_struct *tsk)
{
 if (__builtin_expect(!!(tsk->flags & 0x02000000), 0))
  __exit_umh(tsk);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rseq_syscall(struct pt_regs *regs)
{
}



const struct sched_avg *sched_trace_cfs_rq_avg(struct cfs_rq *cfs_rq);
char *sched_trace_cfs_rq_path(struct cfs_rq *cfs_rq, char *str, int len);
int sched_trace_cfs_rq_cpu(struct cfs_rq *cfs_rq);

const struct sched_avg *sched_trace_rq_avg_rt(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_dl(struct rq *rq);
const struct sched_avg *sched_trace_rq_avg_irq(struct rq *rq);

int sched_trace_rq_cpu(struct rq *rq);

const struct cpumask *sched_trace_rd_span(struct root_domain *rd);
# 14 "../arch/arm64/include/asm/compat.h" 2
# 1 "../include/linux/sched/task_stack.h" 1
# 10 "../include/linux/sched/task_stack.h"
# 1 "../include/uapi/linux/magic.h" 1
# 11 "../include/linux/sched/task_stack.h" 2








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *task_stack_page(const struct task_struct *task)
{
 return task->stack;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *end_of_stack(const struct task_struct *task)
{
 return task->stack;
}
# 62 "../include/linux/sched/task_stack.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *try_get_task_stack(struct task_struct *tsk)
{
 return refcount_inc_not_zero_checked(&tsk->stack_refcount) ?
  task_stack_page(tsk) : ((void *)0);
}

extern void put_task_stack(struct task_struct *tsk);
# 81 "../include/linux/sched/task_stack.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int object_is_on_stack(const void *obj)
{
 void *stack = task_stack_page(get_current());

 return (obj >= stack) && (obj < (stack + ((((1UL))) << 16)));
}

extern void thread_stack_cache_init(void);
# 110 "../include/linux/sched/task_stack.h"
extern void set_task_stack_end_magic(struct task_struct *tsk);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & (((((1UL))) << 16)-sizeof(void*)));
}
# 15 "../arch/arm64/include/asm/compat.h" 2

# 1 "../include/asm-generic/compat.h" 1





typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u32 compat_ino_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef s32 compat_daddr_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;
typedef s16 compat_short_t;
typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef u16 compat_ushort_t;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u32 compat_uptr_t;
typedef u32 compat_aio_context_t;
# 17 "../arch/arm64/include/asm/compat.h" 2








typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u16 __compat_uid16_t;
typedef u16 __compat_gid16_t;
typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
typedef u16 compat_mode_t;
typedef u32 compat_dev_t;
typedef s32 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef u32 compat_caddr_t;
typedef __kernel_fsid_t compat_fsid_t;
typedef s64 compat_s64;
typedef u64 compat_u64;

struct compat_stat {




 compat_dev_t st_dev;

 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_ushort_t st_nlink;
 __compat_uid16_t st_uid;
 __compat_gid16_t st_gid;




 compat_dev_t st_rdev;

 compat_off_t st_size;
 compat_off_t st_blksize;
 compat_off_t st_blocks;
 old_time32_t st_atime;
 compat_ulong_t st_atime_nsec;
 old_time32_t st_mtime;
 compat_ulong_t st_mtime_nsec;
 old_time32_t st_ctime;
 compat_ulong_t st_ctime_nsec;
 compat_ulong_t __unused4[2];
};

struct compat_flock {
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;
};





struct compat_flock64 {
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;
};

struct compat_statfs {
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];
};



typedef u32 compat_old_sigset_t;




typedef u32 compat_sigset_word;
# 123 "../arch/arm64/include/asm/compat.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *compat_ptr(compat_uptr_t uptr)
{
 return (void *)(unsigned long)uptr;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) compat_uptr_t ptr_to_compat(void *uptr)
{
 return (u32)(unsigned long)uptr;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *arch_compat_alloc_user_space(long len)
{
 return (void *)(user_stack_pointer(((struct pt_regs *)(((((1UL))) << 16) + task_stack_page(get_current())) - 1))) - len;
}

struct compat_ipc64_perm {
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;
};

struct compat_semid64_ds {
 struct compat_ipc64_perm sem_perm;
 compat_ulong_t sem_otime;
 compat_ulong_t sem_otime_high;
 compat_ulong_t sem_ctime;
 compat_ulong_t sem_ctime_high;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;
};

struct compat_msqid64_ds {
 struct compat_ipc64_perm msg_perm;
 compat_ulong_t msg_stime;
 compat_ulong_t msg_stime_high;
 compat_ulong_t msg_rtime;
 compat_ulong_t msg_rtime_high;
 compat_ulong_t msg_ctime;
 compat_ulong_t msg_ctime_high;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

struct compat_shmid64_ds {
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_ulong_t shm_atime;
 compat_ulong_t shm_atime_high;
 compat_ulong_t shm_dtime;
 compat_ulong_t shm_dtime_high;
 compat_ulong_t shm_ctime;
 compat_ulong_t shm_ctime_high;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_compat_task(void)
{
 return test_ti_thread_flag(((struct thread_info *)get_current()), 22);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_compat_thread(struct thread_info *thread)
{
 return test_ti_thread_flag(thread, 22);
}
# 14 "../arch/arm64/include/asm/stat.h" 2





struct stat64 {
 compat_u64 st_dev;
 unsigned char __pad0[4];


 compat_ulong_t __st_ino;
 compat_uint_t st_mode;
 compat_uint_t st_nlink;

 compat_ulong_t st_uid;
 compat_ulong_t st_gid;

 compat_u64 st_rdev;
 unsigned char __pad3[4];

 compat_s64 st_size;
 compat_ulong_t st_blksize;
 compat_u64 st_blocks;

 compat_ulong_t st_atime;
 compat_ulong_t st_atime_nsec;

 compat_ulong_t st_mtime;
 compat_ulong_t st_mtime_nsec;

 compat_ulong_t st_ctime;
 compat_ulong_t st_ctime_nsec;

 compat_u64 st_ino;
};
# 7 "../include/linux/stat.h" 2
# 1 "../include/uapi/linux/stat.h" 1
# 56 "../include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "../include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 8 "../include/linux/stat.h" 2
# 24 "../include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;







 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec64 atime;
 struct timespec64 mtime;
 struct timespec64 ctime;
 struct timespec64 btime;
 u64 blocks;
};
# 11 "../include/linux/module.h" 2


# 1 "../include/linux/kmod.h" 1








# 1 "../include/linux/umh.h" 1








# 1 "../include/linux/sysctl.h" 1
# 30 "../include/linux/sysctl.h"
# 1 "../include/uapi/linux/sysctl.h" 1
# 35 "../include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
 KERN_PANIC_PRINT=78,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT = 1,
 NET_IPV6_ICMP_ECHO_IGNORE_ALL = 2
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "../include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;






extern const int sysctl_vals[];

typedef int proc_handler (struct ctl_table *ctl, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

extern int proc_dostring(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_minmax(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec_minmax(struct ctl_table *table, int write,
     void *buffer, size_t *lenp,
     loff_t *ppos);
extern int proc_dointvec_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_ms_jiffies(struct ctl_table *, int,
        void *, size_t *, loff_t *);
extern int proc_doulongvec_minmax(struct ctl_table *, int,
      void *, size_t *, loff_t *);
extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int,
          void *, size_t *, loff_t *);
extern int proc_do_large_bitmap(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_do_static_key(struct ctl_table *table, int write,
         void *buffer, size_t *lenp,
         loff_t *ppos);
# 105 "../include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 123 "../include/linux/sysctl.h"
struct ctl_table
{
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header
{
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);

extern struct ctl_table sysctl_mount_point[];
# 243 "../include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write,
         void *buffer, size_t *lenp, loff_t *ppos);
# 10 "../include/linux/umh.h" 2

struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 struct file *file;
 int wait;
 int retval;
 pid_t pid;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} ;

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

struct subprocess_info *call_usermodehelper_setup_file(struct file *file,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);
struct umh_info {
 const char *cmdline;
 struct file *pipe_to_umh;
 struct file *pipe_from_umh;
 struct list_head list;
 void (*cleanup)(struct umh_info *info);
 pid_t pid;
};
int fork_usermode_blob(void *data, size_t len, struct umh_info *info);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 10 "../include/linux/kmod.h" 2
# 20 "../include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((__format__(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 14 "../include/linux/module.h" 2

# 1 "../include/linux/elf.h" 1




# 1 "../arch/arm64/include/asm/elf.h" 1
# 14 "../arch/arm64/include/asm/elf.h"
# 1 "./arch/arm64/include/generated/asm/user.h" 1
# 1 "../include/asm-generic/user.h" 1
# 2 "./arch/arm64/include/generated/asm/user.h" 2
# 15 "../arch/arm64/include/asm/elf.h" 2
# 120 "../arch/arm64/include/asm/elf.h"
typedef unsigned long elf_greg_t;





typedef elf_greg_t elf_gregset_t[(sizeof(struct user_pt_regs) / sizeof(elf_greg_t))];
typedef struct user_fpsimd_state elf_fpregset_t;
# 160 "../arch/arm64/include/asm/elf.h"
struct linux_binprm;
extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
# 186 "../arch/arm64/include/asm/elf.h"
typedef unsigned int compat_elf_greg_t;
typedef compat_elf_greg_t compat_elf_gregset_t[18];
# 220 "../arch/arm64/include/asm/elf.h"
extern int aarch32_setup_additional_pages(struct linux_binprm *bprm,
       int uses_interp);
# 6 "../include/linux/elf.h" 2
# 1 "../include/uapi/linux/elf.h" 1





# 1 "../include/uapi/linux/elf-em.h" 1
# 7 "../include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 138 "../include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 161 "../include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 303 "../include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 433 "../include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 7 "../include/linux/elf.h" 2
# 37 "../include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 49 "../include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 16 "../include/linux/module.h" 2

# 1 "../include/linux/kobject.h" 1
# 20 "../include/linux/kobject.h"
# 1 "../include/linux/sysfs.h" 1
# 16 "../include/linux/sysfs.h"
# 1 "../include/linux/kernfs.h" 1
# 13 "../include/linux/kernfs.h"
# 1 "../include/linux/idr.h" 1
# 15 "../include/linux/idr.h"
# 1 "../include/linux/radix-tree.h" 1
# 18 "../include/linux/radix-tree.h"
# 1 "../include/linux/xarray.h" 1
# 52 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_value(unsigned long v)
{
 ({ int __ret_warn_on = !!((long)v < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/xarray.h\"; .popsection; .long 14472b - 14470b; .short 54; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return (void *)((v << 1) | 1);
}
# 65 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_value(const void *entry)
{
 return (unsigned long)entry >> 1;
}
# 77 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_value(const void *entry)
{
 return (unsigned long)entry & 1;
}
# 95 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_tag_pointer(void *p, unsigned long tag)
{
 return (void *)((unsigned long)p | tag);
}
# 110 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_untag_pointer(void *entry)
{
 return (void *)((unsigned long)entry & ~3UL);
}
# 125 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xa_pointer_tag(void *entry)
{
 return (unsigned long)entry & 3UL;
}
# 143 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_internal(unsigned long v)
{
 return (void *)((v << 2) | 2);
}
# 155 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_internal(const void *entry)
{
 return (unsigned long)entry >> 2;
}
# 167 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_internal(const void *entry)
{
 return ((unsigned long)entry & 3) == 2;
}
# 183 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_zero(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(257)), 0);
}
# 199 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_err(const void *entry)
{
 return __builtin_expect(!!(xa_is_internal(entry) && entry >= xa_mk_internal(-4095)), 0);

}
# 217 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_err(void *entry)
{

 if (xa_is_err(entry))
  return (long)entry >> 2;
 return 0;
}
# 236 "../include/linux/xarray.h"
struct xa_limit {
 u32 max;
 u32 min;
};






typedef unsigned xa_mark_t;







enum xa_lock_type {
 XA_LOCK_IRQ = 1,
 XA_LOCK_BH = 2,
};
# 292 "../include/linux/xarray.h"
struct xarray {
 spinlock_t xa_lock;

 gfp_t xa_flags;
 void * xa_head;
};
# 347 "../include/linux/xarray.h"
void *xa_load(struct xarray *, unsigned long index);
void *xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *xa_erase(struct xarray *, unsigned long index);
void *xa_store_range(struct xarray *, unsigned long first, unsigned long last,
   void *entry, gfp_t);
bool xa_get_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
void *xa_find(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
void *xa_find_after(struct xarray *xa, unsigned long *index,
  unsigned long max, xa_mark_t) __attribute__((nonnull(2)));
unsigned int xa_extract(struct xarray *, void **dst, unsigned long start,
  unsigned long max, unsigned int n, xa_mark_t);
void xa_destroy(struct xarray *);
# 374 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init_flags(struct xarray *xa, gfp_t flags)
{
 do { spinlock_check(&xa->xa_lock); do { *(&(&xa->xa_lock)->rlock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0); } while (0);
 xa->xa_flags = flags;
 xa->xa_head = ((void *)0);
}
# 389 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_init(struct xarray *xa)
{
 xa_init_flags(xa, 0);
}
# 401 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_empty(const struct xarray *xa)
{
 return xa->xa_head == ((void *)0);
}
# 414 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_marked(const struct xarray *xa, xa_mark_t mark)
{
 return xa->xa_flags & (( gfp_t)((1U << (23 + 0)) << ( unsigned)(mark)));
}
# 519 "../include/linux/xarray.h"
void *__xa_erase(struct xarray *, unsigned long index);
void *__xa_store(struct xarray *, unsigned long index, void *entry, gfp_t);
void *__xa_cmpxchg(struct xarray *, unsigned long index, void *old,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_insert(struct xarray *, unsigned long index,
  void *entry, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc(struct xarray *, u32 *id, void *entry,
  struct xa_limit, gfp_t);
int __attribute__((__warn_unused_result__)) __xa_alloc_cyclic(struct xarray *, u32 *id, void *entry,
  struct xa_limit, u32 *next, gfp_t);
void __xa_set_mark(struct xarray *, unsigned long index, xa_mark_t);
void __xa_clear_mark(struct xarray *, unsigned long index, xa_mark_t);
# 546 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_bh(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 572 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_store_irq(struct xarray *xa, unsigned long index,
  void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_store(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 597 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_bh(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_bh(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_bh(&(xa)->xa_lock);

 return entry;
}
# 621 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_erase_irq(struct xarray *xa, unsigned long index)
{
 void *entry;

 spin_lock_irq(&(xa)->xa_lock);
 entry = __xa_erase(xa, index);
 spin_unlock_irq(&(xa)->xa_lock);

 return entry;
}
# 647 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return curr;
}
# 674 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_bh(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_bh(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return curr;
}
# 701 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_cmpxchg_irq(struct xarray *xa, unsigned long index,
   void *old, void *entry, gfp_t gfp)
{
 void *curr;

 spin_lock_irq(&(xa)->xa_lock);
 curr = __xa_cmpxchg(xa, index, old, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return curr;
}
# 730 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 759 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_bh(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 788 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_insert_irq(struct xarray *xa,
  unsigned long index, void *entry, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_insert(xa, index, entry, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 817 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) int xa_alloc(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 846 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_bh(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 875 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) xa_alloc_irq(struct xarray *xa, u32 *id,
  void *entry, struct xa_limit limit, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc(xa, id, entry, limit, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 908 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock(&(xa)->xa_lock);

 return err;
}
# 941 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_bh(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_bh(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_bh(&(xa)->xa_lock);

 return err;
}
# 974 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xa_alloc_cyclic_irq(struct xarray *xa, u32 *id, void *entry,
  struct xa_limit limit, u32 *next, gfp_t gfp)
{
 int err;

 spin_lock_irq(&(xa)->xa_lock);
 err = __xa_alloc_cyclic(xa, id, entry, limit, next, gfp);
 spin_unlock_irq(&(xa)->xa_lock);

 return err;
}
# 1004 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1022 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_bh(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_bh(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1040 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
int xa_reserve_irq(struct xarray *xa, unsigned long index, gfp_t gfp)
{
 return xa_err(xa_cmpxchg_irq(xa, index, ((void *)0), xa_mk_internal(257), gfp));
}
# 1055 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xa_release(struct xarray *xa, unsigned long index)
{
 xa_cmpxchg(xa, index, xa_mk_internal(257), ((void *)0), 0);
}
# 1087 "../include/linux/xarray.h"
struct xa_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char nr_values;
 struct xa_node *parent;
 struct xarray *array;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 union {
  unsigned long tags[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
  unsigned long marks[3][((((1UL << (0 ? 4 : 6))) + (64) - 1) / (64))];
 };
};

void xa_dump(const struct xarray *);
void xa_dump_node(const struct xa_node *);
# 1127 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head(const struct xarray *xa)
{
 return ({ typeof(*(xa->xa_head)) *________p1 = (typeof(*(xa->xa_head)) *)({ union { typeof((xa->xa_head)) __val; char __c[1]; } __u; if (1) __read_once_size(&((xa->xa_head)), __u.__c, sizeof((xa->xa_head))); else __read_once_size_nocheck(&((xa->xa_head)), __u.__c, sizeof((xa->xa_head))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(xa->xa_head)) *)(________p1)); });

}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_head_locked(const struct xarray *xa)
{
 return ({ do { } while (0); ; ((typeof(*(xa->xa_head)) *)((xa->xa_head))); });

}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ typeof(*(node->slots[offset])) *________p1 = (typeof(*(node->slots[offset])) *)({ union { typeof((node->slots[offset])) __val; char __c[1]; } __u; if (1) __read_once_size(&((node->slots[offset])), __u.__c, sizeof((node->slots[offset]))); else __read_once_size_nocheck(&((node->slots[offset])), __u.__c, sizeof((node->slots[offset]))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(node->slots[offset])) *)(________p1)); });

}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_entry_locked(const struct xarray *xa,
    const struct xa_node *node, unsigned int offset)
{
 do { } while (0);
 return ({ do { } while (0); ; ((typeof(*(node->slots[offset])) *)((node->slots[offset]))); });

}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ typeof(*(node->parent)) *________p1 = (typeof(*(node->parent)) *)({ union { typeof((node->parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((node->parent)), __u.__c, sizeof((node->parent))); else __read_once_size_nocheck(&((node->parent)), __u.__c, sizeof((node->parent))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(node->parent)) *)(________p1)); });

}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_parent_locked(const struct xarray *xa,
     const struct xa_node *node)
{
 return ({ do { } while (0); ; ((typeof(*(node->parent)) *)((node->parent))); });

}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_node(const struct xa_node *node)
{
 return (void *)((unsigned long)node | 2);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xa_node *xa_to_node(const void *entry)
{
 return (struct xa_node *)((unsigned long)entry - 2);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_node(const void *entry)
{
 return xa_is_internal(entry) && (unsigned long)entry > 4096;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xa_mk_sibling(unsigned int offset)
{
 return xa_mk_internal(offset);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long xa_to_sibling(const void *entry)
{
 return xa_to_internal(entry);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_sibling(const void *entry)
{
 return 1 && xa_is_internal(entry) &&
  (entry < xa_mk_sibling((1UL << (0 ? 4 : 6)) - 1));
}
# 1224 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_retry(const void *entry)
{
 return __builtin_expect(!!(entry == xa_mk_internal(256)), 0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xa_is_advanced(const void *entry)
{
 return xa_is_internal(entry) && (entry <= xa_mk_internal(256));
}
# 1252 "../include/linux/xarray.h"
typedef void (*xa_update_node_t)(struct xa_node *node);
# 1271 "../include/linux/xarray.h"
struct xa_state {
 struct xarray *xa;
 unsigned long xa_index;
 unsigned char xa_shift;
 unsigned char xa_sibs;
 unsigned char xa_offset;
 unsigned char xa_pad;
 struct xa_node *xa_node;
 struct xa_node *xa_alloc;
 xa_update_node_t xa_update;
};
# 1350 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int xas_error(const struct xa_state *xas)
{
 return xa_err(xas->xa_node);
}
# 1364 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_err(struct xa_state *xas, long err)
{
 xas->xa_node = ((struct xa_node *)(((unsigned long)err << 2) | 2UL));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_invalid(const struct xa_state *xas)
{
 return (unsigned long)xas->xa_node & 3;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_valid(const struct xa_state *xas)
{
 return !xas_invalid(xas);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_is_node(const struct xa_state *xas)
{
 return xas_valid(xas) && xas->xa_node;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_not_node(struct xa_node *node)
{
 return ((unsigned long)node & 3) || !node;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_frozen(struct xa_node *node)
{
 return (unsigned long)node & 2;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_top(struct xa_node *node)
{
 return node <= ((struct xa_node *)3UL);
}
# 1430 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_reset(struct xa_state *xas)
{
 xas->xa_node = ((struct xa_node *)3UL);
}
# 1447 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool xas_retry(struct xa_state *xas, const void *entry)
{
 if (xa_is_zero(entry))
  return true;
 if (!xa_is_retry(entry))
  return false;
 xas_reset(xas);
 return true;
}

void *xas_load(struct xa_state *);
void *xas_store(struct xa_state *, void *entry);
void *xas_find(struct xa_state *, unsigned long max);
void *xas_find_conflict(struct xa_state *);

bool xas_get_mark(const struct xa_state *, xa_mark_t);
void xas_set_mark(const struct xa_state *, xa_mark_t);
void xas_clear_mark(const struct xa_state *, xa_mark_t);
void *xas_find_marked(struct xa_state *, unsigned long max, xa_mark_t);
void xas_init_marks(const struct xa_state *);

bool xas_nomem(struct xa_state *, gfp_t);
void xas_pause(struct xa_state *);

void xas_create_range(struct xa_state *);
# 1487 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_reload(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (node)
  return xa_entry(xas->xa, node, xas->xa_offset);
 return xa_head(xas->xa);
}
# 1505 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set(struct xa_state *xas, unsigned long index)
{
 xas->xa_index = index;
 xas->xa_node = ((struct xa_node *)3UL);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_order(struct xa_state *xas, unsigned long index,
     unsigned int order)
{

 xas->xa_index = order < 64 ? (index >> order) << order : 0;
 xas->xa_shift = order - (order % (0 ? 4 : 6));
 xas->xa_sibs = (1 << (order % (0 ? 4 : 6))) - 1;
 xas->xa_node = ((struct xa_node *)3UL);




}
# 1539 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void xas_set_update(struct xa_state *xas, xa_update_node_t update)
{
 xas->xa_update = update;
}
# 1555 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_entry(struct xa_state *xas, unsigned long max)
{
 struct xa_node *node = xas->xa_node;
 void *entry;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset != (xas->xa_index & ((1UL << (0 ? 4 : 6)) - 1))), 0))

  return xas_find(xas, max);

 do {
  if (__builtin_expect(!!(xas->xa_index >= max), 0))
   return xas_find(xas, max);
  if (__builtin_expect(!!(xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))
   return xas_find(xas, max);
  entry = xa_entry(xas->xa, node, xas->xa_offset + 1);
  if (__builtin_expect(!!(xa_is_internal(entry)), 0))
   return xas_find(xas, max);
  xas->xa_offset++;
  xas->xa_index++;
 } while (!entry);

 return entry;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int xas_find_chunk(struct xa_state *xas, bool advance,
  xa_mark_t mark)
{
 unsigned long *addr = xas->xa_node->marks[( unsigned)mark];
 unsigned int offset = xas->xa_offset;

 if (advance)
  offset++;
 if ((1UL << (0 ? 4 : 6)) == 64) {
  if (offset < (1UL << (0 ? 4 : 6))) {
   unsigned long data = *addr & (~0UL << offset);
   if (data)
    return __ffs(data);
  }
  return (1UL << (0 ? 4 : 6));
 }

 return find_next_bit(addr, (1UL << (0 ? 4 : 6)), offset);
}
# 1612 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next_marked(struct xa_state *xas, unsigned long max,
        xa_mark_t mark)
{
 struct xa_node *node = xas->xa_node;
 unsigned int offset;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift), 0))
  return xas_find_marked(xas, max, mark);
 offset = xas_find_chunk(xas, true, mark);
 xas->xa_offset = offset;
 xas->xa_index = (xas->xa_index & ~((1UL << (0 ? 4 : 6)) - 1)) + offset;
 if (xas->xa_index > max)
  return ((void *)0);
 if (offset == (1UL << (0 ? 4 : 6)))
  return xas_find_marked(xas, max, mark);
 return xa_entry(xas->xa, node, offset);
}





enum {
 XA_CHECK_SCHED = 4096,
};
# 1689 "../include/linux/xarray.h"
void *__xas_next(struct xa_state *);
void *__xas_prev(struct xa_state *);
# 1708 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_prev(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == 0), 0))

  return __xas_prev(xas);

 xas->xa_index--;
 xas->xa_offset--;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 1737 "../include/linux/xarray.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xas_next(struct xa_state *xas)
{
 struct xa_node *node = xas->xa_node;

 if (__builtin_expect(!!(xas_not_node(node) || node->shift || xas->xa_offset == ((1UL << (0 ? 4 : 6)) - 1)), 0))

  return __xas_next(xas);

 xas->xa_index++;
 xas->xa_offset++;
 return xa_entry(xas->xa, node, xas->xa_offset);
}
# 19 "../include/linux/radix-tree.h" 2
# 43 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    2UL;
}
# 74 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool radix_tree_empty(const struct xarray *root)
{
 return root->xa_head == ((void *)0);
}
# 94 "../include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct xa_node *node;
};
# 165 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ union { typeof((*slot)) __val; char __c[1]; } __u; if (1) __read_once_size(&((*slot)), __u.__c, sizeof((*slot))); else __read_once_size_nocheck(&((*slot)), __u.__c, sizeof((*slot))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 179 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 192 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int radix_tree_insert(struct xarray *, unsigned long index,
   void *);
void *__radix_tree_lookup(const struct xarray *, unsigned long index,
     struct xa_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct xarray *, unsigned long);
void **radix_tree_lookup_slot(const struct xarray *,
     unsigned long index);
void __radix_tree_replace(struct xarray *, struct xa_node *,
     void **slot, void *entry);
void radix_tree_iter_replace(struct xarray *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct xarray *,
        void **slot, void *entry);
void radix_tree_iter_delete(struct xarray *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
void *radix_tree_delete(struct xarray *, unsigned long);
unsigned int radix_tree_gang_lookup(const struct xarray *,
   void **results, unsigned long first_index,
   unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct xarray *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct xarray *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct xarray *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_clear(struct xarray *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct xarray *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct xarray *, unsigned int tag);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void radix_tree_preload_end(void)
{
 __asm__ __volatile__("" : : : "memory");
}

void **idr_get_free(struct xarray *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 268 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 279 "../include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 297 "../include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct xarray *,
        struct radix_tree_iter *iter, unsigned flags);
# 310 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void **
radix_tree_iter_lookup(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 328 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void **
radix_tree_iter_find(const struct xarray *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, 0);
}
# 345 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + slots;
}
# 369 "../include/linux/radix-tree.h"
void **__attribute__((__warn_unused_result__)) radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
# 403 "../include/linux/radix-tree.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 return slot;
}
# 16 "../include/linux/idr.h" 2



struct idr {
 struct xarray idr_rt;
 unsigned int idr_base;
 unsigned int idr_next;
};
# 66 "../include/linux/idr.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u; if (1) __read_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); else __read_once_size_nocheck(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); do { } while (0); __u.__val; });
}
# 79 "../include/linux/idr.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u = { .__val = ( typeof(idr->idr_next)) (val) }; __write_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); __u.__val; });
}
# 112 "../include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc(struct idr *, void *ptr, int start, int end, gfp_t);
int __attribute__((__warn_unused_result__)) idr_alloc_u32(struct idr *, void *ptr, u32 *id,
    unsigned long max, gfp_t);
int idr_alloc_cyclic(struct idr *, void *ptr, int start, int end, gfp_t);
void *idr_remove(struct idr *, unsigned long id);
void *idr_find(const struct idr *, unsigned long id);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ul(struct idr *, unsigned long *nextid);
void *idr_replace(struct idr *, void *, unsigned long id);
void idr_destroy(struct idr *);
# 135 "../include/linux/idr.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init_base(struct idr *idr, int base)
{
 xa_init_flags(&idr->idr_rt, ((( gfp_t)4) | ( gfp_t) (1 << (((23 + 0)) + 0))));
 idr->idr_base = base;
 idr->idr_next = 0;
}
# 149 "../include/linux/idr.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_init(struct idr *idr)
{
 idr_init_base(idr, 0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void idr_preload_end(void)
{
 __asm__ __volatile__("" : : : "memory");
}
# 240 "../include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

struct ida {
 struct xarray xa;
};
# 255 "../include/linux/idr.h"
int ida_alloc_range(struct ida *, unsigned int min, unsigned int max, gfp_t);
void ida_free(struct ida *, unsigned int id);
void ida_destroy(struct ida *ida);
# 270 "../include/linux/idr.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc(struct ida *ida, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, ~0, gfp);
}
# 287 "../include/linux/idr.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_min(struct ida *ida, unsigned int min, gfp_t gfp)
{
 return ida_alloc_range(ida, min, ~0, gfp);
}
# 304 "../include/linux/idr.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ida_alloc_max(struct ida *ida, unsigned int max, gfp_t gfp)
{
 return ida_alloc_range(ida, 0, max, gfp);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ida_init(struct ida *ida)
{
 xa_init_flags(&ida->xa, ((( gfp_t)XA_LOCK_IRQ) | ((( gfp_t)4U) | (( gfp_t)((1U << (23 + 0)) << ( unsigned)((( xa_mark_t)0U)))))));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ida_is_empty(const struct ida *ida)
{
 return xa_empty(&ida->xa);
}
# 14 "../include/linux/kernfs.h" 2






struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;
struct fs_context;

struct kernfs_fs_context;
struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};




enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 74 "../include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};


union kernfs_node_id {
 struct {






  u32 ino;
  u32 generation;
 };
 u64 id;
};
# 131 "../include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 143 "../include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;

 union kernfs_node_id id;
 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 171 "../include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 next_generation;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 238 "../include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 254 "../include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);




};




struct kernfs_fs_context {
 struct kernfs_root *root;
 void *ns_tag;
 unsigned long magic;


 bool new_sb_created;
};



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}
# 302 "../include/linux/kernfs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/kernfs.h\"; .popsection; .long 14472b - 14470b; .short 304; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(!(({ union { typeof((&kn->dir.children)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); else __read_once_size_nocheck(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/kernfs.h\"; .popsection; .long 14472b - 14470b; .short 305; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name, umode_t mode,
      kuid_t uid, kgid_t gid,
      loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
__poll_t kernfs_generic_poll(struct kernfs_open_file *of,
        struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

int kernfs_xattr_get(struct kernfs_node *kn, const char *name,
       void *value, size_t size);
int kernfs_xattr_set(struct kernfs_node *kn, const char *name,
       const void *value, size_t size, int flags);

const void *kernfs_super_ns(struct super_block *sb);
int kernfs_get_tree(struct fs_context *fc);
void kernfs_free_fs_context(struct fs_context *fc);
void kernfs_kill_sb(struct super_block *sb);

void kernfs_init(void);

struct kernfs_node *kernfs_get_node_by_id(struct kernfs_root *root,
 const union kernfs_node_id *id);
# 514 "../include/linux/kernfs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode,
        (kuid_t){ 0 }, (kgid_t){ 0 },
        priv, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, kuid_t uid, kgid_t gid,
        loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = ((void *)0);




 return __kernfs_create_file(parent, name, mode, uid, gid,
        size, ops, priv, ns, key);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode,
         (kuid_t){ 0 }, (kgid_t){ 0 },
         size, ops, priv, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}
# 17 "../include/linux/sysfs.h" 2




# 1 "../include/linux/kobject_ns.h" 1
# 19 "../include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 39 "../include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "../include/linux/sysfs.h" 2



struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 84 "../include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 158 "../include/linux/sysfs.h"
struct file;
struct vm_area_struct;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 223 "../include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int __attribute__((__warn_unused_result__)) sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((__warn_unused_result__)) sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int __attribute__((__warn_unused_result__)) sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int __attribute__((__warn_unused_result__)) sysfs_create_files(struct kobject *kobj,
       const struct attribute * const *attr);
int __attribute__((__warn_unused_result__)) sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute * const *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int __attribute__((__warn_unused_result__)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int __attribute__((__warn_unused_result__)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int __attribute__((__warn_unused_result__)) sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int __attribute__((__warn_unused_result__)) sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int __attribute__((__warn_unused_result__)) sysfs_update_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int __compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
          struct kobject *target_kobj,
          const char *target_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int __attribute__((__warn_unused_result__)) sysfs_init(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}
# 527 "../include/linux/sysfs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 21 "../include/linux/kobject.h" 2


# 1 "../include/linux/kref.h" 1
# 19 "../include/linux/kref.h"
struct kref {
 refcount_t refcount;
};







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kref_get(struct kref *kref)
{
 refcount_inc_checked(&kref->refcount);
}
# 62 "../include/linux/kref.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test_checked(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 109 "../include/linux/kref.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero_checked(&kref->refcount);
}
# 24 "../include/linux/kobject.h" 2
# 41 "../include/linux/kobject.h"
extern u64 uevent_seqnum;
# 53 "../include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
 KOBJ_MAX
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((__format__(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((__format__(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((__format__(printf, 3, 4))) __attribute__((__warn_unused_result__))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((__format__(printf, 4, 5))) __attribute__((__warn_unused_result__))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create(void);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int __attribute__((__warn_unused_result__)) kobject_rename(struct kobject *, const char *new_name);
extern int __attribute__((__warn_unused_result__)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * __attribute__((__warn_unused_result__)) kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern void kobject_get_ownership(struct kobject *kobj,
      kuid_t *uid, kgid_t *gid);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 132 "../include/linux/kobject.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kobject_has_children(struct kobject *kobj)
{
 ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/kobject.h\"; .popsection; .long 14472b - 14470b; .short 134; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct attribute_group **default_groups;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
 void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[32];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 193 "../include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int __attribute__((__warn_unused_result__)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((__warn_unused_result__)) kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_209(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_209(); } while (0); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((__format__(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 18 "../include/linux/module.h" 2
# 1 "../include/linux/moduleparam.h" 1
# 36 "../include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 236 "../include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 300 "../include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 310 "../include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 339 "../include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 447 "../include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 508 "../include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 19 "../include/linux/module.h" 2


# 1 "../include/linux/rbtree_latch.h" 1
# 40 "../include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_t seq;
 struct rb_root tree[2];
};
# 64 "../include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); do { extern void __compiletime_assert_72(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) && !__builtin_types_compatible_p(typeof(*(node)), typeof(void))))) __compiletime_assert_72(); } while (0); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ union { typeof(ltr->tree[idx].rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&(ltr->tree[idx].rb_node), __u.__c, sizeof(ltr->tree[idx].rb_node)); else __read_once_size_nocheck(&(ltr->tree[idx].rb_node), __u.__c, sizeof(ltr->tree[idx].rb_node)); do { } while (0); __u.__val; }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ union { typeof(node->rb_left) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->rb_left), __u.__c, sizeof(node->rb_left)); else __read_once_size_nocheck(&(node->rb_left), __u.__c, sizeof(node->rb_left)); do { } while (0); __u.__val; }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ union { typeof(node->rb_right) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->rb_right), __u.__c, sizeof(node->rb_right)); else __read_once_size_nocheck(&(node->rb_right), __u.__c, sizeof(node->rb_right)); do { } while (0); __u.__val; }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 143 "../include/linux/rbtree_latch.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 170 "../include/linux/rbtree_latch.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 199 "../include/linux/rbtree_latch.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_retry(&root->seq, seq));

 return node;
}
# 22 "../include/linux/module.h" 2
# 1 "../include/linux/error-injection.h" 1





# 1 "../include/asm-generic/error-injection.h" 1





enum {
 EI_ETYPE_NONE,
 EI_ETYPE_NULL,
 EI_ETYPE_ERRNO,
 EI_ETYPE_ERRNO_NULL,
 EI_ETYPE_TRUE,
};

struct error_injection_entry {
 unsigned long addr;
 int etype;
};

struct pt_regs;
# 38 "../include/asm-generic/error-injection.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void override_function_with_return(struct pt_regs *regs) { }
# 7 "../include/linux/error-injection.h" 2








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_error_injection_list(unsigned long addr)
{
 return false;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_injectable_error_type(unsigned long addr)
{
 return EI_ETYPE_NONE;
}
# 23 "../include/linux/module.h" 2
# 1 "../include/linux/tracepoint-defs.h" 1
# 12 "../include/linux/tracepoint-defs.h"
# 1 "../include/linux/static_key.h" 1
# 13 "../include/linux/tracepoint-defs.h" 2

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};


typedef const int tracepoint_ptr_t;




struct bpf_raw_event_map {
 struct tracepoint *tp;
 void *bpf_func;
 u32 num_args;
 u32 writable_size;
} __attribute__((__aligned__(32)));
# 24 "../include/linux/module.h" 2



# 1 "../arch/arm64/include/asm/module.h" 1







# 1 "../include/asm-generic/module.h" 1
# 9 "../arch/arm64/include/asm/module.h" 2




struct mod_plt_sec {
 int plt_shndx;
 int plt_num_entries;
 int plt_max_entries;
};

struct mod_arch_specific {
 struct mod_plt_sec core;
 struct mod_plt_sec init;


 struct plt_entry *ftrace_trampoline;
};


u64 module_emit_plt_entry(struct module *mod, Elf64_Shdr *sechdrs,
     void *loc, const Elf64_Rela *rela,
     Elf64_Sym *sym);

u64 module_emit_veneer_for_adrp(struct module *mod, Elf64_Shdr *sechdrs,
    void *loc, u64 val);


extern u64 module_alloc_base;




struct plt_entry {
# 50 "../arch/arm64/include/asm/module.h"
 __le32 adrp;
 __le32 add;
 __le32 br;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_forbidden_offset_for_adrp(void *place)
{
 return 1 &&
        cpus_have_const_cap(26) &&
        ((u64)place & 0xfff) >= 0xff8;
}

struct plt_entry get_plt_entry(u64 dst, void *pc);
bool plt_entries_equal(const struct plt_entry *a, const struct plt_entry *b);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool plt_entry_is_initialized(const struct plt_entry *e)
{
 return e->adrp || e->add || e->br;
}
# 28 "../include/linux/module.h" 2
# 37 "../include/linux/module.h"
struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
} __attribute__ ((__aligned__(sizeof(void *))));

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 281 "../include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 334 "../include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
 char *typetab;
};
# 350 "../include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];


 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;



 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;



 const struct kernel_symbol *unused_syms;
 const s32 *unused_crcs;
 unsigned int num_unused_syms;


 unsigned int num_unused_gpl_syms;
 const struct kernel_symbol *unused_gpl_syms;
 const s32 *unused_gpl_crcs;







 bool async_probe_requested;


 const struct kernel_symbol *gpl_future_syms;
 const s32 *gpl_future_crcs;
 unsigned int num_gpl_future_syms;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << (6)))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;







 unsigned int num_srcu_structs;
 struct srcu_struct **srcu_struct_ptrs;






 struct jump_entry *jump_entries;
 unsigned int num_jump_entries;
# 493 "../include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;
# 513 "../include/linux/module.h"
} __attribute__((__aligned__((1 << (6))))) ;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long kallsyms_symbol_value(const Elf64_Sym *sym)
{
 return sym->st_value;
}


extern struct mutex module_mutex;




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);

struct symsearch {
 const struct kernel_symbol *start, *stop;
 const s32 *crcs;
 enum {
  NOT_GPL_ONLY,
  GPL_ONLY,
  WILL_BE_GPL_ONLY,
 } licence;
 bool unused;
};






const struct kernel_symbol *find_symbol(const char *name,
     struct module **owner,
     const s32 **crc,
     bool gplok,
     bool warn);






bool each_symbol_section(bool (*fn)(const struct symsearch *arr,
        struct module *owner,
        void *data), void *data);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);

extern void __attribute__((__noreturn__)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 642 "../include/linux/module.h"
int ref_module(struct module *a, struct module *b);
# 652 "../include/linux/module.h"
void *dereference_module_function_descriptor(struct module *mod, void *ptr);




const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_livepatch_module(struct module *mod)
{
 return false;
}


bool is_module_sig_enforced(void);
void set_module_sig_enforced(void);
# 840 "../include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 852 "../include/linux/module.h"
extern void set_all_modules_text_rw(void);
extern void set_all_modules_text_ro(void);
extern void module_enable_ro(const struct module *mod, bool after_init);
extern void module_disable_ro(const struct module *mod);
# 864 "../include/linux/module.h"
void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 881 "../include/linux/module.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool retpoline_module_ok(bool has_retpoline)
{
 return true;
}
# 893 "../include/linux/module.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool module_sig_ok(struct module *module)
{
 return true;
}
# 27 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../include/linux/pci.h" 1
# 27 "../include/linux/pci.h"
# 1 "../include/linux/mod_devicetable.h" 1
# 13 "../include/linux/mod_devicetable.h"
# 1 "../include/linux/uuid.h" 1
# 11 "../include/linux/uuid.h"
# 1 "../include/uapi/linux/uuid.h" 1
# 23 "../include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 35 "../include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 12 "../include/linux/uuid.h" 2




typedef struct {
 __u8 b[16];
} uuid_t;
# 33 "../include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void guid_copy(guid_t *dst, const guid_t *src)
{
 memcpy(dst, src, sizeof(guid_t));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 memcpy(dst, src, sizeof(uuid_t));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool __attribute__((__warn_unused_result__)) uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 14 "../include/linux/mod_devicetable.h" 2
typedef unsigned long kernel_ulong_t;
# 38 "../include/linux/mod_devicetable.h"
struct pci_device_id {
 __u32 vendor, device;
 __u32 subvendor, subdevice;
 __u32 class, class_mask;
 kernel_ulong_t driver_data;
};







struct ieee1394_device_id {
 __u32 match_flags;
 __u32 vendor_id;
 __u32 model_id;
 __u32 specifier_id;
 __u32 version;
 kernel_ulong_t driver_data;
};
# 121 "../include/linux/mod_devicetable.h"
struct usb_device_id {

 __u16 match_flags;


 __u16 idVendor;
 __u16 idProduct;
 __u16 bcdDevice_lo;
 __u16 bcdDevice_hi;


 __u8 bDeviceClass;
 __u8 bDeviceSubClass;
 __u8 bDeviceProtocol;


 __u8 bInterfaceClass;
 __u8 bInterfaceSubClass;
 __u8 bInterfaceProtocol;


 __u8 bInterfaceNumber;


 kernel_ulong_t driver_info
  __attribute__((aligned(sizeof(kernel_ulong_t))));
};
# 166 "../include/linux/mod_devicetable.h"
struct hid_device_id {
 __u16 bus;
 __u16 group;
 __u32 vendor;
 __u32 product;
 kernel_ulong_t driver_data;
};


struct ccw_device_id {
 __u16 match_flags;

 __u16 cu_type;
 __u16 dev_type;
 __u8 cu_model;
 __u8 dev_model;

 kernel_ulong_t driver_info;
};







struct ap_device_id {
 __u16 match_flags;
 __u8 dev_type;
 kernel_ulong_t driver_info;
};





struct css_device_id {
 __u8 match_flags;
 __u8 type;
 kernel_ulong_t driver_data;
};



struct acpi_device_id {
 __u8 id[9];
 kernel_ulong_t driver_data;
 __u32 cls;
 __u32 cls_msk;
};




struct pnp_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
};

struct pnp_card_device_id {
 __u8 id[8];
 kernel_ulong_t driver_data;
 struct {
  __u8 id[8];
 } devs[8];
};




struct serio_device_id {
 __u8 type;
 __u8 extra;
 __u8 id;
 __u8 proto;
};

struct hda_device_id {
 __u32 vendor_id;
 __u32 rev_id;
 __u8 api_version;
 const char *name;
 unsigned long driver_data;
};

struct sdw_device_id {
 __u16 mfg_id;
 __u16 part_id;
 kernel_ulong_t driver_data;
};




struct of_device_id {
 char name[32];
 char type[32];
 char compatible[128];
 const void *data;
};


struct vio_device_id {
 char type[32];
 char compat[32];
};



struct pcmcia_device_id {
 __u16 match_flags;

 __u16 manf_id;
 __u16 card_id;

 __u8 func_id;


 __u8 function;


 __u8 device_no;

 __u32 prod_id_hash[4];


 const char * prod_id[4];


 kernel_ulong_t driver_info;
 char * cisfile;
};
# 340 "../include/linux/mod_devicetable.h"
struct input_device_id {

 kernel_ulong_t flags;

 __u16 bustype;
 __u16 vendor;
 __u16 product;
 __u16 version;

 kernel_ulong_t evbit[0x1f / 64 + 1];
 kernel_ulong_t keybit[0x2ff / 64 + 1];
 kernel_ulong_t relbit[0x0f / 64 + 1];
 kernel_ulong_t absbit[0x3f / 64 + 1];
 kernel_ulong_t mscbit[0x07 / 64 + 1];
 kernel_ulong_t ledbit[0x0f / 64 + 1];
 kernel_ulong_t sndbit[0x07 / 64 + 1];
 kernel_ulong_t ffbit[0x7f / 64 + 1];
 kernel_ulong_t swbit[0x0f / 64 + 1];
 kernel_ulong_t propbit[0x1f / 64 + 1];

 kernel_ulong_t driver_info;
};






struct eisa_device_id {
 char sig[8];
 kernel_ulong_t driver_data;
};



struct parisc_device_id {
 __u8 hw_type;
 __u8 hversion_rev;
 __u16 hversion;
 __u32 sversion;
};
# 391 "../include/linux/mod_devicetable.h"
struct sdio_device_id {
 __u8 class;
 __u16 vendor;
 __u16 device;
 kernel_ulong_t driver_data;
};


struct ssb_device_id {
 __u16 vendor;
 __u16 coreid;
 __u8 revision;
 __u8 __pad;
} __attribute__((packed, aligned(2)));
# 413 "../include/linux/mod_devicetable.h"
struct bcma_device_id {
 __u16 manuf;
 __u16 id;
 __u8 rev;
 __u8 class;
} __attribute__((packed,aligned(2)));
# 427 "../include/linux/mod_devicetable.h"
struct virtio_device_id {
 __u32 device;
 __u32 vendor;
};





struct hv_vmbus_device_id {
 uuid_le guid;
 kernel_ulong_t driver_data;
};






struct rpmsg_device_id {
 char name[32];
};






struct i2c_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};






struct pci_epf_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 477 "../include/linux/mod_devicetable.h"
struct i3c_device_id {
 __u8 match_flags;
 __u8 dcr;
 __u16 manuf_id;
 __u16 part_id;
 __u16 extra_info;

 const void *data;
};






struct spi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};






struct slim_device_id {
 __u16 manf_id, prod_code;
 __u16 dev_index, instance;


 kernel_ulong_t driver_data;
};




struct apr_device_id {
 char name[32];
 __u32 domain_id;
 __u32 svc_id;
 __u32 svc_version;
 kernel_ulong_t driver_data;
};




struct spmi_device_id {
 char name[32];
 kernel_ulong_t driver_data;
};


enum dmi_field {
 DMI_NONE,
 DMI_BIOS_VENDOR,
 DMI_BIOS_VERSION,
 DMI_BIOS_DATE,
 DMI_SYS_VENDOR,
 DMI_PRODUCT_NAME,
 DMI_PRODUCT_VERSION,
 DMI_PRODUCT_SERIAL,
 DMI_PRODUCT_UUID,
 DMI_PRODUCT_SKU,
 DMI_PRODUCT_FAMILY,
 DMI_BOARD_VENDOR,
 DMI_BOARD_NAME,
 DMI_BOARD_VERSION,
 DMI_BOARD_SERIAL,
 DMI_BOARD_ASSET_TAG,
 DMI_CHASSIS_VENDOR,
 DMI_CHASSIS_TYPE,
 DMI_CHASSIS_VERSION,
 DMI_CHASSIS_SERIAL,
 DMI_CHASSIS_ASSET_TAG,
 DMI_STRING_MAX,
 DMI_OEM_STRING,
};

struct dmi_strmatch {
 unsigned char slot:7;
 unsigned char exact_match:1;
 char substr[79];
};

struct dmi_system_id {
 int (*callback)(const struct dmi_system_id *);
 const char *ident;
 struct dmi_strmatch matches[4];
 void *driver_data;
};
# 582 "../include/linux/mod_devicetable.h"
struct platform_device_id {
 char name[20];
 kernel_ulong_t driver_data;
};
# 609 "../include/linux/mod_devicetable.h"
struct mdio_device_id {
 __u32 phy_id;
 __u32 phy_id_mask;
};

struct zorro_device_id {
 __u32 id;
 kernel_ulong_t driver_data;
};






struct isapnp_device_id {
 unsigned short card_vendor, card_device;
 unsigned short vendor, function;
 kernel_ulong_t driver_data;
};
# 638 "../include/linux/mod_devicetable.h"
struct amba_id {
 unsigned int id;
 unsigned int mask;
 void *data;
};





struct mips_cdmm_device_id {
 __u8 type;
};
# 662 "../include/linux/mod_devicetable.h"
struct x86_cpu_id {
 __u16 vendor;
 __u16 family;
 __u16 model;
 __u16 feature;
 kernel_ulong_t driver_data;
};
# 683 "../include/linux/mod_devicetable.h"
struct cpu_feature {
 __u16 feature;
};



struct ipack_device_id {
 __u8 format;
 __u32 vendor;
 __u32 device;
};
# 708 "../include/linux/mod_devicetable.h"
struct mei_cl_device_id {
 char name[32];
 uuid_le uuid;
 __u8 version;
 kernel_ulong_t driver_info;
};
# 729 "../include/linux/mod_devicetable.h"
struct rio_device_id {
 __u16 did, vid;
 __u16 asm_did, asm_vid;
};

struct mcb_device_id {
 __u16 device;
 kernel_ulong_t driver_data;
};

struct ulpi_device_id {
 __u16 vendor;
 __u16 product;
 kernel_ulong_t driver_data;
};
# 753 "../include/linux/mod_devicetable.h"
struct fsl_mc_device_id {
 __u16 vendor;
 const char obj_type[16];
};
# 771 "../include/linux/mod_devicetable.h"
struct tb_service_id {
 __u32 match_flags;
 char protocol_key[8 + 1];
 __u32 protocol_id;
 __u32 protocol_version;
 __u32 protocol_revision;
 kernel_ulong_t driver_data;
};
# 795 "../include/linux/mod_devicetable.h"
struct typec_device_id {
 __u16 svid;
 __u8 mode;
 kernel_ulong_t driver_data;
};






struct tee_client_device_id {
 uuid_t uuid;
};
# 819 "../include/linux/mod_devicetable.h"
struct wmi_device_id {
 const char guid_string[36 +1];
 const void *context;
};
# 28 "../include/linux/pci.h" 2



# 1 "../include/linux/ioport.h" 1
# 20 "../include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 128 "../include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_RESERVED = 7,
};




enum {
 IORES_MAP_SYSTEM_RAM = ((((1UL))) << (0)),
 IORES_MAP_ENCRYPTED = ((((1UL))) << (1)),
};
# 178 "../include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}
# 237 "../include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);






struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern bool iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_mem_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(struct resource *, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(struct resource *, void *));


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return (r1->start <= r2->end && r1->end >= r2->start);
}

struct resource *devm_request_free_mem_region(struct device *dev,
  struct resource *base, unsigned long size);
struct resource *request_free_mem_region(struct resource *base,
  unsigned long size, const char *name);
# 32 "../include/linux/pci.h" 2





# 1 "../include/linux/device.h" 1
# 17 "../include/linux/device.h"
# 1 "../include/linux/klist.h" 1
# 17 "../include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 34 "../include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 18 "../include/linux/device.h" 2





# 1 "../include/linux/pm.h" 1
# 22 "../include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
# 42 "../include/linux/pm.h"
struct device;


extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 278 "../include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 496 "../include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 518 "../include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;

 struct list_head clock_list;


 struct pm_domain_data *domain_data;

};
# 573 "../include/linux/pm.h"
struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 u32 driver_flags;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;
 unsigned int must_resume:1;
 unsigned int may_skip_resume:1;




 struct hrtimer suspend_timer;
 unsigned long timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 u64 last_busy;
 u64 active_time;
 u64 suspended_time;
 u64 accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 649 "../include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 712 "../include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);

extern bool dev_pm_may_skip_resume(struct device *dev);
extern bool dev_pm_smart_suspend_and_suspended(struct device *dev);
# 806 "../include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 24 "../include/linux/device.h" 2

# 1 "../include/linux/ratelimit.h" 1
# 15 "../include/linux/ratelimit.h"
struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "../include/linux/ratelimit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { *(&rs->lock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 1000),
     10);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & ((((1UL))) << (0))))
  return;

 if (rs->missed) {
  printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed);

  rs->missed = 0;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;

extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 26 "../include/linux/device.h" 2


# 1 "../include/linux/overflow.h" 1
# 253 "../include/linux/overflow.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array_size(size_t a, size_t b)
{
 size_t bytes;

 if (({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);

 return bytes;
}
# 275 "../include/linux/overflow.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t array3_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);
 if (({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);

 return bytes;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) size_t __ab_c_size(size_t a, size_t b, size_t c)
{
 size_t bytes;

 if (({ typeof(a) __a = (a); typeof(b) __b = (b); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); }))
  return (~(size_t)0);
 if (({ typeof(bytes) __a = (bytes); typeof(c) __b = (c); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_add_overflow(__a, __b, __d); }))
  return (~(size_t)0);

 return bytes;
}
# 29 "../include/linux/device.h" 2
# 1 "../arch/arm64/include/asm/device.h" 1







struct dev_archdata {

 void *iommu;

};

struct pdev_archdata {
};
# 30 "../include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct bus_type;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct iommu_fwspec;
struct dev_pin_info;
struct iommu_param;

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 60 "../include/linux/device.h"
extern int __attribute__((__warn_unused_result__)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);
# 115 "../include/linux/device.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 int (*dma_configure)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

 bool need_parent_lock;
};

extern int __attribute__((__warn_unused_result__)) bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((__warn_unused_result__)) bus_rescan_devices(struct bus_type *bus);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int device_match_name(struct device *dev, const void *name);
int device_match_of_node(struct device *dev, const void *np);
int device_match_fwnode(struct device *dev, const void *fwnode);
int device_match_devt(struct device *dev, const void *pdevt);
int device_match_acpi_dev(struct device *dev, const void *adev);
int device_match_any(struct device *dev, const void *unused);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          const void *data,
          int (*match)(struct device *dev, const void *data));







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name)
{
 return bus_find_device(bus, start, name, device_match_name);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_of_node(struct bus_type *bus, const struct device_node *np)
{
 return bus_find_device(bus, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_fwnode(struct bus_type *bus, const struct fwnode_handle *fwnode)
{
 return bus_find_device(bus, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *bus_find_device_by_devt(struct bus_type *bus,
           dev_t devt)
{
 return bus_find_device(bus, ((void *)0), &devt, device_match_devt);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_next_device(struct bus_type *bus,struct device *cur)
{
 return bus_find_device(bus, cur, ((void *)0), device_match_any);
}


struct acpi_device;







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
bus_find_device_by_acpi_dev(struct bus_type *bus, const struct acpi_device *adev)
{
 return bus_find_device(bus, ((void *)0), adev, device_match_acpi_dev);
}
# 263 "../include/linux/device.h"
struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 299 "../include/linux/device.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 324 "../include/linux/device.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 368 "../include/linux/device.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;
 const struct attribute_group **dev_groups;

 const struct dev_pm_ops *pm;
 void (*coredump) (struct device *dev);

 struct driver_private *p;
};


extern int __attribute__((__warn_unused_result__)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);



struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 420 "../include/linux/device.h"
extern int __attribute__((__warn_unused_result__)) driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int __attribute__((__warn_unused_result__)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, const void *data,
      int (*match)(struct device *dev, const void *data));







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_name(struct device_driver *drv,
       const char *name)
{
 return driver_find_device(drv, ((void *)0), name, device_match_name);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_of_node(struct device_driver *drv,
         const struct device_node *np)
{
 return driver_find_device(drv, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_fwnode(struct device_driver *drv,
        const struct fwnode_handle *fwnode)
{
 return driver_find_device(drv, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_device_by_devt(struct device_driver *drv,
       dev_t devt)
{
 return driver_find_device(drv, ((void *)0), &devt, device_match_devt);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *driver_find_next_device(struct device_driver *drv,
           struct device *start)
{
 return driver_find_device(drv, start, ((void *)0), device_match_any);
}
# 497 "../include/linux/device.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
driver_find_device_by_acpi_dev(struct device_driver *drv,
          const struct acpi_device *adev)
{
 return driver_find_device(drv, ((void *)0), adev, device_match_acpi_dev);
}
# 511 "../include/linux/device.h"
void driver_deferred_probe_add(struct device *dev);
int driver_deferred_probe_check_state(struct device *dev);
int driver_deferred_probe_check_state_continue(struct device *dev);
# 528 "../include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 573 "../include/linux/device.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 void (*get_ownership)(struct device *dev, kuid_t *uid, kgid_t *gid);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((__warn_unused_result__)) __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 618 "../include/linux/device.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_name(struct class *class,
             const char *name)
{
 return class_find_device(class, ((void *)0), name, device_match_name);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_of_node(struct class *class, const struct device_node *np)
{
 return class_find_device(class, ((void *)0), np, device_match_of_node);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_fwnode(struct class *class,
       const struct fwnode_handle *fwnode)
{
 return class_find_device(class, ((void *)0), fwnode, device_match_fwnode);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *class_find_device_by_devt(struct class *class,
             dev_t devt)
{
 return class_find_device(class, ((void *)0), &devt, device_match_devt);
}


struct acpi_device;






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *
class_find_device_by_acpi_dev(struct class *class, const struct acpi_device *adev)
{
 return class_find_device(class, ((void *)0), adev, device_match_acpi_dev);
}
# 710 "../include/linux/device.h"
struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 725 "../include/linux/device.h"
extern int __attribute__((__warn_unused_result__)) class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 757 "../include/linux/device.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int __attribute__((__warn_unused_result__)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __attribute__((__warn_unused_result__)) __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 793 "../include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 855 "../include/linux/device.h"
extern int device_create_file(struct device *device,
         const struct device_attribute *entry);
extern void device_remove_file(struct device *dev,
          const struct device_attribute *attr);
extern bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
extern int __attribute__((__warn_unused_result__)) device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
extern void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);
# 878 "../include/linux/device.h"
extern void *devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
          int nid) __attribute__((__malloc__));
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devres_alloc(dr_release_t release, size_t size, gfp_t gfp)
{
 return devres_alloc_node(release, size, gfp, (-1));
}


extern void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
extern void devres_free(void *res);
extern void devres_add(struct device *dev, void *res);
extern void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
extern void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
extern void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
extern int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
extern int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


extern void * __attribute__((__warn_unused_result__)) devres_open_group(struct device *dev, void *id,
          gfp_t gfp);
extern void devres_close_group(struct device *dev, void *id);
extern void devres_remove_group(struct device *dev, void *id);
extern int devres_release_group(struct device *dev, void *id);


extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
extern __attribute__((__format__(printf, 3, 0)))
char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
        va_list ap) __attribute__((__malloc__));
extern __attribute__((__format__(printf, 3, 4)))
char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x100u));
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })), 0))
  return ((void *)0);

 return devm_kmalloc(dev, bytes, flags);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x100u));
}
extern void devm_kfree(struct device *dev, const void *p);
extern char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *devm_kstrdup_const(struct device *dev,
          const char *s, gfp_t gfp);
extern void *devm_kmemdup(struct device *dev, const void *src, size_t len,
     gfp_t gfp);

extern unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
extern void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);

void *devm_of_iomap(struct device *dev,
       struct device_node *node, int index,
       resource_size_t *size);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);
void devm_release_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 986 "../include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned long segment_boundary_mask;
};
# 1010 "../include/linux/device.h"
struct device_connection {
 struct fwnode_handle *fwnode;
 const char *endpoint[2];
 const char *id;
 struct list_head list;
};

typedef void *(*devcon_match_fn_t)(struct device_connection *con, int ep,
       void *data);

void *fwnode_connection_find_match(struct fwnode_handle *fwnode,
       const char *con_id, void *data,
       devcon_match_fn_t match);
void *device_connection_find_match(struct device *dev, const char *con_id,
       void *data, devcon_match_fn_t match);

struct device *device_connection_find(struct device *dev, const char *con_id);

void device_connection_add(struct device_connection *con);
void device_connection_remove(struct device_connection *con);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_connections_add(struct device_connection *cons)
{
 struct device_connection *c;

 for (c = cons; c->endpoint[0]; c++)
  device_connection_add(c);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_connections_remove(struct device_connection *cons)
{
 struct device_connection *c;

 for (c = cons; c->endpoint[0]; c++)
  device_connection_remove(c);
}
# 1064 "../include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 1105 "../include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 enum device_link_state status;
 u32 flags;
 refcount_t rpm_active;
 struct kref kref;

 struct callback_head callback_head;

 bool supplier_preactivated;
};
# 1127 "../include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};







struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 enum dl_dev_state status;
};
# 1229 "../include/linux/device.h"
struct device {
 struct kobject kobj;
 struct device *parent;

 struct device_private *p;

 const char *init_name;
 const struct device_type *type;

 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;




 struct mutex mutex;



 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct irq_domain *msi_domain;


 struct dev_pin_info *pins;


 struct list_head msi_list;


 const struct dma_map_ops *dma_ops;
 u64 *dma_mask;
 u64 coherent_dma_mask;




 u64 bus_dma_mask;
 unsigned long dma_pfn_offset;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;


 struct dma_coherent_mem *dma_mem;



 struct cma *cma_area;



 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;


 int numa_node;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct iommu_fwspec *iommu_fwspec;
 struct iommu_param *iommu_param;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;



 bool dma_coherent:1;

};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_1323(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_1323(); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_iommu_mapped(struct device *dev)
{
 return (dev->iommu_group != ((void *)0));
}



# 1 "../include/linux/pm_wakeup.h" 1
# 18 "../include/linux/pm_wakeup.h"
struct wake_irq;
# 43 "../include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_wakeup_path(struct device *dev)
{
 dev->power.wakeup_path = true;
}


extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard);
extern void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard);
# 186 "../include/linux/pm_wakeup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 1338 "../include/linux/device.h" 2

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}

extern __attribute__((__format__(printf, 2, 3)))
int dev_set_name(struct device *dev, const char *name, ...);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
# 1370 "../include/linux/device.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dev_pm_set_driver_flags(struct device *dev, u32 flags)
{
 dev->power.driver_flags = flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dev_pm_test_driver_flags(struct device *dev, u32 flags)
{
 return !!(dev->power.driver_flags & flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1 || !dev)
  return ((void *)0);
 return dev->of_node;
}

void driver_init(void);




extern int __attribute__((__warn_unused_result__)) device_register(struct device *dev);
extern void device_unregister(struct device *dev);
extern void device_initialize(struct device *dev);
extern int __attribute__((__warn_unused_result__)) device_add(struct device *dev);
extern void device_del(struct device *dev);
extern int device_for_each_child(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern int device_for_each_child_reverse(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern struct device *device_find_child(struct device *dev, void *data,
    int (*match)(struct device *dev, void *data));
extern struct device *device_find_child_by_name(struct device *parent,
      const char *name);
extern int device_rename(struct device *dev, const char *new_name);
extern int device_move(struct device *dev, struct device *new_parent,
         enum dpm_order dpm_order);
extern const char *device_get_devnode(struct device *dev,
          umode_t *mode, kuid_t *uid, kgid_t *gid,
          const char **tmp);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

extern void lock_device_hotplug(void);
extern void unlock_device_hotplug(void);
extern int lock_device_hotplug_sysfs(void);
extern int device_offline(struct device *dev);
extern int device_online(struct device *dev);
extern void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
extern void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




extern struct device *__root_device_register(const char *name,
          struct module *owner);





extern void root_device_unregister(struct device *root);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





extern int __attribute__((__warn_unused_result__)) device_bind_driver(struct device *dev);
extern void device_release_driver(struct device *dev);
extern int __attribute__((__warn_unused_result__)) device_attach(struct device *dev);
extern int __attribute__((__warn_unused_result__)) driver_attach(struct device_driver *drv);
extern void device_initial_probe(struct device *dev);
extern int __attribute__((__warn_unused_result__)) device_reprobe(struct device *dev);

extern bool device_is_bound(struct device *dev);




extern __attribute__((__format__(printf, 5, 0)))
struct device *device_create_vargs(struct class *cls, struct device *parent,
       dev_t devt, void *drvdata,
       const char *fmt, va_list vargs);
extern __attribute__((__format__(printf, 5, 6)))
struct device *device_create(struct class *cls, struct device *parent,
        dev_t devt, void *drvdata,
        const char *fmt, ...);
extern __attribute__((__format__(printf, 6, 7)))
struct device *device_create_with_groups(struct class *cls,
        struct device *parent, dev_t devt, void *drvdata,
        const struct attribute_group **groups,
        const char *fmt, ...);
extern void device_destroy(struct class *cls, dev_t devt);

extern int __attribute__((__warn_unused_result__)) device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

extern int __attribute__((__warn_unused_result__)) devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
extern int __attribute__((__warn_unused_result__)) devm_device_add_group(struct device *dev,
     const struct attribute_group *grp);
extern void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






extern struct device *get_device(struct device *dev);
extern void put_device(struct device *dev);
extern bool kill_device(struct device *dev);


extern int devtmpfs_create_node(struct device *dev);
extern int devtmpfs_delete_node(struct device *dev);
extern int devtmpfs_mount(const char *mntdir);







extern void device_shutdown(void);


extern const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);
void device_link_remove(void *consumer, struct device *supplier);







__attribute__((__format__(printf, 3, 0))) __attribute__((__cold__))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

__attribute__((__format__(printf, 3, 4))) __attribute__((__cold__))
void dev_printk(const char *level, const struct device *dev,
  const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_emerg(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_alert(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_crit(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_err(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_warn(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_notice(const struct device *dev, const char *fmt, ...);
__attribute__((__format__(printf, 2, 3))) __attribute__((__cold__))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 38 "../include/linux/pci.h" 2
# 1 "../include/linux/interrupt.h" 1








# 1 "../include/linux/irqreturn.h" 1
# 11 "../include/linux/irqreturn.h"
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;
# 10 "../include/linux/interrupt.h" 2

# 1 "../include/linux/hardirq.h" 1






# 1 "../include/linux/ftrace_irq.h" 1
# 10 "../include/linux/ftrace_irq.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_ftrace_nmi_enter(void) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_ftrace_nmi_exit(void) { }







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_enter(void)
{




 arch_ftrace_nmi_enter();
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ftrace_nmi_exit(void)
{
 arch_ftrace_nmi_exit();




}
# 8 "../include/linux/hardirq.h" 2
# 1 "../include/linux/vtime.h" 1




# 1 "../include/linux/context_tracking_state.h" 1





# 1 "../include/linux/static_key.h" 1
# 7 "../include/linux/context_tracking_state.h" 2

struct context_tracking {






 bool active;
 int recursion;
 enum ctx_state {
  CONTEXT_DISABLED = -1,
  CONTEXT_KERNEL = 0,
  CONTEXT_USER,
  CONTEXT_GUEST,
 } state;
};
# 44 "../include/linux/context_tracking_state.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_in_user(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_active(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_is_enabled(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool context_tracking_cpu_is_enabled(void) { return false; }
# 6 "../include/linux/vtime.h" 2





struct task_struct;
# 40 "../include/linux/vtime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vtime_accounting_cpu_enabled(void) { return false; }
# 65 "../include/linux/vtime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_task_switch(struct task_struct *prev) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_system(struct task_struct *tsk) { }
# 77 "../include/linux/vtime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_enter(struct task_struct *tsk) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_user_exit(struct task_struct *tsk) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_enter(struct task_struct *tsk) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_guest_exit(struct task_struct *tsk) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_init_idle(struct task_struct *tsk, int cpu) { }
# 93 "../include/linux/vtime.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_irq_enter(struct task_struct *tsk) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_account_irq_exit(struct task_struct *tsk) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vtime_flush(struct task_struct *tsk) { }




extern void irqtime_account_irq(struct task_struct *tsk);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_irq_enter_time(struct task_struct *tsk)
{
 vtime_account_irq_enter(tsk);
 irqtime_account_irq(tsk);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void account_irq_exit_time(struct task_struct *tsk)
{
 vtime_account_irq_exit(tsk);
 irqtime_account_irq(tsk);
}
# 9 "../include/linux/hardirq.h" 2
# 1 "../arch/arm64/include/asm/hardirq.h" 1
# 12 "../arch/arm64/include/asm/hardirq.h"
# 1 "../arch/arm64/include/asm/irq.h" 1






# 1 "../include/asm-generic/irq.h" 1
# 14 "../include/asm-generic/irq.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_canonicalize(int irq)
{
 return irq;
}
# 8 "../arch/arm64/include/asm/irq.h" 2

struct pt_regs;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int nr_legacy_irqs(void)
{
 return 0;
}
# 13 "../arch/arm64/include/asm/hardirq.h" 2
# 1 "../arch/arm64/include/asm/kvm_arm.h" 1
# 10 "../arch/arm64/include/asm/kvm_arm.h"
# 1 "../arch/arm64/include/asm/esr.h" 1
# 320 "../arch/arm64/include/asm/esr.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 321 "../arch/arm64/include/asm/esr.h" 2

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool esr_is_data_abort(u32 esr)
{
 const u32 ec = (((esr) & ((((0x3FUL))) << (26))) >> (26));

 return ec == (0x24) || ec == (0x25);
}

const char *esr_get_class_string(u32 esr);
# 11 "../arch/arm64/include/asm/kvm_arm.h" 2

# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 13 "../arch/arm64/include/asm/kvm_arm.h" 2
# 14 "../arch/arm64/include/asm/hardirq.h" 2




typedef struct {
 unsigned int __softirq_pending;
 unsigned int ipi_irqs[7];
} __attribute__((__aligned__((1 << (6))))) irq_cpustat_t;


# 1 "../include/linux/irq_cpustat.h" 1
# 21 "../include/linux/irq_cpustat.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << (6)))));
# 24 "../arch/arm64/include/asm/hardirq.h" 2




u64 smp_irq_stat_cpu(unsigned int cpu);




struct nmi_ctx {
 u64 hcr;
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct nmi_ctx) nmi_contexts;
# 60 "../arch/arm64/include/asm/hardirq.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ack_bad_irq(unsigned int irq)
{
 extern unsigned long irq_err_count;
 irq_err_count++;
}
# 10 "../include/linux/hardirq.h" 2


extern void synchronize_irq(unsigned int irq);
extern bool synchronize_hardirq(unsigned int irq);
# 26 "../include/linux/hardirq.h"
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
# 46 "../include/linux/hardirq.h"
extern void irq_enter(void);
# 61 "../include/linux/hardirq.h"
extern void irq_exit(void);
# 12 "../include/linux/interrupt.h" 2
# 87 "../include/linux/interrupt.h"
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
# 110 "../include/linux/interrupt.h"
struct irqaction {
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 struct irqaction *secondary;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 const char *name;
 struct proc_dir_entry *dir;
} __attribute__((__aligned__(1 << ((6)))));

extern irqreturn_t no_action(int cpl, void *dev_id);
# 138 "../include/linux/interrupt.h"
extern int __attribute__((__warn_unused_result__))
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, const char *name, void *dev);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev)
{
 return request_threaded_irq(irq, handler, ((void *)0), flags, name, dev);
}

extern int __attribute__((__warn_unused_result__))
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, const char *name, void *dev_id);

extern int __attribute__((__warn_unused_result__))
__request_percpu_irq(unsigned int irq, irq_handler_t handler,
       unsigned long flags, const char *devname,
       void *percpu_dev_id);

extern int __attribute__((__warn_unused_result__))
request_nmi(unsigned int irq, irq_handler_t handler, unsigned long flags,
     const char *name, void *dev);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     const char *devname, void *percpu_dev_id)
{
 return __request_percpu_irq(irq, handler, 0,
        devname, percpu_dev_id);
}

extern int __attribute__((__warn_unused_result__))
request_percpu_nmi(unsigned int irq, irq_handler_t handler,
     const char *devname, void *dev);

extern const void *free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

extern const void *free_nmi(unsigned int irq, void *dev_id);
extern void free_percpu_nmi(unsigned int irq, void *percpu_dev_id);

struct device;

extern int __attribute__((__warn_unused_result__))
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, const char *devname,
     void *dev_id);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, const char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, ((void *)0), irqflags,
      devname, dev_id);
}

extern int __attribute__((__warn_unused_result__))
devm_request_any_context_irq(struct device *dev, unsigned int irq,
   irq_handler_t handler, unsigned long irqflags,
   const char *devname, void *dev_id);

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
# 222 "../include/linux/interrupt.h"
extern void disable_irq_nosync(unsigned int irq);
extern bool disable_hardirq(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);
extern bool irq_percpu_is_enabled(unsigned int irq);
extern void irq_wake_thread(unsigned int irq, void *dev_id);

extern void disable_nmi_nosync(unsigned int irq);
extern void disable_percpu_nmi(unsigned int irq);
extern void enable_nmi(unsigned int irq);
extern void enable_percpu_nmi(unsigned int irq, unsigned int type);
extern int prepare_percpu_nmi(unsigned int irq);
extern void teardown_percpu_nmi(unsigned int irq);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);
extern void rearm_wake_irq(unsigned int irq);
# 255 "../include/linux/interrupt.h"
struct irq_affinity_notify {
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, const cpumask_t *mask);
 void (*release)(struct kref *ref);
};
# 279 "../include/linux/interrupt.h"
struct irq_affinity {
 unsigned int pre_vectors;
 unsigned int post_vectors;
 unsigned int nr_sets;
 unsigned int set_size[4];
 void (*calc_sets)(struct irq_affinity *, unsigned int nvecs);
 void *priv;
};






struct irq_affinity_desc {
 struct cpumask mask;
 unsigned int is_managed : 1;
};



extern cpumask_var_t irq_default_affinity;


extern int __irq_set_affinity(unsigned int irq, const struct cpumask *cpumask,
         bool force);
# 313 "../include/linux/interrupt.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
irq_set_affinity(unsigned int irq, const struct cpumask *cpumask)
{
 return __irq_set_affinity(irq, cpumask, false);
}
# 330 "../include/linux/interrupt.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
irq_force_affinity(unsigned int irq, const struct cpumask *cpumask)
{
 return __irq_set_affinity(irq, cpumask, true);
}

extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);

extern int irq_set_affinity_hint(unsigned int irq, const struct cpumask *m);

extern int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);

struct irq_affinity_desc *
irq_create_affinity_masks(unsigned int nvec, struct irq_affinity *affd);

unsigned int irq_calc_affinity_vectors(unsigned int minvec, unsigned int maxvec,
           const struct irq_affinity *affd);
# 407 "../include/linux/interrupt.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}




enum irqchip_irq_state {
 IRQCHIP_STATE_PENDING,
 IRQCHIP_STATE_ACTIVE,
 IRQCHIP_STATE_MASKED,
 IRQCHIP_STATE_LINE_LEVEL,
};

extern int irq_get_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool *state);
extern int irq_set_irqchip_state(unsigned int irq, enum irqchip_irq_state which,
     bool state);





extern bool force_irqthreads;
# 513 "../include/linux/interrupt.h"
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 IRQ_POLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,

 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern const char * const softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
 void (*action)(struct softirq_action *);
};

           void do_softirq(void);
           void __do_softirq(void);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_softirq_own_stack(void)
{
 __do_softirq();
}


extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof(ksoftirqd) pscr_ret__; do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(ksoftirqd)) { case 1: pscr_ret__ = ({ typeof(ksoftirqd) __retval; __asm__ __volatile__("" : : : "memory"); __retval = (typeof(ksoftirqd))__percpu_read_8(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((__my_cpu_offset()))); }); })); __asm__ __volatile__("" : : : "memory"); __retval; }); break; case 2: pscr_ret__ = ({ typeof(ksoftirqd) __retval; __asm__ __volatile__("" : : : "memory"); __retval = (typeof(ksoftirqd))__percpu_read_16(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((__my_cpu_offset()))); }); })); __asm__ __volatile__("" : : : "memory"); __retval; }); break; case 4: pscr_ret__ = ({ typeof(ksoftirqd) __retval; __asm__ __volatile__("" : : : "memory"); __retval = (typeof(ksoftirqd))__percpu_read_32(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((__my_cpu_offset()))); }); })); __asm__ __volatile__("" : : : "memory"); __retval; }); break; case 8: pscr_ret__ = ({ typeof(ksoftirqd) __retval; __asm__ __volatile__("" : : : "memory"); __retval = (typeof(ksoftirqd))__percpu_read_64(({ do { const void *__vpp_verify = (typeof((&(ksoftirqd)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd))); (typeof((typeof(*(&(ksoftirqd))) *)(&(ksoftirqd)))) (__ptr + ((__my_cpu_offset()))); }); })); __asm__ __volatile__("" : : : "memory"); __retval; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; });
}
# 592 "../include/linux/interrupt.h"
struct tasklet_struct
{
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 void (*func)(unsigned long);
 unsigned long data;
};
# 608 "../include/linux/interrupt.h"
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_unlock(struct tasklet_struct *t)
{
 asm volatile("dmb " "ish" : : : "memory");
 clear_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_unlock_wait(struct tasklet_struct *t)
{
 while (test_bit(TASKLET_STATE_RUN, &(t)->state)) { __asm__ __volatile__("" : : : "memory"); }
}






extern void __tasklet_schedule(struct tasklet_struct *t);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable_nosync(struct tasklet_struct *t)
{
 atomic_inc(&t->count);
 asm volatile("dmb " "ish" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 asm volatile("dmb " "ish" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tasklet_enable(struct tasklet_struct *t)
{
 asm volatile("dmb " "ish" : : : "memory");
 atomic_dec(&t->count);
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);
# 718 "../include/linux/interrupt.h"
extern unsigned long probe_irq_on(void);
extern int probe_irq_off(unsigned long);
extern unsigned int probe_irq_mask(unsigned long);




extern void init_irq_proc(void);
# 738 "../include/linux/interrupt.h"
struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);
# 39 "../include/linux/pci.h" 2
# 1 "../include/linux/io.h" 1
# 13 "../include/linux/io.h"
# 1 "../arch/arm64/include/asm/io.h" 1
# 16 "../arch/arm64/include/asm/io.h"
# 1 "../arch/arm64/include/asm/pgtable.h" 1








# 1 "../arch/arm64/include/asm/proc-fns.h" 1
# 16 "../arch/arm64/include/asm/proc-fns.h"
struct mm_struct;
struct cpu_suspend_ctx;

extern void cpu_do_idle(void);
extern void cpu_do_switch_mm(unsigned long pgd_phys, struct mm_struct *mm);
extern void cpu_do_suspend(struct cpu_suspend_ctx *ptr);
extern u64 cpu_do_resume(phys_addr_t ptr, u64 idmap_ttbr);
# 10 "../arch/arm64/include/asm/pgtable.h" 2



# 1 "../arch/arm64/include/asm/pgtable-prot.h" 1
# 14 "../arch/arm64/include/asm/pgtable.h" 2
# 1 "../arch/arm64/include/asm/tlbflush.h" 1
# 131 "../arch/arm64/include/asm/tlbflush.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void local_flush_tlb_all(void)
{
 asm volatile("dsb " "nshst" : : : "memory");
 asm ("tlbi " "vmalle1" "\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vmalle1" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : );
 asm volatile("dsb " "nsh" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_all(void)
{
 asm volatile("dsb " "ishst" : : : "memory");
 asm ("tlbi " "vmalle1is" "\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vmalle1is" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : );
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_mm(struct mm_struct *mm)
{
 unsigned long asid = ({ unsigned long __ta = (0) >> 12; __ta &= (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))); __ta |= (unsigned long)(((mm)->context.id.counter & 0xffff)) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 asm ("tlbi " "aside1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "aside1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" (asid));
 do { if (arm64_kernel_unmapped_at_el0()) asm ("tlbi " "aside1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "aside1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" ((asid) | ((((1UL))) << 48))); } while (0);
 asm volatile("dsb " "ish" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_page_nosync(struct vm_area_struct *vma,
      unsigned long uaddr)
{
 unsigned long addr = ({ unsigned long __ta = (uaddr) >> 12; __ta &= (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))); __ta |= (unsigned long)(((vma->vm_mm)->context.id.counter & 0xffff)) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 asm ("tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" (addr));
 do { if (arm64_kernel_unmapped_at_el0()) asm ("tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_page(struct vm_area_struct *vma,
      unsigned long uaddr)
{
 flush_tlb_page_nosync(vma, uaddr);
 asm volatile("dsb " "ish" : : : "memory");
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __flush_tlb_range(struct vm_area_struct *vma,
         unsigned long start, unsigned long end,
         unsigned long stride, bool last_level)
{
 unsigned long asid = ((vma->vm_mm)->context.id.counter & 0xffff);
 unsigned long addr;

 start = ((start) & ~((__typeof__(start))((stride)-1)));
 end = ((((end)-1) | ((__typeof__(end))((stride)-1)))+1);

 if ((end - start) >= ((1 << (16 - 3)) * stride)) {
  flush_tlb_mm(vma->vm_mm);
  return;
 }


 stride >>= 12;

 start = ({ unsigned long __ta = (start) >> 12; __ta &= (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))); __ta |= (unsigned long)(asid) << 48; __ta; });
 end = ({ unsigned long __ta = (end) >> 12; __ta &= (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))); __ta |= (unsigned long)(asid) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 for (addr = start; addr < end; addr += stride) {
  if (last_level) {
   asm ("tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" (addr));
   do { if (arm64_kernel_unmapped_at_el0()) asm ("tlbi " "vale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vale1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
  } else {
   asm ("tlbi " "vae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vae1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" (addr));
   do { if (arm64_kernel_unmapped_at_el0()) asm ("tlbi " "vae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vae1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" ((addr) | ((((1UL))) << 48))); } while (0);
  }
 }
 asm volatile("dsb " "ish" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_range(struct vm_area_struct *vma,
       unsigned long start, unsigned long end)
{




 __flush_tlb_range(vma, start, end, ((1UL) << 16), false);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_tlb_kernel_range(unsigned long start, unsigned long end)
{
 unsigned long addr;

 if ((end - start) > ((1 << (16 - 3)) * ((1UL) << 16))) {
  flush_tlb_all();
  return;
 }

 start = ({ unsigned long __ta = (start) >> 12; __ta &= (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))); __ta |= (unsigned long)(0) << 48; __ta; });
 end = ({ unsigned long __ta = (end) >> 12; __ta &= (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))); __ta |= (unsigned long)(0) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 for (addr = start; addr < end; addr += 1 << (16 - 12))
  asm ("tlbi " "vaale1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vaale1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" (addr));
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __flush_tlb_kernel_pgtable(unsigned long kaddr)
{
 unsigned long addr = ({ unsigned long __ta = (kaddr) >> 12; __ta &= (((~(((0ULL)))) - ((((1ULL))) << (0)) + 1) & (~(((0ULL))) >> (64 - 1 - (43)))); __ta |= (unsigned long)(0) << 48; __ta; });

 asm volatile("dsb " "ishst" : : : "memory");
 asm ("tlbi " "vaae1is" ", %0\n" ".if ""1"" == 1\n" "661:\n\t" "nop\n			nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "17" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "dsb ish\n		tlbi " "vaae1is" ", %0" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" : : "r" (addr));
 asm volatile("dsb " "ish" : : : "memory");
 asm volatile("isb" : : : "memory");
}
# 15 "../arch/arm64/include/asm/pgtable.h" 2
# 31 "../arch/arm64/include/asm/pgtable.h"
# 1 "../arch/arm64/include/asm/fixmap.h" 1
# 21 "../arch/arm64/include/asm/fixmap.h"
# 1 "../arch/arm64/include/asm/boot.h" 1
# 22 "../arch/arm64/include/asm/fixmap.h" 2
# 36 "../arch/arm64/include/asm/fixmap.h"
enum fixed_addresses {
 FIX_HOLE,
# 49 "../arch/arm64/include/asm/fixmap.h"
 FIX_FDT_END,
 FIX_FDT = FIX_FDT_END + (0x00200000 + 0x00200000) / ((1UL) << 16) - 1,

 FIX_EARLYCON_MEM_BASE,
 FIX_TEXT_POKE0,



 FIX_APEI_GHES_IRQ,
 FIX_APEI_GHES_SEA,

 FIX_APEI_GHES_SDEI_NORMAL,
 FIX_APEI_GHES_SDEI_CRITICAL,




 FIX_ENTRY_TRAMP_DATA,
 FIX_ENTRY_TRAMP_TEXT,


 __end_of_permanent_fixed_addresses,
# 80 "../arch/arm64/include/asm/fixmap.h"
 FIX_BTMAP_END = __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + ((0x00040000 / ((1UL) << 16)) * 7) - 1,





 FIX_PTE,
 FIX_PMD,
 FIX_PUD,
 FIX_PGD,

 __end_of_fixed_addresses
};






void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) early_fixmap_init(void);






extern void __set_fixmap(enum fixed_addresses idx, phys_addr_t phys, pgprot_t prot);


# 1 "../include/asm-generic/fixmap.h" 1
# 30 "../include/asm-generic/fixmap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long fix_to_virt(const unsigned int idx)
{
 do { extern void __compiletime_assert_32(void) ; if (!(!(idx >= __end_of_fixed_addresses))) __compiletime_assert_32(); } while (0);
 return (((((-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) - 0x00200000) - 0x01000000) - 0x00200000) - ((idx) << 16));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long virt_to_fix(const unsigned long vaddr)
{
 do { if (__builtin_expect(!!(vaddr >= ((((-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) - 0x00200000) - 0x01000000) - 0x00200000) || vaddr < (((((-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) - 0x00200000) - 0x01000000) - 0x00200000) - (__end_of_permanent_fixed_addresses << 16))), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/asm-generic/fixmap.h\"; .popsection; .long 14472b - 14470b; .short 38; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 return ((((((-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) - 0x00200000) - 0x01000000) - 0x00200000) - ((vaddr)&(~(((1UL) << 16)-1)))) >> 16);
}
# 110 "../arch/arm64/include/asm/fixmap.h" 2
# 32 "../arch/arm64/include/asm/pgtable.h" 2




extern struct page *vmemmap;

extern void __pte_error(const char *file, int line, unsigned long val);
extern void __pmd_error(const char *file, int line, unsigned long val);
extern void __pud_error(const char *file, int line, unsigned long val);
extern void __pgd_error(const char *file, int line, unsigned long val);





extern unsigned long empty_zero_page[((1UL) << 16) / sizeof(unsigned long)];
# 130 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t clear_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) &= ~((prot).pgprot);
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t set_pte_bit(pte_t pte, pgprot_t prot)
{
 ((pte).pte) |= ((prot).pgprot);
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_wrprotect(pte_t pte)
{
 pte = clear_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkwrite(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { (((((pteval_t)(1)) << 51))) } ));
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkclean(pte_t pte)
{
 pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdirty(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 55)) } ));

 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))))
  pte = clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 7)) } ));

 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkold(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkyoung(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 10)) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkspecial(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 56)) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkcont(pte_t pte)
{
 pte = set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(3)) << 0)) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mknoncont(pte_t pte)
{
 return clear_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 52)) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkpresent(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 0)) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkcont(pmd_t pmd)
{
 return ((pmd_t) { (((pmd).pmd) | (((pmdval_t)(1)) << 52)) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mkdevmap(pte_t pte)
{
 return set_pte_bit(pte, ((pgprot_t) { ((((pteval_t)(1)) << 57) | (((pteval_t)(1)) << 56)) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte(pte_t *ptep, pte_t pte)
{
 ({ union { typeof(*ptep) __val; char __c[1]; } __u = { .__val = ( typeof(*ptep)) (pte) }; __write_once_size(&(*ptep), __u.__c, sizeof(*ptep)); __u.__val; });





 if (((((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 54))) == ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 54)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

extern void __sync_icache_dcache(pte_t pteval);
# 247 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __check_racy_pte_update(struct mm_struct *mm, pte_t *ptep,
        pte_t pte)
{
 pte_t old_pte;

 if (!0)
  return;

 old_pte = ({ union { typeof(*ptep) __val; char __c[1]; } __u; if (1) __read_once_size(&(*ptep), __u.__c, sizeof(*ptep)); else __read_once_size_nocheck(&(*ptep), __u.__c, sizeof(*ptep)); do { } while (0); __u.__val; });

 if (!(!!(((old_pte).pte) & (((pteval_t)(1)) << 0))) || !(!!(((pte).pte) & (((pteval_t)(1)) << 0))))
  return;
 if (mm != get_current()->active_mm && atomic_read(&mm->mm_users) <= 1)
  return;






 ((void)(sizeof(( long)(!(!!(((pte).pte) & (((pteval_t)(1)) << 10)))))));


 ((void)(sizeof(( long)((!!(((old_pte).pte) & ((((pteval_t)(1)) << 51)))) && !((!!(((pte).pte) & (((pteval_t)(1)) << 55))) || ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))))));


}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 if ((!!(((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))) && (!(((pte).pte) & (((pteval_t)(1)) << 54))) && !(!!(((pte).pte) & (((pteval_t)(1)) << 56))))
  __sync_icache_dcache(pte);

 __check_racy_pte_update(mm, ptep, pte);

 set_pte(ptep, pte);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_same(pte_t pte_a, pte_t pte_b)
{
 pteval_t lhs, rhs;

 lhs = ((pte_a).pte);
 rhs = ((pte_b).pte);

 if ((!!(((pte_a).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))))
  lhs &= ~(((pteval_t)(1)) << 7);

 if ((!!(((pte_b).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58)))))
  rhs &= ~(((pteval_t)(1)) << 7);

 return (lhs == rhs);
}
# 317 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pgd_pte(pgd_t pgd)
{
 return ((pte_t) { (((pgd).pgd)) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pud_pte(pud_t pud)
{
 return ((pte_t) { (((((pud).pgd).pgd))) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t pte_pud(pte_t pte)
{
 return ((pud_t) { ((pgd_t) { (((pte).pte)) } ) });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pud_pmd(pud_t pud)
{
 return ((pmd_t) { (((((pud).pgd).pgd))) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pmd_pte(pmd_t pmd)
{
 return ((pte_t) { (((pmd).pmd)) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pte_pmd(pte_t pte)
{
 return ((pmd_t) { (((pte).pte)) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t mk_pud_sect_prot(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(((pudval_t)(1)) << 1)) | (((pudval_t)(1)) << 0)) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t mk_pmd_sect_prot(pgprot_t prot)
{
 return ((pgprot_t) { ((((prot).pgprot) & ~(((pmdval_t)(1)) << 1)) | (((pmdval_t)(1)) << 0)) } );
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_protnone(pte_t pte)
{
 return (((pte).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58))) == (((pteval_t)(1)) << 58);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_protnone(pmd_t pmd)
{
 return pte_protnone(pmd_pte(pmd));
}
# 401 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mkdevmap(pmd_t pmd)
{
 return pte_pmd(set_pte_bit(pmd_pte(pmd), ((pgprot_t) { ((((pteval_t)(1)) << 57)) } )));
}
# 453 "../arch/arm64/include/asm/pgtable.h"
struct file;
extern pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
         unsigned long size, pgprot_t vma_prot);
# 467 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pud_sect(pud_t pud) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pud_table(pud_t pud) { return true; }







extern pgd_t init_pg_dir[(1 << ((48) - ((16 - 3) * (4 - (4 - 3)) + 3)))];
extern pgd_t init_pg_end[];
extern pgd_t swapper_pg_dir[(1 << ((48) - ((16 - 3) * (4 - (4 - 3)) + 3)))];
extern pgd_t idmap_pg_dir[(1 << ((48) - ((16 - 3) * (4 - (4 - 3)) + 3)))];
extern pgd_t tramp_pg_dir[(1 << ((48) - ((16 - 3) * (4 - (4 - 3)) + 3)))];

extern void set_swapper_pgd(pgd_t *pgdp, pgd_t pgd);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool in_swapper_pgdir(void *addr)
{
 return ((unsigned long)addr & (~(((1UL) << 16)-1))) ==
         ((unsigned long)swapper_pg_dir & (~(((1UL) << 16)-1)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pmd(pmd_t *pmdp, pmd_t pmd)
{







 ({ union { typeof(*pmdp) __val; char __c[1]; } __u = { .__val = ( typeof(*pmdp)) (pmd) }; __write_once_size(&(*pmdp), __u.__c, sizeof(*pmdp)); __u.__val; });

 if ((!!(((pmd_pte(pmd)).pte) & (((pteval_t)(1)) << 0)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, ((pmd_t) { (0) } ));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t pmd_page_paddr(pmd_t pmd)
{
 return (((pmd_pte(pmd)).pte) & (((((pteval_t)(1)) << (48 - 16)) - 1) << 16));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_unmap(pte_t *pte) { }
# 551 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_pud(pud_t *pudp, pud_t pud)
{

 if (in_swapper_pgdir(pudp)) {
  set_swapper_pgd((pgd_t *)pudp, ((pgd_t) { (((((pud).pgd).pgd))) } ));
  return;
 }


 ({ union { typeof(*pudp) __val; char __c[1]; } __u = { .__val = ( typeof(*pudp)) (pud) }; __write_once_size(&(*pudp), __u.__c, sizeof(*pudp)); __u.__val; });

 if ((!!(((pud_pte(pud)).pte) & (((pteval_t)(1)) << 0)))) {
  asm volatile("dsb " "ishst" : : : "memory");
  asm volatile("isb" : : : "memory");
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pud_clear(pud_t *pudp)
{
 set_pud(pudp, ((pud_t) { ((pgd_t) { (0) } ) }));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t pud_page_paddr(pud_t pud)
{
 return (((pud_pte(pud)).pte) & (((((pteval_t)(1)) << (48 - 16)) - 1) << 16));
}
# 679 "../arch/arm64/include/asm/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 const pteval_t mask = (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54) | (((pteval_t)(1)) << 7) |
         (((pteval_t)(1)) << 58) | (((pteval_t)(1)) << 0) | ((((pteval_t)(1)) << 51));

 if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
  pte = pte_mkdirty(pte);
 ((pte).pte) = (((pte).pte) & ~mask) | (((newprot).pgprot) & mask);
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 return pte_pmd(pte_modify(pmd_pte(pmd), newprot));
}


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty)
{
 return ptep_set_access_flags(vma, address, (pte_t *)pmdp, pmd_pte(entry), dirty);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_devmap(pud_t pud)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_devmap(pgd_t pgd)
{
 return 0;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ptep_test_and_clear_young(pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ union { typeof(*ptep) __val; char __c[1]; } __u; if (1) __read_once_size(&(*ptep), __u.__c, sizeof(*ptep)); else __read_once_size_nocheck(&(*ptep), __u.__c, sizeof(*ptep)); do { } while (0); __u.__val; });
 do {
  old_pte = pte;
  pte = pte_mkold(pte);
  ((pte).pte) = ({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __cmpxchg((__ai_ptr), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(__ai_ptr))); __ret; }); });

 } while (((pte).pte) != ((old_pte).pte));

 return (!!(((pte).pte) & (((pteval_t)(1)) << 10)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep)
{
 return __ptep_test_and_clear_young(ptep);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep)
{
 int young = ptep_test_and_clear_young(vma, address, ptep);

 if (young) {
# 761 "../arch/arm64/include/asm/pgtable.h"
  flush_tlb_page_nosync(vma, address);
 }

 return young;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp)
{
 return ptep_test_and_clear_young(vma, address, (pte_t *)pmdp);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear(struct mm_struct *mm,
           unsigned long address, pte_t *ptep)
{
 return ((pte_t) { (({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg((unsigned long)(0), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); })) } );
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm,
         unsigned long address, pmd_t *pmdp)
{
 return pte_pmd(ptep_get_and_clear(mm, address, (pte_t *)pmdp));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_set_wrprotect(struct mm_struct *mm, unsigned long address, pte_t *ptep)
{
 pte_t old_pte, pte;

 pte = ({ union { typeof(*ptep) __val; char __c[1]; } __u; if (1) __read_once_size(&(*ptep), __u.__c, sizeof(*ptep)); else __read_once_size_nocheck(&(*ptep), __u.__c, sizeof(*ptep)); do { } while (0); __u.__val; });
 do {
  old_pte = pte;




  if (((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))))
   pte = pte_mkdirty(pte);
  pte = pte_wrprotect(pte);
  ((pte).pte) = ({ typeof(&((*ptep).pte)) __ai_ptr = (&((*ptep).pte)); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __cmpxchg((__ai_ptr), (unsigned long)(((old_pte).pte)), (unsigned long)(((pte).pte)), sizeof(*(__ai_ptr))); __ret; }); });

 } while (((pte).pte) != ((old_pte).pte));
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pmd_t *pmdp)
{
 ptep_set_wrprotect(mm, address, (pte_t *)pmdp);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_establish(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp, pmd_t pmd)
{
 return ((pmd_t) { (({ typeof(&((*pmdp).pmd)) __ai_ptr = (&((*pmdp).pmd)); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__(*(__ai_ptr)) __ret; __ret = (__typeof__(*(__ai_ptr))) __xchg((unsigned long)(((pmd).pmd)), (__ai_ptr), sizeof(*(__ai_ptr))); __ret; }); })) } );
}
# 860 "../arch/arm64/include/asm/pgtable.h"
extern int kern_addr_valid(unsigned long addr);


# 1 "../include/asm-generic/pgtable.h" 1
# 108 "../include/asm-generic/pgtable.h"
extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp);
# 147 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t pudp_huge_get_and_clear(struct mm_struct *mm,
         unsigned long address,
         pud_t *pudp)
{
 pud_t pud = *pudp;

 pud_clear(pudp);
 return pud;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmdp_huge_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pmd_t *pmdp,
         int full)
{
 return pmdp_huge_get_and_clear(mm, address, pmdp);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pud_t pudp_huge_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pud_t *pudp,
         int full)
{
 return pudp_huge_get_and_clear(mm, address, pudp);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long address, pte_t *ptep,
         int full)
{
 pte_t pte;
 pte = ptep_get_and_clear(mm, address, ptep);
 return pte;
}
# 196 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 set_pte(ptep, ((pte_t) { (0) } ));
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);
# 279 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 do { extern void __compiletime_assert_282(void) ; if (!(!(1))) __compiletime_assert_282(); } while (0);
}





extern pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp);
# 304 "../include/asm-generic/pgtable.h"
extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
# 318 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t generic_pmdp_establish(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmdp, pmd_t pmd)
{
 pmd_t old_pmd = *pmdp;
 set_pte_at(vma->vm_mm, address, (pte_t *)pmdp, pmd_pte(pmd));
 return old_pmd;
}



extern pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);
# 346 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_unused(pte_t pte)
{
 return 0;
}
# 378 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return ((pmd_a).pmd) == ((pmd_b).pmd);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_same(pud_t pud_a, pud_t pud_b)
{
 return ((((pud_a).pgd).pgd)) == ((((pud_b).pgd).pgd));
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_same(pgd_t p4d_a, pgd_t p4d_b)
{
 return ((p4d_a).pgd) == ((p4d_b).pgd);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_same(pgd_t pgd_a, pgd_t pgd_b)
{
 return ((pgd_a).pgd) == ((pgd_b).pgd);
}
# 450 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_do_swap_page(struct mm_struct *mm,
         struct vm_area_struct *vma,
         unsigned long addr,
         pte_t pte, pte_t oldpte)
{

}
# 468 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_unmap_one(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long addr,
      pte_t orig_pte)
{
 return 0;
}
# 511 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((0))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((0))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((3))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((3))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 if (((oldprot).pgprot) == ((((pgprot_t) { ((((oldprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((1))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } )).pgprot))
  newprot = ((pgprot_t) { ((((newprot).pgprot) & ~((((pteval_t)(7)) << 2))) | ((((pteval_t)((1))) << 2) | (((pteval_t)(1)) << 53) | (((pteval_t)(1)) << 54))) } );
 return newprot;
}
# 560 "../include/asm-generic/pgtable.h"
void pgd_clear_bad(pgd_t *);
void p4d_clear_bad(pgd_t *);
void pud_clear_bad(pud_t *);
void pmd_clear_bad(pmd_t *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_none_or_clear_bad(pgd_t *p4d)
{
 if (p4d_none(*p4d))
  return 1;
 if (__builtin_expect(!!(p4d_bad(*p4d)), 0)) {
  p4d_clear_bad(p4d);
  return 1;
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_none_or_clear_bad(pud_t *pud)
{
 if ((!((((*pud).pgd).pgd))))
  return 1;
 if (__builtin_expect(!!((!(((((*pud).pgd).pgd)) & (((pudval_t)(1)) << 1)))), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if ((!((*pmd).pmd)))
  return 1;
 if (__builtin_expect(!!((!(((*pmd).pmd) & (((pmdval_t)(1)) << 1)))), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t __ptep_modify_prot_start(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(vma->vm_mm, addr, ptep);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __ptep_modify_prot_commit(struct vm_area_struct *vma,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(vma->vm_mm, addr, ptep, pte);
}
# 647 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t ptep_modify_prot_start(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep)
{
 return __ptep_modify_prot_start(vma, addr, ptep);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptep_modify_prot_commit(struct vm_area_struct *vma,
        unsigned long addr,
        pte_t *ptep, pte_t old_pte, pte_t pte)
{
 __ptep_modify_prot_commit(vma, addr, ptep, pte);
}
# 733 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pte_swp_soft_dirty(pte_t pte)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_swp_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}
# 805 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size)
{
 return 0;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn)
{
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int track_pfn_copy(struct vm_area_struct *vma)
{
 return 0;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn(struct vm_area_struct *vma,
          unsigned long pfn, unsigned long size)
{
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void untrack_pfn_moved(struct vm_area_struct *vma)
{
}
# 869 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}
# 909 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 951 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 969 "../include/asm-generic/pgtable.h"
 __asm__ __volatile__("" : : : "memory");
# 986 "../include/asm-generic/pgtable.h"
 if ((!((pmdval).pmd)) || (((pmdval).pmd) && !(((pmdval).pmd) & (((pmdval_t)(1)) << 1))) ||
  (0 && !(!!(((pmd_pte(pmdval)).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58))))))
  return 1;
 if (__builtin_expect(!!((!(((pmdval).pmd) & (((pmdval_t)(1)) << 1)))), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 1009 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pmd_trans_unstable(pmd_t *pmd)
{

 return pmd_none_or_trans_huge_or_clear_bad(pmd);



}
# 1046 "../include/asm-generic/pgtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_set_huge(pgd_t *p4d, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int p4d_clear_huge(pgd_t *p4d)
{
 return 0;
}


int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
int pud_clear_huge(pud_t *pud);
int pmd_clear_huge(pmd_t *pmd);
int p4d_free_pud_page(pgd_t *p4d, unsigned long addr);
int pud_free_pmd_page(pud_t *pud, unsigned long addr);
int pmd_free_pte_page(pmd_t *pmd, unsigned long addr);
# 1121 "../include/asm-generic/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_espfix_bsp(void) { }


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pgd_cache_init(void);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot)
{
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool arch_has_pfn_modify_check(void)
{
 return false;
}
# 863 "../arch/arm64/include/asm/pgtable.h" 2

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_cache_init(void) { }




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_mmu_cache(struct vm_area_struct *vma,
        unsigned long addr, pte_t *ptep)
{





}
# 17 "../arch/arm64/include/asm/io.h" 2
# 1 "./arch/arm64/include/generated/asm/early_ioremap.h" 1
# 1 "../include/asm-generic/early_ioremap.h" 1
# 11 "../include/asm-generic/early_ioremap.h"
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap_ro(resource_size_t phys_addr,
          unsigned long size);
extern void *early_memremap_prot(resource_size_t phys_addr,
     unsigned long size, unsigned long prot_val);
extern void early_iounmap(void *addr, unsigned long size);
extern void early_memunmap(void *addr, unsigned long size);





extern void early_ioremap_shutdown(void);



extern void early_ioremap_init(void);


extern void early_ioremap_setup(void);





extern void early_ioremap_reset(void);




extern void copy_from_early_mem(void *dest, phys_addr_t src,
    unsigned long size);
# 2 "./arch/arm64/include/generated/asm/early_ioremap.h" 2
# 18 "../arch/arm64/include/asm/io.h" 2







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeb(u8 val, volatile void *addr)
{
 asm volatile("strb %w0, [%1]" : : "rZ" (val), "r" (addr));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writew(u16 val, volatile void *addr)
{
 asm volatile("strh %w0, [%1]" : : "rZ" (val), "r" (addr));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writel(u32 val, volatile void *addr)
{
 asm volatile("str %w0, [%1]" : : "rZ" (val), "r" (addr));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __raw_writeq(u64 val, volatile void *addr)
{
 asm volatile("str %x0, [%1]" : : "rZ" (val), "r" (addr));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 __raw_readb(const volatile void *addr)
{
 u8 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldrb %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldarb %w0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 __raw_readw(const volatile void *addr)
{
 u16 val;

 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldrh %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldarh %w0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __raw_readl(const volatile void *addr)
{
 u32 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldr %w0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldar %w0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __raw_readq(const volatile void *addr)
{
 u64 val;
 asm volatile(".if ""1"" == 1\n" "661:\n\t" "ldr %0, [%1]" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "1" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldar %0, [%1]" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"


       : "=r" (val) : "r" (addr));
 return val;
}
# 154 "../arch/arm64/include/asm/io.h"
extern void __memcpy_fromio(void *, const volatile void *, size_t);
extern void __memcpy_toio(volatile void *, const void *, size_t);
extern void __memset_io(volatile void *, int, size_t);
# 165 "../arch/arm64/include/asm/io.h"
extern void *__ioremap(phys_addr_t phys_addr, size_t size, pgprot_t prot);
extern void iounmap(volatile void *addr);
extern void *ioremap_cache(phys_addr_t phys_addr, size_t size);
# 195 "../arch/arm64/include/asm/io.h"
# 1 "../include/asm-generic/io.h" 1
# 18 "../include/asm-generic/io.h"
# 1 "./arch/arm64/include/generated/asm/mmiowb.h" 1
# 19 "../include/asm-generic/io.h" 2
# 1 "../include/asm-generic/pci_iomap.h" 1
# 10 "../include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
# 20 "../include/asm-generic/io.h" 2
# 317 "../include/asm-generic/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsb(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u8 *buf = buffer;

  do {
   u8 x = __raw_readb(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsw(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u16 *buf = buffer;

  do {
   u16 x = __raw_readw(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsl(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u32 *buf = buffer;

  do {
   u32 x = __raw_readl(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void readsq(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u64 *buf = buffer;

  do {
   u64 x = __raw_readq(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesb(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u8 *buf = buffer;

  do {
   __raw_writeb(*buf++, addr);
  } while (--count);
 }
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesw(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u16 *buf = buffer;

  do {
   __raw_writew(*buf++, addr);
  } while (--count);
 }
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesl(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u32 *buf = buffer;

  do {
   __raw_writel(*buf++, addr);
  } while (--count);
 }
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void writesq(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u64 *buf = buffer;

  do {
   __raw_writeq(*buf++, addr);
  } while (--count);
 }
}
# 451 "../include/asm-generic/io.h"
# 1 "../include/linux/logic_pio.h" 1
# 11 "../include/linux/logic_pio.h"
# 1 "../include/linux/fwnode.h" 1
# 14 "../include/linux/fwnode.h"
struct fwnode_operations;
struct device;

struct fwnode_handle {
 struct fwnode_handle *secondary;
 const struct fwnode_operations *ops;
};







struct fwnode_endpoint {
 unsigned int port;
 unsigned int id;
 const struct fwnode_handle *local_fwnode;
};
# 42 "../include/linux/fwnode.h"
struct fwnode_reference_args {
 struct fwnode_handle *fwnode;
 unsigned int nargs;
 u64 args[8];
};
# 69 "../include/linux/fwnode.h"
struct fwnode_operations {
 struct fwnode_handle *(*get)(struct fwnode_handle *fwnode);
 void (*put)(struct fwnode_handle *fwnode);
 bool (*device_is_available)(const struct fwnode_handle *fwnode);
 const void *(*device_get_match_data)(const struct fwnode_handle *fwnode,
          const struct device *dev);
 bool (*property_present)(const struct fwnode_handle *fwnode,
     const char *propname);
 int (*property_read_int_array)(const struct fwnode_handle *fwnode,
           const char *propname,
           unsigned int elem_size, void *val,
           size_t nval);
 int
 (*property_read_string_array)(const struct fwnode_handle *fwnode_handle,
          const char *propname, const char **val,
          size_t nval);
 struct fwnode_handle *(*get_parent)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*get_next_child_node)(const struct fwnode_handle *fwnode,
          struct fwnode_handle *child);
 struct fwnode_handle *
 (*get_named_child_node)(const struct fwnode_handle *fwnode,
    const char *name);
 int (*get_reference_args)(const struct fwnode_handle *fwnode,
      const char *prop, const char *nargs_prop,
      unsigned int nargs, unsigned int index,
      struct fwnode_reference_args *args);
 struct fwnode_handle *
 (*graph_get_next_endpoint)(const struct fwnode_handle *fwnode,
       struct fwnode_handle *prev);
 struct fwnode_handle *
 (*graph_get_remote_endpoint)(const struct fwnode_handle *fwnode);
 struct fwnode_handle *
 (*graph_get_port_parent)(struct fwnode_handle *fwnode);
 int (*graph_parse_endpoint)(const struct fwnode_handle *fwnode,
        struct fwnode_endpoint *endpoint);
};
# 12 "../include/linux/logic_pio.h" 2

enum {
 LOGIC_PIO_INDIRECT,
 LOGIC_PIO_CPU_MMIO,
};

struct logic_pio_hwaddr {
 struct list_head list;
 struct fwnode_handle *fwnode;
 resource_size_t hw_start;
 resource_size_t io_start;
 resource_size_t size;
 unsigned long flags;

 void *hostdata;
 const struct logic_pio_host_ops *ops;
};

struct logic_pio_host_ops {
 u32 (*in)(void *hostdata, unsigned long addr, size_t dwidth);
 void (*out)(void *hostdata, unsigned long addr, u32 val,
      size_t dwidth);
 u32 (*ins)(void *hostdata, unsigned long addr, void *buffer,
     size_t dwidth, unsigned int count);
 void (*outs)(void *hostdata, unsigned long addr, const void *buffer,
       size_t dwidth, unsigned int count);
};


u8 logic_inb(unsigned long addr);
void logic_outb(u8 value, unsigned long addr);
void logic_outw(u16 value, unsigned long addr);
void logic_outl(u32 value, unsigned long addr);
u16 logic_inw(unsigned long addr);
u32 logic_inl(unsigned long addr);
void logic_outb(u8 value, unsigned long addr);
void logic_outw(u16 value, unsigned long addr);
void logic_outl(u32 value, unsigned long addr);
void logic_insb(unsigned long addr, void *buffer, unsigned int count);
void logic_insl(unsigned long addr, void *buffer, unsigned int count);
void logic_insw(unsigned long addr, void *buffer, unsigned int count);
void logic_outsb(unsigned long addr, const void *buffer, unsigned int count);
void logic_outsw(unsigned long addr, const void *buffer, unsigned int count);
void logic_outsl(unsigned long addr, const void *buffer, unsigned int count);
# 116 "../include/linux/logic_pio.h"
struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *fwnode);
unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *fwnode,
   resource_size_t hw_addr, resource_size_t size);
int logic_pio_register_range(struct logic_pio_hwaddr *newrange);
void logic_pio_unregister_range(struct logic_pio_hwaddr *range);
resource_size_t logic_pio_to_hwaddr(unsigned long pio);
unsigned long logic_pio_trans_cpuaddr(resource_size_t hw_addr);
# 452 "../include/asm-generic/io.h" 2
# 530 "../include/asm-generic/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 inb_p(unsigned long addr)
{
 return logic_inb(addr);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 inw_p(unsigned long addr)
{
 return logic_inw(addr);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 inl_p(unsigned long addr)
{
 return logic_inl(addr);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outb_p(u8 value, unsigned long addr)
{
 logic_outb(value, addr);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outw_p(u16 value, unsigned long addr)
{
 logic_outw(value, addr);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outl_p(u32 value, unsigned long addr)
{
 logic_outl(value, addr);
}
# 634 "../include/asm-generic/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 logic_insb(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 logic_insw(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 logic_insl(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 logic_outsb(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 logic_outsw(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 logic_outsl(addr, buffer, count);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 ioread8(const volatile void *addr)
{
 return ({ u8 __v = ({ u8 __r = __raw_readb(addr); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ioread16(const volatile void *addr)
{
 return ({ u16 __v = ({ u16 __r = (( __u16)(__le16)(( __le16)__raw_readw(addr))); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 ioread32(const volatile void *addr)
{
 return ({ u32 __v = ({ u32 __r = (( __u32)(__le32)(( __le32)__raw_readl(addr))); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 ioread64(const volatile void *addr)
{
 return ({ u64 __v = ({ u64 __r = (( __u64)(__le64)(( __le64)__raw_readq(addr))); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite8(u8 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writeb(((value)),((addr)))); });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite16(u16 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writew(( u16)(( __le16)(__u16)((value))),((addr)))); });
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite32(u32 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writel(( u32)(( __le32)(__u32)((value))),((addr)))); });
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite64(u64 value, volatile void *addr)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writeq(( u64)(( __le64)(__u64)((value))),((addr)))); });
}
# 806 "../include/asm-generic/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread8_rep(const volatile void *addr, void *buffer,
          unsigned int count)
{
 readsb(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread16_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsw(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread32_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsl(addr, buffer, count);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioread64_rep(const volatile void *addr,
    void *buffer, unsigned int count)
{
 readsq(addr, buffer, count);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite8_rep(volatile void *addr,
    const void *buffer,
    unsigned int count)
{
 writesb(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite16_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesw(addr, buffer, count);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite32_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesl(addr, buffer, count);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void iowrite64_rep(volatile void *addr,
     const void *buffer,
     unsigned int count)
{
 writesq(addr, buffer, count);
}







# 1 "../include/linux/vmalloc.h" 1
# 13 "../include/linux/vmalloc.h"
struct vm_area_struct;
struct notifier_block;
# 41 "../include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;
 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;




 unsigned long subtree_max_size;
 unsigned long flags;
 struct rb_node rb_node;
 struct list_head list;
 struct llist_node purge_list;
 struct vm_struct *vm;
};




extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count,
    int node, pgprot_t prot);
extern void vm_unmap_aliases(void);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size);
extern void *vzalloc(unsigned long size);
extern void *vmalloc_user(unsigned long size);
extern void *vmalloc_node(unsigned long size, int node);
extern void *vzalloc_node(unsigned long size, int node);
extern void *vmalloc_exec(unsigned long size);
extern void *vmalloc_32(unsigned long size);
extern void *vmalloc_32_user(unsigned long size);
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot);
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller);
# 106 "../include/linux/vmalloc.h"
extern void *__vmalloc_node_flags_caller(unsigned long size,
      int node, gfp_t flags, void *caller);


extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
void vmalloc_sync_all(void);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << 16);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,
     unsigned long start, unsigned long end);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

extern int map_vm_area(struct vm_struct *area, pgprot_t prot,
   struct page **pages);

extern int map_kernel_range_noflush(unsigned long start, unsigned long size,
        pgprot_t prot, struct page **pages);
extern void unmap_kernel_range_noflush(unsigned long addr, unsigned long size);
extern void unmap_kernel_range(unsigned long addr, unsigned long size);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_vm_flush_reset_perms(void *addr)
{
 struct vm_struct *vm = find_vm_area(addr);

 if (vm)
  vm->flags |= 0x00000100;
}
# 186 "../include/linux/vmalloc.h"
extern struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes);
extern void free_vm_area(struct vm_struct *area);


extern long vread(char *buf, char *addr, unsigned long count);
extern long vwrite(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__((__section__(".init.text"))) __attribute__((__cold__)) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 229 "../include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);
# 888 "../include/asm-generic/io.h" 2



struct pci_dev;
extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_iounmap(struct pci_dev *dev, void *p)
{
}
# 943 "../include/asm-generic/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioremap_uc(phys_addr_t offset, size_t size)
{
 return ((void *)0);
}
# 1011 "../include/asm-generic/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ioport_map(unsigned long port, unsigned int nr)
{
 port &= (0x01000000 - 1);
 return (port > ((0x01000000 - 1) - 0x4000)) ? ((void *)0) : ((void *)(((-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) - 0x00200000) - 0x01000000)) + port;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioport_unmap(void *p)
{
}
# 1035 "../include/asm-generic/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xlate_dev_kmem_ptr(void *addr)
{
 return addr;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *xlate_dev_mem_ptr(phys_addr_t addr)
{
 return ((void *)((unsigned long)(((phys_addr_t)(addr)) - physvirt_offset)));
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr)
{
}
# 196 "../arch/arm64/include/asm/io.h" 2






extern int valid_phys_addr_range(phys_addr_t addr, size_t size);
extern int valid_mmap_phys_addr_range(unsigned long pfn, size_t size);

extern int devmem_is_allowed(unsigned long pfn);
# 14 "../include/linux/io.h" 2


struct device;
struct resource;

          void __iowrite32_copy(void *to, const void *from, size_t count);
void __ioread32_copy(void *to, const void *from, size_t count);
void __iowrite64_copy(void *to, const void *from, size_t count);


int ioremap_page_range(unsigned long addr, unsigned long end,
         phys_addr_t phys_addr, pgprot_t prot);
# 35 "../include/linux/io.h"
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) ioremap_huge_init(void);
int arch_ioremap_p4d_supported(void);
int arch_ioremap_pud_supported(void);
int arch_ioremap_pmd_supported(void);
# 47 "../include/linux/io.h"
void * devm_ioport_map(struct device *dev, unsigned long port,
          unsigned int nr);
void devm_ioport_unmap(struct device *dev, void *addr);
# 65 "../include/linux/io.h"
void *devm_ioremap(struct device *dev, resource_size_t offset,
      resource_size_t size);
void *devm_ioremap_nocache(struct device *dev, resource_size_t offset,
       resource_size_t size);
void *devm_ioremap_wc(struct device *dev, resource_size_t offset,
       resource_size_t size);
void devm_iounmap(struct device *dev, void *addr);
int check_signature(const volatile void *io_addr,
   const unsigned char *signature, int length);
void devm_ioremap_release(struct device *dev, void *res);

void *devm_memremap(struct device *dev, resource_size_t offset,
  size_t size, unsigned long flags);
void devm_memunmap(struct device *dev, void *addr);

void *__devm_memremap_pages(struct device *dev, struct resource *res);
# 124 "../include/linux/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) arch_phys_wc_add(unsigned long base,
      unsigned long size)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_phys_wc_del(int handle)
{
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_phys_wc_index(int handle)
{
 return -1;
}




enum {

 MEMREMAP_WB = 1 << 0,
 MEMREMAP_WT = 1 << 1,
 MEMREMAP_WC = 1 << 2,
 MEMREMAP_ENC = 1 << 3,
 MEMREMAP_DEC = 1 << 4,
};

void *memremap(resource_size_t offset, size_t size, unsigned long flags);
void memunmap(void *addr);
# 166 "../include/linux/io.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int arch_io_reserve_memtype_wc(resource_size_t base,
          resource_size_t size)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_io_free_memtype_wc(resource_size_t base,
        resource_size_t size)
{
}
# 40 "../include/linux/pci.h" 2
# 1 "../include/linux/resource_ext.h" 1
# 11 "../include/linux/resource_ext.h"
# 1 "../include/linux/slab.h" 1
# 19 "../include/linux/slab.h"
# 1 "../include/linux/percpu-refcount.h" 1
# 59 "../include/linux/percpu-refcount.h"
struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);


enum {
 __PERCPU_REF_ATOMIC = 1LU << 0,
 __PERCPU_REF_DEAD = 1LU << 1,
 __PERCPU_REF_ATOMIC_DEAD = __PERCPU_REF_ATOMIC | __PERCPU_REF_DEAD,

 __PERCPU_REF_FLAG_BITS = 2,
};


enum {







 PERCPU_REF_INIT_ATOMIC = 1 << 0,






 PERCPU_REF_INIT_DEAD = 1 << 1,




 PERCPU_REF_ALLOW_REINIT = 1 << 2,
};

struct percpu_ref {
 atomic_long_t count;




 unsigned long percpu_count_ptr;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_switch;
 bool force_atomic:1;
 bool allow_reinit:1;
 struct callback_head rcu;
};

int __attribute__((__warn_unused_result__)) percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release, unsigned int flags,
     gfp_t gfp);
void percpu_ref_exit(struct percpu_ref *ref);
void percpu_ref_switch_to_atomic(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_switch);
void percpu_ref_switch_to_atomic_sync(struct percpu_ref *ref);
void percpu_ref_switch_to_percpu(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
void percpu_ref_resurrect(struct percpu_ref *ref);
void percpu_ref_reinit(struct percpu_ref *ref);
# 134 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_kill(struct percpu_ref *ref)
{
 percpu_ref_kill_and_confirm(ref, ((void *)0));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __ref_is_percpu(struct percpu_ref *ref,
       unsigned long **percpu_countp)
{
 unsigned long percpu_ptr;
# 161 "../include/linux/percpu-refcount.h"
 percpu_ptr = ({ union { typeof(ref->percpu_count_ptr) __val; char __c[1]; } __u; if (1) __read_once_size(&(ref->percpu_count_ptr), __u.__c, sizeof(ref->percpu_count_ptr)); else __read_once_size_nocheck(&(ref->percpu_count_ptr), __u.__c, sizeof(ref->percpu_count_ptr)); do { } while (0); __u.__val; });







 if (__builtin_expect(!!(percpu_ptr & __PERCPU_REF_ATOMIC_DEAD), 0))
  return false;

 *percpu_countp = (unsigned long *)percpu_ptr;
 return true;
}
# 185 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), nr); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), nr); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), nr); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), nr); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
 else
  atomic_long_add(nr, &ref->count);

 rcu_read_unlock_sched();
}
# 207 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_get(struct percpu_ref *ref)
{
 percpu_ref_get_many(ref, 1);
}
# 221 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else {
  ret = atomic_long_inc_not_zero(&ref->count);
 }

 rcu_read_unlock_sched();

 return ret;
}
# 255 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_tryget_live(struct percpu_ref *ref)
{
 unsigned long *percpu_count;
 bool ret = false;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count)) {
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
  ret = true;
 } else if (!(ref->percpu_count_ptr & __PERCPU_REF_DEAD)) {
  ret = atomic_long_inc_not_zero(&ref->count);
 }

 rcu_read_unlock_sched();

 return ret;
}
# 284 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put_many(struct percpu_ref *ref, unsigned long nr)
{
 unsigned long *percpu_count;

 rcu_read_lock_sched();

 if (__ref_is_percpu(ref, &percpu_count))
  do { do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*percpu_count)) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), -(typeof(*percpu_count))(nr)); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), -(typeof(*percpu_count))(nr)); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), -(typeof(*percpu_count))(nr)); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(*percpu_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*percpu_count))) *)(&(*percpu_count))); (typeof((typeof(*(&(*percpu_count))) *)(&(*percpu_count)))) (__ptr + ((__my_cpu_offset()))); }); }), -(typeof(*percpu_count))(nr)); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(atomic_long_sub_and_test(nr, &ref->count)), 0))
  ref->release(ref);

 rcu_read_unlock_sched();
}
# 307 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_ref_put(struct percpu_ref *ref)
{
 percpu_ref_put_many(ref, 1);
}
# 321 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_is_dying(struct percpu_ref *ref)
{
 return ref->percpu_count_ptr & __PERCPU_REF_DEAD;
}
# 334 "../include/linux/percpu-refcount.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_ref_is_zero(struct percpu_ref *ref)
{
 unsigned long *percpu_count;

 if (__ref_is_percpu(ref, &percpu_count))
  return false;
 return !atomic_long_read(&ref->count);
}
# 20 "../include/linux/slab.h" 2
# 136 "../include/linux/slab.h"
# 1 "../include/linux/kasan.h" 1






struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 91 "../include/linux/kasan.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_shadow(const void *address, size_t size) {}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_task_stack(struct task_struct *task) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_stack_above_sp_to(const void *watermark) {}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_enable_current(void) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_disable_current(void) {}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_alloc_pages(struct page *page, unsigned int order) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_free_pages(struct page *page, unsigned int order) {}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          slab_flags_t *flags) {}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc_large(void *ptr, size_t size, gfp_t flags)
{
 return ptr;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_kfree_large(void *ptr, unsigned long ip) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_poison_kfree(void *ptr, unsigned long ip) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags)
{
 return object;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kasan_slab_free(struct kmem_cache *s, void *object,
       unsigned long ip)
{
 return false;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_free_shadow(const struct vm_struct *vm) {}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_unpoison_slab(const void *ptr) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
# 170 "../include/linux/kasan.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
# 188 "../include/linux/kasan.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kasan_init_tags(void) { }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 137 "../include/linux/slab.h" 2

struct mem_cgroup;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init(void);
bool slab_is_available(void);

extern bool usercopy_fallback;

struct kmem_cache *kmem_cache_create(const char *name, unsigned int size,
   unsigned int align, slab_flags_t flags,
   void (*ctor)(void *));
struct kmem_cache *kmem_cache_create_usercopy(const char *name,
   unsigned int size, unsigned int align,
   slab_flags_t flags,
   unsigned int useroffset, unsigned int usersize,
   void (*ctor)(void *));
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);

void memcg_create_kmem_cache(struct mem_cgroup *, struct kmem_cache *);
void memcg_deactivate_kmem_caches(struct mem_cgroup *, struct mem_cgroup *);
# 187 "../include/linux/slab.h"
void * __attribute__((__warn_unused_result__)) __krealloc(const void *, size_t, gfp_t);
void * __attribute__((__warn_unused_result__)) krealloc(const void *, size_t, gfp_t);
void kfree(const void *);
void kzfree(const void *);
size_t __ksize(const void *);
size_t ksize(const void *);


void __check_heap_object(const void *ptr, unsigned long n, struct page *page,
   bool to_user);
# 309 "../include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,
 KMALLOC_RECLAIM,



 NR_KMALLOC_TYPES
};


extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][((14 + 16 - 1) <= 25 ? (14 + 16 - 1) : 25) + 1];

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{
# 338 "../include/linux/slab.h"
 return flags & (( gfp_t)0x10u) ? KMALLOC_RECLAIM : KMALLOC_NORMAL;

}
# 350 "../include/linux/slab.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int kmalloc_index(size_t size)
{
 if (!size)
  return 0;

 if (size <= (128))
  return ( __builtin_constant_p((128)) ? ( __builtin_constant_p((128)) ? ( ((128)) < 2 ? 0 : ((128)) & (1ULL << 63) ? 63 : ((128)) & (1ULL << 62) ? 62 : ((128)) & (1ULL << 61) ? 61 : ((128)) & (1ULL << 60) ? 60 : ((128)) & (1ULL << 59) ? 59 : ((128)) & (1ULL << 58) ? 58 : ((128)) & (1ULL << 57) ? 57 : ((128)) & (1ULL << 56) ? 56 : ((128)) & (1ULL << 55) ? 55 : ((128)) & (1ULL << 54) ? 54 : ((128)) & (1ULL << 53) ? 53 : ((128)) & (1ULL << 52) ? 52 : ((128)) & (1ULL << 51) ? 51 : ((128)) & (1ULL << 50) ? 50 : ((128)) & (1ULL << 49) ? 49 : ((128)) & (1ULL << 48) ? 48 : ((128)) & (1ULL << 47) ? 47 : ((128)) & (1ULL << 46) ? 46 : ((128)) & (1ULL << 45) ? 45 : ((128)) & (1ULL << 44) ? 44 : ((128)) & (1ULL << 43) ? 43 : ((128)) & (1ULL << 42) ? 42 : ((128)) & (1ULL << 41) ? 41 : ((128)) & (1ULL << 40) ? 40 : ((128)) & (1ULL << 39) ? 39 : ((128)) & (1ULL << 38) ? 38 : ((128)) & (1ULL << 37) ? 37 : ((128)) & (1ULL << 36) ? 36 : ((128)) & (1ULL << 35) ? 35 : ((128)) & (1ULL << 34) ? 34 : ((128)) & (1ULL << 33) ? 33 : ((128)) & (1ULL << 32) ? 32 : ((128)) & (1ULL << 31) ? 31 : ((128)) & (1ULL << 30) ? 30 : ((128)) & (1ULL << 29) ? 29 : ((128)) & (1ULL << 28) ? 28 : ((128)) & (1ULL << 27) ? 27 : ((128)) & (1ULL << 26) ? 26 : ((128)) & (1ULL << 25) ? 25 : ((128)) & (1ULL << 24) ? 24 : ((128)) & (1ULL << 23) ? 23 : ((128)) & (1ULL << 22) ? 22 : ((128)) & (1ULL << 21) ? 21 : ((128)) & (1ULL << 20) ? 20 : ((128)) & (1ULL << 19) ? 19 : ((128)) & (1ULL << 18) ? 18 : ((128)) & (1ULL << 17) ? 17 : ((128)) & (1ULL << 16) ? 16 : ((128)) & (1ULL << 15) ? 15 : ((128)) & (1ULL << 14) ? 14 : ((128)) & (1ULL << 13) ? 13 : ((128)) & (1ULL << 12) ? 12 : ((128)) & (1ULL << 11) ? 11 : ((128)) & (1ULL << 10) ? 10 : ((128)) & (1ULL << 9) ? 9 : ((128)) & (1ULL << 8) ? 8 : ((128)) & (1ULL << 7) ? 7 : ((128)) & (1ULL << 6) ? 6 : ((128)) & (1ULL << 5) ? 5 : ((128)) & (1ULL << 4) ? 4 : ((128)) & (1ULL << 3) ? 3 : ((128)) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((128)) <= 4) ? __ilog2_u32((128)) : __ilog2_u64((128)) );

 if ((128) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((128) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;
 if (size <= 64 * 1024 * 1024) return 26;
 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/slab.h\"; .popsection; .long 14472b - 14470b; .short 386; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);


 return -1;
}


void *__kmalloc(size_t size, gfp_t flags) __attribute__((__assume_aligned__((128)))) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *, void *);
# 404 "../include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}


void *__kmalloc_node(size_t size, gfp_t flags, int node) __attribute__((__assume_aligned__((128)))) __attribute__((__malloc__));
void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node) __attribute__((__assume_aligned__(__alignof__(unsigned long long)))) __attribute__((__malloc__));
# 449 "../include/linux/slab.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmem_cache_alloc_trace(struct kmem_cache *s,
  gfp_t flags, size_t size)
{
 void *ret = kmem_cache_alloc(s, flags);

 ret = kasan_kmalloc(s, ret, size, flags);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *
kmem_cache_alloc_node_trace(struct kmem_cache *s,
         gfp_t gfpflags,
         int node, size_t size)
{
 void *ret = kmem_cache_alloc_node(s, gfpflags, node);

 ret = kasan_kmalloc(s, ret, size, gfpflags);
 return ret;
}


extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__assume_aligned__(((1UL) << 16)))) __attribute__((__malloc__));




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *
kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)
{
 return kmalloc_order(size, flags, order);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 538 "../include/linux/slab.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << ((14 + 16 - 1) <= 25 ? (14 + 16 - 1) : 25)))
   return kmalloc_large(size, flags);

  index = kmalloc_index(size);

  if (!index)
   return ((void *)16);

  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned int kmalloc_size(unsigned int n)
{

 if (n > 2)
  return 1U << n;

 if (n == 1 && (128) <= 32)
  return 96;

 if (n == 2 && (128) <= 64)
  return 192;

 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << ((14 + 16 - 1) <= 25 ? (14 + 16 - 1) : 25))) {
  unsigned int i = kmalloc_index(size);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}

struct memcg_cache_array {
 struct callback_head rcu;
 struct kmem_cache *entries[0];
};
# 636 "../include/linux/slab.h"
struct memcg_cache_params {
 struct kmem_cache *root_cache;
 union {
  struct {
   struct memcg_cache_array *memcg_caches;
   struct list_head __root_caches_node;
   struct list_head children;
   bool dying;
  };
  struct {
   struct mem_cgroup *memcg;
   struct list_head children_node;
   struct list_head kmem_caches_node;
   struct percpu_ref refcnt;

   void (*work_fn)(struct kmem_cache *);
   union {
    struct callback_head callback_head;
    struct work_struct work;
   };
  };
 };
};

int memcg_update_all_caches(int num_memcgs);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(bytes, flags);
 return __kmalloc(bytes, flags);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x100u));
}
# 698 "../include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmalloc_array_node(size_t n, size_t size, gfp_t flags,
           int node)
{
 size_t bytes;

 if (__builtin_expect(!!(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })), 0))
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc_node(bytes, flags, node);
 return __kmalloc_node(bytes, flags, node);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kcalloc_node(size_t n, size_t size, gfp_t flags, int node)
{
 return kmalloc_array_node(n, size, flags | (( gfp_t)0x100u), node);
}



extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
# 736 "../include/linux/slab.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x100u));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x100u));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x100u), node);
}

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init_late(void);


int slab_prepare_cpu(unsigned int cpu);
int slab_dead_cpu(unsigned int cpu);
# 12 "../include/linux/resource_ext.h" 2


struct resource_win {
 struct resource res;
 resource_size_t offset;
};





struct resource_entry {
 struct list_head node;
 struct resource *res;
 resource_size_t offset;
 struct resource __res;
};

extern struct resource_entry *
resource_list_create_entry(struct resource *res, size_t extra_size);
extern void resource_list_free(struct list_head *head);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_add(struct resource_entry *entry,
         struct list_head *head)
{
 list_add(&entry->node, head);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_add_tail(struct resource_entry *entry,
       struct list_head *head)
{
 list_add_tail(&entry->node, head);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_del(struct resource_entry *entry)
{
 list_del(&entry->node);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void resource_list_free_entry(struct resource_entry *entry)
{
 kfree(entry);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
resource_list_destroy_entry(struct resource_entry *entry)
{
 resource_list_del(entry);
 resource_list_free_entry(entry);
}
# 41 "../include/linux/pci.h" 2
# 1 "../include/uapi/linux/pci.h" 1
# 21 "../include/uapi/linux/pci.h"
# 1 "../include/uapi/linux/pci_regs.h" 1
# 22 "../include/uapi/linux/pci.h" 2
# 42 "../include/linux/pci.h" 2

# 1 "../include/linux/pci_ids.h" 1
# 44 "../include/linux/pci.h" 2
# 62 "../include/linux/pci.h"
struct pci_slot {
 struct pci_bus *bus;
 struct list_head list;
 struct hotplug_slot *hotplug;
 unsigned char number;
 struct kobject kobj;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *pci_slot_name(const struct pci_slot *slot)
{
 return kobject_name(&slot->kobj);
}


enum pci_mmap_state {
 pci_mmap_io,
 pci_mmap_mem
};


enum {

 PCI_STD_RESOURCES,
 PCI_STD_RESOURCE_END = 5,


 PCI_ROM_RESOURCE,



 PCI_IOV_RESOURCES,
 PCI_IOV_RESOURCE_END = PCI_IOV_RESOURCES + 6 - 1,





 PCI_BRIDGE_RESOURCES,
 PCI_BRIDGE_RESOURCE_END = PCI_BRIDGE_RESOURCES +
      4 - 1,


 PCI_NUM_RESOURCES,


 DEVICE_COUNT_RESOURCE = PCI_NUM_RESOURCES,
};
# 121 "../include/linux/pci.h"
enum pci_interrupt_pin {
 PCI_INTERRUPT_UNKNOWN,
 PCI_INTERRUPT_INTA,
 PCI_INTERRUPT_INTB,
 PCI_INTERRUPT_INTC,
 PCI_INTERRUPT_INTD,
};
# 136 "../include/linux/pci.h"
typedef int pci_power_t;
# 147 "../include/linux/pci.h"
extern const char *pci_power_names[];

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *pci_power_name(pci_power_t state)
{
 return pci_power_names[1 + ( int) state];
}
# 161 "../include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

enum pci_channel_state {

 pci_channel_io_normal = ( pci_channel_state_t) 1,


 pci_channel_io_frozen = ( pci_channel_state_t) 2,


 pci_channel_io_perm_failure = ( pci_channel_state_t) 3,
};

typedef unsigned int pcie_reset_state_t;

enum pcie_reset_state {

 pcie_deassert_reset = ( pcie_reset_state_t) 1,


 pcie_warm_reset = ( pcie_reset_state_t) 2,


 pcie_hot_reset = ( pcie_reset_state_t) 3
};

typedef unsigned short pci_dev_flags_t;
enum pci_dev_flags {

 PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG = ( pci_dev_flags_t) (1 << 0),

 PCI_DEV_FLAGS_NO_D3 = ( pci_dev_flags_t) (1 << 1),

 PCI_DEV_FLAGS_ASSIGNED = ( pci_dev_flags_t) (1 << 2),

 PCI_DEV_FLAGS_ACS_ENABLED_QUIRK = ( pci_dev_flags_t) (1 << 3),

 PCI_DEV_FLAG_PCIE_BRIDGE_ALIAS = ( pci_dev_flags_t) (1 << 5),

 PCI_DEV_FLAGS_NO_BUS_RESET = ( pci_dev_flags_t) (1 << 6),

 PCI_DEV_FLAGS_NO_PM_RESET = ( pci_dev_flags_t) (1 << 7),

 PCI_DEV_FLAGS_VPD_REF_F0 = ( pci_dev_flags_t) (1 << 8),

 PCI_DEV_FLAGS_BRIDGE_XLATE_ROOT = ( pci_dev_flags_t) (1 << 9),

 PCI_DEV_FLAGS_NO_FLR_RESET = ( pci_dev_flags_t) (1 << 10),

 PCI_DEV_FLAGS_NO_RELAXED_ORDERING = ( pci_dev_flags_t) (1 << 11),
};

enum pci_irq_reroute_variant {
 INTEL_IRQ_REROUTE_VARIANT = 1,
 MAX_IRQ_REROUTE_VARIANTS = 3
};

typedef unsigned short pci_bus_flags_t;
enum pci_bus_flags {
 PCI_BUS_FLAGS_NO_MSI = ( pci_bus_flags_t) 1,
 PCI_BUS_FLAGS_NO_MMRBC = ( pci_bus_flags_t) 2,
 PCI_BUS_FLAGS_NO_AERSID = ( pci_bus_flags_t) 4,
 PCI_BUS_FLAGS_NO_EXTCFG = ( pci_bus_flags_t) 8,
};


enum pcie_link_width {
 PCIE_LNK_WIDTH_RESRV = 0x00,
 PCIE_LNK_X1 = 0x01,
 PCIE_LNK_X2 = 0x02,
 PCIE_LNK_X4 = 0x04,
 PCIE_LNK_X8 = 0x08,
 PCIE_LNK_X12 = 0x0c,
 PCIE_LNK_X16 = 0x10,
 PCIE_LNK_X32 = 0x20,
 PCIE_LNK_WIDTH_UNKNOWN = 0xff,
};


enum pci_bus_speed {
 PCI_SPEED_33MHz = 0x00,
 PCI_SPEED_66MHz = 0x01,
 PCI_SPEED_66MHz_PCIX = 0x02,
 PCI_SPEED_100MHz_PCIX = 0x03,
 PCI_SPEED_133MHz_PCIX = 0x04,
 PCI_SPEED_66MHz_PCIX_ECC = 0x05,
 PCI_SPEED_100MHz_PCIX_ECC = 0x06,
 PCI_SPEED_133MHz_PCIX_ECC = 0x07,
 PCI_SPEED_66MHz_PCIX_266 = 0x09,
 PCI_SPEED_100MHz_PCIX_266 = 0x0a,
 PCI_SPEED_133MHz_PCIX_266 = 0x0b,
 AGP_UNKNOWN = 0x0c,
 AGP_1X = 0x0d,
 AGP_2X = 0x0e,
 AGP_4X = 0x0f,
 AGP_8X = 0x10,
 PCI_SPEED_66MHz_PCIX_533 = 0x11,
 PCI_SPEED_100MHz_PCIX_533 = 0x12,
 PCI_SPEED_133MHz_PCIX_533 = 0x13,
 PCIE_SPEED_2_5GT = 0x14,
 PCIE_SPEED_5_0GT = 0x15,
 PCIE_SPEED_8_0GT = 0x16,
 PCIE_SPEED_16_0GT = 0x17,
 PCIE_SPEED_32_0GT = 0x18,
 PCI_SPEED_UNKNOWN = 0xff,
};

enum pci_bus_speed pcie_get_speed_cap(struct pci_dev *dev);
enum pcie_link_width pcie_get_width_cap(struct pci_dev *dev);

struct pci_cap_saved_data {
 u16 cap_nr;
 bool cap_extended;
 unsigned int size;
 u32 data[0];
};

struct pci_cap_saved_state {
 struct hlist_node next;
 struct pci_cap_saved_data cap;
};

struct irq_affinity;
struct pcie_link_state;
struct pci_vpd;
struct pci_sriov;
struct pci_ats;
struct pci_p2pdma;


struct pci_dev {
 struct list_head bus_list;
 struct pci_bus *bus;
 struct pci_bus *subordinate;

 void *sysdata;
 struct proc_dir_entry *procent;
 struct pci_slot *slot;

 unsigned int devfn;
 unsigned short vendor;
 unsigned short device;
 unsigned short subsystem_vendor;
 unsigned short subsystem_device;
 unsigned int class;
 u8 revision;
 u8 hdr_type;

 u16 aer_cap;
 struct aer_stats *aer_stats;

 u8 pcie_cap;
 u8 msi_cap;
 u8 msix_cap;
 u8 pcie_mpss:3;
 u8 rom_base_reg;
 u8 pin;
 u16 pcie_flags_reg;
 unsigned long *dma_alias_mask;

 struct pci_driver *driver;
 u64 dma_mask;





 struct device_dma_parameters dma_parms;

 pci_power_t current_state;


 unsigned int imm_ready:1;
 u8 pm_cap;
 unsigned int pme_support:5;

 unsigned int pme_poll:1;
 unsigned int d1_support:1;
 unsigned int d2_support:1;
 unsigned int no_d1d2:1;
 unsigned int no_d3cold:1;
 unsigned int bridge_d3:1;
 unsigned int d3cold_allowed:1;
 unsigned int mmio_always_on:1;

 unsigned int wakeup_prepared:1;
 unsigned int runtime_d3cold:1;



 unsigned int skip_bus_pm:1;
 unsigned int ignore_hotplug:1;
 unsigned int hotplug_user_indicators:1;


 unsigned int clear_retrain_link:1;

 unsigned int d3_delay;
 unsigned int d3cold_delay;


 struct pcie_link_state *link_state;
 unsigned int ltr_path:1;


 unsigned int eetlp_prefix_path:1;

 pci_channel_state_t error_state;
 struct device dev;

 int cfg_size;





 unsigned int irq;
 struct resource resource[DEVICE_COUNT_RESOURCE];

 bool match_driver;

 unsigned int transparent:1;
 unsigned int io_window:1;
 unsigned int pref_window:1;
 unsigned int pref_64_window:1;
 unsigned int multifunction:1;

 unsigned int is_busmaster:1;
 unsigned int no_msi:1;
 unsigned int no_64bit_msi:1;
 unsigned int block_cfg_access:1;
 unsigned int broken_parity_status:1;
 unsigned int irq_reroute_variant:2;
 unsigned int msi_enabled:1;
 unsigned int msix_enabled:1;
 unsigned int ari_enabled:1;
 unsigned int ats_enabled:1;
 unsigned int pasid_enabled:1;
 unsigned int pri_enabled:1;
 unsigned int is_managed:1;
 unsigned int needs_freset:1;
 unsigned int state_saved:1;
 unsigned int is_physfn:1;
 unsigned int is_virtfn:1;
 unsigned int reset_fn:1;
 unsigned int is_hotplug_bridge:1;
 unsigned int shpc_managed:1;
 unsigned int is_thunderbolt:1;







 unsigned int untrusted:1;
 unsigned int __aer_firmware_first_valid:1;
 unsigned int __aer_firmware_first:1;
 unsigned int broken_intx_masking:1;
 unsigned int io_window_1k:1;
 unsigned int irq_managed:1;
 unsigned int non_compliant_bars:1;
 unsigned int is_probed:1;
 unsigned int link_active_reporting:1;
 unsigned int no_vf_scan:1;
 pci_dev_flags_t dev_flags;
 atomic_t enable_cnt;

 u32 saved_config_space[16];
 struct hlist_head saved_cap_space;
 struct bin_attribute *rom_attr;
 int rom_attr_enabled;
 struct bin_attribute *res_attr[DEVICE_COUNT_RESOURCE];
 struct bin_attribute *res_attr_wc[DEVICE_COUNT_RESOURCE];


 unsigned int broken_cmd_compl:1;


 unsigned int ptm_root:1;
 unsigned int ptm_enabled:1;
 u8 ptm_granularity;


 const struct attribute_group **msi_irq_groups;

 struct pci_vpd *vpd;

 union {
  struct pci_sriov *sriov;
  struct pci_dev *physfn;
 };
 u16 ats_cap;
 u8 ats_stu;
 atomic_t ats_ref_cnt;


 u32 pri_reqs_alloc;


 u16 pasid_features;




 phys_addr_t rom;
 size_t romlen;
 char *driver_override;

 unsigned long priv_flags;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dev *pci_physfn(struct pci_dev *dev)
{

 if (dev->is_virtfn)
  dev = dev->physfn;

 return dev;
}

struct pci_dev *pci_alloc_dev(struct pci_bus *bus);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_channel_offline(struct pci_dev *pdev)
{
 return (pdev->error_state != pci_channel_io_normal);
}

struct pci_host_bridge {
 struct device dev;
 struct pci_bus *bus;
 struct pci_ops *ops;
 void *sysdata;
 int busnr;
 struct list_head windows;
 struct list_head dma_ranges;
 u8 (*swizzle_irq)(struct pci_dev *, u8 *);
 int (*map_irq)(const struct pci_dev *, u8, u8);
 void (*release_fn)(struct pci_host_bridge *);
 void *release_data;
 struct msi_controller *msi;
 unsigned int ignore_reset_delay:1;
 unsigned int no_ext_tags:1;
 unsigned int native_aer:1;
 unsigned int native_pcie_hotplug:1;
 unsigned int native_shpc_hotplug:1;
 unsigned int native_pme:1;
 unsigned int native_ltr:1;
 unsigned int preserve_config:1;


 resource_size_t (*align_resource)(struct pci_dev *dev,
   const struct resource *res,
   resource_size_t start,
   resource_size_t size,
   resource_size_t align);
 unsigned long private[0] __attribute__((__aligned__((1 << (6)))));
};



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pci_host_bridge_priv(struct pci_host_bridge *bridge)
{
 return (void *)bridge->private;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_host_bridge *pci_host_bridge_from_priv(void *priv)
{
 return ({ void *__mptr = (void *)(priv); do { extern void __compiletime_assert_532(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(priv)), typeof(((struct pci_host_bridge *)0)->private)) && !__builtin_types_compatible_p(typeof(*(priv)), typeof(void))))) __compiletime_assert_532(); } while (0); ((struct pci_host_bridge *)(__mptr - __builtin_offsetof(struct pci_host_bridge, private))); });
}

struct pci_host_bridge *pci_alloc_host_bridge(size_t priv);
struct pci_host_bridge *devm_pci_alloc_host_bridge(struct device *dev,
         size_t priv);
void pci_free_host_bridge(struct pci_host_bridge *bridge);
struct pci_host_bridge *pci_find_host_bridge(struct pci_bus *bus);

void pci_set_host_bridge_release(struct pci_host_bridge *bridge,
     void (*release_fn)(struct pci_host_bridge *),
     void *release_data);

int pcibios_root_bridge_prepare(struct pci_host_bridge *bridge);
# 562 "../include/linux/pci.h"
struct pci_bus_resource {
 struct list_head list;
 struct resource *res;
 unsigned int flags;
};



struct pci_bus {
 struct list_head node;
 struct pci_bus *parent;
 struct list_head children;
 struct list_head devices;
 struct pci_dev *self;
 struct list_head slots;

 struct resource *resource[4];
 struct list_head resources;
 struct resource busn_res;

 struct pci_ops *ops;
 struct msi_controller *msi;
 void *sysdata;
 struct proc_dir_entry *procdir;

 unsigned char number;
 unsigned char primary;
 unsigned char max_bus_speed;
 unsigned char cur_bus_speed;

 int domain_nr;


 char name[48];

 unsigned short bridge_ctl;
 pci_bus_flags_t bus_flags;
 struct device *bridge;
 struct device dev;
 struct bin_attribute *legacy_io;
 struct bin_attribute *legacy_mem;
 unsigned int is_added:1;
};



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 pci_dev_id(struct pci_dev *dev)
{
 return ((((u16)(dev->bus->number)) << 8) | (dev->devfn));
}
# 621 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_root_bus(struct pci_bus *pbus)
{
 return !(pbus->parent);
}
# 633 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_bridge(struct pci_dev *dev)
{
 return dev->hdr_type == 1 ||
  dev->hdr_type == 2;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dev *pci_upstream_bridge(struct pci_dev *dev)
{
 dev = pci_physfn(dev);
 if (pci_is_root_bus(dev->bus))
  return ((void *)0);

 return dev->bus->self;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_dev_msi_enabled(struct pci_dev *pci_dev)
{
 return pci_dev->msi_enabled || pci_dev->msix_enabled;
}
# 671 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcibios_err_to_errno(int err)
{
 if (err <= 0x00)
  return err;

 switch (err) {
 case 0x81:
  return -2;
 case 0x83:
  return -25;
 case 0x86:
  return -19;
 case 0x87:
  return -14;
 case 0x88:
  return -5;
 case 0x89:
  return -28;
 }

 return -34;
}



struct pci_ops {
 int (*add_bus)(struct pci_bus *bus);
 void (*remove_bus)(struct pci_bus *bus);
 void *(*map_bus)(struct pci_bus *bus, unsigned int devfn, int where);
 int (*read)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 *val);
 int (*write)(struct pci_bus *bus, unsigned int devfn, int where, int size, u32 val);
};





int raw_pci_read(unsigned int domain, unsigned int bus, unsigned int devfn,
   int reg, int len, u32 *val);
int raw_pci_write(unsigned int domain, unsigned int bus, unsigned int devfn,
    int reg, int len, u32 val);


typedef u64 pci_bus_addr_t;




struct pci_bus_region {
 pci_bus_addr_t start;
 pci_bus_addr_t end;
};

struct pci_dynids {
 spinlock_t lock;
 struct list_head list;
};
# 737 "../include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

enum pci_ers_result {

 PCI_ERS_RESULT_NONE = ( pci_ers_result_t) 1,


 PCI_ERS_RESULT_CAN_RECOVER = ( pci_ers_result_t) 2,


 PCI_ERS_RESULT_NEED_RESET = ( pci_ers_result_t) 3,


 PCI_ERS_RESULT_DISCONNECT = ( pci_ers_result_t) 4,


 PCI_ERS_RESULT_RECOVERED = ( pci_ers_result_t) 5,


 PCI_ERS_RESULT_NO_AER_DRIVER = ( pci_ers_result_t) 6,
};


struct pci_error_handlers {

 pci_ers_result_t (*error_detected)(struct pci_dev *dev,
        enum pci_channel_state error);


 pci_ers_result_t (*mmio_enabled)(struct pci_dev *dev);


 pci_ers_result_t (*slot_reset)(struct pci_dev *dev);


 void (*reset_prepare)(struct pci_dev *dev);
 void (*reset_done)(struct pci_dev *dev);


 void (*resume)(struct pci_dev *dev);
};


struct module;
# 825 "../include/linux/pci.h"
struct pci_driver {
 struct list_head node;
 const char *name;
 const struct pci_device_id *id_table;
 int (*probe)(struct pci_dev *dev, const struct pci_device_id *id);
 void (*remove)(struct pci_dev *dev);
 int (*suspend)(struct pci_dev *dev, pm_message_t state);
 int (*suspend_late)(struct pci_dev *dev, pm_message_t state);
 int (*resume_early)(struct pci_dev *dev);
 int (*resume)(struct pci_dev *dev);
 void (*shutdown)(struct pci_dev *dev);
 int (*sriov_configure)(struct pci_dev *dev, int num_vfs);
 const struct pci_error_handlers *err_handler;
 const struct attribute_group **groups;
 struct device_driver driver;
 struct pci_dynids dynids;
};
# 915 "../include/linux/pci.h"
enum {
 PCI_REASSIGN_ALL_RSRC = 0x00000001,
 PCI_REASSIGN_ALL_BUS = 0x00000002,
 PCI_PROBE_ONLY = 0x00000004,
 PCI_CAN_SKIP_ISA_ALIGN = 0x00000008,
 PCI_ENABLE_PROC_DOMAINS = 0x00000010,
 PCI_COMPAT_DOMAIN_0 = 0x00000020,
 PCI_SCAN_ALL_PCIE_DEVS = 0x00000040,
};
# 933 "../include/linux/pci.h"
extern unsigned int pci_flags;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_set_flags(int flags) { pci_flags = flags; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_add_flags(int flags) { pci_flags |= flags; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_clear_flags(int flags) { pci_flags &= ~flags; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_has_flag(int flag) { return pci_flags & flag; }

void pcie_bus_configure_settings(struct pci_bus *bus);

enum pcie_bus_config_types {
 PCIE_BUS_TUNE_OFF,
 PCIE_BUS_DEFAULT,
 PCIE_BUS_SAFE,
 PCIE_BUS_PERFORMANCE,
 PCIE_BUS_PEER2PEER,
};

extern enum pcie_bus_config_types pcie_bus_config;

extern struct bus_type pci_bus_type;



extern struct list_head pci_root_buses;

int no_pci_devices(void);

void pcibios_resource_survey_bus(struct pci_bus *bus);
void pcibios_bus_add_device(struct pci_dev *pdev);
void pcibios_add_bus(struct pci_bus *bus);
void pcibios_remove_bus(struct pci_bus *bus);
void pcibios_fixup_bus(struct pci_bus *);
int __attribute__((__warn_unused_result__)) pcibios_enable_device(struct pci_dev *, int mask);

char *pcibios_setup(char *str);


resource_size_t pcibios_align_resource(void *, const struct resource *,
    resource_size_t,
    resource_size_t);


void pci_fixup_cardbus(struct pci_bus *);



void pcibios_resource_to_bus(struct pci_bus *bus, struct pci_bus_region *region,
        struct resource *res);
void pcibios_bus_to_resource(struct pci_bus *bus, struct resource *res,
        struct pci_bus_region *region);
void pcibios_scan_specific_bus(int busn);
struct pci_bus *pci_find_bus(int domain, int busnr);
void pci_bus_add_devices(const struct pci_bus *bus);
struct pci_bus *pci_scan_bus(int bus, struct pci_ops *ops, void *sysdata);
struct pci_bus *pci_create_root_bus(struct device *parent, int bus,
        struct pci_ops *ops, void *sysdata,
        struct list_head *resources);
int pci_host_probe(struct pci_host_bridge *bridge);
int pci_bus_insert_busn_res(struct pci_bus *b, int bus, int busmax);
int pci_bus_update_busn_res_end(struct pci_bus *b, int busmax);
void pci_bus_release_busn_res(struct pci_bus *b);
struct pci_bus *pci_scan_root_bus(struct device *parent, int bus,
      struct pci_ops *ops, void *sysdata,
      struct list_head *resources);
int pci_scan_root_bus_bridge(struct pci_host_bridge *bridge);
struct pci_bus *pci_add_new_bus(struct pci_bus *parent, struct pci_dev *dev,
    int busnr);
struct pci_slot *pci_create_slot(struct pci_bus *parent, int slot_nr,
     const char *name,
     struct hotplug_slot *hotplug);
void pci_destroy_slot(struct pci_slot *slot);

void pci_dev_assign_slot(struct pci_dev *dev);



int pci_scan_slot(struct pci_bus *bus, int devfn);
struct pci_dev *pci_scan_single_device(struct pci_bus *bus, int devfn);
void pci_device_add(struct pci_dev *dev, struct pci_bus *bus);
unsigned int pci_scan_child_bus(struct pci_bus *bus);
void pci_bus_add_device(struct pci_dev *dev);
void pci_read_bridge_bases(struct pci_bus *child);
struct resource *pci_find_parent_resource(const struct pci_dev *dev,
       struct resource *res);
struct pci_dev *pci_find_pcie_root_port(struct pci_dev *dev);
u8 pci_swizzle_interrupt_pin(const struct pci_dev *dev, u8 pin);
int pci_get_interrupt_pin(struct pci_dev *dev, struct pci_dev **bridge);
u8 pci_common_swizzle(struct pci_dev *dev, u8 *pinp);
struct pci_dev *pci_dev_get(struct pci_dev *dev);
void pci_dev_put(struct pci_dev *dev);
void pci_remove_bus(struct pci_bus *b);
void pci_stop_and_remove_bus_device(struct pci_dev *dev);
void pci_stop_and_remove_bus_device_locked(struct pci_dev *dev);
void pci_stop_root_bus(struct pci_bus *bus);
void pci_remove_root_bus(struct pci_bus *bus);
void pci_setup_cardbus(struct pci_bus *bus);
void pcibios_setup_bridge(struct pci_bus *bus, unsigned long type);
void pci_sort_breadthfirst(void);





enum pci_lost_interrupt_reason {
 PCI_LOST_IRQ_NO_INFORMATION = 0,
 PCI_LOST_IRQ_DISABLE_MSI,
 PCI_LOST_IRQ_DISABLE_MSIX,
 PCI_LOST_IRQ_DISABLE_ACPI,
};
enum pci_lost_interrupt_reason pci_lost_interrupt(struct pci_dev *dev);
int pci_find_capability(struct pci_dev *dev, int cap);
int pci_find_next_capability(struct pci_dev *dev, u8 pos, int cap);
int pci_find_ext_capability(struct pci_dev *dev, int cap);
int pci_find_next_ext_capability(struct pci_dev *dev, int pos, int cap);
int pci_find_ht_capability(struct pci_dev *dev, int ht_cap);
int pci_find_next_ht_capability(struct pci_dev *dev, int pos, int ht_cap);
struct pci_bus *pci_find_next_bus(const struct pci_bus *from);

struct pci_dev *pci_get_device(unsigned int vendor, unsigned int device,
          struct pci_dev *from);
struct pci_dev *pci_get_subsys(unsigned int vendor, unsigned int device,
          unsigned int ss_vendor, unsigned int ss_device,
          struct pci_dev *from);
struct pci_dev *pci_get_slot(struct pci_bus *bus, unsigned int devfn);
struct pci_dev *pci_get_domain_bus_and_slot(int domain, unsigned int bus,
         unsigned int devfn);
struct pci_dev *pci_get_class(unsigned int class, struct pci_dev *from);
int pci_dev_present(const struct pci_device_id *ids);

int pci_bus_read_config_byte(struct pci_bus *bus, unsigned int devfn,
        int where, u8 *val);
int pci_bus_read_config_word(struct pci_bus *bus, unsigned int devfn,
        int where, u16 *val);
int pci_bus_read_config_dword(struct pci_bus *bus, unsigned int devfn,
         int where, u32 *val);
int pci_bus_write_config_byte(struct pci_bus *bus, unsigned int devfn,
         int where, u8 val);
int pci_bus_write_config_word(struct pci_bus *bus, unsigned int devfn,
         int where, u16 val);
int pci_bus_write_config_dword(struct pci_bus *bus, unsigned int devfn,
          int where, u32 val);

int pci_generic_config_read(struct pci_bus *bus, unsigned int devfn,
       int where, int size, u32 *val);
int pci_generic_config_write(struct pci_bus *bus, unsigned int devfn,
       int where, int size, u32 val);
int pci_generic_config_read32(struct pci_bus *bus, unsigned int devfn,
         int where, int size, u32 *val);
int pci_generic_config_write32(struct pci_bus *bus, unsigned int devfn,
          int where, int size, u32 val);

struct pci_ops *pci_bus_set_ops(struct pci_bus *bus, struct pci_ops *ops);

int pci_read_config_byte(const struct pci_dev *dev, int where, u8 *val);
int pci_read_config_word(const struct pci_dev *dev, int where, u16 *val);
int pci_read_config_dword(const struct pci_dev *dev, int where, u32 *val);
int pci_write_config_byte(const struct pci_dev *dev, int where, u8 val);
int pci_write_config_word(const struct pci_dev *dev, int where, u16 val);
int pci_write_config_dword(const struct pci_dev *dev, int where, u32 val);

int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val);
int pcie_capability_read_dword(struct pci_dev *dev, int pos, u32 *val);
int pcie_capability_write_word(struct pci_dev *dev, int pos, u16 val);
int pcie_capability_write_dword(struct pci_dev *dev, int pos, u32 val);
int pcie_capability_clear_and_set_word(struct pci_dev *dev, int pos,
           u16 clear, u16 set);
int pcie_capability_clear_and_set_dword(struct pci_dev *dev, int pos,
     u32 clear, u32 set);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_set_word(struct pci_dev *dev, int pos,
        u16 set)
{
 return pcie_capability_clear_and_set_word(dev, pos, 0, set);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_set_dword(struct pci_dev *dev, int pos,
         u32 set)
{
 return pcie_capability_clear_and_set_dword(dev, pos, 0, set);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_clear_word(struct pci_dev *dev, int pos,
          u16 clear)
{
 return pcie_capability_clear_and_set_word(dev, pos, clear, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pcie_capability_clear_dword(struct pci_dev *dev, int pos,
           u32 clear)
{
 return pcie_capability_clear_and_set_dword(dev, pos, clear, 0);
}


int pci_user_read_config_byte(struct pci_dev *dev, int where, u8 *val);
int pci_user_read_config_word(struct pci_dev *dev, int where, u16 *val);
int pci_user_read_config_dword(struct pci_dev *dev, int where, u32 *val);
int pci_user_write_config_byte(struct pci_dev *dev, int where, u8 val);
int pci_user_write_config_word(struct pci_dev *dev, int where, u16 val);
int pci_user_write_config_dword(struct pci_dev *dev, int where, u32 val);

int __attribute__((__warn_unused_result__)) pci_enable_device(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pci_enable_device_io(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pci_enable_device_mem(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pci_reenable_device(struct pci_dev *);
int __attribute__((__warn_unused_result__)) pcim_enable_device(struct pci_dev *pdev);
void pcim_pin_device(struct pci_dev *pdev);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_intx_mask_supported(struct pci_dev *pdev)
{




 return !pdev->broken_intx_masking;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_is_enabled(struct pci_dev *pdev)
{
 return (atomic_read(&pdev->enable_cnt) > 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_is_managed(struct pci_dev *pdev)
{
 return pdev->is_managed;
}

void pci_disable_device(struct pci_dev *dev);

extern unsigned int pcibios_max_latency;
void pci_set_master(struct pci_dev *dev);
void pci_clear_master(struct pci_dev *dev);

int pci_set_pcie_reset_state(struct pci_dev *dev, enum pcie_reset_state state);
int pci_set_cacheline_size(struct pci_dev *dev);

int __attribute__((__warn_unused_result__)) pci_set_mwi(struct pci_dev *dev);
int __attribute__((__warn_unused_result__)) pcim_set_mwi(struct pci_dev *dev);
int pci_try_set_mwi(struct pci_dev *dev);
void pci_clear_mwi(struct pci_dev *dev);
void pci_intx(struct pci_dev *dev, int enable);
bool pci_check_and_mask_intx(struct pci_dev *dev);
bool pci_check_and_unmask_intx(struct pci_dev *dev);
int pci_wait_for_pending(struct pci_dev *dev, int pos, u16 mask);
int pci_wait_for_pending_transaction(struct pci_dev *dev);
int pcix_get_max_mmrbc(struct pci_dev *dev);
int pcix_get_mmrbc(struct pci_dev *dev);
int pcix_set_mmrbc(struct pci_dev *dev, int mmrbc);
int pcie_get_readrq(struct pci_dev *dev);
int pcie_set_readrq(struct pci_dev *dev, int rq);
int pcie_get_mps(struct pci_dev *dev);
int pcie_set_mps(struct pci_dev *dev, int mps);
u32 pcie_bandwidth_available(struct pci_dev *dev, struct pci_dev **limiting_dev,
        enum pci_bus_speed *speed,
        enum pcie_link_width *width);
void pcie_print_link_status(struct pci_dev *dev);
bool pcie_has_flr(struct pci_dev *dev);
int pcie_flr(struct pci_dev *dev);
int __pci_reset_function_locked(struct pci_dev *dev);
int pci_reset_function(struct pci_dev *dev);
int pci_reset_function_locked(struct pci_dev *dev);
int pci_try_reset_function(struct pci_dev *dev);
int pci_probe_reset_slot(struct pci_slot *slot);
int pci_probe_reset_bus(struct pci_bus *bus);
int pci_reset_bus(struct pci_dev *dev);
void pci_reset_secondary_bus(struct pci_dev *dev);
void pcibios_reset_secondary_bus(struct pci_dev *dev);
void pci_update_resource(struct pci_dev *dev, int resno);
int __attribute__((__warn_unused_result__)) pci_assign_resource(struct pci_dev *dev, int i);
int __attribute__((__warn_unused_result__)) pci_reassign_resource(struct pci_dev *dev, int i, resource_size_t add_size, resource_size_t align);
void pci_release_resource(struct pci_dev *dev, int resno);
int __attribute__((__warn_unused_result__)) pci_resize_resource(struct pci_dev *dev, int i, int size);
int pci_select_bars(struct pci_dev *dev, unsigned long flags);
bool pci_device_is_present(struct pci_dev *pdev);
void pci_ignore_hotplug(struct pci_dev *dev);

int __attribute__((__format__(printf, 6, 7))) pci_request_irq(struct pci_dev *dev, unsigned int nr,
  irq_handler_t handler, irq_handler_t thread_fn, void *dev_id,
  const char *fmt, ...);
void pci_free_irq(struct pci_dev *dev, unsigned int nr, void *dev_id);


int pci_enable_rom(struct pci_dev *pdev);
void pci_disable_rom(struct pci_dev *pdev);
void __attribute__((__warn_unused_result__)) *pci_map_rom(struct pci_dev *pdev, size_t *size);
void pci_unmap_rom(struct pci_dev *pdev, void *rom);
void __attribute__((__warn_unused_result__)) *pci_platform_rom(struct pci_dev *pdev, size_t *size);


int pci_save_state(struct pci_dev *dev);
void pci_restore_state(struct pci_dev *dev);
struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev);
int pci_load_saved_state(struct pci_dev *dev,
    struct pci_saved_state *state);
int pci_load_and_free_saved_state(struct pci_dev *dev,
      struct pci_saved_state **state);
struct pci_cap_saved_state *pci_find_saved_cap(struct pci_dev *dev, char cap);
struct pci_cap_saved_state *pci_find_saved_ext_cap(struct pci_dev *dev,
         u16 cap);
int pci_add_cap_save_buffer(struct pci_dev *dev, char cap, unsigned int size);
int pci_add_ext_cap_save_buffer(struct pci_dev *dev,
    u16 cap, unsigned int size);
int __pci_complete_power_transition(struct pci_dev *dev, pci_power_t state);
int pci_set_power_state(struct pci_dev *dev, pci_power_t state);
pci_power_t pci_choose_state(struct pci_dev *dev, pm_message_t state);
bool pci_pme_capable(struct pci_dev *dev, pci_power_t state);
void pci_pme_active(struct pci_dev *dev, bool enable);
int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable);
int pci_wake_from_d3(struct pci_dev *dev, bool enable);
int pci_prepare_to_sleep(struct pci_dev *dev);
int pci_back_from_sleep(struct pci_dev *dev);
bool pci_dev_run_wake(struct pci_dev *dev);
void pci_d3cold_enable(struct pci_dev *dev);
void pci_d3cold_disable(struct pci_dev *dev);
bool pcie_relaxed_ordering_enabled(struct pci_dev *dev);
void pci_wakeup_bus(struct pci_bus *bus);
void pci_bus_set_current_state(struct pci_bus *bus, pci_power_t state);


void set_pcie_port_type(struct pci_dev *pdev);
void set_pcie_hotplug_bridge(struct pci_dev *pdev);


int pci_bus_find_capability(struct pci_bus *bus, unsigned int devfn, int cap);
unsigned int pci_rescan_bus_bridge_resize(struct pci_dev *bridge);
unsigned int pci_rescan_bus(struct pci_bus *bus);
void pci_lock_rescan_remove(void);
void pci_unlock_rescan_remove(void);


ssize_t pci_read_vpd(struct pci_dev *dev, loff_t pos, size_t count, void *buf);
ssize_t pci_write_vpd(struct pci_dev *dev, loff_t pos, size_t count, const void *buf);
int pci_set_vpd_size(struct pci_dev *dev, size_t len);


resource_size_t pcibios_retrieve_fw_addr(struct pci_dev *dev, int idx);
void pci_bus_assign_resources(const struct pci_bus *bus);
void pci_bus_claim_resources(struct pci_bus *bus);
void pci_bus_size_bridges(struct pci_bus *bus);
int pci_claim_resource(struct pci_dev *, int);
int pci_claim_bridge_resource(struct pci_dev *bridge, int i);
void pci_assign_unassigned_resources(void);
void pci_assign_unassigned_bridge_resources(struct pci_dev *bridge);
void pci_assign_unassigned_bus_resources(struct pci_bus *bus);
void pci_assign_unassigned_root_bus_resources(struct pci_bus *bus);
int pci_reassign_bridge_resources(struct pci_dev *bridge, unsigned long type);
void pdev_enable_device(struct pci_dev *);
int pci_enable_resources(struct pci_dev *, int mask);
void pci_assign_irq(struct pci_dev *dev);
struct resource *pci_find_resource(struct pci_dev *dev, struct resource *res);

int __attribute__((__warn_unused_result__)) pci_request_regions(struct pci_dev *, const char *);
int __attribute__((__warn_unused_result__)) pci_request_regions_exclusive(struct pci_dev *, const char *);
void pci_release_regions(struct pci_dev *);
int __attribute__((__warn_unused_result__)) pci_request_region(struct pci_dev *, int, const char *);
void pci_release_region(struct pci_dev *, int);
int pci_request_selected_regions(struct pci_dev *, int, const char *);
int pci_request_selected_regions_exclusive(struct pci_dev *, int, const char *);
void pci_release_selected_regions(struct pci_dev *, int);


void pci_add_resource(struct list_head *resources, struct resource *res);
void pci_add_resource_offset(struct list_head *resources, struct resource *res,
        resource_size_t offset);
void pci_free_resource_list(struct list_head *resources);
void pci_bus_add_resource(struct pci_bus *bus, struct resource *res,
     unsigned int flags);
struct resource *pci_bus_resource_n(const struct pci_bus *bus, int n);
void pci_bus_remove_resources(struct pci_bus *bus);
int devm_request_pci_bus_resources(struct device *dev,
       struct list_head *resources);


int pci_bridge_secondary_bus_reset(struct pci_dev *dev);






int __attribute__((__warn_unused_result__)) pci_bus_alloc_resource(struct pci_bus *bus,
   struct resource *res, resource_size_t size,
   resource_size_t align, resource_size_t min,
   unsigned long type_mask,
   resource_size_t (*alignf)(void *,
        const struct resource *,
        resource_size_t,
        resource_size_t),
   void *alignf_data);


int pci_register_io_range(struct fwnode_handle *fwnode, phys_addr_t addr,
   resource_size_t size);
unsigned long pci_address_to_pio(phys_addr_t addr);
phys_addr_t pci_pio_to_address(unsigned long pio);
int pci_remap_iospace(const struct resource *res, phys_addr_t phys_addr);
int devm_pci_remap_iospace(struct device *dev, const struct resource *res,
      phys_addr_t phys_addr);
void pci_unmap_iospace(struct resource *res);
void *devm_pci_remap_cfgspace(struct device *dev,
          resource_size_t offset,
          resource_size_t size);
void *devm_pci_remap_cfg_resource(struct device *dev,
       struct resource *res);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pci_bus_addr_t pci_bus_address(struct pci_dev *pdev, int bar)
{
 struct pci_bus_region region;

 pcibios_resource_to_bus(pdev->bus, &region, &pdev->resource[bar]);
 return region.start;
}


int __attribute__((__warn_unused_result__)) __pci_register_driver(struct pci_driver *, struct module *,
           const char *mod_name);





void pci_unregister_driver(struct pci_driver *dev);
# 1378 "../include/linux/pci.h"
struct pci_driver *pci_dev_driver(const struct pci_dev *dev);
int pci_add_dynid(struct pci_driver *drv,
    unsigned int vendor, unsigned int device,
    unsigned int subvendor, unsigned int subdevice,
    unsigned int class, unsigned int class_mask,
    unsigned long driver_data);
const struct pci_device_id *pci_match_id(const struct pci_device_id *ids,
      struct pci_dev *dev);
int pci_scan_bridge(struct pci_bus *bus, struct pci_dev *dev, int max,
      int pass);

void pci_walk_bus(struct pci_bus *top, int (*cb)(struct pci_dev *, void *),
    void *userdata);
int pci_cfg_space_size(struct pci_dev *dev);
unsigned char pci_bus_max_busnr(struct pci_bus *bus);
void pci_setup_bridge(struct pci_bus *bus);
resource_size_t pcibios_window_alignment(struct pci_bus *bus,
      unsigned long type);




int pci_set_vga_state(struct pci_dev *pdev, bool decode,
        unsigned int command_bits, u32 flags);
# 1416 "../include/linux/pci.h"
# 1 "../include/linux/dmapool.h" 1
# 14 "../include/linux/dmapool.h"
# 1 "../include/linux/scatterlist.h" 1







# 1 "../include/linux/mm.h" 1
# 18 "../include/linux/mm.h"
# 1 "../include/linux/range.h" 1




struct range {
 u64 start;
 u64 end;
};

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 19 "../include/linux/mm.h" 2


# 1 "../include/linux/bit_spinlock.h" 1
# 16 "../include/linux/bit_spinlock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 __asm__ __volatile__("" : : : "memory");

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("" : : : "memory");
  do {
   cpu_relax();
  } while (test_bit(bitnum, addr));
  __asm__ __volatile__("" : : : "memory");
 }

 (void)0;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 __asm__ __volatile__("" : : : "memory");

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("" : : : "memory");
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("" : : : "memory");
 (void)0;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 __clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("" : : : "memory");
 (void)0;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return test_bit(bitnum, addr);





}
# 22 "../include/linux/mm.h" 2
# 1 "../include/linux/shrinker.h" 1
# 12 "../include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;


 int nid;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 struct mem_cgroup *memcg;
};
# 60 "../include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 long batch;
 int seeks;
 unsigned flags;


 struct list_head list;


 int id;


 atomic_long_t *nr_deferred;
};






extern int prealloc_shrinker(struct shrinker *shrinker);
extern void register_shrinker_prepared(struct shrinker *shrinker);
extern int register_shrinker(struct shrinker *shrinker);
extern void unregister_shrinker(struct shrinker *shrinker);
extern void free_prealloced_shrinker(struct shrinker *shrinker);
# 23 "../include/linux/mm.h" 2

# 1 "../include/linux/page_ext.h" 1





# 1 "../include/linux/stacktrace.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 7 "../include/linux/stacktrace.h" 2

struct task_struct;
struct pt_regs;
# 85 "../include/linux/stacktrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int stack_trace_save_tsk_reliable(struct task_struct *tsk,
      unsigned long *store,
      unsigned int size)
{
 return -38;
}
# 7 "../include/linux/page_ext.h" 2
# 1 "../include/linux/stackdepot.h" 1
# 14 "../include/linux/stackdepot.h"
typedef u32 depot_stack_handle_t;

depot_stack_handle_t stack_depot_save(unsigned long *entries,
          unsigned int nr_entries, gfp_t gfp_flags);

unsigned int stack_depot_fetch(depot_stack_handle_t handle,
          unsigned long **entries);
# 8 "../include/linux/page_ext.h" 2

struct pglist_data;
struct page_ext_operations {
 size_t offset;
 size_t size;
 bool (*need)(void);
 void (*init)(void);
};
# 55 "../include/linux/page_ext.h"
struct page_ext;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgdat_page_ext_init(struct pglist_data *pgdat)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page_ext *lookup_page_ext(const struct page *page)
{
 return ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init(void)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ext_init_flatmem(void)
{
}
# 25 "../include/linux/mm.h" 2

# 1 "../include/linux/page_ref.h" 1
# 10 "../include/linux/page_ref.h"
extern struct tracepoint __tracepoint_page_ref_set;
extern struct tracepoint __tracepoint_page_ref_mod;
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
extern struct tracepoint __tracepoint_page_ref_mod_and_return;
extern struct tracepoint __tracepoint_page_ref_mod_unless;
extern struct tracepoint __tracepoint_page_ref_freeze;
extern struct tracepoint __tracepoint_page_ref_unfreeze;
# 41 "../include/linux/page_ref.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_set(struct page *page, int v)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod(struct page *page, int v)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_test(struct page *page, int v, int ret)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_and_return(struct page *page, int v, int ret)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_mod_unless(struct page *page, int v, int u)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_freeze(struct page *page, int v, int ret)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __page_ref_unfreeze(struct page *page, int v)
{
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_count(struct page *page)
{
 return atomic_read(&page->_refcount);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_count(struct page *page)
{
 return atomic_read(&compound_head(page)->_refcount);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_count(struct page *page, int v)
{
 atomic_set(&page->_refcount, v);
 if (false)
  __page_ref_set(page, v);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_page_count(struct page *page)
{
 set_page_count(page, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_add(struct page *page, int nr)
{
 atomic_add(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, nr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_sub(struct page *page, int nr)
{
 atomic_sub(nr, &page->_refcount);
 if (false)
  __page_ref_mod(page, -nr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_inc(struct page *page)
{
 atomic_inc(&page->_refcount);
 if (false)
  __page_ref_mod(page, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_dec(struct page *page)
{
 atomic_dec(&page->_refcount);
 if (false)
  __page_ref_mod(page, -1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_sub_and_test(struct page *page, int nr)
{
 int ret = atomic_sub_and_test(nr, &page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -nr, ret);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_inc_return(struct page *page)
{
 int ret = atomic_inc_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, 1, ret);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_and_test(struct page *page)
{
 int ret = atomic_dec_and_test(&page->_refcount);

 if (false)
  __page_ref_mod_and_test(page, -1, ret);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_dec_return(struct page *page)
{
 int ret = atomic_dec_return(&page->_refcount);

 if (false)
  __page_ref_mod_and_return(page, -1, ret);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_add_unless(struct page *page, int nr, int u)
{
 int ret = atomic_add_unless(&page->_refcount, nr, u);

 if (false)
  __page_ref_mod_unless(page, nr, ret);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_ref_freeze(struct page *page, int count)
{
 int ret = __builtin_expect(!!(atomic_cmpxchg(&page->_refcount, count, 0) == count), 1);

 if (false)
  __page_ref_freeze(page, count, ret);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_ref_unfreeze(struct page *page, int count)
{
 ((void)(sizeof(( long)(page_count(page) != 0))));
 ((void)(sizeof(( long)(count == 0))));

 atomic_set_release(&page->_refcount, count);
 if (false)
  __page_ref_unfreeze(page, count);
}
# 27 "../include/linux/mm.h" 2
# 1 "../include/linux/memremap.h" 1






struct resource;
struct device;
# 18 "../include/linux/memremap.h"
struct vmem_altmap {
 const unsigned long base_pfn;
 const unsigned long reserve;
 unsigned long free;
 unsigned long align;
 unsigned long alloc;
};
# 58 "../include/linux/memremap.h"
enum memory_type {

 MEMORY_DEVICE_PRIVATE = 1,
 MEMORY_DEVICE_FS_DAX,
 MEMORY_DEVICE_DEVDAX,
 MEMORY_DEVICE_PCI_P2PDMA,
};

struct dev_pagemap_ops {





 void (*page_free)(struct page *page);




 void (*kill)(struct dev_pagemap *pgmap);




 void (*cleanup)(struct dev_pagemap *pgmap);





 vm_fault_t (*migrate_to_ram)(struct vm_fault *vmf);
};
# 106 "../include/linux/memremap.h"
struct dev_pagemap {
 struct vmem_altmap altmap;
 struct resource res;
 struct percpu_ref *ref;
 struct percpu_ref internal_ref;
 struct completion done;
 enum memory_type type;
 unsigned int flags;
 const struct dev_pagemap_ops *ops;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vmem_altmap *pgmap_altmap(struct dev_pagemap *pgmap)
{
 if (pgmap->flags & (1 << 0))
  return &pgmap->altmap;
 return ((void *)0);
}
# 135 "../include/linux/memremap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *devm_memremap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{





 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/memremap.h\"; .popsection; .long 14472b - 14470b; .short 143; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return ERR_PTR(-6);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void devm_memunmap_pages(struct device *dev,
  struct dev_pagemap *pgmap)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dev_pagemap *get_dev_pagemap(unsigned long pfn,
  struct dev_pagemap *pgmap)
{
 return ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vmem_altmap_offset(struct vmem_altmap *altmap)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vmem_altmap_free(struct vmem_altmap *altmap,
  unsigned long nr_pfns)
{
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_dev_pagemap(struct dev_pagemap *pgmap)
{
 if (pgmap)
  percpu_ref_put(pgmap->ref);
}
# 28 "../include/linux/mm.h" 2



struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct file_ra_state;
struct user_struct;
struct writeback_control;
struct bdi_writeback;

void init_mm_internals(void);
# 49 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_max_mapnr(unsigned long limit) { }


extern atomic_long_t _totalram_pages;
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalram_pages(void)
{
 return (unsigned long)atomic_long_read(&_totalram_pages);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_inc(void)
{
 atomic_long_inc(&_totalram_pages);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_dec(void)
{
 atomic_long_dec(&_totalram_pages);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_add(long count)
{
 atomic_long_add(count, &_totalram_pages);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void totalram_pages_set(long val)
{
 atomic_long_set(&_totalram_pages, val);
}

extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern const int mmap_rnd_bits_min;
extern const int mmap_rnd_bits_max;
extern int mmap_rnd_bits __attribute__((__section__(".data..read_mostly")));


extern const int mmap_rnd_compat_bits_min;
extern const int mmap_rnd_compat_bits_max;
extern int mmap_rnd_compat_bits __attribute__((__section__(".data..read_mostly")));
# 150 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mm_zero_struct_page(struct page *page)
{
 unsigned long *_pp = (void *)page;


 do { extern void __compiletime_assert_155(void) ; if (!(!(sizeof(struct page) & 7))) __compiletime_assert_155(); } while (0);
 do { extern void __compiletime_assert_156(void) ; if (!(!(sizeof(struct page) < 56))) __compiletime_assert_156(); } while (0);
 do { extern void __compiletime_assert_157(void) ; if (!(!(sizeof(struct page) > 80))) __compiletime_assert_157(); } while (0);

 switch (sizeof(struct page)) {
 case 80:
  _pp[9] = 0;
 case 72:
  _pp[8] = 0;
 case 64:
  _pp[7] = 0;
 case 56:
  _pp[6] = 0;
  _pp[5] = 0;
  _pp[4] = 0;
  _pp[3] = 0;
  _pp[2] = 0;
  _pp[1] = 0;
  _pp[0] = 0;
 }
}
# 199 "../include/linux/mm.h"
extern int sysctl_max_map_count;

extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;

extern int sysctl_overcommit_memory;
extern int sysctl_overcommit_ratio;
extern unsigned long sysctl_overcommit_kbytes;

extern int overcommit_ratio_handler(struct ctl_table *, int, void *,
        size_t *, loff_t *);
extern int overcommit_kbytes_handler(struct ctl_table *, int, void *,
        size_t *, loff_t *);
# 232 "../include/linux/mm.h"
struct vm_area_struct *vm_area_alloc(struct mm_struct *);
struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
void vm_area_free(struct vm_area_struct *);
# 384 "../include/linux/mm.h"
extern pgprot_t protection_map[16];
# 417 "../include/linux/mm.h"
struct vm_fault {
 struct vm_area_struct *vma;
 unsigned int flags;
 gfp_t gfp_mask;
 unsigned long pgoff;
 unsigned long address;
 pmd_t *pmd;

 pud_t *pud;


 pte_t orig_pte;

 struct page *cow_page;
 struct mem_cgroup *memcg;
 struct page *page;





 pte_t *pte;



 spinlock_t *ptl;



 pgtable_t prealloc_pte;






};


enum page_entry_size {
 PE_SIZE_PTE = 0,
 PE_SIZE_PMD,
 PE_SIZE_PUD,
};






struct vm_operations_struct {
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);
 int (*split)(struct vm_area_struct * area, unsigned long addr);
 int (*mremap)(struct vm_area_struct * area);
 vm_fault_t (*fault)(struct vm_fault *vmf);
 vm_fault_t (*huge_fault)(struct vm_fault *vmf,
   enum page_entry_size pe_size);
 void (*map_pages)(struct vm_fault *vmf,
   unsigned long start_pgoff, unsigned long end_pgoff);
 unsigned long (*pagesize)(struct vm_area_struct * area);



 vm_fault_t (*page_mkwrite)(struct vm_fault *vmf);


 vm_fault_t (*pfn_mkwrite)(struct vm_fault *vmf);




 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);




 const char *(*name)(struct vm_area_struct *vma);
# 505 "../include/linux/mm.h"
 int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *new);
# 517 "../include/linux/mm.h"
 struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
     unsigned long addr);






 struct page *(*find_special_page)(struct vm_area_struct *vma,
       unsigned long addr);
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_init(struct vm_area_struct *vma, struct mm_struct *mm)
{
 static const struct vm_operations_struct dummy_vm_ops = {};

 memset(vma, 0, sizeof(*vma));
 vma->vm_mm = mm;
 vma->vm_ops = &dummy_vm_ops;
 INIT_LIST_HEAD(&vma->anon_vma_chain);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vma_set_anonymous(struct vm_area_struct *vma)
{
 vma->vm_ops = ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_anonymous(struct vm_area_struct *vma)
{
 return !vma->vm_ops;
}






bool vma_is_shmem(struct vm_area_struct *vma);




int vma_is_stack_for_current(struct vm_area_struct *vma);




struct mmu_gather;
struct inode;
# 587 "../include/linux/mm.h"
# 1 "../include/linux/huge_mm.h" 1




# 1 "../include/linux/sched/coredump.h" 1
# 17 "../include/linux/sched/coredump.h"
extern void set_dumpable(struct mm_struct *mm, int value);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __get_dumpable(unsigned long mm_flags)
{
 return mm_flags & ((1 << 2) - 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_dumpable(struct mm_struct *mm)
{
 return __get_dumpable(mm->flags);
}
# 6 "../include/linux/huge_mm.h" 2


# 1 "../include/linux/fs.h" 1





# 1 "../include/linux/wait_bit.h" 1
# 10 "../include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;
 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};




typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);

void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 49 "../include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int mode);
extern int bit_wait_io(struct wait_bit_key *key, int mode);
extern int bit_wait_timeout(struct wait_bit_key *key, int mode);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int mode);
# 70 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 95 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 121 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 149 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 178 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 202 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 228 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}

extern void init_wait_var_entry(struct wait_bit_queue_entry *wbq_entry, void *var, int flags);
extern void wake_up_var(void *var);
extern wait_queue_head_t *__var_waitqueue(void *p);
# 330 "../include/linux/wait_bit.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 asm volatile("dmb " "ish" : : : "memory");
 wake_up_bit(word, bit);
}
# 7 "../include/linux/fs.h" 2
# 1 "../include/linux/kdev_t.h" 1




# 1 "../include/uapi/linux/kdev_t.h" 1
# 6 "../include/linux/kdev_t.h" 2
# 24 "../include/linux/kdev_t.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "../include/linux/fs.h" 2
# 1 "../include/linux/dcache.h" 1







# 1 "../include/linux/rculist_bl.h" 1







# 1 "../include/linux/list_bl.h" 1
# 34 "../include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; }) & ~1UL);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_before(struct hlist_bl_node *n,
           struct hlist_bl_node *next)
{
 struct hlist_bl_node **pprev = next->pprev;

 n->pprev = pprev;
 n->next = next;
 next->pprev = &n->next;


 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) ((struct hlist_bl_node *) ((uintptr_t)n | ((uintptr_t)*pprev & 1UL))) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });


}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_behind(struct hlist_bl_node *n,
           struct hlist_bl_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 prev->next = n;

 if (n->next)
  n->next->pprev = &n->next;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

                                                    ;


 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "../include/linux/rculist_bl.h" 2


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
                                                    ;

                        ;
 do { uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); ; if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((h->first)) __val; char __c[1]; } __u = { .__val = ( typeof((h->first))) ((typeof(h->first))(_r_a_p__v)) }; __write_once_size(&((h->first)), __u.__c, sizeof((h->first))); __u.__val; }); else do { typeof(&h->first) __p = (&h->first); union { typeof(*&h->first) __val; char __c[1]; } __u = { .__val = ( typeof(*&h->first)) ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)) }; do { extern void __compiletime_assert_18(void) ; if (!((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long)))) __compiletime_assert_18(); } while (0); kasan_check_write(__p, sizeof(*&h->first)); switch (sizeof(*&h->first)) { case 1: asm volatile ("stlrb %w1, %0" : "=Q" (*__p) : "r" (*(__u8 *)__u.__c) : "memory"); break; case 2: asm volatile ("stlrh %w1, %0" : "=Q" (*__p) : "r" (*(__u16 *)__u.__c) : "memory"); break; case 4: asm volatile ("stlr %w1, %0" : "=Q" (*__p) : "r" (*(__u32 *)__u.__c) : "memory"); break; case 8: asm volatile ("stlr %1, %0" : "=Q" (*__p) : "r" (*(__u64 *)__u.__c) : "memory"); break; } } while (0); } while (0);

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ union { typeof((h->first)) __val; char __c[1]; } __u; if (1) __read_once_size(&((h->first)), __u.__c, sizeof((h->first))); else __read_once_size_nocheck(&((h->first)), __u.__c, sizeof((h->first))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 47 "../include/linux/rculist_bl.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_init_rcu(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  n->pprev = ((void *)0);
 }
}
# 74 "../include/linux/rculist_bl.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x122 + (0xdead000000000000UL));
}
# 99 "../include/linux/rculist_bl.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 9 "../include/linux/dcache.h" 2




# 1 "../include/linux/lockref.h" 1
# 25 "../include/linux/lockref.h"
struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_put_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 14 "../include/linux/dcache.h" 2
# 1 "../include/linux/stringhash.h" 1






# 1 "../include/linux/hash.h" 1





# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 7 "../include/linux/hash.h" 2
# 60 "../include/linux/hash.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 8 "../include/linux/stringhash.h" 2
# 42 "../include/linux/stringhash.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_64_generic(hash, 32);
}
# 66 "../include/linux/stringhash.h"
extern unsigned int __attribute__((__pure__)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "../include/linux/stringhash.h"
extern u64 __attribute__((__pure__)) hashlen_string(const void *salt, const char *name);
# 15 "../include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 47 "../include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const struct qstr empty_name;
extern const struct qstr slash_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long nr_negative;
 long dummy;
};
extern struct dentry_stat_t dentry_stat;
# 89 "../include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *);
} __attribute__((__aligned__((1 << (6)))));
# 221 "../include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_anon(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_anon(struct super_block *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((__format__(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(struct dentry *, char *, int);
extern char *dentry_path(struct dentry *, char *, int);
# 311 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 334 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int d_in_lookup(const struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 463 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 481 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int simple_positive(const struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 513 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 525 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return ({ union { typeof(dentry->d_inode) __val; char __c[1]; } __u; if (1) __read_once_size(&(dentry->d_inode), __u.__c, sizeof(dentry->d_inode)); else __read_once_size_nocheck(&(dentry->d_inode), __u.__c, sizeof(dentry->d_inode)); do { } while (0); __u.__val; });
}
# 540 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 557 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 572 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode);
 else
  return dentry;
}
# 588 "../include/linux/dcache.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0)));
}

struct name_snapshot {
 struct qstr name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "../include/linux/fs.h" 2
# 1 "../include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void path_put_init(struct path *path)
{
 path_put(path);
 *path = (struct path) { };
}
# 10 "../include/linux/fs.h" 2



# 1 "../include/linux/list_lru.h" 1
# 15 "../include/linux/list_lru.h"
struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {
 struct callback_head rcu;

 struct list_lru_one *lru[0];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
} __attribute__((__aligned__((1 << (6)))));

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 int shrinker_id;
 bool memcg_aware;

};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key, struct shrinker *shrinker);
# 72 "../include/linux/list_lru.h"
int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg);
# 91 "../include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 104 "../include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 116 "../include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY]))))
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 166 "../include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
# 183 "../include/linux/list_lru.h"
unsigned long list_lru_walk_one_irq(struct list_lru *lru,
        int nid, struct mem_cgroup *memcg,
        list_lru_walk_cb isolate, void *cb_arg,
        unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_shrink_walk_irq(struct list_lru *lru, struct shrink_control *sc,
    list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one_irq(lru, sc->nid, sc->memcg, isolate, cb_arg,
         &sc->nr_to_scan);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for (((nid)) = __first_node(&(node_states[N_NORMAL_MEMORY])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_NORMAL_MEMORY])))) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "../include/linux/fs.h" 2
# 24 "../include/linux/fs.h"
# 1 "../include/linux/capability.h" 1
# 16 "../include/linux/capability.h"
# 1 "../include/uapi/linux/capability.h" 1
# 39 "../include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "../include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "../include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
 kuid_t rootid;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 118 "../include/linux/capability.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 166 "../include/linux/capability.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
extern bool ns_capable_setid(struct user_namespace *ns, int cap);
# 250 "../include/linux/capability.h"
extern bool privileged_wrt_inode_uidgid(struct user_namespace *ns, const struct inode *inode);
extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);


extern int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps);

extern int cap_convert_nscap(struct dentry *dentry, void **ivalue, size_t size);
# 25 "../include/linux/fs.h" 2
# 1 "../include/linux/semaphore.h" 1
# 15 "../include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 31 "../include/linux/semaphore.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_interruptible(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_killable(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_trylock(struct semaphore *sem);
extern int __attribute__((__warn_unused_result__)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 26 "../include/linux/fs.h" 2
# 1 "../include/linux/fcntl.h" 1




# 1 "../include/uapi/linux/fcntl.h" 1




# 1 "../arch/arm64/include/uapi/asm/fcntl.h" 1
# 28 "../arch/arm64/include/uapi/asm/fcntl.h"
# 1 "../include/uapi/asm-generic/fcntl.h" 1
# 156 "../include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 196 "../include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 29 "../arch/arm64/include/uapi/asm/fcntl.h" 2
# 6 "../include/uapi/linux/fcntl.h" 2
# 6 "../include/linux/fcntl.h" 2
# 27 "../include/linux/fs.h" 2
# 1 "../include/uapi/linux/fiemap.h" 1
# 17 "../include/uapi/linux/fiemap.h"
struct fiemap_extent {
 __u64 fe_logical;

 __u64 fe_physical;

 __u64 fe_length;
 __u64 fe_reserved64[2];
 __u32 fe_flags;
 __u32 fe_reserved[3];
};

struct fiemap {
 __u64 fm_start;

 __u64 fm_length;

 __u32 fm_flags;
 __u32 fm_mapped_extents;
 __u32 fm_extent_count;
 __u32 fm_reserved;
 struct fiemap_extent fm_extents[0];
};
# 28 "../include/linux/fs.h" 2



# 1 "../include/linux/migrate_mode.h" 1
# 15 "../include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};
# 32 "../include/linux/fs.h" 2


# 1 "../include/linux/percpu-rwsem.h" 1







# 1 "../include/linux/rcuwait.h" 1
# 20 "../include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}

extern void rcuwait_wake_up(struct rcuwait *w);
# 9 "../include/linux/percpu-rwsem.h" 2
# 1 "../include/linux/rcu_sync.h" 1
# 17 "../include/linux/rcu_sync.h"
struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 struct callback_head cb_head;
};
# 32 "../include/linux/rcu_sync.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{
 do { } while (0);

 return !({ union { typeof(rsp->gp_state) __val; char __c[1]; } __u; if (1) __read_once_size(&(rsp->gp_state), __u.__c, sizeof(rsp->gp_state)); else __read_once_size_nocheck(&(rsp->gp_state), __u.__c, sizeof(rsp->gp_state)); do { } while (0); __u.__val; });
}

extern void rcu_sync_init(struct rcu_sync *);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "../include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rw_semaphore rw_sem;
 struct rcuwait writer;
 int readers_block;
};
# 33 "../include/linux/percpu-rwsem.h"
extern int __percpu_down_read(struct percpu_rw_semaphore *, int);
extern void __percpu_up_read(struct percpu_rw_semaphore *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 do { do { } while (0); } while (0);

 do { } while (0);

 __asm__ __volatile__("" : : : "memory");
# 51 "../include/linux/percpu-rwsem.h"
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  __percpu_down_read(sem, false);




 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 int ret = 1;

 __asm__ __volatile__("" : : : "memory");



 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  ret = __percpu_down_read(sem, true);
 __asm__ __volatile__("" : : : "memory");





 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 __asm__ __volatile__("" : : : "memory");



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count))); (typeof((typeof(*(&(*sem->read_count))) *)(&(*sem->read_count)))) (__ptr + ((__my_cpu_offset()))); }); }) += -(typeof(*sem->read_count))(1); } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 else
  __percpu_up_read(sem);
 __asm__ __volatile__("" : : : "memory");

 do { } while (0);
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 118 "../include/linux/percpu-rwsem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);

 if (!read)
  atomic_long_set(&sem->rw_sem.owner, (-2L));

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);

 if (!read)
  atomic_long_set(&sem->rw_sem.owner, (long)get_current());

}
# 35 "../include/linux/fs.h" 2

# 1 "../include/linux/delayed_call.h" 1
# 10 "../include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 37 "../include/linux/fs.h" 2

# 1 "../include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 39 "../include/linux/fs.h" 2
# 1 "../include/linux/ioprio.h" 1





# 1 "../include/linux/sched/rt.h" 1






struct task_struct;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_prio(int prio)
{
 if (__builtin_expect(!!(prio < 100), 0))
  return 1;
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_task(struct task_struct *p)
{
 return rt_prio(p->prio);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_is_realtime(struct task_struct *tsk)
{
 int policy = tsk->policy;

 if (policy == 1 || policy == 2)
  return true;
 if (policy == 6)
  return true;
 return false;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *rt_mutex_get_top_task(struct task_struct *p)
{
 return p->pi_top_task;
}
extern void rt_mutex_setprio(struct task_struct *p, struct task_struct *pi_task);
extern void rt_mutex_adjust_pi(struct task_struct *p);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool tsk_is_pi_blocked(struct task_struct *tsk)
{
 return tsk->pi_blocked_on != ((void *)0);
}
# 58 "../include/linux/sched/rt.h"
extern void normalize_rt_tasks(void);
# 7 "../include/linux/ioprio.h" 2
# 1 "../include/linux/iocontext.h" 1








enum {
 ICQ_EXITED = 1 << 2,
};
# 72 "../include/linux/iocontext.h"
struct io_cq {
 struct request_queue *q;
 struct io_context *ioc;







 union {
  struct list_head q_node;
  struct kmem_cache *__rcu_icq_cache;
 };
 union {
  struct hlist_node ioc_node;
  struct callback_head __rcu_head;
 };

 unsigned int flags;
};





struct io_context {
 atomic_long_t refcount;
 atomic_t active_ref;
 atomic_t nr_tasks;


 spinlock_t lock;

 unsigned short ioprio;




 int nr_batch_requests;
 unsigned long last_waited;

 struct xarray icq_tree;
 struct io_cq *icq_hint;
 struct hlist_head icq_list;

 struct work_struct release_work;
};
# 129 "../include/linux/iocontext.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_io_context_active(struct io_context *ioc)
{
 ({ int __ret_warn_on = !!(atomic_long_read(&ioc->refcount) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/iocontext.h\"; .popsection; .long 14472b - 14470b; .short 131; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(atomic_read(&ioc->active_ref) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/iocontext.h\"; .popsection; .long 14472b - 14470b; .short 132; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_long_inc(&ioc->refcount);
 atomic_inc(&ioc->active_ref);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ioc_task_link(struct io_context *ioc)
{
 get_io_context_active(ioc);

 ({ int __ret_warn_on = !!(atomic_read(&ioc->nr_tasks) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/iocontext.h\"; .popsection; .long 14472b - 14470b; .short 141; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 atomic_inc(&ioc->nr_tasks);
}

struct task_struct;

void put_io_context(struct io_context *ioc);
void put_io_context_active(struct io_context *ioc);
void exit_io_context(struct task_struct *task);
struct io_context *get_task_io_context(struct task_struct *task,
           gfp_t gfp_flags, int node);
# 8 "../include/linux/ioprio.h" 2
# 27 "../include/linux/ioprio.h"
enum {
 IOPRIO_CLASS_NONE,
 IOPRIO_CLASS_RT,
 IOPRIO_CLASS_BE,
 IOPRIO_CLASS_IDLE,
};






enum {
 IOPRIO_WHO_PROCESS = 1,
 IOPRIO_WHO_PGRP,
 IOPRIO_WHO_USER,
};
# 54 "../include/linux/ioprio.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioprio(struct task_struct *task)
{
 return (task_nice(task) + 20) / 5;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int task_nice_ioclass(struct task_struct *task)
{
 if (task->policy == 5)
  return IOPRIO_CLASS_IDLE;
 else if (task_is_realtime(task))
  return IOPRIO_CLASS_RT;
 else
  return IOPRIO_CLASS_BE;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_current_ioprio(void)
{
 struct io_context *ioc = get_current()->io_context;

 if (ioc)
  return ioc->ioprio;
 return (((IOPRIO_CLASS_NONE) << (13)) | 0);
}




extern int ioprio_best(unsigned short aprio, unsigned short bprio);

extern int set_task_ioprio(struct task_struct *task, int ioprio);


extern int ioprio_check_cap(int ioprio);
# 40 "../include/linux/fs.h" 2
# 1 "../include/linux/fs_types.h" 1
# 71 "../include/linux/fs_types.h"
extern unsigned char fs_ftype_to_dtype(unsigned int filetype);
extern unsigned char fs_umode_to_ftype(umode_t mode);
extern unsigned char fs_umode_to_dtype(umode_t mode);
# 41 "../include/linux/fs.h" 2




# 1 "../include/uapi/linux/fs.h" 1
# 54 "../include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};







struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 285 "../include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 46 "../include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct export_operations;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;
struct fs_context;
struct fs_parameter_description;

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) inode_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 224 "../include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec64 ia_atime;
 struct timespec64 ia_mtime;
 struct timespec64 ia_ctime;






 struct file *ia_file;
};





# 1 "../include/linux/quota.h" 1
# 40 "../include/linux/quota.h"
# 1 "../include/linux/percpu_counter.h" 1
# 20 "../include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "../include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{
 s64 ret = fbc->count;

 __asm__ __volatile__("" : : : "memory");
 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 177 "../include/linux/percpu_counter.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 41 "../include/linux/quota.h" 2

# 1 "../include/uapi/linux/dqblk_xfs.h" 1
# 53 "../include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;

 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s32 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 149 "../include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 192 "../include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u64 qs_pad2[8];
};
# 43 "../include/linux/quota.h" 2
# 1 "../include/linux/dqblk_v1.h" 1
# 44 "../include/linux/quota.h" 2
# 1 "../include/linux/dqblk_v2.h" 1








# 1 "../include/linux/dqblk_qtree.h" 1
# 18 "../include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "../include/linux/dqblk_v2.h" 2
# 45 "../include/linux/quota.h" 2



# 1 "../include/linux/projid.h" 1
# 17 "../include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
# 49 "../include/linux/quota.h" 2
# 1 "../include/uapi/linux/quota.h" 1
# 90 "../include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "../include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "../include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "../include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "../include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "../include/linux/quota.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/quota.h\"; .popsection; .long 14472b - 14470b; .short 114; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/quota.h\"; .popsection; .long 14472b - 14470b; .short 141; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
 }
 return kqid;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "../include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int info_dirty(struct mem_dqinfo *info)
{
 return test_bit(DQF_INFO_DIRTY_B, &info->dqi_flags);
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 int stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats dqstats;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 294 "../include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 395 "../include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;
 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 463 "../include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 490 "../include/linux/quota.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { extern void __compiletime_assert_503(void) ; if (!(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0)))) __compiletime_assert_503(); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype)
{
 return;
}


struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 246 "../include/linux/fs.h" 2
# 279 "../include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 292 "../include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;





enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 318 "../include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;




 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
 u16 ki_hint;
 u16 ki_ioprio;
 unsigned int ki_cookie;


};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 349 "../include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);





 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);
# 444 "../include/linux/fs.h"
struct address_space {
 struct inode *host;
 struct xarray i_pages;
 gfp_t gfp_mask;
 atomic_t i_mmap_writable;
 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;
 unsigned long nrpages;
 unsigned long nrexceptional;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 errseq_t wb_err;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;
} __attribute__((aligned(sizeof(long)))) ;





struct request_queue;

struct block_device {
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 struct mutex bd_mutex;
 void * bd_claiming;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;

 struct list_head bd_holder_disks;

 struct block_device * bd_contains;
 unsigned bd_block_size;
 u8 bd_partno;
 struct hd_struct * bd_part;

 unsigned bd_part_count;
 int bd_invalidated;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;
 struct backing_dev_info *bd_bdi;
 struct list_head bd_list;






 unsigned long bd_private;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
} ;
# 514 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mapping_tagged(struct address_space *mapping, xa_mark_t tag)
{
 return xa_marked(&mapping->i_pages, tag);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ union { typeof((&mapping->i_mmap.rb_root)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); else __read_once_size_nocheck(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0));
}
# 556 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 594 "../include/linux/fs.h"
struct posix_acl;



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec64 i_atime;
 struct timespec64 i_mtime;
 struct timespec64 i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 u8 i_blkbits;
 u8 i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;

 struct bdi_writeback *i_wb;


 int i_wb_frn_winner;
 u16 i_wb_frn_avg_time;
 u16 i_wb_frn_history;

 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 atomic64_t i_version;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;

 atomic_t i_readcount;

 union {
  const struct file_operations *i_fop;
  void (*free_inode)(struct inode *);
 };
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct block_device *i_bdev;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;



 struct fscrypt_info *i_crypt_info;






 void *i_private;
} ;

struct timespec64 timestamp_truncate(struct timespec64 t, struct inode *inode);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_fake_hash(struct inode *inode)
{
 hlist_add_fake(&inode->i_hash);
}
# 774 "../include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_lock_shared_nested(struct inode *inode, unsigned subclass)
{
 down_read(&inode->i_rwsem);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);
# 842 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t i_size_read(const struct inode *inode)
{
# 861 "../include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 883 "../include/linux/fs.h"
 inode->i_size = i_size;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

extern struct block_device *I_BDEV(struct inode *inode);

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};




struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;


 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct list_head f_ep_links;
 struct list_head f_tfile_llink;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[0];
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 1020 "../include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
bool locks_in_grace(struct net *);
bool opens_in_grace(struct net *);



# 1 "../include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 1056 "../include/linux/fs.h" 2
# 1074 "../include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_blocker;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_blocked_requests;


 struct list_head fl_blocked_member;


 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
   unsigned int debug_id;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1126 "../include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);




extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int locks_delete_block(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec64 *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);
struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1306 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(file_inode(filp), fl);
}

struct fasync_struct {
 rwlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1397 "../include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;

 const struct fscrypt_operations *s_cop;
 struct key *s_master_keys;




 struct hlist_bl_head s_roots;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;






 void *s_fs_info;


 u32 s_time_gran;

 time64_t s_time_min;
 time64_t s_time_max;

 __u32 s_fsnotify_mask;
 struct fsnotify_mark_connector *s_fsnotify_marks;


 char s_id[32];
 uuid_t s_uuid;

 unsigned int s_max_links;
 fmode_t s_mode;





 struct mutex s_vfs_rename_mutex;





 const char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;


 atomic_long_t s_fsnotify_inode_refs;


 int s_readonly_remount;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;






 struct list_lru s_dentry_lru;
 struct list_lru s_inode_lru;
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << (6)))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}

extern struct timespec64 timespec64_trunc(struct timespec64 t, unsigned gran);
extern struct timespec64 current_time(struct inode *inode);





void __sb_end_write(struct super_block *sb, int level);
int __sb_start_write(struct super_block *sb, int level, bool wait);
# 1590 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1602 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1614 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1638 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_WRITE, false);
}
# 1667 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT, true);
}
# 1685 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS, true);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sb_start_intwrite_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_FS, false);
}


extern bool inode_owner_or_capable(const struct inode *inode);




extern int vfs_create(struct inode *, struct dentry *, umode_t, bool);
extern int vfs_mkdir(struct inode *, struct dentry *, umode_t);
extern int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_symlink(struct inode *, struct dentry *, const char *);
extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rmdir(struct inode *, struct dentry *);
extern int vfs_unlink(struct inode *, struct dentry *, struct inode **);
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
extern int vfs_whiteout(struct inode *, struct dentry *);

extern struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode,
      int open_flag);

int vfs_mkobj(struct dentry *, umode_t,
  int (*f)(struct dentry *, umode_t, void *),
  void *);

extern long vfs_ioctl(struct file *file, unsigned int cmd, unsigned long arg);




extern void inode_init_owner(struct inode *inode, const struct inode *dir,
   umode_t mode);
extern bool may_open_dev(const struct path *path);



struct fiemap_extent_info {
 unsigned int fi_flags;
 unsigned int fi_extents_mapped;
 unsigned int fi_extents_max;
 struct fiemap_extent *fi_extents_start;

};
int fiemap_fill_next_extent(struct fiemap_extent_info *info, u64 logical,
       u64 phys, u64 len, u32 flags);
int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags);







struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 filldir_t actor;
 loff_t pos;
};

struct block_device_operations;
# 1802 "../include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iopoll)(struct kiocb *kiocb, bool spin);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 __poll_t (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 unsigned long mmap_supported_flags;
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 loff_t (*remap_file_range)(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
 int (*fadvise)(struct file *, loff_t, loff_t, int);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct inode *,struct dentry *, umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct inode *,struct dentry *,const char *);
 int (*mkdir) (struct inode *,struct dentry *,umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
 int (*rename) (struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct dentry *, struct iattr *);
 int (*getattr) (const struct path *, struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec64 *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode);
 int (*tmpfile) (struct inode *, struct dentry *, umode_t);
 int (*set_acl)(struct inode *, struct posix_acl *, int);
} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

ssize_t rw_copy_check_uvector(int type, const struct iovec * uvector,
         unsigned long nr_segs, unsigned long fast_segs,
         struct iovec *fast_pointer,
         struct iovec **ret_pointer);

extern ssize_t __vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_readv(struct file *, const struct iovec *,
  unsigned long, loff_t *, rwf_t);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern ssize_t generic_copy_file_range(struct file *file_in, loff_t pos_in,
           struct file *file_out, loff_t pos_out,
           size_t len, unsigned int flags);
extern int generic_remap_file_range_prep(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t *count,
      unsigned int remap_flags);
extern loff_t do_clone_file_range(struct file *file_in, loff_t pos_in,
      struct file *file_out, loff_t pos_out,
      loff_t len, unsigned int remap_flags);
extern loff_t vfs_clone_file_range(struct file *file_in, loff_t pos_in,
       struct file *file_out, loff_t pos_out,
       loff_t len, unsigned int remap_flags);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);
extern loff_t vfs_dedupe_file_range_one(struct file *src_file, loff_t src_pos,
     struct file *dst_file, loff_t dst_pos,
     loff_t len, unsigned int remap_flags);


struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);
 void (*free_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 2000 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 2030 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool HAS_UNMAPPED_ID(struct inode *inode)
{
 return !uid_valid(inode->i_uid) || !gid_valid(inode->i_gid);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 ki_hint_validate(enum rw_hint hint)
{
 typeof(((struct kiocb *)0)->ki_hint) max_hint = -1;

 if (hint <= max_hint)
  return hint;
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = ki_hint_validate(file_write_hint(filp)),
  .ki_ioprio = get_current_ioprio(),
 };
}
# 2152 "../include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (((1 << 0) | (1 << 1)) | (1 << 2)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern bool atime_needs_update(const struct path *, struct inode *);
extern void touch_atime(const struct path *);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

extern int file_modified(struct file *file);

int sync_inode(struct inode *inode, struct writeback_control *wbc);
int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;






 int (*init_fs_context)(struct fs_context *);
 const struct fs_parameter_description *parameters;
 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;
};




extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
# 2242 "../include/linux/fs.h"
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);

void kill_block_super(struct super_block *sb);






void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int set_anon_super_fc(struct super_block *s, struct fs_context *fc);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_fc(struct fs_context *fc,
       int (*test)(struct super_block *, struct fs_context *),
       int (*set)(struct super_block *, struct fs_context *));
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
# 2291 "../include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount(struct file_system_type *);
extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((__format__(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec64 *, int);


extern struct kobject *fs_kobj;




extern int locks_mandatory_locked(struct file *);
extern int locks_mandatory_area(struct inode *, struct file *, loff_t, loff_t, unsigned char);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __mandatory_lock(struct inode *ino)
{
 return (ino->i_mode & (0002000 | 00010)) == 0002000;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mandatory_lock(struct inode *ino)
{
 return ((ino)->i_sb->s_flags & (64)) && __mandatory_lock(ino);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_verify_locked(struct file *file)
{
 if (mandatory_lock(file_inode(file)))
  return locks_mandatory_locked(file);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int locks_verify_truncate(struct inode *inode,
        struct file *f,
        loff_t size)
{
 if (!inode->i_flctx || !mandatory_lock(inode))
  return 0;

 if (size < inode->i_size) {
  return locks_mandatory_area(inode, f, size, inode->i_size - 1,
    1);
 } else {
  return locks_mandatory_area(inode, f, inode->i_size, size - 1,
    1);
 }
}
# 2409 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_lease(struct inode *inode, unsigned int mode)
{






 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg(struct inode *inode, unsigned int mode)
{






 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int break_layout(struct inode *inode, bool wait)
{
 asm volatile("dmb " "ish" : : : "memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2499 "../include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 int refcnt;
 struct audit_names *aname;
 const char iname[];
};
_Static_assert(__builtin_offsetof(struct filename, iname) % sizeof(long) == 0, "offsetof(struct filename, iname) % sizeof(long) == 0");

extern long vfs_truncate(const struct path *, loff_t);
extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
         struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(struct dentry *, struct vfsmount *,
       const char *, int, umode_t);
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern struct file * open_with_fake_path(const struct path *, int,
      struct inode*, const struct cred *);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct file *file_clone_open(struct file *file)
{
 return dentry_open(&file->f_path, file->f_flags, file->f_cred);
}
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *));
extern int finish_no_open(struct file *file, struct dentry *dentry);



extern int ioctl_preallocate(struct file *filp, void *argp);


extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init_early(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;





extern int register_blkdev(unsigned int, const char *);
extern void unregister_blkdev(unsigned int, const char *);
extern void bdev_unhash_inode(dev_t dev);
extern struct block_device *bdget(dev_t);
extern struct block_device *bdgrab(struct block_device *bdev);
extern void bd_set_size(struct block_device *, loff_t size);
extern void bd_forget(struct inode *inode);
extern void bdput(struct block_device *);
extern void invalidate_bdev(struct block_device *);
extern void iterate_bdevs(void (*)(struct block_device *, void *), void *);
extern int sync_blockdev(struct block_device *bdev);
extern void kill_bdev(struct block_device *);
extern struct super_block *freeze_bdev(struct block_device *);
extern void emergency_thaw_all(void);
extern void emergency_thaw_bdev(struct super_block *sb);
extern int thaw_bdev(struct block_device *bdev, struct super_block *sb);
extern int fsync_bdev(struct block_device *);

extern struct super_block *blockdev_superblock;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return sb == blockdev_superblock;
}
# 2606 "../include/linux/fs.h"
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;

extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
extern int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
extern int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
extern struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
            void *holder);
extern struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode,
           void *holder);
extern struct block_device *bd_start_claiming(struct block_device *bdev,
           void *holder);
extern void bd_finish_claiming(struct block_device *bdev,
          struct block_device *whole, void *holder);
extern void bd_abort_claiming(struct block_device *bdev,
         struct block_device *whole, void *holder);
extern void blkdev_put(struct block_device *bdev, fmode_t mode);
extern int __blkdev_reread_part(struct block_device *bdev);
extern int blkdev_reread_part(struct block_device *bdev);


extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
extern void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk);
# 2653 "../include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}







extern const char *__bdevname(dev_t, char *buffer);
extern const char *bdevname(struct block_device *bdev, char *buffer);
extern struct block_device *lookup_bdev(const char *);
extern void blkdev_show(struct seq_file *,off_t);





extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);


extern void check_disk_size_change(struct gendisk *disk,
  struct block_device *bdev, bool verbose);
extern int revalidate_disk(struct gendisk *);
extern int check_disk_change(struct block_device *);
extern int __invalidate_device(struct block_device *, bool);
extern int invalidate_partition(struct gendisk *, int);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL >> 1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern int filemap_write_and_wait(struct address_space *mapping);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);

extern int __attribute__((__warn_unused_result__)) file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int __attribute__((__warn_unused_result__)) file_check_and_advance_wb_err(struct file *file);
extern int __attribute__((__warn_unused_result__)) file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL >> 1)));
}
# 2766 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2783 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2796 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);

extern int sync_file_range(struct file *file, loff_t offset, loff_t nbytes,
    unsigned int flags);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & (1 << 4)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & (1 << 5)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);

extern sector_t bmap(struct inode *, sector_t);

extern int notify_change(struct dentry *, struct iattr *, struct inode **);
extern int inode_permission(struct inode *, int);
extern int generic_permission(struct inode *, int);
extern int __check_sticky(struct inode *dir, struct inode *inode);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, false);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 2878 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_dec(struct inode *inode)
{
 do { if (__builtin_expect(!!(!atomic_read(&inode->i_readcount)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/fs.h\"; .popsection; .long 14472b - 14470b; .short 2904; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 atomic_dec(&inode->i_readcount);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i_readcount_inc(struct inode *inode)
{
 atomic_inc(&inode->i_readcount);
}
# 2921 "../include/linux/fs.h"
extern int do_pipe_flags(int *, int);
# 2937 "../include/linux/fs.h"
enum kernel_read_file_id {
 READING_UNKNOWN, READING_FIRMWARE, READING_FIRMWARE_PREALLOC_BUFFER, READING_MODULE, READING_KEXEC_IMAGE, READING_KEXEC_INITRAMFS, READING_POLICY, READING_X509_CERTIFICATE, READING_MAX_ID,
};

static const char * const kernel_read_file_str[] = {
 "unknown", "firmware", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "x509-certificate", "",
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *kernel_read_file_id_str(enum kernel_read_file_id id)
{
 if ((unsigned)id >= READING_MAX_ID)
  return kernel_read_file_str[READING_UNKNOWN];

 return kernel_read_file_str[id];
}

extern int kernel_read_file(struct file *, void **, loff_t *, loff_t,
       enum kernel_read_file_id);
extern int kernel_read_file_from_path(const char *, void **, loff_t *, loff_t,
          enum kernel_read_file_id);
extern int kernel_read_file_from_fd(int, void **, loff_t *, loff_t,
        enum kernel_read_file_id);
extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode *inode_insert5(struct inode *inode, unsigned long hashval,
  int (*test)(struct inode *, void *),
  int (*set)(struct inode *, void *),
  void *data);
extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern void discard_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);


extern int bdev_read_only(struct block_device *);

extern int set_blocksize(struct block_device *, int);
extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern int generic_remap_checks(struct file *file_in, loff_t pos_in,
    struct file *file_out, loff_t pos_out,
    loff_t *count, unsigned int remap_flags);
extern int generic_file_rw_checks(struct file *file_in, struct file *file_out);
extern int generic_copy_file_checks(struct file *file_in, loff_t pos_in,
        struct file *file_out, loff_t pos_out,
        size_t *count, unsigned int flags);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);


extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);
extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
   int datasync);
extern void block_sync_page(struct page *page);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,
};

void dio_end_io(struct bio *bio);
void dio_warn_stale_pagecache(struct file *filp);

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3146 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3158 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
extern void generic_fillattr(struct inode *, struct kstat *);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

extern int vfs_statx(int, const char *, int, struct kstat *, u32);
extern int vfs_statx_fd(unsigned int, struct kstat *, u32, unsigned int);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_statx(-100, filename, 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_statx(-100, name, 0x100 | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_fstatat(int dfd, const char *filename,
         struct kstat *stat, int flags)
{
 return vfs_statx(dfd, filename, flags | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vfs_fstat(int fd, struct kstat *stat)
{
 return vfs_statx_fd(fd, stat, 0x000007ffU, 0);
}


extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern int __generic_block_fiemap(struct inode *inode,
      struct fiemap_extent_info *fieinfo,
      loff_t start, loff_t len,
      get_block_t *get_block);
extern int generic_block_fiemap(struct inode *inode,
    struct fiemap_extent_info *fieinfo, u64 start,
    u64 len, get_block_t *get_block);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_super_thawed(struct block_device *);
extern struct super_block *get_super_exclusive_thawed(struct block_device *bdev);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct dentry *, struct iattr *);
extern int simple_getattr(const struct path *, struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct inode *, struct dentry *,
    struct inode *, struct dentry *, unsigned int);
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern int noop_set_page_dirty(struct page *page);
extern void noop_invalidatepage(struct page *page, unsigned int offset,
  unsigned int length);
extern ssize_t noop_direct_IO(struct kiocb *iocb, struct iov_iter *iter);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);
extern int buffer_migrate_page_norefs(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);





extern int setattr_prepare(struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
extern void setattr_copy(struct inode *inode, const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool io_is_direct(struct file *filp)
{
 return (filp->f_flags & 0200000) || ((filp->f_mapping->host)->i_flags & 8192);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_dax(struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 8192);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= (1 << 1);
 if (io_is_direct(file))
  res |= (1 << 2);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & 1)))
  res |= (1 << 4);
 if (file->f_flags & 04000000)
  res |= (1 << 5);
 return res;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008) | (( __kernel_rwf_t)0x00000010))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  ki->ki_flags |= (1 << 7);
 }
 if (flags & (( __kernel_rwf_t)0x00000001))
  ki->ki_flags |= (1 << 3);
 if (flags & (( __kernel_rwf_t)0x00000002))
  ki->ki_flags |= (1 << 4);
 if (flags & (( __kernel_rwf_t)0x00000004))
  ki->ki_flags |= ((1 << 4) | (1 << 5));
 if (flags & (( __kernel_rwf_t)0x00000010))
  ki->ki_flags |= (1 << 1);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[0];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3446 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__format__(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) get_filesystem_list(char *buf);
# 3477 "../include/linux/fs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_sticky(struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(dir, inode);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= 4096;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & 16);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & 16);
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);


extern int vfs_fadvise(struct file *file, loff_t offset, loff_t len,
         int advice);
extern int generic_fadvise(struct file *file, loff_t offset, loff_t len,
      int advice);


extern struct sock *io_uring_get_socket(struct file *file);







int vfs_ioc_setflags_prepare(struct inode *inode, unsigned int oldflags,
        unsigned int flags);

int vfs_ioc_fssetxattr_check(struct inode *inode, const struct fsxattr *old_fa,
        struct fsxattr *fa);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void simple_fill_fsxattr(struct fsxattr *fa, __u32 xflags)
{
 memset(fa, 0, sizeof(*fa));
 fa->fsx_xflags = xflags;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 9 "../include/linux/huge_mm.h" 2

extern vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf);
extern int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *vma);
extern void huge_pmd_set_accessed(struct vm_fault *vmf, pmd_t orig_pmd);
extern int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pud_t *dst_pud, pud_t *src_pud, unsigned long addr,
    struct vm_area_struct *vma);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud)
{
}


extern vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf, pmd_t orig_pmd);
extern struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr,
       pmd_t *pmd,
       unsigned int flags);
extern bool madvise_free_huge_pmd(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pmd_t *pmd, unsigned long addr, unsigned long next);
extern int zap_huge_pmd(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pmd_t *pmd, unsigned long addr);
extern int zap_huge_pud(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pud_t *pud, unsigned long addr);
extern int mincore_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, unsigned long end,
   unsigned char *vec);
extern bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,
    unsigned long new_addr, unsigned long old_end,
    pmd_t *old_pmd, pmd_t *new_pmd);
extern int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, pgprot_t newprot,
   int prot_numa);
vm_fault_t vmf_insert_pfn_pmd(struct vm_fault *vmf, pfn_t pfn, bool write);
vm_fault_t vmf_insert_pfn_pud(struct vm_fault *vmf, pfn_t pfn, bool write);
enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_DIRECT_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KSWAPD_OR_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,



};

struct kobject;
struct kobj_attribute;

extern ssize_t single_hugepage_flag_store(struct kobject *kobj,
     struct kobj_attribute *attr,
     const char *buf, size_t count,
     enum transparent_hugepage_flag flag);
extern ssize_t single_hugepage_flag_show(struct kobject *kobj,
    struct kobj_attribute *attr, char *buf,
    enum transparent_hugepage_flag flag);
extern struct kobj_attribute shmem_enabled_attr;
# 90 "../include/linux/huge_mm.h"
extern bool is_vma_temporary_stack(struct vm_area_struct *vma);

extern unsigned long transparent_hugepage_flags;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __transparent_hugepage_enabled(struct vm_area_struct *vma)
{
 if (vma->vm_flags & 0x40000000)
  return false;

 if (is_vma_temporary_stack(vma))
  return false;

 if (test_bit(24, &vma->vm_mm->flags))
  return false;

 if (transparent_hugepage_flags & (1 << TRANSPARENT_HUGEPAGE_FLAG))
  return true;

 if (vma_is_dax(vma))
  return true;

 if (transparent_hugepage_flags &
    (1 << TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG))
  return !!(vma->vm_flags & 0x20000000);

 return false;
}

bool transparent_hugepage_enabled(struct vm_area_struct *vma);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool transhuge_vma_suitable(struct vm_area_struct *vma,
  unsigned long haddr)
{

 if (!vma_is_anonymous(vma)) {
  if (((vma->vm_start >> 16) & ((1<<(((16 - 3) * (4 - (2)) + 3)-16)) - 1)) !=
   (vma->vm_pgoff & ((1<<(((16 - 3) * (4 - (2)) + 3)-16)) - 1)))
   return false;
 }

 if (haddr < vma->vm_start || haddr + ((1UL) << ((16 - 3) * (4 - (2)) + 3)) > vma->vm_end)
  return false;
 return true;
}
# 152 "../include/linux/huge_mm.h"
extern unsigned long thp_get_unmapped_area(struct file *filp,
  unsigned long addr, unsigned long len, unsigned long pgoff,
  unsigned long flags);

extern void prep_transhuge_page(struct page *page);
extern void free_transhuge_page(struct page *page);

bool can_split_huge_page(struct page *page, int *pextra_pins);
int split_huge_page_to_list(struct page *page, struct list_head *list);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int split_huge_page(struct page *page)
{
 return split_huge_page_to_list(page, ((void *)0));
}
void deferred_split_huge_page(struct page *page);

void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
  unsigned long address, bool freeze, struct page *page);
# 180 "../include/linux/huge_mm.h"
void split_huge_pmd_address(struct vm_area_struct *vma, unsigned long address,
  bool freeze, struct page *page);

void __split_huge_pud(struct vm_area_struct *vma, pud_t *pud,
  unsigned long address);
# 194 "../include/linux/huge_mm.h"
extern int hugepage_madvise(struct vm_area_struct *vma,
       unsigned long *vm_flags, int advice);
extern void vma_adjust_trans_huge(struct vm_area_struct *vma,
        unsigned long start,
        unsigned long end,
        long adjust_next);
extern spinlock_t *__pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma);
extern spinlock_t *__pud_trans_huge_lock(pud_t *pud,
  struct vm_area_struct *vma);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_swap_pmd(pmd_t pmd)
{
 return !(!((pmd).pmd)) && !(!!(((pmd_pte(pmd)).pte) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 58))));
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_trans_huge_lock(pmd_t *pmd,
  struct vm_area_struct *vma)
{
 ((void)(sizeof(( long)(!rwsem_is_locked(&vma->vm_mm->mmap_sem)))));
 if (is_swap_pmd(*pmd) || (((*pmd).pmd) && !(((*pmd).pmd) & (((pmdval_t)(1)) << 1))) || (!!(((pmd_pte(*pmd)).pte) & (((pteval_t)(1)) << 57))))
  return __pmd_trans_huge_lock(pmd, vma);
 else
  return ((void *)0);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_trans_huge_lock(pud_t *pud,
  struct vm_area_struct *vma)
{
 ((void)(sizeof(( long)(!rwsem_is_locked(&vma->vm_mm->mmap_sem)))));
 if (pud_trans_huge(*pud) || pud_devmap(*pud))
  return __pud_trans_huge_lock(pud, vma);
 else
  return ((void *)0);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hpage_nr_pages(struct page *page)
{
 if (__builtin_expect(!!(PageTransHuge(page)), 0))
  return (1<<(((16 - 3) * (4 - (2)) + 3)-16));
 return 1;
}

struct page *follow_devmap_pmd(struct vm_area_struct *vma, unsigned long addr,
  pmd_t *pmd, int flags, struct dev_pagemap **pgmap);
struct page *follow_devmap_pud(struct vm_area_struct *vma, unsigned long addr,
  pud_t *pud, int flags, struct dev_pagemap **pgmap);

extern vm_fault_t do_huge_pmd_numa_page(struct vm_fault *vmf, pmd_t orig_pmd);

extern struct page *huge_zero_page;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_page(struct page *page)
{
 return ({ union { typeof(huge_zero_page) __val; char __c[1]; } __u; if (1) __read_once_size(&(huge_zero_page), __u.__c, sizeof(huge_zero_page)); else __read_once_size_nocheck(&(huge_zero_page), __u.__c, sizeof(huge_zero_page)); do { } while (0); __u.__val; }) == page;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pmd(pmd_t pmd)
{
 return is_huge_zero_page((vmemmap + (((unsigned long)(((((pmd_pte(pmd)).pte) & (((((pteval_t)(1)) << (48 - 16)) - 1) << 16))) >> 16)))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_huge_zero_pud(pud_t pud)
{
 return false;
}

struct page *mm_get_huge_zero_page(struct mm_struct *mm);
void mm_put_huge_zero_page(struct mm_struct *mm);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thp_migration_supported(void)
{
 return 0;
}
# 588 "../include/linux/mm.h" 2
# 605 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int put_page_testzero(struct page *page)
{
 ((void)(sizeof(( long)(page_ref_count(page) == 0))));
 return page_ref_dec_and_test(page);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_page_unless_zero(struct page *page)
{
 return page_ref_add_unless(page, 1, 0);
}

extern int page_is_ram(unsigned long pfn);

enum {
 REGION_INTERSECTS,
 REGION_DISJOINT,
 REGION_MIXED,
};

int region_intersects(resource_size_t offset, size_t size, unsigned long flags,
        unsigned long desc);


struct page *vmalloc_to_page(const void *addr);
unsigned long vmalloc_to_pfn(const void *addr);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vmalloc_addr(const void *x)
{

 unsigned long addr = (unsigned long)x;

 return addr >= (((((((-((((1UL))) << ((((48))) - 1))))) + (0x08000000))) + (0x08000000))) && addr < (- (1UL << ((16 - 3) * (4 - (4 - 3)) + 3)) - (((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00010000);



}






extern int is_vmalloc_or_module_addr(const void *x);







extern void *kvmalloc_node(size_t size, gfp_t flags, int node);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmalloc(size_t size, gfp_t flags)
{
 return kvmalloc_node(size, flags, (-1));
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvzalloc_node(size_t size, gfp_t flags, int node)
{
 return kvmalloc_node(size, flags | (( gfp_t)0x100u), node);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvzalloc(size_t size, gfp_t flags)
{
 return kvmalloc(size, flags | (( gfp_t)0x100u));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvmalloc_array(size_t n, size_t size, gfp_t flags)
{
 size_t bytes;

 if (__builtin_expect(!!(({ typeof(n) __a = (n); typeof(size) __b = (size); typeof(&bytes) __d = (&bytes); (void) (&__a == &__b); (void) (&__a == __d); __builtin_mul_overflow(__a, __b, __d); })), 0))
  return ((void *)0);

 return kvmalloc(bytes, flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kvcalloc(size_t n, size_t size, gfp_t flags)
{
 return kvmalloc_array(n, size, flags | (( gfp_t)0x100u));
}

extern void kvfree(const void *addr);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int compound_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(!PageCompound(page)))));
 page = compound_head(page);
 return atomic_read(compound_mapcount_ptr(page)) + 1;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_mapcount_reset(struct page *page)
{
 atomic_set(&(page)->_mapcount, -1);
}

int __page_mapcount(struct page *page);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_mapcount(struct page *page)
{
 ((void)(sizeof(( long)(PageSlab(page)))));

 if (__builtin_expect(!!(PageCompound(page)), 0))
  return __page_mapcount(page);
 return atomic_read(&page->_mapcount) + 1;
}


int total_mapcount(struct page *page);
int page_trans_huge_mapcount(struct page *page, int *total_mapcount);
# 749 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *virt_to_head_page(const void *x)
{
 struct page *page = ({ u64 __idx = (((u64)x) - ((-((((1UL))) << ((48)))))) / ((1UL) << 16); u64 __addr = (-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) + (__idx * sizeof(struct page)); (struct page *)__addr; });

 return compound_head(page);
}

void __put_page(struct page *page);

void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);






typedef void compound_page_dtor(struct page *);


enum compound_dtor_id {
 NULL_COMPOUND_DTOR,
 COMPOUND_PAGE_DTOR,

 HUGETLB_PAGE_DTOR,


 TRANSHUGE_PAGE_DTOR,

 NR_COMPOUND_DTORS,
};
extern compound_page_dtor * const compound_page_dtors[];

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_page_dtor(struct page *page,
  enum compound_dtor_id compound_dtor)
{
 ((void)(sizeof(( long)(compound_dtor >= NR_COMPOUND_DTORS))));
 page[1].compound_dtor = compound_dtor;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) compound_page_dtor *get_compound_page_dtor(struct page *page)
{
 ((void)(sizeof(( long)(page[1].compound_dtor >= NR_COMPOUND_DTORS))));
 return compound_page_dtors[page[1].compound_dtor];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return page[1].compound_order;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_compound_order(struct page *page, unsigned int order)
{
 page[1].compound_order = order;
}

void free_compound_page(struct page *page);
# 817 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
{
 if (__builtin_expect(!!(vma->vm_flags & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}

vm_fault_t alloc_set_pte(struct vm_fault *vmf, struct mem_cgroup *memcg,
  struct page *page);
vm_fault_t finish_fault(struct vm_fault *vmf);
vm_fault_t finish_mkwrite_fault(struct vm_fault *vmf);
# 937 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum zone_type page_zonenum(const struct page *page)
{
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}
# 950 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_zone_device_page(const struct page *page)
{
 return false;
}
# 977 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool put_devmap_managed_page(struct page *page)
{
 return false;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_device_private_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PRIVATE;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_pci_p2pdma_page(const struct page *page)
{
 return 0 &&
  0 &&
  is_zone_device_page(page) &&
  page->pgmap->type == MEMORY_DEVICE_PCI_P2PDMA;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_page(struct page *page)
{
 page = compound_head(page);




 ((void)(sizeof(( long)(((unsigned int) page_ref_count(page) + 127u <= 127u)))));
 page_ref_inc(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) bool try_get_page(struct page *page)
{
 page = compound_head(page);
 if (({ int __ret_warn_on = !!(page_ref_count(page) <= 0); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/mm.h\"; .popsection; .long 14472b - 14470b; .short 1017; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;
 page_ref_inc(page);
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_page(struct page *page)
{
 page = compound_head(page);







 if (put_devmap_managed_page(page))
  return;

 if (put_page_testzero(page))
  __put_page(page);
}
# 1055 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_user_page(struct page *page)
{
 put_page(page);
}

void put_user_pages_dirty(struct page **pages, unsigned long npages);
void put_user_pages_dirty_lock(struct page **pages, unsigned long npages);
void put_user_pages(struct page **pages, unsigned long npages);
# 1076 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 6) < ((((sizeof(unsigned long)*8) - 0) - 6) - 2))? (((sizeof(unsigned long)*8) - 0) - 6) : ((((sizeof(unsigned long)*8) - 0) - 6) - 2)) * ((6 + 2) != 0))) & ((1UL << (6 + 2)) - 1);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_to_nid(const struct page *page)
{
 struct page *p = (struct page *)page;

 return (({ ((void)(sizeof(( long)(PagePoisoned(p))))); p; })->flags >> ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0))) & ((1UL << 6) - 1);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpu_pid_to_cpupid(int cpu, int pid)
{
 return ((cpu & ((1 << 7)-1)) << 8) | (pid & ((1 << 8)-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_pid(int cpupid)
{
 return cpupid & ((1 << 8)-1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_cpu(int cpupid)
{
 return (cpupid >> 8) & ((1 << 7)-1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cpupid_to_nid(int cpupid)
{
 return cpu_to_node(cpupid_to_cpu(cpupid));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_pid_unset(int cpupid)
{
 return cpupid_to_pid(cpupid) == (-1 & ((1 << 8)-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cpupid_cpu_unset(int cpupid)
{
 return cpupid_to_cpu(cpupid) == (-1 & ((1 << 7)-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __cpupid_match_pid(pid_t task_pid, int cpupid)
{
 return (task_pid & ((1 << 8)-1)) == cpupid_to_pid(cpupid);
}
# 1144 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cpupid_last(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 6) - 2) - (8 +7)) * ((8 +7) != 0))) & ((1UL << (8 +7)) - 1);
}

extern int page_cpupid_xchg_last(struct page *page, int cpupid);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_cpupid_reset_last(struct page *page)
{
 page->flags |= ((1UL << (8 +7)) - 1) << ((((((sizeof(unsigned long)*8) - 0) - 6) - 2) - (8 +7)) * ((8 +7) != 0));
}
# 1219 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 page_kasan_tag(const struct page *page)
{
 return 0xff;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_set(struct page *page, u8 tag) { }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void page_kasan_tag_reset(struct page *page) { }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct zone *page_zone(const struct page *page)
{
 return &(node_data[(page_to_nid(page))])->node_zones[page_zonenum(page)];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pg_data_t *page_pgdat(const struct page *page)
{
 return (node_data[(page_to_nid(page))]);
}
# 1251 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 6) - 1) << ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0)));
 page->flags |= (node & ((1UL << 6) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);



}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *page_memcg(struct page *page)
{
 return page->mem_cgroup;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mem_cgroup *page_memcg_rcu(struct page *page)
{
 ({ int __ret_warn_on = !!(!rcu_read_lock_held()); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/mm.h\"; .popsection; .long 14472b - 14470b; .short 1280; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); });
 return ({ union { typeof(page->mem_cgroup) __val; char __c[1]; } __u; if (1) __read_once_size(&(page->mem_cgroup), __u.__c, sizeof(page->mem_cgroup)); else __read_once_size_nocheck(&(page->mem_cgroup), __u.__c, sizeof(page->mem_cgroup)); do { } while (0); __u.__val; });
}
# 1298 "../include/linux/mm.h"
# 1 "../include/linux/vmstat.h" 1







# 1 "../include/linux/vm_event_item.h" 1
# 25 "../include/linux/vm_event_item.h"
enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_DMA32, PGALLOC_NORMAL, PGALLOC_MOVABLE,
  ALLOCSTALL_DMA32, ALLOCSTALL_NORMAL, ALLOCSTALL_MOVABLE,
  PGSCAN_SKIP_DMA32, PGSCAN_SKIP_NORMAL, PGSCAN_SKIP_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE, PGLAZYFREE,
  PGFAULT, PGMAJFAULT,
  PGLAZYFREED,
  PGREFILL,
  PGSTEAL_KSWAPD,
  PGSTEAL_DIRECT,
  PGSCAN_KSWAPD,
  PGSCAN_DIRECT,
  PGSCAN_DIRECT_THROTTLE,

  PGSCAN_ZONE_RECLAIM_FAILED,

  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, PGROTATED,
  DROP_PAGECACHE, DROP_SLAB,
  OOM_KILL,

  NUMA_PTE_UPDATES,
  NUMA_HUGE_PTE_UPDATES,
  NUMA_HINT_FAULTS,
  NUMA_HINT_FAULTS_LOCAL,
  NUMA_PAGE_MIGRATE,


  PGMIGRATE_SUCCESS, PGMIGRATE_FAIL,


  COMPACTMIGRATE_SCANNED, COMPACTFREE_SCANNED,
  COMPACTISOLATED,
  COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS,
  KCOMPACTD_WAKE,
  KCOMPACTD_MIGRATE_SCANNED, KCOMPACTD_FREE_SCANNED,


  HTLB_BUDDY_PGALLOC, HTLB_BUDDY_PGALLOC_FAIL,

  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,

  THP_FAULT_ALLOC,
  THP_FAULT_FALLBACK,
  THP_COLLAPSE_ALLOC,
  THP_COLLAPSE_ALLOC_FAILED,
  THP_FILE_ALLOC,
  THP_FILE_MAPPED,
  THP_SPLIT_PAGE,
  THP_SPLIT_PAGE_FAILED,
  THP_DEFERRED_SPLIT_PAGE,
  THP_SPLIT_PMD,



  THP_ZERO_PAGE_ALLOC,
  THP_ZERO_PAGE_ALLOC_FAILED,
  THP_SWPOUT,
  THP_SWPOUT_FALLBACK,


  BALLOON_INFLATE,
  BALLOON_DEFLATE,

  BALLOON_MIGRATE,
# 110 "../include/linux/vm_event_item.h"
  SWAP_RA,
  SWAP_RA_HIT,

  NR_VM_EVENT_ITEMS
};
# 9 "../include/linux/vmstat.h" 2

# 1 "../include/linux/static_key.h" 1
# 11 "../include/linux/vmstat.h" 2

extern int sysctl_stat_interval;




extern int sysctl_vm_numa_stat;
extern struct static_key_true vm_numa_stat_key;
extern int sysctl_vm_numa_stat_handler(struct ctl_table *table,
  int write, void *buffer, size_t *length, loff_t *ppos);


struct reclaim_stat {
 unsigned nr_dirty;
 unsigned nr_unqueued_dirty;
 unsigned nr_congested;
 unsigned nr_writeback;
 unsigned nr_immediate;
 unsigned nr_activate[2];
 unsigned nr_ref_keep;
 unsigned nr_unmap_fail;
};
# 45 "../include/linux/vmstat.h"
struct vm_event_state {
 unsigned long event[NR_VM_EVENT_ITEMS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct vm_event_state) vm_event_states;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_event(enum vm_event_item item)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), 1); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }) += delta; } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(vm_event_states.event[item])) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_8(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), delta); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_16(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), delta); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_32(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), delta); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_add_case_64(({ do { const void *__vpp_verify = (typeof((&(vm_event_states.event[item])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item]))); (typeof((typeof(*(&(vm_event_states.event[item]))) *)(&(vm_event_states.event[item])))) (__ptr + ((__my_cpu_offset()))); }); }), delta); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
# 131 "../include/linux/vmstat.h"
extern atomic_long_t vm_zone_stat[NR_VM_ZONE_STAT_ITEMS];
extern atomic_long_t vm_numa_stat[NR_VM_NUMA_STAT_ITEMS];
extern atomic_long_t vm_node_stat[NR_VM_NODE_STAT_ITEMS];


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_numa_state_add(long x, struct zone *zone,
     enum numa_stat_item item)
{
 atomic_long_add(x, &zone->vm_numa_stat[item]);
 atomic_long_add(x, &vm_numa_stat[item]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_numa_state(enum numa_stat_item item)
{
 long x = atomic_long_read(&vm_numa_stat[item]);

 return x;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_numa_state_snapshot(struct zone *zone,
     enum numa_stat_item item)
{
 long x = atomic_long_read(&zone->vm_numa_stat[item]);
 int cpu;

 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((zone->pageset) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((zone->pageset))) *)((zone->pageset))); (typeof((typeof(*((zone->pageset))) *)((zone->pageset)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_numa_stat_diff[item];

 return x;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &vm_zone_stat[item]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void node_page_state_add(long x, struct pglist_data *pgdat,
     enum node_stat_item item)
{
 atomic_long_add(x, &pgdat->vm_stat[item]);
 atomic_long_add(x, &vm_node_stat[item]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_zone_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&vm_zone_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long global_node_page_state(enum node_stat_item item)
{
 long x = atomic_long_read(&vm_node_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (((const struct cpumask *)&__cpu_online_mask))), ((cpu)) < nr_cpu_ids;)
  x += ({ do { const void *__vpp_verify = (typeof((zone->pageset) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((zone->pageset))) *)((zone->pageset))); (typeof((typeof(*((zone->pageset))) *)((zone->pageset)))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })->vm_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}


extern void __inc_numa_state(struct zone *zone, enum numa_stat_item item);
extern unsigned long sum_zone_node_page_state(int node,
           enum zone_stat_item item);
extern unsigned long sum_zone_numa_state(int node, enum numa_stat_item item);
extern unsigned long node_page_state(struct pglist_data *pgdat,
      enum node_stat_item item);






void __mod_zone_page_state(struct zone *, enum zone_stat_item item, long);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void __mod_node_page_state(struct pglist_data *, enum node_stat_item item, long);
void __inc_node_page_state(struct page *, enum node_stat_item);
void __dec_node_page_state(struct page *, enum node_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
void inc_node_page_state(struct page *, enum node_stat_item);
void dec_node_page_state(struct page *, enum node_stat_item);

extern void inc_node_state(struct pglist_data *, enum node_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_node_state(struct pglist_data *, enum node_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_node_state(struct pglist_data *, enum node_stat_item);

void quiet_vmstat(void);
void cpu_vm_stats_fold(int cpu);
void refresh_zone_stat_thresholds(void);

struct ctl_table;
int vmstat_refresh(struct ctl_table *, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

void drain_zonestat(struct zone *zone, struct per_cpu_pageset *);

int calculate_pressure_threshold(struct zone *zone);
int calculate_normal_threshold(struct zone *zone);
void set_pgdat_percpu_threshold(pg_data_t *pgdat,
    int (*calculate_pressure)(struct zone *));
# 374 "../include/linux/vmstat.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (__builtin_expect(!!((migratetype) == MIGRATE_CMA), 0))
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern const char * const vmstat_text[];
# 1299 "../include/linux/mm.h" 2

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void *lowmem_page_address(const struct page *page)
{
 return ({ __typeof__(page) __page = page; u64 __idx = ((u64)__page - (-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000)) / sizeof(struct page); u64 __addr = ((-((((1UL))) << ((48))))) + (__idx * ((1UL) << 16)); (void *)__tag_set((const void *)__addr, page_kasan_tag(__page));});
}
# 1333 "../include/linux/mm.h"
extern void *page_rmapping(struct page *page);
extern struct anon_vma *page_anon_vma(struct page *page);
extern struct address_space *page_mapping(struct page *page);

extern struct address_space *__page_file_mapping(struct page *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct address_space *page_file_mapping(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_mapping(page);

 return page->mapping;
}

extern unsigned long __page_file_index(struct page *page);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);
 return page->index;
}

bool page_mapped(struct page *page);
struct address_space *page_mapping(struct page *page);
struct address_space *page_mapping_file(struct page *page);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_pfmemalloc(struct page *page)
{




 return page->index == -1UL;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_page_pfmemalloc(struct page *page)
{
 page->index = -1UL;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_page_pfmemalloc(struct page *page)
{
 page->index = 0;
}




extern void pagefault_out_of_memory(void);
# 1406 "../include/linux/mm.h"
extern void show_free_areas(unsigned int flags, nodemask_t *nodemask);

extern bool can_do_mlock(void);
extern int user_shm_lock(size_t, struct user_struct *);
extern void user_shm_unlock(size_t, struct user_struct *);




struct zap_details {
 struct address_space *check_mapping;
 unsigned long first_index;
 unsigned long last_index;
};

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
        pte_t pte);
struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,
    pmd_t pmd);

void zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
    unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
      unsigned long size);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);

struct mmu_notifier_range;

void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int copy_page_range(struct mm_struct *dst, struct mm_struct *src,
   struct vm_area_struct *vma);
int follow_pte_pmd(struct mm_struct *mm, unsigned long address,
     struct mmu_notifier_range *range,
     pte_t **ptepp, pmd_t **pmdpp, spinlock_t **ptlp);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

extern void truncate_pagecache(struct inode *inode, loff_t new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern vm_fault_t handle_mm_fault(struct vm_area_struct *vma,
   unsigned long address, unsigned int flags);
extern int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags,
       bool *unlocked);
void unmap_mapping_pages(struct address_space *mapping,
  unsigned long start, unsigned long nr, bool even_cows);
void unmap_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen, int even_cows);
# 1489 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t const holebegin, loff_t const holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern int access_process_vm(struct task_struct *tsk, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, unsigned int gup_flags);
extern int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,
  unsigned long addr, void *buf, int len, unsigned int gup_flags);

long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,
       unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas, int *locked);
long get_user_pages(unsigned long start, unsigned long nr_pages,
       unsigned int gup_flags, struct page **pages,
       struct vm_area_struct **vmas);
long get_user_pages_locked(unsigned long start, unsigned long nr_pages,
      unsigned int gup_flags, struct page **pages, int *locked);
long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,
      struct page **pages, unsigned int gup_flags);

int get_user_pages_fast(unsigned long start, int nr_pages,
   unsigned int gup_flags, struct page **pages);

int account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc);
int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,
   struct task_struct *task, bool bypass_rlim);


struct frame_vector {
 unsigned int nr_allocated;
 unsigned int nr_frames;
 bool got_ref;
 bool is_pfns;
 void *ptrs[0];


};

struct frame_vector *frame_vector_create(unsigned int nr_frames);
void frame_vector_destroy(struct frame_vector *vec);
int get_vaddr_frames(unsigned long start, unsigned int nr_pfns,
       unsigned int gup_flags, struct frame_vector *vec);
void put_vaddr_frames(struct frame_vector *vec);
int frame_vector_to_pages(struct frame_vector *vec);
void frame_vector_to_pfns(struct frame_vector *vec);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int frame_vector_count(struct frame_vector *vec)
{
 return vec->nr_frames;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page **frame_vector_pages(struct frame_vector *vec)
{
 if (vec->is_pfns) {
  int err = frame_vector_to_pages(vec);

  if (err)
   return ERR_PTR(err);
 }
 return (struct page **)(vec->ptrs);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long *frame_vector_pfns(struct frame_vector *vec)
{
 if (!vec->is_pfns)
  frame_vector_to_pfns(vec);
 return (unsigned long *)(vec->ptrs);
}

struct kvec;
int get_kernel_pages(const struct kvec *iov, int nr_pages, int write,
   struct page **pages);
int get_kernel_page(unsigned long start, int write, struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

void __set_page_dirty(struct page *, struct address_space *, int warn);
int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);
int redirty_page_for_writepage(struct writeback_control *wbc,
    struct page *page);
void account_page_dirtied(struct page *page, struct address_space *mapping);
void account_page_cleaned(struct page *page, struct address_space *mapping,
     struct bdi_writeback *wb);
int set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);
void __cancel_dirty_page(struct page *page);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cancel_dirty_page(struct page *page)
{

 if (PageDirty(page))
  __cancel_dirty_page(page);
}
int clear_page_dirty_for_io(struct page *page);

int get_cmdline(struct task_struct *task, char *buffer, int buflen);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         int dirty_accountable, int prot_numa);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int __get_user_pages_fast(unsigned long start, int nr_pages, int write,
     struct page **pages);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&mm->rss_stat.count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 atomic_long_add(value, &mm->rss_stat.count[member]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void inc_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_inc(&mm->rss_stat.count[member]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dec_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_dec(&mm->rss_stat.count[member]);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter_file(struct page *page)
{
 if (PageSwapBacked(page))
  return MM_SHMEMPAGES;
 return MM_FILEPAGES;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_counter(struct page *page)
{
 if (PageAnon(page))
  return MM_ANONPAGES;
 return mm_counter_file(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES) +
  get_mm_counter(mm, MM_SHMEMPAGES);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_rss) *)1 == (typeof(get_mm_rss(mm)) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_rss) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(get_mm_rss(mm)) * 0l)) : (int *)8))))), ((mm->hiwater_rss) > (get_mm_rss(mm)) ? (mm->hiwater_rss) : (get_mm_rss(mm))), ({ typeof(mm->hiwater_rss) __UNIQUE_ID___x10 = (mm->hiwater_rss); typeof(get_mm_rss(mm)) __UNIQUE_ID___y11 = (get_mm_rss(mm)); ((__UNIQUE_ID___x10) > (__UNIQUE_ID___y11) ? (__UNIQUE_ID___x10) : (__UNIQUE_ID___y11)); }));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return __builtin_choose_expr(((!!(sizeof((typeof(mm->hiwater_vm) *)1 == (typeof(mm->total_vm) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->hiwater_vm) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(mm->total_vm) * 0l)) : (int *)8))))), ((mm->hiwater_vm) > (mm->total_vm) ? (mm->hiwater_vm) : (mm->total_vm)), ({ typeof(mm->hiwater_vm) __UNIQUE_ID___x12 = (mm->hiwater_vm); typeof(mm->total_vm) __UNIQUE_ID___y13 = (mm->total_vm); ((__UNIQUE_ID___x12) > (__UNIQUE_ID___y13) ? (__UNIQUE_ID___x12) : (__UNIQUE_ID___y13)); }));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if ((mm)->hiwater_rss < _rss)
  (mm)->hiwater_rss = _rss;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void update_hiwater_vm(struct mm_struct *mm)
{
 if (mm->hiwater_vm < mm->total_vm)
  mm->hiwater_vm = mm->total_vm;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void reset_mm_hiwater_rss(struct mm_struct *mm)
{
 mm->hiwater_rss = get_mm_rss(mm);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);
# 1718 "../include/linux/mm.h"
int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd,
      unsigned long address)
{
 return 0;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __pud_alloc(struct mm_struct *mm, pgd_t *p4d,
      unsigned long address)
{
 return 0;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_puds(struct mm_struct *mm) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_puds(struct mm_struct *mm) {}
# 1778 "../include/linux/mm.h"
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_add((1 << (16 - 3)) * sizeof(pmd_t), &mm->pgtables_bytes);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_pmds(struct mm_struct *mm)
{
 if (0)
  return;
 atomic_long_sub((1 << (16 - 3)) * sizeof(pmd_t), &mm->pgtables_bytes);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_pgtables_bytes_init(struct mm_struct *mm)
{
 atomic_long_set(&mm->pgtables_bytes, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long mm_pgtables_bytes(const struct mm_struct *mm)
{
 return atomic_long_read(&mm->pgtables_bytes);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_inc_nr_ptes(struct mm_struct *mm)
{
 atomic_long_add((1 << (16 - 3)) * sizeof(pte_t), &mm->pgtables_bytes);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_dec_nr_ptes(struct mm_struct *mm)
{
 atomic_long_sub((1 << (16 - 3)) * sizeof(pte_t), &mm->pgtables_bytes);
}
# 1827 "../include/linux/mm.h"
int __pte_alloc(struct mm_struct *mm, pmd_t *pmd);
int __pte_alloc_kernel(pmd_t *pmd);
# 1852 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!((!((((*pud).pgd).pgd)))), 0) && __pmd_alloc(mm, pud, address))?
  ((void *)0): ((pmd_t *)((void *)((unsigned long)(((phys_addr_t)((pud_page_paddr(({ union { typeof(*((pud))) __val; char __c[1]; } __u; if (1) __read_once_size(&(*((pud))), __u.__c, sizeof(*((pud)))); else __read_once_size_nocheck(&(*((pud))), __u.__c, sizeof(*((pud)))); do { } while (0); __u.__val; })) + ((((address)) >> ((16 - 3) * (4 - (2)) + 3)) & ((1 << (16 - 3)) - 1)) * sizeof(pmd_t)))) - physvirt_offset))));
}
# 1870 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptlock_cache_init(void)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptlock_alloc(struct page *page)
{
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptlock_free(struct page *page)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *ptlock_ptr(struct page *page)
{
 return &page->ptl;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr((vmemmap + (((unsigned long)(((((pmd_pte(*pmd)).pte) & (((((pteval_t)(1)) << (48 - 16)) - 1) << 16))) >> 16)))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptlock_init(struct page *page)
{







 ((void)(sizeof(( long)(*(unsigned long *)&page->ptl))));
 if (!ptlock_alloc(page))
  return false;
 do { spinlock_check(ptlock_ptr(page)); do { *(&(ptlock_ptr(page))->rlock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0); } while (0);
 return true;
}
# 1923 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_init(void)
{
 ptlock_cache_init();
 pgtable_cache_init();
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_page_ctor(struct page *page)
{
 if (!ptlock_init(page))
  return false;
 __SetPageTable(page);
 inc_zone_page_state(page, NR_PAGETABLE);
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_page_dtor(struct page *page)
{
 ptlock_free(page);
 __ClearPageTable(page);
 dec_zone_page_state(page, NR_PAGETABLE);
}
# 1974 "../include/linux/mm.h"
static struct page *pmd_to_page(pmd_t *pmd)
{
 unsigned long mask = ~((1 << (16 - 3)) * sizeof(pmd_t) - 1);
 return ({ u64 __idx = (((u64)(void *)((unsigned long) pmd & mask)) - ((-((((1UL))) << ((48)))))) / ((1UL) << 16); u64 __addr = (-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) + (__idx * sizeof(struct page)); (struct page *)__addr; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr(pmd_to_page(pmd));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pgtable_pmd_page_ctor(struct page *page)
{

 page->pmd_huge_pte = ((void *)0);

 return ptlock_init(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pgtable_pmd_page_dtor(struct page *page)
{

 ((void)(sizeof(( long)(page->pmd_huge_pte))));

 ptlock_free(page);
}
# 2017 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 spin_lock(ptl);
 return ptl;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lockptr(struct mm_struct *mm, pud_t *pud)
{
 return &mm->page_table_lock;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *pud_lock(struct mm_struct *mm, pud_t *pud)
{
 spinlock_t *ptl = pud_lockptr(mm, pud);

 spin_lock(ptl);
 return ptl;
}

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pagecache_init(void);
extern void free_area_init(unsigned long * zones_size);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) free_area_init_node(int nid, unsigned long * zones_size,
  unsigned long zone_start_pfn, unsigned long *zholes_size);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, const char *s);
# 2066 "../include/linux/mm.h"
extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info(const char *str);

extern void reserve_bootmem_region(phys_addr_t start, phys_addr_t end);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void free_reserved_page(struct page *page)
{
 __free_reserved_page(page);
 adjust_managed_page_count(page, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for (((nid)) = __first_node(&(node_states[N_ONLINE])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_ONLINE]))))
  phys_pages += ((node_data[(nid)])->node_present_pages);

 return phys_pages;
}
# 2143 "../include/linux/mm.h"
extern void free_area_init_nodes(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);
extern void free_bootmem_with_active_regions(int nid,
      unsigned long max_low_pfn);
extern void sparse_memory_present_with_active_regions(int nid);
# 2167 "../include/linux/mm.h"
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) early_pfn_to_nid(unsigned long pfn);

extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) __early_pfn_to_nid(unsigned long pfn,
     struct mminit_pfnnid_cache *state);



void zero_resv_unavail(void);




extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_zone(unsigned long, int, unsigned long, unsigned long,
  enum memmap_context, struct vmem_altmap *);
extern void setup_per_zone_wmarks(void);
extern int __attribute__((__section__(".meminit.text"))) __attribute__((__cold__)) __attribute__((__no_instrument_function__)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) mmap_init(void);
extern void show_mem(unsigned int flags, nodemask_t *nodemask);
extern long si_mem_available(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);




extern __attribute__((__format__(printf, 3, 4)))
void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...);

extern void setup_per_cpu_pageset(void);

extern void zone_pcp_update(struct zone *zone);
extern void zone_pcp_reset(struct zone *zone);


extern int min_free_kbytes;
extern int watermark_boost_factor;
extern int watermark_scale_factor;


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root_cached *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root_cached *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root_cached *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root_cached *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root_cached *root);
struct anon_vma_chain *
anon_vma_interval_tree_iter_first(struct rb_root_cached *root,
      unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
# 2246 "../include/linux/mm.h"
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int __vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert,
 struct vm_area_struct *expand);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert)
{
 return __vma_adjust(vma, start, end, pgoff, insert, ((void *)0));
}
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *, struct vm_userfaultfd_ctx);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int __split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int split_vma(struct mm_struct *, struct vm_area_struct *,
 unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int check_data_rlimit(unsigned long rlim,
        unsigned long new,
        unsigned long start,
        unsigned long end_data,
        unsigned long start_data)
{
 if (rlim < (~0UL)) {
  if (((new - start) + (end_data - start_data)) > rlim)
   return -28;
 }

 return 0;
}

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);
extern struct file *get_task_exe_file(struct task_struct *task);

extern bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long npages);
extern void vm_stat_account(struct mm_struct *, vm_flags_t, long npages);

extern bool vma_is_special_mapping(const struct vm_area_struct *vma,
       const struct vm_special_mapping *sm);
extern struct vm_area_struct *_install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags,
       const struct vm_special_mapping *spec);

extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff,
 struct list_head *uf);
extern unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 vm_flags_t vm_flags, unsigned long pgoff, unsigned long *populate,
 struct list_head *uf);
extern int __do_munmap(struct mm_struct *, unsigned long, size_t,
         struct list_head *uf, bool downgrade);
extern int do_munmap(struct mm_struct *, unsigned long, size_t,
       struct list_head *uf);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
do_mmap_pgoff(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate,
 struct list_head *uf)
{
 return do_mmap(file, addr, len, prot, flags, 0, pgoff, populate, uf);
}


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern int __attribute__((__warn_unused_result__)) vm_brk(unsigned long, unsigned long);
extern int __attribute__((__warn_unused_result__)) vm_brk_flags(unsigned long, unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long __attribute__((__warn_unused_result__)) vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;
};

extern unsigned long unmapped_area(struct vm_unmapped_area_info *info);
extern unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info);
# 2373 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
vm_unmapped_area(struct vm_unmapped_area_info *info)
{
 if (info->flags & 1)
  return unmapped_area_topdown(info);
 else
  return unmapped_area(info);
}


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);
extern void truncate_inode_pages_final(struct address_space *);


extern vm_fault_t filemap_fault(struct vm_fault *vmf);
extern void filemap_map_pages(struct vm_fault *vmf,
  unsigned long start_pgoff, unsigned long end_pgoff);
extern vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf);


int __attribute__((__warn_unused_result__)) write_one_page(struct page *page);
void task_dirty_inc(struct task_struct *tsk);




int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
   unsigned long offset, unsigned long nr_to_read);

void page_cache_sync_readahead(struct address_space *mapping,
          struct file_ra_state *ra,
          struct file *filp,
          unsigned long offset,
          unsigned long size);

void page_cache_async_readahead(struct address_space *mapping,
    struct file_ra_state *ra,
    struct file *filp,
    struct page *pg,
    unsigned long offset,
    unsigned long size);

extern unsigned long stack_guard_gap;

extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, unsigned long start_addr, unsigned long end_addr)
{
 struct vm_area_struct * vma = find_vma(mm,start_addr);

 if (vma && end_addr <= vma->vm_start)
  vma = ((void *)0);
 return vma;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_start_gap(struct vm_area_struct *vma)
{
 unsigned long vm_start = vma->vm_start;

 if (vma->vm_flags & 0x00000100) {
  vm_start -= stack_guard_gap;
  if (vm_start > vma->vm_start)
   vm_start = 0;
 }
 return vm_start;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vm_end_gap(struct vm_area_struct *vma)
{
 unsigned long vm_end = vma->vm_end;

 if (vma->vm_flags & 0x00000000) {
  vm_end += stack_guard_gap;
  if (vm_end < vma->vm_end)
   vm_end = -((1UL) << 16);
 }
 return vm_end;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (vma->vm_end - vma->vm_start) >> 16;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (vma->vm_start != vm_start || vma->vm_end != vm_end))
  vma = ((void *)0);

 return vma;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool range_in_vma(struct vm_area_struct *vma,
    unsigned long start, unsigned long end)
{
 return (vma && vma->vm_start <= start && end <= vma->vm_end);
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
void vma_set_page_prot(struct vm_area_struct *vma);
# 2508 "../include/linux/mm.h"
unsigned long change_prot_numa(struct vm_area_struct *vma,
   unsigned long start, unsigned long end);


struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_map_pages(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,
    unsigned long num);
vm_fault_t vmf_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn, pgprot_t pgprot);
vm_fault_t vmf_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   pfn_t pfn);
vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *vma,
  unsigned long addr, pfn_t pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_insert_page(struct vm_area_struct *vma,
    unsigned long addr, struct page *page)
{
 int err = vm_insert_page(vma, addr, page);

 if (err == -12)
  return VM_FAULT_OOM;
 if (err < 0 && err != -16)
  return VM_FAULT_SIGBUS;

 return VM_FAULT_NOPAGE;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) vm_fault_t vmf_error(int err)
{
 if (err == -12)
  return VM_FAULT_OOM;
 return VM_FAULT_SIGBUS;
}

struct page *follow_page(struct vm_area_struct *vma, unsigned long address,
    unsigned int foll_flags);
# 2599 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vm_fault_to_errno(vm_fault_t vm_fault, int foll_flags)
{
 if (vm_fault & VM_FAULT_OOM)
  return -12;
 if (vm_fault & (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))
  return (foll_flags & 0x100) ? -133 : -14;
 if (vm_fault & (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))
  return -14;
 return 0;
}

typedef int (*pte_fn_t)(pte_t *pte, unsigned long addr, void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_poisoning_enabled(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_poison_pages(struct page *page, int numpages,
     int enable) { }





extern struct static_key_false init_on_alloc;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_alloc(gfp_t flags)
{
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_alloc)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_alloc), struct static_key_false)) branch = arch_static_branch(&(&init_on_alloc)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }) &&
     !page_poisoning_enabled())
  return true;
 return flags & (( gfp_t)0x100u);
}




extern struct static_key_false init_on_free;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool want_init_on_free(void)
{
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_true)) branch = arch_static_branch_jump(&(&init_on_free)->key, false); else if (__builtin_types_compatible_p(typeof(*&init_on_free), struct static_key_false)) branch = arch_static_branch(&(&init_on_free)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); }) &&
        !page_poisoning_enabled();
}




extern struct static_key_false _debug_pagealloc_enabled;


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_pagealloc_enabled(void)
{
 if (!0)
  return false;

 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_true)) branch = arch_static_branch_jump(&(&_debug_pagealloc_enabled)->key, false); else if (__builtin_types_compatible_p(typeof(*&_debug_pagealloc_enabled), struct static_key_false)) branch = arch_static_branch(&(&_debug_pagealloc_enabled)->key, false); else branch = ____wrong_branch_error(); __builtin_expect(!!(branch), 0); });
}


extern void __kernel_map_pages(struct page *page, int numpages, int enable);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
kernel_map_pages(struct page *page, int numpages, int enable)
{
 __kernel_map_pages(page, numpages, enable);
}

extern bool kernel_page_present(struct page *page);
# 2686 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_area_struct *get_gate_vma(struct mm_struct *mm)
{
 return ((void *)0);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area_no_mm(unsigned long addr) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int in_gate_area(struct mm_struct *mm, unsigned long addr)
{
 return 0;
}


extern bool process_shares_mm(struct task_struct *p, struct mm_struct *mm);


extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);


void drop_slab(void);
void drop_slab_node(int nid);




extern int randomize_va_space;


const char * arch_vma_name(struct vm_area_struct *vma);

void print_vma_addr(char *prefix, unsigned long rip);






void *sparse_buffer_alloc(unsigned long size);
struct page * __populate_section_memmap(unsigned long pfn,
  unsigned long nr_pages, int nid, struct vmem_altmap *altmap);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
pgd_t *vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node);
pud_t *vmemmap_pud_populate(pgd_t *p4d, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node);
void *vmemmap_alloc_block(unsigned long size, int node);
struct vmem_altmap;
void *vmemmap_alloc_block_buf(unsigned long size, int node);
void *altmap_alloc_block_buf(unsigned long size, struct vmem_altmap *altmap);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node);
int vmemmap_populate(unsigned long start, unsigned long end, int node,
  struct vmem_altmap *altmap);
void vmemmap_populate_print_last(void);

void vmemmap_free(unsigned long start, unsigned long end,
  struct vmem_altmap *altmap);

void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long nr_pages);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int flags);
extern void memory_failure_queue(unsigned long pfn, int flags);
extern int unpoison_memory(unsigned long pfn);
extern int get_hwpoison_page(struct page *page);

extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p, int access);
extern atomic_long_t num_poisoned_pages __attribute__((__section__(".data..read_mostly")));
extern int soft_offline_page(struct page *page, int flags);





enum mf_result {
 MF_IGNORED,
 MF_FAILED,
 MF_DELAYED,
 MF_RECOVERED,
};

enum mf_action_page_type {
 MF_MSG_KERNEL,
 MF_MSG_KERNEL_HIGH_ORDER,
 MF_MSG_SLAB,
 MF_MSG_DIFFERENT_COMPOUND,
 MF_MSG_POISONED_HUGE,
 MF_MSG_HUGE,
 MF_MSG_FREE_HUGE,
 MF_MSG_NON_PMD_HUGE,
 MF_MSG_UNMAP_FAILED,
 MF_MSG_DIRTY_SWAPCACHE,
 MF_MSG_CLEAN_SWAPCACHE,
 MF_MSG_DIRTY_MLOCKED_LRU,
 MF_MSG_CLEAN_MLOCKED_LRU,
 MF_MSG_DIRTY_UNEVICTABLE_LRU,
 MF_MSG_CLEAN_UNEVICTABLE_LRU,
 MF_MSG_DIRTY_LRU,
 MF_MSG_CLEAN_LRU,
 MF_MSG_TRUNCATED_LRU,
 MF_MSG_BUDDY,
 MF_MSG_BUDDY_2ND,
 MF_MSG_DAX,
 MF_MSG_UNKNOWN,
};


extern void clear_huge_page(struct page *page,
       unsigned long addr_hint,
       unsigned int pages_per_huge_page);
extern void copy_user_huge_page(struct page *dst, struct page *src,
    unsigned long addr_hint,
    struct vm_area_struct *vma,
    unsigned int pages_per_huge_page);
extern long copy_huge_page_from_user(struct page *dst_page,
    const void *usr_src,
    unsigned int pages_per_huge_page,
    bool allow_pagefault);
# 2837 "../include/linux/mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int debug_guardpage_minorder(void) { return 0; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool debug_guardpage_enabled(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool page_is_guard(struct page *page) { return false; }



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) setup_nr_node_ids(void);
# 9 "../include/linux/scatterlist.h" 2


struct scatterlist {
 unsigned long page_link;
 unsigned int offset;
 unsigned int length;
 dma_addr_t dma_address;

 unsigned int dma_length;

};
# 42 "../include/linux/scatterlist.h"
struct sg_table {
 struct scatterlist *sgl;
 unsigned int nents;
 unsigned int orig_nents;
};
# 87 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_assign_page(struct scatterlist *sg, struct page *page)
{
 unsigned long page_link = sg->page_link & (0x01UL | 0x02UL);





 do { if (__builtin_expect(!!((unsigned long) page & (0x01UL | 0x02UL)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/scatterlist.h\"; .popsection; .long 14472b - 14470b; .short 95; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);



 sg->page_link = page_link | (unsigned long) page;
}
# 116 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_set_page(struct scatterlist *sg, struct page *page,
          unsigned int len, unsigned int offset)
{
 sg_assign_page(sg, page);
 sg->offset = offset;
 sg->length = len;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *sg_page(struct scatterlist *sg)
{



 return (struct page *)((sg)->page_link & ~(0x01UL | 0x02UL));
}
# 139 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_set_buf(struct scatterlist *sg, const void *buf,
         unsigned int buflen)
{



 sg_set_page(sg, ({ u64 __idx = (((u64)buf) - ((-((((1UL))) << ((48)))))) / ((1UL) << 16); u64 __addr = (-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) + (__idx * sizeof(struct page)); (struct page *)__addr; }), buflen, ((unsigned long)(buf) & ~(~(((1UL) << 16)-1))));
}
# 164 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_chain(struct scatterlist *prv, unsigned int prv_nents,
       struct scatterlist *sgl)
{



 prv[prv_nents - 1].offset = 0;
 prv[prv_nents - 1].length = 0;





 prv[prv_nents - 1].page_link = ((unsigned long) sgl | 0x01UL)
     & ~0x02UL;
}
# 190 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_mark_end(struct scatterlist *sg)
{



 sg->page_link |= 0x02UL;
 sg->page_link &= ~0x01UL;
}
# 207 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_unmark_end(struct scatterlist *sg)
{
 sg->page_link &= ~0x02UL;
}
# 222 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t sg_phys(struct scatterlist *sg)
{
 return (((phys_addr_t)((unsigned long)((sg_page(sg)) - vmemmap)) << 16)) + sg->offset;
}
# 237 "../include/linux/scatterlist.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *sg_virt(struct scatterlist *sg)
{
 return lowmem_page_address(sg_page(sg)) + sg->offset;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sg_init_marker(struct scatterlist *sgl,
      unsigned int nents)
{
 sg_mark_end(&sgl[nents - 1]);
}

int sg_nents(struct scatterlist *sg);
int sg_nents_for_len(struct scatterlist *sg, u64 len);
struct scatterlist *sg_next(struct scatterlist *);
struct scatterlist *sg_last(struct scatterlist *s, unsigned int);
void sg_init_table(struct scatterlist *, unsigned int);
void sg_init_one(struct scatterlist *, const void *, unsigned int);
int sg_split(struct scatterlist *in, const int in_mapped_nents,
      const off_t skip, const int nb_splits,
      const size_t *split_sizes,
      struct scatterlist **out, int *out_mapped_nents,
      gfp_t gfp_mask);

typedef struct scatterlist *(sg_alloc_fn)(unsigned int, gfp_t);
typedef void (sg_free_fn)(struct scatterlist *, unsigned int);

void __sg_free_table(struct sg_table *, unsigned int, unsigned int,
       sg_free_fn *);
void sg_free_table(struct sg_table *);
int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int,
       struct scatterlist *, unsigned int, gfp_t, sg_alloc_fn *);
int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
int __sg_alloc_table_from_pages(struct sg_table *sgt, struct page **pages,
    unsigned int n_pages, unsigned int offset,
    unsigned long size, unsigned int max_segment,
    gfp_t gfp_mask);
int sg_alloc_table_from_pages(struct sg_table *sgt, struct page **pages,
         unsigned int n_pages, unsigned int offset,
         unsigned long size, gfp_t gfp_mask);


struct scatterlist *sgl_alloc_order(unsigned long long length,
        unsigned int order, bool chainable,
        gfp_t gfp, unsigned int *nent_p);
struct scatterlist *sgl_alloc(unsigned long long length, gfp_t gfp,
         unsigned int *nent_p);
void sgl_free_n_order(struct scatterlist *sgl, int nents, int order);
void sgl_free_order(struct scatterlist *sgl, int order);
void sgl_free(struct scatterlist *sgl);


size_t sg_copy_buffer(struct scatterlist *sgl, unsigned int nents, void *buf,
        size_t buflen, off_t skip, bool to_buffer);

size_t sg_copy_from_buffer(struct scatterlist *sgl, unsigned int nents,
      const void *buf, size_t buflen);
size_t sg_copy_to_buffer(struct scatterlist *sgl, unsigned int nents,
    void *buf, size_t buflen);

size_t sg_pcopy_from_buffer(struct scatterlist *sgl, unsigned int nents,
       const void *buf, size_t buflen, off_t skip);
size_t sg_pcopy_to_buffer(struct scatterlist *sgl, unsigned int nents,
     void *buf, size_t buflen, off_t skip);
size_t sg_zero_buffer(struct scatterlist *sgl, unsigned int nents,
         size_t buflen, off_t skip);
# 335 "../include/linux/scatterlist.h"
void sg_free_table_chained(struct sg_table *table,
      unsigned nents_first_chunk);
int sg_alloc_table_chained(struct sg_table *table, int nents,
      struct scatterlist *first_chunk,
      unsigned nents_first_chunk);
# 352 "../include/linux/scatterlist.h"
struct sg_page_iter {
 struct scatterlist *sg;
 unsigned int sg_pgoffset;


 unsigned int __nents;
 int __pg_advance;

};
# 369 "../include/linux/scatterlist.h"
struct sg_dma_page_iter {
 struct sg_page_iter base;
};

bool __sg_page_iter_next(struct sg_page_iter *piter);
bool __sg_page_iter_dma_next(struct sg_dma_page_iter *dma_iter);
void __sg_page_iter_start(struct sg_page_iter *piter,
     struct scatterlist *sglist, unsigned int nents,
     unsigned long pgoffset);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *sg_page_iter_page(struct sg_page_iter *piter)
{
 return (vmemmap + ((unsigned long)(((sg_page(piter->sg))) - vmemmap) + (piter->sg_pgoffset)));
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t
sg_page_iter_dma_address(struct sg_dma_page_iter *dma_iter)
{
 return ((dma_iter->base.sg)->dma_address) +
        (dma_iter->base.sg_pgoffset << 16);
}
# 447 "../include/linux/scatterlist.h"
struct sg_mapping_iter {

 struct page *page;
 void *addr;
 size_t length;
 size_t consumed;
 struct sg_page_iter piter;


 unsigned int __offset;
 unsigned int __remaining;
 unsigned int __flags;
};

void sg_miter_start(struct sg_mapping_iter *miter, struct scatterlist *sgl,
      unsigned int nents, unsigned int flags);
bool sg_miter_skip(struct sg_mapping_iter *miter, off_t offset);
bool sg_miter_next(struct sg_mapping_iter *miter);
void sg_miter_stop(struct sg_mapping_iter *miter);
# 15 "../include/linux/dmapool.h" 2


struct device;



struct dma_pool *dma_pool_create(const char *name, struct device *dev,
   size_t size, size_t align, size_t allocation);

void dma_pool_destroy(struct dma_pool *pool);

void *dma_pool_alloc(struct dma_pool *pool, gfp_t mem_flags,
       dma_addr_t *handle);
void dma_pool_free(struct dma_pool *pool, void *vaddr, dma_addr_t addr);




struct dma_pool *dmam_pool_create(const char *name, struct device *dev,
      size_t size, size_t align, size_t allocation);
void dmam_pool_destroy(struct dma_pool *pool);
# 52 "../include/linux/dmapool.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dma_pool_zalloc(struct dma_pool *pool, gfp_t mem_flags,
        dma_addr_t *handle)
{
 return dma_pool_alloc(pool, mem_flags | (( gfp_t)0x100u), handle);
}
# 1417 "../include/linux/pci.h" 2
# 1427 "../include/linux/pci.h"
struct msix_entry {
 u32 vector;
 u16 entry;
};


int pci_msi_vec_count(struct pci_dev *dev);
void pci_disable_msi(struct pci_dev *dev);
int pci_msix_vec_count(struct pci_dev *dev);
void pci_disable_msix(struct pci_dev *dev);
void pci_restore_msi_state(struct pci_dev *dev);
int pci_msi_enabled(void);
int pci_enable_msi(struct pci_dev *dev);
int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
     int minvec, int maxvec);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_enable_msix_exact(struct pci_dev *dev,
     struct msix_entry *entries, int nvec)
{
 int rc = pci_enable_msix_range(dev, entries, nvec, nvec);
 if (rc < 0)
  return rc;
 return 0;
}
int pci_alloc_irq_vectors_affinity(struct pci_dev *dev, unsigned int min_vecs,
       unsigned int max_vecs, unsigned int flags,
       struct irq_affinity *affd);

void pci_free_irq_vectors(struct pci_dev *dev);
int pci_irq_vector(struct pci_dev *dev, unsigned int nr);
const struct cpumask *pci_irq_get_affinity(struct pci_dev *pdev, int vec);
int pci_irq_get_node(struct pci_dev *pdev, int vec);
# 1523 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_irqd_intx_xlate(struct irq_domain *d,
          struct device_node *node,
          const u32 *intspec,
          unsigned int intsize,
          unsigned long *out_hwirq,
          unsigned int *out_type)
{
 const u32 intx = intspec[0];

 if (intx < PCI_INTERRUPT_INTA || intx > PCI_INTERRUPT_INTD)
  return -22;

 *out_hwirq = intx - PCI_INTERRUPT_INTA;
 return 0;
}


extern bool pcie_ports_disabled;
extern bool pcie_ports_native;
# 1552 "../include/linux/pci.h"
int pci_disable_link_state(struct pci_dev *pdev, int state);
int pci_disable_link_state_locked(struct pci_dev *pdev, int state);
void pcie_no_aspm(void);
bool pcie_aspm_support_enabled(void);
bool pcie_aspm_enabled(struct pci_dev *pdev);
# 1568 "../include/linux/pci.h"
bool pci_aer_available(void);




bool pci_ats_disabled(void);

void pci_cfg_access_lock(struct pci_dev *dev);
bool pci_cfg_access_trylock(struct pci_dev *dev);
void pci_cfg_access_unlock(struct pci_dev *dev);







extern int pci_domains_supported;
# 1598 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_domain_nr(struct pci_bus *bus)
{
 return bus->domain_nr;
}

int acpi_pci_bus_find_domain_nr(struct pci_bus *bus);




int pci_bus_find_domain_nr(struct pci_bus *bus, struct device *parent);



typedef int (*arch_set_vga_state_t)(struct pci_dev *pdev, bool decode,
        unsigned int command_bits, u32 flags);
void pci_register_set_vga_state(arch_set_vga_state_t func);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_request_io_regions(struct pci_dev *pdev, const char *name)
{
 return pci_request_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000100), name);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_release_io_regions(struct pci_dev *pdev)
{
 return pci_release_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000100));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_request_mem_regions(struct pci_dev *pdev, const char *name)
{
 return pci_request_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000200), name);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_release_mem_regions(struct pci_dev *pdev)
{
 return pci_release_selected_regions(pdev,
       pci_select_bars(pdev, 0x00000200));
}
# 1771 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_alloc_irq_vectors(struct pci_dev *dev, unsigned int min_vecs,
        unsigned int max_vecs, unsigned int flags)
{
 return pci_alloc_irq_vectors_affinity(dev, min_vecs, max_vecs, flags,
           ((void *)0));
}



int pci_enable_ats(struct pci_dev *dev, int ps);
void pci_disable_ats(struct pci_dev *dev);
int pci_ats_queue_depth(struct pci_dev *dev);
int pci_ats_page_aligned(struct pci_dev *dev);
# 1794 "../include/linux/pci.h"
# 1 "../arch/arm64/include/asm/pci.h" 1






# 1 "../include/linux/dma-mapping.h" 1








# 1 "../include/linux/dma-debug.h" 1
# 13 "../include/linux/dma-debug.h"
struct device;
struct scatterlist;
struct bus_type;
# 74 "../include/linux/dma-debug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_debug_add_bus(struct bus_type *bus)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_map_single(struct device *dev, const void *addr,
     unsigned long len)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_map_page(struct device *dev, struct page *page,
          size_t offset, size_t size,
          int direction, dma_addr_t dma_addr)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_mapping_error(struct device *dev,
       dma_addr_t dma_addr)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_unmap_page(struct device *dev, dma_addr_t addr,
     size_t size, int direction)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_map_sg(struct device *dev, struct scatterlist *sg,
        int nents, int mapped_ents, int direction)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_unmap_sg(struct device *dev,
          struct scatterlist *sglist,
          int nelems, int dir)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_alloc_coherent(struct device *dev, size_t size,
         dma_addr_t dma_addr, void *virt)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_free_coherent(struct device *dev, size_t size,
        void *virt, dma_addr_t addr)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_map_resource(struct device *dev, phys_addr_t addr,
       size_t size, int direction,
       dma_addr_t dma_addr)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_unmap_resource(struct device *dev,
         dma_addr_t dma_addr, size_t size,
         int direction)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_sync_single_for_cpu(struct device *dev,
       dma_addr_t dma_handle,
       size_t size, int direction)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_sync_single_for_device(struct device *dev,
          dma_addr_t dma_handle,
          size_t size, int direction)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_sync_sg_for_cpu(struct device *dev,
          struct scatterlist *sg,
          int nelems, int direction)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_sync_sg_for_device(struct device *dev,
      struct scatterlist *sg,
      int nelems, int direction)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_dump_mappings(struct device *dev)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void debug_dma_assert_idle(struct page *page)
{
}
# 10 "../include/linux/dma-mapping.h" 2
# 1 "../include/linux/dma-direction.h" 1




enum dma_data_direction {
 DMA_BIDIRECTIONAL = 0,
 DMA_TO_DEVICE = 1,
 DMA_FROM_DEVICE = 2,
 DMA_NONE = 3,
};
# 11 "../include/linux/dma-mapping.h" 2


# 1 "../include/linux/mem_encrypt.h" 1
# 21 "../include/linux/mem_encrypt.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mem_encrypt_active(void) { return false; }
# 14 "../include/linux/dma-mapping.h" 2
# 79 "../include/linux/dma-mapping.h"
struct dma_map_ops {
 void* (*alloc)(struct device *dev, size_t size,
    dma_addr_t *dma_handle, gfp_t gfp,
    unsigned long attrs);
 void (*free)(struct device *dev, size_t size,
         void *vaddr, dma_addr_t dma_handle,
         unsigned long attrs);
 int (*mmap)(struct device *, struct vm_area_struct *,
     void *, dma_addr_t, size_t,
     unsigned long attrs);

 int (*get_sgtable)(struct device *dev, struct sg_table *sgt, void *,
      dma_addr_t, size_t, unsigned long attrs);

 dma_addr_t (*map_page)(struct device *dev, struct page *page,
          unsigned long offset, size_t size,
          enum dma_data_direction dir,
          unsigned long attrs);
 void (*unmap_page)(struct device *dev, dma_addr_t dma_handle,
      size_t size, enum dma_data_direction dir,
      unsigned long attrs);




 int (*map_sg)(struct device *dev, struct scatterlist *sg,
        int nents, enum dma_data_direction dir,
        unsigned long attrs);
 void (*unmap_sg)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir,
    unsigned long attrs);
 dma_addr_t (*map_resource)(struct device *dev, phys_addr_t phys_addr,
          size_t size, enum dma_data_direction dir,
          unsigned long attrs);
 void (*unmap_resource)(struct device *dev, dma_addr_t dma_handle,
      size_t size, enum dma_data_direction dir,
      unsigned long attrs);
 void (*sync_single_for_cpu)(struct device *dev,
        dma_addr_t dma_handle, size_t size,
        enum dma_data_direction dir);
 void (*sync_single_for_device)(struct device *dev,
           dma_addr_t dma_handle, size_t size,
           enum dma_data_direction dir);
 void (*sync_sg_for_cpu)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir);
 void (*sync_sg_for_device)(struct device *dev,
       struct scatterlist *sg, int nents,
       enum dma_data_direction dir);
 void (*cache_sync)(struct device *dev, void *vaddr, size_t size,
   enum dma_data_direction direction);
 int (*dma_supported)(struct device *dev, u64 mask);
 u64 (*get_required_mask)(struct device *dev);
 size_t (*max_mapping_size)(struct device *dev);
 unsigned long (*get_merge_boundary)(struct device *dev);
};



extern const struct dma_map_ops dma_virt_ops;
extern const struct dma_map_ops dma_dummy_ops;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_dma_direction(int dma_direction)
{
 return ((dma_direction == DMA_BIDIRECTIONAL) ||
  (dma_direction == DMA_TO_DEVICE) ||
  (dma_direction == DMA_FROM_DEVICE));
}






int dma_alloc_from_dev_coherent(struct device *dev, ssize_t size,
           dma_addr_t *dma_handle, void **ret);
int dma_release_from_dev_coherent(struct device *dev, int order, void *vaddr);

int dma_mmap_from_dev_coherent(struct device *dev, struct vm_area_struct *vma,
       void *cpu_addr, size_t size, int *ret);

void *dma_alloc_from_global_coherent(ssize_t size, dma_addr_t *dma_handle);
int dma_release_from_global_coherent(int order, void *vaddr);
int dma_mmap_from_global_coherent(struct vm_area_struct *vma, void *cpu_addr,
      size_t size, int *ret);
# 194 "../include/linux/dma-mapping.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_is_direct(const struct dma_map_ops *ops)
{
 return __builtin_expect(!!(!ops), 1);
}





dma_addr_t dma_direct_map_page(struct device *dev, struct page *page,
  unsigned long offset, size_t size, enum dma_data_direction dir,
  unsigned long attrs);
int dma_direct_map_sg(struct device *dev, struct scatterlist *sgl, int nents,
  enum dma_data_direction dir, unsigned long attrs);
dma_addr_t dma_direct_map_resource(struct device *dev, phys_addr_t paddr,
  size_t size, enum dma_data_direction dir, unsigned long attrs);



void dma_direct_sync_single_for_device(struct device *dev,
  dma_addr_t addr, size_t size, enum dma_data_direction dir);
void dma_direct_sync_sg_for_device(struct device *dev,
  struct scatterlist *sgl, int nents, enum dma_data_direction dir);
# 231 "../include/linux/dma-mapping.h"
void dma_direct_unmap_page(struct device *dev, dma_addr_t addr,
  size_t size, enum dma_data_direction dir, unsigned long attrs);
void dma_direct_unmap_sg(struct device *dev, struct scatterlist *sgl,
  int nents, enum dma_data_direction dir, unsigned long attrs);
void dma_direct_sync_single_for_cpu(struct device *dev,
  dma_addr_t addr, size_t size, enum dma_data_direction dir);
void dma_direct_sync_sg_for_cpu(struct device *dev,
  struct scatterlist *sgl, int nents, enum dma_data_direction dir);
# 259 "../include/linux/dma-mapping.h"
size_t dma_direct_max_mapping_size(struct device *dev);



# 1 "./arch/arm64/include/generated/asm/dma-mapping.h" 1
# 1 "../include/asm-generic/dma-mapping.h" 1




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
 return ((void *)0);
}
# 2 "./arch/arm64/include/generated/asm/dma-mapping.h" 2
# 263 "../include/linux/dma-mapping.h" 2

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct dma_map_ops *get_dma_ops(struct device *dev)
{
 if (dev->dma_ops)
  return dev->dma_ops;
 return get_arch_dma_ops(dev->bus);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dma_ops(struct device *dev,
          const struct dma_map_ops *dma_ops)
{
 dev->dma_ops = dma_ops;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t dma_map_page_attrs(struct device *dev,
  struct page *page, size_t offset, size_t size,
  enum dma_data_direction dir, unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 284; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (dma_is_direct(ops))
  addr = dma_direct_map_page(dev, page, offset, size, dir, attrs);
 else
  addr = ops->map_page(dev, page, offset, size, dir, attrs);
 debug_dma_map_page(dev, page, offset, size, dir, addr);

 return addr;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr,
  size_t size, enum dma_data_direction dir, unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 299; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (dma_is_direct(ops))
  dma_direct_unmap_page(dev, addr, size, dir, attrs);
 else if (ops->unmap_page)
  ops->unmap_page(dev, addr, size, dir, attrs);
 debug_dma_unmap_page(dev, addr, size, dir);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_map_sg_attrs(struct device *dev, struct scatterlist *sg,
       int nents, enum dma_data_direction dir,
       unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 int ents;

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 318; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (dma_is_direct(ops))
  ents = dma_direct_map_sg(dev, sg, nents, dir, attrs);
 else
  ents = ops->map_sg(dev, sg, nents, dir, attrs);
 do { if (__builtin_expect(!!(ents < 0), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 323; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 debug_dma_map_sg(dev, sg, nents, ents, dir);

 return ents;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_unmap_sg_attrs(struct device *dev, struct scatterlist *sg,
          int nents, enum dma_data_direction dir,
          unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 335; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 debug_dma_unmap_sg(dev, sg, nents, dir);
 if (dma_is_direct(ops))
  dma_direct_unmap_sg(dev, sg, nents, dir, attrs);
 else if (ops->unmap_sg)
  ops->unmap_sg(dev, sg, nents, dir, attrs);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t dma_map_resource(struct device *dev,
       phys_addr_t phys_addr,
       size_t size,
       enum dma_data_direction dir,
       unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr = (~(dma_addr_t)0);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 352; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);


 if (({ int __ret_warn_on = !!(pfn_valid(((unsigned long)((phys_addr) >> 16)))); if (__builtin_expect(!!(__ret_warn_on), 0)) asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 355; .short (1 << 0)|((1 << 1)|((9) << 8)); .popsection; 14471: brk 0x800");; __builtin_expect(!!(__ret_warn_on), 0); }))
  return (~(dma_addr_t)0);

 if (dma_is_direct(ops))
  addr = dma_direct_map_resource(dev, phys_addr, size, dir, attrs);
 else if (ops->map_resource)
  addr = ops->map_resource(dev, phys_addr, size, dir, attrs);

 debug_dma_map_resource(dev, phys_addr, size, dir, addr);
 return addr;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_unmap_resource(struct device *dev, dma_addr_t addr,
          size_t size, enum dma_data_direction dir,
          unsigned long attrs)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 373; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (!dma_is_direct(ops) && ops->unmap_resource)
  ops->unmap_resource(dev, addr, size, dir, attrs);
 debug_dma_unmap_resource(dev, addr, size, dir);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr,
        size_t size,
        enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 385; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (dma_is_direct(ops))
  dma_direct_sync_single_for_cpu(dev, addr, size, dir);
 else if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(dev, addr, size, dir);
 debug_dma_sync_single_for_cpu(dev, addr, size, dir);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_single_for_device(struct device *dev,
           dma_addr_t addr, size_t size,
           enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 399; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (dma_is_direct(ops))
  dma_direct_sync_single_for_device(dev, addr, size, dir);
 else if (ops->sync_single_for_device)
  ops->sync_single_for_device(dev, addr, size, dir);
 debug_dma_sync_single_for_device(dev, addr, size, dir);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
dma_sync_sg_for_cpu(struct device *dev, struct scatterlist *sg,
      int nelems, enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 413; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (dma_is_direct(ops))
  dma_direct_sync_sg_for_cpu(dev, sg, nelems, dir);
 else if (ops->sync_sg_for_cpu)
  ops->sync_sg_for_cpu(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_cpu(dev, sg, nelems, dir);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
dma_sync_sg_for_device(struct device *dev, struct scatterlist *sg,
         int nelems, enum dma_data_direction dir)
{
 const struct dma_map_ops *ops = get_dma_ops(dev);

 do { if (__builtin_expect(!!(!valid_dma_direction(dir)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-mapping.h\"; .popsection; .long 14472b - 14470b; .short 427; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (dma_is_direct(ops))
  dma_direct_sync_sg_for_device(dev, sg, nelems, dir);
 else if (ops->sync_sg_for_device)
  ops->sync_sg_for_device(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_device(dev, sg, nelems, dir);

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
 debug_dma_mapping_error(dev, dma_addr);

 if (dma_addr == (~(dma_addr_t)0))
  return -12;
 return 0;
}

void *dma_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
  gfp_t flag, unsigned long attrs);
void dma_free_attrs(struct device *dev, size_t size, void *cpu_addr,
  dma_addr_t dma_handle, unsigned long attrs);
void *dmam_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
  gfp_t gfp, unsigned long attrs);
void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,
  dma_addr_t dma_handle);
void dma_cache_sync(struct device *dev, void *vaddr, size_t size,
  enum dma_data_direction dir);
int dma_get_sgtable_attrs(struct device *dev, struct sg_table *sgt,
  void *cpu_addr, dma_addr_t dma_addr, size_t size,
  unsigned long attrs);
int dma_mmap_attrs(struct device *dev, struct vm_area_struct *vma,
  void *cpu_addr, dma_addr_t dma_addr, size_t size,
  unsigned long attrs);
bool dma_can_mmap(struct device *dev);
int dma_supported(struct device *dev, u64 mask);
int dma_set_mask(struct device *dev, u64 mask);
int dma_set_coherent_mask(struct device *dev, u64 mask);
u64 dma_get_required_mask(struct device *dev);
size_t dma_max_mapping_size(struct device *dev);
unsigned long dma_get_merge_boundary(struct device *dev);
# 583 "../include/linux/dma-mapping.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr,
  size_t size, enum dma_data_direction dir, unsigned long attrs)
{
 debug_dma_map_single(dev, ptr, size);
 return dma_map_page_attrs(dev, ({ u64 __idx = (((u64)ptr) - ((-((((1UL))) << ((48)))))) / ((1UL) << 16); u64 __addr = (-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) + (__idx * sizeof(struct page)); (struct page *)__addr; }), ((unsigned long)(ptr) & ~(~(((1UL) << 16)-1))),
   size, dir, attrs);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr,
  size_t size, enum dma_data_direction dir, unsigned long attrs)
{
 return dma_unmap_page_attrs(dev, addr, size, dir, attrs);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_single_range_for_cpu(struct device *dev,
  dma_addr_t addr, unsigned long offset, size_t size,
  enum dma_data_direction dir)
{
 return dma_sync_single_for_cpu(dev, addr + offset, size, dir);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_sync_single_range_for_device(struct device *dev,
  dma_addr_t addr, unsigned long offset, size_t size,
  enum dma_data_direction dir)
{
 return dma_sync_single_for_device(dev, addr + offset, size, dir);
}
# 620 "../include/linux/dma-mapping.h"
extern int dma_common_mmap(struct device *dev, struct vm_area_struct *vma,
  void *cpu_addr, dma_addr_t dma_addr, size_t size,
  unsigned long attrs);

struct page **dma_common_find_pages(void *cpu_addr);
void *dma_common_contiguous_remap(struct page *page, size_t size,
   pgprot_t prot, const void *caller);

void *dma_common_pages_remap(struct page **pages, size_t size,
   pgprot_t prot, const void *caller);
void dma_common_free_remap(void *cpu_addr, size_t size);

bool dma_in_atomic_pool(void *start, size_t size);
void *dma_alloc_from_pool(size_t size, struct page **ret_page, gfp_t flags);
bool dma_free_from_pool(void *start, size_t size);

int
dma_common_get_sgtable(struct device *dev, struct sg_table *sgt, void *cpu_addr,
  dma_addr_t dma_addr, size_t size, unsigned long attrs);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dma_alloc_coherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, gfp_t gfp)
{

 return dma_alloc_attrs(dev, size, dma_handle, gfp,
   (gfp & (( gfp_t)0x2000u)) ? (1UL << 8) : 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_free_coherent(struct device *dev, size_t size,
  void *cpu_addr, dma_addr_t dma_handle)
{
 return dma_free_attrs(dev, size, cpu_addr, dma_handle, 0);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 dma_get_mask(struct device *dev)
{
 if (dev->dma_mask && *dev->dma_mask)
  return *dev->dma_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
 int rc = dma_set_mask(dev, mask);
 if (rc == 0)
  dma_set_coherent_mask(dev, mask);
 return rc;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_coerce_mask_and_coherent(struct device *dev, u64 mask)
{
 dev->dma_mask = &dev->coherent_dma_mask;
 return dma_set_mask_and_coherent(dev, mask);
}
# 694 "../include/linux/dma-mapping.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_addressing_limited(struct device *dev)
{
 return ({ typeof(dma_get_mask(dev)) __x = (dma_get_mask(dev)); typeof(dev->bus_dma_mask) __y = (dev->bus_dma_mask); __x == 0 ? __y : ((__y == 0) ? __x : __builtin_choose_expr(((!!(sizeof((typeof(__x) *)1 == (typeof(__y) *)1))) && ((sizeof(int) == sizeof(*(8 ? ((void *)((long)(__x) * 0l)) : (int *)8))) && (sizeof(int) == sizeof(*(8 ? ((void *)((long)(__y) * 0l)) : (int *)8))))), ((__x) < (__y) ? (__x) : (__y)), ({ typeof(__x) __UNIQUE_ID___x14 = (__x); typeof(__y) __UNIQUE_ID___y15 = (__y); ((__UNIQUE_ID___x14) < (__UNIQUE_ID___y15) ? (__UNIQUE_ID___x14) : (__UNIQUE_ID___y15)); }))); }) <
       dma_get_required_mask(dev);
}


void arch_setup_dma_ops(struct device *dev, u64 dma_base, u64 size,
  const struct iommu_ops *iommu, bool coherent);
# 711 "../include/linux/dma-mapping.h"
void arch_teardown_dma_ops(struct device *dev);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int dma_get_max_seg_size(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->max_segment_size)
  return dev->dma_parms->max_segment_size;
 return 0x00010000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_set_max_seg_size(struct device *dev, unsigned int size)
{
 if (dev->dma_parms) {
  dev->dma_parms->max_segment_size = size;
  return 0;
 }
 return -5;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dma_get_seg_boundary(struct device *dev)
{
 if (dev->dma_parms && dev->dma_parms->segment_boundary_mask)
  return dev->dma_parms->segment_boundary_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_set_seg_boundary(struct device *dev, unsigned long mask)
{
 if (dev->dma_parms) {
  dev->dma_parms->segment_boundary_mask = mask;
  return 0;
 }
 return -5;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_get_cache_alignment(void)
{

 return (128);

 return 1;
}


int dma_declare_coherent_memory(struct device *dev, phys_addr_t phys_addr,
    dma_addr_t device_addr, size_t size);
# 770 "../include/linux/dma-mapping.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dmam_alloc_coherent(struct device *dev, size_t size,
  dma_addr_t *dma_handle, gfp_t gfp)
{
 return dmam_alloc_attrs(dev, size, dma_handle, gfp,
   (gfp & (( gfp_t)0x2000u)) ? (1UL << 8) : 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *dma_alloc_wc(struct device *dev, size_t size,
     dma_addr_t *dma_addr, gfp_t gfp)
{
 unsigned long attrs = (1UL << 2);

 if (gfp & (( gfp_t)0x2000u))
  attrs |= (1UL << 8);

 return dma_alloc_attrs(dev, size, dma_addr, gfp, attrs);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_free_wc(struct device *dev, size_t size,
          void *cpu_addr, dma_addr_t dma_addr)
{
 return dma_free_attrs(dev, size, cpu_addr, dma_addr,
         (1UL << 2));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_mmap_wc(struct device *dev,
         struct vm_area_struct *vma,
         void *cpu_addr, dma_addr_t dma_addr,
         size_t size)
{
 return dma_mmap_attrs(dev, vma, cpu_addr, dma_addr, size,
         (1UL << 2));
}
# 8 "../arch/arm64/include/asm/pci.h" 2
# 22 "../arch/arm64/include/asm/pci.h"
extern int isa_dma_bridge_buggy;


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_get_legacy_ide_irq(struct pci_dev *dev, int channel)
{

 return -19;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_proc_domain(struct pci_bus *bus)
{
 return 1;
}
# 1795 "../include/linux/pci.h" 2
# 1808 "../include/linux/pci.h"
int pci_mmap_resource_range(struct pci_dev *dev, int bar,
       struct vm_area_struct *vma,
       enum pci_mmap_state mmap_state, int write_combine);
int pci_mmap_page_range(struct pci_dev *pdev, int bar,
   struct vm_area_struct *vma,
   enum pci_mmap_state mmap_state, int write_combine);
# 1850 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *pci_get_drvdata(struct pci_dev *pdev)
{
 return dev_get_drvdata(&pdev->dev);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
 dev_set_drvdata(&pdev->dev, data);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *pci_name(const struct pci_dev *pdev)
{
 return dev_name(&pdev->dev);
}

void pci_resource_to_user(const struct pci_dev *dev, int bar,
     const struct resource *rsrc,
     resource_size_t *start, resource_size_t *end);
# 1876 "../include/linux/pci.h"
struct pci_fixup {
 u16 vendor;
 u16 device;
 u32 class;
 unsigned int class_shift;

 int hook_offset;



};

enum pci_fixup_pass {
 pci_fixup_early,
 pci_fixup_header,
 pci_fixup_final,
 pci_fixup_enable,
 pci_fixup_resume,
 pci_fixup_suspend,
 pci_fixup_resume_early,
 pci_fixup_suspend_late,
};
# 1981 "../include/linux/pci.h"
void pci_fixup_device(enum pci_fixup_pass pass, struct pci_dev *dev);





void *pcim_iomap(struct pci_dev *pdev, int bar, unsigned long maxlen);
void pcim_iounmap(struct pci_dev *pdev, void *addr);
void * const *pcim_iomap_table(struct pci_dev *pdev);
int pcim_iomap_regions(struct pci_dev *pdev, int mask, const char *name);
int pcim_iomap_regions_request_all(struct pci_dev *pdev, int mask,
       const char *name);
void pcim_iounmap_regions(struct pci_dev *pdev, int mask);

extern int pci_pci_problems;
# 2004 "../include/linux/pci.h"
extern unsigned long pci_cardbus_io_size;
extern unsigned long pci_cardbus_mem_size;
extern u8 pci_dfl_cache_line_size;
extern u8 pci_cache_line_size;


void pcibios_disable_device(struct pci_dev *dev);
void pcibios_set_master(struct pci_dev *dev);
int pcibios_set_pcie_reset_state(struct pci_dev *dev,
     enum pcie_reset_state state);
int pcibios_add_device(struct pci_dev *dev);
void pcibios_release_device(struct pci_dev *dev);

void pcibios_penalize_isa_irq(int irq, int active);



int pcibios_alloc_irq(struct pci_dev *dev);
void pcibios_free_irq(struct pci_dev *dev);
resource_size_t pcibios_default_alignment(void);


extern struct dev_pm_ops pcibios_pm_ops;



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pci_mmcfg_early_init(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) pci_mmcfg_late_init(void);





int pci_ext_cfg_avail(void);

void *pci_ioremap_bar(struct pci_dev *pdev, int bar);
void *pci_ioremap_wc_bar(struct pci_dev *pdev, int bar);


int pci_iov_virtfn_bus(struct pci_dev *dev, int id);
int pci_iov_virtfn_devfn(struct pci_dev *dev, int id);

int pci_enable_sriov(struct pci_dev *dev, int nr_virtfn);
void pci_disable_sriov(struct pci_dev *dev);
int pci_iov_add_virtfn(struct pci_dev *dev, int id);
void pci_iov_remove_virtfn(struct pci_dev *dev, int id);
int pci_num_vf(struct pci_dev *dev);
int pci_vfs_assigned(struct pci_dev *dev);
int pci_sriov_set_totalvfs(struct pci_dev *dev, u16 numvfs);
int pci_sriov_get_totalvfs(struct pci_dev *dev);
int pci_sriov_configure_simple(struct pci_dev *dev, int nr_virtfn);
resource_size_t pci_iov_resource_size(struct pci_dev *dev, int resno);
void pci_vf_drivers_autoprobe(struct pci_dev *dev, bool probe);


int pcibios_sriov_enable(struct pci_dev *pdev, u16 num_vfs);
int pcibios_sriov_disable(struct pci_dev *pdev);
resource_size_t pcibios_iov_resource_alignment(struct pci_dev *dev, int resno);
# 2094 "../include/linux/pci.h"
void pci_hp_create_module_link(struct pci_slot *pci_slot);
void pci_hp_remove_module_link(struct pci_slot *pci_slot);
# 2109 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_pcie_cap(struct pci_dev *dev)
{
 return dev->pcie_cap;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_pcie(struct pci_dev *dev)
{
 return pci_pcie_cap(dev);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 pcie_caps_reg(const struct pci_dev *dev)
{
 return dev->pcie_flags_reg;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_pcie_type(const struct pci_dev *dev)
{
 return (pcie_caps_reg(dev) & 0x00f0) >> 4;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pci_dev *pcie_find_root_port(struct pci_dev *dev)
{
 while (1) {
  if (!pci_is_pcie(dev))
   break;
  if (pci_pcie_type(dev) == 0x4)
   return dev;
  if (!dev->bus->self)
   break;
  dev = dev->bus->self;
 }
 return ((void *)0);
}

void pci_request_acs(void);
bool pci_acs_enabled(struct pci_dev *pdev, u16 acs_flags);
bool pci_acs_path_enabled(struct pci_dev *start,
     struct pci_dev *end, u16 acs_flags);
int pci_enable_atomic_ops_to_root(struct pci_dev *dev, u32 cap_mask);
# 2200 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 pci_vpd_lrdt_size(const u8 *lrdt)
{
 return (u16)lrdt[1] + ((u16)lrdt[2] << 8);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 pci_vpd_lrdt_tag(const u8 *lrdt)
{
 return (u16)(lrdt[0] & 0x7f);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 pci_vpd_srdt_size(const u8 *srdt)
{
 return (*srdt) & 0x07;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 pci_vpd_srdt_tag(const u8 *srdt)
{
 return ((*srdt) & 0x78) >> 3;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 pci_vpd_info_field_size(const u8 *info_field)
{
 return info_field[2];
}
# 2259 "../include/linux/pci.h"
int pci_vpd_find_tag(const u8 *buf, unsigned int off, unsigned int len, u8 rdt);
# 2271 "../include/linux/pci.h"
int pci_vpd_find_info_keyword(const u8 *buf, unsigned int off,
         unsigned int len, const char *kw);



struct device_node;
struct irq_domain;
struct irq_domain *pci_host_bridge_of_msi_domain(struct pci_bus *bus);
int pci_parse_request_of_pci_ranges(struct device *dev,
        struct list_head *resources,
        struct resource **bus_range);


struct device_node *pcibios_get_phb_of_node(struct pci_bus *bus);
# 2297 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *
pci_device_to_OF_node(const struct pci_dev *pdev)
{
 return pdev ? pdev->dev.of_node : ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *pci_bus_to_OF_node(struct pci_bus *bus)
{
 return bus ? bus->dev.of_node : ((void *)0);
}


struct irq_domain *pci_host_bridge_acpi_msi_domain(struct pci_bus *bus);

void
pci_msi_register_fwnode_provider(struct fwnode_handle *(*fn)(struct device *));
# 2325 "../include/linux/pci.h"
void pci_add_dma_alias(struct pci_dev *dev, u8 devfn);
bool pci_devs_are_dma_aliases(struct pci_dev *dev1, struct pci_dev *dev2);
int pci_for_each_dma_alias(struct pci_dev *pdev,
      int (*fn)(struct pci_dev *pdev,
         u16 alias, void *data), void *data);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_set_dev_assigned(struct pci_dev *pdev)
{
 pdev->dev_flags |= PCI_DEV_FLAGS_ASSIGNED;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_clear_dev_assigned(struct pci_dev *pdev)
{
 pdev->dev_flags &= ~PCI_DEV_FLAGS_ASSIGNED;
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_dev_assigned(struct pci_dev *pdev)
{
 return (pdev->dev_flags & PCI_DEV_FLAGS_ASSIGNED) == PCI_DEV_FLAGS_ASSIGNED;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_ari_enabled(struct pci_bus *bus)
{
 return bus->self && bus->self->ari_enabled;
}
# 2364 "../include/linux/pci.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pci_is_thunderbolt_attached(struct pci_dev *pdev)
{
 struct pci_dev *parent = pdev;

 if (pdev->is_thunderbolt)
  return true;

 while ((parent = pci_upstream_bridge(parent)))
  if (parent->is_thunderbolt)
   return true;

 return false;
}


void pci_uevent_ers(struct pci_dev *pdev, enum pci_ers_result err_type);




# 1 "../include/linux/pci-dma-compat.h" 1
# 16 "../include/linux/pci-dma-compat.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
pci_alloc_consistent(struct pci_dev *hwdev, size_t size,
       dma_addr_t *dma_handle)
{
 return dma_alloc_coherent(&hwdev->dev, size, dma_handle, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *
pci_zalloc_consistent(struct pci_dev *hwdev, size_t size,
        dma_addr_t *dma_handle)
{
 return dma_alloc_coherent(&hwdev->dev, size, dma_handle, ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_free_consistent(struct pci_dev *hwdev, size_t size,
      void *vaddr, dma_addr_t dma_handle)
{
 dma_free_coherent(&hwdev->dev, size, vaddr, dma_handle);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t
pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
 return dma_map_single_attrs(&hwdev->dev, ptr, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr,
   size_t size, int direction)
{
 dma_unmap_single_attrs(&hwdev->dev, dma_addr, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) dma_addr_t
pci_map_page(struct pci_dev *hwdev, struct page *page,
      unsigned long offset, size_t size, int direction)
{
 return dma_map_page_attrs(&hwdev->dev, page, offset, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address,
        size_t size, int direction)
{
 dma_unmap_page_attrs(&hwdev->dev, dma_address, size, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_map_sg(struct pci_dev *hwdev, struct scatterlist *sg,
    int nents, int direction)
{
 return dma_map_sg_attrs(&hwdev->dev, sg, nents, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_unmap_sg(struct pci_dev *hwdev, struct scatterlist *sg,
      int nents, int direction)
{
 dma_unmap_sg_attrs(&hwdev->dev, sg, nents, (enum dma_data_direction)direction, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle,
      size_t size, int direction)
{
 dma_sync_single_for_cpu(&hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle,
      size_t size, int direction)
{
 dma_sync_single_for_device(&hwdev->dev, dma_handle, size, (enum dma_data_direction)direction);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_sg_for_cpu(struct pci_dev *hwdev, struct scatterlist *sg,
  int nelems, int direction)
{
 dma_sync_sg_for_cpu(&hwdev->dev, sg, nelems, (enum dma_data_direction)direction);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pci_dma_sync_sg_for_device(struct pci_dev *hwdev, struct scatterlist *sg,
  int nelems, int direction)
{
 dma_sync_sg_for_device(&hwdev->dev, sg, nelems, (enum dma_data_direction)direction);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
 return dma_mapping_error(&pdev->dev, dma_addr);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
 return dma_set_mask(&dev->dev, mask);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
 return dma_set_coherent_mask(&dev->dev, mask);
}
# 2384 "../include/linux/pci.h" 2
# 28 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 1
# 31 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ctx.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ctx.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ring.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ring.h"
# 1 "../include/uapi/drm/amdgpu_drm.h" 1
# 35 "../include/uapi/drm/amdgpu_drm.h"
# 1 "../include/uapi/drm/drm.h" 1
# 42 "../include/uapi/drm/drm.h"
# 1 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 1
# 43 "../include/uapi/drm/drm.h" 2
typedef unsigned int drm_handle_t;
# 84 "../include/uapi/drm/drm.h"
typedef unsigned int drm_context_t;
typedef unsigned int drm_drawable_t;
typedef unsigned int drm_magic_t;
# 97 "../include/uapi/drm/drm.h"
struct drm_clip_rect {
 unsigned short x1;
 unsigned short y1;
 unsigned short x2;
 unsigned short y2;
};




struct drm_drawable_info {
 unsigned int num_rects;
 struct drm_clip_rect *rects;
};




struct drm_tex_region {
 unsigned char next;
 unsigned char prev;
 unsigned char in_use;
 unsigned char padding;
 unsigned int age;
};
# 130 "../include/uapi/drm/drm.h"
struct drm_hw_lock {
 __volatile__ unsigned int lock;
 char padding[60];
};






struct drm_version {
 int version_major;
 int version_minor;
 int version_patchlevel;
 __kernel_size_t name_len;
 char *name;
 __kernel_size_t date_len;
 char *date;
 __kernel_size_t desc_len;
 char *desc;
};






struct drm_unique {
 __kernel_size_t unique_len;
 char *unique;
};

struct drm_list {
 int count;
 struct drm_version *version;
};

struct drm_block {
 int unused;
};






struct drm_control {
 enum {
  DRM_ADD_COMMAND,
  DRM_RM_COMMAND,
  DRM_INST_HANDLER,
  DRM_UNINST_HANDLER
 } func;
 int irq;
};




enum drm_map_type {
 _DRM_FRAME_BUFFER = 0,
 _DRM_REGISTERS = 1,
 _DRM_SHM = 2,
 _DRM_AGP = 3,
 _DRM_SCATTER_GATHER = 4,
 _DRM_CONSISTENT = 5
};




enum drm_map_flags {
 _DRM_RESTRICTED = 0x01,
 _DRM_READ_ONLY = 0x02,
 _DRM_LOCKED = 0x04,
 _DRM_KERNEL = 0x08,
 _DRM_WRITE_COMBINING = 0x10,
 _DRM_CONTAINS_LOCK = 0x20,
 _DRM_REMOVABLE = 0x40,
 _DRM_DRIVER = 0x80
};

struct drm_ctx_priv_map {
 unsigned int ctx_id;
 void *handle;
};







struct drm_map {
 unsigned long offset;
 unsigned long size;
 enum drm_map_type type;
 enum drm_map_flags flags;
 void *handle;

 int mtrr;

};




struct drm_client {
 int idx;
 int auth;
 unsigned long pid;
 unsigned long uid;
 unsigned long magic;
 unsigned long iocs;
};

enum drm_stat_type {
 _DRM_STAT_LOCK,
 _DRM_STAT_OPENS,
 _DRM_STAT_CLOSES,
 _DRM_STAT_IOCTLS,
 _DRM_STAT_LOCKS,
 _DRM_STAT_UNLOCKS,
 _DRM_STAT_VALUE,
 _DRM_STAT_BYTE,
 _DRM_STAT_COUNT,

 _DRM_STAT_IRQ,
 _DRM_STAT_PRIMARY,
 _DRM_STAT_SECONDARY,
 _DRM_STAT_DMA,
 _DRM_STAT_SPECIAL,
 _DRM_STAT_MISSED

};




struct drm_stats {
 unsigned long count;
 struct {
  unsigned long value;
  enum drm_stat_type type;
 } data[15];
};




enum drm_lock_flags {
 _DRM_LOCK_READY = 0x01,
 _DRM_LOCK_QUIESCENT = 0x02,
 _DRM_LOCK_FLUSH = 0x04,
 _DRM_LOCK_FLUSH_ALL = 0x08,



 _DRM_HALT_ALL_QUEUES = 0x10,
 _DRM_HALT_CUR_QUEUES = 0x20
};






struct drm_lock {
 int context;
 enum drm_lock_flags flags;
};
# 310 "../include/uapi/drm/drm.h"
enum drm_dma_flags {

 _DRM_DMA_BLOCK = 0x01,
# 322 "../include/uapi/drm/drm.h"
 _DRM_DMA_WHILE_LOCKED = 0x02,
 _DRM_DMA_PRIORITY = 0x04,


 _DRM_DMA_WAIT = 0x10,
 _DRM_DMA_SMALLER_OK = 0x20,
 _DRM_DMA_LARGER_OK = 0x40
};






struct drm_buf_desc {
 int count;
 int size;
 int low_mark;
 int high_mark;
 enum {
  _DRM_PAGE_ALIGN = 0x01,
  _DRM_AGP_BUFFER = 0x02,
  _DRM_SG_BUFFER = 0x04,
  _DRM_FB_BUFFER = 0x08,
  _DRM_PCI_BUFFER_RO = 0x10
 } flags;
 unsigned long agp_start;



};




struct drm_buf_info {
 int count;
 struct drm_buf_desc *list;
};




struct drm_buf_free {
 int count;
 int *list;
};






struct drm_buf_pub {
 int idx;
 int total;
 int used;
 void *address;
};




struct drm_buf_map {
 int count;



 void *virtual;

 struct drm_buf_pub *list;
};
# 402 "../include/uapi/drm/drm.h"
struct drm_dma {
 int context;
 int send_count;
 int *send_indices;
 int *send_sizes;
 enum drm_dma_flags flags;
 int request_count;
 int request_size;
 int *request_indices;
 int *request_sizes;
 int granted_count;
};

enum drm_ctx_flags {
 _DRM_CONTEXT_PRESERVED = 0x01,
 _DRM_CONTEXT_2DONLY = 0x02
};






struct drm_ctx {
 drm_context_t handle;
 enum drm_ctx_flags flags;
};




struct drm_ctx_res {
 int count;
 struct drm_ctx *contexts;
};




struct drm_draw {
 drm_drawable_t handle;
};




typedef enum {
 DRM_DRAWABLE_CLIPRECTS
} drm_drawable_info_type_t;

struct drm_update_draw {
 drm_drawable_t handle;
 unsigned int type;
 unsigned int num;
 unsigned long long data;
};




struct drm_auth {
 drm_magic_t magic;
};






struct drm_irq_busid {
 int irq;
 int busnum;
 int devnum;
 int funcnum;
};

enum drm_vblank_seq_type {
 _DRM_VBLANK_ABSOLUTE = 0x0,
 _DRM_VBLANK_RELATIVE = 0x1,

 _DRM_VBLANK_HIGH_CRTC_MASK = 0x0000003e,
 _DRM_VBLANK_EVENT = 0x4000000,
 _DRM_VBLANK_FLIP = 0x8000000,
 _DRM_VBLANK_NEXTONMISS = 0x10000000,
 _DRM_VBLANK_SECONDARY = 0x20000000,
 _DRM_VBLANK_SIGNAL = 0x40000000
};






struct drm_wait_vblank_request {
 enum drm_vblank_seq_type type;
 unsigned int sequence;
 unsigned long signal;
};

struct drm_wait_vblank_reply {
 enum drm_vblank_seq_type type;
 unsigned int sequence;
 long tval_sec;
 long tval_usec;
};






union drm_wait_vblank {
 struct drm_wait_vblank_request request;
 struct drm_wait_vblank_reply reply;
};
# 526 "../include/uapi/drm/drm.h"
struct drm_modeset_ctl {
 __u32 crtc;
 __u32 cmd;
};






struct drm_agp_mode {
 unsigned long mode;
};






struct drm_agp_buffer {
 unsigned long size;
 unsigned long handle;
 unsigned long type;
 unsigned long physical;
};






struct drm_agp_binding {
 unsigned long handle;
 unsigned long offset;
};
# 569 "../include/uapi/drm/drm.h"
struct drm_agp_info {
 int agp_version_major;
 int agp_version_minor;
 unsigned long mode;
 unsigned long aperture_base;
 unsigned long aperture_size;
 unsigned long memory_allowed;
 unsigned long memory_used;


 unsigned short id_vendor;
 unsigned short id_device;
};




struct drm_scatter_gather {
 unsigned long size;
 unsigned long handle;
};




struct drm_set_version {
 int drm_di_major;
 int drm_di_minor;
 int drm_dd_major;
 int drm_dd_minor;
};


struct drm_gem_close {

 __u32 handle;
 __u32 pad;
};


struct drm_gem_flink {

 __u32 handle;


 __u32 name;
};


struct drm_gem_open {

 __u32 name;


 __u32 handle;


 __u64 size;
};
# 656 "../include/uapi/drm/drm.h"
struct drm_get_cap {
 __u64 capability;
 __u64 value;
};
# 702 "../include/uapi/drm/drm.h"
struct drm_set_client_cap {
 __u64 capability;
 __u64 value;
};



struct drm_prime_handle {
 __u32 handle;


 __u32 flags;


 __s32 fd;
};

struct drm_syncobj_create {
 __u32 handle;

 __u32 flags;
};

struct drm_syncobj_destroy {
 __u32 handle;
 __u32 pad;
};



struct drm_syncobj_handle {
 __u32 handle;
 __u32 flags;

 __s32 fd;
 __u32 pad;
};

struct drm_syncobj_transfer {
 __u32 src_handle;
 __u32 dst_handle;
 __u64 src_point;
 __u64 dst_point;
 __u32 flags;
 __u32 pad;
};




struct drm_syncobj_wait {
 __u64 handles;

 __s64 timeout_nsec;
 __u32 count_handles;
 __u32 flags;
 __u32 first_signaled;
 __u32 pad;
};

struct drm_syncobj_timeline_wait {
 __u64 handles;

 __u64 points;

 __s64 timeout_nsec;
 __u32 count_handles;
 __u32 flags;
 __u32 first_signaled;
 __u32 pad;
};


struct drm_syncobj_array {
 __u64 handles;
 __u32 count_handles;
 __u32 pad;
};

struct drm_syncobj_timeline_array {
 __u64 handles;
 __u64 points;
 __u32 count_handles;
 __u32 pad;
};



struct drm_crtc_get_sequence {
 __u32 crtc_id;
 __u32 active;
 __u64 sequence;
 __s64 sequence_ns;
};
# 804 "../include/uapi/drm/drm.h"
struct drm_crtc_queue_sequence {
 __u32 crtc_id;
 __u32 flags;
 __u64 sequence;
 __u64 user_data;
};






# 1 "../include/uapi/drm/drm_mode.h" 1
# 30 "../include/uapi/drm/drm_mode.h"
# 1 "../include/uapi/drm/drm.h" 1
# 31 "../include/uapi/drm/drm_mode.h" 2
# 221 "../include/uapi/drm/drm_mode.h"
struct drm_mode_modeinfo {
 __u32 clock;
 __u16 hdisplay;
 __u16 hsync_start;
 __u16 hsync_end;
 __u16 htotal;
 __u16 hskew;
 __u16 vdisplay;
 __u16 vsync_start;
 __u16 vsync_end;
 __u16 vtotal;
 __u16 vscan;

 __u32 vrefresh;

 __u32 flags;
 __u32 type;
 char name[32];
};

struct drm_mode_card_res {
 __u64 fb_id_ptr;
 __u64 crtc_id_ptr;
 __u64 connector_id_ptr;
 __u64 encoder_id_ptr;
 __u32 count_fbs;
 __u32 count_crtcs;
 __u32 count_connectors;
 __u32 count_encoders;
 __u32 min_width;
 __u32 max_width;
 __u32 min_height;
 __u32 max_height;
};

struct drm_mode_crtc {
 __u64 set_connectors_ptr;
 __u32 count_connectors;

 __u32 crtc_id;
 __u32 fb_id;

 __u32 x;
 __u32 y;

 __u32 gamma_size;
 __u32 mode_valid;
 struct drm_mode_modeinfo mode;
};





struct drm_mode_set_plane {
 __u32 plane_id;
 __u32 crtc_id;
 __u32 fb_id;
 __u32 flags;


 __s32 crtc_x;
 __s32 crtc_y;
 __u32 crtc_w;
 __u32 crtc_h;


 __u32 src_x;
 __u32 src_y;
 __u32 src_h;
 __u32 src_w;
};

struct drm_mode_get_plane {
 __u32 plane_id;

 __u32 crtc_id;
 __u32 fb_id;

 __u32 possible_crtcs;
 __u32 gamma_size;

 __u32 count_format_types;
 __u64 format_type_ptr;
};

struct drm_mode_get_plane_res {
 __u64 plane_id_ptr;
 __u32 count_planes;
};
# 322 "../include/uapi/drm/drm_mode.h"
struct drm_mode_get_encoder {
 __u32 encoder_id;
 __u32 encoder_type;

 __u32 crtc_id;

 __u32 possible_crtcs;
 __u32 possible_clones;
};



enum drm_mode_subconnector {
 DRM_MODE_SUBCONNECTOR_Automatic = 0,
 DRM_MODE_SUBCONNECTOR_Unknown = 0,
 DRM_MODE_SUBCONNECTOR_DVID = 3,
 DRM_MODE_SUBCONNECTOR_DVIA = 4,
 DRM_MODE_SUBCONNECTOR_Composite = 5,
 DRM_MODE_SUBCONNECTOR_SVIDEO = 6,
 DRM_MODE_SUBCONNECTOR_Component = 8,
 DRM_MODE_SUBCONNECTOR_SCART = 9,
};
# 366 "../include/uapi/drm/drm_mode.h"
struct drm_mode_get_connector {

 __u64 encoders_ptr;
 __u64 modes_ptr;
 __u64 props_ptr;
 __u64 prop_values_ptr;

 __u32 count_modes;
 __u32 count_props;
 __u32 count_encoders;

 __u32 encoder_id;
 __u32 connector_id;
 __u32 connector_type;
 __u32 connector_type_id;

 __u32 connection;
 __u32 mm_width;
 __u32 mm_height;
 __u32 subpixel;

 __u32 pad;
};
# 419 "../include/uapi/drm/drm_mode.h"
struct drm_mode_property_enum {
 __u64 value;
 char name[32];
};

struct drm_mode_get_property {
 __u64 values_ptr;
 __u64 enum_blob_ptr;

 __u32 prop_id;
 __u32 flags;
 char name[32];

 __u32 count_values;


 __u32 count_enum_blobs;
};

struct drm_mode_connector_set_property {
 __u64 value;
 __u32 prop_id;
 __u32 connector_id;
};
# 454 "../include/uapi/drm/drm_mode.h"
struct drm_mode_obj_get_properties {
 __u64 props_ptr;
 __u64 prop_values_ptr;
 __u32 count_props;
 __u32 obj_id;
 __u32 obj_type;
};

struct drm_mode_obj_set_property {
 __u64 value;
 __u32 prop_id;
 __u32 obj_id;
 __u32 obj_type;
};

struct drm_mode_get_blob {
 __u32 blob_id;
 __u32 length;
 __u64 data;
};

struct drm_mode_fb_cmd {
 __u32 fb_id;
 __u32 width;
 __u32 height;
 __u32 pitch;
 __u32 bpp;
 __u32 depth;

 __u32 handle;
};




struct drm_mode_fb_cmd2 {
 __u32 fb_id;
 __u32 width;
 __u32 height;
 __u32 pixel_format;
 __u32 flags;
# 520 "../include/uapi/drm/drm_mode.h"
 __u32 handles[4];
 __u32 pitches[4];
 __u32 offsets[4];
 __u64 modifier[4];
};
# 559 "../include/uapi/drm/drm_mode.h"
struct drm_mode_fb_dirty_cmd {
 __u32 fb_id;
 __u32 flags;
 __u32 color;
 __u32 num_clips;
 __u64 clips_ptr;
};

struct drm_mode_mode_cmd {
 __u32 connector_id;
 struct drm_mode_modeinfo mode;
};
# 590 "../include/uapi/drm/drm_mode.h"
struct drm_mode_cursor {
 __u32 flags;
 __u32 crtc_id;
 __s32 x;
 __s32 y;
 __u32 width;
 __u32 height;

 __u32 handle;
};

struct drm_mode_cursor2 {
 __u32 flags;
 __u32 crtc_id;
 __s32 x;
 __s32 y;
 __u32 width;
 __u32 height;

 __u32 handle;
 __s32 hot_x;
 __s32 hot_y;
};

struct drm_mode_crtc_lut {
 __u32 crtc_id;
 __u32 gamma_size;


 __u64 red;
 __u64 green;
 __u64 blue;
};

struct drm_color_ctm {




 __u64 matrix[9];
};

struct drm_color_lut {




 __u16 red;
 __u16 green;
 __u16 blue;
 __u16 reserved;
};
# 652 "../include/uapi/drm/drm_mode.h"
struct hdr_metadata_infoframe {




 __u8 eotf;



 __u8 metadata_type;
# 670 "../include/uapi/drm/drm_mode.h"
 struct {
  __u16 x, y;
  } display_primaries[3];
# 681 "../include/uapi/drm/drm_mode.h"
 struct {
  __u16 x, y;
  } white_point;





 __u16 max_display_mastering_luminance;






 __u16 min_display_mastering_luminance;





 __u16 max_cll;





 __u16 max_fall;
};






struct hdr_output_metadata {



 __u32 metadata_type;



 union {
  struct hdr_metadata_infoframe hdmi_metadata_type1;
 };
};
# 763 "../include/uapi/drm/drm_mode.h"
struct drm_mode_crtc_page_flip {
 __u32 crtc_id;
 __u32 fb_id;
 __u32 flags;
 __u32 reserved;
 __u64 user_data;
};
# 791 "../include/uapi/drm/drm_mode.h"
struct drm_mode_crtc_page_flip_target {
 __u32 crtc_id;
 __u32 fb_id;
 __u32 flags;
 __u32 sequence;
 __u64 user_data;
};


struct drm_mode_create_dumb {
 __u32 height;
 __u32 width;
 __u32 bpp;
 __u32 flags;

 __u32 handle;
 __u32 pitch;
 __u64 size;
};


struct drm_mode_map_dumb {

 __u32 handle;
 __u32 pad;





 __u64 offset;
};

struct drm_mode_destroy_dumb {
 __u32 handle;
};
# 840 "../include/uapi/drm/drm_mode.h"
struct drm_mode_atomic {
 __u32 flags;
 __u32 count_objs;
 __u64 objs_ptr;
 __u64 count_props_ptr;
 __u64 props_ptr;
 __u64 prop_values_ptr;
 __u64 reserved;
 __u64 user_data;
};

struct drm_format_modifier_blob {


 __u32 version;


 __u32 flags;


 __u32 count_formats;


 __u32 formats_offset;


 __u32 count_modifiers;


 __u32 modifiers_offset;



};

struct drm_format_modifier {
# 893 "../include/uapi/drm/drm_mode.h"
 __u64 formats;
 __u32 offset;
 __u32 pad;


 __u64 modifier;
};
# 909 "../include/uapi/drm/drm_mode.h"
struct drm_mode_create_blob {

 __u64 data;

 __u32 length;

 __u32 blob_id;
};






struct drm_mode_destroy_blob {
 __u32 blob_id;
};
# 936 "../include/uapi/drm/drm_mode.h"
struct drm_mode_create_lease {

 __u64 object_ids;

 __u32 object_count;

 __u32 flags;


 __u32 lessee_id;

 __u32 fd;
};
# 957 "../include/uapi/drm/drm_mode.h"
struct drm_mode_list_lessees {







 __u32 count_lessees;
 __u32 pad;




 __u64 lessees_ptr;
};
# 981 "../include/uapi/drm/drm_mode.h"
struct drm_mode_get_lease {







 __u32 count_objects;
 __u32 pad;




 __u64 objects_ptr;
};






struct drm_mode_revoke_lease {


 __u32 lessee_id;
};
# 1021 "../include/uapi/drm/drm_mode.h"
struct drm_mode_rect {
 __s32 x1;
 __s32 y1;
 __s32 x2;
 __s32 y2;
};
# 816 "../include/uapi/drm/drm.h" 2
# 973 "../include/uapi/drm/drm.h"
struct drm_event {
 __u32 type;
 __u32 length;
};





struct drm_event_vblank {
 struct drm_event base;
 __u64 user_data;
 __u32 tv_sec;
 __u32 tv_usec;
 __u32 sequence;
 __u32 crtc_id;
};




struct drm_event_crtc_sequence {
 struct drm_event base;
 __u64 user_data;
 __s64 time_ns;
 __u64 sequence;
};
# 36 "../include/uapi/drm/amdgpu_drm.h" 2
# 136 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_gem_create_in {

 __u64 bo_size;

 __u64 alignment;

 __u64 domains;

 __u64 domain_flags;
};

struct drm_amdgpu_gem_create_out {

 __u32 handle;
 __u32 _pad;
};

union drm_amdgpu_gem_create {
 struct drm_amdgpu_gem_create_in in;
 struct drm_amdgpu_gem_create_out out;
};
# 165 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_bo_list_in {

 __u32 operation;

 __u32 list_handle;

 __u32 bo_number;

 __u32 bo_info_size;

 __u64 bo_info_ptr;
};

struct drm_amdgpu_bo_list_entry {

 __u32 bo_handle;

 __u32 bo_priority;
};

struct drm_amdgpu_bo_list_out {

 __u32 list_handle;
 __u32 _pad;
};

union drm_amdgpu_bo_list {
 struct drm_amdgpu_bo_list_in in;
 struct drm_amdgpu_bo_list_out out;
};
# 233 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_ctx_in {

 __u32 op;

 __u32 flags;
 __u32 ctx_id;

 __s32 priority;
};

union drm_amdgpu_ctx_out {
  struct {
   __u32 ctx_id;
   __u32 _pad;
  } alloc;

  struct {

   __u64 flags;

   __u32 hangs;

   __u32 reset_status;
  } state;
};

union drm_amdgpu_ctx {
 struct drm_amdgpu_ctx_in in;
 union drm_amdgpu_ctx_out out;
};





struct drm_amdgpu_vm_in {

 __u32 op;
 __u32 flags;
};

struct drm_amdgpu_vm_out {

 __u64 flags;
};

union drm_amdgpu_vm {
 struct drm_amdgpu_vm_in in;
 struct drm_amdgpu_vm_out out;
};





struct drm_amdgpu_sched_in {

 __u32 op;
 __u32 fd;

 __s32 priority;
 __u32 ctx_id;
};

union drm_amdgpu_sched {
 struct drm_amdgpu_sched_in in;
};
# 311 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_gem_userptr {
 __u64 addr;
 __u64 size;

 __u32 flags;

 __u32 handle;
};
# 359 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_gem_metadata {

 __u32 handle;

 __u32 op;
 struct {

  __u64 flags;

  __u64 tiling_info;
  __u32 data_size_bytes;
  __u32 data[64];
 } data;
};

struct drm_amdgpu_gem_mmap_in {

 __u32 handle;
 __u32 _pad;
};

struct drm_amdgpu_gem_mmap_out {

 __u64 addr_ptr;
};

union drm_amdgpu_gem_mmap {
 struct drm_amdgpu_gem_mmap_in in;
 struct drm_amdgpu_gem_mmap_out out;
};

struct drm_amdgpu_gem_wait_idle_in {

 __u32 handle;

 __u32 flags;

 __u64 timeout;
};

struct drm_amdgpu_gem_wait_idle_out {

 __u32 status;

 __u32 domain;
};

union drm_amdgpu_gem_wait_idle {
 struct drm_amdgpu_gem_wait_idle_in in;
 struct drm_amdgpu_gem_wait_idle_out out;
};

struct drm_amdgpu_wait_cs_in {




 __u64 handle;

 __u64 timeout;
 __u32 ip_type;
 __u32 ip_instance;
 __u32 ring;
 __u32 ctx_id;
};

struct drm_amdgpu_wait_cs_out {

 __u64 status;
};

union drm_amdgpu_wait_cs {
 struct drm_amdgpu_wait_cs_in in;
 struct drm_amdgpu_wait_cs_out out;
};

struct drm_amdgpu_fence {
 __u32 ctx_id;
 __u32 ip_type;
 __u32 ip_instance;
 __u32 ring;
 __u64 seq_no;
};

struct drm_amdgpu_wait_fences_in {

 __u64 fences;
 __u32 fence_count;
 __u32 wait_all;
 __u64 timeout_ns;
};

struct drm_amdgpu_wait_fences_out {
 __u32 status;
 __u32 first_signaled;
};

union drm_amdgpu_wait_fences {
 struct drm_amdgpu_wait_fences_in in;
 struct drm_amdgpu_wait_fences_out out;
};





struct drm_amdgpu_gem_op {

 __u32 handle;

 __u32 op;

 __u64 value;
};
# 504 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_gem_va {

 __u32 handle;
 __u32 _pad;

 __u32 operation;

 __u32 flags;

 __u64 va_address;

 __u64 offset_in_bo;

 __u64 map_size;
};
# 543 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_cs_chunk {
 __u32 chunk_id;
 __u32 length_dw;
 __u64 chunk_data;
};

struct drm_amdgpu_cs_in {

 __u32 ctx_id;

 __u32 bo_list_handle;
 __u32 num_chunks;
 __u32 _pad;

 __u64 chunks;
};

struct drm_amdgpu_cs_out {
 __u64 handle;
};

union drm_amdgpu_cs {
 struct drm_amdgpu_cs_in in;
 struct drm_amdgpu_cs_out out;
};
# 589 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_cs_chunk_ib {
 __u32 _pad;

 __u32 flags;

 __u64 va_start;

 __u32 ib_bytes;

 __u32 ip_type;

 __u32 ip_instance;

 __u32 ring;
};

struct drm_amdgpu_cs_chunk_dep {
 __u32 ip_type;
 __u32 ip_instance;
 __u32 ring;
 __u32 ctx_id;
 __u64 handle;
};

struct drm_amdgpu_cs_chunk_fence {
 __u32 handle;
 __u32 offset;
};

struct drm_amdgpu_cs_chunk_sem {
 __u32 handle;
};

struct drm_amdgpu_cs_chunk_syncobj {
       __u32 handle;
       __u32 flags;
       __u64 point;
};





union drm_amdgpu_fence_to_handle {
 struct {
  struct drm_amdgpu_fence fence;
  __u32 what;
  __u32 pad;
 } in;
 struct {
  __u32 handle;
 } out;
};

struct drm_amdgpu_cs_chunk_data {
 union {
  struct drm_amdgpu_cs_chunk_ib ib_data;
  struct drm_amdgpu_cs_chunk_fence fence_data;
 };
};
# 794 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_query_fw {

 __u32 fw_type;




 __u32 ip_instance;




 __u32 index;
 __u32 _pad;
};


struct drm_amdgpu_info {

 __u64 return_pointer;


 __u32 return_size;

 __u32 query;

 union {
  struct {
   __u32 id;
   __u32 _pad;
  } mode_crtc;

  struct {

   __u32 type;




   __u32 ip_instance;
  } query_hw_ip;

  struct {
   __u32 dword_offset;

   __u32 count;
   __u32 instance;

   __u32 flags;
  } read_mmr_reg;

  struct drm_amdgpu_query_fw query_fw;

  struct {
   __u32 type;
   __u32 offset;
  } vbios_info;

  struct {
   __u32 type;
  } sensor_info;
 };
};

struct drm_amdgpu_info_gds {

 __u32 gds_gfx_partition_size;

 __u32 compute_partition_size;

 __u32 gds_total_size;

 __u32 gws_per_gfx_partition;

 __u32 gws_per_compute_partition;

 __u32 oa_per_gfx_partition;

 __u32 oa_per_compute_partition;
 __u32 _pad;
};

struct drm_amdgpu_info_vram_gtt {
 __u64 vram_size;
 __u64 vram_cpu_accessible_size;
 __u64 gtt_size;
};

struct drm_amdgpu_heap_info {

 __u64 total_heap_size;


 __u64 usable_heap_size;







 __u64 heap_usage;





 __u64 max_allocation;
};

struct drm_amdgpu_memory_info {
 struct drm_amdgpu_heap_info vram;
 struct drm_amdgpu_heap_info cpu_accessible_vram;
 struct drm_amdgpu_heap_info gtt;
};

struct drm_amdgpu_info_firmware {
 __u32 ver;
 __u32 feature;
};
# 926 "../include/uapi/drm/amdgpu_drm.h"
struct drm_amdgpu_info_device {

 __u32 device_id;

 __u32 chip_rev;
 __u32 external_rev;

 __u32 pci_rev;
 __u32 family;
 __u32 num_shader_engines;
 __u32 num_shader_arrays_per_engine;

 __u32 gpu_counter_freq;
 __u64 max_engine_clock;
 __u64 max_memory_clock;

 __u32 cu_active_number;

 __u32 cu_ao_mask;
 __u32 cu_bitmap[4][4];

 __u32 enabled_rb_pipes_mask;
 __u32 num_rb_pipes;
 __u32 num_hw_gfx_contexts;
 __u32 _pad;
 __u64 ids_flags;

 __u64 virtual_address_offset;

 __u64 virtual_address_max;

 __u32 virtual_address_alignment;

 __u32 pte_fragment_size;
 __u32 gart_page_size;

 __u32 ce_ram_size;

 __u32 vram_type;

 __u32 vram_bit_width;

 __u32 vce_harvest_config;

 __u32 gc_double_offchip_lds_buf;

 __u64 prim_buf_gpu_addr;

 __u64 pos_buf_gpu_addr;

 __u64 cntl_sb_buf_gpu_addr;

 __u64 param_buf_gpu_addr;
 __u32 prim_buf_size;
 __u32 pos_buf_size;
 __u32 cntl_sb_buf_size;
 __u32 param_buf_size;

 __u32 wave_front_size;

 __u32 num_shader_visible_vgprs;

 __u32 num_cu_per_sh;

 __u32 num_tcc_blocks;

 __u32 gs_vgt_table_depth;

 __u32 gs_prim_buffer_depth;

 __u32 max_gs_waves_per_vgt;
 __u32 _pad1;

 __u32 cu_ao_bitmap[4][4];

 __u64 high_va_offset;

 __u64 high_va_max;

 __u32 pa_sc_tile_steering_override;
};

struct drm_amdgpu_info_hw_ip {

 __u32 hw_ip_version_major;
 __u32 hw_ip_version_minor;

 __u64 capabilities_flags;

 __u32 ib_start_alignment;

 __u32 ib_size_alignment;

 __u32 available_rings;
 __u32 _pad;
};

struct drm_amdgpu_info_num_handles {

 __u32 uvd_max_handles;

 __u32 uvd_used_handles;
};



struct drm_amdgpu_info_vce_clock_table_entry {

 __u32 sclk;

 __u32 mclk;

 __u32 eclk;
 __u32 pad;
};

struct drm_amdgpu_info_vce_clock_table {
 struct drm_amdgpu_info_vce_clock_table_entry entries[6];
 __u32 num_valid_entries;
 __u32 pad;
};
# 28 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ring.h" 2
# 1 "../include/drm/gpu_scheduler.h" 1
# 27 "../include/drm/gpu_scheduler.h"
# 1 "../include/drm/spsc_queue.h" 1
# 32 "../include/drm/spsc_queue.h"
struct spsc_node {


 struct spsc_node *next;
};

struct spsc_queue {

  struct spsc_node *head;


 atomic_long_t tail;

 atomic_t job_count;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void spsc_queue_init(struct spsc_queue *queue)
{
 queue->head = ((void *)0);
 atomic_long_set(&queue->tail, (long)&queue->head);
 atomic_set(&queue->job_count, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct spsc_node *spsc_queue_peek(struct spsc_queue *queue)
{
 return queue->head;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int spsc_queue_count(struct spsc_queue *queue)
{
 return atomic_read(&queue->job_count);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool spsc_queue_push(struct spsc_queue *queue, struct spsc_node *node)
{
 struct spsc_node **tail;

 node->next = ((void *)0);

 __asm__ __volatile__("" : : : "memory");

 tail = (struct spsc_node **)atomic_long_xchg(&queue->tail, (long)&node->next);
 ({ union { typeof(*tail) __val; char __c[1]; } __u = { .__val = ( typeof(*tail)) (node) }; __write_once_size(&(*tail), __u.__c, sizeof(*tail)); __u.__val; });
 atomic_inc(&queue->job_count);





 asm volatile("dmb " "ishst" : : : "memory");

 __asm__ __volatile__("" : : : "memory");

 return tail == &queue->head;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct spsc_node *spsc_queue_pop(struct spsc_queue *queue)
{
 struct spsc_node *next, *node;


 asm volatile("dmb " "ishld" : : : "memory");

 node = ({ union { typeof(queue->head) __val; char __c[1]; } __u; if (1) __read_once_size(&(queue->head), __u.__c, sizeof(queue->head)); else __read_once_size_nocheck(&(queue->head), __u.__c, sizeof(queue->head)); do { } while (0); __u.__val; });

 if (!node)
  return ((void *)0);

 next = ({ union { typeof(node->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->next), __u.__c, sizeof(node->next)); else __read_once_size_nocheck(&(node->next), __u.__c, sizeof(node->next)); do { } while (0); __u.__val; });
 ({ union { typeof(queue->head) __val; char __c[1]; } __u = { .__val = ( typeof(queue->head)) (next) }; __write_once_size(&(queue->head), __u.__c, sizeof(queue->head)); __u.__val; });

 if (__builtin_expect(!!(!next), 0)) {


  if (atomic_long_cmpxchg(&queue->tail,
    (long)&node->next, (long) &queue->head) != (long)&node->next) {

   do {
    asm volatile("dmb " "ishld" : : : "memory");
   } while (__builtin_expect(!!(!(queue->head = ({ union { typeof(node->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->next), __u.__c, sizeof(node->next)); else __read_once_size_nocheck(&(node->next), __u.__c, sizeof(node->next)); do { } while (0); __u.__val; }))), 0));
  }
 }

 atomic_dec(&queue->job_count);
 return node;
}
# 28 "../include/drm/gpu_scheduler.h" 2
# 1 "../include/linux/dma-fence.h" 1
# 25 "../include/linux/dma-fence.h"
struct dma_fence;
struct dma_fence_ops;
struct dma_fence_cb;
# 65 "../include/linux/dma-fence.h"
struct dma_fence {
 spinlock_t *lock;
 const struct dma_fence_ops *ops;
# 84 "../include/linux/dma-fence.h"
 union {
  struct list_head cb_list;

  ktime_t timestamp;

  struct callback_head rcu;
 };
 u64 context;
 u64 seqno;
 unsigned long flags;
 struct kref refcount;
 int error;
};

enum dma_fence_flag_bits {
 DMA_FENCE_FLAG_SIGNALED_BIT,
 DMA_FENCE_FLAG_TIMESTAMP_BIT,
 DMA_FENCE_FLAG_ENABLE_SIGNAL_BIT,
 DMA_FENCE_FLAG_USER_BITS,
};

typedef void (*dma_fence_func_t)(struct dma_fence *fence,
     struct dma_fence_cb *cb);
# 116 "../include/linux/dma-fence.h"
struct dma_fence_cb {
 struct list_head node;
 dma_fence_func_t func;
};





struct dma_fence_ops {






 bool use_64bit_seqno;
# 143 "../include/linux/dma-fence.h"
 const char * (*get_driver_name)(struct dma_fence *fence);
# 155 "../include/linux/dma-fence.h"
 const char * (*get_timeline_name)(struct dma_fence *fence);
# 192 "../include/linux/dma-fence.h"
 bool (*enable_signaling)(struct dma_fence *fence);
# 209 "../include/linux/dma-fence.h"
 bool (*signaled)(struct dma_fence *fence);
# 231 "../include/linux/dma-fence.h"
 signed long (*wait)(struct dma_fence *fence,
       bool intr, signed long timeout);
# 242 "../include/linux/dma-fence.h"
 void (*release)(struct dma_fence *fence);
# 252 "../include/linux/dma-fence.h"
 void (*fence_value_str)(struct dma_fence *fence, char *str, int size);
# 262 "../include/linux/dma-fence.h"
 void (*timeline_value_str)(struct dma_fence *fence,
       char *str, int size);
};

void dma_fence_init(struct dma_fence *fence, const struct dma_fence_ops *ops,
      spinlock_t *lock, u64 context, u64 seqno);

void dma_fence_release(struct kref *kref);
void dma_fence_free(struct dma_fence *fence);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_fence_put(struct dma_fence *fence)
{
 if (fence)
  kref_put(&fence->refcount, dma_fence_release);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *dma_fence_get(struct dma_fence *fence)
{
 if (fence)
  kref_get(&fence->refcount);
 return fence;
}
# 302 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *dma_fence_get_rcu(struct dma_fence *fence)
{
 if (kref_get_unless_zero(&fence->refcount))
  return fence;
 else
  return ((void *)0);
}
# 326 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *
dma_fence_get_rcu_safe(struct dma_fence **fencep)
{
 do {
  struct dma_fence *fence;

  fence = ({ typeof(*(*fencep)) *________p1 = (typeof(*(*fencep)) *)({ union { typeof((*fencep)) __val; char __c[1]; } __u; if (1) __read_once_size(&((*fencep)), __u.__c, sizeof((*fencep))); else __read_once_size_nocheck(&((*fencep)), __u.__c, sizeof((*fencep))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(*fencep)) *)(________p1)); });
  if (!fence)
   return ((void *)0);

  if (!dma_fence_get_rcu(fence))
   continue;
# 353 "../include/linux/dma-fence.h"
  if (fence == ({ typeof(*(*fencep)) *_________p1 = (typeof(*(*fencep)) *)({ union { typeof((*fencep)) __val; char __c[1]; } __u; if (1) __read_once_size(&((*fencep)), __u.__c, sizeof((*fencep))); else __read_once_size_nocheck(&((*fencep)), __u.__c, sizeof((*fencep))); do { } while (0); __u.__val; }); ; ((typeof(*(*fencep)) *)(_________p1)); }))
   return (fence);

  dma_fence_put(fence);
 } while (1);
}

int dma_fence_signal(struct dma_fence *fence);
int dma_fence_signal_locked(struct dma_fence *fence);
signed long dma_fence_default_wait(struct dma_fence *fence,
       bool intr, signed long timeout);
int dma_fence_add_callback(struct dma_fence *fence,
      struct dma_fence_cb *cb,
      dma_fence_func_t func);
bool dma_fence_remove_callback(struct dma_fence *fence,
          struct dma_fence_cb *cb);
void dma_fence_enable_sw_signaling(struct dma_fence *fence);
# 385 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
dma_fence_is_signaled_locked(struct dma_fence *fence)
{
 if (test_bit(DMA_FENCE_FLAG_SIGNALED_BIT, &fence->flags))
  return true;

 if (fence->ops->signaled && fence->ops->signaled(fence)) {
  dma_fence_signal_locked(fence);
  return true;
 }

 return false;
}
# 415 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
dma_fence_is_signaled(struct dma_fence *fence)
{
 if (test_bit(DMA_FENCE_FLAG_SIGNALED_BIT, &fence->flags))
  return true;

 if (fence->ops->signaled && fence->ops->signaled(fence)) {
  dma_fence_signal(fence);
  return true;
 }

 return false;
}
# 438 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __dma_fence_is_later(u64 f1, u64 f2,
     const struct dma_fence_ops *ops)
{




 if (ops->use_64bit_seqno)
  return f1 > f2;

 return (int)(((u32)(f1)) - ((u32)(f2))) > 0;
}
# 459 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_fence_is_later(struct dma_fence *f1,
          struct dma_fence *f2)
{
 if (({ int __ret_warn_on = !!(f1->context != f2->context); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-fence.h\"; .popsection; .long 14472b - 14470b; .short 462; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return false;

 return __dma_fence_is_later(f1->seqno, f2->seqno, f1->ops);
}
# 477 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *dma_fence_later(struct dma_fence *f1,
      struct dma_fence *f2)
{
 if (({ int __ret_warn_on = !!(f1->context != f2->context); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-fence.h\"; .popsection; .long 14472b - 14470b; .short 480; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return ((void *)0);






 if (dma_fence_is_later(f1, f2))
  return dma_fence_is_signaled(f1) ? ((void *)0) : f1;
 else
  return dma_fence_is_signaled(f2) ? ((void *)0) : f2;
}
# 508 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_fence_get_status_locked(struct dma_fence *fence)
{
 if (dma_fence_is_signaled_locked(fence))
  return fence->error ?: 1;
 else
  return 0;
}

int dma_fence_get_status(struct dma_fence *fence);
# 529 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_fence_set_error(struct dma_fence *fence,
           int error)
{
 ({ int __ret_warn_on = !!(test_bit(DMA_FENCE_FLAG_SIGNALED_BIT, &fence->flags)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-fence.h\"; .popsection; .long 14472b - 14470b; .short 532; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(error >= 0 || error < -4095); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/dma-fence.h\"; .popsection; .long 14472b - 14470b; .short 533; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 fence->error = error;
}

signed long dma_fence_wait_timeout(struct dma_fence *,
       bool intr, signed long timeout);
signed long dma_fence_wait_any_timeout(struct dma_fence **fences,
           uint32_t count,
           bool intr, signed long timeout,
           uint32_t *idx);
# 560 "../include/linux/dma-fence.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) signed long dma_fence_wait(struct dma_fence *fence, bool intr)
{
 signed long ret;





 ret = dma_fence_wait_timeout(fence, intr, ((long)(~0UL >> 1)));

 return ret < 0 ? ret : 0;
}

struct dma_fence *dma_fence_get_stub(void);
u64 dma_fence_context_alloc(unsigned num);
# 29 "../include/drm/gpu_scheduler.h" 2



struct drm_gpu_scheduler;
struct drm_sched_rq;

enum drm_sched_priority {
 DRM_SCHED_PRIORITY_MIN,
 DRM_SCHED_PRIORITY_LOW = DRM_SCHED_PRIORITY_MIN,
 DRM_SCHED_PRIORITY_NORMAL,
 DRM_SCHED_PRIORITY_HIGH_SW,
 DRM_SCHED_PRIORITY_HIGH_HW,
 DRM_SCHED_PRIORITY_KERNEL,
 DRM_SCHED_PRIORITY_MAX,
 DRM_SCHED_PRIORITY_INVALID = -1,
 DRM_SCHED_PRIORITY_UNSET = -2
};
# 79 "../include/drm/gpu_scheduler.h"
struct drm_sched_entity {
 struct list_head list;
 struct drm_sched_rq *rq;
 struct drm_sched_rq **rq_list;
 unsigned int num_rq_list;
 spinlock_t rq_lock;

 struct spsc_queue job_queue;

 atomic_t fence_seq;
 uint64_t fence_context;

 struct dma_fence *dependency;
 struct dma_fence_cb cb;
 atomic_t *guilty;
 struct dma_fence *last_scheduled;
 struct task_struct *last_user;
 bool stopped;
};
# 111 "../include/drm/gpu_scheduler.h"
struct drm_sched_rq {
 spinlock_t lock;
 struct drm_gpu_scheduler *sched;
 struct list_head entities;
 struct drm_sched_entity *current_entity;
};




struct drm_sched_fence {




 struct dma_fence scheduled;
# 138 "../include/drm/gpu_scheduler.h"
 struct dma_fence finished;






 struct dma_fence *parent;




 struct drm_gpu_scheduler *sched;



 spinlock_t lock;



 void *owner;
};

struct drm_sched_fence *to_drm_sched_fence(struct dma_fence *f);
# 183 "../include/drm/gpu_scheduler.h"
struct drm_sched_job {
 struct spsc_node queue_node;
 struct drm_gpu_scheduler *sched;
 struct drm_sched_fence *s_fence;
 struct dma_fence_cb finish_cb;
 struct list_head node;
 uint64_t id;
 atomic_t karma;
 enum drm_sched_priority s_priority;
 struct drm_sched_entity *entity;
 struct dma_fence_cb cb;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_sched_invalidate_job(struct drm_sched_job *s_job,
         int threshold)
{
 return (s_job && atomic_inc_return(&s_job->karma) > threshold);
}







struct drm_sched_backend_ops {





 struct dma_fence *(*dependency)(struct drm_sched_job *sched_job,
     struct drm_sched_entity *s_entity);







 struct dma_fence *(*run_job)(struct drm_sched_job *sched_job);





 void (*timedout_job)(struct drm_sched_job *sched_job);





 void (*free_job)(struct drm_sched_job *sched_job);
};
# 266 "../include/drm/gpu_scheduler.h"
struct drm_gpu_scheduler {
 const struct drm_sched_backend_ops *ops;
 uint32_t hw_submission_limit;
 long timeout;
 const char *name;
 struct drm_sched_rq sched_rq[DRM_SCHED_PRIORITY_MAX];
 wait_queue_head_t wake_up_worker;
 wait_queue_head_t job_scheduled;
 atomic_t hw_rq_count;
 atomic64_t job_id_count;
 struct delayed_work work_tdr;
 struct task_struct *thread;
 struct list_head ring_mirror_list;
 spinlock_t job_list_lock;
 int hang_limit;
 atomic_t num_jobs;
 bool ready;
 bool free_guilty;
};

int drm_sched_init(struct drm_gpu_scheduler *sched,
     const struct drm_sched_backend_ops *ops,
     uint32_t hw_submission, unsigned hang_limit, long timeout,
     const char *name);

void drm_sched_fini(struct drm_gpu_scheduler *sched);
int drm_sched_job_init(struct drm_sched_job *job,
         struct drm_sched_entity *entity,
         void *owner);
void drm_sched_job_cleanup(struct drm_sched_job *job);
void drm_sched_wakeup(struct drm_gpu_scheduler *sched);
void drm_sched_stop(struct drm_gpu_scheduler *sched, struct drm_sched_job *bad);
void drm_sched_start(struct drm_gpu_scheduler *sched, bool full_recovery);
void drm_sched_resubmit_jobs(struct drm_gpu_scheduler *sched);
void drm_sched_increase_karma(struct drm_sched_job *bad);
bool drm_sched_dependency_optimized(struct dma_fence* fence,
        struct drm_sched_entity *entity);
void drm_sched_fault(struct drm_gpu_scheduler *sched);
void drm_sched_job_kickout(struct drm_sched_job *s_job);

void drm_sched_rq_add_entity(struct drm_sched_rq *rq,
        struct drm_sched_entity *entity);
void drm_sched_rq_remove_entity(struct drm_sched_rq *rq,
    struct drm_sched_entity *entity);

int drm_sched_entity_init(struct drm_sched_entity *entity,
     struct drm_sched_rq **rq_list,
     unsigned int num_rq_list,
     atomic_t *guilty);
long drm_sched_entity_flush(struct drm_sched_entity *entity, long timeout);
void drm_sched_entity_fini(struct drm_sched_entity *entity);
void drm_sched_entity_destroy(struct drm_sched_entity *entity);
void drm_sched_entity_select_rq(struct drm_sched_entity *entity);
struct drm_sched_job *drm_sched_entity_pop_job(struct drm_sched_entity *entity);
void drm_sched_entity_push_job(struct drm_sched_job *sched_job,
          struct drm_sched_entity *entity);
void drm_sched_entity_set_priority(struct drm_sched_entity *entity,
       enum drm_sched_priority priority);
bool drm_sched_entity_is_ready(struct drm_sched_entity *entity);

struct drm_sched_fence *drm_sched_fence_create(
 struct drm_sched_entity *s_entity, void *owner);
void drm_sched_fence_scheduled(struct drm_sched_fence *fence);
void drm_sched_fence_finished(struct drm_sched_fence *fence);

unsigned long drm_sched_suspend_timeout(struct drm_gpu_scheduler *sched);
void drm_sched_resume_timeout(struct drm_gpu_scheduler *sched,
                  unsigned long remaining);
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ring.h" 2
# 1 "../include/drm/drm_print.h" 1
# 31 "../include/drm/drm_print.h"
# 1 "../include/linux/seq_file.h" 1
# 12 "../include/linux/seq_file.h"
# 1 "../include/linux/cred.h" 1
# 13 "../include/linux/cred.h"
# 1 "../include/linux/key.h" 1
# 20 "../include/linux/key.h"
# 1 "../include/linux/assoc_array.h" 1
# 22 "../include/linux/assoc_array.h"
struct assoc_array {
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;
};




struct assoc_array_ops {

 unsigned long (*get_key_chunk)(const void *index_key, int level);


 unsigned long (*get_object_key_chunk)(const void *object, int level);


 bool (*compare_object)(const void *object, const void *index_key);




 int (*diff_objects)(const void *object, const void *index_key);


 void (*free_object)(void *object);
};




struct assoc_array_edit;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void assoc_array_init(struct assoc_array *array)
{
 array->root = ((void *)0);
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate(const struct assoc_array *array,
          int (*iterator)(const void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find(const struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    const struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         const struct assoc_array_ops *ops,
         const void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        const struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     const struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);
# 21 "../include/linux/key.h" 2







typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct net;
# 74 "../include/linux/key.h"
struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct key_tag;
struct keyring_list;
struct keyring_name;

struct key_tag {
 struct callback_head rcu;
 refcount_t usage;
 bool removed;
};

struct keyring_index_key {

 unsigned long hash;
 union {
  struct {

   u16 desc_len;
   char desc[sizeof(long) - 2];




  };
  unsigned long x;
 };
 struct key_type *type;
 struct key_tag *domain_tag;
 const char *description;
};

union key_payload {
 void *rcu_data0;
 void *data[4];
};
# 130 "../include/linux/key.h"
typedef struct __key_reference_with_attributes *key_ref_t;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_ref_t make_key_ref(const struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_ref_to_ptr(const key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_key_possessed(const key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}

typedef int (*key_restrict_link_func_t)(struct key *dest_keyring,
     const struct key_type *type,
     const union key_payload *payload,
     struct key *restriction_key);

struct key_restriction {
 key_restrict_link_func_t check;
 struct key *key;
 struct key_type *keytype;
};

enum key_state {
 KEY_IS_UNINSTANTIATED,
 KEY_IS_POSITIVE,
};
# 172 "../include/linux/key.h"
struct key {
 refcount_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };
 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time64_t expiry;
  time64_t revoked_at;
 };
 time64_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;



 short state;






 unsigned long flags;
# 219 "../include/linux/key.h"
 union {
  struct keyring_index_key index_key;
  struct {
   unsigned long hash;
   unsigned long len_desc;
   struct key_type *type;
   struct key_tag *domain_tag;
   char *description;
  };
 };





 union {
  union key_payload payload;
  struct {

   struct list_head name_link;
   struct assoc_array keys;
  };
 };
# 254 "../include/linux/key.h"
 struct key_restriction *restrict_link;
};

extern struct key *key_alloc(struct key_type *type,
        const char *desc,
        kuid_t uid, kgid_t gid,
        const struct cred *cred,
        key_perm_t perm,
        unsigned long flags,
        struct key_restriction *restrict_link);
# 273 "../include/linux/key.h"
extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);
extern bool key_put_tag(struct key_tag *tag);
extern void key_remove_domain(struct key_tag *domain_tag);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *__key_get(struct key *key)
{
 refcount_inc_checked(&key->usage);
 return key;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key_tag(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag,
       const char *callout_info);

extern struct key *request_key_rcu(struct key_type *type,
       const char *description,
       struct key_tag *domain_tag);

extern struct key *request_key_with_auxdata(struct key_type *type,
         const char *description,
         struct key_tag *domain_tag,
         const void *callout_info,
         size_t callout_len,
         void *aux);
# 319 "../include/linux/key.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct key *request_key(struct key_type *type,
          const char *description,
          const char *callout_info)
{
 return request_key_tag(type, description, ((void *)0), callout_info);
}
# 358 "../include/linux/key.h"
extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(const struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          const char *type,
          const char *description,
          const void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        const void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_move(struct key *key,
      struct key *from_keyring,
      struct key *to_keyring,
      unsigned int flags);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,
     const struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key_restriction *restrict_link,
     struct key *dest);

extern int restrict_link_reject(struct key *keyring,
    const struct key_type *type,
    const union key_payload *payload,
    struct key *restriction_key);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    const char *description,
    bool recurse);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern int keyring_restrict(key_ref_t keyring, const char *type,
       const char *restriction);

extern struct key *key_lookup(key_serial_t id);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) key_serial_t key_serial(const struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);

extern key_ref_t lookup_user_key(key_serial_t id, unsigned long flags,
     key_perm_t perm);
extern void key_free_user_ns(struct user_namespace *);
# 434 "../include/linux/key.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) short key_read_state(const struct key *key)
{

 return ({ union { typeof(*&key->state) __val; char __c[1]; } __u; typeof(&key->state) __p = (&key->state); do { extern void __compiletime_assert_437(void) ; if (!((sizeof(*&key->state) == sizeof(char) || sizeof(*&key->state) == sizeof(short) || sizeof(*&key->state) == sizeof(int) || sizeof(*&key->state) == sizeof(long)))) __compiletime_assert_437(); } while (0); kasan_check_read(__p, sizeof(*&key->state)); switch (sizeof(*&key->state)) { case 1: asm volatile ("ldarb %w0, %1" : "=r" (*(__u8 *)__u.__c) : "Q" (*__p) : "memory"); break; case 2: asm volatile ("ldarh %w0, %1" : "=r" (*(__u16 *)__u.__c) : "Q" (*__p) : "memory"); break; case 4: asm volatile ("ldar %w0, %1" : "=r" (*(__u32 *)__u.__c) : "Q" (*__p) : "memory"); break; case 8: asm volatile ("ldar %0, %1" : "=r" (*(__u64 *)__u.__c) : "Q" (*__p) : "memory"); break; } __u.__val; });
}
# 447 "../include/linux/key.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_positive(const struct key *key)
{
 return key_read_state(key) == KEY_IS_POSITIVE;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool key_is_negative(const struct key *key)
{
 return key_read_state(key) < 0;
}
# 470 "../include/linux/key.h"
extern struct ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct cred *new_cred);
extern void key_fsgid_changed(struct cred *new_cred);
extern void key_init(void);
# 14 "../include/linux/cred.h" 2



# 1 "../include/linux/sched/user.h" 1
# 13 "../include/linux/sched/user.h"
struct user_struct {
 refcount_t __count;
 atomic_t processes;
 atomic_t sigpending;

 atomic_t fanotify_listeners;


 atomic_long_t epoll_watches;



 unsigned long mq_bytes;

 unsigned long locked_shm;
 unsigned long unix_inflight;
 atomic_long_t pipe_bufs;


 struct hlist_node uidhash_node;
 kuid_t uid;



 atomic_long_t locked_vm;



 struct ratelimit_state ratelimit;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;




extern struct user_struct * alloc_uid(kuid_t);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_struct *get_uid(struct user_struct *u)
{
 refcount_inc_checked(&u->__count);
 return u;
}
extern void free_uid(struct user_struct *);
# 18 "../include/linux/cred.h" 2

struct cred;
struct inode;




struct group_info {
 atomic_t usage;
 int ngroups;
 kgid_t gid[0];
} ;
# 40 "../include/linux/cred.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct group_info *get_group_info(struct group_info *gi)
{
 atomic_inc(&gi->usage);
 return gi;
}
# 56 "../include/linux/cred.h"
extern struct group_info init_groups;

extern struct group_info *groups_alloc(int);
extern void groups_free(struct group_info *);

extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
extern int groups_search(const struct group_info *, kgid_t);

extern int set_current_groups(struct group_info *);
extern void set_groups(struct cred *, struct group_info *);
extern bool may_setgroups(void);
extern void groups_sort(struct group_info *);
# 111 "../include/linux/cred.h"
struct cred {
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;
 kernel_cap_t cap_ambient;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;


 void *security;

 struct user_struct *user;
 struct user_namespace *user_ns;
 struct group_info *group_info;

 union {
  int non_rcu;
  struct callback_head rcu;
 };
} ;

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern const struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern const struct cred *override_creds(const struct cred *);
extern void revert_creds(const struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, const char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern int cred_fscmp(const struct cred *, const struct cred *);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) cred_init(void);
# 203 "../include/linux/cred.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds(const struct cred *cred)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void validate_process_creds(void)
{
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cap_ambient_invariant_ok(const struct cred *cred)
{
 return cap_issubset(cred->cap_ambient,
       cap_intersect(cred->cap_permitted,
       cred->cap_inheritable));
}
# 228 "../include/linux/cred.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cred *get_new_cred(struct cred *cred)
{
 atomic_inc(&cred->usage);
 return cred;
}
# 247 "../include/linux/cred.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return cred;
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return get_new_cred(nonconst_cred);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct cred *get_cred_rcu(const struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 if (!cred)
  return ((void *)0);
 if (!atomic_inc_not_zero(&nonconst_cred->usage))
  return ((void *)0);
 validate_creds(cred);
 nonconst_cred->non_rcu = 0;
 return cred;
}
# 280 "../include/linux/cred.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cred(const struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 if (cred) {
  validate_creds(cred);
  if (atomic_dec_and_test(&(cred)->usage))
   __put_cred(cred);
 }
}
# 390 "../include/linux/cred.h"
extern struct user_namespace init_user_ns;
# 13 "../include/linux/seq_file.h" 2

struct seq_operations;

struct seq_file {
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 u64 version;
 struct mutex lock;
 const struct seq_operations *op;
 int poll_event;
 const struct file *file;
 void *private;
};

struct seq_operations {
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);
};
# 51 "../include/linux/seq_file.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool seq_has_overflowed(struct seq_file *m)
{
 return m->count == m->size;
}
# 64 "../include/linux/seq_file.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 do { if (__builtin_expect(!!(m->count > m->size), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/seq_file.h\"; .popsection; .long 14472b - 14470b; .short 66; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = ((void *)0);

 return m->size - m->count;
}
# 84 "../include/linux/seq_file.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  do { if (__builtin_expect(!!(m->count + num > m->size), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/seq_file.h\"; .popsection; .long 14472b - 14470b; .short 89; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
  m->count += num;
 }
}
# 102 "../include/linux/seq_file.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, const char *p, const char *esc);
int seq_open(struct file *, const struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_write(struct seq_file *seq, const void *data, size_t len);

__attribute__((__format__(printf, 2, 0)))
void seq_vprintf(struct seq_file *m, const char *fmt, va_list args);
__attribute__((__format__(printf, 2, 3)))
void seq_printf(struct seq_file *m, const char *fmt, ...);
void seq_putc(struct seq_file *m, char c);
void seq_puts(struct seq_file *m, const char *s);
void seq_put_decimal_ull_width(struct seq_file *m, const char *delimiter,
          unsigned long long num, unsigned int width);
void seq_put_decimal_ull(struct seq_file *m, const char *delimiter,
    unsigned long long num);
void seq_put_decimal_ll(struct seq_file *m, const char *delimiter, long long num);
void seq_put_hex_ll(struct seq_file *m, const char *delimiter,
      unsigned long long v, unsigned int width);

void seq_escape(struct seq_file *m, const char *s, const char *esc);
void seq_escape_mem_ascii(struct seq_file *m, const char *src, size_t isz);

void seq_hex_dump(struct seq_file *m, const char *prefix_str, int prefix_type,
    int rowsize, int groupsize, const void *buf, size_t len,
    bool ascii);

int seq_path(struct seq_file *, const struct path *, const char *);
int seq_file_path(struct seq_file *, struct file *, const char *);
int seq_dentry(struct seq_file *, struct dentry *, const char *);
int seq_path_root(struct seq_file *m, const struct path *path,
    const struct path *root, const char *esc);

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, const struct seq_operations *, int);
int seq_open_private(struct file *, const struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);
# 163 "../include/linux/seq_file.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *seq_user_ns(struct seq_file *seq)
{

 return seq->file->f_cred->user_ns;




}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void seq_show_option(struct seq_file *m, const char *name,
       const char *value)
{
 seq_putc(m, ',');
 seq_escape(m, name, ",= \t\n\\");
 if (value) {
  seq_putc(m, '=');
  seq_escape(m, value, ", \t\n\\");
 }
}
# 213 "../include/linux/seq_file.h"
extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);

void seq_file_init(void);
# 32 "../include/drm/drm_print.h" 2

# 1 "../include/linux/debugfs.h" 1
# 21 "../include/linux/debugfs.h"
struct device;
struct file_operations;

struct debugfs_blob_wrapper {
 void *data;
 unsigned long size;
};

struct debugfs_reg32 {
 char *name;
 unsigned long offset;
};

struct debugfs_regset32 {
 const struct debugfs_reg32 *regs;
 int nregs;
 void *base;
};

extern struct dentry *arch_debugfs_dir;
# 59 "../include/linux/debugfs.h"
struct dentry *debugfs_lookup(const char *name, struct dentry *parent);

struct dentry *debugfs_create_file(const char *name, umode_t mode,
       struct dentry *parent, void *data,
       const struct file_operations *fops);
struct dentry *debugfs_create_file_unsafe(const char *name, umode_t mode,
       struct dentry *parent, void *data,
       const struct file_operations *fops);

struct dentry *debugfs_create_file_size(const char *name, umode_t mode,
     struct dentry *parent, void *data,
     const struct file_operations *fops,
     loff_t file_size);

struct dentry *debugfs_create_dir(const char *name, struct dentry *parent);

struct dentry *debugfs_create_symlink(const char *name, struct dentry *parent,
          const char *dest);

typedef struct vfsmount *(*debugfs_automount_t)(struct dentry *, void *);
struct dentry *debugfs_create_automount(const char *name,
     struct dentry *parent,
     debugfs_automount_t f,
     void *data);

void debugfs_remove(struct dentry *dentry);
void debugfs_remove_recursive(struct dentry *dentry);

const struct file_operations *debugfs_real_fops(const struct file *filp);

int debugfs_file_get(struct dentry *dentry);
void debugfs_file_put(struct dentry *dentry);

ssize_t debugfs_attr_read(struct file *file, char *buf,
   size_t len, loff_t *ppos);
ssize_t debugfs_attr_write(struct file *file, const char *buf,
   size_t len, loff_t *ppos);

struct dentry *debugfs_rename(struct dentry *old_dir, struct dentry *old_dentry,
                struct dentry *new_dir, const char *new_name);

struct dentry *debugfs_create_u8(const char *name, umode_t mode,
     struct dentry *parent, u8 *value);
struct dentry *debugfs_create_u16(const char *name, umode_t mode,
      struct dentry *parent, u16 *value);
struct dentry *debugfs_create_u32(const char *name, umode_t mode,
      struct dentry *parent, u32 *value);
struct dentry *debugfs_create_u64(const char *name, umode_t mode,
      struct dentry *parent, u64 *value);
struct dentry *debugfs_create_ulong(const char *name, umode_t mode,
        struct dentry *parent, unsigned long *value);
struct dentry *debugfs_create_x8(const char *name, umode_t mode,
     struct dentry *parent, u8 *value);
struct dentry *debugfs_create_x16(const char *name, umode_t mode,
      struct dentry *parent, u16 *value);
struct dentry *debugfs_create_x32(const char *name, umode_t mode,
      struct dentry *parent, u32 *value);
struct dentry *debugfs_create_x64(const char *name, umode_t mode,
      struct dentry *parent, u64 *value);
struct dentry *debugfs_create_size_t(const char *name, umode_t mode,
         struct dentry *parent, size_t *value);
struct dentry *debugfs_create_atomic_t(const char *name, umode_t mode,
         struct dentry *parent, atomic_t *value);
struct dentry *debugfs_create_bool(const char *name, umode_t mode,
      struct dentry *parent, bool *value);

struct dentry *debugfs_create_blob(const char *name, umode_t mode,
      struct dentry *parent,
      struct debugfs_blob_wrapper *blob);

struct dentry *debugfs_create_regset32(const char *name, umode_t mode,
         struct dentry *parent,
         struct debugfs_regset32 *regset);

void debugfs_print_regs32(struct seq_file *s, const struct debugfs_reg32 *regs,
     int nregs, void *base, char *prefix);

void debugfs_create_u32_array(const char *name, umode_t mode,
         struct dentry *parent, u32 *array, u32 elements);

struct dentry *debugfs_create_devm_seqfile(struct device *dev, const char *name,
        struct dentry *parent,
        int (*read_fn)(struct seq_file *s,
         void *data));

bool debugfs_initialized(void);

ssize_t debugfs_read_file_bool(struct file *file, char *user_buf,
          size_t count, loff_t *ppos);

ssize_t debugfs_write_file_bool(struct file *file, const char *user_buf,
    size_t count, loff_t *ppos);
# 34 "../include/drm/drm_print.h" 2
# 72 "../include/drm/drm_print.h"
struct drm_printer {

 void (*printfn)(struct drm_printer *p, struct va_format *vaf);
 void (*puts)(struct drm_printer *p, const char *str);
 void *arg;
 const char *prefix;
};

void __drm_printfn_coredump(struct drm_printer *p, struct va_format *vaf);
void __drm_puts_coredump(struct drm_printer *p, const char *str);
void __drm_printfn_seq_file(struct drm_printer *p, struct va_format *vaf);
void __drm_puts_seq_file(struct drm_printer *p, const char *str);
void __drm_printfn_info(struct drm_printer *p, struct va_format *vaf);
void __drm_printfn_debug(struct drm_printer *p, struct va_format *vaf);

__attribute__((__format__(printf, 2, 3)))
void drm_printf(struct drm_printer *p, const char *f, ...);
void drm_puts(struct drm_printer *p, const char *str);
void drm_print_regset32(struct drm_printer *p, struct debugfs_regset32 *regset);

__attribute__((__format__(printf, 2, 0)))






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
drm_vprintf(struct drm_printer *p, const char *fmt, va_list *va)
{
 struct va_format vaf = { .fmt = fmt, .va = va };

 p->printfn(p, &vaf);
}
# 122 "../include/drm/drm_print.h"
struct drm_print_iterator {
 void *data;
 ssize_t start;
 ssize_t remain;

 ssize_t offset;
};
# 166 "../include/drm/drm_print.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer
drm_coredump_printer(struct drm_print_iterator *iter)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_coredump,
  .puts = __drm_puts_coredump,
  .arg = iter,
 };


 iter->offset = 0;

 return p;
}
# 188 "../include/drm/drm_print.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer drm_seq_file_printer(struct seq_file *f)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_seq_file,
  .puts = __drm_puts_seq_file,
  .arg = f,
 };
 return p;
}
# 205 "../include/drm/drm_print.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer drm_info_printer(struct device *dev)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_info,
  .arg = dev,
 };
 return p;
}
# 221 "../include/drm/drm_print.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_printer drm_debug_printer(const char *prefix)
{
 struct drm_printer p = {
  .printfn = __drm_printfn_debug,
  .prefix = prefix
 };
 return p;
}
# 275 "../include/drm/drm_print.h"
__attribute__((__format__(printf, 3, 4)))
void drm_dev_printk(const struct device *dev, const char *level,
      const char *format, ...);
__attribute__((__format__(printf, 3, 4)))
void drm_dev_dbg(const struct device *dev, unsigned int category,
   const char *format, ...);

__attribute__((__format__(printf, 2, 3)))
void drm_dbg(unsigned int category, const char *format, ...);
__attribute__((__format__(printf, 1, 2)))
void drm_err(const char *format, ...);
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ring.h" 2
# 49 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ring.h"
enum amdgpu_ring_type {
 AMDGPU_RING_TYPE_GFX,
 AMDGPU_RING_TYPE_COMPUTE,
 AMDGPU_RING_TYPE_SDMA,
 AMDGPU_RING_TYPE_UVD,
 AMDGPU_RING_TYPE_VCE,
 AMDGPU_RING_TYPE_KIQ,
 AMDGPU_RING_TYPE_UVD_ENC,
 AMDGPU_RING_TYPE_VCN_DEC,
 AMDGPU_RING_TYPE_VCN_ENC,
 AMDGPU_RING_TYPE_VCN_JPEG
};

struct amdgpu_device;
struct amdgpu_ring;
struct amdgpu_ib;
struct amdgpu_cs_parser;
struct amdgpu_job;




struct amdgpu_fence_driver {
 uint64_t gpu_addr;
 volatile uint32_t *cpu_addr;

 uint32_t sync_seq;
 atomic_t last_seq;
 bool initialized;
 struct amdgpu_irq_src *irq_src;
 unsigned irq_type;
 struct timer_list fallback_timer;
 unsigned num_fences_mask;
 spinlock_t lock;
 struct dma_fence **fences;
};

int amdgpu_fence_driver_init(struct amdgpu_device *adev);
void amdgpu_fence_driver_fini(struct amdgpu_device *adev);
void amdgpu_fence_driver_force_completion(struct amdgpu_ring *ring);

int amdgpu_fence_driver_init_ring(struct amdgpu_ring *ring,
      unsigned num_hw_submission);
int amdgpu_fence_driver_start_ring(struct amdgpu_ring *ring,
       struct amdgpu_irq_src *irq_src,
       unsigned irq_type);
void amdgpu_fence_driver_suspend(struct amdgpu_device *adev);
void amdgpu_fence_driver_resume(struct amdgpu_device *adev);
int amdgpu_fence_emit(struct amdgpu_ring *ring, struct dma_fence **fence,
        unsigned flags);
int amdgpu_fence_emit_polling(struct amdgpu_ring *ring, uint32_t *s);
bool amdgpu_fence_process(struct amdgpu_ring *ring);
int amdgpu_fence_wait_empty(struct amdgpu_ring *ring);
signed long amdgpu_fence_wait_polling(struct amdgpu_ring *ring,
          uint32_t wait_seq,
          signed long timeout);
unsigned amdgpu_fence_count_emitted(struct amdgpu_ring *ring);






struct amdgpu_ring_funcs {
 enum amdgpu_ring_type type;
 uint32_t align_mask;
 u32 nop;
 bool support_64bit_ptrs;
 bool no_user_fence;
 unsigned vmhub;
 unsigned extra_dw;


 u64 (*get_rptr)(struct amdgpu_ring *ring);
 u64 (*get_wptr)(struct amdgpu_ring *ring);
 void (*set_wptr)(struct amdgpu_ring *ring);

 int (*parse_cs)(struct amdgpu_cs_parser *p, uint32_t ib_idx);
 int (*patch_cs_in_place)(struct amdgpu_cs_parser *p, uint32_t ib_idx);

 unsigned emit_frame_size;
 unsigned emit_ib_size;

 void (*emit_ib)(struct amdgpu_ring *ring,
   struct amdgpu_job *job,
   struct amdgpu_ib *ib,
   uint32_t flags);
 void (*emit_fence)(struct amdgpu_ring *ring, uint64_t addr,
      uint64_t seq, unsigned flags);
 void (*emit_pipeline_sync)(struct amdgpu_ring *ring);
 void (*emit_vm_flush)(struct amdgpu_ring *ring, unsigned vmid,
         uint64_t pd_addr);
 void (*emit_hdp_flush)(struct amdgpu_ring *ring);
 void (*emit_gds_switch)(struct amdgpu_ring *ring, uint32_t vmid,
    uint32_t gds_base, uint32_t gds_size,
    uint32_t gws_base, uint32_t gws_size,
    uint32_t oa_base, uint32_t oa_size);

 int (*test_ring)(struct amdgpu_ring *ring);
 int (*test_ib)(struct amdgpu_ring *ring, long timeout);

 void (*insert_nop)(struct amdgpu_ring *ring, uint32_t count);
 void (*insert_start)(struct amdgpu_ring *ring);
 void (*insert_end)(struct amdgpu_ring *ring);

 void (*pad_ib)(struct amdgpu_ring *ring, struct amdgpu_ib *ib);
 unsigned (*init_cond_exec)(struct amdgpu_ring *ring);
 void (*patch_cond_exec)(struct amdgpu_ring *ring, unsigned offset);

 void (*begin_use)(struct amdgpu_ring *ring);
 void (*end_use)(struct amdgpu_ring *ring);
 void (*emit_switch_buffer) (struct amdgpu_ring *ring);
 void (*emit_cntxcntl) (struct amdgpu_ring *ring, uint32_t flags);
 void (*emit_rreg)(struct amdgpu_ring *ring, uint32_t reg);
 void (*emit_wreg)(struct amdgpu_ring *ring, uint32_t reg, uint32_t val);
 void (*emit_reg_wait)(struct amdgpu_ring *ring, uint32_t reg,
         uint32_t val, uint32_t mask);
 void (*emit_reg_write_reg_wait)(struct amdgpu_ring *ring,
     uint32_t reg0, uint32_t reg1,
     uint32_t ref, uint32_t mask);
 void (*emit_tmz)(struct amdgpu_ring *ring, bool start);

 void (*set_priority) (struct amdgpu_ring *ring,
         enum drm_sched_priority priority);

 void (*soft_recovery)(struct amdgpu_ring *ring, unsigned vmid);
 int (*preempt_ib)(struct amdgpu_ring *ring);
};

struct amdgpu_ring {
 struct amdgpu_device *adev;
 const struct amdgpu_ring_funcs *funcs;
 struct amdgpu_fence_driver fence_drv;
 struct drm_gpu_scheduler sched;

 struct amdgpu_bo *ring_obj;
 volatile uint32_t *ring;
 unsigned rptr_offs;
 u64 wptr;
 u64 wptr_old;
 unsigned ring_size;
 unsigned max_dw;
 int count_dw;
 uint64_t gpu_addr;
 uint64_t ptr_mask;
 uint32_t buf_mask;
 u32 idx;
 u32 me;
 u32 pipe;
 u32 queue;
 struct amdgpu_bo *mqd_obj;
 uint64_t mqd_gpu_addr;
 void *mqd_ptr;
 uint64_t eop_gpu_addr;
 u32 doorbell_index;
 bool use_doorbell;
 bool use_pollmem;
 unsigned wptr_offs;
 unsigned fence_offs;
 uint64_t current_ctx;
 char name[16];
 u32 trail_seq;
 unsigned trail_fence_offs;
 u64 trail_fence_gpu_addr;
 volatile u32 *trail_fence_cpu_addr;
 unsigned cond_exe_offs;
 u64 cond_exe_gpu_addr;
 volatile u32 *cond_exe_cpu_addr;
 unsigned vm_inv_eng;
 struct dma_fence *vmid_wait;
 bool has_compute_vm_bug;

 atomic_t num_jobs[DRM_SCHED_PRIORITY_MAX];
 struct mutex priority_mutex;

 int priority;


 struct dentry *ent;

};
# 256 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ring.h"
int amdgpu_ring_alloc(struct amdgpu_ring *ring, unsigned ndw);
void amdgpu_ring_insert_nop(struct amdgpu_ring *ring, uint32_t count);
void amdgpu_ring_generic_pad_ib(struct amdgpu_ring *ring, struct amdgpu_ib *ib);
void amdgpu_ring_commit(struct amdgpu_ring *ring);
void amdgpu_ring_undo(struct amdgpu_ring *ring);
void amdgpu_ring_priority_get(struct amdgpu_ring *ring,
         enum drm_sched_priority priority);
void amdgpu_ring_priority_put(struct amdgpu_ring *ring,
         enum drm_sched_priority priority);
int amdgpu_ring_init(struct amdgpu_device *adev, struct amdgpu_ring *ring,
       unsigned ring_size, struct amdgpu_irq_src *irq_src,
       unsigned irq_type);
void amdgpu_ring_fini(struct amdgpu_ring *ring);
void amdgpu_ring_emit_reg_write_reg_wait_helper(struct amdgpu_ring *ring,
      uint32_t reg0, uint32_t val0,
      uint32_t reg1, uint32_t val1);
bool amdgpu_ring_soft_recovery(struct amdgpu_ring *ring, unsigned int vmid,
          struct dma_fence *fence);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_ring_set_preempt_cond_exec(struct amdgpu_ring *ring,
       bool cond_exec)
{
 *ring->cond_exe_cpu_addr = cond_exec;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_ring_clear_ring(struct amdgpu_ring *ring)
{
 int i = 0;
 while (i <= ring->buf_mask)
  ring->ring[i++] = ring->funcs->nop;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_ring_write(struct amdgpu_ring *ring, uint32_t v)
{
 if (ring->count_dw <= 0)
  drm_err("amdgpu: writing more dwords to the ring than expected!\n");
 ring->ring[ring->wptr++ & ring->buf_mask] = v;
 ring->wptr &= ring->ptr_mask;
 ring->count_dw--;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_ring_write_multiple(struct amdgpu_ring *ring,
           void *src, int count_dw)
{
 unsigned occupied, chunk1, chunk2;
 void *dst;

 if (__builtin_expect(!!(ring->count_dw < count_dw), 0))
  drm_err("amdgpu: writing more dwords to the ring than expected!\n");

 occupied = ring->wptr & ring->buf_mask;
 dst = (void *)&ring->ring[occupied];
 chunk1 = ring->buf_mask + 1 - occupied;
 chunk1 = (chunk1 >= count_dw) ? count_dw: chunk1;
 chunk2 = count_dw - chunk1;
 chunk1 <<= 2;
 chunk2 <<= 2;

 if (chunk1)
  memcpy(dst, src, chunk1);

 if (chunk2) {
  src += chunk1;
  dst = (void *)ring->ring;
  memcpy(dst, src, chunk2);
 }

 ring->wptr += count_dw;
 ring->wptr &= ring->ptr_mask;
 ring->count_dw -= count_dw;
}

int amdgpu_ring_test_helper(struct amdgpu_ring *ring);
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ctx.h" 2

struct drm_device;
struct drm_file;
struct amdgpu_fpriv;

struct amdgpu_ctx_entity {
 uint64_t sequence;
 struct dma_fence **fences;
 struct drm_sched_entity entity;
};

struct amdgpu_ctx {
 struct kref refcount;
 struct amdgpu_device *adev;
 unsigned reset_counter;
 unsigned reset_counter_query;
 uint32_t vram_lost_counter;
 spinlock_t ring_lock;
 struct dma_fence **fences;
 struct amdgpu_ctx_entity *entities[9];
 bool preamble_presented;
 enum drm_sched_priority init_priority;
 enum drm_sched_priority override_priority;
 struct mutex lock;
 atomic_t guilty;
 unsigned long ras_counter_ce;
 unsigned long ras_counter_ue;
};

struct amdgpu_ctx_mgr {
 struct amdgpu_device *adev;
 struct mutex lock;

 struct idr ctx_handles;
};

extern const unsigned int amdgpu_ctx_num_entities[9];

struct amdgpu_ctx *amdgpu_ctx_get(struct amdgpu_fpriv *fpriv, uint32_t id);
int amdgpu_ctx_put(struct amdgpu_ctx *ctx);

int amdgpu_ctx_get_entity(struct amdgpu_ctx *ctx, u32 hw_ip, u32 instance,
     u32 ring, struct drm_sched_entity **entity);
void amdgpu_ctx_add_fence(struct amdgpu_ctx *ctx,
     struct drm_sched_entity *entity,
     struct dma_fence *fence, uint64_t *seq);
struct dma_fence *amdgpu_ctx_get_fence(struct amdgpu_ctx *ctx,
           struct drm_sched_entity *entity,
           uint64_t seq);
void amdgpu_ctx_priority_override(struct amdgpu_ctx *ctx,
      enum drm_sched_priority priority);

int amdgpu_ctx_ioctl(struct drm_device *dev, void *data,
       struct drm_file *filp);

int amdgpu_ctx_wait_prev_fence(struct amdgpu_ctx *ctx,
          struct drm_sched_entity *entity);

void amdgpu_ctx_mgr_init(struct amdgpu_ctx_mgr *mgr);
void amdgpu_ctx_mgr_entity_fini(struct amdgpu_ctx_mgr *mgr);
long amdgpu_ctx_mgr_entity_flush(struct amdgpu_ctx_mgr *mgr, long timeout);
void amdgpu_ctx_mgr_fini(struct amdgpu_ctx_mgr *mgr);
# 32 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2






# 1 "../include/linux/hashtable.h" 1
# 34 "../include/linux/hashtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __hash_init(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  ((&ht[i])->first = ((void *)0));
}
# 76 "../include/linux/hashtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hash_hashed(struct hlist_node *node)
{
 return !hlist_unhashed(node);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __hash_empty(struct hlist_head *ht, unsigned int sz)
{
 unsigned int i;

 for (i = 0; i < sz; i++)
  if (!hlist_empty(&ht[i]))
   return false;

 return true;
}
# 105 "../include/linux/hashtable.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash_del(struct hlist_node *node)
{
 hlist_del_init(node);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hash_del_rcu(struct hlist_node *node)
{
 hlist_del_init_rcu(node);
}
# 39 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2


# 1 "../include/drm/ttm/ttm_bo_api.h" 1
# 34 "../include/drm/ttm/ttm_bo_api.h"
# 1 "../include/drm/drm_gem.h" 1
# 38 "../include/drm/drm_gem.h"
# 1 "../include/linux/dma-resv.h" 1
# 42 "../include/linux/dma-resv.h"
# 1 "../include/linux/ww_mutex.h" 1
# 22 "../include/linux/ww_mutex.h"
struct ww_class {
 atomic_long_t stamp;
 struct lock_class_key acquire_key;
 struct lock_class_key mutex_key;
 const char *acquire_name;
 const char *mutex_name;
 unsigned int is_wait_die;
};

struct ww_acquire_ctx {
 struct task_struct *task;
 unsigned long stamp;
 unsigned int acquired;
 unsigned short wounded;
 unsigned short is_wait_die;
# 49 "../include/linux/ww_mutex.h"
};

struct ww_mutex {
 struct mutex base;
 struct ww_acquire_ctx *ctx;



};
# 95 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_init(struct ww_mutex *lock,
     struct ww_class *ww_class)
{
 __mutex_init(&lock->base, ww_class->mutex_name, &ww_class->mutex_key);
 lock->ctx = ((void *)0);



}
# 129 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_init(struct ww_acquire_ctx *ctx,
       struct ww_class *ww_class)
{
 ctx->task = get_current();
 ctx->stamp = atomic_long_inc_return_relaxed(&ww_class->stamp);
 ctx->acquired = 0;
 ctx->wounded = false;
 ctx->is_wait_die = ww_class->is_wait_die;
# 152 "../include/linux/ww_mutex.h"
}
# 165 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_done(struct ww_acquire_ctx *ctx)
{






}
# 182 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_acquire_fini(struct ww_acquire_ctx *ctx)
{
# 199 "../include/linux/ww_mutex.h"
}
# 230 "../include/linux/ww_mutex.h"
extern int ww_mutex_lock(struct ww_mutex *lock, struct ww_acquire_ctx *ctx);
# 262 "../include/linux/ww_mutex.h"
extern int __attribute__((__warn_unused_result__)) ww_mutex_lock_interruptible(struct ww_mutex *lock,
          struct ww_acquire_ctx *ctx);
# 288 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
ww_mutex_lock_slow(struct ww_mutex *lock, struct ww_acquire_ctx *ctx)
{
 int ret;



 ret = ww_mutex_lock(lock, ctx);
 (void)ret;
}
# 324 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
ww_mutex_lock_slow_interruptible(struct ww_mutex *lock,
     struct ww_acquire_ctx *ctx)
{



 return ww_mutex_lock_interruptible(lock, ctx);
}

extern void ww_mutex_unlock(struct ww_mutex *lock);
# 343 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__)) ww_mutex_trylock(struct ww_mutex *lock)
{
 return mutex_trylock(&lock->base);
}
# 356 "../include/linux/ww_mutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ww_mutex_destroy(struct ww_mutex *lock)
{
 mutex_destroy(&lock->base);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ww_mutex_is_locked(struct ww_mutex *lock)
{
 return mutex_is_locked(&lock->base);
}
# 43 "../include/linux/dma-resv.h" 2





extern struct ww_class reservation_ww_class;
extern struct lock_class_key reservation_seqcount_class;
extern const char reservation_seqcount_string[];
# 59 "../include/linux/dma-resv.h"
struct dma_resv_list {
 struct callback_head rcu;
 u32 shared_count, shared_max;
 struct dma_fence *shared[];
};
# 72 "../include/linux/dma-resv.h"
struct dma_resv {
 struct ww_mutex lock;
 seqcount_t seq;

 struct dma_fence *fence_excl;
 struct dma_resv_list *fence;
};
# 91 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_resv_list *dma_resv_get_list(struct dma_resv *obj)
{
 return ({ do { } while (0); ; ((typeof(*(obj->fence)) *)((obj->fence))); });

}
# 112 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_resv_lock(struct dma_resv *obj,
    struct ww_acquire_ctx *ctx)
{
 return ww_mutex_lock(&obj->lock, ctx);
}
# 133 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_resv_lock_interruptible(struct dma_resv *obj,
           struct ww_acquire_ctx *ctx)
{
 return ww_mutex_lock_interruptible(&obj->lock, ctx);
}
# 148 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_resv_lock_slow(struct dma_resv *obj,
          struct ww_acquire_ctx *ctx)
{
 ww_mutex_lock_slow(&obj->lock, ctx);
}
# 164 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dma_resv_lock_slow_interruptible(struct dma_resv *obj,
         struct ww_acquire_ctx *ctx)
{
 return ww_mutex_lock_slow_interruptible(&obj->lock, ctx);
}
# 184 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __attribute__((__warn_unused_result__)) dma_resv_trylock(struct dma_resv *obj)
{
 return ww_mutex_trylock(&obj->lock);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dma_resv_is_locked(struct dma_resv *obj)
{
 return ww_mutex_is_locked(&obj->lock);
}
# 207 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct ww_acquire_ctx *dma_resv_locking_ctx(struct dma_resv *obj)
{
 return ({ union { typeof(obj->lock.ctx) __val; char __c[1]; } __u; if (1) __read_once_size(&(obj->lock.ctx), __u.__c, sizeof(obj->lock.ctx)); else __read_once_size_nocheck(&(obj->lock.ctx), __u.__c, sizeof(obj->lock.ctx)); do { } while (0); __u.__val; });
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void dma_resv_unlock(struct dma_resv *obj)
{
# 228 "../include/linux/dma-resv.h"
 ww_mutex_unlock(&obj->lock);
}
# 243 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *
dma_resv_get_excl(struct dma_resv *obj)
{
 return ({ do { } while (0); ; ((typeof(*(obj->fence_excl)) *)((obj->fence_excl))); });

}
# 261 "../include/linux/dma-resv.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dma_fence *
dma_resv_get_excl_rcu(struct dma_resv *obj)
{
 struct dma_fence *fence;

 if (!({ typeof(*(obj->fence_excl)) *_________p1 = (typeof(*(obj->fence_excl)) *)({ union { typeof((obj->fence_excl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((obj->fence_excl)), __u.__c, sizeof((obj->fence_excl))); else __read_once_size_nocheck(&((obj->fence_excl)), __u.__c, sizeof((obj->fence_excl))); do { } while (0); __u.__val; }); ; ((typeof(*(obj->fence_excl)) *)(_________p1)); }))
  return ((void *)0);

 rcu_read_lock();
 fence = dma_fence_get_rcu_safe(&obj->fence_excl);
 rcu_read_unlock();

 return fence;
}

void dma_resv_init(struct dma_resv *obj);
void dma_resv_fini(struct dma_resv *obj);
int dma_resv_reserve_shared(struct dma_resv *obj, unsigned int num_fences);
void dma_resv_add_shared_fence(struct dma_resv *obj, struct dma_fence *fence);

void dma_resv_add_excl_fence(struct dma_resv *obj, struct dma_fence *fence);

int dma_resv_get_fences_rcu(struct dma_resv *obj,
       struct dma_fence **pfence_excl,
       unsigned *pshared_count,
       struct dma_fence ***pshared);

int dma_resv_copy_fences(struct dma_resv *dst, struct dma_resv *src);

long dma_resv_wait_timeout_rcu(struct dma_resv *obj, bool wait_all, bool intr,
          unsigned long timeout);

bool dma_resv_test_signaled_rcu(struct dma_resv *obj, bool test_all);
# 39 "../include/drm/drm_gem.h" 2

# 1 "../include/drm/drm_vma_manager.h" 1
# 26 "../include/drm/drm_vma_manager.h"
# 1 "../include/drm/drm_mm.h" 1
# 68 "../include/drm/drm_mm.h"
enum drm_mm_insert_mode {
# 77 "../include/drm/drm_mm.h"
 DRM_MM_INSERT_BEST = 0,
# 87 "../include/drm/drm_mm.h"
 DRM_MM_INSERT_LOW,
# 99 "../include/drm/drm_mm.h"
 DRM_MM_INSERT_HIGH,
# 111 "../include/drm/drm_mm.h"
 DRM_MM_INSERT_EVICT,
# 121 "../include/drm/drm_mm.h"
 DRM_MM_INSERT_ONCE = ((((1UL))) << (31)),
# 132 "../include/drm/drm_mm.h"
 DRM_MM_INSERT_HIGHEST = DRM_MM_INSERT_HIGH | DRM_MM_INSERT_ONCE,
# 143 "../include/drm/drm_mm.h"
 DRM_MM_INSERT_LOWEST = DRM_MM_INSERT_LOW | DRM_MM_INSERT_ONCE,
};
# 155 "../include/drm/drm_mm.h"
struct drm_mm_node {

 unsigned long color;

 u64 start;

 u64 size;

 struct drm_mm *mm;
 struct list_head node_list;
 struct list_head hole_stack;
 struct rb_node rb;
 struct rb_node rb_hole_size;
 struct rb_node rb_hole_addr;
 u64 __subtree_last;
 u64 hole_size;
 bool allocated : 1;
 bool scanned_block : 1;



};
# 186 "../include/drm/drm_mm.h"
struct drm_mm {
# 196 "../include/drm/drm_mm.h"
 void (*color_adjust)(const struct drm_mm_node *node,
        unsigned long color,
        u64 *start, u64 *end);



 struct list_head hole_stack;


 struct drm_mm_node head_node;

 struct rb_root_cached interval_tree;
 struct rb_root_cached holes_size;
 struct rb_root holes_addr;

 unsigned long scan_active;
};
# 223 "../include/drm/drm_mm.h"
struct drm_mm_scan {

 struct drm_mm *mm;

 u64 size;
 u64 alignment;
 u64 remainder_mask;

 u64 range_start;
 u64 range_end;

 u64 hit_start;
 u64 hit_end;

 unsigned long color;
 enum drm_mm_insert_mode mode;
};
# 254 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_node_allocated(const struct drm_mm_node *node)
{
 return node->allocated;
}
# 272 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_initialized(const struct drm_mm *mm)
{
 return mm->hole_stack.next;
}
# 289 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_hole_follows(const struct drm_mm_node *node)
{
 return node->hole_size;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __drm_mm_hole_node_start(const struct drm_mm_node *hole_node)
{
 return hole_node->start + hole_node->size;
}
# 310 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 drm_mm_hole_node_start(const struct drm_mm_node *hole_node)
{
 ((void)(sizeof(( long)(!drm_mm_hole_follows(hole_node)))));
 return __drm_mm_hole_node_start(hole_node);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 __drm_mm_hole_node_end(const struct drm_mm_node *hole_node)
{
 return ({ void *__mptr = (void *)((hole_node)->node_list.next); do { extern void __compiletime_assert_318(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*((hole_node)->node_list.next)), typeof(((typeof(*(hole_node)) *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*((hole_node)->node_list.next)), typeof(void))))) __compiletime_assert_318(); } while (0); ((typeof(*(hole_node)) *)(__mptr - __builtin_offsetof(typeof(*(hole_node)), node_list))); })->start;
}
# 332 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 drm_mm_hole_node_end(const struct drm_mm_node *hole_node)
{
 return __drm_mm_hole_node_end(hole_node);
}
# 402 "../include/drm/drm_mm.h"
int drm_mm_reserve_node(struct drm_mm *mm, struct drm_mm_node *node);
int drm_mm_insert_node_in_range(struct drm_mm *mm,
    struct drm_mm_node *node,
    u64 size,
    u64 alignment,
    unsigned long color,
    u64 start,
    u64 end,
    enum drm_mm_insert_mode mode);
# 429 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_mm_insert_node_generic(struct drm_mm *mm, struct drm_mm_node *node,
      u64 size, u64 alignment,
      unsigned long color,
      enum drm_mm_insert_mode mode)
{
 return drm_mm_insert_node_in_range(mm, node,
        size, alignment, color,
        0, ((u64)~0ULL), mode);
}
# 454 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_mm_insert_node(struct drm_mm *mm,
         struct drm_mm_node *node,
         u64 size)
{
 return drm_mm_insert_node_generic(mm, node, size, 0, 0, 0);
}

void drm_mm_remove_node(struct drm_mm_node *node);
void drm_mm_replace_node(struct drm_mm_node *old, struct drm_mm_node *new);
void drm_mm_init(struct drm_mm *mm, u64 start, u64 size);
void drm_mm_takedown(struct drm_mm *mm);
# 474 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mm_clean(const struct drm_mm *mm)
{
 return list_empty((&(mm)->head_node.node_list));
}

struct drm_mm_node *
__drm_mm_interval_first(const struct drm_mm *mm, u64 start, u64 last);
# 504 "../include/drm/drm_mm.h"
void drm_mm_scan_init_with_range(struct drm_mm_scan *scan,
     struct drm_mm *mm,
     u64 size, u64 alignment, unsigned long color,
     u64 start, u64 end,
     enum drm_mm_insert_mode mode);
# 529 "../include/drm/drm_mm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_mm_scan_init(struct drm_mm_scan *scan,
        struct drm_mm *mm,
        u64 size,
        u64 alignment,
        unsigned long color,
        enum drm_mm_insert_mode mode)
{
 drm_mm_scan_init_with_range(scan, mm,
        size, alignment, color,
        0, ((u64)~0ULL), mode);
}

bool drm_mm_scan_add_block(struct drm_mm_scan *scan,
      struct drm_mm_node *node);
bool drm_mm_scan_remove_block(struct drm_mm_scan *scan,
         struct drm_mm_node *node);
struct drm_mm_node *drm_mm_scan_color_evict(struct drm_mm_scan *scan);

void drm_mm_print(const struct drm_mm *mm, struct drm_printer *p);
# 27 "../include/drm/drm_vma_manager.h" 2
# 44 "../include/drm/drm_vma_manager.h"
struct drm_file;

struct drm_vma_offset_file {
 struct rb_node vm_rb;
 struct drm_file *vm_tag;
 unsigned long vm_count;
};

struct drm_vma_offset_node {
 rwlock_t vm_lock;
 struct drm_mm_node vm_node;
 struct rb_root vm_files;
 bool readonly:1;
};

struct drm_vma_offset_manager {
 rwlock_t vm_lock;
 struct drm_mm vm_addr_space_mm;
};

void drm_vma_offset_manager_init(struct drm_vma_offset_manager *mgr,
     unsigned long page_offset, unsigned long size);
void drm_vma_offset_manager_destroy(struct drm_vma_offset_manager *mgr);

struct drm_vma_offset_node *drm_vma_offset_lookup_locked(struct drm_vma_offset_manager *mgr,
          unsigned long start,
          unsigned long pages);
int drm_vma_offset_add(struct drm_vma_offset_manager *mgr,
         struct drm_vma_offset_node *node, unsigned long pages);
void drm_vma_offset_remove(struct drm_vma_offset_manager *mgr,
      struct drm_vma_offset_node *node);

int drm_vma_node_allow(struct drm_vma_offset_node *node, struct drm_file *tag);
void drm_vma_node_revoke(struct drm_vma_offset_node *node,
    struct drm_file *tag);
bool drm_vma_node_is_allowed(struct drm_vma_offset_node *node,
        struct drm_file *tag);
# 94 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_vma_offset_node *
drm_vma_offset_exact_lookup_locked(struct drm_vma_offset_manager *mgr,
       unsigned long start,
       unsigned long pages)
{
 struct drm_vma_offset_node *node;

 node = drm_vma_offset_lookup_locked(mgr, start, pages);
 return (node && node->vm_node.start == start) ? node : ((void *)0);
}
# 121 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_offset_lock_lookup(struct drm_vma_offset_manager *mgr)
{
 __raw_read_lock(&mgr->vm_lock);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_offset_unlock_lookup(struct drm_vma_offset_manager *mgr)
{
 __raw_read_unlock(&mgr->vm_lock);
}
# 147 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_node_reset(struct drm_vma_offset_node *node)
{
 memset(node, 0, sizeof(*node));
 node->vm_files = (struct rb_root) { ((void *)0), };
 do { *(&node->vm_lock) = (rwlock_t) { .raw_lock = { { .cnts = { (0) }, }, .wait_lock = { { .val = { (0) } } }, }, }; } while (0);
}
# 168 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long drm_vma_node_start(const struct drm_vma_offset_node *node)
{
 return node->vm_node.start;
}
# 185 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long drm_vma_node_size(struct drm_vma_offset_node *node)
{
 return node->vm_node.size;
}
# 202 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u64 drm_vma_node_offset_addr(struct drm_vma_offset_node *node)
{
 return ((__u64)node->vm_node.start) << 16;
}
# 219 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_vma_node_unmap(struct drm_vma_offset_node *node,
          struct address_space *file_mapping)
{
 if (drm_mm_node_allocated(&node->vm_node))
  unmap_mapping_range(file_mapping,
        drm_vma_node_offset_addr(node),
        drm_vma_node_size(node) << 16, 1);
}
# 240 "../include/drm/drm_vma_manager.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_vma_node_verify_access(struct drm_vma_offset_node *node,
          struct drm_file *tag)
{
 return drm_vma_node_is_allowed(node, tag) ? 0 : -13;
}
# 41 "../include/drm/drm_gem.h" 2

struct drm_gem_object;




struct drm_gem_object_funcs {







 void (*free)(struct drm_gem_object *obj);
# 64 "../include/drm/drm_gem.h"
 int (*open)(struct drm_gem_object *obj, struct drm_file *file);
# 73 "../include/drm/drm_gem.h"
 void (*close)(struct drm_gem_object *obj, struct drm_file *file);
# 88 "../include/drm/drm_gem.h"
 void (*print_info)(struct drm_printer *p, unsigned int indent,
      const struct drm_gem_object *obj);
# 99 "../include/drm/drm_gem.h"
 struct dma_buf *(*export)(struct drm_gem_object *obj, int flags);
# 108 "../include/drm/drm_gem.h"
 int (*pin)(struct drm_gem_object *obj);
# 117 "../include/drm/drm_gem.h"
 void (*unpin)(struct drm_gem_object *obj);
# 131 "../include/drm/drm_gem.h"
 struct sg_table *(*get_sg_table)(struct drm_gem_object *obj);
# 141 "../include/drm/drm_gem.h"
 void *(*vmap)(struct drm_gem_object *obj);
# 151 "../include/drm/drm_gem.h"
 void (*vunmap)(struct drm_gem_object *obj, void *vaddr);
# 160 "../include/drm/drm_gem.h"
 const struct vm_operations_struct *vm_ops;
};
# 171 "../include/drm/drm_gem.h"
struct drm_gem_object {
# 181 "../include/drm/drm_gem.h"
 struct kref refcount;
# 194 "../include/drm/drm_gem.h"
 unsigned handle_count;




 struct drm_device *dev;
# 209 "../include/drm/drm_gem.h"
 struct file *filp;
# 221 "../include/drm/drm_gem.h"
 struct drm_vma_offset_node vma_node;







 size_t size;
# 238 "../include/drm/drm_gem.h"
 int name;
# 251 "../include/drm/drm_gem.h"
 struct dma_buf *dma_buf;
# 270 "../include/drm/drm_gem.h"
 struct dma_buf_attachment *import_attach;
# 279 "../include/drm/drm_gem.h"
 struct dma_resv *resv;
# 288 "../include/drm/drm_gem.h"
 struct dma_resv _resv;
# 299 "../include/drm/drm_gem.h"
 const struct drm_gem_object_funcs *funcs;
};
# 328 "../include/drm/drm_gem.h"
void drm_gem_object_release(struct drm_gem_object *obj);
void drm_gem_object_free(struct kref *kref);
int drm_gem_object_init(struct drm_device *dev,
   struct drm_gem_object *obj, size_t size);
void drm_gem_private_object_init(struct drm_device *dev,
     struct drm_gem_object *obj, size_t size);
void drm_gem_vm_open(struct vm_area_struct *vma);
void drm_gem_vm_close(struct vm_area_struct *vma);
int drm_gem_mmap_obj(struct drm_gem_object *obj, unsigned long obj_size,
       struct vm_area_struct *vma);
int drm_gem_mmap(struct file *filp, struct vm_area_struct *vma);
# 347 "../include/drm/drm_gem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_gem_object_get(struct drm_gem_object *obj)
{
 kref_get(&obj->refcount);
}
# 367 "../include/drm/drm_gem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
__drm_gem_object_put(struct drm_gem_object *obj)
{
 kref_put(&obj->refcount, drm_gem_object_free);
}

void drm_gem_object_put_unlocked(struct drm_gem_object *obj);
void drm_gem_object_put(struct drm_gem_object *obj);

int drm_gem_handle_create(struct drm_file *file_priv,
     struct drm_gem_object *obj,
     u32 *handlep);
int drm_gem_handle_delete(struct drm_file *filp, u32 handle);


void drm_gem_free_mmap_offset(struct drm_gem_object *obj);
int drm_gem_create_mmap_offset(struct drm_gem_object *obj);
int drm_gem_create_mmap_offset_size(struct drm_gem_object *obj, size_t size);

struct page **drm_gem_get_pages(struct drm_gem_object *obj);
void drm_gem_put_pages(struct drm_gem_object *obj, struct page **pages,
  bool dirty, bool accessed);

int drm_gem_objects_lookup(struct drm_file *filp, void *bo_handles,
      int count, struct drm_gem_object ***objs_out);
struct drm_gem_object *drm_gem_object_lookup(struct drm_file *filp, u32 handle);
long drm_gem_dma_resv_wait(struct drm_file *filep, u32 handle,
        bool wait_all, unsigned long timeout);
int drm_gem_lock_reservations(struct drm_gem_object **objs, int count,
         struct ww_acquire_ctx *acquire_ctx);
void drm_gem_unlock_reservations(struct drm_gem_object **objs, int count,
     struct ww_acquire_ctx *acquire_ctx);
int drm_gem_fence_array_add(struct xarray *fence_array,
       struct dma_fence *fence);
int drm_gem_fence_array_add_implicit(struct xarray *fence_array,
         struct drm_gem_object *obj,
         bool write);
int drm_gem_dumb_map_offset(struct drm_file *file, struct drm_device *dev,
       u32 handle, u64 *offset);
int drm_gem_dumb_destroy(struct drm_file *file,
    struct drm_device *dev,
    uint32_t handle);
# 35 "../include/drm/ttm/ttm_bo_api.h" 2
# 1 "../include/drm/drm_hashtab.h" 1
# 42 "../include/drm/drm_hashtab.h"
struct drm_hash_item {
 struct hlist_node head;
 unsigned long key;
};

struct drm_open_hash {
 struct hlist_head *table;
 u8 order;
};

int drm_ht_create(struct drm_open_hash *ht, unsigned int order);
int drm_ht_insert_item(struct drm_open_hash *ht, struct drm_hash_item *item);
int drm_ht_just_insert_please(struct drm_open_hash *ht, struct drm_hash_item *item,
         unsigned long seed, int bits, int shift,
         unsigned long add);
int drm_ht_find_item(struct drm_open_hash *ht, unsigned long key, struct drm_hash_item **item);

void drm_ht_verbose_list(struct drm_open_hash *ht, unsigned long key);
int drm_ht_remove_key(struct drm_open_hash *ht, unsigned long key);
int drm_ht_remove_item(struct drm_open_hash *ht, struct drm_hash_item *item);
void drm_ht_remove(struct drm_open_hash *ht);
# 36 "../include/drm/ttm/ttm_bo_api.h" 2
# 45 "../include/drm/ttm/ttm_bo_api.h"
struct ttm_bo_global;

struct ttm_bo_device;

struct drm_mm_node;

struct ttm_placement;

struct ttm_place;

struct ttm_lru_bulk_move;
# 70 "../include/drm/ttm/ttm_bo_api.h"
struct ttm_bus_placement {
 void *addr;
 phys_addr_t base;
 unsigned long size;
 unsigned long offset;
 bool is_iomem;
 bool io_reserved_vm;
 uint64_t io_reserved_count;
};
# 95 "../include/drm/ttm/ttm_bo_api.h"
struct ttm_mem_reg {
 void *mm_node;
 unsigned long start;
 unsigned long size;
 unsigned long num_pages;
 uint32_t page_alignment;
 uint32_t mem_type;
 uint32_t placement;
 struct ttm_bus_placement bus;
};
# 120 "../include/drm/ttm/ttm_bo_api.h"
enum ttm_bo_type {
 ttm_bo_type_device,
 ttm_bo_type_kernel,
 ttm_bo_type_sg
};

struct ttm_tt;
# 172 "../include/drm/ttm/ttm_bo_api.h"
struct ttm_buffer_object {
 struct drm_gem_object base;





 struct ttm_bo_device *bdev;
 enum ttm_bo_type type;
 void (*destroy) (struct ttm_buffer_object *);
 unsigned long num_pages;
 size_t acc_size;





 struct kref kref;
 struct kref list_kref;





 struct ttm_mem_reg mem;
 struct file *persistent_swap_storage;
 struct ttm_tt *ttm;
 bool evicted;





 atomic_t cpu_writers;





 struct list_head lru;
 struct list_head ddestroy;
 struct list_head swap;
 struct list_head io_reserve_lru;





 struct dma_fence *moving;
 unsigned priority;







 uint64_t offset;

 struct sg_table *sg;

 struct mutex wu_mutex;
};
# 250 "../include/drm/ttm/ttm_bo_api.h"
struct ttm_bo_kmap_obj {
 void *virtual;
 struct page *page;
 enum {
  ttm_bo_map_iomap = 1 | 0x80,
  ttm_bo_map_vmap = 2,
  ttm_bo_map_kmap = 3,
  ttm_bo_map_premapped = 4 | 0x80,
 } bo_kmap_type;
 struct ttm_buffer_object *bo;
};
# 273 "../include/drm/ttm/ttm_bo_api.h"
struct ttm_operation_ctx {
 bool interruptible;
 bool no_wait_gpu;
 struct dma_resv *resv;
 uint64_t bytes_moved;
 uint32_t flags;
};
# 291 "../include/drm/ttm/ttm_bo_api.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_get(struct ttm_buffer_object *bo)
{
 kref_get(&bo->kref);
}
# 306 "../include/drm/ttm/ttm_bo_api.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__warn_unused_result__)) struct ttm_buffer_object *
ttm_bo_get_unless_zero(struct ttm_buffer_object *bo)
{
 if (!kref_get_unless_zero(&bo->kref))
  return ((void *)0);
 return bo;
}
# 328 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_wait(struct ttm_buffer_object *bo, bool interruptible, bool no_wait);
# 339 "../include/drm/ttm/ttm_bo_api.h"
bool ttm_bo_mem_compat(struct ttm_placement *placement, struct ttm_mem_reg *mem,
         uint32_t *new_flags);
# 357 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_validate(struct ttm_buffer_object *bo,
      struct ttm_placement *placement,
      struct ttm_operation_ctx *ctx);
# 368 "../include/drm/ttm/ttm_bo_api.h"
void ttm_bo_put(struct ttm_buffer_object *bo);
# 380 "../include/drm/ttm/ttm_bo_api.h"
void ttm_bo_add_to_lru(struct ttm_buffer_object *bo);
# 392 "../include/drm/ttm/ttm_bo_api.h"
void ttm_bo_del_from_lru(struct ttm_buffer_object *bo);
# 404 "../include/drm/ttm/ttm_bo_api.h"
void ttm_bo_move_to_lru_tail(struct ttm_buffer_object *bo,
        struct ttm_lru_bulk_move *bulk);
# 415 "../include/drm/ttm/ttm_bo_api.h"
void ttm_bo_bulk_move_lru_tail(struct ttm_lru_bulk_move *bulk);
# 424 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_lock_delayed_workqueue(struct ttm_bo_device *bdev);






void ttm_bo_unlock_delayed_workqueue(struct ttm_bo_device *bdev, int resched);
# 441 "../include/drm/ttm/ttm_bo_api.h"
bool ttm_bo_eviction_valuable(struct ttm_buffer_object *bo,
         const struct ttm_place *place);
# 458 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_synccpu_write_grab(struct ttm_buffer_object *bo, bool no_wait);
# 467 "../include/drm/ttm/ttm_bo_api.h"
void ttm_bo_synccpu_write_release(struct ttm_buffer_object *bo);
# 478 "../include/drm/ttm/ttm_bo_api.h"
size_t ttm_bo_acc_size(struct ttm_bo_device *bdev,
         unsigned long bo_size,
         unsigned struct_size);
size_t ttm_bo_dma_acc_size(struct ttm_bo_device *bdev,
      unsigned long bo_size,
      unsigned struct_size);
# 520 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_init_reserved(struct ttm_bo_device *bdev,
    struct ttm_buffer_object *bo,
    unsigned long size,
    enum ttm_bo_type type,
    struct ttm_placement *placement,
    uint32_t page_alignment,
    struct ttm_operation_ctx *ctx,
    size_t acc_size,
    struct sg_table *sg,
    struct dma_resv *resv,
    void (*destroy) (struct ttm_buffer_object *));
# 569 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_init(struct ttm_bo_device *bdev, struct ttm_buffer_object *bo,
  unsigned long size, enum ttm_bo_type type,
  struct ttm_placement *placement,
  uint32_t page_alignment, bool interrubtible, size_t acc_size,
  struct sg_table *sg, struct dma_resv *resv,
  void (*destroy) (struct ttm_buffer_object *));
# 595 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_create(struct ttm_bo_device *bdev, unsigned long size,
    enum ttm_bo_type type, struct ttm_placement *placement,
    uint32_t page_alignment, bool interruptible,
    struct ttm_buffer_object **p_bo);
# 615 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_init_mm(struct ttm_bo_device *bdev, unsigned type,
     unsigned long p_size);
# 644 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_clean_mm(struct ttm_bo_device *bdev, unsigned mem_type);
# 664 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_evict_mm(struct ttm_bo_device *bdev, unsigned mem_type);
# 677 "../include/drm/ttm/ttm_bo_api.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *ttm_kmap_obj_virtual(struct ttm_bo_kmap_obj *map,
      bool *is_iomem)
{
 *is_iomem = !!(map->bo_kmap_type & 0x80);
 return map->virtual;
}
# 700 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_kmap(struct ttm_buffer_object *bo, unsigned long start_page,
  unsigned long num_pages, struct ttm_bo_kmap_obj *map);
# 710 "../include/drm/ttm/ttm_bo_api.h"
void ttm_bo_kunmap(struct ttm_bo_kmap_obj *map);
# 722 "../include/drm/ttm/ttm_bo_api.h"
int ttm_fbdev_mmap(struct vm_area_struct *vma, struct ttm_buffer_object *bo);
# 734 "../include/drm/ttm/ttm_bo_api.h"
int ttm_bo_mmap(struct file *filp, struct vm_area_struct *vma,
  struct ttm_bo_device *bdev);

void *ttm_kmap_atomic_prot(struct page *page, pgprot_t prot);

void ttm_kunmap_atomic_prot(void *addr, pgprot_t prot);
# 761 "../include/drm/ttm/ttm_bo_api.h"
ssize_t ttm_bo_io(struct ttm_bo_device *bdev, struct file *filp,
    const char *wbuf, char *rbuf,
    size_t count, loff_t *f_pos, bool write);

int ttm_bo_swapout(struct ttm_bo_global *glob,
   struct ttm_operation_ctx *ctx);
void ttm_bo_swapout_all(struct ttm_bo_device *bdev);
int ttm_bo_wait_unreserved(struct ttm_buffer_object *bo);
# 784 "../include/drm/ttm/ttm_bo_api.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ttm_bo_uses_embedded_gem_object(struct ttm_buffer_object *bo)
{
 return bo->base.dev != ((void *)0);
}
# 42 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../include/drm/ttm/ttm_bo_driver.h" 1
# 41 "../include/drm/ttm/ttm_bo_driver.h"
# 1 "../include/drm/ttm/ttm_memory.h" 1
# 65 "../include/drm/ttm/ttm_memory.h"
struct ttm_mem_zone;
extern struct ttm_mem_global {
 struct kobject kobj;
 struct ttm_bo_global *bo_glob;
 struct workqueue_struct *swap_queue;
 struct work_struct work;
 spinlock_t lock;
 uint64_t lower_mem_limit;
 struct ttm_mem_zone *zones[2];
 unsigned int num_zones;
 struct ttm_mem_zone *zone_kernel;



 struct ttm_mem_zone *zone_dma32;

} ttm_mem_glob;

extern int ttm_mem_global_init(struct ttm_mem_global *glob);
extern void ttm_mem_global_release(struct ttm_mem_global *glob);
extern int ttm_mem_global_alloc(struct ttm_mem_global *glob, uint64_t memory,
    struct ttm_operation_ctx *ctx);
extern void ttm_mem_global_free(struct ttm_mem_global *glob,
    uint64_t amount);
extern int ttm_mem_global_alloc_page(struct ttm_mem_global *glob,
         struct page *page, uint64_t size,
         struct ttm_operation_ctx *ctx);
extern void ttm_mem_global_free_page(struct ttm_mem_global *glob,
         struct page *page, uint64_t size);
extern size_t ttm_round_pot(size_t size);
extern uint64_t ttm_get_kernel_zone_memory_size(struct ttm_mem_global *glob);
extern bool ttm_check_under_lowerlimit(struct ttm_mem_global *glob,
   uint64_t num_pages, struct ttm_operation_ctx *ctx);
# 42 "../include/drm/ttm/ttm_bo_driver.h" 2
# 1 "../include/drm/ttm/ttm_module.h" 1
# 35 "../include/drm/ttm/ttm_module.h"
struct kobject;


extern struct kobject *ttm_get_kobj(void);
# 43 "../include/drm/ttm/ttm_bo_driver.h" 2
# 1 "../include/drm/ttm/ttm_placement.h" 1
# 85 "../include/drm/ttm/ttm_placement.h"
struct ttm_place {
 unsigned fpfn;
 unsigned lpfn;
 uint32_t flags;
};
# 101 "../include/drm/ttm/ttm_placement.h"
struct ttm_placement {
 unsigned num_placement;
 const struct ttm_place *placement;
 unsigned num_busy_placement;
 const struct ttm_place *busy_placement;
};
# 44 "../include/drm/ttm/ttm_bo_driver.h" 2
# 1 "../include/drm/ttm/ttm_tt.h" 1
# 32 "../include/drm/ttm/ttm_tt.h"
struct ttm_tt;
struct ttm_mem_reg;
struct ttm_buffer_object;
struct ttm_operation_ctx;
# 45 "../include/drm/ttm/ttm_tt.h"
enum ttm_caching_state {
 tt_uncached,
 tt_wc,
 tt_cached
};

struct ttm_backend_func {
# 63 "../include/drm/ttm/ttm_tt.h"
 int (*bind) (struct ttm_tt *ttm, struct ttm_mem_reg *bo_mem);
# 73 "../include/drm/ttm/ttm_tt.h"
 int (*unbind) (struct ttm_tt *ttm);
# 83 "../include/drm/ttm/ttm_tt.h"
 void (*destroy) (struct ttm_tt *ttm);
};
# 105 "../include/drm/ttm/ttm_tt.h"
struct ttm_tt {
 struct ttm_bo_device *bdev;
 struct ttm_backend_func *func;
 struct page **pages;
 uint32_t page_flags;
 unsigned long num_pages;
 struct sg_table *sg;
 struct file *swap_storage;
 enum ttm_caching_state caching_state;
 enum {
  tt_bound,
  tt_unbound,
  tt_unpopulated,
 } state;
};
# 132 "../include/drm/ttm/ttm_tt.h"
struct ttm_dma_tt {
 struct ttm_tt ttm;
 dma_addr_t *dma_address;
 struct list_head pages_list;
};
# 147 "../include/drm/ttm/ttm_tt.h"
int ttm_tt_create(struct ttm_buffer_object *bo, bool zero_alloc);
# 161 "../include/drm/ttm/ttm_tt.h"
int ttm_tt_init(struct ttm_tt *ttm, struct ttm_buffer_object *bo,
  uint32_t page_flags);
int ttm_dma_tt_init(struct ttm_dma_tt *ttm_dma, struct ttm_buffer_object *bo,
      uint32_t page_flags);
int ttm_sg_tt_init(struct ttm_dma_tt *ttm_dma, struct ttm_buffer_object *bo,
     uint32_t page_flags);
# 175 "../include/drm/ttm/ttm_tt.h"
void ttm_tt_fini(struct ttm_tt *ttm);
void ttm_dma_tt_fini(struct ttm_dma_tt *ttm_dma);
# 186 "../include/drm/ttm/ttm_tt.h"
int ttm_tt_bind(struct ttm_tt *ttm, struct ttm_mem_reg *bo_mem,
  struct ttm_operation_ctx *ctx);
# 196 "../include/drm/ttm/ttm_tt.h"
void ttm_tt_destroy(struct ttm_tt *ttm);
# 205 "../include/drm/ttm/ttm_tt.h"
void ttm_tt_unbind(struct ttm_tt *ttm);
# 214 "../include/drm/ttm/ttm_tt.h"
int ttm_tt_swapin(struct ttm_tt *ttm);
# 229 "../include/drm/ttm/ttm_tt.h"
int ttm_tt_set_placement_caching(struct ttm_tt *ttm, uint32_t placement);
int ttm_tt_swapout(struct ttm_tt *ttm, struct file *persistent_swap_storage);
# 239 "../include/drm/ttm/ttm_tt.h"
int ttm_tt_populate(struct ttm_tt *ttm, struct ttm_operation_ctx *ctx);
# 248 "../include/drm/ttm/ttm_tt.h"
void ttm_tt_unpopulate(struct ttm_tt *ttm);
# 45 "../include/drm/ttm/ttm_bo_driver.h" 2







struct ttm_mem_type_manager;

struct ttm_mem_type_manager_func {
# 66 "../include/drm/ttm/ttm_bo_driver.h"
 int (*init)(struct ttm_mem_type_manager *man, unsigned long p_size);
# 76 "../include/drm/ttm/ttm_bo_driver.h"
 int (*takedown)(struct ttm_mem_type_manager *man);
# 106 "../include/drm/ttm/ttm_bo_driver.h"
 int (*get_node)(struct ttm_mem_type_manager *man,
    struct ttm_buffer_object *bo,
    const struct ttm_place *place,
    struct ttm_mem_reg *mem);
# 121 "../include/drm/ttm/ttm_bo_driver.h"
 void (*put_node)(struct ttm_mem_type_manager *man,
    struct ttm_mem_reg *mem);
# 134 "../include/drm/ttm/ttm_bo_driver.h"
 void (*debug)(struct ttm_mem_type_manager *man,
        struct drm_printer *printer);
};
# 170 "../include/drm/ttm/ttm_bo_driver.h"
struct ttm_mem_type_manager {
 struct ttm_bo_device *bdev;





 bool has_type;
 bool use_type;
 uint32_t flags;
 uint64_t gpu_offset;
 uint64_t size;
 uint32_t available_caching;
 uint32_t default_caching;
 const struct ttm_mem_type_manager_func *func;
 void *priv;
 struct mutex io_reserve_mutex;
 bool use_io_reserve_lru;
 bool io_reserve_fastpath;
 spinlock_t move_lock;





 struct list_head io_reserve_lru;





 struct list_head lru[4U];




 struct dma_fence *move;
};
# 223 "../include/drm/ttm/ttm_bo_driver.h"
struct ttm_bo_driver {
# 235 "../include/drm/ttm/ttm_bo_driver.h"
 struct ttm_tt *(*ttm_tt_create)(struct ttm_buffer_object *bo,
     uint32_t page_flags);
# 247 "../include/drm/ttm/ttm_bo_driver.h"
 int (*ttm_tt_populate)(struct ttm_tt *ttm,
   struct ttm_operation_ctx *ctx);
# 257 "../include/drm/ttm/ttm_bo_driver.h"
 void (*ttm_tt_unpopulate)(struct ttm_tt *ttm);
# 271 "../include/drm/ttm/ttm_bo_driver.h"
 int (*invalidate_caches)(struct ttm_bo_device *bdev, uint32_t flags);
 int (*init_mem_type)(struct ttm_bo_device *bdev, uint32_t type,
        struct ttm_mem_type_manager *man);
# 284 "../include/drm/ttm/ttm_bo_driver.h"
 bool (*eviction_valuable)(struct ttm_buffer_object *bo,
      const struct ttm_place *place);
# 296 "../include/drm/ttm/ttm_bo_driver.h"
 void (*evict_flags)(struct ttm_buffer_object *bo,
       struct ttm_placement *placement);
# 310 "../include/drm/ttm/ttm_bo_driver.h"
 int (*move)(struct ttm_buffer_object *bo, bool evict,
      struct ttm_operation_ctx *ctx,
      struct ttm_mem_reg *new_mem);
# 326 "../include/drm/ttm/ttm_bo_driver.h"
 int (*verify_access)(struct ttm_buffer_object *bo,
        struct file *filp);
# 336 "../include/drm/ttm/ttm_bo_driver.h"
 void (*move_notify)(struct ttm_buffer_object *bo,
       bool evict,
       struct ttm_mem_reg *new_mem);


 int (*fault_reserve_notify)(struct ttm_buffer_object *bo);




 void (*swap_notify)(struct ttm_buffer_object *bo);







 int (*io_mem_reserve)(struct ttm_bo_device *bdev,
         struct ttm_mem_reg *mem);
 void (*io_mem_free)(struct ttm_bo_device *bdev,
       struct ttm_mem_reg *mem);







 unsigned long (*io_mem_pfn)(struct ttm_buffer_object *bo,
        unsigned long page_offset);
# 382 "../include/drm/ttm/ttm_bo_driver.h"
 int (*access_memory)(struct ttm_buffer_object *bo, unsigned long offset,
        void *buf, int len, int write);
# 392 "../include/drm/ttm/ttm_bo_driver.h"
 void (*del_from_lru_notify)(struct ttm_buffer_object *bo);
# 402 "../include/drm/ttm/ttm_bo_driver.h"
 void (*release_notify)(struct ttm_buffer_object *bo);
};
# 419 "../include/drm/ttm/ttm_bo_driver.h"
extern struct ttm_bo_global {





 struct kobject kobj;
 struct ttm_mem_global *mem_glob;
 struct page *dummy_read_page;
 spinlock_t lru_lock;




 struct list_head device_list;




 struct list_head swap_lru[4U];




 atomic_t bo_count;
} ttm_bo_glob;
# 464 "../include/drm/ttm/ttm_bo_driver.h"
struct ttm_bo_device {




 struct list_head device_list;
 struct ttm_bo_global *glob;
 struct ttm_bo_driver *driver;
 struct ttm_mem_type_manager man[8];




 struct drm_vma_offset_manager vma_manager;




 struct list_head ddestroy;





 struct address_space *dev_mapping;





 struct delayed_work wq;

 bool need_dma32;

 bool no_retry;
};
# 509 "../include/drm/ttm/ttm_bo_driver.h"
struct ttm_lru_bulk_move_pos {
 struct ttm_buffer_object *first;
 struct ttm_buffer_object *last;
};
# 523 "../include/drm/ttm/ttm_bo_driver.h"
struct ttm_lru_bulk_move {
 struct ttm_lru_bulk_move_pos tt[4U];
 struct ttm_lru_bulk_move_pos vram[4U];
 struct ttm_lru_bulk_move_pos swap[4U];
};
# 539 "../include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t
ttm_flag_masked(uint32_t *old, uint32_t new, uint32_t mask)
{
 *old ^= (*old ^ new) & mask;
 return *old;
}
# 559 "../include/drm/ttm/ttm_bo_driver.h"
bool ttm_mem_reg_is_pci(struct ttm_bo_device *bdev, struct ttm_mem_reg *mem);
# 580 "../include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_mem_space(struct ttm_buffer_object *bo,
       struct ttm_placement *placement,
       struct ttm_mem_reg *mem,
       struct ttm_operation_ctx *ctx);

void ttm_bo_mem_put(struct ttm_buffer_object *bo, struct ttm_mem_reg *mem);
void ttm_bo_mem_put_locked(struct ttm_buffer_object *bo,
      struct ttm_mem_reg *mem);

int ttm_bo_device_release(struct ttm_bo_device *bdev);
# 606 "../include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_device_init(struct ttm_bo_device *bdev,
         struct ttm_bo_driver *driver,
         struct address_space *mapping,
         bool need_dma32);






void ttm_bo_unmap_virtual(struct ttm_buffer_object *bo);
# 625 "../include/drm/ttm/ttm_bo_driver.h"
void ttm_bo_unmap_virtual_locked(struct ttm_buffer_object *bo);

int ttm_mem_io_reserve_vm(struct ttm_buffer_object *bo);
void ttm_mem_io_free_vm(struct ttm_buffer_object *bo);
int ttm_mem_io_lock(struct ttm_mem_type_manager *man, bool interruptible);
void ttm_mem_io_unlock(struct ttm_mem_type_manager *man);

void ttm_bo_del_sub_from_lru(struct ttm_buffer_object *bo);
void ttm_bo_add_to_lru(struct ttm_buffer_object *bo);
# 656 "../include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __ttm_bo_reserve(struct ttm_buffer_object *bo,
       bool interruptible, bool no_wait,
       struct ww_acquire_ctx *ticket)
{
 int ret = 0;

 if (no_wait) {
  bool success;
  if (({ int __ret_warn_on = !!(ticket); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/drm/ttm/ttm_bo_driver.h\"; .popsection; .long 14472b - 14470b; .short 664; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
   return -16;

  success = dma_resv_trylock(bo->base.resv);
  return success ? 0 : -16;
 }

 if (interruptible)
  ret = dma_resv_lock_interruptible(bo->base.resv, ticket);
 else
  ret = dma_resv_lock(bo->base.resv, ticket);
 if (ret == -4)
  return -512;
 return ret;
}
# 724 "../include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ttm_bo_reserve(struct ttm_buffer_object *bo,
     bool interruptible, bool no_wait,
     struct ww_acquire_ctx *ticket)
{
 int ret;

 ({ int __ret_warn_on = !!(!kref_read(&bo->kref)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/drm/ttm/ttm_bo_driver.h\"; .popsection; .long 14472b - 14470b; .short 730; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 ret = __ttm_bo_reserve(bo, interruptible, no_wait, ticket);
 if (__builtin_expect(!!(ret == 0), 1))
  ttm_bo_del_sub_from_lru(bo);

 return ret;
}
# 749 "../include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ttm_bo_reserve_slowpath(struct ttm_buffer_object *bo,
       bool interruptible,
       struct ww_acquire_ctx *ticket)
{
 int ret = 0;

 ({ int __ret_warn_on = !!(!kref_read(&bo->kref)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/drm/ttm/ttm_bo_driver.h\"; .popsection; .long 14472b - 14470b; .short 755; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (interruptible)
  ret = dma_resv_lock_slow_interruptible(bo->base.resv,
         ticket);
 else
  dma_resv_lock_slow(bo->base.resv, ticket);

 if (__builtin_expect(!!(ret == 0), 1))
  ttm_bo_del_sub_from_lru(bo);
 else if (ret == -4)
  ret = -512;

 return ret;
}
# 778 "../include/drm/ttm/ttm_bo_driver.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ttm_bo_unreserve(struct ttm_buffer_object *bo)
{
 spin_lock(&bo->bdev->glob->lru_lock);
 if (list_empty(&bo->lru))
  ttm_bo_add_to_lru(bo);
 else
  ttm_bo_move_to_lru_tail(bo, ((void *)0));
 spin_unlock(&bo->bdev->glob->lru_lock);
 dma_resv_unlock(bo->base.resv);
}





int ttm_mem_io_reserve(struct ttm_bo_device *bdev,
         struct ttm_mem_reg *mem);
void ttm_mem_io_free(struct ttm_bo_device *bdev,
       struct ttm_mem_reg *mem);
# 815 "../include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_move_ttm(struct ttm_buffer_object *bo,
      struct ttm_operation_ctx *ctx,
      struct ttm_mem_reg *new_mem);
# 837 "../include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_move_memcpy(struct ttm_buffer_object *bo,
         struct ttm_operation_ctx *ctx,
         struct ttm_mem_reg *new_mem);
# 848 "../include/drm/ttm/ttm_bo_driver.h"
void ttm_bo_free_old_node(struct ttm_buffer_object *bo);
# 865 "../include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_move_accel_cleanup(struct ttm_buffer_object *bo,
         struct dma_fence *fence, bool evict,
         struct ttm_mem_reg *new_mem);
# 880 "../include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_pipeline_move(struct ttm_buffer_object *bo,
    struct dma_fence *fence, bool evict,
    struct ttm_mem_reg *new_mem);
# 891 "../include/drm/ttm/ttm_bo_driver.h"
int ttm_bo_pipeline_gutting(struct ttm_buffer_object *bo);
# 902 "../include/drm/ttm/ttm_bo_driver.h"
pgprot_t ttm_io_prot(uint32_t caching_flags, pgprot_t tmp);

extern const struct ttm_mem_type_manager_func ttm_bo_manager_func;
# 43 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2


# 1 "../include/drm/ttm/ttm_execbuf_util.h" 1
# 46 "../include/drm/ttm/ttm_execbuf_util.h"
struct ttm_validate_buffer {
 struct list_head head;
 struct ttm_buffer_object *bo;
 unsigned int num_shared;
};
# 62 "../include/drm/ttm/ttm_execbuf_util.h"
extern void ttm_eu_backoff_reservation(struct ww_acquire_ctx *ticket,
           struct list_head *list);
# 100 "../include/drm/ttm/ttm_execbuf_util.h"
extern int ttm_eu_reserve_buffers(struct ww_acquire_ctx *ticket,
      struct list_head *list, bool intr,
      struct list_head *dups, bool del_lru);
# 117 "../include/drm/ttm/ttm_execbuf_util.h"
extern void ttm_eu_fence_buffer_objects(struct ww_acquire_ctx *ticket,
     struct list_head *list,
     struct dma_fence *fence);
# 46 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2



# 1 "../include/drm/drm_ioctl.h" 1
# 38 "../include/drm/drm_ioctl.h"
# 1 "./arch/arm64/include/generated/uapi/asm/ioctl.h" 1
# 39 "../include/drm/drm_ioctl.h" 2

struct drm_device;
struct drm_file;
struct file;
# 54 "../include/drm/drm_ioctl.h"
typedef int drm_ioctl_t(struct drm_device *dev, void *data,
   struct drm_file *file_priv);
# 67 "../include/drm/drm_ioctl.h"
typedef int drm_ioctl_compat_t(struct file *filp, unsigned int cmd,
          unsigned long arg);
# 79 "../include/drm/drm_ioctl.h"
enum drm_ioctl_flags {







 DRM_AUTH = ((((1UL))) << (0)),
# 99 "../include/drm/drm_ioctl.h"
 DRM_MASTER = ((((1UL))) << (1)),
# 110 "../include/drm/drm_ioctl.h"
 DRM_ROOT_ONLY = ((((1UL))) << (2)),
# 121 "../include/drm/drm_ioctl.h"
 DRM_UNLOCKED = ((((1UL))) << (4)),
# 131 "../include/drm/drm_ioctl.h"
 DRM_RENDER_ALLOW = ((((1UL))) << (5)),
};
# 144 "../include/drm/drm_ioctl.h"
struct drm_ioctl_desc {
 unsigned int cmd;
 enum drm_ioctl_flags flags;
 drm_ioctl_t *func;
 const char *name;
};
# 169 "../include/drm/drm_ioctl.h"
int drm_ioctl_permit(u32 flags, struct drm_file *file_priv);
long drm_ioctl(struct file *filp, unsigned int cmd, unsigned long arg);
long drm_ioctl_kernel(struct file *, drm_ioctl_t, void *, u32);

long drm_compat_ioctl(struct file *filp, unsigned int cmd, unsigned long arg);




bool drm_ioctl_flags(unsigned int nr, unsigned int *flags);

int drm_noop(struct drm_device *dev, void *data,
      struct drm_file *file_priv);
int drm_invalid_op(struct drm_device *dev, void *data,
     struct drm_file *file_priv);
# 50 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2


# 1 "../drivers/gpu/drm/amd/amdgpu/../include/kgd_kfd_interface.h" 1
# 35 "../drivers/gpu/drm/amd/amdgpu/../include/kgd_kfd_interface.h"
struct pci_dev;



struct kfd_dev;
struct kgd_dev;

struct kgd_mem;

enum kfd_preempt_type {
 KFD_PREEMPT_TYPE_WAVEFRONT_DRAIN = 0,
 KFD_PREEMPT_TYPE_WAVEFRONT_RESET,
};

struct kfd_vm_fault_info {
 uint64_t page_addr;
 uint32_t vmid;
 uint32_t mc_id;
 uint32_t status;
 bool prot_valid;
 bool prot_read;
 bool prot_write;
 bool prot_exec;
};

struct kfd_cu_info {
 uint32_t num_shader_engines;
 uint32_t num_shader_arrays_per_engine;
 uint32_t num_cu_per_sh;
 uint32_t cu_active_number;
 uint32_t cu_ao_mask;
 uint32_t simd_per_cu;
 uint32_t max_waves_per_simd;
 uint32_t wave_front_size;
 uint32_t max_scratch_slots_per_cu;
 uint32_t lds_size;
 uint32_t cu_bitmap[4][4];
};


struct kfd_local_mem_info {
 uint64_t local_mem_size_private;
 uint64_t local_mem_size_public;
 uint32_t vram_width;
 uint32_t mem_clk_max;
};

enum kgd_memory_pool {
 KGD_POOL_SYSTEM_CACHEABLE = 1,
 KGD_POOL_SYSTEM_WRITECOMBINE = 2,
 KGD_POOL_FRAMEBUFFER = 3,
};
# 109 "../drivers/gpu/drm/amd/amdgpu/../include/kgd_kfd_interface.h"
enum kfd_sched_policy {
 KFD_SCHED_POLICY_HWS = 0,
 KFD_SCHED_POLICY_HWS_NO_OVERSUBSCRIPTION,
 KFD_SCHED_POLICY_NO_HWS
};

struct kgd2kfd_shared_resources {

 unsigned int compute_vmid_bitmap;


 uint32_t num_pipe_per_mec;


 uint32_t num_queue_per_pipe;


 unsigned long queue_bitmap[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];





 uint32_t *sdma_doorbell_idx;




 uint32_t non_cp_doorbells_start;
 uint32_t non_cp_doorbells_end;


 phys_addr_t doorbell_physical_address;


 size_t doorbell_aperture_size;


 size_t doorbell_start_offset;


 uint64_t gpuvm_size;


 int drm_render_minor;
};

struct tile_config {
 uint32_t *tile_config_ptr;
 uint32_t *macro_tile_config_ptr;
 uint32_t num_tile_configs;
 uint32_t num_macro_tile_configs;

 uint32_t gb_addr_config;
 uint32_t num_banks;
 uint32_t num_ranks;
};
# 243 "../drivers/gpu/drm/amd/amdgpu/../include/kgd_kfd_interface.h"
struct kfd2kgd_calls {

 void (*program_sh_mem_settings)(struct kgd_dev *kgd, uint32_t vmid,
   uint32_t sh_mem_config, uint32_t sh_mem_ape1_base,
   uint32_t sh_mem_ape1_limit, uint32_t sh_mem_bases);

 int (*set_pasid_vmid_mapping)(struct kgd_dev *kgd, unsigned int pasid,
     unsigned int vmid);

 int (*init_interrupts)(struct kgd_dev *kgd, uint32_t pipe_id);

 int (*hqd_load)(struct kgd_dev *kgd, void *mqd, uint32_t pipe_id,
   uint32_t queue_id, uint32_t *wptr,
   uint32_t wptr_shift, uint32_t wptr_mask,
   struct mm_struct *mm);

 int (*hqd_sdma_load)(struct kgd_dev *kgd, void *mqd,
        uint32_t *wptr, struct mm_struct *mm);

 int (*hqd_dump)(struct kgd_dev *kgd,
   uint32_t pipe_id, uint32_t queue_id,
   uint32_t (**dump)[2], uint32_t *n_regs);

 int (*hqd_sdma_dump)(struct kgd_dev *kgd,
        uint32_t engine_id, uint32_t queue_id,
        uint32_t (**dump)[2], uint32_t *n_regs);

 bool (*hqd_is_occupied)(struct kgd_dev *kgd, uint64_t queue_address,
    uint32_t pipe_id, uint32_t queue_id);

 int (*hqd_destroy)(struct kgd_dev *kgd, void *mqd, uint32_t reset_type,
    unsigned int timeout, uint32_t pipe_id,
    uint32_t queue_id);

 bool (*hqd_sdma_is_occupied)(struct kgd_dev *kgd, void *mqd);

 int (*hqd_sdma_destroy)(struct kgd_dev *kgd, void *mqd,
    unsigned int timeout);

 int (*address_watch_disable)(struct kgd_dev *kgd);
 int (*address_watch_execute)(struct kgd_dev *kgd,
     unsigned int watch_point_id,
     uint32_t cntl_val,
     uint32_t addr_hi,
     uint32_t addr_lo);
 int (*wave_control_execute)(struct kgd_dev *kgd,
     uint32_t gfx_index_val,
     uint32_t sq_cmd);
 uint32_t (*address_watch_get_offset)(struct kgd_dev *kgd,
     unsigned int watch_point_id,
     unsigned int reg_offset);
 bool (*get_atc_vmid_pasid_mapping_valid)(
     struct kgd_dev *kgd,
     uint8_t vmid);
 uint16_t (*get_atc_vmid_pasid_mapping_pasid)(
     struct kgd_dev *kgd,
     uint8_t vmid);

 void (*set_scratch_backing_va)(struct kgd_dev *kgd,
    uint64_t va, uint32_t vmid);
 int (*get_tile_config)(struct kgd_dev *kgd, struct tile_config *config);

 void (*set_vm_context_page_table_base)(struct kgd_dev *kgd,
   uint32_t vmid, uint64_t page_table_base);
 int (*invalidate_tlbs)(struct kgd_dev *kgd, uint16_t pasid);
 int (*invalidate_tlbs_vmid)(struct kgd_dev *kgd, uint16_t vmid);
 uint32_t (*read_vmid_from_vmfault_reg)(struct kgd_dev *kgd);
 uint64_t (*get_hive_id)(struct kgd_dev *kgd);

};
# 53 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/dm_pp_interface.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../include/dm_pp_interface.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_services_types.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_services_types.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/os_types.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../display/dc/os_types.h"
# 1 "../include/linux/kgdb.h" 1
# 20 "../include/linux/kgdb.h"
# 1 "../arch/arm64/include/asm/kgdb.h" 1
# 14 "../arch/arm64/include/asm/kgdb.h"
# 1 "../include/linux/ptrace.h" 1






# 1 "../include/linux/sched/signal.h" 1





# 1 "../include/linux/signal.h" 1








struct task_struct;


extern int print_fatal_signals;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_siginfo(kernel_siginfo_t *to,
    const kernel_siginfo_t *from)
{
 memcpy(to, from, sizeof(*to));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_siginfo(kernel_siginfo_t *info)
{
 memset(info, 0, sizeof(*info));
}



int copy_siginfo_to_user(siginfo_t *to, const kernel_siginfo_t *from);
int copy_siginfo_from_user(kernel_siginfo_t *to, const siginfo_t *from);

enum siginfo_layout {
 SIL_KILL,
 SIL_TIMER,
 SIL_POLL,
 SIL_FAULT,
 SIL_FAULT_MCEERR,
 SIL_FAULT_BNDERR,
 SIL_FAULT_PKUERR,
 SIL_CHLD,
 SIL_RT,
 SIL_SYS,
};

enum siginfo_layout siginfo_layout(unsigned sig, int si_code);
# 54 "../include/linux/signal.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / 64] |= 1UL << (sig % 64);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / 64] &= ~(1UL << (sig % 64));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / 64] >> (sig % 64));
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigisemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  do { extern void __compiletime_assert_94(void) ; if (!(!(1))) __compiletime_assert_94(); } while (0);
  return 0;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigequalsets(const sigset_t *set1, const sigset_t *set2)
{
 switch ((64 / 64)) {
 case 4:
  return (set1->sig[3] == set2->sig[3]) &&
   (set1->sig[2] == set2->sig[2]) &&
   (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 2:
  return (set1->sig[1] == set2->sig[1]) &&
   (set1->sig[0] == set2->sig[0]);
 case 1:
  return set1->sig[0] == set2->sig[0];
 }
 return 0;
}
# 147 "../include/linux/signal.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigorsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: do { extern void __compiletime_assert_147(void) ; if (!(!(1))) __compiletime_assert_147(); } while (0); } }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: do { extern void __compiletime_assert_150(void) ; if (!(!(1))) __compiletime_assert_150(); } while (0); } }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigandnsets(sigset_t *r, const sigset_t *a, const sigset_t *b) { unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: do { extern void __compiletime_assert_153(void) ; if (!(!(1))) __compiletime_assert_153(); } while (0); } }
# 177 "../include/linux/signal.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signotset(sigset_t *set) { switch ((64 / 64)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); case 2: set->sig[1] = (~(set->sig[1])); case 1: set->sig[0] = (~(set->sig[0])); break; default: do { extern void __compiletime_assert_177(void) ; if (!(!(1))) __compiletime_assert_177(); } while (0); } }




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;

 case 1: set->sig[0] = 0;
  break;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigfillset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;

 case 1: set->sig[0] = -1;
  break;
 }
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = 0;
 case 1: ;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = -1;
 case 1: ;
 }
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

struct timespec;
struct pt_regs;
enum pid_type;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct kernel_siginfo *info,
    struct task_struct *p, enum pid_type type);
extern int group_send_sig_info(int sig, struct kernel_siginfo *info,
          struct task_struct *p, enum pid_type type);
extern int __group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked(const sigset_t *);
extern int show_unhandled_signals;

extern bool get_signal(struct ksignal *ksig);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern void kernel_sigaction(int, __sighandler_t);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)2));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void allow_kernel_signal(int sig)
{





 kernel_sigaction(sig, (( __sighandler_t)3));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disallow_signal(int sig)
{
 kernel_sigaction(sig, (( __sighandler_t)1));
}

extern struct kmem_cache *sighand_cachep;

extern bool unhandled_signal(struct task_struct *tsk, int sig);
# 442 "../include/linux/signal.h"
void signals_init(void);

int restore_altstack(const stack_t *);
int __save_altstack(stack_t *, unsigned long);
# 458 "../include/linux/signal.h"
struct seq_file;
extern void render_sigset_t(struct seq_file *, const char *, sigset_t *);
# 7 "../include/linux/sched/signal.h" 2

# 1 "../include/linux/sched/jobctl.h" 1






struct task_struct;
# 35 "../include/linux/sched/jobctl.h"
extern bool task_set_jobctl_pending(struct task_struct *task, unsigned long mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task, unsigned long mask);
# 9 "../include/linux/sched/signal.h" 2
# 1 "../include/linux/sched/task.h" 1
# 11 "../include/linux/sched/task.h"
# 1 "../include/linux/uaccess.h" 1
# 11 "../include/linux/uaccess.h"
# 1 "../arch/arm64/include/asm/uaccess.h" 1
# 11 "../arch/arm64/include/asm/uaccess.h"
# 1 "../arch/arm64/include/asm/kernel-pgtable.h" 1
# 12 "../arch/arm64/include/asm/uaccess.h" 2
# 24 "../arch/arm64/include/asm/uaccess.h"
# 1 "../arch/arm64/include/asm/extable.h" 1
# 18 "../arch/arm64/include/asm/extable.h"
struct exception_table_entry
{
 int insn, fixup;
};



extern int fixup_exception(struct pt_regs *regs);
# 25 "../arch/arm64/include/asm/uaccess.h" 2



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_fs(mm_segment_t fs)
{
 ((struct thread_info *)get_current())->addr_limit = fs;





 asm volatile(".if ""1"" == 1\n" "661:\n\t" "dsb nsh\nisb\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "36" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd5000000 | (((0) << 19) | ((3) << 16) | ((3) << 12) | (((0)) << 8) | (((7)) << 5)) | ((31) & 0x1f))" "\n\t""nop\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n");


 set_ti_thread_flag(((struct thread_info *)get_current()), 5);





 if (0 && fs == (((-1UL))))
  asm(".if ""1"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (3) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n");
 else
  asm(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (3) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n");

}
# 61 "../arch/arm64/include/asm/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __range_ok(const void *addr, unsigned long size)
{
 unsigned long ret, limit = ((struct thread_info *)get_current())->addr_limit;

 if (1 &&
     test_ti_thread_flag(((struct thread_info *)get_current()), 26))
  addr = (( __typeof__(addr))sign_extend64(( u64)(addr), 55));

 (void)0;
 asm volatile(


 "	adds	%0, %3, %2\n"

 "	csel	%1, xzr, %1, hi\n"



 "	csinv	%0, %0, xzr, cc\n"



 "	sbcs	xzr, %0, %1\n"
 "	cset	%0, ls\n"
 : "=&r" (ret), "+r" (limit) : "Ir" (size), "0" (addr) : "cc");

 return ret;
}
# 103 "../arch/arm64/include/asm/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_ttbr0_disable(void)
{
 unsigned long flags, ttbr;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 ttbr = ({ u64 __val; asm volatile("mrs %0, " "ttbr1_el1" : "=r" (__val)); __val; });
 ttbr &= ~((((0xffffUL))) << 48);

 do { u64 __val = (u64)(ttbr - (((1UL) << 16))); asm volatile("msr " "ttbr0_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");

 do { u64 __val = (u64)(ttbr); asm volatile("msr " "ttbr1_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_ttbr0_enable(void)
{
 unsigned long flags, ttbr0, ttbr1;






 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 ttbr0 = ({ union { typeof(((struct thread_info *)get_current())->ttbr0) __val; char __c[1]; } __u; if (1) __read_once_size(&(((struct thread_info *)get_current())->ttbr0), __u.__c, sizeof(((struct thread_info *)get_current())->ttbr0)); else __read_once_size_nocheck(&(((struct thread_info *)get_current())->ttbr0), __u.__c, sizeof(((struct thread_info *)get_current())->ttbr0)); do { } while (0); __u.__val; });


 ttbr1 = ({ u64 __val; asm volatile("mrs %0, " "ttbr1_el1" : "=r" (__val)); __val; });
 ttbr1 &= ~((((0xffffUL))) << 48);
 ttbr1 |= ttbr0 & ((((0xffffUL))) << 48);
 do { u64 __val = (u64)(ttbr1); asm volatile("msr " "ttbr1_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");


 do { u64 __val = (u64)(ttbr0); asm volatile("msr " "ttbr0_el1" ", %x0" : : "rZ" (__val)); } while (0);
 asm volatile("isb" : : : "memory");
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uaccess_ttbr0_disable(void)
{
 if (!system_uses_ttbr0_pan())
  return false;
 __uaccess_ttbr0_disable();
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool uaccess_ttbr0_enable(void)
{
 if (!system_uses_ttbr0_pan())
  return false;
 __uaccess_ttbr0_enable();
 return true;
}
# 171 "../arch/arm64/include/asm/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_disable_hw_pan(void)
{
 asm(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "4" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n");

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __uaccess_enable_hw_pan(void)
{
 asm(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "4" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n");

}
# 197 "../arch/arm64/include/asm/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uaccess_disable(void)
{
 do { if (!uaccess_ttbr0_disable()) asm(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "4" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uaccess_enable(void)
{
 do { if (!uaccess_ttbr0_enable()) asm(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "4" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"); } while (0);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uaccess_disable_not_uao(void)
{
 do { if (!uaccess_ttbr0_disable()) asm(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "10" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!1) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void uaccess_enable_not_uao(void)
{
 do { if (!uaccess_ttbr0_enable()) asm(".if ""0"" == 1\n" "661:\n\t" "nop" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "10" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" ".inst " "(0xd500401f | ((0) << 16 | (4) << 5) | ((!!0) << 8))" "\n\t" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n"); } while (0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *__uaccess_mask_ptr(const void *ptr)
{
 void *safe_ptr;

 asm volatile(
 "	bics	xzr, %3, %2\n"
 "	csel	%0, %1, xzr, eq\n"
 : "=&r" (safe_ptr)
 : "r" (ptr), "r" (((struct thread_info *)get_current())->addr_limit),
   "r" ((( __typeof__(ptr))sign_extend64(( u64)(ptr), 55)))
 : "cc");

 asm volatile("hint #20" : : : "memory");
 return safe_ptr;
}
# 378 "../arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_from_user(void *to, const void *from, unsigned long n);





extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_to_user(void *to, const void *from, unsigned long n);





extern unsigned long __attribute__((__warn_unused_result__)) __arch_copy_in_user(void *to, const void *from, unsigned long n);
# 400 "../arch/arm64/include/asm/uaccess.h"
extern unsigned long __attribute__((__warn_unused_result__)) __arch_clear_user(void *to, unsigned long n);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __attribute__((__warn_unused_result__)) __clear_user(void *to, unsigned long n)
{
 if (__range_ok(to, n))
  n = __arch_clear_user(__uaccess_mask_ptr(to), n);
 return n;
}


extern long strncpy_from_user(char *dest, const char *src, long count);

extern __attribute__((__warn_unused_result__)) long strnlen_user(const char *str, long n);


struct page;
void memcpy_page_flushcache(char *to, struct page *page, size_t offset, size_t len);
extern unsigned long __attribute__((__warn_unused_result__)) __copy_user_flushcache(void *to, const void *from, unsigned long n);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __copy_from_user_flushcache(void *dst, const void *src, unsigned size)
{
 kasan_check_write(dst, size);
 return __copy_user_flushcache(dst, __uaccess_mask_ptr(src), size);
}
# 12 "../include/linux/uaccess.h" 2
# 58 "../include/linux/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 check_object_size(to, n, false);
 return ({ __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 kasan_check_write(to, n);
 check_object_size(to, n, false);
 return ({ __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); });
}
# 88 "../include/linux/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 check_object_size(from, n, true);
 return ({ __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 kasan_check_read(from, n);
 check_object_size(from, n, true);
 return ({ __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); });
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
_copy_from_user(void *to, const void *from, unsigned long n)
{
 unsigned long res = n;
 might_fault();
 if (__builtin_expect(!!(__range_ok(from, n)), 1)) {
  kasan_check_write(to, n);
  res = ({ __arch_copy_from_user((to), __uaccess_mask_ptr(from), (n)); });
 }
 if (__builtin_expect(!!(res), 0))
  memset(to + (n - res), 0, res);
 return res;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
_copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (__range_ok(to, n)) {
  kasan_check_read(from, n);
  n = ({ __arch_copy_to_user(__uaccess_mask_ptr(to), (from), (n)); });
 }
 return n;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) unsigned long __attribute__((__warn_unused_result__))
copy_in_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (__range_ok(to, n) && __range_ok(from, n))
  n = ({ __arch_copy_in_user(__uaccess_mask_ptr(to), __uaccess_mask_ptr(from), (n)); });
 return n;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_inc(void)
{
 get_current()->pagefault_disabled++;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__((__always_inline__)) void pagefault_disabled_dec(void)
{
 get_current()->pagefault_disabled--;
}
# 183 "../include/linux/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_disable(void)
{
 pagefault_disabled_inc();




 __asm__ __volatile__("" : : : "memory");
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pagefault_enable(void)
{




 __asm__ __volatile__("" : : : "memory");
 pagefault_disabled_dec();
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool pagefault_disabled(void)
{
 return get_current()->pagefault_disabled != 0;
}
# 225 "../include/linux/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long __copy_from_user_inatomic_nocache(void *to,
    const void *from, unsigned long n)
{
 return __copy_from_user_inatomic(to, from, n);
}
# 242 "../include/linux/uaccess.h"
extern long probe_kernel_read(void *dst, const void *src, size_t size);
extern long __probe_kernel_read(void *dst, const void *src, size_t size);
# 254 "../include/linux/uaccess.h"
extern long probe_user_read(void *dst, const void *src, size_t size);
extern long __probe_user_read(void *dst, const void *src, size_t size);
# 266 "../include/linux/uaccess.h"
extern long __attribute__((__no_instrument_function__)) probe_kernel_write(void *dst, const void *src, size_t size);
extern long __attribute__((__no_instrument_function__)) __probe_kernel_write(void *dst, const void *src, size_t size);

extern long strncpy_from_unsafe(char *dst, const void *unsafe_addr, long count);
extern long strncpy_from_unsafe_user(char *dst, const void *unsafe_addr,
         long count);
extern long strnlen_unsafe_user(const void *unsafe_addr, long count);
# 289 "../include/linux/uaccess.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long user_access_save(void) { return 0UL; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_access_restore(unsigned long flags) { }



void usercopy_warn(const char *name, const char *detail, bool to_user,
     unsigned long offset, unsigned long len);
void __attribute__((__noreturn__)) usercopy_abort(const char *name, const char *detail,
          bool to_user, unsigned long offset,
          unsigned long len);
# 12 "../include/linux/sched/task.h" 2

struct task_struct;
struct rusage;
union thread_union;




struct kernel_clone_args {
 u64 flags;
 int *pidfd;
 int *child_tid;
 int *parent_tid;
 int exit_signal;
 unsigned long stack;
 unsigned long stack_size;
 unsigned long tls;
};







extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

extern union thread_union init_thread_union;
extern struct task_struct init_task;





extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);

extern int sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_dead(struct task_struct *p);

void __attribute__((__noreturn__)) do_task_dead(void);

extern void proc_caches_init(void);

extern void fork_init(void);

extern void release_task(struct task_struct * p);





extern int copy_thread(unsigned long, unsigned long, unsigned long,
   struct task_struct *);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int copy_thread_tls(
  unsigned long clone_flags, unsigned long sp, unsigned long arg,
  struct task_struct *p, unsigned long tls)
{
 return copy_thread(clone_flags, sp, arg, p);
}

extern void flush_thread(void);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void exit_thread(struct task_struct *tsk)
{
}

extern void do_group_exit(int);

extern void exit_files(struct task_struct *);
extern void exit_itimers(struct signal_struct *);

extern long _do_fork(struct kernel_clone_args *kargs);
extern bool legacy_clone_args_valid(const struct kernel_clone_args *kargs);
extern long do_fork(unsigned long, unsigned long, unsigned long, int *, int *);
struct task_struct *fork_idle(int);
struct mm_struct *copy_init_mm(void);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);
extern long kernel_wait4(pid_t, int *, int, struct rusage *);

extern void free_task(struct task_struct *tsk);



extern void sched_exec(void);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *get_task_struct(struct task_struct *t)
{
 refcount_inc_checked(&t->usage);
 return t;
}

extern void __put_task_struct(struct task_struct *t);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_task_struct(struct task_struct *t)
{
 if (refcount_dec_and_test_checked(&t->usage))
  __put_task_struct(t);
}

struct task_struct *task_rcu_dereference(struct task_struct **ptask);
# 145 "../include/linux/sched/task.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct vm_struct *task_stack_vm_area(const struct task_struct *t)
{
 return t->stack_vm_area;
}
# 166 "../include/linux/sched/task.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_lock(struct task_struct *p)
{
 spin_lock(&p->alloc_lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void task_unlock(struct task_struct *p)
{
 spin_unlock(&p->alloc_lock);
}
# 10 "../include/linux/sched/signal.h" 2








struct sighand_struct {
 spinlock_t siglock;
 refcount_t count;
 wait_queue_head_t signalfd_wqh;
 struct k_sigaction action[64];
};




struct pacct_struct {
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 u64 ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;
};

struct cpu_itimer {
 u64 expires;
 u64 incr;
};





struct task_cputime_atomic {
 atomic64_t utime;
 atomic64_t stime;
 atomic64_t sum_exec_runtime;
};
# 64 "../include/linux/sched/signal.h"
struct thread_group_cputimer {
 struct task_cputime_atomic cputime_atomic;
};

struct multiprocess_signals {
 sigset_t signal;
 struct hlist_node node;
};
# 80 "../include/linux/sched/signal.h"
struct signal_struct {
 refcount_t sigcnt;
 atomic_t live;
 int nr_threads;
 struct list_head thread_head;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 struct hlist_head multiprocess;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;
# 120 "../include/linux/sched/signal.h"
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;




 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;



 struct posix_cputimers posix_cputimers;


 struct pid *pids[PIDTYPE_MAX];





 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;


 struct autogroup *autogroup;







 seqlock_t stats_lock;
 u64 utime, stime, cutime, cstime;
 u64 gtime;
 u64 cgtime;
 struct prev_cputime prev_cputime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
# 201 "../include/linux/sched/signal.h"
 struct rlimit rlim[16];


 struct pacct_struct pacct;


 struct taskstats *stats;


 unsigned audit_tty;
 struct tty_audit_buf *tty_audit_buf;






 bool oom_flag_origin;
 short oom_score_adj;
 short oom_score_adj_min;

 struct mm_struct *oom_mm;


 struct mutex cred_guard_mutex;


} ;
# 249 "../include/linux/sched/signal.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_set_stop_flags(struct signal_struct *sig,
      unsigned int flags)
{
 ({ int __ret_warn_on = !!(sig->flags & (0x00000004|0x00000008)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/sched/signal.h\"; .popsection; .long 14472b - 14470b; .short 252; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 sig->flags = (sig->flags & ~((0x00000010|0x00000020) | 0x00000001 | 0x00000002)) | flags;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_group_exit(const struct signal_struct *sig)
{
 return (sig->flags & 0x00000004) ||
  (sig->group_exit_task != ((void *)0));
}

extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *task,
     sigset_t *mask, kernel_siginfo_t *info);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kernel_dequeue_signal(void)
{
 struct task_struct *task = get_current();
 kernel_siginfo_t __info;
 int ret;

 spin_lock_irq(&task->sighand->siglock);
 ret = dequeue_signal(task, &task->blocked, &__info);
 spin_unlock_irq(&task->sighand->siglock);

 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kernel_signal_stop(void)
{
 spin_lock_irq(&get_current()->sighand->siglock);
 if (get_current()->jobctl & (1UL << 16))
  do { unsigned long flags; do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = __raw_spin_lock_irqsave(&get_current()->pi_lock); } while (0); get_current()->state = ((0x0100 | 0x0004)); do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __raw_spin_unlock_irqrestore(&get_current()->pi_lock, flags); } while (0); } while (0);
 spin_unlock_irq(&get_current()->sighand->siglock);

 schedule();
}
# 302 "../include/linux/sched/signal.h"
int force_sig_fault_to_task(int sig, int code, void *addr


 , struct task_struct *t);
int force_sig_fault(int sig, int code, void *addr

                                                                );
int send_sig_fault(int sig, int code, void *addr


 , struct task_struct *t);

int force_sig_mceerr(int code, void *, short);
int send_sig_mceerr(int code, void *, short, struct task_struct *);

int force_sig_bnderr(void *addr, void *lower, void *upper);
int force_sig_pkuerr(void *addr, u32 pkey);

int force_sig_ptrace_errno_trap(int errno, void *addr);

extern int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
extern void force_sigsegv(int sig);
extern int force_sig_info(struct kernel_siginfo *);
extern int __kill_pgrp_info(int sig, struct kernel_siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct kernel_siginfo *info, struct pid *pid);
extern int kill_pid_usb_asyncio(int sig, int errno, sigval_t addr, struct pid *,
    const struct cred *);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern __attribute__((__warn_unused_result__)) bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int restart_syscall(void)
{
 set_tsk_thread_flag(get_current(), 0);
 return -513;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,0)), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __fatal_signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fatal_signal_pending(struct task_struct *p)
{
 return signal_pending(p) && __fatal_signal_pending(p);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int signal_pending_state(long state, struct task_struct *p)
{
 if (!(state & (0x0001 | 0x0100)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 0x0001) || __fatal_signal_pending(p);
}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);
extern void calculate_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0100 : 0);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 0x0008 : 0);
}

void task_join_group_stop(struct task_struct *task);
# 412 "../include/linux/sched/signal.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_restore_sigmask(void)
{
 set_ti_thread_flag(((struct thread_info *)get_current()), 20);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_tsk_restore_sigmask(struct task_struct *task)
{
 clear_tsk_thread_flag(task, 20);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_restore_sigmask(void)
{
 clear_ti_thread_flag(((struct thread_info *)get_current()), 20);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_tsk_restore_sigmask(struct task_struct *task)
{
 return test_tsk_thread_flag(task, 20);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_restore_sigmask(void)
{
 return test_ti_thread_flag(((struct thread_info *)get_current()), 20);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool test_and_clear_restore_sigmask(void)
{
 return test_and_clear_ti_thread_flag(((struct thread_info *)get_current()), 20);
}
# 471 "../include/linux/sched/signal.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&get_current()->saved_sigmask);
}

extern int set_user_sigmask(const sigset_t *umask, size_t sigsetsize);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void restore_saved_sigmask_unless(bool interrupted)
{
 if (interrupted)
  ({ int __ret_warn_on = !!(!test_ti_thread_flag(((struct thread_info *)get_current()), 0)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/sched/signal.h\"; .popsection; .long 14472b - 14470b; .short 482; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 else
  restore_saved_sigmask();
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &get_current()->blocked;
 if (__builtin_expect(!!(test_restore_sigmask()), 0))
  res = &get_current()->saved_sigmask;
 return res;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}
# 507 "../include/linux/sched/signal.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int on_sig_stack(unsigned long sp)
{
# 518 "../include/linux/sched/signal.h"
 if (get_current()->sas_ss_flags & (1U << 31))
  return 0;





 return sp > get_current()->sas_ss_sp &&
  sp - get_current()->sas_ss_sp <= get_current()->sas_ss_size;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int sas_ss_flags(unsigned long sp)
{
 if (!get_current()->sas_ss_size)
  return 2;

 return on_sig_stack(sp) ? 1 : 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sas_ss_reset(struct task_struct *p)
{
 p->sas_ss_sp = 0;
 p->sas_ss_size = 0;
 p->sas_ss_flags = 2;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000)), 0) && ! sas_ss_flags(sp))



  return get_current()->sas_ss_sp + get_current()->sas_ss_size;

 return sp;
}

extern void __cleanup_sighand(struct sighand_struct *);
extern void flush_itimer_signals(void);
# 568 "../include/linux/sched/signal.h"
extern bool current_is_single_threaded(void);
# 590 "../include/linux/sched/signal.h"
typedef int (*proc_visitor)(struct task_struct *p, void *data);
void walk_process_tree(struct task_struct *top, proc_visitor, void *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct pid *task_pid_type(struct task_struct *task, enum pid_type type)
{
 struct pid *pid;
 if (type == PIDTYPE_PID)
  pid = task_pid(task);
 else
  pid = task->signal->pids[type];
 return pid;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_tgid(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_TGID];
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_PGID];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid *task_session(struct task_struct *task)
{
 return task->signal->pids[PIDTYPE_SID];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_nr_threads(struct task_struct *task)
{
 return task->signal->nr_threads;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool thread_group_leader(struct task_struct *p)
{
 return p->exit_signal >= 0;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool has_group_leader_pid(struct task_struct *p)
{
 return task_pid(p) == task_tgid(p);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return p1->signal == p2->signal;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *next_thread(const struct task_struct *p)
{
 return ({ void *__mptr = (void *)(({ union { typeof(p->thread_group.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); else __read_once_size_nocheck(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); do { } while (0); __u.__val; })); do { extern void __compiletime_assert_654(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(({ union { typeof(p->thread_group.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); else __read_once_size_nocheck(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); do { } while (0); __u.__val; }))), typeof(((struct task_struct *)0)->thread_group)) && !__builtin_types_compatible_p(typeof(*(({ union { typeof(p->thread_group.next) __val; char __c[1]; } __u; if (1) __read_once_size(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); else __read_once_size_nocheck(&(p->thread_group.next), __u.__c, sizeof(p->thread_group.next)); do { } while (0); __u.__val; }))), typeof(void))))) __compiletime_assert_654(); } while (0); ((struct task_struct *)(__mptr - __builtin_offsetof(struct task_struct, thread_group))); });

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}




extern struct sighand_struct *__lock_task_sighand(struct task_struct *task,
       unsigned long *flags);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct sighand_struct *lock_task_sighand(struct task_struct *task,
             unsigned long *flags)
{
 struct sighand_struct *ret;

 ret = __lock_task_sighand(task, flags);
 (void)(ret);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_task_sighand(struct task_struct *task,
      unsigned long *flags)
{
 spin_unlock_irqrestore(&task->sighand->siglock, *flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit(const struct task_struct *task,
  unsigned int limit)
{
 return ({ union { typeof(task->signal->rlim[limit].rlim_cur) __val; char __c[1]; } __u; if (1) __read_once_size(&(task->signal->rlim[limit].rlim_cur), __u.__c, sizeof(task->signal->rlim[limit].rlim_cur)); else __read_once_size_nocheck(&(task->signal->rlim[limit].rlim_cur), __u.__c, sizeof(task->signal->rlim[limit].rlim_cur)); do { } while (0); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long task_rlimit_max(const struct task_struct *task,
  unsigned int limit)
{
 return ({ union { typeof(task->signal->rlim[limit].rlim_max) __val; char __c[1]; } __u; if (1) __read_once_size(&(task->signal->rlim[limit].rlim_max), __u.__c, sizeof(task->signal->rlim[limit].rlim_max)); else __read_once_size_nocheck(&(task->signal->rlim[limit].rlim_max), __u.__c, sizeof(task->signal->rlim[limit].rlim_max)); do { } while (0); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit(unsigned int limit)
{
 return task_rlimit(get_current(), limit);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max(get_current(), limit);
}
# 8 "../include/linux/ptrace.h" 2


# 1 "../include/linux/pid_namespace.h" 1
# 10 "../include/linux/pid_namespace.h"
# 1 "../include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "../include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 68 "../include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) nsproxy_cache_init(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 11 "../include/linux/pid_namespace.h" 2

# 1 "../include/linux/ns_common.h" 1




struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
};
# 13 "../include/linux/pid_namespace.h" 2



struct fs_pin;

enum {
 HIDEPID_OFF = 0,
 HIDEPID_NO_ACCESS = 1,
 HIDEPID_INVISIBLE = 2,
};

struct pid_namespace {
 struct kref kref;
 struct idr idr;
 struct callback_head rcu;
 unsigned int pid_allocated;
 struct task_struct *child_reaper;
 struct kmem_cache *pid_cachep;
 unsigned int level;
 struct pid_namespace *parent;

 struct vfsmount *proc_mnt;
 struct dentry *proc_self;
 struct dentry *proc_thread_self;


 struct fs_pin *bacct;

 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct work_struct proc_work;
 kgid_t pid_gid;
 int hide_pid;
 int reboot;
 struct ns_common ns;
} ;

extern struct pid_namespace init_pid_ns;




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *get_pid_ns(struct pid_namespace *ns)
{
 if (ns != &init_pid_ns)
  kref_get(&ns->kref);
 return ns;
}

extern struct pid_namespace *copy_pid_ns(unsigned long flags,
 struct user_namespace *user_ns, struct pid_namespace *ns);
extern void zap_pid_ns_processes(struct pid_namespace *pid_ns);
extern int reboot_pid_ns(struct pid_namespace *pid_ns, int cmd);
extern void put_pid_ns(struct pid_namespace *ns);
# 99 "../include/linux/pid_namespace.h"
extern struct pid_namespace *task_active_pid_ns(struct task_struct *tsk);
void pidhash_init(void);
void pid_idr_init(void);
# 11 "../include/linux/ptrace.h" 2
# 1 "../include/uapi/linux/ptrace.h" 1
# 59 "../include/uapi/linux/ptrace.h"
struct ptrace_peeksiginfo_args {
 __u64 off;
 __u32 flags;
 __s32 nr;
};







struct seccomp_metadata {
 __u64 filter_off;
 __u64 flags;
};







struct ptrace_syscall_info {
 __u8 op;
 __u32 arch __attribute__((__aligned__(sizeof(__u32))));
 __u64 instruction_pointer;
 __u64 stack_pointer;
 union {
  struct {
   __u64 nr;
   __u64 args[6];
  } entry;
  struct {
   __s64 rval;
   __u8 is_error;
  } exit;
  struct {
   __u64 nr;
   __u64 args[6];
   __u32 ret_data;
  } seccomp;
 };
};
# 12 "../include/linux/ptrace.h" 2



struct syscall_info {
 __u64 sp;
 struct seccomp_data data;
};

extern int ptrace_access_vm(struct task_struct *tsk, unsigned long addr,
       void *buf, int len, unsigned int gup_flags);
# 56 "../include/linux/ptrace.h"
extern long arch_ptrace(struct task_struct *child, long request,
   unsigned long addr, unsigned long data);
extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);
extern int ptrace_writedata(struct task_struct *tsk, char *src, unsigned long dst, int len);
extern void ptrace_disable(struct task_struct *);
extern int ptrace_request(struct task_struct *child, long request,
     unsigned long addr, unsigned long data);
extern void ptrace_notify(int exit_code);
extern void __ptrace_link(struct task_struct *child,
     struct task_struct *new_parent,
     const struct cred *ptracer_cred);
extern void __ptrace_unlink(struct task_struct *child);
extern void exit_ptrace(struct task_struct *tracer, struct list_head *dead);
# 95 "../include/linux/ptrace.h"
extern bool ptrace_may_access(struct task_struct *task, unsigned int mode);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ptrace_reparented(struct task_struct *child)
{
 return !same_thread_group(child->real_parent, child->parent);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_unlink(struct task_struct *child)
{
 if (__builtin_expect(!!(child->ptrace), 0))
  __ptrace_unlink(child);
}

int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
# 124 "../include/linux/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct task_struct *ptrace_parent(struct task_struct *task)
{
 if (__builtin_expect(!!(task->ptrace), 0))
  return ({ typeof(*(task->parent)) *________p1 = (typeof(*(task->parent)) *)({ union { typeof((task->parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((task->parent)), __u.__c, sizeof((task->parent))); else __read_once_size_nocheck(&((task->parent)), __u.__c, sizeof((task->parent))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(task->parent)) *)(________p1)); });
 return ((void *)0);
}
# 140 "../include/linux/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool ptrace_event_enabled(struct task_struct *task, int event)
{
 return task->ptrace & (1 << (3 + (event)));
}
# 155 "../include/linux/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_event(int event, unsigned long message)
{
 if (__builtin_expect(!!(ptrace_event_enabled(get_current(), event)), 0)) {
  get_current()->ptrace_message = message;
  ptrace_notify((event << 8) | 5);
 } else if (event == 4) {

  if ((get_current()->ptrace & (0x00000001|0x00010000)) == 0x00000001)
   send_sig(5, get_current(), 0);
 }
}
# 178 "../include/linux/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_event_pid(int event, struct pid *pid)
{






 unsigned long message = 0;
 struct pid_namespace *ns;

 rcu_read_lock();
 ns = task_active_pid_ns(({ typeof(*(get_current()->parent)) *________p1 = (typeof(*(get_current()->parent)) *)({ union { typeof((get_current()->parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((get_current()->parent)), __u.__c, sizeof((get_current()->parent))); else __read_once_size_nocheck(&((get_current()->parent)), __u.__c, sizeof((get_current()->parent))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(get_current()->parent)) *)(________p1)); }));
 if (ns)
  message = pid_nr_ns(pid, ns);
 rcu_read_unlock();

 ptrace_event(event, message);
}
# 208 "../include/linux/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_init_task(struct task_struct *child, bool ptrace)
{
 INIT_LIST_HEAD(&child->ptrace_entry);
 INIT_LIST_HEAD(&child->ptraced);
 child->jobctl = 0;
 child->ptrace = 0;
 child->parent = child->real_parent;

 if (__builtin_expect(!!(ptrace), 0) && get_current()->ptrace) {
  child->ptrace = get_current()->ptrace;
  __ptrace_link(child, get_current()->parent, get_current()->ptracer_cred);

  if (child->ptrace & 0x00010000)
   task_set_jobctl_pending(child, (1UL << 19));
  else
   sigaddset(&child->pending.signal, 19);
 }
 else
  child->ptracer_cred = ((void *)0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ptrace_release_task(struct task_struct *task)
{
 do { if (__builtin_expect(!!(!list_empty(&task->ptraced)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 237; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 ptrace_unlink(task);
 do { if (__builtin_expect(!!(!list_empty(&task->ptrace_entry)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 239; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
}
# 313 "../include/linux/ptrace.h"
extern void user_enable_single_step(struct task_struct *);
extern void user_disable_single_step(struct task_struct *);
# 338 "../include/linux/ptrace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_enable_block_step(struct task_struct *task)
{
 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/ptrace.h\"; .popsection; .long 14472b - 14470b; .short 340; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void user_single_step_report(struct pt_regs *regs)
{
 kernel_siginfo_t info;
 clear_siginfo(&info);
 info.si_signo = 5;
 info.si_errno = 0;
 info.si_code = 0;
 info._sifields._kill._pid = 0;
 info._sifields._kill._uid = 0;
 force_sig_info(&info);
}
# 417 "../include/linux/ptrace.h"
extern int task_current_syscall(struct task_struct *target, struct syscall_info *info);

extern void sigaction_compat_abi(struct k_sigaction *act, struct k_sigaction *oact);
# 15 "../arch/arm64/include/asm/kgdb.h" 2
# 1 "../arch/arm64/include/asm/debug-monitors.h" 1
# 69 "../arch/arm64/include/asm/debug-monitors.h"
struct task_struct;






struct step_hook {
 struct list_head node;
 int (*fn)(struct pt_regs *regs, unsigned int esr);
};

void register_user_step_hook(struct step_hook *hook);
void unregister_user_step_hook(struct step_hook *hook);

void register_kernel_step_hook(struct step_hook *hook);
void unregister_kernel_step_hook(struct step_hook *hook);

struct break_hook {
 struct list_head node;
 int (*fn)(struct pt_regs *regs, unsigned int esr);
 u16 imm;
 u16 mask;
};

void register_user_break_hook(struct break_hook *hook);
void unregister_user_break_hook(struct break_hook *hook);

void register_kernel_break_hook(struct break_hook *hook);
void unregister_kernel_break_hook(struct break_hook *hook);

u8 debug_monitors_arch(void);

enum dbg_active_el {
 DBG_ACTIVE_EL0 = 0,
 DBG_ACTIVE_EL1,
};

void enable_debug_monitors(enum dbg_active_el el);
void disable_debug_monitors(enum dbg_active_el el);

void user_rewind_single_step(struct task_struct *task);
void user_fastforward_single_step(struct task_struct *task);

void kernel_enable_single_step(struct pt_regs *regs);
void kernel_disable_single_step(void);
int kernel_active_single_step(void);


int reinstall_suspended_bps(struct pt_regs *regs);







int aarch32_break_handler(struct pt_regs *regs);
# 16 "../arch/arm64/include/asm/kgdb.h" 2



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_kgdb_breakpoint(void)
{
 asm ("brk %0" : : "I" (0x401));
}

extern void kgdb_handle_bus_error(void);
extern int kgdb_fault_expected;
# 21 "../include/linux/kgdb.h" 2
# 30 "../drivers/gpu/drm/amd/amdgpu/../display/dc/os_types.h" 2







# 1 "../drivers/gpu/drm/amd/amdgpu/../include/cgs_common.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../include/cgs_common.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/amd_shared.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../include/amd_shared.h"
# 1 "../include/drm/amd_asic_type.h" 1
# 28 "../include/drm/amd_asic_type.h"
enum amd_asic_type {
 CHIP_TAHITI = 0,
 CHIP_PITCAIRN,
 CHIP_VERDE,
 CHIP_OLAND,
 CHIP_HAINAN,
 CHIP_BONAIRE,
 CHIP_KAVERI,
 CHIP_KABINI,
 CHIP_HAWAII,
 CHIP_MULLINS,
 CHIP_TOPAZ,
 CHIP_TONGA,
 CHIP_FIJI,
 CHIP_CARRIZO,
 CHIP_STONEY,
 CHIP_POLARIS10,
 CHIP_POLARIS11,
 CHIP_POLARIS12,
 CHIP_VEGAM,
 CHIP_VEGA10,
 CHIP_VEGA12,
 CHIP_VEGA20,
 CHIP_RAVEN,
 CHIP_ARCTURUS,
 CHIP_RENOIR,
 CHIP_NAVI10,
 CHIP_NAVI14,
 CHIP_NAVI12,
 CHIP_LAST,
};
# 27 "../drivers/gpu/drm/amd/amdgpu/../include/amd_shared.h" 2







enum amd_chip_flags {
 AMD_ASIC_MASK = 0x0000ffffUL,
 AMD_FLAGS_MASK = 0xffff0000UL,
 AMD_IS_MOBILITY = 0x00010000UL,
 AMD_IS_APU = 0x00020000UL,
 AMD_IS_PX = 0x00040000UL,
 AMD_EXP_HW_SUPPORT = 0x00080000UL,
};

enum amd_ip_block_type {
 AMD_IP_BLOCK_TYPE_COMMON,
 AMD_IP_BLOCK_TYPE_GMC,
 AMD_IP_BLOCK_TYPE_IH,
 AMD_IP_BLOCK_TYPE_SMC,
 AMD_IP_BLOCK_TYPE_PSP,
 AMD_IP_BLOCK_TYPE_DCE,
 AMD_IP_BLOCK_TYPE_GFX,
 AMD_IP_BLOCK_TYPE_SDMA,
 AMD_IP_BLOCK_TYPE_UVD,
 AMD_IP_BLOCK_TYPE_VCE,
 AMD_IP_BLOCK_TYPE_ACP,
 AMD_IP_BLOCK_TYPE_VCN,
 AMD_IP_BLOCK_TYPE_MES
};

enum amd_clockgating_state {
 AMD_CG_STATE_GATE = 0,
 AMD_CG_STATE_UNGATE,
};


enum amd_powergating_state {
 AMD_PG_STATE_GATE = 0,
 AMD_PG_STATE_UNGATE,
};
# 121 "../drivers/gpu/drm/amd/amdgpu/../include/amd_shared.h"
enum PP_FEATURE_MASK {
 PP_SCLK_DPM_MASK = 0x1,
 PP_MCLK_DPM_MASK = 0x2,
 PP_PCIE_DPM_MASK = 0x4,
 PP_SCLK_DEEP_SLEEP_MASK = 0x8,
 PP_POWER_CONTAINMENT_MASK = 0x10,
 PP_UVD_HANDSHAKE_MASK = 0x20,
 PP_SMC_VOLTAGE_CONTROL_MASK = 0x40,
 PP_VBI_TIME_SUPPORT_MASK = 0x80,
 PP_ULV_MASK = 0x100,
 PP_ENABLE_GFX_CG_THRU_SMU = 0x200,
 PP_CLOCK_STRETCH_MASK = 0x400,
 PP_OD_FUZZY_FAN_CONTROL_MASK = 0x800,
 PP_SOCCLK_DPM_MASK = 0x1000,
 PP_DCEFCLK_DPM_MASK = 0x2000,
 PP_OVERDRIVE_MASK = 0x4000,
 PP_GFXOFF_MASK = 0x8000,
 PP_ACG_MASK = 0x10000,
 PP_STUTTER_MODE = 0x20000,
 PP_AVFS_MASK = 0x40000,
};

enum DC_FEATURE_MASK {
 DC_FBC_MASK = 0x1,
 DC_MULTI_MON_PP_MCLK_SWITCH_MASK = 0x2,
};

enum amd_dpm_forced_level;



struct amd_ip_funcs {

 char *name;






 int (*early_init)(void *handle);

 int (*late_init)(void *handle);

 int (*sw_init)(void *handle);

 int (*sw_fini)(void *handle);

 int (*hw_init)(void *handle);

 int (*hw_fini)(void *handle);

 void (*late_fini)(void *handle);

 int (*suspend)(void *handle);

 int (*resume)(void *handle);

 bool (*is_idle)(void *handle);

 int (*wait_for_idle)(void *handle);

 bool (*check_soft_reset)(void *handle);

 int (*pre_soft_reset)(void *handle);

 int (*soft_reset)(void *handle);

 int (*post_soft_reset)(void *handle);

 int (*set_clockgating_state)(void *handle,
         enum amd_clockgating_state state);

 int (*set_powergating_state)(void *handle,
         enum amd_powergating_state state);

 void (*get_clockgating_state)(void *handle, u32 *flags);

 int (*enable_umd_pstate)(void *handle, enum amd_dpm_forced_level *level);
};
# 28 "../drivers/gpu/drm/amd/amdgpu/../include/cgs_common.h" 2

struct cgs_device;




enum cgs_ind_reg {
 CGS_IND_REG__MMIO,
 CGS_IND_REG__PCIE,
 CGS_IND_REG__SMC,
 CGS_IND_REG__UVD_CTX,
 CGS_IND_REG__DIDT,
 CGS_IND_REG_GC_CAC,
 CGS_IND_REG_SE_CAC,
 CGS_IND_REG__AUDIO_ENDPT
};




enum cgs_ucode_id {
 CGS_UCODE_ID_SMU = 0,
 CGS_UCODE_ID_SMU_SK,
 CGS_UCODE_ID_SDMA0,
 CGS_UCODE_ID_SDMA1,
 CGS_UCODE_ID_CP_CE,
 CGS_UCODE_ID_CP_PFP,
 CGS_UCODE_ID_CP_ME,
 CGS_UCODE_ID_CP_MEC,
 CGS_UCODE_ID_CP_MEC_JT1,
 CGS_UCODE_ID_CP_MEC_JT2,
 CGS_UCODE_ID_GMCON_RENG,
 CGS_UCODE_ID_RLC_G,
 CGS_UCODE_ID_STORAGE,
 CGS_UCODE_ID_MAXIMUM,
};




struct cgs_firmware_info {
 uint16_t version;
 uint16_t fw_version;
 uint16_t feature_version;
 uint32_t image_size;
 uint64_t mc_addr;


 uint32_t ucode_start_address;

 void *kptr;
 bool is_kicker;
};

typedef unsigned long cgs_handle_t;
# 91 "../drivers/gpu/drm/amd/amdgpu/../include/cgs_common.h"
typedef uint32_t (*cgs_read_register_t)(struct cgs_device *cgs_device, unsigned offset);







typedef void (*cgs_write_register_t)(struct cgs_device *cgs_device, unsigned offset,
         uint32_t value);
# 109 "../drivers/gpu/drm/amd/amdgpu/../include/cgs_common.h"
typedef uint32_t (*cgs_read_ind_register_t)(struct cgs_device *cgs_device, enum cgs_ind_reg space,
         unsigned index);







typedef void (*cgs_write_ind_register_t)(struct cgs_device *cgs_device, enum cgs_ind_reg space,
      unsigned index, uint32_t value);
# 137 "../drivers/gpu/drm/amd/amdgpu/../include/cgs_common.h"
typedef int (*cgs_get_firmware_info)(struct cgs_device *cgs_device,
         enum cgs_ucode_id type,
         struct cgs_firmware_info *info);

struct cgs_ops {

 cgs_read_register_t read_register;
 cgs_write_register_t write_register;
 cgs_read_ind_register_t read_ind_register;
 cgs_write_ind_register_t write_ind_register;

 cgs_get_firmware_info get_firmware_info;
};

struct cgs_os_ops;

struct cgs_device
{
 const struct cgs_ops *ops;

};
# 38 "../drivers/gpu/drm/amd/amdgpu/../display/dc/os_types.h" 2
# 30 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_services_types.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h" 1
# 57 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 {
 long long value;
};







static const struct fixed31_32 dc_fixpt_zero = { 0 };
static const struct fixed31_32 dc_fixpt_epsilon = { 1LL };
static const struct fixed31_32 dc_fixpt_half = { 0x80000000LL };
static const struct fixed31_32 dc_fixpt_one = { 0x100000000LL };

static const struct fixed31_32 dc_fixpt_pi = { 13493037705LL };
static const struct fixed31_32 dc_fixpt_two_pi = { 26986075409LL };
static const struct fixed31_32 dc_fixpt_e = { 11674931555LL };
static const struct fixed31_32 dc_fixpt_ln2 = { 2977044471LL };
static const struct fixed31_32 dc_fixpt_ln2_div_2 = { 1488522236LL };
# 87 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_from_fraction(long long numerator, long long denominator);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_from_int(int arg)
{
 struct fixed31_32 res;

 res.value = (long long) arg << 32;

 return res;
}
# 111 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_neg(struct fixed31_32 arg)
{
 struct fixed31_32 res;

 res.value = -arg.value;

 return res;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_abs(struct fixed31_32 arg)
{
 if (arg.value < 0)
  return dc_fixpt_neg(arg);
 else
  return arg;
}
# 141 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_fixpt_lt(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 return arg1.value < arg2.value;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_fixpt_le(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 return arg1.value <= arg2.value;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_fixpt_eq(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 return arg1.value == arg2.value;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_min(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 if (arg1.value <= arg2.value)
  return arg1;
 else
  return arg2;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_max(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 if (arg1.value <= arg2.value)
  return arg2;
 else
  return arg1;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_clamp(
 struct fixed31_32 arg,
 struct fixed31_32 min_value,
 struct fixed31_32 max_value)
{
 if (dc_fixpt_le(arg, min_value))
  return min_value;
 else if (dc_fixpt_le(max_value, arg))
  return max_value;
 else
  return arg;
}
# 216 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_shl(struct fixed31_32 arg, unsigned char shift)
{
 ({ int __ret_warn_on = !!(!(((arg.value >= 0) && (arg.value <= ((long long)(~0ULL >> 1)) >> shift)) || ((arg.value < 0) && (arg.value >= ~(((long long)(~0ULL >> 1)) >> shift))))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h\"; .popsection; .long 14472b - 14470b; .short 219; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });


 arg.value = arg.value << shift;

 return arg;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_shr(struct fixed31_32 arg, unsigned char shift)
{
 bool negative = arg.value < 0;

 if (negative)
  arg.value = -arg.value;
 arg.value = arg.value >> shift;
 if (negative)
  arg.value = -arg.value;
 return arg;
}
# 251 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_add(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 struct fixed31_32 res;

 ({ int __ret_warn_on = !!(!(((arg1.value >= 0) && (((long long)(~0ULL >> 1)) - arg1.value >= arg2.value)) || ((arg1.value < 0) && ((-((long long)(~0ULL >> 1)) - 1) - arg1.value <= arg2.value)))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h\"; .popsection; .long 14472b - 14470b; .short 256; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });


 res.value = arg1.value + arg2.value;

 return res;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_add_int(struct fixed31_32 arg1, int arg2)
{
 return dc_fixpt_add(arg1, dc_fixpt_from_int(arg2));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_sub(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 struct fixed31_32 res;

 ({ int __ret_warn_on = !!(!(((arg2.value >= 0) && ((-((long long)(~0ULL >> 1)) - 1) + arg2.value <= arg1.value)) || ((arg2.value < 0) && (((long long)(~0ULL >> 1)) + arg2.value >= arg1.value)))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h\"; .popsection; .long 14472b - 14470b; .short 281; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });


 res.value = arg1.value - arg2.value;

 return res;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_sub_int(struct fixed31_32 arg1, int arg2)
{
 return dc_fixpt_sub(arg1, dc_fixpt_from_int(arg2));
}
# 307 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_mul(struct fixed31_32 arg1, struct fixed31_32 arg2);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_mul_int(struct fixed31_32 arg1, int arg2)
{
 return dc_fixpt_mul(arg1, dc_fixpt_from_int(arg2));
}





struct fixed31_32 dc_fixpt_sqr(struct fixed31_32 arg);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_div_int(struct fixed31_32 arg1, long long arg2)
{
 return dc_fixpt_from_fraction(arg1.value, dc_fixpt_from_int(arg2).value);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_div(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 return dc_fixpt_from_fraction(arg1.value, arg2.value);
}
# 355 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_recip(struct fixed31_32 arg);
# 370 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_sinc(struct fixed31_32 arg);
# 380 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_sin(struct fixed31_32 arg);
# 392 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_cos(struct fixed31_32 arg);
# 406 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_exp(struct fixed31_32 arg);
# 418 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
struct fixed31_32 dc_fixpt_log(struct fixed31_32 arg);
# 432 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_pow(struct fixed31_32 arg1, struct fixed31_32 arg2)
{
 return dc_fixpt_exp(
  dc_fixpt_mul(
   dc_fixpt_log(arg1),
   arg2));
}
# 449 "../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dc_fixpt_floor(struct fixed31_32 arg)
{
 unsigned long long arg_value = arg.value > 0 ? arg.value : -arg.value;

 if (arg.value >= 0)
  return (int)(arg_value >> 32);
 else
  return -(int)(arg_value >> 32);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dc_fixpt_round(struct fixed31_32 arg)
{
 unsigned long long arg_value = arg.value > 0 ? arg.value : -arg.value;

 const long long summand = dc_fixpt_half.value;

 ({ int __ret_warn_on = !!(!(((long long)(~0ULL >> 1)) - (long long)arg_value >= summand)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h\"; .popsection; .long 14472b - 14470b; .short 469; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 arg_value += summand;

 if (arg.value >= 0)
  return (int)(arg_value >> 32);
 else
  return -(int)(arg_value >> 32);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int dc_fixpt_ceil(struct fixed31_32 arg)
{
 unsigned long long arg_value = arg.value > 0 ? arg.value : -arg.value;

 const long long summand = dc_fixpt_one.value -
  dc_fixpt_epsilon.value;

 ({ int __ret_warn_on = !!(!(((long long)(~0ULL >> 1)) - (long long)arg_value >= summand)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h\"; .popsection; .long 14472b - 14470b; .short 490; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 arg_value += summand;

 if (arg.value >= 0)
  return (int)(arg_value >> 32);
 else
  return -(int)(arg_value >> 32);
}







unsigned int dc_fixpt_u4d19(struct fixed31_32 arg);

unsigned int dc_fixpt_u3d19(struct fixed31_32 arg);

unsigned int dc_fixpt_u2d19(struct fixed31_32 arg);

unsigned int dc_fixpt_u0d19(struct fixed31_32 arg);

unsigned int dc_fixpt_clamp_u0d14(struct fixed31_32 arg);

unsigned int dc_fixpt_clamp_u0d10(struct fixed31_32 arg);

int dc_fixpt_s4d19(struct fixed31_32 arg);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fixed31_32 dc_fixpt_truncate(struct fixed31_32 arg, unsigned int frac_bits)
{
 bool negative = arg.value < 0;

 if (frac_bits >= 32) {
  ({ int __ret_warn_on = !!(!(frac_bits == 32)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../display/include/fixed31_32.h\"; .popsection; .long 14472b - 14470b; .short 525; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
  return arg;
 }

 if (negative)
  arg.value = -arg.value;
 arg.value &= (~0LL) << (32 - frac_bits);
 if (negative)
  arg.value = -arg.value;
 return arg;
}
# 30 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/irq_types.h" 1
# 31 "../drivers/gpu/drm/amd/amdgpu/../display/dc/irq_types.h"
struct dc_context;

typedef void (*interrupt_handler)(void *);

typedef void *irq_handler_idx;




enum dc_irq_source {

 DC_IRQ_SOURCE_INVALID = 0,

 DC_IRQ_SOURCE_HPD1,
 DC_IRQ_SOURCE_HPD2,
 DC_IRQ_SOURCE_HPD3,
 DC_IRQ_SOURCE_HPD4,
 DC_IRQ_SOURCE_HPD5,
 DC_IRQ_SOURCE_HPD6,

 DC_IRQ_SOURCE_HPD1RX,
 DC_IRQ_SOURCE_HPD2RX,
 DC_IRQ_SOURCE_HPD3RX,
 DC_IRQ_SOURCE_HPD4RX,
 DC_IRQ_SOURCE_HPD5RX,
 DC_IRQ_SOURCE_HPD6RX,

 DC_IRQ_SOURCE_I2C_DDC1,
 DC_IRQ_SOURCE_I2C_DDC2,
 DC_IRQ_SOURCE_I2C_DDC3,
 DC_IRQ_SOURCE_I2C_DDC4,
 DC_IRQ_SOURCE_I2C_DDC5,
 DC_IRQ_SOURCE_I2C_DDC6,

 DC_IRQ_SOURCE_DPSINK1,
 DC_IRQ_SOURCE_DPSINK2,
 DC_IRQ_SOURCE_DPSINK3,
 DC_IRQ_SOURCE_DPSINK4,
 DC_IRQ_SOURCE_DPSINK5,
 DC_IRQ_SOURCE_DPSINK6,

 DC_IRQ_SOURCE_TIMER,

 DC_IRQ_SOURCE_PFLIP_FIRST,
 DC_IRQ_SOURCE_PFLIP1 = DC_IRQ_SOURCE_PFLIP_FIRST,
 DC_IRQ_SOURCE_PFLIP2,
 DC_IRQ_SOURCE_PFLIP3,
 DC_IRQ_SOURCE_PFLIP4,
 DC_IRQ_SOURCE_PFLIP5,
 DC_IRQ_SOURCE_PFLIP6,
 DC_IRQ_SOURCE_PFLIP_UNDERLAY0,
 DC_IRQ_SOURCE_PFLIP_LAST = DC_IRQ_SOURCE_PFLIP_UNDERLAY0,

 DC_IRQ_SOURCE_GPIOPAD0,
 DC_IRQ_SOURCE_GPIOPAD1,
 DC_IRQ_SOURCE_GPIOPAD2,
 DC_IRQ_SOURCE_GPIOPAD3,
 DC_IRQ_SOURCE_GPIOPAD4,
 DC_IRQ_SOURCE_GPIOPAD5,
 DC_IRQ_SOURCE_GPIOPAD6,
 DC_IRQ_SOURCE_GPIOPAD7,
 DC_IRQ_SOURCE_GPIOPAD8,
 DC_IRQ_SOURCE_GPIOPAD9,
 DC_IRQ_SOURCE_GPIOPAD10,
 DC_IRQ_SOURCE_GPIOPAD11,
 DC_IRQ_SOURCE_GPIOPAD12,
 DC_IRQ_SOURCE_GPIOPAD13,
 DC_IRQ_SOURCE_GPIOPAD14,
 DC_IRQ_SOURCE_GPIOPAD15,
 DC_IRQ_SOURCE_GPIOPAD16,
 DC_IRQ_SOURCE_GPIOPAD17,
 DC_IRQ_SOURCE_GPIOPAD18,
 DC_IRQ_SOURCE_GPIOPAD19,
 DC_IRQ_SOURCE_GPIOPAD20,
 DC_IRQ_SOURCE_GPIOPAD21,
 DC_IRQ_SOURCE_GPIOPAD22,
 DC_IRQ_SOURCE_GPIOPAD23,
 DC_IRQ_SOURCE_GPIOPAD24,
 DC_IRQ_SOURCE_GPIOPAD25,
 DC_IRQ_SOURCE_GPIOPAD26,
 DC_IRQ_SOURCE_GPIOPAD27,
 DC_IRQ_SOURCE_GPIOPAD28,
 DC_IRQ_SOURCE_GPIOPAD29,
 DC_IRQ_SOURCE_GPIOPAD30,

 DC_IRQ_SOURCE_DC1UNDERFLOW,
 DC_IRQ_SOURCE_DC2UNDERFLOW,
 DC_IRQ_SOURCE_DC3UNDERFLOW,
 DC_IRQ_SOURCE_DC4UNDERFLOW,
 DC_IRQ_SOURCE_DC5UNDERFLOW,
 DC_IRQ_SOURCE_DC6UNDERFLOW,

 DC_IRQ_SOURCE_DMCU_SCP,
 DC_IRQ_SOURCE_VBIOS_SW,

 DC_IRQ_SOURCE_VUPDATE1,
 DC_IRQ_SOURCE_VUPDATE2,
 DC_IRQ_SOURCE_VUPDATE3,
 DC_IRQ_SOURCE_VUPDATE4,
 DC_IRQ_SOURCE_VUPDATE5,
 DC_IRQ_SOURCE_VUPDATE6,

 DC_IRQ_SOURCE_VBLANK1,
 DC_IRQ_SOURCE_VBLANK2,
 DC_IRQ_SOURCE_VBLANK3,
 DC_IRQ_SOURCE_VBLANK4,
 DC_IRQ_SOURCE_VBLANK5,
 DC_IRQ_SOURCE_VBLANK6,

 DC_IRQ_SOURCE_DC1_VLINE0,
 DC_IRQ_SOURCE_DC2_VLINE0,
 DC_IRQ_SOURCE_DC3_VLINE0,
 DC_IRQ_SOURCE_DC4_VLINE0,
 DC_IRQ_SOURCE_DC5_VLINE0,
 DC_IRQ_SOURCE_DC6_VLINE0,

 DC_IRQ_SOURCE_DC1_VLINE1,
 DC_IRQ_SOURCE_DC2_VLINE1,
 DC_IRQ_SOURCE_DC3_VLINE1,
 DC_IRQ_SOURCE_DC4_VLINE1,
 DC_IRQ_SOURCE_DC5_VLINE1,
 DC_IRQ_SOURCE_DC6_VLINE1,


 DAL_IRQ_SOURCES_NUMBER
};

enum irq_type
{
 IRQ_TYPE_PFLIP = DC_IRQ_SOURCE_PFLIP1,
 IRQ_TYPE_VUPDATE = DC_IRQ_SOURCE_VUPDATE1,
 IRQ_TYPE_VBLANK = DC_IRQ_SOURCE_VBLANK1,
};
# 173 "../drivers/gpu/drm/amd/amdgpu/../display/dc/irq_types.h"
enum dc_interrupt_context {
 INTERRUPT_LOW_IRQ_CONTEXT = 0,
 INTERRUPT_HIGH_IRQ_CONTEXT,
 INTERRUPT_CONTEXT_NUMBER
};

enum dc_interrupt_porlarity {
 INTERRUPT_POLARITY_DEFAULT = 0,
 INTERRUPT_POLARITY_LOW = INTERRUPT_POLARITY_DEFAULT,
 INTERRUPT_POLARITY_HIGH,
 INTERRUPT_POLARITY_BOTH
};






struct dc_timer_interrupt_params {
 uint32_t micro_sec_interval;
 enum dc_interrupt_context int_context;
};

struct dc_interrupt_params {



 enum dc_interrupt_porlarity requested_polarity;




 enum dc_interrupt_porlarity current_polarity;
 enum dc_irq_source irq_source;
 enum dc_interrupt_context int_context;
};
# 31 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_dp_types.h" 1
# 31 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_dp_types.h"
enum dc_lane_count {
 LANE_COUNT_UNKNOWN = 0,
 LANE_COUNT_ONE = 1,
 LANE_COUNT_TWO = 2,
 LANE_COUNT_FOUR = 4,
 LANE_COUNT_EIGHT = 8,
 LANE_COUNT_DP_MAX = LANE_COUNT_FOUR
};
# 47 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_dp_types.h"
enum dc_link_rate {
 LINK_RATE_UNKNOWN = 0,
 LINK_RATE_LOW = 0x06,
 LINK_RATE_RATE_2 = 0x08,
 LINK_RATE_RATE_3 = 0x09,
 LINK_RATE_HIGH = 0x0A,
 LINK_RATE_RBR2 = 0x0C,
 LINK_RATE_RATE_6 = 0x10,
 LINK_RATE_HIGH2 = 0x14,
 LINK_RATE_HIGH3 = 0x1E
};

enum dc_link_spread {
 LINK_SPREAD_DISABLED = 0x00,

 LINK_SPREAD_05_DOWNSPREAD_30KHZ = 0x10,

 LINK_SPREAD_05_DOWNSPREAD_33KHZ = 0x11
};

enum dc_voltage_swing {
 VOLTAGE_SWING_LEVEL0 = 0,
 VOLTAGE_SWING_LEVEL1,
 VOLTAGE_SWING_LEVEL2,
 VOLTAGE_SWING_LEVEL3,
 VOLTAGE_SWING_MAX_LEVEL = VOLTAGE_SWING_LEVEL3
};

enum dc_pre_emphasis {
 PRE_EMPHASIS_DISABLED = 0,
 PRE_EMPHASIS_LEVEL1,
 PRE_EMPHASIS_LEVEL2,
 PRE_EMPHASIS_LEVEL3,
 PRE_EMPHASIS_MAX_LEVEL = PRE_EMPHASIS_LEVEL3
};



enum dc_post_cursor2 {
 POST_CURSOR2_DISABLED = 0,
 POST_CURSOR2_LEVEL1,
 POST_CURSOR2_LEVEL2,
 POST_CURSOR2_LEVEL3,
 POST_CURSOR2_MAX_LEVEL = POST_CURSOR2_LEVEL3,
};

enum dc_dp_training_pattern {
 DP_TRAINING_PATTERN_SEQUENCE_1 = 0,
 DP_TRAINING_PATTERN_SEQUENCE_2,
 DP_TRAINING_PATTERN_SEQUENCE_3,
 DP_TRAINING_PATTERN_SEQUENCE_4,
};

struct dc_link_settings {
 enum dc_lane_count lane_count;
 enum dc_link_rate link_rate;
 enum dc_link_spread link_spread;
 bool use_link_rate_set;
 uint8_t link_rate_set;
};

struct dc_lane_settings {
 enum dc_voltage_swing VOLTAGE_SWING;
 enum dc_pre_emphasis PRE_EMPHASIS;
 enum dc_post_cursor2 POST_CURSOR2;
};

struct dc_link_training_settings {
 struct dc_link_settings link;
 struct dc_lane_settings lane_settings[LANE_COUNT_DP_MAX];
};

struct dc_link_training_overrides {
 enum dc_voltage_swing *voltage_swing;
 enum dc_pre_emphasis *pre_emphasis;
 enum dc_post_cursor2 *post_cursor2;

 uint16_t *cr_pattern_time;
 uint16_t *eq_pattern_time;
 enum dc_dp_training_pattern *pattern_for_eq;

 enum dc_link_spread *downspread;
 bool *alternate_scrambler_reset;
 bool *enhanced_framing;
 bool *mst_enable;



};

union dpcd_rev {
 struct {
  uint8_t MINOR:4;
  uint8_t MAJOR:4;
 } bits;
 uint8_t raw;
};

union max_lane_count {
 struct {
  uint8_t MAX_LANE_COUNT:5;
  uint8_t POST_LT_ADJ_REQ_SUPPORTED:1;
  uint8_t TPS3_SUPPORTED:1;
  uint8_t ENHANCED_FRAME_CAP:1;
 } bits;
 uint8_t raw;
};

union max_down_spread {
 struct {
  uint8_t MAX_DOWN_SPREAD:1;
  uint8_t RESERVED:5;
  uint8_t NO_AUX_HANDSHAKE_LINK_TRAINING:1;
  uint8_t TPS4_SUPPORTED:1;
 } bits;
 uint8_t raw;
};

union mstm_cap {
 struct {
  uint8_t MST_CAP:1;
  uint8_t RESERVED:7;
 } bits;
 uint8_t raw;
};

union lane_count_set {
 struct {
  uint8_t LANE_COUNT_SET:5;
  uint8_t POST_LT_ADJ_REQ_GRANTED:1;
  uint8_t RESERVED:1;
  uint8_t ENHANCED_FRAMING:1;
 } bits;
 uint8_t raw;
};

union lane_status {
 struct {
  uint8_t CR_DONE_0:1;
  uint8_t CHANNEL_EQ_DONE_0:1;
  uint8_t SYMBOL_LOCKED_0:1;
  uint8_t RESERVED0:1;
  uint8_t CR_DONE_1:1;
  uint8_t CHANNEL_EQ_DONE_1:1;
  uint8_t SYMBOL_LOCKED_1:1;
  uint8_t RESERVED_1:1;
 } bits;
 uint8_t raw;
};

union device_service_irq {
 struct {
  uint8_t REMOTE_CONTROL_CMD_PENDING:1;
  uint8_t AUTOMATED_TEST:1;
  uint8_t CP_IRQ:1;
  uint8_t MCCS_IRQ:1;
  uint8_t DOWN_REP_MSG_RDY:1;
  uint8_t UP_REQ_MSG_RDY:1;
  uint8_t SINK_SPECIFIC:1;
  uint8_t reserved:1;
 } bits;
 uint8_t raw;
};

union sink_count {
 struct {
  uint8_t SINK_COUNT:6;
  uint8_t CPREADY:1;
  uint8_t RESERVED:1;
 } bits;
 uint8_t raw;
};

union lane_align_status_updated {
 struct {
  uint8_t INTERLANE_ALIGN_DONE:1;
  uint8_t POST_LT_ADJ_REQ_IN_PROGRESS:1;
  uint8_t RESERVED:4;
  uint8_t DOWNSTREAM_PORT_STATUS_CHANGED:1;
  uint8_t LINK_STATUS_UPDATED:1;
 } bits;
 uint8_t raw;
};

union lane_adjust {
 struct {
  uint8_t VOLTAGE_SWING_LANE:2;
  uint8_t PRE_EMPHASIS_LANE:2;
  uint8_t RESERVED:4;
 } bits;
 uint8_t raw;
};

union dpcd_training_pattern {
 struct {
  uint8_t TRAINING_PATTERN_SET:4;
  uint8_t RECOVERED_CLOCK_OUT_EN:1;
  uint8_t SCRAMBLING_DISABLE:1;
  uint8_t SYMBOL_ERROR_COUNT_SEL:2;
 } v1_4;
 struct {
  uint8_t TRAINING_PATTERN_SET:2;
  uint8_t LINK_QUAL_PATTERN_SET:2;
  uint8_t RESERVED:4;
 } v1_3;
 uint8_t raw;
};




union dpcd_training_lane {
 struct {
  uint8_t VOLTAGE_SWING_SET:2;
  uint8_t MAX_SWING_REACHED:1;
  uint8_t PRE_EMPHASIS_SET:2;
  uint8_t MAX_PRE_EMPHASIS_REACHED:1;
  uint8_t RESERVED:2;
 } bits;
 uint8_t raw;
};


union dwnstream_port_caps_byte0 {
 struct {
  uint8_t DWN_STRM_PORTX_TYPE:3;
  uint8_t DWN_STRM_PORTX_HPD:1;
  uint8_t RESERVERD:4;
 } bits;
 uint8_t raw;
};


enum dpcd_downstream_port_detailed_type {
 DOWN_STREAM_DETAILED_DP = 0,
 DOWN_STREAM_DETAILED_VGA,
 DOWN_STREAM_DETAILED_DVI,
 DOWN_STREAM_DETAILED_HDMI,
 DOWN_STREAM_DETAILED_NONDDC,
 DOWN_STREAM_DETAILED_DP_PLUS_PLUS
};

union dwnstream_port_caps_byte2 {
 struct {
  uint8_t MAX_BITS_PER_COLOR_COMPONENT:2;
  uint8_t RESERVED:6;
 } bits;
 uint8_t raw;
};

union dp_downstream_port_present {
 uint8_t byte;
 struct {
  uint8_t PORT_PRESENT:1;
  uint8_t PORT_TYPE:2;
  uint8_t FMT_CONVERSION:1;
  uint8_t DETAILED_CAPS:1;
  uint8_t RESERVED:3;
 } fields;
};

union dwnstream_port_caps_byte3_dvi {
 struct {
  uint8_t RESERVED1:1;
  uint8_t DUAL_LINK:1;
  uint8_t HIGH_COLOR_DEPTH:1;
  uint8_t RESERVED2:5;
 } bits;
 uint8_t raw;
};

union dwnstream_port_caps_byte3_hdmi {
 struct {
  uint8_t FRAME_SEQ_TO_FRAME_PACK:1;
  uint8_t YCrCr422_PASS_THROUGH:1;
  uint8_t YCrCr420_PASS_THROUGH:1;
  uint8_t YCrCr422_CONVERSION:1;
  uint8_t YCrCr420_CONVERSION:1;
  uint8_t RESERVED:3;
 } bits;
 uint8_t raw;
};



union dwnstream_portxcaps {
 struct {
  union dwnstream_port_caps_byte0 byte0;
  unsigned char max_TMDS_clock;
  union dwnstream_port_caps_byte2 byte2;

  union {
   union dwnstream_port_caps_byte3_dvi byteDVI;
   union dwnstream_port_caps_byte3_hdmi byteHDMI;
  } byte3;
 } bytes;

 unsigned char raw[4];
};

union downstream_port {
 struct {
  unsigned char present:1;
  unsigned char type:2;
  unsigned char format_conv:1;
  unsigned char detailed_caps:1;
  unsigned char reserved:3;
 } bits;
 unsigned char raw;
};


union sink_status {
 struct {
  uint8_t RX_PORT0_STATUS:1;
  uint8_t RX_PORT1_STATUS:1;
  uint8_t RESERVED:6;
 } bits;
 uint8_t raw;
};



union hpd_irq_data {
 struct {
  union sink_count sink_cnt;
  union device_service_irq device_service_irq;
  union lane_status lane01_status;
  union lane_status lane23_status;
  union lane_align_status_updated lane_status_updated;
  union sink_status sink_status;
 } bytes;
 uint8_t raw[6];
};

union down_stream_port_count {
 struct {
  uint8_t DOWN_STR_PORT_COUNT:4;
  uint8_t RESERVED:2;




  uint8_t IGNORE_MSA_TIMING_PARAM:1;




  uint8_t OUI_SUPPORT:1;
 } bits;
 uint8_t raw;
};

union down_spread_ctrl {
 struct {
  uint8_t RESERVED1:4;




  uint8_t SPREAD_AMP:1;
  uint8_t RESERVED2:2;



  uint8_t IGNORE_MSA_TIMING_PARAM:1;
 } bits;
 uint8_t raw;
};

union dpcd_edp_config {
 struct {
  uint8_t PANEL_MODE_EDP:1;
  uint8_t FRAMING_CHANGE_ENABLE:1;
  uint8_t RESERVED:5;
  uint8_t PANEL_SELF_TEST_ENABLE:1;
 } bits;
 uint8_t raw;
};

struct dp_device_vendor_id {
 uint8_t ieee_oui[3];
 uint8_t ieee_device_id[6];
};

struct dp_sink_hw_fw_revision {
 uint8_t ieee_hw_rev;
 uint8_t ieee_fw_rev[2];
};


union edp_configuration_cap {
 struct {
  uint8_t ALT_SCRAMBLER_RESET:1;
  uint8_t FRAMING_CHANGE:1;
  uint8_t RESERVED:1;
  uint8_t DPCD_DISPLAY_CONTROL_CAPABLE:1;
  uint8_t RESERVED2:4;
 } bits;
 uint8_t raw;
};

union dprx_feature {
 struct {
  uint8_t GTC_CAP:1;
  uint8_t SST_SPLIT_SDP_CAP:1;
  uint8_t AV_SYNC_CAP:1;
  uint8_t VSC_SDP_COLORIMETRY_SUPPORTED:1;
  uint8_t VSC_EXT_VESA_SDP_SUPPORTED:1;
  uint8_t VSC_EXT_VESA_SDP_CHAINING_SUPPORTED:1;
  uint8_t VSC_EXT_CEA_SDP_SUPPORTED:1;
  uint8_t VSC_EXT_CEA_SDP_CHAINING_SUPPORTED:1;
 } bits;
 uint8_t raw;
};

union training_aux_rd_interval {
 struct {
  uint8_t TRAINIG_AUX_RD_INTERVAL:7;
  uint8_t EXT_RECEIVER_CAP_FIELD_PRESENT:1;
 } bits;
 uint8_t raw;
};


union test_request {
 struct {
 uint8_t LINK_TRAINING :1;
 uint8_t LINK_TEST_PATTRN :1;
 uint8_t EDID_READ :1;
 uint8_t PHY_TEST_PATTERN :1;
 uint8_t AUDIO_TEST_PATTERN :1;
 uint8_t RESERVED :1;
 uint8_t TEST_STEREO_3D :1;
 } bits;
 uint8_t raw;
};

union test_response {
 struct {
  uint8_t ACK :1;
  uint8_t NO_ACK :1;
  uint8_t EDID_CHECKSUM_WRITE:1;
  uint8_t RESERVED :5;
 } bits;
 uint8_t raw;
};

union phy_test_pattern {
 struct {



  uint8_t PATTERN :3;

  uint8_t RESERVED :5;
 } bits;
 uint8_t raw;
};


union compliance_test_state {
 struct {
  unsigned char STEREO_3D_RUNNING : 1;
  unsigned char RESERVED : 7;
 } bits;
 unsigned char raw;
};

union link_test_pattern {
 struct {

  unsigned char PATTERN :2;
  unsigned char RESERVED:6;
 } bits;
 unsigned char raw;
};

union test_misc {
 struct dpcd_test_misc_bits {
  unsigned char SYNC_CLOCK :1;

  unsigned char CLR_FORMAT :2;

  unsigned char DYN_RANGE :1;
  unsigned char YCBCR :1;

  unsigned char BPC :3;
 } bits;
 unsigned char raw;
};
# 32 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h" 1
# 31 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/include/signal_types.h" 1
# 34 "../drivers/gpu/drm/amd/amdgpu/../display/include/signal_types.h"
enum signal_type {
 SIGNAL_TYPE_NONE = 0L,
 SIGNAL_TYPE_DVI_SINGLE_LINK = (1 << 0),
 SIGNAL_TYPE_DVI_DUAL_LINK = (1 << 1),
 SIGNAL_TYPE_HDMI_TYPE_A = (1 << 2),
 SIGNAL_TYPE_LVDS = (1 << 3),
 SIGNAL_TYPE_RGB = (1 << 4),
 SIGNAL_TYPE_DISPLAY_PORT = (1 << 5),
 SIGNAL_TYPE_DISPLAY_PORT_MST = (1 << 6),
 SIGNAL_TYPE_EDP = (1 << 7),
 SIGNAL_TYPE_VIRTUAL = (1 << 9),
};


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_hdmi_tmds_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_HDMI_TYPE_A);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_hdmi_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_HDMI_TYPE_A);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_dp_sst_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_DISPLAY_PORT ||
  signal == SIGNAL_TYPE_EDP);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_dp_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_DISPLAY_PORT ||
  signal == SIGNAL_TYPE_EDP ||
  signal == SIGNAL_TYPE_DISPLAY_PORT_MST);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_embedded_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_EDP || signal == SIGNAL_TYPE_LVDS);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_lvds_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_LVDS);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_dvi_signal(enum signal_type signal)
{
 switch (signal) {
 case SIGNAL_TYPE_DVI_SINGLE_LINK:
 case SIGNAL_TYPE_DVI_DUAL_LINK:
  return true;
 break;
 default:
  return false;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_dvi_single_link_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_DVI_SINGLE_LINK);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_dual_link_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_DVI_DUAL_LINK);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_audio_capable_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_DISPLAY_PORT ||
  signal == SIGNAL_TYPE_DISPLAY_PORT_MST ||
  dc_is_hdmi_signal(signal));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dc_is_virtual_signal(enum signal_type signal)
{
 return (signal == SIGNAL_TYPE_VIRTUAL);
}
# 32 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h" 2
# 45 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
union large_integer {
 struct {
  uint32_t low_part;
  int32_t high_part;
 };

 struct {
  uint32_t low_part;
  int32_t high_part;
 } u;

 int64_t quad_part;
};



enum dc_plane_addr_type {
 PLN_ADDR_TYPE_GRAPHICS = 0,
 PLN_ADDR_TYPE_GRPH_STEREO,
 PLN_ADDR_TYPE_VIDEO_PROGRESSIVE,
};

struct dc_plane_address {
 enum dc_plane_addr_type type;
 bool tmz_surface;
 union {
  struct{
   union large_integer addr;
   union large_integer meta_addr;
   union large_integer dcc_const_color;
  } grph;


  struct {
   union large_integer left_addr;
   union large_integer left_meta_addr;
   union large_integer left_dcc_const_color;

   union large_integer right_addr;
   union large_integer right_meta_addr;
   union large_integer right_dcc_const_color;

  } grph_stereo;


  struct {
   union large_integer luma_addr;
   union large_integer luma_meta_addr;
   union large_integer luma_dcc_const_color;

   union large_integer chroma_addr;
   union large_integer chroma_meta_addr;
   union large_integer chroma_dcc_const_color;
  } video_progressive;
 };

 union large_integer page_table_base;

 uint8_t vmid;
};

struct dc_size {
 int width;
 int height;
};

struct rect {
 int x;
 int y;
 int width;
 int height;
};

struct plane_size {




 int surface_pitch;
 int chroma_pitch;
 struct rect surface_size;
 struct rect chroma_size;

 union {
  struct {
   struct rect surface_size;
   int surface_pitch;
  } grph;

  struct {
   struct rect luma_size;
   int luma_pitch;
   struct rect chroma_size;
   int chroma_pitch;
  } video;
 };
};

struct dc_plane_dcc_param {
 bool enable;

 int meta_pitch;
 bool independent_64b_blks;

 int meta_pitch_c;
 bool independent_64b_blks_c;

 union {
  struct {
   int meta_pitch;
   bool independent_64b_blks;
  } grph;

  struct {
   int meta_pitch_l;
   bool independent_64b_blks_l;

   int meta_pitch_c;
   bool independent_64b_blks_c;
  } video;
 };
};


enum surface_pixel_format {
 SURFACE_PIXEL_FORMAT_GRPH_BEGIN = 0,

 SURFACE_PIXEL_FORMAT_GRPH_PALETA_256_COLORS =
  SURFACE_PIXEL_FORMAT_GRPH_BEGIN,

 SURFACE_PIXEL_FORMAT_GRPH_ARGB1555,

 SURFACE_PIXEL_FORMAT_GRPH_RGB565,

 SURFACE_PIXEL_FORMAT_GRPH_ARGB8888,

 SURFACE_PIXEL_FORMAT_GRPH_ABGR8888,

 SURFACE_PIXEL_FORMAT_GRPH_ARGB2101010,

 SURFACE_PIXEL_FORMAT_GRPH_ABGR2101010,



 SURFACE_PIXEL_FORMAT_GRPH_ABGR2101010_XR_BIAS,

 SURFACE_PIXEL_FORMAT_GRPH_ARGB16161616,

 SURFACE_PIXEL_FORMAT_GRPH_ARGB16161616F,

 SURFACE_PIXEL_FORMAT_GRPH_ABGR16161616F,







 SURFACE_PIXEL_FORMAT_VIDEO_BEGIN,
 SURFACE_PIXEL_FORMAT_VIDEO_420_YCbCr =
  SURFACE_PIXEL_FORMAT_VIDEO_BEGIN,
 SURFACE_PIXEL_FORMAT_VIDEO_420_YCrCb,
 SURFACE_PIXEL_FORMAT_VIDEO_420_10bpc_YCbCr,
 SURFACE_PIXEL_FORMAT_VIDEO_420_10bpc_YCrCb,
  SURFACE_PIXEL_FORMAT_SUBSAMPLE_END,




 SURFACE_PIXEL_FORMAT_VIDEO_AYCrCb8888,
 SURFACE_PIXEL_FORMAT_INVALID


};




enum pixel_format {

 PIXEL_FORMAT_UNINITIALIZED,
 PIXEL_FORMAT_INDEX8,
 PIXEL_FORMAT_RGB565,
 PIXEL_FORMAT_ARGB8888,
 PIXEL_FORMAT_ARGB2101010,
 PIXEL_FORMAT_ARGB2101010_XRBIAS,
 PIXEL_FORMAT_FP16,

 PIXEL_FORMAT_420BPP8,
 PIXEL_FORMAT_420BPP10,

 PIXEL_FORMAT_INVALID,

 PIXEL_FORMAT_GRPH_BEGIN = PIXEL_FORMAT_INDEX8,
 PIXEL_FORMAT_GRPH_END = PIXEL_FORMAT_FP16,
 PIXEL_FORMAT_VIDEO_BEGIN = PIXEL_FORMAT_420BPP8,
 PIXEL_FORMAT_VIDEO_END = PIXEL_FORMAT_420BPP10,
 PIXEL_FORMAT_UNKNOWN
};

enum tile_split_values {
 DC_DISPLAY_MICRO_TILING = 0x0,
 DC_THIN_MICRO_TILING = 0x1,
 DC_DEPTH_MICRO_TILING = 0x2,
 DC_ROTATED_MICRO_TILING = 0x3,
};
# 262 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
enum array_mode_values {
 DC_ARRAY_LINEAR_GENERAL = 0,
 DC_ARRAY_LINEAR_ALLIGNED,
 DC_ARRAY_1D_TILED_THIN1,
 DC_ARRAY_1D_TILED_THICK,
 DC_ARRAY_2D_TILED_THIN1,
 DC_ARRAY_PRT_TILED_THIN1,
 DC_ARRAY_PRT_2D_TILED_THIN1,
 DC_ARRAY_2D_TILED_THICK,
 DC_ARRAY_2D_TILED_X_THICK,
 DC_ARRAY_PRT_TILED_THICK,
 DC_ARRAY_PRT_2D_TILED_THICK,
 DC_ARRAY_PRT_3D_TILED_THIN1,
 DC_ARRAY_3D_TILED_THIN1,
 DC_ARRAY_3D_TILED_THICK,
 DC_ARRAY_3D_TILED_X_THICK,
 DC_ARRAY_PRT_3D_TILED_THICK,
};

enum tile_mode_values {
 DC_ADDR_SURF_MICRO_TILING_DISPLAY = 0x0,
 DC_ADDR_SURF_MICRO_TILING_NON_DISPLAY = 0x1,
};

enum swizzle_mode_values {
 DC_SW_LINEAR = 0,
 DC_SW_256B_S = 1,
 DC_SW_256_D = 2,
 DC_SW_256_R = 3,
 DC_SW_4KB_S = 5,
 DC_SW_4KB_D = 6,
 DC_SW_4KB_R = 7,
 DC_SW_64KB_S = 9,
 DC_SW_64KB_D = 10,
 DC_SW_64KB_R = 11,
 DC_SW_VAR_S = 13,
 DC_SW_VAR_D = 14,
 DC_SW_VAR_R = 15,
 DC_SW_64KB_S_T = 17,
 DC_SW_64KB_D_T = 18,
 DC_SW_4KB_S_X = 21,
 DC_SW_4KB_D_X = 22,
 DC_SW_4KB_R_X = 23,
 DC_SW_64KB_S_X = 25,
 DC_SW_64KB_D_X = 26,
 DC_SW_64KB_R_X = 27,
 DC_SW_VAR_S_X = 29,
 DC_SW_VAR_D_X = 30,
 DC_SW_VAR_R_X = 31,
 DC_SW_MAX = 32,
 DC_SW_UNKNOWN = DC_SW_MAX
};

union dc_tiling_info {

 struct {





  unsigned int num_banks;





  unsigned int bank_width;
  unsigned int bank_width_c;





  unsigned int bank_height;
  unsigned int bank_height_c;



  unsigned int tile_aspect;
  unsigned int tile_aspect_c;
# 352 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
  enum tile_split_values tile_split;
  enum tile_split_values tile_split_c;






  enum tile_mode_values tile_mode;
  enum tile_mode_values tile_mode_c;





  unsigned int pipe_config;
# 376 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
  enum array_mode_values array_mode;
 } gfx8;

 struct {
  enum swizzle_mode_values swizzle;
  unsigned int num_pipes;
  unsigned int max_compressed_frags;
  unsigned int pipe_interleave;

  unsigned int num_banks;
  unsigned int num_shader_engines;
  unsigned int num_rb_per_se;
  bool shaderEnable;

  bool meta_linear;
  bool rb_aligned;
  bool pipe_aligned;
 } gfx9;
};


enum dc_rotation_angle {
 ROTATION_ANGLE_0 = 0,
 ROTATION_ANGLE_90,
 ROTATION_ANGLE_180,
 ROTATION_ANGLE_270,
 ROTATION_ANGLE_COUNT
};

enum dc_scan_direction {
 SCAN_DIRECTION_UNKNOWN = 0,
 SCAN_DIRECTION_HORIZONTAL = 1,
 SCAN_DIRECTION_VERTICAL = 2,
};

struct dc_cursor_position {
 uint32_t x;
 uint32_t y;

 uint32_t x_hotspot;
 uint32_t y_hotspot;




 bool enable;

};

struct dc_cursor_mi_param {
 unsigned int pixel_clk_khz;
 unsigned int ref_clk_khz;
 struct rect viewport;
 struct fixed31_32 h_scale_ratio;
 struct fixed31_32 v_scale_ratio;
 enum dc_rotation_angle rotation;
 bool mirror;
};



enum {
 GAMMA_RGB_256_ENTRIES = 256,
 GAMMA_RGB_FLOAT_1024_ENTRIES = 1024,
 GAMMA_CS_TFM_1D_ENTRIES = 4096,
 GAMMA_CUSTOM_ENTRIES = 4096,
 GAMMA_MAX_ENTRIES = 4096
};

enum dc_gamma_type {
 GAMMA_RGB_256 = 1,
 GAMMA_RGB_FLOAT_1024 = 2,
 GAMMA_CS_TFM_1D = 3,
 GAMMA_CUSTOM = 4,
};

struct dc_csc_transform {
 uint16_t matrix[12];
 bool enable_adjustment;
};
# 465 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
struct dc_gamma {
 struct kref refcount;
 enum dc_gamma_type type;
 unsigned int num_entries;

 struct dc_gamma_entries {
  struct fixed31_32 red[GAMMA_MAX_ENTRIES];
  struct fixed31_32 green[GAMMA_MAX_ENTRIES];
  struct fixed31_32 blue[GAMMA_MAX_ENTRIES];
 } entries;


 struct dc_context *ctx;




 bool is_identity;
};
# 493 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
enum dc_cursor_color_format {
 CURSOR_MODE_MONO,
 CURSOR_MODE_COLOR_1BIT_AND,
 CURSOR_MODE_COLOR_PRE_MULTIPLIED_ALPHA,
 CURSOR_MODE_COLOR_UN_PRE_MULTIPLIED_ALPHA,




};







union dc_cursor_attribute_flags {
 struct {
  uint32_t ENABLE_MAGNIFICATION:1;
  uint32_t INVERSE_TRANSPARENT_CLAMPING:1;
  uint32_t HORIZONTAL_MIRROR:1;
  uint32_t VERTICAL_MIRROR:1;
  uint32_t INVERT_PIXEL_DATA:1;
  uint32_t ZERO_EXPANSION:1;
  uint32_t MIN_MAX_INVERT:1;
  uint32_t ENABLE_CURSOR_DEGAMMA:1;
  uint32_t RESERVED:24;
 } bits;
 uint32_t value;
};

struct dc_cursor_attributes {
 union large_integer address;
 uint32_t pitch;


 uint32_t width;
 uint32_t height;

 enum dc_cursor_color_format color_format;
 uint32_t sdr_white_level;


 enum dc_rotation_angle rotation_angle;

 union dc_cursor_attribute_flags attribute_flags;
};

struct dpp_cursor_attributes {
 int bias;
 int scale;
};



enum dc_color_space {
 COLOR_SPACE_UNKNOWN,
 COLOR_SPACE_SRGB,
 COLOR_SPACE_XR_RGB,
 COLOR_SPACE_SRGB_LIMITED,
 COLOR_SPACE_MSREF_SCRGB,
 COLOR_SPACE_YCBCR601,
 COLOR_SPACE_YCBCR709,
 COLOR_SPACE_XV_YCC_709,
 COLOR_SPACE_XV_YCC_601,
 COLOR_SPACE_YCBCR601_LIMITED,
 COLOR_SPACE_YCBCR709_LIMITED,
 COLOR_SPACE_2020_RGB_FULLRANGE,
 COLOR_SPACE_2020_RGB_LIMITEDRANGE,
 COLOR_SPACE_2020_YCBCR,
 COLOR_SPACE_ADOBERGB,
 COLOR_SPACE_DCIP3,
 COLOR_SPACE_DISPLAYNATIVE,
 COLOR_SPACE_DOLBYVISION,
 COLOR_SPACE_APPCTRL,
 COLOR_SPACE_CUSTOMPOINTS,
 COLOR_SPACE_YCBCR709_BLACK,
};

enum dc_dither_option {
 DITHER_OPTION_DEFAULT,
 DITHER_OPTION_DISABLE,
 DITHER_OPTION_FM6,
 DITHER_OPTION_FM8,
 DITHER_OPTION_FM10,
 DITHER_OPTION_SPATIAL6_FRAME_RANDOM,
 DITHER_OPTION_SPATIAL8_FRAME_RANDOM,
 DITHER_OPTION_SPATIAL10_FRAME_RANDOM,
 DITHER_OPTION_SPATIAL6,
 DITHER_OPTION_SPATIAL8,
 DITHER_OPTION_SPATIAL10,
 DITHER_OPTION_TRUN6,
 DITHER_OPTION_TRUN8,
 DITHER_OPTION_TRUN10,
 DITHER_OPTION_TRUN10_SPATIAL8,
 DITHER_OPTION_TRUN10_SPATIAL6,
 DITHER_OPTION_TRUN10_FM8,
 DITHER_OPTION_TRUN10_FM6,
 DITHER_OPTION_TRUN10_SPATIAL8_FM6,
 DITHER_OPTION_SPATIAL10_FM8,
 DITHER_OPTION_SPATIAL10_FM6,
 DITHER_OPTION_TRUN8_SPATIAL6,
 DITHER_OPTION_TRUN8_FM6,
 DITHER_OPTION_SPATIAL8_FM6,
 DITHER_OPTION_MAX = DITHER_OPTION_SPATIAL8_FM6,
 DITHER_OPTION_INVALID
};

enum dc_quantization_range {
 QUANTIZATION_RANGE_UNKNOWN,
 QUANTIZATION_RANGE_FULL,
 QUANTIZATION_RANGE_LIMITED
};




struct scaling_taps {
 uint32_t v_taps;
 uint32_t h_taps;
 uint32_t v_taps_c;
 uint32_t h_taps_c;
 bool integer_scaling;
};

enum dc_timing_standard {
 DC_TIMING_STANDARD_UNDEFINED,
 DC_TIMING_STANDARD_DMT,
 DC_TIMING_STANDARD_GTF,
 DC_TIMING_STANDARD_CVT,
 DC_TIMING_STANDARD_CVT_RB,
 DC_TIMING_STANDARD_CEA770,
 DC_TIMING_STANDARD_CEA861,
 DC_TIMING_STANDARD_HDMI,
 DC_TIMING_STANDARD_TV_NTSC,
 DC_TIMING_STANDARD_TV_NTSC_J,
 DC_TIMING_STANDARD_TV_PAL,
 DC_TIMING_STANDARD_TV_PAL_M,
 DC_TIMING_STANDARD_TV_PAL_CN,
 DC_TIMING_STANDARD_TV_SECAM,
 DC_TIMING_STANDARD_EXPLICIT,

 DC_TIMING_STANDARD_USER_OVERRIDE,

 DC_TIMING_STANDARD_MAX
};

enum dc_color_depth {
 COLOR_DEPTH_UNDEFINED,
 COLOR_DEPTH_666,
 COLOR_DEPTH_888,
 COLOR_DEPTH_101010,
 COLOR_DEPTH_121212,
 COLOR_DEPTH_141414,
 COLOR_DEPTH_161616,




 COLOR_DEPTH_COUNT
};

enum dc_pixel_encoding {
 PIXEL_ENCODING_UNDEFINED,
 PIXEL_ENCODING_RGB,
 PIXEL_ENCODING_YCBCR422,
 PIXEL_ENCODING_YCBCR444,
 PIXEL_ENCODING_YCBCR420,
 PIXEL_ENCODING_COUNT
};

enum dc_aspect_ratio {
 ASPECT_RATIO_NO_DATA,
 ASPECT_RATIO_4_3,
 ASPECT_RATIO_16_9,
 ASPECT_RATIO_64_27,
 ASPECT_RATIO_256_135,
 ASPECT_RATIO_FUTURE
};

enum scanning_type {
 SCANNING_TYPE_NODATA = 0,
 SCANNING_TYPE_OVERSCAN,
 SCANNING_TYPE_UNDERSCAN,
 SCANNING_TYPE_FUTURE,
 SCANNING_TYPE_UNDEFINED
};

struct dc_crtc_timing_flags {
 uint32_t INTERLACE :1;
 uint32_t HSYNC_POSITIVE_POLARITY :1;

 uint32_t VSYNC_POSITIVE_POLARITY :1;


 uint32_t HORZ_COUNT_BY_TWO:1;

 uint32_t EXCLUSIVE_3D :1;


 uint32_t RIGHT_EYE_3D_POLARITY :1;

 uint32_t SUB_SAMPLE_3D :1;

 uint32_t USE_IN_3D_VIEW_ONLY :1;

 uint32_t STEREO_3D_PREFERENCE :1;

 uint32_t Y_ONLY :1;

 uint32_t YCBCR420 :1;
 uint32_t DTD_COUNTER :5;

 uint32_t FORCE_HDR :1;



 uint32_t LTE_340MCSC_SCRAMBLE:1;




};

enum dc_timing_3d_format {
 TIMING_3D_FORMAT_NONE,
 TIMING_3D_FORMAT_FRAME_ALTERNATE,
 TIMING_3D_FORMAT_INBAND_FA,
 TIMING_3D_FORMAT_DP_HDMI_INBAND_FA,

 TIMING_3D_FORMAT_SIDEBAND_FA,
 TIMING_3D_FORMAT_HW_FRAME_PACKING,
 TIMING_3D_FORMAT_SW_FRAME_PACKING,
 TIMING_3D_FORMAT_ROW_INTERLEAVE,
 TIMING_3D_FORMAT_COLUMN_INTERLEAVE,
 TIMING_3D_FORMAT_PIXEL_INTERLEAVE,
 TIMING_3D_FORMAT_SIDE_BY_SIDE,
 TIMING_3D_FORMAT_TOP_AND_BOTTOM,
 TIMING_3D_FORMAT_SBS_SW_PACKED,

 TIMING_3D_FORMAT_TB_SW_PACKED,


 TIMING_3D_FORMAT_MAX,
};

enum trigger_delay {
 TRIGGER_DELAY_NEXT_PIXEL = 0,
 TRIGGER_DELAY_NEXT_LINE,
};

enum crtc_event {
 CRTC_EVENT_VSYNC_RISING = 0,
 CRTC_EVENT_VSYNC_FALLING
};

struct crtc_trigger_info {
 bool enabled;
 struct dc_stream_state *event_source;
 enum crtc_event event;
 enum trigger_delay delay;
};

struct dc_crtc_timing_adjust {
 uint32_t v_total_min;
 uint32_t v_total_max;
 uint32_t v_total_mid;
 uint32_t v_total_mid_frame_num;
};
# 776 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
struct dc_crtc_timing {
 uint32_t h_total;
 uint32_t h_border_left;
 uint32_t h_addressable;
 uint32_t h_border_right;
 uint32_t h_front_porch;
 uint32_t h_sync_width;

 uint32_t v_total;
 uint32_t v_border_top;
 uint32_t v_addressable;
 uint32_t v_border_bottom;
 uint32_t v_front_porch;
 uint32_t v_sync_width;

 uint32_t pix_clk_100hz;

 uint32_t vic;
 uint32_t hdmi_vic;
 enum dc_timing_3d_format timing_3d_format;
 enum dc_color_depth display_color_depth;
 enum dc_pixel_encoding pixel_encoding;
 enum dc_aspect_ratio aspect_ratio;
 enum scanning_type scan_type;

 struct dc_crtc_timing_flags flags;



};


enum vram_type {
 VIDEO_MEMORY_TYPE_GDDR5 = 2,
 VIDEO_MEMORY_TYPE_DDR3 = 3,
 VIDEO_MEMORY_TYPE_DDR4 = 4,
 VIDEO_MEMORY_TYPE_HBM = 5,
 VIDEO_MEMORY_TYPE_GDDR6 = 6,
};
# 870 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_hw_types.h"
struct tg_color {

 uint16_t color_r_cr;
 uint16_t color_g_y;
 uint16_t color_b_cb;
};
# 33 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/include/dal_types.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../display/include/dal_types.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 1
# 31 "../drivers/gpu/drm/amd/amdgpu/../display/include/dal_types.h" 2

struct dal_logger;
struct dc_bios;

enum dce_version {
 DCE_VERSION_UNKNOWN = (-1),
 DCE_VERSION_8_0,
 DCE_VERSION_8_1,
 DCE_VERSION_8_3,
 DCE_VERSION_10_0,
 DCE_VERSION_11_0,
 DCE_VERSION_11_2,
 DCE_VERSION_11_22,
 DCE_VERSION_12_0,
 DCE_VERSION_12_1,
 DCE_VERSION_MAX,
 DCN_VERSION_1_0,
 DCN_VERSION_1_01,






 DCN_VERSION_MAX
};
# 34 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_defs.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_defs.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_id.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_id.h"
enum object_type {
 OBJECT_TYPE_UNKNOWN = 0,


 OBJECT_TYPE_GPU,
 OBJECT_TYPE_ENCODER,
 OBJECT_TYPE_CONNECTOR,
 OBJECT_TYPE_ROUTER,
 OBJECT_TYPE_GENERIC,


 OBJECT_TYPE_AUDIO,
 OBJECT_TYPE_CONTROLLER,
 OBJECT_TYPE_CLOCK_SOURCE,
 OBJECT_TYPE_ENGINE,

 OBJECT_TYPE_COUNT
};


enum object_enum_id {
 ENUM_ID_UNKNOWN = 0,
 ENUM_ID_1,
 ENUM_ID_2,
 ENUM_ID_3,
 ENUM_ID_4,
 ENUM_ID_5,
 ENUM_ID_6,
 ENUM_ID_7,

 ENUM_ID_COUNT
};


enum generic_id {
 GENERIC_ID_UNKNOWN = 0,
 GENERIC_ID_MXM_OPM,
 GENERIC_ID_GLSYNC,
 GENERIC_ID_STEREO,

 GENERIC_ID_COUNT
};


enum controller_id {
 CONTROLLER_ID_UNDEFINED = 0,
 CONTROLLER_ID_D0,
 CONTROLLER_ID_D1,
 CONTROLLER_ID_D2,
 CONTROLLER_ID_D3,
 CONTROLLER_ID_D4,
 CONTROLLER_ID_D5,
 CONTROLLER_ID_UNDERLAY0,
 CONTROLLER_ID_MAX = CONTROLLER_ID_UNDERLAY0
};
# 93 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_id.h"
enum clock_source_id {
 CLOCK_SOURCE_ID_UNDEFINED = 0,
 CLOCK_SOURCE_ID_PLL0,
 CLOCK_SOURCE_ID_PLL1,
 CLOCK_SOURCE_ID_PLL2,
 CLOCK_SOURCE_ID_EXTERNAL,
 CLOCK_SOURCE_ID_DCPLL,
 CLOCK_SOURCE_ID_DFS,
 CLOCK_SOURCE_ID_VCE,

 CLOCK_SOURCE_ID_DP_DTO,

 CLOCK_SOURCE_COMBO_PHY_PLL0,
 CLOCK_SOURCE_COMBO_PHY_PLL1,
 CLOCK_SOURCE_COMBO_PHY_PLL2,
 CLOCK_SOURCE_COMBO_PHY_PLL3,
 CLOCK_SOURCE_COMBO_PHY_PLL4,
 CLOCK_SOURCE_COMBO_PHY_PLL5,
 CLOCK_SOURCE_COMBO_DISPLAY_PLL0
};


enum encoder_id {
 ENCODER_ID_UNKNOWN = 0,


 ENCODER_ID_INTERNAL_LVDS,
 ENCODER_ID_INTERNAL_TMDS1,
 ENCODER_ID_INTERNAL_TMDS2,
 ENCODER_ID_INTERNAL_DAC1,
 ENCODER_ID_INTERNAL_DAC2,


 ENCODER_ID_INTERNAL_LVTM1,
 ENCODER_ID_INTERNAL_HDMI,


 ENCODER_ID_INTERNAL_KLDSCP_TMDS1,
 ENCODER_ID_INTERNAL_KLDSCP_DAC1,
 ENCODER_ID_INTERNAL_KLDSCP_DAC2,

 ENCODER_ID_EXTERNAL_MVPU_FPGA,
 ENCODER_ID_INTERNAL_DDI,
 ENCODER_ID_INTERNAL_UNIPHY,
 ENCODER_ID_INTERNAL_KLDSCP_LVTMA,
 ENCODER_ID_INTERNAL_UNIPHY1,
 ENCODER_ID_INTERNAL_UNIPHY2,
 ENCODER_ID_EXTERNAL_NUTMEG,
 ENCODER_ID_EXTERNAL_TRAVIS,

 ENCODER_ID_INTERNAL_WIRELESS,
 ENCODER_ID_INTERNAL_UNIPHY3,
 ENCODER_ID_INTERNAL_VIRTUAL,
};


enum connector_id {
 CONNECTOR_ID_UNKNOWN = 0,
 CONNECTOR_ID_SINGLE_LINK_DVII = 1,
 CONNECTOR_ID_DUAL_LINK_DVII = 2,
 CONNECTOR_ID_SINGLE_LINK_DVID = 3,
 CONNECTOR_ID_DUAL_LINK_DVID = 4,
 CONNECTOR_ID_VGA = 5,
 CONNECTOR_ID_HDMI_TYPE_A = 12,
 CONNECTOR_ID_LVDS = 14,
 CONNECTOR_ID_PCIE = 16,
 CONNECTOR_ID_HARDCODE_DVI = 18,
 CONNECTOR_ID_DISPLAY_PORT = 19,
 CONNECTOR_ID_EDP = 20,
 CONNECTOR_ID_MXM = 21,
 CONNECTOR_ID_WIRELESS = 22,
 CONNECTOR_ID_MIRACAST = 23,

 CONNECTOR_ID_VIRTUAL = 100
};


enum audio_id {
 AUDIO_ID_UNKNOWN = 0,
 AUDIO_ID_INTERNAL_AZALIA
};


enum engine_id {
 ENGINE_ID_DIGA,
 ENGINE_ID_DIGB,
 ENGINE_ID_DIGC,
 ENGINE_ID_DIGD,
 ENGINE_ID_DIGE,
 ENGINE_ID_DIGF,
 ENGINE_ID_DIGG,
 ENGINE_ID_DACA,
 ENGINE_ID_DACB,
 ENGINE_ID_VCE,
 ENGINE_ID_VIRTUAL,

 ENGINE_ID_COUNT,
 ENGINE_ID_UNKNOWN = (-1L)
};

enum transmitter_color_depth {
 TRANSMITTER_COLOR_DEPTH_24 = 0,
 TRANSMITTER_COLOR_DEPTH_30,
 TRANSMITTER_COLOR_DEPTH_36,
 TRANSMITTER_COLOR_DEPTH_48
};

enum dp_alt_mode {
 DP_Alt_mode__Unknown = 0,
 DP_Alt_mode__Connect,
 DP_Alt_mode__NoConnect,
};
# 220 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_id.h"
struct graphics_object_id {
 uint32_t id:8;
 uint32_t enum_id:4;
 uint32_t type:4;
 uint32_t reserved:16;
};



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct graphics_object_id dal_graphics_object_id_init(
 uint32_t id,
 enum object_enum_id enum_id,
 enum object_type type)
{
 struct graphics_object_id result = {
  id, enum_id, type, 0
 };

 return result;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t dal_graphics_object_id_to_uint(
 struct graphics_object_id id)
{
 return id.id + (id.enum_id << 0x8) + (id.type << 0xc);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum controller_id dal_graphics_object_id_get_controller_id(
 struct graphics_object_id id)
{
 if (id.type == OBJECT_TYPE_CONTROLLER)
  return (enum controller_id) id.id;
 return CONTROLLER_ID_UNDEFINED;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum clock_source_id dal_graphics_object_id_get_clock_source_id(
 struct graphics_object_id id)
{
 if (id.type == OBJECT_TYPE_CLOCK_SOURCE)
  return (enum clock_source_id) id.id;
 return CLOCK_SOURCE_ID_UNDEFINED;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum encoder_id dal_graphics_object_id_get_encoder_id(
 struct graphics_object_id id)
{
 if (id.type == OBJECT_TYPE_ENCODER)
  return (enum encoder_id) id.id;
 return ENCODER_ID_UNKNOWN;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum connector_id dal_graphics_object_id_get_connector_id(
 struct graphics_object_id id)
{
 if (id.type == OBJECT_TYPE_CONNECTOR)
  return (enum connector_id) id.id;
 return CONNECTOR_ID_UNKNOWN;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum audio_id dal_graphics_object_id_get_audio_id(
 struct graphics_object_id id)
{
 if (id.type == OBJECT_TYPE_AUDIO)
  return (enum audio_id) id.id;
 return AUDIO_ID_UNKNOWN;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum engine_id dal_graphics_object_id_get_engine_id(
 struct graphics_object_id id)
{
 if (id.type == OBJECT_TYPE_ENGINE)
  return (enum engine_id) id.id;
 return ENGINE_ID_UNKNOWN;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dal_graphics_object_id_equal(
 struct graphics_object_id id_1,
 struct graphics_object_id id_2)
{
 if ((id_1.id == id_2.id) && (id_1.enum_id == id_2.enum_id) &&
  (id_1.type == id_2.type)) {
  return true;
 }
 return false;
}
# 30 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_defs.h" 2
# 45 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_defs.h"
enum hpd_source_id {
 HPD_SOURCEID1 = 0,
 HPD_SOURCEID2,
 HPD_SOURCEID3,
 HPD_SOURCEID4,
 HPD_SOURCEID5,
 HPD_SOURCEID6,

 HPD_SOURCEID_COUNT,
 HPD_SOURCEID_UNKNOWN
};


enum channel_id {
 CHANNEL_ID_UNKNOWN = 0,
 CHANNEL_ID_DDC1,
 CHANNEL_ID_DDC2,
 CHANNEL_ID_DDC3,
 CHANNEL_ID_DDC4,
 CHANNEL_ID_DDC5,
 CHANNEL_ID_DDC6,
 CHANNEL_ID_DDC_VGA,
 CHANNEL_ID_I2C_PAD,
 CHANNEL_ID_COUNT
};
# 81 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_defs.h"
enum transmitter {
 TRANSMITTER_UNKNOWN = (-1L),
 TRANSMITTER_UNIPHY_A,
 TRANSMITTER_UNIPHY_B,
 TRANSMITTER_UNIPHY_C,
 TRANSMITTER_UNIPHY_D,
 TRANSMITTER_UNIPHY_E,
 TRANSMITTER_UNIPHY_F,
 TRANSMITTER_NUTMEG_CRT,
 TRANSMITTER_TRAVIS_CRT,
 TRANSMITTER_TRAVIS_LCD,
 TRANSMITTER_UNIPHY_G,
 TRANSMITTER_COUNT
};



enum sync_source {
 SYNC_SOURCE_NONE = 0,


 SYNC_SOURCE_CONTROLLER0,
 SYNC_SOURCE_CONTROLLER1,
 SYNC_SOURCE_CONTROLLER2,
 SYNC_SOURCE_CONTROLLER3,
 SYNC_SOURCE_CONTROLLER4,
 SYNC_SOURCE_CONTROLLER5,


 SYNC_SOURCE_GSL_GROUP0,
 SYNC_SOURCE_GSL_GROUP1,
 SYNC_SOURCE_GSL_GROUP2,



 SYNC_SOURCE_GSL_IO_FIRST,
 SYNC_SOURCE_GSL_IO_GENLOCK_CLOCK = SYNC_SOURCE_GSL_IO_FIRST,
 SYNC_SOURCE_GSL_IO_GENLOCK_VSYNC,
 SYNC_SOURCE_GSL_IO_SWAPLOCK_A,
 SYNC_SOURCE_GSL_IO_SWAPLOCK_B,
 SYNC_SOURCE_GSL_IO_LAST = SYNC_SOURCE_GSL_IO_SWAPLOCK_B,


 SYNC_SOURCE_IO_FIRST,
 SYNC_SOURCE_IO_GENERIC_A = SYNC_SOURCE_IO_FIRST,
 SYNC_SOURCE_IO_GENERIC_B,
 SYNC_SOURCE_IO_GENERIC_C,
 SYNC_SOURCE_IO_GENERIC_D,
 SYNC_SOURCE_IO_GENERIC_E,
 SYNC_SOURCE_IO_GENERIC_F,
 SYNC_SOURCE_IO_HPD1,
 SYNC_SOURCE_IO_HPD2,
 SYNC_SOURCE_IO_HSYNC_A,
 SYNC_SOURCE_IO_VSYNC_A,
 SYNC_SOURCE_IO_HSYNC_B,
 SYNC_SOURCE_IO_VSYNC_B,
 SYNC_SOURCE_IO_LAST = SYNC_SOURCE_IO_VSYNC_B,


 SYNC_SOURCE_DUAL_GPU_PIN
};
# 151 "../drivers/gpu/drm/amd/amdgpu/../display/include/grph_object_defs.h"
enum connector_layout_type {
 CONNECTOR_LAYOUT_TYPE_UNKNOWN,
 CONNECTOR_LAYOUT_TYPE_DVI_D,
 CONNECTOR_LAYOUT_TYPE_DVI_I,
 CONNECTOR_LAYOUT_TYPE_VGA,
 CONNECTOR_LAYOUT_TYPE_HDMI,
 CONNECTOR_LAYOUT_TYPE_DP,
 CONNECTOR_LAYOUT_TYPE_MINI_DP,
};
struct connector_layout_info {
 struct graphics_object_id connector_id;
 enum connector_layout_type connector_type;
 unsigned int length;
 unsigned int position;
};


struct slot_layout_info {
 unsigned int length;
 unsigned int width;
 unsigned int num_of_connectors;
 struct connector_layout_info connectors[(16)];
};

struct board_layout_info {
 unsigned int num_of_slots;


 unsigned int is_number_of_slots_valid : 1;
 unsigned int is_slots_size_valid : 1;
 unsigned int is_connector_offsets_valid : 1;
 unsigned int is_connector_lengths_valid : 1;

 struct slot_layout_info slots[(4)];
};
# 35 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 2


struct dc_plane_state;
struct dc_stream_state;
struct dc_link;
struct dc_sink;
struct dal;




enum dce_environment {
 DCE_ENV_PRODUCTION_DRV = 0,



 DCE_ENV_FPGA_MAXIMUS,


 DCE_ENV_DIAG
};
# 64 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h"
struct hw_asic_id {
 uint32_t chip_id;
 uint32_t chip_family;
 uint32_t pci_revision_id;
 uint32_t hw_internal_rev;
 uint32_t vram_type;
 uint32_t vram_width;
 uint32_t feature_flags;
 uint32_t fake_paths_num;
 void *atombios_base_address;
};

struct dc_perf_trace {
 unsigned long read_count;
 unsigned long write_count;
 unsigned long last_entry_read;
 unsigned long last_entry_write;
};

struct dc_context {
 struct dc *dc;

 void *driver_context;
 struct dc_perf_trace *perf_trace;
 void *cgs_device;

 enum dce_environment dce_environment;
 struct hw_asic_id asic_id;




 enum dce_version dce_version;
 struct dc_bios *dc_bios;
 bool created_bios;
 struct gpio_service *gpio_service;
 uint32_t dc_sink_id_count;
 uint32_t dc_stream_id_count;
 uint64_t fbc_gpu_addr;
};








# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_ddc_types.h" 1
# 28 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_ddc_types.h"
enum aux_transaction_type {
 AUX_TRANSACTION_TYPE_DP,
 AUX_TRANSACTION_TYPE_I2C
};


enum i2caux_transaction_action {
 I2CAUX_TRANSACTION_ACTION_I2C_WRITE = 0x00,
 I2CAUX_TRANSACTION_ACTION_I2C_READ = 0x10,
 I2CAUX_TRANSACTION_ACTION_I2C_STATUS_REQUEST = 0x20,

 I2CAUX_TRANSACTION_ACTION_I2C_WRITE_MOT = 0x40,
 I2CAUX_TRANSACTION_ACTION_I2C_READ_MOT = 0x50,
 I2CAUX_TRANSACTION_ACTION_I2C_STATUS_REQUEST_MOT = 0x60,

 I2CAUX_TRANSACTION_ACTION_DP_WRITE = 0x80,
 I2CAUX_TRANSACTION_ACTION_DP_READ = 0x90
};

enum aux_channel_operation_result {
 AUX_CHANNEL_OPERATION_SUCCEEDED,
 AUX_CHANNEL_OPERATION_FAILED_REASON_UNKNOWN,
 AUX_CHANNEL_OPERATION_FAILED_INVALID_REPLY,
 AUX_CHANNEL_OPERATION_FAILED_TIMEOUT,
 AUX_CHANNEL_OPERATION_FAILED_HPD_DISCON
};


struct aux_request_transaction_data {
 enum aux_transaction_type type;
 enum i2caux_transaction_action action;

 uint32_t address;

 uint8_t delay;
 uint32_t length;
 uint8_t *data;
};

enum aux_transaction_reply {
 AUX_TRANSACTION_REPLY_AUX_ACK = 0x00,
 AUX_TRANSACTION_REPLY_AUX_NACK = 0x01,
 AUX_TRANSACTION_REPLY_AUX_DEFER = 0x02,
 AUX_TRANSACTION_REPLY_I2C_OVER_AUX_NACK = 0x04,
 AUX_TRANSACTION_REPLY_I2C_OVER_AUX_DEFER = 0x08,

 AUX_TRANSACTION_REPLY_I2C_ACK = 0x00,
 AUX_TRANSACTION_REPLY_I2C_NACK = 0x10,
 AUX_TRANSACTION_REPLY_I2C_DEFER = 0x20,

 AUX_TRANSACTION_REPLY_HPD_DISCON = 0x40,

 AUX_TRANSACTION_REPLY_INVALID = 0xFF
};

struct aux_reply_transaction_data {
 enum aux_transaction_reply status;
 uint32_t length;
 uint8_t *data;
};

struct i2c_payload {
 bool write;
 uint8_t address;
 uint32_t length;
 uint8_t *data;
};

enum i2c_command_engine {
 I2C_COMMAND_ENGINE_DEFAULT,
 I2C_COMMAND_ENGINE_SW,
 I2C_COMMAND_ENGINE_HW
};

struct i2c_command {
 struct i2c_payload *payloads;
 uint8_t number_of_payloads;

 enum i2c_command_engine engine;



 uint32_t speed;
};

struct gpio_ddc_hw_info {
 bool hw_supported;
 uint32_t ddc_channel;
};

struct ddc {
 struct gpio *pin_data;
 struct gpio *pin_clock;
 struct gpio_ddc_hw_info hw_info;
 struct dc_context *ctx;
};

union ddc_wa {
 struct {
  uint32_t DP_SKIP_POWER_OFF:1;
  uint32_t DP_AUX_POWER_UP_WA_DELAY:1;
 } bits;
 uint32_t raw;
};

struct ddc_flags {
 uint8_t EDID_QUERY_DONE_ONCE:1;
 uint8_t IS_INTERNAL_DISPLAY:1;
 uint8_t FORCE_READ_REPEATED_START:1;
 uint8_t EDID_STRESS_READ:1;

};

enum ddc_transaction_type {
 DDC_TRANSACTION_TYPE_NONE = 0,
 DDC_TRANSACTION_TYPE_I2C,
 DDC_TRANSACTION_TYPE_I2C_OVER_AUX,
 DDC_TRANSACTION_TYPE_I2C_OVER_AUX_WITH_DEFER,
 DDC_TRANSACTION_TYPE_I2C_OVER_AUX_RETRY_DEFER
};

enum display_dongle_type {
 DISPLAY_DONGLE_NONE = 0,

 DISPLAY_DONGLE_DP_VGA_CONVERTER,
 DISPLAY_DONGLE_DP_DVI_CONVERTER,
 DISPLAY_DONGLE_DP_HDMI_CONVERTER,

 DISPLAY_DONGLE_DP_DVI_DONGLE,
 DISPLAY_DONGLE_DP_HDMI_DONGLE,

 DISPLAY_DONGLE_DP_HDMI_MISMATCHED_DONGLE,
};

struct ddc_service {
 struct ddc *ddc_pin;
 struct ddc_flags flags;
 union ddc_wa wa;
 enum ddc_transaction_type transaction_type;
 enum display_dongle_type dongle_type;
 struct dc_context *ctx;
 struct dc_link *link;

 uint32_t address;
 uint32_t edid_buf_len;
 uint8_t edid_buf[1024];
};
# 112 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h" 2

enum tiling_mode {
 TILING_MODE_INVALID,
 TILING_MODE_LINEAR,
 TILING_MODE_TILED,
 TILING_MODE_COUNT
};

enum view_3d_format {
 VIEW_3D_FORMAT_NONE = 0,
 VIEW_3D_FORMAT_FRAME_SEQUENTIAL,
 VIEW_3D_FORMAT_SIDE_BY_SIDE,
 VIEW_3D_FORMAT_TOP_AND_BOTTOM,
 VIEW_3D_FORMAT_COUNT,
 VIEW_3D_FORMAT_FIRST = VIEW_3D_FORMAT_FRAME_SEQUENTIAL
};

enum plane_stereo_format {
 PLANE_STEREO_FORMAT_NONE = 0,
 PLANE_STEREO_FORMAT_SIDE_BY_SIDE = 1,
 PLANE_STEREO_FORMAT_TOP_AND_BOTTOM = 2,
 PLANE_STEREO_FORMAT_FRAME_ALTERNATE = 3,
 PLANE_STEREO_FORMAT_ROW_INTERLEAVED = 5,
 PLANE_STEREO_FORMAT_COLUMN_INTERLEAVED = 6,
 PLANE_STEREO_FORMAT_CHECKER_BOARD = 7
};






enum dc_edid_connector_type {
 DC_EDID_CONNECTOR_UNKNOWN = 0,
 DC_EDID_CONNECTOR_ANALOG = 1,
 DC_EDID_CONNECTOR_DIGITAL = 10,
 DC_EDID_CONNECTOR_DVI = 11,
 DC_EDID_CONNECTOR_HDMIA = 12,
 DC_EDID_CONNECTOR_MDDI = 14,
 DC_EDID_CONNECTOR_DISPLAYPORT = 15
};

enum dc_edid_status {
 EDID_OK,
 EDID_BAD_INPUT,
 EDID_NO_RESPONSE,
 EDID_BAD_CHECKSUM,
 EDID_THE_SAME,
};


struct dc_cea_audio_mode {
 uint8_t format_code;
 uint8_t channel_count;
 uint8_t sample_rate;
 union {
  uint8_t sample_size;

  uint8_t max_bit_rate;
  uint8_t audio_codec_vendor_specific;
 };
};

struct dc_edid {
 uint32_t length;
 uint8_t raw_edid[1024];
};
# 189 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h"
union display_content_support {
 unsigned int raw;
 struct {
  unsigned int valid_content_type :1;
  unsigned int game_content :1;
  unsigned int cinema_content :1;
  unsigned int photo_content :1;
  unsigned int graphics_content :1;
  unsigned int reserved :27;
 } bits;
};

struct dc_panel_patch {
 unsigned int dppowerup_delay;
 unsigned int extra_t12_ms;
 unsigned int extra_delay_backlight_off;
 unsigned int extra_t7_ms;
};

struct dc_edid_caps {

 uint16_t manufacturer_id;
 uint16_t product_id;
 uint32_t serial_number;
 uint8_t manufacture_week;
 uint8_t manufacture_year;
 uint8_t display_name[20];


 uint8_t speaker_flags;
 uint32_t audio_mode_count;
 struct dc_cea_audio_mode audio_modes[16];
 uint32_t audio_latency;
 uint32_t video_latency;

 union display_content_support content_support;

 uint8_t qs_bit;
 uint8_t qy_bit;


 bool lte_340mcsc_scramble;

 bool edid_hdmi;
 bool hdr_supported;

 struct dc_panel_patch panel_patch;
};

struct view {
 uint32_t width;
 uint32_t height;
};

struct dc_mode_flags {

 uint32_t INTERLACE :1;

 uint32_t NATIVE :1;

 uint32_t PREFERRED :1;


 uint32_t REDUCED_BLANKING :1;

 uint32_t VIDEO_OPTIMIZED_RATE :1;

 uint32_t PACKED_PIXEL_FORMAT :1;

 uint32_t PREFERRED_VIEW :1;

 uint32_t TILED_MODE :1;
 uint32_t DSE_MODE :1;




 uint32_t MIRACAST_REFRESH_DIVIDER;
};


enum dc_timing_source {
 TIMING_SOURCE_UNDEFINED,


 TIMING_SOURCE_USER_FORCED,
 TIMING_SOURCE_USER_OVERRIDE,
 TIMING_SOURCE_CUSTOM,
 TIMING_SOURCE_EXPLICIT,


 TIMING_SOURCE_EDID_CEA_SVD_3D,
 TIMING_SOURCE_EDID_CEA_SVD_PREFERRED,
 TIMING_SOURCE_EDID_CEA_SVD_420,
 TIMING_SOURCE_EDID_DETAILED,
 TIMING_SOURCE_EDID_ESTABLISHED,
 TIMING_SOURCE_EDID_STANDARD,
 TIMING_SOURCE_EDID_CEA_SVD,
 TIMING_SOURCE_EDID_CVT_3BYTE,
 TIMING_SOURCE_EDID_4BYTE,
 TIMING_SOURCE_VBIOS,
 TIMING_SOURCE_CV,
 TIMING_SOURCE_TV,
 TIMING_SOURCE_HDMI_VIC,


 TIMING_SOURCE_DEFAULT,


 TIMING_SOURCE_CUSTOM_BASE,


 TIMING_SOURCE_RANGELIMIT,
 TIMING_SOURCE_OS_FORCED,
 TIMING_SOURCE_IMPLICIT,


 TIMING_SOURCE_BASICMODE,

 TIMING_SOURCE_COUNT
};


struct stereo_3d_features {
 bool supported ;
 bool allTimings ;
 bool cloneMode ;
 bool scaling ;
 bool singleFrameSWPacked;
};

enum dc_timing_support_method {
 TIMING_SUPPORT_METHOD_UNDEFINED,
 TIMING_SUPPORT_METHOD_EXPLICIT,
 TIMING_SUPPORT_METHOD_IMPLICIT,
 TIMING_SUPPORT_METHOD_NATIVE
};

struct dc_mode_info {
 uint32_t pixel_width;
 uint32_t pixel_height;
 uint32_t field_rate;



 enum dc_timing_standard timing_standard;
 enum dc_timing_source timing_source;
 struct dc_mode_flags flags;
};

enum dc_power_state {
 DC_POWER_STATE_ON = 1,
 DC_POWER_STATE_STANDBY,
 DC_POWER_STATE_SUSPEND,
 DC_POWER_STATE_OFF
};


enum dc_video_power_state {
 DC_VIDEO_POWER_UNSPECIFIED = 0,
 DC_VIDEO_POWER_ON = 1,
 DC_VIDEO_POWER_STANDBY,
 DC_VIDEO_POWER_SUSPEND,
 DC_VIDEO_POWER_OFF,
 DC_VIDEO_POWER_HIBERNATE,
 DC_VIDEO_POWER_SHUTDOWN,
 DC_VIDEO_POWER_ULPS,
 DC_VIDEO_POWER_AFTER_RESET,
 DC_VIDEO_POWER_MAXIMUM
};

enum dc_acpi_cm_power_state {
 DC_ACPI_CM_POWER_STATE_D0 = 1,
 DC_ACPI_CM_POWER_STATE_D1 = 2,
 DC_ACPI_CM_POWER_STATE_D2 = 4,
 DC_ACPI_CM_POWER_STATE_D3 = 8
};

enum dc_connection_type {
 dc_connection_none,
 dc_connection_single,
 dc_connection_mst_branch,
 dc_connection_active_dongle
};

struct dc_csc_adjustments {
 struct fixed31_32 contrast;
 struct fixed31_32 saturation;
 struct fixed31_32 brightness;
 struct fixed31_32 hue;
};

enum dpcd_downstream_port_max_bpc {
 DOWN_STREAM_MAX_8BPC = 0,
 DOWN_STREAM_MAX_10BPC,
 DOWN_STREAM_MAX_12BPC,
 DOWN_STREAM_MAX_16BPC
};
struct dc_dongle_caps {

 enum display_dongle_type dongle_type;
 bool extendedCapValid;


 bool is_dp_hdmi_s3d_converter;
 bool is_dp_hdmi_ycbcr422_pass_through;
 bool is_dp_hdmi_ycbcr420_pass_through;
 bool is_dp_hdmi_ycbcr422_converter;
 bool is_dp_hdmi_ycbcr420_converter;
 uint32_t dp_hdmi_max_bpc;
 uint32_t dp_hdmi_max_pixel_clk_in_khz;
};

enum scaling_transformation {
 SCALING_TRANSFORMATION_UNINITIALIZED,
 SCALING_TRANSFORMATION_IDENTITY = 0x0001,
 SCALING_TRANSFORMATION_CENTER_TIMING = 0x0002,
 SCALING_TRANSFORMATION_FULL_SCREEN_SCALE = 0x0004,
 SCALING_TRANSFORMATION_PRESERVE_ASPECT_RATIO_SCALE = 0x0008,
 SCALING_TRANSFORMATION_DAL_DECIDE = 0x0010,
 SCALING_TRANSFORMATION_INVALID = 0x80000000,


 SCALING_TRANSFORMATION_BEGING = SCALING_TRANSFORMATION_IDENTITY,
 SCALING_TRANSFORMATION_END =
  SCALING_TRANSFORMATION_PRESERVE_ASPECT_RATIO_SCALE
};

enum display_content_type {
 DISPLAY_CONTENT_TYPE_NO_DATA = 0,
 DISPLAY_CONTENT_TYPE_GRAPHICS = 1,
 DISPLAY_CONTENT_TYPE_PHOTO = 2,
 DISPLAY_CONTENT_TYPE_CINEMA = 4,
 DISPLAY_CONTENT_TYPE_GAME = 8
};
# 460 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dc_types.h"
union audio_sample_rates {
 struct sample_rates {
  uint8_t RATE_32:1;
  uint8_t RATE_44_1:1;
  uint8_t RATE_48:1;
  uint8_t RATE_88_2:1;
  uint8_t RATE_96:1;
  uint8_t RATE_176_4:1;
  uint8_t RATE_192:1;
 } rate;

 uint8_t all;
};

struct audio_speaker_flags {
 uint32_t FL_FR:1;
 uint32_t LFE:1;
 uint32_t FC:1;
 uint32_t RL_RR:1;
 uint32_t RC:1;
 uint32_t FLC_FRC:1;
 uint32_t RLC_RRC:1;
 uint32_t SUPPORT_AI:1;
};

struct audio_speaker_info {
 uint32_t ALLSPEAKERS:7;
 uint32_t SUPPORT_AI:1;
};


struct audio_info_flags {

 union {

  struct audio_speaker_flags speaker_flags;
  struct audio_speaker_info info;

  uint8_t all;
 };
};

enum audio_format_code {
 AUDIO_FORMAT_CODE_FIRST = 1,
 AUDIO_FORMAT_CODE_LINEARPCM = AUDIO_FORMAT_CODE_FIRST,

 AUDIO_FORMAT_CODE_AC3,

 AUDIO_FORMAT_CODE_MPEG1,

 AUDIO_FORMAT_CODE_MP3,

 AUDIO_FORMAT_CODE_MPEG2,
 AUDIO_FORMAT_CODE_AAC,
 AUDIO_FORMAT_CODE_DTS,
 AUDIO_FORMAT_CODE_ATRAC,
 AUDIO_FORMAT_CODE_1BITAUDIO,
 AUDIO_FORMAT_CODE_DOLBYDIGITALPLUS,
 AUDIO_FORMAT_CODE_DTS_HD,
 AUDIO_FORMAT_CODE_MAT_MLP,
 AUDIO_FORMAT_CODE_DST,
 AUDIO_FORMAT_CODE_WMAPRO,
 AUDIO_FORMAT_CODE_LAST,
 AUDIO_FORMAT_CODE_COUNT =
  AUDIO_FORMAT_CODE_LAST - AUDIO_FORMAT_CODE_FIRST
};

struct audio_mode {

 enum audio_format_code format_code;

 uint8_t channel_count;

 union audio_sample_rates sample_rates;
 union {

  uint8_t sample_size;

  uint8_t max_bit_rate;

  uint8_t vendor_specific;
 };
};

struct audio_info {
 struct audio_info_flags flags;
 uint32_t video_latency;
 uint32_t audio_latency;
 uint32_t display_index;
 uint8_t display_name[20];
 uint32_t manufacture_id;
 uint32_t product_id;

 uint32_t port_id[2];
 uint32_t mode_count;

 struct audio_mode modes[16];
};

enum dc_infoframe_type {
 DC_HDMI_INFOFRAME_TYPE_VENDOR = 0x81,
 DC_HDMI_INFOFRAME_TYPE_AVI = 0x82,
 DC_HDMI_INFOFRAME_TYPE_SPD = 0x83,
 DC_HDMI_INFOFRAME_TYPE_AUDIO = 0x84,



};

struct dc_info_packet {
 bool valid;
 uint8_t hb0;
 uint8_t hb1;
 uint8_t hb2;
 uint8_t hb3;
 uint8_t sb[32];
};

struct dc_info_packet_128 {
 bool valid;
 uint8_t hb0;
 uint8_t hb1;
 uint8_t hb2;
 uint8_t hb3;
 uint8_t sb[128];
};



struct dc_plane_flip_time {
 unsigned int time_elapsed_in_us[10];
 unsigned int index;
 unsigned int prev_update_time_in_us;
};

struct psr_config {
 unsigned char psr_version;
 unsigned int psr_rfb_setup_time;
 bool psr_exit_link_training_required;
 bool psr_frame_capture_indication_req;
 unsigned int psr_sdp_transmit_line_num_deadline;
 bool allow_smu_optimizations;
};

union dmcu_psr_level {
 struct {
  unsigned int SKIP_CRC:1;
  unsigned int SKIP_DP_VID_STREAM_DISABLE:1;
  unsigned int SKIP_PHY_POWER_DOWN:1;
  unsigned int SKIP_AUX_ACK_CHECK:1;
  unsigned int SKIP_CRTC_DISABLE:1;
  unsigned int SKIP_AUX_RFB_CAPTURE_CHECK:1;
  unsigned int SKIP_SMU_NOTIFICATION:1;
  unsigned int SKIP_AUTO_STATE_ADVANCE:1;
  unsigned int DISABLE_PSR_ENTRY_ABORT:1;
  unsigned int SKIP_SINGLE_OTG_DISABLE:1;
  unsigned int RESERVED:22;
 } bits;
 unsigned int u32all;
};

enum physical_phy_id {
 PHYLD_0,
 PHYLD_1,
 PHYLD_2,
 PHYLD_3,
 PHYLD_4,
 PHYLD_5,
 PHYLD_6,
 PHYLD_7,
 PHYLD_8,
 PHYLD_9,
 PHYLD_COUNT,
 PHYLD_UNKNOWN = (-1L)
};

enum phy_type {
 PHY_TYPE_UNKNOWN = 1,
 PHY_TYPE_PCIE_PHY = 2,
 PHY_TYPE_UNIPHY = 3,
};

struct psr_context {

 enum channel_id channel;

 enum transmitter transmitterId;

 enum engine_id engineId;

 enum controller_id controllerId;

 enum phy_type phyType;

 enum physical_phy_id smuPhyId;





 unsigned int crtcTimingVerticalTotal;



 bool psrSupportedDisplayConfig;

 bool psrExitLinkTrainingRequired;






 bool psrFrameCaptureIndicationReq;



 unsigned int sdpTransmitLineNumDeadline;



 unsigned int vsyncRateHz;
 unsigned int skipPsrWaitForPllLock;
 unsigned int numberOfControllers;




 bool rfb_update_auto_en;

 unsigned int timehyst_frames;

 unsigned int hyst_lines;



 unsigned int aux_repeats;

 union dmcu_psr_level psr_level;



 unsigned int frame_delay;
 bool allow_smu_optimizations;
};

struct colorspace_transform {
 struct fixed31_32 matrix[12];
 bool enable_remap;
};

enum i2c_mot_mode {
 I2C_MOT_UNDEF,
 I2C_MOT_TRUE,
 I2C_MOT_FALSE
};

struct AsicStateEx {
 unsigned int memoryClock;
 unsigned int displayClock;
 unsigned int engineClock;
 unsigned int maxSupportedDppClock;
 unsigned int dppClock;
 unsigned int socClock;
 unsigned int dcfClockDeepSleep;
 unsigned int fClock;
 unsigned int phyClock;
};


enum dc_clock_type {
 DC_CLOCK_TYPE_DISPCLK = 0,
 DC_CLOCK_TYPE_DPPCLK = 1,
};

struct dc_clock_config {
 uint32_t max_clock_khz;
 uint32_t min_clock_khz;
 uint32_t bw_requirequired_clock_khz;
 uint32_t current_clock_khz;
};
# 31 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_services_types.h" 2

struct pp_smu_funcs;

struct dm_pp_clock_range {
 int min_khz;
 int max_khz;
};

enum dm_pp_clocks_state {
 DM_PP_CLOCKS_STATE_INVALID,
 DM_PP_CLOCKS_STATE_ULTRA_LOW,
 DM_PP_CLOCKS_STATE_LOW,
 DM_PP_CLOCKS_STATE_NOMINAL,
 DM_PP_CLOCKS_STATE_PERFORMANCE,


 DM_PP_CLOCKS_DPM_STATE_LEVEL_INVALID = DM_PP_CLOCKS_STATE_INVALID,
 DM_PP_CLOCKS_DPM_STATE_LEVEL_0,
 DM_PP_CLOCKS_DPM_STATE_LEVEL_1,
 DM_PP_CLOCKS_DPM_STATE_LEVEL_2,

 DM_PP_CLOCKS_DPM_STATE_LEVEL_3,
 DM_PP_CLOCKS_DPM_STATE_LEVEL_4,
 DM_PP_CLOCKS_DPM_STATE_LEVEL_5,
 DM_PP_CLOCKS_DPM_STATE_LEVEL_6,
 DM_PP_CLOCKS_DPM_STATE_LEVEL_7,

 DM_PP_CLOCKS_MAX_STATES
};

struct dm_pp_gpu_clock_range {
 enum dm_pp_clocks_state clock_state;
 struct dm_pp_clock_range sclk;
 struct dm_pp_clock_range mclk;
 struct dm_pp_clock_range eclk;
 struct dm_pp_clock_range dclk;
};

enum dm_pp_clock_type {
 DM_PP_CLOCK_TYPE_DISPLAY_CLK = 1,
 DM_PP_CLOCK_TYPE_ENGINE_CLK,
 DM_PP_CLOCK_TYPE_MEMORY_CLK,
 DM_PP_CLOCK_TYPE_DCFCLK,
 DM_PP_CLOCK_TYPE_DCEFCLK,
 DM_PP_CLOCK_TYPE_SOCCLK,
 DM_PP_CLOCK_TYPE_PIXELCLK,
 DM_PP_CLOCK_TYPE_DISPLAYPHYCLK,
 DM_PP_CLOCK_TYPE_DPPCLK,
 DM_PP_CLOCK_TYPE_FCLK,
};
# 97 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_services_types.h"
struct dm_pp_clock_levels {
 uint32_t num_levels;
 uint32_t clocks_in_khz[16];
};

struct dm_pp_clock_with_latency {
 uint32_t clocks_in_khz;
 uint32_t latency_in_us;
};

struct dm_pp_clock_levels_with_latency {
 uint32_t num_levels;
 struct dm_pp_clock_with_latency data[16];
};

struct dm_pp_clock_with_voltage {
 uint32_t clocks_in_khz;
 uint32_t voltage_in_mv;
};

struct dm_pp_clock_levels_with_voltage {
 uint32_t num_levels;
 struct dm_pp_clock_with_voltage data[16];
};

struct dm_pp_single_disp_config {
 enum signal_type signal;
 uint8_t transmitter;
 uint8_t ddi_channel_mapping;
 uint8_t pipe_idx;
 uint32_t src_height;
 uint32_t src_width;
 uint32_t v_refresh;
 uint32_t sym_clock;
 struct dc_link_settings link_settings;
};



enum dm_pp_wm_set_id {
 WM_SET_A = 0,
 WM_SET_B,
 WM_SET_C,
 WM_SET_D,
 WM_SET_INVALID = 0xffff,
};

struct dm_pp_clock_range_for_wm_set {
 enum dm_pp_wm_set_id wm_set_id;
 uint32_t wm_min_eng_clk_in_khz;
 uint32_t wm_max_eng_clk_in_khz;
 uint32_t wm_min_mem_clk_in_khz;
 uint32_t wm_max_mem_clk_in_khz;
};

struct dm_pp_wm_sets_with_clock_ranges {
 uint32_t num_wm_sets;
 struct dm_pp_clock_range_for_wm_set wm_clk_ranges[4];
};

struct dm_pp_clock_range_for_dmif_wm_set_soc15 {
 enum dm_pp_wm_set_id wm_set_id;
 uint32_t wm_min_dcfclk_clk_in_khz;
 uint32_t wm_max_dcfclk_clk_in_khz;
 uint32_t wm_min_mem_clk_in_khz;
 uint32_t wm_max_mem_clk_in_khz;
};

struct dm_pp_clock_range_for_mcif_wm_set_soc15 {
 enum dm_pp_wm_set_id wm_set_id;
 uint32_t wm_min_socclk_clk_in_khz;
 uint32_t wm_max_socclk_clk_in_khz;
 uint32_t wm_min_mem_clk_in_khz;
 uint32_t wm_max_mem_clk_in_khz;
};

struct dm_pp_wm_sets_with_clock_ranges_soc15 {
 uint32_t num_wm_dmif_sets;
 uint32_t num_wm_mcif_sets;
 struct dm_pp_clock_range_for_dmif_wm_set_soc15
  wm_dmif_clocks_ranges[4];
 struct dm_pp_clock_range_for_mcif_wm_set_soc15
  wm_mcif_clocks_ranges[4];
};



struct dm_pp_display_configuration {
 bool nb_pstate_switch_disable;
 bool cpu_cc6_disable;
 bool cpu_pstate_disable;
 uint32_t cpu_pstate_separation_time;

 uint32_t min_memory_clock_khz;
 uint32_t min_engine_clock_khz;
 uint32_t min_engine_clock_deep_sleep_khz;

 uint32_t avail_mclk_switch_time_us;
 uint32_t avail_mclk_switch_time_in_disp_active_us;
 uint32_t min_dcfclock_khz;
 uint32_t min_dcfc_deep_sleep_clock_khz;

 uint32_t disp_clk_khz;

 bool all_displays_in_sync;

 uint8_t display_count;
 struct dm_pp_single_disp_config disp_configs[6];



 uint8_t crtc_index;

 uint32_t line_time_in_us;
};

struct dm_bl_data_point {

  uint8_t luminance;



  uint8_t signal_level;
};


struct dm_acpi_atif_backlight_caps {
 uint16_t size;
 uint16_t flags;
 uint8_t error_code;
 uint8_t ac_level_percentage;
 uint8_t dc_level_percentage;
 uint8_t min_input_signal;
 uint8_t max_input_signal;
 uint8_t num_data_points;
 struct dm_bl_data_point data_points[99];
};

enum dm_acpi_display_type {
 AcpiDisplayType_LCD1 = 0,
 AcpiDisplayType_CRT1 = 1,
 AcpiDisplayType_DFP1 = 3,
 AcpiDisplayType_CRT2 = 4,
 AcpiDisplayType_LCD2 = 5,
 AcpiDisplayType_DFP2 = 7,
 AcpiDisplayType_DFP3 = 9,
 AcpiDisplayType_DFP4 = 10,
 AcpiDisplayType_DFP5 = 11,
 AcpiDisplayType_DFP6 = 12
};

struct dm_pp_power_level_change_request {
 enum dm_pp_clocks_state power_level;
};

struct dm_pp_clock_for_voltage_req {
 enum dm_pp_clock_type clk_type;
 uint32_t clocks_in_khz;
};

struct dm_pp_static_clock_info {
 uint32_t max_sclk_khz;
 uint32_t max_mclk_khz;


 enum dm_pp_clocks_state max_clocks_state;
};

struct dtn_min_clk_info {
 uint32_t disp_clk_khz;
 uint32_t min_engine_clock_khz;
 uint32_t min_memory_clock_khz;
};
# 27 "../drivers/gpu/drm/amd/amdgpu/../include/dm_pp_interface.h" 2



enum amd_pp_display_config_type{
 AMD_PP_DisplayConfigType_None = 0,
 AMD_PP_DisplayConfigType_DP54 ,
 AMD_PP_DisplayConfigType_DP432 ,
 AMD_PP_DisplayConfigType_DP324 ,
 AMD_PP_DisplayConfigType_DP27,
 AMD_PP_DisplayConfigType_DP243,
 AMD_PP_DisplayConfigType_DP216,
 AMD_PP_DisplayConfigType_DP162,
 AMD_PP_DisplayConfigType_HDMI6G ,
 AMD_PP_DisplayConfigType_HDMI297 ,
 AMD_PP_DisplayConfigType_HDMI162,
 AMD_PP_DisplayConfigType_LVDS,
 AMD_PP_DisplayConfigType_DVI,
 AMD_PP_DisplayConfigType_WIRELESS,
 AMD_PP_DisplayConfigType_VGA
};

struct single_display_configuration
{
 uint32_t controller_index;
 uint32_t controller_id;
 uint32_t signal_type;
 uint32_t display_state;

 uint8_t primary_transmitter_phyi_d;

 uint8_t primary_transmitter_active_lanemap;

 uint8_t secondary_transmitter_phy_id;

 uint8_t secondary_transmitter_active_lanemap;

 uint32_t config_flags;
 uint32_t display_type;
 uint32_t view_resolution_cx;
 uint32_t view_resolution_cy;
 enum amd_pp_display_config_type displayconfigtype;
 uint32_t vertical_refresh;
};



struct amd_pp_display_configuration {
 bool nb_pstate_switch_disable;
 bool cpu_cc6_disable;
 bool cpu_pstate_disable;
 uint32_t cpu_pstate_separation_time;

 uint32_t num_display;
 uint32_t num_path_including_non_display;
 uint32_t crossfire_display_index;
 uint32_t min_mem_set_clock;
 uint32_t min_core_set_clock;

 uint32_t min_bus_bandwidth;

 uint32_t min_core_set_clock_in_sr;

 struct single_display_configuration displays[32];

 uint32_t vrefresh;

 uint32_t min_vblank_time;
 bool multi_monitor_in_sync;


 uint32_t crtc_index;

 uint32_t line_time_in_us;
 bool invalid_vblank_time;

 uint32_t display_clk;





 uint32_t dce_tolerable_mclk_in_active_latency;
 uint32_t min_dcef_set_clk;
 uint32_t min_dcef_deep_sleep_set_clk;
};

struct amd_pp_simple_clock_info {
 uint32_t engine_max_clock;
 uint32_t memory_max_clock;
 uint32_t level;
};

enum PP_DAL_POWERLEVEL {
 PP_DAL_POWERLEVEL_INVALID = 0,
 PP_DAL_POWERLEVEL_ULTRALOW,
 PP_DAL_POWERLEVEL_LOW,
 PP_DAL_POWERLEVEL_NOMINAL,
 PP_DAL_POWERLEVEL_PERFORMANCE,

 PP_DAL_POWERLEVEL_0 = PP_DAL_POWERLEVEL_ULTRALOW,
 PP_DAL_POWERLEVEL_1 = PP_DAL_POWERLEVEL_LOW,
 PP_DAL_POWERLEVEL_2 = PP_DAL_POWERLEVEL_NOMINAL,
 PP_DAL_POWERLEVEL_3 = PP_DAL_POWERLEVEL_PERFORMANCE,
 PP_DAL_POWERLEVEL_4 = PP_DAL_POWERLEVEL_3+1,
 PP_DAL_POWERLEVEL_5 = PP_DAL_POWERLEVEL_4+1,
 PP_DAL_POWERLEVEL_6 = PP_DAL_POWERLEVEL_5+1,
 PP_DAL_POWERLEVEL_7 = PP_DAL_POWERLEVEL_6+1,
};

struct amd_pp_clock_info {
 uint32_t min_engine_clock;
 uint32_t max_engine_clock;
 uint32_t min_memory_clock;
 uint32_t max_memory_clock;
 uint32_t min_bus_bandwidth;
 uint32_t max_bus_bandwidth;
 uint32_t max_engine_clock_in_sr;
 uint32_t min_engine_clock_in_sr;
 enum PP_DAL_POWERLEVEL max_clocks_state;
};

enum amd_pp_clock_type {
 amd_pp_disp_clock = 1,
 amd_pp_sys_clock,
 amd_pp_mem_clock,
 amd_pp_dcef_clock,
 amd_pp_soc_clock,
 amd_pp_pixel_clock,
 amd_pp_phy_clock,
 amd_pp_dcf_clock,
 amd_pp_dpp_clock,
 amd_pp_f_clock = amd_pp_dcef_clock,
};



struct amd_pp_clocks {
 uint32_t count;
 uint32_t clock[16];
 uint32_t latency[16];
};

struct pp_clock_with_latency {
 uint32_t clocks_in_khz;
 uint32_t latency_in_us;
};

struct pp_clock_levels_with_latency {
 uint32_t num_levels;
 struct pp_clock_with_latency data[16];
};

struct pp_clock_with_voltage {
 uint32_t clocks_in_khz;
 uint32_t voltage_in_mv;
};

struct pp_clock_levels_with_voltage {
 uint32_t num_levels;
 struct pp_clock_with_voltage data[16];
};

struct pp_display_clock_request {
 enum amd_pp_clock_type clock_type;
 uint32_t clock_freq_in_khz;
};
# 54 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/kgd_pp_interface.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../include/kgd_pp_interface.h"
extern const struct amdgpu_ip_block_version pp_smu_ip_block;

struct amd_vce_state {

 u32 evclk;
 u32 ecclk;

 u32 sclk;
 u32 mclk;
 u8 clk_idx;
 u8 pstate;
};


enum amd_dpm_forced_level {
 AMD_DPM_FORCED_LEVEL_AUTO = 0x1,
 AMD_DPM_FORCED_LEVEL_MANUAL = 0x2,
 AMD_DPM_FORCED_LEVEL_LOW = 0x4,
 AMD_DPM_FORCED_LEVEL_HIGH = 0x8,
 AMD_DPM_FORCED_LEVEL_PROFILE_STANDARD = 0x10,
 AMD_DPM_FORCED_LEVEL_PROFILE_MIN_SCLK = 0x20,
 AMD_DPM_FORCED_LEVEL_PROFILE_MIN_MCLK = 0x40,
 AMD_DPM_FORCED_LEVEL_PROFILE_PEAK = 0x80,
 AMD_DPM_FORCED_LEVEL_PROFILE_EXIT = 0x100,
};

enum amd_pm_state_type {

 POWER_STATE_TYPE_DEFAULT,
 POWER_STATE_TYPE_POWERSAVE,

 POWER_STATE_TYPE_BATTERY,
 POWER_STATE_TYPE_BALANCED,
 POWER_STATE_TYPE_PERFORMANCE,

 POWER_STATE_TYPE_INTERNAL_UVD,
 POWER_STATE_TYPE_INTERNAL_UVD_SD,
 POWER_STATE_TYPE_INTERNAL_UVD_HD,
 POWER_STATE_TYPE_INTERNAL_UVD_HD2,
 POWER_STATE_TYPE_INTERNAL_UVD_MVC,
 POWER_STATE_TYPE_INTERNAL_BOOT,
 POWER_STATE_TYPE_INTERNAL_THERMAL,
 POWER_STATE_TYPE_INTERNAL_ACPI,
 POWER_STATE_TYPE_INTERNAL_ULV,
 POWER_STATE_TYPE_INTERNAL_3DPERF,
};



enum amd_vce_level {
 AMD_VCE_LEVEL_AC_ALL = 0,
 AMD_VCE_LEVEL_DC_EE = 1,
 AMD_VCE_LEVEL_DC_LL_LOW = 2,
 AMD_VCE_LEVEL_DC_LL_HIGH = 3,
 AMD_VCE_LEVEL_DC_GP_LOW = 4,
 AMD_VCE_LEVEL_DC_GP_HIGH = 5,
};

enum amd_fan_ctrl_mode {
 AMD_FAN_CTRL_NONE = 0,
 AMD_FAN_CTRL_MANUAL = 1,
 AMD_FAN_CTRL_AUTO = 2,
};

enum pp_clock_type {
 PP_SCLK,
 PP_MCLK,
 PP_PCIE,
 PP_SOCCLK,
 PP_FCLK,
 PP_DCEFCLK,
 OD_SCLK,
 OD_MCLK,
 OD_VDDC_CURVE,
 OD_RANGE,
};

enum amd_pp_sensors {
 AMDGPU_PP_SENSOR_GFX_SCLK = 0,
 AMDGPU_PP_SENSOR_VDDNB,
 AMDGPU_PP_SENSOR_VDDGFX,
 AMDGPU_PP_SENSOR_UVD_VCLK,
 AMDGPU_PP_SENSOR_UVD_DCLK,
 AMDGPU_PP_SENSOR_VCE_ECCLK,
 AMDGPU_PP_SENSOR_GPU_LOAD,
 AMDGPU_PP_SENSOR_MEM_LOAD,
 AMDGPU_PP_SENSOR_GFX_MCLK,
 AMDGPU_PP_SENSOR_GPU_TEMP,
 AMDGPU_PP_SENSOR_EDGE_TEMP = AMDGPU_PP_SENSOR_GPU_TEMP,
 AMDGPU_PP_SENSOR_HOTSPOT_TEMP,
 AMDGPU_PP_SENSOR_MEM_TEMP,
 AMDGPU_PP_SENSOR_VCE_POWER,
 AMDGPU_PP_SENSOR_UVD_POWER,
 AMDGPU_PP_SENSOR_GPU_POWER,
 AMDGPU_PP_SENSOR_STABLE_PSTATE_SCLK,
 AMDGPU_PP_SENSOR_STABLE_PSTATE_MCLK,
 AMDGPU_PP_SENSOR_ENABLED_SMC_FEATURES_MASK,
 AMDGPU_PP_SENSOR_MIN_FAN_RPM,
 AMDGPU_PP_SENSOR_MAX_FAN_RPM,
 AMDGPU_PP_SENSOR_VCN_POWER_STATE,
};

enum amd_pp_task {
 AMD_PP_TASK_DISPLAY_CONFIG_CHANGE,
 AMD_PP_TASK_ENABLE_USER_STATE,
 AMD_PP_TASK_READJUST_POWER_STATE,
 AMD_PP_TASK_COMPLETE_INIT,
 AMD_PP_TASK_MAX
};

enum PP_SMC_POWER_PROFILE {
 PP_SMC_POWER_PROFILE_BOOTUP_DEFAULT = 0x0,
 PP_SMC_POWER_PROFILE_FULLSCREEN3D = 0x1,
 PP_SMC_POWER_PROFILE_POWERSAVING = 0x2,
 PP_SMC_POWER_PROFILE_VIDEO = 0x3,
 PP_SMC_POWER_PROFILE_VR = 0x4,
 PP_SMC_POWER_PROFILE_COMPUTE = 0x5,
 PP_SMC_POWER_PROFILE_CUSTOM = 0x6,
 PP_SMC_POWER_PROFILE_COUNT,
};

enum {
 PP_GROUP_UNKNOWN = 0,
 PP_GROUP_GFX = 1,
 PP_GROUP_SYS,
 PP_GROUP_MAX
};

enum PP_OD_DPM_TABLE_COMMAND {
 PP_OD_EDIT_SCLK_VDDC_TABLE,
 PP_OD_EDIT_MCLK_VDDC_TABLE,
 PP_OD_EDIT_VDDC_CURVE,
 PP_OD_RESTORE_DEFAULT_TABLE,
 PP_OD_COMMIT_DPM_TABLE
};

struct pp_states_info {
 uint32_t nums;
 uint32_t states[16];
};

enum PP_HWMON_TEMP {
 PP_TEMP_EDGE = 0,
 PP_TEMP_JUNCTION,
 PP_TEMP_MEM,
 PP_TEMP_MAX
};

enum pp_mp1_state {
 PP_MP1_STATE_NONE,
 PP_MP1_STATE_SHUTDOWN,
 PP_MP1_STATE_UNLOAD,
 PP_MP1_STATE_RESET,
};
# 218 "../drivers/gpu/drm/amd/amdgpu/../include/kgd_pp_interface.h"
struct seq_file;
enum amd_pp_clock_type;
struct amd_pp_simple_clock_info;
struct amd_pp_display_configuration;
struct amd_pp_clock_info;
struct pp_display_clock_request;
struct pp_clock_levels_with_voltage;
struct pp_clock_levels_with_latency;
struct amd_pp_clocks;

struct amd_pm_funcs {

 int (*pre_set_power_state)(void *handle);
 int (*set_power_state)(void *handle);
 void (*post_set_power_state)(void *handle);
 void (*display_configuration_changed)(void *handle);
 void (*print_power_state)(void *handle, void *ps);
 bool (*vblank_too_short)(void *handle);
 void (*enable_bapm)(void *handle, bool enable);
 int (*check_state_equal)(void *handle,
    void *cps,
    void *rps,
    bool *equal);

 void (*set_fan_control_mode)(void *handle, u32 mode);
 u32 (*get_fan_control_mode)(void *handle);
 int (*set_fan_speed_percent)(void *handle, u32 speed);
 int (*get_fan_speed_percent)(void *handle, u32 *speed);
 int (*force_clock_level)(void *handle, enum pp_clock_type type, uint32_t mask);
 int (*print_clock_levels)(void *handle, enum pp_clock_type type, char *buf);
 int (*force_performance_level)(void *handle, enum amd_dpm_forced_level level);
 int (*get_sclk_od)(void *handle);
 int (*set_sclk_od)(void *handle, uint32_t value);
 int (*get_mclk_od)(void *handle);
 int (*set_mclk_od)(void *handle, uint32_t value);
 int (*read_sensor)(void *handle, int idx, void *value, int *size);
 enum amd_dpm_forced_level (*get_performance_level)(void *handle);
 enum amd_pm_state_type (*get_current_power_state)(void *handle);
 int (*get_fan_speed_rpm)(void *handle, uint32_t *rpm);
 int (*set_fan_speed_rpm)(void *handle, uint32_t rpm);
 int (*get_pp_num_states)(void *handle, struct pp_states_info *data);
 int (*get_pp_table)(void *handle, char **table);
 int (*set_pp_table)(void *handle, const char *buf, size_t size);
 void (*debugfs_print_current_performance_level)(void *handle, struct seq_file *m);
 int (*switch_power_profile)(void *handle, enum PP_SMC_POWER_PROFILE type, bool en);

 struct amd_vce_state *(*get_vce_clock_state)(void *handle, u32 idx);
 int (*dispatch_tasks)(void *handle, enum amd_pp_task task_id,
   enum amd_pm_state_type *user_state);
 int (*load_firmware)(void *handle);
 int (*wait_for_fw_loading_complete)(void *handle);
 int (*set_powergating_by_smu)(void *handle,
    uint32_t block_type, bool gate);
 int (*set_clockgating_by_smu)(void *handle, uint32_t msg_id);
 int (*set_power_limit)(void *handle, uint32_t n);
 int (*get_power_limit)(void *handle, uint32_t *limit, bool default_limit);
 int (*get_power_profile_mode)(void *handle, char *buf);
 int (*set_power_profile_mode)(void *handle, long *input, uint32_t size);
 int (*odn_edit_dpm_table)(void *handle, uint32_t type, long *input, uint32_t size);
 int (*set_mp1_state)(void *handle, enum pp_mp1_state mp1_state);
 int (*smu_i2c_bus_access)(void *handle, bool acquire);

 u32 (*get_sclk)(void *handle, bool low);
 u32 (*get_mclk)(void *handle, bool low);
 int (*display_configuration_change)(void *handle,
  const struct amd_pp_display_configuration *input);
 int (*get_display_power_level)(void *handle,
  struct amd_pp_simple_clock_info *output);
 int (*get_current_clocks)(void *handle,
  struct amd_pp_clock_info *clocks);
 int (*get_clock_by_type)(void *handle,
  enum amd_pp_clock_type type,
  struct amd_pp_clocks *clocks);
 int (*get_clock_by_type_with_latency)(void *handle,
  enum amd_pp_clock_type type,
  struct pp_clock_levels_with_latency *clocks);
 int (*get_clock_by_type_with_voltage)(void *handle,
  enum amd_pp_clock_type type,
  struct pp_clock_levels_with_voltage *clocks);
 int (*set_watermarks_for_clocks_ranges)(void *handle,
      void *clock_ranges);
 int (*display_clock_voltage_request)(void *handle,
    struct pp_display_clock_request *clock);
 int (*get_display_mode_validation_clocks)(void *handle,
  struct amd_pp_simple_clock_info *clocks);
 int (*notify_smu_enable_pwe)(void *handle);
 int (*enable_mgpu_fan_boost)(void *handle);
 int (*set_active_display_count)(void *handle, uint32_t count);
 int (*set_hard_min_dcefclk_by_freq)(void *handle, uint32_t clock);
 int (*set_hard_min_fclk_by_freq)(void *handle, uint32_t clock);
 int (*set_min_deep_sleep_dcefclk)(void *handle, uint32_t clock);
 int (*get_asic_baco_capability)(void *handle, bool *cap);
 int (*get_asic_baco_state)(void *handle, int *state);
 int (*set_asic_baco_state)(void *handle, int state);
 int (*get_ppfeature_status)(void *handle, char *buf);
 int (*set_ppfeature_status)(void *handle, uint64_t ppfeature_masks);
 int (*asic_reset_mode_2)(void *handle);
};
# 55 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2


# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 1
# 33 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h"
# 1 "../include/drm/drm_crtc.h" 1
# 28 "../include/drm/drm_crtc.h"
# 1 "../include/linux/i2c.h" 1
# 13 "../include/linux/i2c.h"
# 1 "../include/linux/acpi.h" 1
# 13 "../include/linux/acpi.h"
# 1 "../include/linux/irqdomain.h" 1
# 34 "../include/linux/irqdomain.h"
# 1 "../include/linux/irqhandler.h" 1
# 10 "../include/linux/irqhandler.h"
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(struct irq_desc *desc);
typedef void (*irq_preflow_handler_t)(struct irq_data *data);
# 35 "../include/linux/irqdomain.h" 2
# 1 "../include/linux/of.h" 1
# 22 "../include/linux/of.h"
# 1 "../include/linux/property.h" 1
# 17 "../include/linux/property.h"
struct device;

enum dev_prop_type {
 DEV_PROP_U8,
 DEV_PROP_U16,
 DEV_PROP_U32,
 DEV_PROP_U64,
 DEV_PROP_STRING,
 DEV_PROP_MAX,
};

enum dev_dma_attr {
 DEV_DMA_NOT_SUPPORTED,
 DEV_DMA_NON_COHERENT,
 DEV_DMA_COHERENT,
};

struct fwnode_handle *dev_fwnode(struct device *dev);

bool device_property_present(struct device *dev, const char *propname);
int device_property_read_u8_array(struct device *dev, const char *propname,
      u8 *val, size_t nval);
int device_property_read_u16_array(struct device *dev, const char *propname,
       u16 *val, size_t nval);
int device_property_read_u32_array(struct device *dev, const char *propname,
       u32 *val, size_t nval);
int device_property_read_u64_array(struct device *dev, const char *propname,
       u64 *val, size_t nval);
int device_property_read_string_array(struct device *dev, const char *propname,
          const char **val, size_t nval);
int device_property_read_string(struct device *dev, const char *propname,
    const char **val);
int device_property_match_string(struct device *dev,
     const char *propname, const char *string);

bool fwnode_device_is_available(const struct fwnode_handle *fwnode);
bool fwnode_property_present(const struct fwnode_handle *fwnode,
        const char *propname);
int fwnode_property_read_u8_array(const struct fwnode_handle *fwnode,
      const char *propname, u8 *val,
      size_t nval);
int fwnode_property_read_u16_array(const struct fwnode_handle *fwnode,
       const char *propname, u16 *val,
       size_t nval);
int fwnode_property_read_u32_array(const struct fwnode_handle *fwnode,
       const char *propname, u32 *val,
       size_t nval);
int fwnode_property_read_u64_array(const struct fwnode_handle *fwnode,
       const char *propname, u64 *val,
       size_t nval);
int fwnode_property_read_string_array(const struct fwnode_handle *fwnode,
          const char *propname, const char **val,
          size_t nval);
int fwnode_property_read_string(const struct fwnode_handle *fwnode,
    const char *propname, const char **val);
int fwnode_property_match_string(const struct fwnode_handle *fwnode,
     const char *propname, const char *string);
int fwnode_property_get_reference_args(const struct fwnode_handle *fwnode,
           const char *prop, const char *nargs_prop,
           unsigned int nargs, unsigned int index,
           struct fwnode_reference_args *args);

struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *fwnode,
         const char *name,
         unsigned int index);

struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_parent(
 struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_get_next_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
struct fwnode_handle *fwnode_get_next_available_child_node(
 const struct fwnode_handle *fwnode, struct fwnode_handle *child);
# 99 "../include/linux/property.h"
struct fwnode_handle *device_get_next_child_node(
 struct device *dev, struct fwnode_handle *child);





struct fwnode_handle *fwnode_get_named_child_node(
 const struct fwnode_handle *fwnode, const char *childname);
struct fwnode_handle *device_get_named_child_node(struct device *dev,
        const char *childname);

struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *fwnode);
void fwnode_handle_put(struct fwnode_handle *fwnode);

int fwnode_irq_get(struct fwnode_handle *fwnode, unsigned int index);

unsigned int device_get_child_node_count(struct device *dev);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool device_property_read_bool(struct device *dev,
          const char *propname)
{
 return device_property_present(dev, propname);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u8(struct device *dev,
       const char *propname, u8 *val)
{
 return device_property_read_u8_array(dev, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u16(struct device *dev,
        const char *propname, u16 *val)
{
 return device_property_read_u16_array(dev, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u32(struct device *dev,
        const char *propname, u32 *val)
{
 return device_property_read_u32_array(dev, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_read_u64(struct device *dev,
        const char *propname, u64 *val)
{
 return device_property_read_u64_array(dev, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u8(struct device *dev, const char *propname)
{
 return device_property_read_u8_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u16(struct device *dev, const char *propname)
{
 return device_property_read_u16_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u32(struct device *dev, const char *propname)
{
 return device_property_read_u32_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int device_property_count_u64(struct device *dev, const char *propname)
{
 return device_property_read_u64_array(dev, propname, ((void *)0), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fwnode_property_read_bool(const struct fwnode_handle *fwnode,
          const char *propname)
{
 return fwnode_property_present(fwnode, propname);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u8(const struct fwnode_handle *fwnode,
       const char *propname, u8 *val)
{
 return fwnode_property_read_u8_array(fwnode, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u16(const struct fwnode_handle *fwnode,
        const char *propname, u16 *val)
{
 return fwnode_property_read_u16_array(fwnode, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u32(const struct fwnode_handle *fwnode,
        const char *propname, u32 *val)
{
 return fwnode_property_read_u32_array(fwnode, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_read_u64(const struct fwnode_handle *fwnode,
        const char *propname, u64 *val)
{
 return fwnode_property_read_u64_array(fwnode, propname, val, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u8(const struct fwnode_handle *fwnode,
        const char *propname)
{
 return fwnode_property_read_u8_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u16(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u16_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u32(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u32_array(fwnode, propname, ((void *)0), 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fwnode_property_count_u64(const struct fwnode_handle *fwnode,
         const char *propname)
{
 return fwnode_property_read_u64_array(fwnode, propname, ((void *)0), 0);
}
# 231 "../include/linux/property.h"
struct property_entry {
 const char *name;
 size_t length;
 bool is_array;
 enum dev_prop_type type;
 union {
  union {
   const u8 *u8_data;
   const u16 *u16_data;
   const u32 *u32_data;
   const u64 *u64_data;
   const char * const *str;
  } pointer;
  union {
   u8 u8_data;
   u16 u16_data;
   u32 u32_data;
   u64 u64_data;
   const char *str;
  } value;
 };
};
# 317 "../include/linux/property.h"
struct property_entry *
property_entries_dup(const struct property_entry *properties);

void property_entries_free(const struct property_entry *properties);

int device_add_properties(struct device *dev,
     const struct property_entry *properties);
void device_remove_properties(struct device *dev);

bool device_dma_supported(struct device *dev);

enum dev_dma_attr device_get_dma_attr(struct device *dev);

const void *device_get_match_data(struct device *dev);

int device_get_phy_mode(struct device *dev);

void *device_get_mac_address(struct device *dev, char *addr, int alen);

int fwnode_get_phy_mode(struct fwnode_handle *fwnode);
void *fwnode_get_mac_address(struct fwnode_handle *fwnode,
        char *addr, int alen);
struct fwnode_handle *fwnode_graph_get_next_endpoint(
 const struct fwnode_handle *fwnode, struct fwnode_handle *prev);
struct fwnode_handle *
fwnode_graph_get_port_parent(const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port_parent(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_port(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *fwnode_graph_get_remote_endpoint(
 const struct fwnode_handle *fwnode);
struct fwnode_handle *
fwnode_graph_get_remote_node(const struct fwnode_handle *fwnode, u32 port,
        u32 endpoint);
# 366 "../include/linux/property.h"
struct fwnode_handle *
fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *fwnode,
    u32 port, u32 endpoint, unsigned long flags);





int fwnode_graph_parse_endpoint(const struct fwnode_handle *fwnode,
    struct fwnode_endpoint *endpoint);




struct software_node;







struct software_node_ref_args {
 const struct software_node *node;
 unsigned int nargs;
 u64 args[8];
};







struct software_node_reference {
 const char *name;
 unsigned int nrefs;
 const struct software_node_ref_args *refs;
};
# 413 "../include/linux/property.h"
struct software_node {
 const char *name;
 const struct software_node *parent;
 const struct property_entry *properties;
 const struct software_node_reference *references;
};

bool is_software_node(const struct fwnode_handle *fwnode);
const struct software_node *to_software_node(struct fwnode_handle *fwnode);
struct fwnode_handle *software_node_fwnode(const struct software_node *node);

const struct software_node *
software_node_find_by_name(const struct software_node *parent,
      const char *name);

int software_node_register_nodes(const struct software_node *nodes);
void software_node_unregister_nodes(const struct software_node *nodes);

int software_node_register(const struct software_node *node);

int software_node_notify(struct device *dev, unsigned long action);

struct fwnode_handle *
fwnode_create_software_node(const struct property_entry *properties,
       const struct fwnode_handle *parent);
void fwnode_remove_software_node(struct fwnode_handle *fwnode);
# 23 "../include/linux/of.h" 2



# 1 "./arch/arm64/include/generated/uapi/asm/errno.h" 1
# 27 "../include/linux/of.h" 2

typedef u32 phandle;
typedef u32 ihandle;

struct property {
 char *name;
 int length;
 void *value;
 struct property *next;

 unsigned long _flags;





 struct bin_attribute attr;

};





struct device_node {
 const char *name;
 phandle phandle;
 const char *full_name;
 struct fwnode_handle fwnode;

 struct property *properties;
 struct property *deadprops;
 struct device_node *parent;
 struct device_node *child;
 struct device_node *sibling;

 struct kobject kobj;

 unsigned long _flags;
 void *data;




};


struct of_phandle_args {
 struct device_node *np;
 int args_count;
 uint32_t args[16];
};

struct of_phandle_iterator {

 const char *cells_name;
 int cell_count;
 const struct device_node *parent;


 const __be32 *list_end;
 const __be32 *phandle_end;


 const __be32 *cur;
 uint32_t cur_count;
 phandle phandle;
 struct device_node *node;
};

struct of_reconfig_data {
 struct device_node *dn;
 struct property *prop;
 struct property *old_prop;
};


extern struct kobj_type of_node_ktype;
extern const struct fwnode_operations of_fwnode_ops;
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_init(struct device_node *node)
{

 kobject_init(&node->kobj, &of_node_ktype);

 node->fwnode.ops = &of_fwnode_ops;
}
# 121 "../include/linux/of.h"
extern struct device_node *of_node_get(struct device_node *node);
extern void of_node_put(struct device_node *node);
# 133 "../include/linux/of.h"
extern struct device_node *of_root;
extern struct device_node *of_chosen;
extern struct device_node *of_aliases;
extern struct device_node *of_stdout;
extern raw_spinlock_t devtree_lock;
# 153 "../include/linux/of.h"
void of_core_init(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_of_node(const struct fwnode_handle *fwnode)
{
 return !IS_ERR_OR_NULL(fwnode) && fwnode->ops == &of_fwnode_ops;
}
# 178 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_have_populated_dt(void)
{
 return of_root != ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_node_is_root(const struct device_node *node)
{
 return node && (node->parent == ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_check_flag(struct device_node *n, unsigned long flag)
{
 return test_bit(flag, &n->_flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_node_test_and_set_flag(struct device_node *n,
         unsigned long flag)
{
 return test_and_set_bit(flag, &n->_flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_set_flag(struct device_node *n, unsigned long flag)
{
 set_bit(flag, &n->_flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_node_clear_flag(struct device_node *n, unsigned long flag)
{
 clear_bit(flag, &n->_flags);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_check_flag(struct property *p, unsigned long flag)
{
 return test_bit(flag, &p->_flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_property_set_flag(struct property *p, unsigned long flag)
{
 set_bit(flag, &p->_flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void of_property_clear_flag(struct property *p, unsigned long flag)
{
 clear_bit(flag, &p->_flags);
}


extern struct device_node *__of_find_all_nodes(struct device_node *prev);
extern struct device_node *of_find_all_nodes(struct device_node *prev);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 of_read_number(const __be32 *cell, int size)
{
 u64 r = 0;
 for (; size--; cell++)
  r = (r << 32) | (__builtin_constant_p((__u32)(( __u32)(__be32)(*cell))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*cell)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*cell)));
 return r;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long of_read_ulong(const __be32 *cell, int size)
{

 return of_read_number(cell, size);
}
# 256 "../include/linux/of.h"
extern bool of_node_name_eq(const struct device_node *np, const char *name);
extern bool of_node_name_prefix(const struct device_node *np, const char *prefix);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *of_node_full_name(const struct device_node *np)
{
 return np ? np->full_name : "<no-node>";
}




extern struct device_node *of_find_node_by_name(struct device_node *from,
 const char *name);
extern struct device_node *of_find_node_by_type(struct device_node *from,
 const char *type);
extern struct device_node *of_find_compatible_node(struct device_node *from,
 const char *type, const char *compat);
extern struct device_node *of_find_matching_node_and_match(
 struct device_node *from,
 const struct of_device_id *matches,
 const struct of_device_id **match);

extern struct device_node *of_find_node_opts_by_path(const char *path,
 const char **opts);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *of_find_node_by_path(const char *path)
{
 return of_find_node_opts_by_path(path, ((void *)0));
}

extern struct device_node *of_find_node_by_phandle(phandle handle);
extern struct device_node *of_get_parent(const struct device_node *node);
extern struct device_node *of_get_next_parent(struct device_node *node);
extern struct device_node *of_get_next_child(const struct device_node *node,
          struct device_node *prev);
extern struct device_node *of_get_next_available_child(
 const struct device_node *node, struct device_node *prev);

extern struct device_node *of_get_compatible_child(const struct device_node *parent,
     const char *compatible);
extern struct device_node *of_get_child_by_name(const struct device_node *node,
     const char *name);


extern struct device_node *of_find_next_cache_node(const struct device_node *);
extern int of_find_last_cache_level(unsigned int cpu);
extern struct device_node *of_find_node_with_property(
 struct device_node *from, const char *prop_name);

extern struct property *of_find_property(const struct device_node *np,
      const char *name,
      int *lenp);
extern int of_property_count_elems_of_size(const struct device_node *np,
    const char *propname, int elem_size);
extern int of_property_read_u32_index(const struct device_node *np,
           const char *propname,
           u32 index, u32 *out_value);
extern int of_property_read_u64_index(const struct device_node *np,
           const char *propname,
           u32 index, u64 *out_value);
extern int of_property_read_variable_u8_array(const struct device_node *np,
     const char *propname, u8 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u16_array(const struct device_node *np,
     const char *propname, u16 *out_values,
     size_t sz_min, size_t sz_max);
extern int of_property_read_variable_u32_array(const struct device_node *np,
     const char *propname,
     u32 *out_values,
     size_t sz_min,
     size_t sz_max);
extern int of_property_read_u64(const struct device_node *np,
    const char *propname, u64 *out_value);
extern int of_property_read_variable_u64_array(const struct device_node *np,
     const char *propname,
     u64 *out_values,
     size_t sz_min,
     size_t sz_max);

extern int of_property_read_string(const struct device_node *np,
       const char *propname,
       const char **out_string);
extern int of_property_match_string(const struct device_node *np,
        const char *propname,
        const char *string);
extern int of_property_read_string_helper(const struct device_node *np,
           const char *propname,
           const char **out_strs, size_t sz, int index);
extern int of_device_is_compatible(const struct device_node *device,
       const char *);
extern int of_device_compatible_match(struct device_node *device,
          const char *const *compat);
extern bool of_device_is_available(const struct device_node *device);
extern bool of_device_is_big_endian(const struct device_node *device);
extern const void *of_get_property(const struct device_node *node,
    const char *name,
    int *lenp);
extern struct device_node *of_get_cpu_node(int cpu, unsigned int *thread);
extern struct device_node *of_get_next_cpu_node(struct device_node *prev);




extern int of_n_addr_cells(struct device_node *np);
extern int of_n_size_cells(struct device_node *np);
extern const struct of_device_id *of_match_node(
 const struct of_device_id *matches, const struct device_node *node);
extern int of_modalias_node(struct device_node *node, char *modalias, int len);
extern void of_print_phandle_args(const char *msg, const struct of_phandle_args *args);
extern struct device_node *of_parse_phandle(const struct device_node *np,
         const char *phandle_name,
         int index);
extern int of_parse_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_args_map(const struct device_node *np,
 const char *list_name, const char *stem_name, int index,
 struct of_phandle_args *out_args);
extern int of_parse_phandle_with_fixed_args(const struct device_node *np,
 const char *list_name, int cells_count, int index,
 struct of_phandle_args *out_args);
extern int of_count_phandle_with_args(const struct device_node *np,
 const char *list_name, const char *cells_name);


extern int of_phandle_iterator_init(struct of_phandle_iterator *it,
        const struct device_node *np,
        const char *list_name,
        const char *cells_name,
        int cell_count);

extern int of_phandle_iterator_next(struct of_phandle_iterator *it);
extern int of_phandle_iterator_args(struct of_phandle_iterator *it,
        uint32_t *args,
        int size);

extern void of_alias_scan(void * (*dt_alloc)(u64 size, u64 align));
extern int of_alias_get_id(struct device_node *np, const char *stem);
extern int of_alias_get_highest_id(const char *stem);
extern int of_alias_get_alias_list(const struct of_device_id *matches,
       const char *stem, unsigned long *bitmap,
       unsigned int nbits);

extern int of_machine_is_compatible(const char *compat);

extern int of_add_property(struct device_node *np, struct property *prop);
extern int of_remove_property(struct device_node *np, struct property *prop);
extern int of_update_property(struct device_node *np, struct property *newprop);
# 411 "../include/linux/of.h"
extern int of_attach_node(struct device_node *);
extern int of_detach_node(struct device_node *);
# 434 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u8_array(const struct device_node *np,
         const char *propname,
         u8 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u8_array(np, propname, out_values,
           sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 464 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u16_array(const struct device_node *np,
          const char *propname,
          u16 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u16_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 492 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u32_array(const struct device_node *np,
          const char *propname,
          u32 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u32_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 520 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u64_array(const struct device_node *np,
          const char *propname,
          u64 *out_values, size_t sz)
{
 int ret = of_property_read_variable_u64_array(np, propname, out_values,
            sz, 0);
 if (ret >= 0)
  return 0;
 else
  return ret;
}
# 540 "../include/linux/of.h"
const __be32 *of_prop_next_u32(struct property *prop, const __be32 *cur,
          u32 *pu);







const char *of_prop_next_string(struct property *prop, const char *cur);

bool of_console_check(struct device_node *dn, char *name, int index);

extern int of_cpu_node_to_id(struct device_node *np);

int of_map_rid(struct device_node *np, u32 rid,
        const char *map_name, const char *map_mask_name,
        struct device_node **target, u32 *id_out);
# 991 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_prop_val_eq(struct property *p1, struct property *p2)
{
 return p1->length == p2->length &&
        !memcmp(p1->value, p2->value, (size_t)p1->length);
}


extern int of_node_to_nid(struct device_node *np);
# 1007 "../include/linux/of.h"
extern int of_numa_init(void);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *of_find_matching_node(
 struct device_node *from,
 const struct of_device_id *matches)
{
 return of_find_matching_node_and_match(from, matches, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *of_node_get_device_type(const struct device_node *np)
{
 return of_get_property(np, "device_type", ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_node_is_type(const struct device_node *np, const char *type)
{
 const char *match = of_node_get_device_type(np);

 return np && match && type && !strcmp(match, type);
}
# 1045 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u8_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u8));
}
# 1062 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u16_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u16));
}
# 1079 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u32_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u32));
}
# 1096 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_u64_elems(const struct device_node *np,
    const char *propname)
{
 return of_property_count_elems_of_size(np, propname, sizeof(u64));
}
# 1115 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_string_array(const struct device_node *np,
      const char *propname, const char **out_strs,
      size_t sz)
{
 return of_property_read_string_helper(np, propname, out_strs, sz, 0);
}
# 1134 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_count_strings(const struct device_node *np,
         const char *propname)
{
 return of_property_read_string_helper(np, propname, ((void *)0), 0, 0);
}
# 1158 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_string_index(const struct device_node *np,
      const char *propname,
      int index, const char **output)
{
 int rc = of_property_read_string_helper(np, propname, output, 1, index);
 return rc < 0 ? rc : 0;
}
# 1174 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_property_read_bool(const struct device_node *np,
      const char *propname)
{
 struct property *prop = of_find_property(np, propname, ((void *)0));

 return prop ? true : false;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u8(const struct device_node *np,
           const char *propname,
           u8 *out_value)
{
 return of_property_read_u8_array(np, propname, out_value, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u16(const struct device_node *np,
           const char *propname,
           u16 *out_value)
{
 return of_property_read_u16_array(np, propname, out_value, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_u32(const struct device_node *np,
           const char *propname,
           u32 *out_value)
{
 return of_property_read_u32_array(np, propname, out_value, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_property_read_s32(const struct device_node *np,
           const char *propname,
           s32 *out_value)
{
 return of_property_read_u32(np, propname, (u32*) out_value);
}
# 1259 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_get_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_child(np, child))
  num++;

 return num;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_get_available_child_count(const struct device_node *np)
{
 struct device_node *child;
 int num = 0;

 for (child = of_get_next_available_child(np, ((void *)0)); child != ((void *)0); child = of_get_next_available_child(np, child))
  num++;

 return num;
}
# 1295 "../include/linux/of.h"
typedef int (*of_init_fn_2)(struct device_node *, struct device_node *);
typedef int (*of_init_fn_1_ret)(struct device_node *);
typedef void (*of_init_fn_1)(struct device_node *);
# 1320 "../include/linux/of.h"
struct of_changeset_entry {
 struct list_head node;
 unsigned long action;
 struct device_node *np;
 struct property *prop;
 struct property *old_prop;
};
# 1338 "../include/linux/of.h"
struct of_changeset {
 struct list_head entries;
};

enum of_reconfig_change {
 OF_RECONFIG_NO_CHANGE = 0,
 OF_RECONFIG_CHANGE_ADD,
 OF_RECONFIG_CHANGE_REMOVE,
};


extern int of_reconfig_notifier_register(struct notifier_block *);
extern int of_reconfig_notifier_unregister(struct notifier_block *);
extern int of_reconfig_notify(unsigned long, struct of_reconfig_data *rd);
extern int of_reconfig_get_state_change(unsigned long action,
     struct of_reconfig_data *arg);

extern void of_changeset_init(struct of_changeset *ocs);
extern void of_changeset_destroy(struct of_changeset *ocs);
extern int of_changeset_apply(struct of_changeset *ocs);
extern int of_changeset_revert(struct of_changeset *ocs);
extern int of_changeset_action(struct of_changeset *ocs,
  unsigned long action, struct device_node *np,
  struct property *prop);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_attach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0001, np, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_detach_node(struct of_changeset *ocs,
  struct device_node *np)
{
 return of_changeset_action(ocs, 0x0002, np, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_add_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0003, np, prop);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_remove_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0004, np, prop);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int of_changeset_update_property(struct of_changeset *ocs,
  struct device_node *np, struct property *prop)
{
 return of_changeset_action(ocs, 0x0005, np, prop);
}
# 1419 "../include/linux/of.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool of_device_is_system_power_controller(const struct device_node *np)
{
 return of_property_read_bool(np, "system-power-controller");
}





enum of_overlay_notify_action {
 OF_OVERLAY_PRE_APPLY = 0,
 OF_OVERLAY_POST_APPLY,
 OF_OVERLAY_PRE_REMOVE,
 OF_OVERLAY_POST_REMOVE,
};

struct of_overlay_notify_data {
 struct device_node *overlay;
 struct device_node *target;
};



int of_overlay_fdt_apply(const void *overlay_fdt, u32 overlay_fdt_size,
    int *ovcs_id);
int of_overlay_remove(int *ovcs_id);
int of_overlay_remove_all(void);

int of_overlay_notifier_register(struct notifier_block *nb);
int of_overlay_notifier_unregister(struct notifier_block *nb);
# 36 "../include/linux/irqdomain.h" 2



struct device_node;
struct irq_domain;
struct of_device_id;
struct irq_chip;
struct irq_data;
struct cpumask;
struct seq_file;
struct irq_affinity_desc;
# 63 "../include/linux/irqdomain.h"
struct irq_fwspec {
 struct fwnode_handle *fwnode;
 int param_count;
 u32 param[16];
};
# 76 "../include/linux/irqdomain.h"
enum irq_domain_bus_token {
 DOMAIN_BUS_ANY = 0,
 DOMAIN_BUS_WIRED,
 DOMAIN_BUS_GENERIC_MSI,
 DOMAIN_BUS_PCI_MSI,
 DOMAIN_BUS_PLATFORM_MSI,
 DOMAIN_BUS_NEXUS,
 DOMAIN_BUS_IPI,
 DOMAIN_BUS_FSL_MC_MSI,
 DOMAIN_BUS_TI_SCI_INTA_MSI,
};
# 103 "../include/linux/irqdomain.h"
struct irq_domain_ops {
 int (*match)(struct irq_domain *d, struct device_node *node,
       enum irq_domain_bus_token bus_token);
 int (*select)(struct irq_domain *d, struct irq_fwspec *fwspec,
        enum irq_domain_bus_token bus_token);
 int (*map)(struct irq_domain *d, unsigned int virq, irq_hw_number_t hw);
 void (*unmap)(struct irq_domain *d, unsigned int virq);
 int (*xlate)(struct irq_domain *d, struct device_node *node,
       const u32 *intspec, unsigned int intsize,
       unsigned long *out_hwirq, unsigned int *out_type);


 int (*alloc)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs, void *arg);
 void (*free)(struct irq_domain *d, unsigned int virq,
       unsigned int nr_irqs);
 int (*activate)(struct irq_domain *d, struct irq_data *irqd, bool reserve);
 void (*deactivate)(struct irq_domain *d, struct irq_data *irq_data);
 int (*translate)(struct irq_domain *d, struct irq_fwspec *fwspec,
    unsigned long *out_hwirq, unsigned int *out_type);


 void (*debug_show)(struct seq_file *m, struct irq_domain *d,
      struct irq_data *irqd, int ind);

};

extern struct irq_domain_ops irq_generic_chip_ops;

struct irq_domain_chip_generic;
# 160 "../include/linux/irqdomain.h"
struct irq_domain {
 struct list_head link;
 const char *name;
 const struct irq_domain_ops *ops;
 void *host_data;
 unsigned int flags;
 unsigned int mapcount;


 struct fwnode_handle *fwnode;
 enum irq_domain_bus_token bus_token;
 struct irq_domain_chip_generic *gc;

 struct irq_domain *parent;


 struct dentry *debugfs_file;



 irq_hw_number_t hwirq_max;
 unsigned int revmap_direct_max_irq;
 unsigned int revmap_size;
 struct xarray revmap_tree;
 struct mutex revmap_tree_mutex;
 unsigned int linear_revmap[];
};


enum {

 IRQ_DOMAIN_FLAG_HIERARCHY = (1 << 0),


 IRQ_DOMAIN_NAME_ALLOCATED = (1 << 6),


 IRQ_DOMAIN_FLAG_IPI_PER_CPU = (1 << 2),


 IRQ_DOMAIN_FLAG_IPI_SINGLE = (1 << 3),


 IRQ_DOMAIN_FLAG_MSI = (1 << 4),


 IRQ_DOMAIN_FLAG_MSI_REMAP = (1 << 5),






 IRQ_DOMAIN_FLAG_NONCORE = (1 << 16),
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct device_node *irq_domain_get_of_node(struct irq_domain *d)
{
 return ({ typeof(d->fwnode) __to_of_node_fwnode = (d->fwnode); is_of_node(__to_of_node_fwnode) ? ({ void *__mptr = (void *)(__to_of_node_fwnode); do { extern void __compiletime_assert_218(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(__to_of_node_fwnode)), typeof(((struct device_node *)0)->fwnode)) && !__builtin_types_compatible_p(typeof(*(__to_of_node_fwnode)), typeof(void))))) __compiletime_assert_218(); } while (0); ((struct device_node *)(__mptr - __builtin_offsetof(struct device_node, fwnode))); }) : ((void *)0); });
}


struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int type, int id,
      const char *name, phys_addr_t *pa);

enum {
 IRQCHIP_FWNODE_REAL,
 IRQCHIP_FWNODE_NAMED,
 IRQCHIP_FWNODE_NAMED_ID,
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct fwnode_handle *irq_domain_alloc_named_fwnode(const char *name)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED, 0, name, ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct fwnode_handle *irq_domain_alloc_named_id_fwnode(const char *name, int id)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_NAMED_ID, id, name,
      ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *irq_domain_alloc_fwnode(phys_addr_t *pa)
{
 return __irq_domain_alloc_fwnode(IRQCHIP_FWNODE_REAL, 0, ((void *)0), pa);
}

void irq_domain_free_fwnode(struct fwnode_handle *fwnode);
struct irq_domain *__irq_domain_add(struct fwnode_handle *fwnode, int size,
        irq_hw_number_t hwirq_max, int direct_max,
        const struct irq_domain_ops *ops,
        void *host_data);
struct irq_domain *irq_domain_add_simple(struct device_node *of_node,
      unsigned int size,
      unsigned int first_irq,
      const struct irq_domain_ops *ops,
      void *host_data);
struct irq_domain *irq_domain_add_legacy(struct device_node *of_node,
      unsigned int size,
      unsigned int first_irq,
      irq_hw_number_t first_hwirq,
      const struct irq_domain_ops *ops,
      void *host_data);
extern struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *fwspec,
         enum irq_domain_bus_token bus_token);
extern bool irq_domain_check_msi_remap(void);
extern void irq_set_default_host(struct irq_domain *host);
extern struct irq_domain *irq_get_default_host(void);
extern int irq_domain_alloc_descs(int virq, unsigned int nr_irqs,
      irq_hw_number_t hwirq, int node,
      const struct irq_affinity_desc *affinity);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *of_node_to_fwnode(struct device_node *node)
{
 return node ? &node->fwnode : ((void *)0);
}

extern const struct fwnode_operations irqchip_fwnode_ops;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_fwnode_irqchip(struct fwnode_handle *fwnode)
{
 return fwnode && fwnode->ops == &irqchip_fwnode_ops;
}

extern void irq_domain_update_bus_token(struct irq_domain *domain,
     enum irq_domain_bus_token bus_token);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__))
struct irq_domain *irq_find_matching_fwnode(struct fwnode_handle *fwnode,
         enum irq_domain_bus_token bus_token)
{
 struct irq_fwspec fwspec = {
  .fwnode = fwnode,
 };

 return irq_find_matching_fwspec(&fwspec, bus_token);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_find_matching_host(struct device_node *node,
       enum irq_domain_bus_token bus_token)
{
 return irq_find_matching_fwnode(of_node_to_fwnode(node), bus_token);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_find_host(struct device_node *node)
{
 struct irq_domain *d;

 d = irq_find_matching_host(node, DOMAIN_BUS_WIRED);
 if (!d)
  d = irq_find_matching_host(node, DOMAIN_BUS_ANY);

 return d;
}
# 324 "../include/linux/irqdomain.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_linear(struct device_node *of_node,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), size, size, 0, ops, host_data);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_nomap(struct device_node *of_node,
      unsigned int max_irq,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), 0, max_irq, max_irq, ops, host_data);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_legacy_isa(
    struct device_node *of_node,
    const struct irq_domain_ops *ops,
    void *host_data)
{
 return irq_domain_add_legacy(of_node, 16, 0, 0, ops,
         host_data);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_tree(struct device_node *of_node,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(of_node_to_fwnode(of_node), 0, ~0, 0, ops, host_data);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_create_linear(struct fwnode_handle *fwnode,
      unsigned int size,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, size, size, 0, ops, host_data);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_create_tree(struct fwnode_handle *fwnode,
      const struct irq_domain_ops *ops,
      void *host_data)
{
 return __irq_domain_add(fwnode, 0, ~0, 0, ops, host_data);
}

extern void irq_domain_remove(struct irq_domain *host);

extern int irq_domain_associate(struct irq_domain *domain, unsigned int irq,
     irq_hw_number_t hwirq);
extern void irq_domain_associate_many(struct irq_domain *domain,
          unsigned int irq_base,
          irq_hw_number_t hwirq_base, int count);
extern void irq_domain_disassociate(struct irq_domain *domain,
        unsigned int irq);

extern unsigned int irq_create_mapping(struct irq_domain *host,
           irq_hw_number_t hwirq);
extern unsigned int irq_create_fwspec_mapping(struct irq_fwspec *fwspec);
extern void irq_dispose_mapping(unsigned int virq);
# 393 "../include/linux/irqdomain.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int irq_linear_revmap(struct irq_domain *domain,
          irq_hw_number_t hwirq)
{
 return hwirq < domain->revmap_size ? domain->linear_revmap[hwirq] : 0;
}
extern unsigned int irq_find_mapping(struct irq_domain *host,
         irq_hw_number_t hwirq);
extern unsigned int irq_create_direct_mapping(struct irq_domain *host);
extern int irq_create_strict_mappings(struct irq_domain *domain,
          unsigned int irq_base,
          irq_hw_number_t hwirq_base, int count);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_create_identity_mapping(struct irq_domain *host,
           irq_hw_number_t hwirq)
{
 return irq_create_strict_mappings(host, hwirq, hwirq, 1);
}

extern const struct irq_domain_ops irq_domain_simple_ops;


int irq_domain_xlate_onecell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_twocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);
int irq_domain_xlate_onetwocell(struct irq_domain *d, struct device_node *ctrlr,
   const u32 *intspec, unsigned int intsize,
   irq_hw_number_t *out_hwirq, unsigned int *out_type);

int irq_domain_translate_twocell(struct irq_domain *d,
     struct irq_fwspec *fwspec,
     unsigned long *out_hwirq,
     unsigned int *out_type);


int irq_reserve_ipi(struct irq_domain *domain, const struct cpumask *dest);
int irq_destroy_ipi(unsigned int irq, const struct cpumask *dest);


extern struct irq_data *irq_domain_get_irq_data(struct irq_domain *domain,
      unsigned int virq);
extern void irq_domain_set_info(struct irq_domain *domain, unsigned int virq,
    irq_hw_number_t hwirq, struct irq_chip *chip,
    void *chip_data, irq_flow_handler_t handler,
    void *handler_data, const char *handler_name);

extern struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *parent,
   unsigned int flags, unsigned int size,
   struct fwnode_handle *fwnode,
   const struct irq_domain_ops *ops, void *host_data);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct irq_domain *irq_domain_add_hierarchy(struct irq_domain *parent,
         unsigned int flags,
         unsigned int size,
         struct device_node *node,
         const struct irq_domain_ops *ops,
         void *host_data)
{
 return irq_domain_create_hierarchy(parent, flags, size,
        of_node_to_fwnode(node),
        ops, host_data);
}

extern int __irq_domain_alloc_irqs(struct irq_domain *domain, int irq_base,
       unsigned int nr_irqs, int node, void *arg,
       bool realloc,
       const struct irq_affinity_desc *affinity);
extern void irq_domain_free_irqs(unsigned int virq, unsigned int nr_irqs);
extern int irq_domain_activate_irq(struct irq_data *irq_data, bool early);
extern void irq_domain_deactivate_irq(struct irq_data *irq_data);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int irq_domain_alloc_irqs(struct irq_domain *domain,
   unsigned int nr_irqs, int node, void *arg)
{
 return __irq_domain_alloc_irqs(domain, -1, nr_irqs, node, arg, false,
           ((void *)0));
}

extern int irq_domain_alloc_irqs_hierarchy(struct irq_domain *domain,
        unsigned int irq_base,
        unsigned int nr_irqs, void *arg);
extern int irq_domain_set_hwirq_and_chip(struct irq_domain *domain,
      unsigned int virq,
      irq_hw_number_t hwirq,
      struct irq_chip *chip,
      void *chip_data);
extern void irq_domain_reset_irq_data(struct irq_data *irq_data);
extern void irq_domain_free_irqs_common(struct irq_domain *domain,
     unsigned int virq,
     unsigned int nr_irqs);
extern void irq_domain_free_irqs_top(struct irq_domain *domain,
         unsigned int virq, unsigned int nr_irqs);

extern int irq_domain_push_irq(struct irq_domain *domain, int virq, void *arg);
extern int irq_domain_pop_irq(struct irq_domain *domain, int virq);

extern int irq_domain_alloc_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs, void *arg);

extern void irq_domain_free_irqs_parent(struct irq_domain *domain,
     unsigned int irq_base,
     unsigned int nr_irqs);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_hierarchy(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_HIERARCHY;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_ipi(struct irq_domain *domain)
{
 return domain->flags &
  (IRQ_DOMAIN_FLAG_IPI_PER_CPU | IRQ_DOMAIN_FLAG_IPI_SINGLE);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_ipi_per_cpu(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_PER_CPU;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_ipi_single(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_IPI_SINGLE;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_msi(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool irq_domain_is_msi_remap(struct irq_domain *domain)
{
 return domain->flags & IRQ_DOMAIN_FLAG_MSI_REMAP;
}

extern bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *domain);
# 14 "../include/linux/acpi.h" 2








# 1 "../include/acpi/acpi.h" 1
# 22 "../include/acpi/acpi.h"
# 1 "../include/acpi/platform/acenv.h" 1
# 141 "../include/acpi/platform/acenv.h"
# 1 "../include/acpi/platform/acgcc.h" 1
# 142 "../include/acpi/platform/acenv.h" 2
# 152 "../include/acpi/platform/acenv.h"
# 1 "../include/acpi/platform/aclinux.h" 1
# 54 "../include/acpi/platform/aclinux.h"
# 1 "../include/linux/ctype.h" 1
# 19 "../include/linux/ctype.h"
extern const unsigned char _ctype[];






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isdigit(int c)
{
 return '0' <= c && c <= '9';
}
# 42 "../include/linux/ctype.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __tolower(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x01)) != 0))
  c -= 'A'-'a';
 return c;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char __toupper(unsigned char c)
{
 if ((((_ctype[(int)(unsigned char)(c)])&(0x02)) != 0))
  c -= 'a'-'A';
 return c;
}
# 63 "../include/linux/ctype.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char _tolower(const char c)
{
 return c | 0x20;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int isodigit(const char c)
{
 return c >= '0' && c <= '7';
}
# 55 "../include/acpi/platform/aclinux.h" 2
# 64 "../include/acpi/platform/aclinux.h"
# 1 "../arch/arm64/include/asm/acenv.h" 1
# 65 "../include/acpi/platform/aclinux.h" 2
# 153 "../include/acpi/platform/acenv.h" 2
# 23 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/acnames.h" 1
# 24 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/actypes.h" 1
# 125 "../include/acpi/actypes.h"
typedef s64 acpi_native_int;

typedef u64 acpi_size;
typedef u64 acpi_io_address;
typedef u64 acpi_physical_address;
# 421 "../include/acpi/actypes.h"
typedef u32 acpi_status;
typedef u32 acpi_name;
typedef char *acpi_string;
typedef void *acpi_handle;
# 445 "../include/acpi/actypes.h"
typedef u16 acpi_owner_id;
# 472 "../include/acpi/actypes.h"
typedef u64 acpi_integer;
# 634 "../include/acpi/actypes.h"
typedef u32 acpi_object_type;
# 706 "../include/acpi/actypes.h"
typedef u32 acpi_event_type;
# 737 "../include/acpi/actypes.h"
typedef u32 acpi_event_status;
# 804 "../include/acpi/actypes.h"
typedef u8 acpi_adr_space_type;
# 897 "../include/acpi/actypes.h"
union acpi_object {
 acpi_object_type type;
 struct {
  acpi_object_type type;
  u64 value;
 } integer;

 struct {
  acpi_object_type type;
  u32 length;
  char *pointer;
 } string;

 struct {
  acpi_object_type type;
  u32 length;
  u8 *pointer;
 } buffer;

 struct {
  acpi_object_type type;
  u32 count;
  union acpi_object *elements;
 } package;

 struct {
  acpi_object_type type;
  acpi_object_type actual_type;
  acpi_handle handle;
 } reference;

 struct {
  acpi_object_type type;
  u32 proc_id;
  acpi_io_address pblk_address;
  u32 pblk_length;
 } processor;

 struct {
  acpi_object_type type;
  u32 system_level;
  u32 resource_order;
 } power_resource;
};




struct acpi_object_list {
 u32 count;
 union acpi_object *pointer;
};
# 967 "../include/acpi/actypes.h"
struct acpi_buffer {
 acpi_size length;
 void *pointer;
};
# 983 "../include/acpi/actypes.h"
struct acpi_predefined_names {
 const char *name;
 u8 type;
 char *val;
};
# 1000 "../include/acpi/actypes.h"
struct acpi_system_info {
 u32 acpi_ca_version;
 u32 flags;
 u32 timer_resolution;
 u32 reserved1;
 u32 reserved2;
 u32 debug_level;
 u32 debug_layer;
};




struct acpi_statistics {
 u32 sci_count;
 u32 gpe_count;
 u32 fixed_event_count[4 + 1];
 u32 method_count;
};




typedef u32
 ( * acpi_osd_handler) (void *context);

typedef void
 ( * acpi_osd_exec_callback) (void *context);




typedef
u32 (*acpi_sci_handler) (void *context);

typedef
void (*acpi_gbl_event_handler) (u32 event_type,
          acpi_handle device,
          u32 event_number, void *context);




typedef
u32(*acpi_event_handler) (void *context);

typedef
u32 (*acpi_gpe_handler) (acpi_handle gpe_device, u32 gpe_number, void *context);

typedef
void (*acpi_notify_handler) (acpi_handle device, u32 value, void *context);

typedef
void (*acpi_object_handler) (acpi_handle object, void *data);

typedef
acpi_status (*acpi_init_handler) (acpi_handle object, u32 function);



typedef
acpi_status (*acpi_exception_handler) (acpi_status aml_status,
           acpi_name name,
           u16 opcode,
           u32 aml_offset, void *context);



typedef
acpi_status (*acpi_table_handler) (u32 event, void *table, void *context);
# 1081 "../include/acpi/actypes.h"
typedef
acpi_status (*acpi_adr_space_handler) (u32 function,
           acpi_physical_address address,
           u32 bit_width,
           u64 *value,
           void *handler_context,
           void *region_context);





struct acpi_connection_info {
 u8 *connection;
 u16 length;
 u8 access_length;
};

typedef
acpi_status (*acpi_adr_space_setup) (acpi_handle region_handle,
         u32 function,
         void *handler_context,
         void **region_context);




typedef
acpi_status (*acpi_walk_callback) (acpi_handle object,
       u32 nesting_level,
       void *context, void **return_value);

typedef
u32 (*acpi_interface_handler) (acpi_string interface_name, u32 supported);
# 1139 "../include/acpi/actypes.h"
struct acpi_pnp_device_id {
 u32 length;
 char *string;
};

struct acpi_pnp_device_id_list {
 u32 count;
 u32 list_size;
 struct acpi_pnp_device_id ids[1];
};





struct acpi_device_info {
 u32 info_size;
 u32 name;
 acpi_object_type type;
 u8 param_count;
 u16 valid;
 u8 flags;
 u8 highest_dstates[4];
 u8 lowest_dstates[5];
 u64 address;
 struct acpi_pnp_device_id hardware_id;
 struct acpi_pnp_device_id unique_id;
 struct acpi_pnp_device_id class_code;
 struct acpi_pnp_device_id_list compatible_id_list;
};
# 1195 "../include/acpi/actypes.h"
struct acpi_pci_id {
 u16 segment;
 u16 bus;
 u16 device;
 u16 function;
};

struct acpi_mem_space_context {
 u32 length;
 acpi_physical_address address;
 acpi_physical_address mapped_physical_address;
 u8 *mapped_logical_address;
 acpi_size mapped_length;
};




struct acpi_memory_list {
 const char *list_name;
 void *list_head;
 u16 object_size;
 u16 max_depth;
 u16 current_depth;
# 1232 "../include/acpi/actypes.h"
};



typedef enum {
 ACPI_TRACE_AML_METHOD,
 ACPI_TRACE_AML_OPCODE,
 ACPI_TRACE_AML_REGION
} acpi_trace_event_type;
# 25 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/acexcep.h" 1
# 40 "../include/acpi/acexcep.h"
struct acpi_exception_info {
 char *name;




};
# 26 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/actbl.h" 1
# 47 "../include/acpi/actbl.h"
#pragma pack(1)
# 68 "../include/acpi/actbl.h"
struct acpi_table_header {
 char signature[4];
 u32 length;
 u8 revision;
 u8 checksum;
 char oem_id[6];
 char oem_table_id[8];
 u32 oem_revision;
 char asl_compiler_id[4];
 u32 asl_compiler_revision;
};
# 90 "../include/acpi/actbl.h"
struct acpi_generic_address {
 u8 space_id;
 u8 bit_width;
 u8 bit_offset;
 u8 access_width;
 u64 address;
};
# 105 "../include/acpi/actbl.h"
struct acpi_table_rsdp {
 char signature[8];
 u8 checksum;
 char oem_id[6];
 u8 revision;
 u32 rsdt_physical_address;
 u32 length;
 u64 xsdt_physical_address;
 u8 extended_checksum;
 u8 reserved[3];
};



struct acpi_rsdp_common {
 char signature[8];
 u8 checksum;
 char oem_id[6];
 u8 revision;
 u32 rsdt_physical_address;
};



struct acpi_rsdp_extension {
 u32 length;
 u64 xsdt_physical_address;
 u8 extended_checksum;
 u8 reserved[3];
};
# 143 "../include/acpi/actbl.h"
struct acpi_table_rsdt {
 struct acpi_table_header header;
 u32 table_offset_entry[1];
};

struct acpi_table_xsdt {
 struct acpi_table_header header;
 u64 table_offset_entry[1];
};
# 162 "../include/acpi/actbl.h"
struct acpi_table_facs {
 char signature[4];
 u32 length;
 u32 hardware_signature;
 u32 firmware_waking_vector;
 u32 global_lock;
 u32 flags;
 u64 xfirmware_waking_vector;
 u8 version;
 u8 reserved[3];
 u32 ospm_flags;
 u8 reserved1[24];
};
# 199 "../include/acpi/actbl.h"
struct acpi_table_fadt {
 struct acpi_table_header header;
 u32 facs;
 u32 dsdt;
 u8 model;
 u8 preferred_profile;
 u16 sci_interrupt;
 u32 smi_command;
 u8 acpi_enable;
 u8 acpi_disable;
 u8 s4_bios_request;
 u8 pstate_control;
 u32 pm1a_event_block;
 u32 pm1b_event_block;
 u32 pm1a_control_block;
 u32 pm1b_control_block;
 u32 pm2_control_block;
 u32 pm_timer_block;
 u32 gpe0_block;
 u32 gpe1_block;
 u8 pm1_event_length;
 u8 pm1_control_length;
 u8 pm2_control_length;
 u8 pm_timer_length;
 u8 gpe0_block_length;
 u8 gpe1_block_length;
 u8 gpe1_base;
 u8 cst_control;
 u16 c2_latency;
 u16 c3_latency;
 u16 flush_size;
 u16 flush_stride;
 u8 duty_offset;
 u8 duty_width;
 u8 day_alarm;
 u8 month_alarm;
 u8 century;
 u16 boot_flags;
 u8 reserved;
 u32 flags;
 struct acpi_generic_address reset_register;
 u8 reset_value;
 u16 arm_boot_flags;
 u8 minor_revision;
 u64 Xfacs;
 u64 Xdsdt;
 struct acpi_generic_address xpm1a_event_block;
 struct acpi_generic_address xpm1b_event_block;
 struct acpi_generic_address xpm1a_control_block;
 struct acpi_generic_address xpm1b_control_block;
 struct acpi_generic_address xpm2_control_block;
 struct acpi_generic_address xpm_timer_block;
 struct acpi_generic_address xgpe0_block;
 struct acpi_generic_address xgpe1_block;
 struct acpi_generic_address sleep_control;
 struct acpi_generic_address sleep_status;
 u64 hypervisor_id;
};
# 301 "../include/acpi/actbl.h"
enum acpi_preferred_pm_profiles {
 PM_UNSPECIFIED = 0,
 PM_DESKTOP = 1,
 PM_MOBILE = 2,
 PM_WORKSTATION = 3,
 PM_ENTERPRISE_SERVER = 4,
 PM_SOHO_SERVER = 5,
 PM_APPLIANCE_PC = 6,
 PM_PERFORMANCE_SERVER = 7,
 PM_TABLET = 8
};
# 322 "../include/acpi/actbl.h"
#pragma pack()




union acpi_name_union {
 u32 integer;
 char ascii[4];
};



struct acpi_table_desc {
 acpi_physical_address address;
 struct acpi_table_header *pointer;
 u32 length;
 union acpi_name_union signature;
 acpi_owner_id owner_id;
 u8 flags;
 u16 validation_count;
};
# 370 "../include/acpi/actbl.h"
# 1 "../include/acpi/actbl1.h" 1
# 68 "../include/acpi/actbl1.h"
#pragma pack(1)
# 90 "../include/acpi/actbl1.h"
struct acpi_subtable_header {
 u8 type;
 u8 length;
};



struct acpi_whea_header {
 u8 action;
 u8 instruction;
 u8 flags;
 u8 reserved;
 struct acpi_generic_address register_region;
 u64 value;
 u64 mask;
};
# 116 "../include/acpi/actbl1.h"
struct acpi_table_asf {
 struct acpi_table_header header;
};



struct acpi_asf_header {
 u8 type;
 u8 reserved;
 u16 length;
};



enum acpi_asf_type {
 ACPI_ASF_TYPE_INFO = 0,
 ACPI_ASF_TYPE_ALERT = 1,
 ACPI_ASF_TYPE_CONTROL = 2,
 ACPI_ASF_TYPE_BOOT = 3,
 ACPI_ASF_TYPE_ADDRESS = 4,
 ACPI_ASF_TYPE_RESERVED = 5
};







struct acpi_asf_info {
 struct acpi_asf_header header;
 u8 min_reset_value;
 u8 min_poll_interval;
 u16 system_id;
 u32 mfg_id;
 u8 flags;
 u8 reserved2[3];
};







struct acpi_asf_alert {
 struct acpi_asf_header header;
 u8 assert_mask;
 u8 deassert_mask;
 u8 alerts;
 u8 data_length;
};

struct acpi_asf_alert_data {
 u8 address;
 u8 command;
 u8 mask;
 u8 value;
 u8 sensor_type;
 u8 type;
 u8 offset;
 u8 source_type;
 u8 severity;
 u8 sensor_number;
 u8 entity;
 u8 instance;
};



struct acpi_asf_remote {
 struct acpi_asf_header header;
 u8 controls;
 u8 data_length;
 u16 reserved2;
};

struct acpi_asf_control_data {
 u8 function;
 u8 address;
 u8 command;
 u8 value;
};



struct acpi_asf_rmcp {
 struct acpi_asf_header header;
 u8 capabilities[7];
 u8 completion_code;
 u32 enterprise_id;
 u8 command;
 u16 parameter;
 u16 boot_options;
 u16 oem_parameters;
};



struct acpi_asf_address {
 struct acpi_asf_header header;
 u8 eprom_address;
 u8 devices;
};
# 228 "../include/acpi/actbl1.h"
struct acpi_table_bert {
 struct acpi_table_header header;
 u32 region_length;
 u64 address;
};



struct acpi_bert_region {
 u32 block_status;
 u32 raw_data_offset;
 u32 raw_data_length;
 u32 data_length;
 u32 error_severity;
};
# 254 "../include/acpi/actbl1.h"
enum acpi_bert_error_severity {
 ACPI_BERT_ERROR_CORRECTABLE = 0,
 ACPI_BERT_ERROR_FATAL = 1,
 ACPI_BERT_ERROR_CORRECTED = 2,
 ACPI_BERT_ERROR_NONE = 3,
 ACPI_BERT_ERROR_RESERVED = 4
};
# 274 "../include/acpi/actbl1.h"
struct acpi_table_bgrt {
 struct acpi_table_header header;
 u16 version;
 u8 status;
 u8 image_type;
 u64 image_address;
 u32 image_offset_x;
 u32 image_offset_y;
};
# 298 "../include/acpi/actbl1.h"
struct acpi_table_boot {
 struct acpi_table_header header;
 u8 cmos_index;
 u8 reserved[3];
};
# 311 "../include/acpi/actbl1.h"
struct acpi_table_cpep {
 struct acpi_table_header header;
 u64 reserved;
};



struct acpi_cpep_polling {
 struct acpi_subtable_header header;
 u8 id;
 u8 eid;
 u32 interval;
};
# 334 "../include/acpi/actbl1.h"
struct acpi_table_csrt {
 struct acpi_table_header header;
};



struct acpi_csrt_group {
 u32 length;
 u32 vendor_id;
 u32 subvendor_id;
 u16 device_id;
 u16 subdevice_id;
 u16 revision;
 u16 reserved;
 u32 shared_info_length;


};



struct acpi_csrt_shared_info {
 u16 major_version;
 u16 minor_version;
 u32 mmio_base_low;
 u32 mmio_base_high;
 u32 gsi_interrupt;
 u8 interrupt_polarity;
 u8 interrupt_mode;
 u8 num_channels;
 u8 dma_address_width;
 u16 base_request_line;
 u16 num_handshake_signals;
 u32 max_block_size;


};



struct acpi_csrt_descriptor {
 u32 length;
 u16 type;
 u16 subtype;
 u32 uid;


};
# 406 "../include/acpi/actbl1.h"
struct acpi_table_dbg2 {
 struct acpi_table_header header;
 u32 info_offset;
 u32 info_count;
};

struct acpi_dbg2_header {
 u32 info_offset;
 u32 info_count;
};



struct acpi_dbg2_device {
 u8 revision;
 u16 length;
 u8 register_count;
 u16 namepath_length;
 u16 namepath_offset;
 u16 oem_data_length;
 u16 oem_data_offset;
 u16 port_type;
 u16 port_subtype;
 u16 reserved;
 u16 base_address_offset;
 u16 address_size_offset;







};
# 472 "../include/acpi/actbl1.h"
struct acpi_table_dbgp {
 struct acpi_table_header header;
 u8 type;
 u8 reserved[3];
 struct acpi_generic_address debug_port;
};
# 489 "../include/acpi/actbl1.h"
struct acpi_table_dmar {
 struct acpi_table_header header;
 u8 width;
 u8 flags;
 u8 reserved[10];
};
# 504 "../include/acpi/actbl1.h"
struct acpi_dmar_header {
 u16 type;
 u16 length;
};



enum acpi_dmar_type {
 ACPI_DMAR_TYPE_HARDWARE_UNIT = 0,
 ACPI_DMAR_TYPE_RESERVED_MEMORY = 1,
 ACPI_DMAR_TYPE_ROOT_ATS = 2,
 ACPI_DMAR_TYPE_HARDWARE_AFFINITY = 3,
 ACPI_DMAR_TYPE_NAMESPACE = 4,
 ACPI_DMAR_TYPE_RESERVED = 5
};



struct acpi_dmar_device_scope {
 u8 entry_type;
 u8 length;
 u16 reserved;
 u8 enumeration_id;
 u8 bus;
};



enum acpi_dmar_scope_type {
 ACPI_DMAR_SCOPE_TYPE_NOT_USED = 0,
 ACPI_DMAR_SCOPE_TYPE_ENDPOINT = 1,
 ACPI_DMAR_SCOPE_TYPE_BRIDGE = 2,
 ACPI_DMAR_SCOPE_TYPE_IOAPIC = 3,
 ACPI_DMAR_SCOPE_TYPE_HPET = 4,
 ACPI_DMAR_SCOPE_TYPE_NAMESPACE = 5,
 ACPI_DMAR_SCOPE_TYPE_RESERVED = 6
};

struct acpi_dmar_pci_path {
 u8 device;
 u8 function;
};







struct acpi_dmar_hardware_unit {
 struct acpi_dmar_header header;
 u8 flags;
 u8 reserved;
 u16 segment;
 u64 address;
};







struct acpi_dmar_reserved_memory {
 struct acpi_dmar_header header;
 u16 reserved;
 u16 segment;
 u64 base_address;
 u64 end_address;
};







struct acpi_dmar_atsr {
 struct acpi_dmar_header header;
 u8 flags;
 u8 reserved;
 u16 segment;
};







struct acpi_dmar_rhsa {
 struct acpi_dmar_header header;
 u32 reserved;
 u64 base_address;
 u32 proximity_domain;
};



struct acpi_dmar_andd {
 struct acpi_dmar_header header;
 u8 reserved[3];
 u8 device_number;
 char device_name[1];
};
# 618 "../include/acpi/actbl1.h"
struct acpi_table_drtm {
 struct acpi_table_header header;
 u64 entry_base_address;
 u64 entry_length;
 u32 entry_address32;
 u64 entry_address64;
 u64 exit_address;
 u64 log_area_address;
 u32 log_area_length;
 u64 arch_dependent_address;
 u32 flags;
};
# 640 "../include/acpi/actbl1.h"
struct acpi_drtm_vtable_list {
 u32 validated_table_count;
 u64 validated_tables[1];
};





struct acpi_drtm_resource {
 u8 size[7];
 u8 type;
 u64 address;
};

struct acpi_drtm_resource_list {
 u32 resource_count;
 struct acpi_drtm_resource resources[1];
};



struct acpi_drtm_dps_id {
 u32 dps_id_length;
 u8 dps_id[16];
};
# 674 "../include/acpi/actbl1.h"
struct acpi_table_ecdt {
 struct acpi_table_header header;
 struct acpi_generic_address control;
 struct acpi_generic_address data;
 u32 uid;
 u8 gpe;
 u8 id[1];
};
# 690 "../include/acpi/actbl1.h"
struct acpi_table_einj {
 struct acpi_table_header header;
 u32 header_length;
 u8 flags;
 u8 reserved[3];
 u32 entries;
};



struct acpi_einj_entry {
 struct acpi_whea_header whea_header;
};







enum acpi_einj_actions {
 ACPI_EINJ_BEGIN_OPERATION = 0,
 ACPI_EINJ_GET_TRIGGER_TABLE = 1,
 ACPI_EINJ_SET_ERROR_TYPE = 2,
 ACPI_EINJ_GET_ERROR_TYPE = 3,
 ACPI_EINJ_END_OPERATION = 4,
 ACPI_EINJ_EXECUTE_OPERATION = 5,
 ACPI_EINJ_CHECK_BUSY_STATUS = 6,
 ACPI_EINJ_GET_COMMAND_STATUS = 7,
 ACPI_EINJ_SET_ERROR_TYPE_WITH_ADDRESS = 8,
 ACPI_EINJ_GET_EXECUTE_TIMINGS = 9,
 ACPI_EINJ_ACTION_RESERVED = 10,
 ACPI_EINJ_TRIGGER_ERROR = 0xFF
};



enum acpi_einj_instructions {
 ACPI_EINJ_READ_REGISTER = 0,
 ACPI_EINJ_READ_REGISTER_VALUE = 1,
 ACPI_EINJ_WRITE_REGISTER = 2,
 ACPI_EINJ_WRITE_REGISTER_VALUE = 3,
 ACPI_EINJ_NOOP = 4,
 ACPI_EINJ_FLUSH_CACHELINE = 5,
 ACPI_EINJ_INSTRUCTION_RESERVED = 6
};

struct acpi_einj_error_type_with_addr {
 u32 error_type;
 u32 vendor_struct_offset;
 u32 flags;
 u32 apic_id;
 u64 address;
 u64 range;
 u32 pcie_id;
};

struct acpi_einj_vendor {
 u32 length;
 u32 pcie_id;
 u16 vendor_id;
 u16 device_id;
 u8 revision_id;
 u8 reserved[3];
};



struct acpi_einj_trigger {
 u32 header_size;
 u32 revision;
 u32 table_size;
 u32 entry_count;
};



enum acpi_einj_command_status {
 ACPI_EINJ_SUCCESS = 0,
 ACPI_EINJ_FAILURE = 1,
 ACPI_EINJ_INVALID_ACCESS = 2,
 ACPI_EINJ_STATUS_RESERVED = 3
};
# 797 "../include/acpi/actbl1.h"
struct acpi_table_erst {
 struct acpi_table_header header;
 u32 header_length;
 u32 reserved;
 u32 entries;
};



struct acpi_erst_entry {
 struct acpi_whea_header whea_header;
};







enum acpi_erst_actions {
 ACPI_ERST_BEGIN_WRITE = 0,
 ACPI_ERST_BEGIN_READ = 1,
 ACPI_ERST_BEGIN_CLEAR = 2,
 ACPI_ERST_END = 3,
 ACPI_ERST_SET_RECORD_OFFSET = 4,
 ACPI_ERST_EXECUTE_OPERATION = 5,
 ACPI_ERST_CHECK_BUSY_STATUS = 6,
 ACPI_ERST_GET_COMMAND_STATUS = 7,
 ACPI_ERST_GET_RECORD_ID = 8,
 ACPI_ERST_SET_RECORD_ID = 9,
 ACPI_ERST_GET_RECORD_COUNT = 10,
 ACPI_ERST_BEGIN_DUMMY_WRIITE = 11,
 ACPI_ERST_NOT_USED = 12,
 ACPI_ERST_GET_ERROR_RANGE = 13,
 ACPI_ERST_GET_ERROR_LENGTH = 14,
 ACPI_ERST_GET_ERROR_ATTRIBUTES = 15,
 ACPI_ERST_EXECUTE_TIMINGS = 16,
 ACPI_ERST_ACTION_RESERVED = 17
};



enum acpi_erst_instructions {
 ACPI_ERST_READ_REGISTER = 0,
 ACPI_ERST_READ_REGISTER_VALUE = 1,
 ACPI_ERST_WRITE_REGISTER = 2,
 ACPI_ERST_WRITE_REGISTER_VALUE = 3,
 ACPI_ERST_NOOP = 4,
 ACPI_ERST_LOAD_VAR1 = 5,
 ACPI_ERST_LOAD_VAR2 = 6,
 ACPI_ERST_STORE_VAR1 = 7,
 ACPI_ERST_ADD = 8,
 ACPI_ERST_SUBTRACT = 9,
 ACPI_ERST_ADD_VALUE = 10,
 ACPI_ERST_SUBTRACT_VALUE = 11,
 ACPI_ERST_STALL = 12,
 ACPI_ERST_STALL_WHILE_TRUE = 13,
 ACPI_ERST_SKIP_NEXT_IF_TRUE = 14,
 ACPI_ERST_GOTO = 15,
 ACPI_ERST_SET_SRC_ADDRESS_BASE = 16,
 ACPI_ERST_SET_DST_ADDRESS_BASE = 17,
 ACPI_ERST_MOVE_DATA = 18,
 ACPI_ERST_INSTRUCTION_RESERVED = 19
};



enum acpi_erst_command_status {
 ACPI_ERST_SUCESS = 0,
 ACPI_ERST_NO_SPACE = 1,
 ACPI_ERST_NOT_AVAILABLE = 2,
 ACPI_ERST_FAILURE = 3,
 ACPI_ERST_RECORD_EMPTY = 4,
 ACPI_ERST_NOT_FOUND = 5,
 ACPI_ERST_STATUS_RESERVED = 6
};



struct acpi_erst_info {
 u16 signature;
 u8 data[48];
};
# 888 "../include/acpi/actbl1.h"
struct acpi_table_fpdt {
 struct acpi_table_header header;
};



struct acpi_fpdt_header {
 u16 type;
 u8 length;
 u8 revision;
};



enum acpi_fpdt_type {
 ACPI_FPDT_TYPE_BOOT = 0,
 ACPI_FPDT_TYPE_S3PERF = 1
};







struct acpi_fpdt_boot_pointer {
 struct acpi_fpdt_header header;
 u8 reserved[4];
 u64 address;
};



struct acpi_fpdt_s3pt_pointer {
 struct acpi_fpdt_header header;
 u8 reserved[4];
 u64 address;
};





struct acpi_table_s3pt {
 u8 signature[4];
 u32 length;
};







enum acpi_s3pt_type {
 ACPI_S3PT_TYPE_RESUME = 0,
 ACPI_S3PT_TYPE_SUSPEND = 1,
 ACPI_FPDT_BOOT_PERFORMANCE = 2
};

struct acpi_s3pt_resume {
 struct acpi_fpdt_header header;
 u32 resume_count;
 u64 full_resume;
 u64 average_resume;
};

struct acpi_s3pt_suspend {
 struct acpi_fpdt_header header;
 u64 suspend_start;
 u64 suspend_end;
};




struct acpi_fpdt_boot {
 struct acpi_fpdt_header header;
 u8 reserved[4];
 u64 reset_end;
 u64 load_start;
 u64 startup_start;
 u64 exit_services_entry;
 u64 exit_services_exit;
};
# 981 "../include/acpi/actbl1.h"
struct acpi_table_gtdt {
 struct acpi_table_header header;
 u64 counter_block_addresss;
 u32 reserved;
 u32 secure_el1_interrupt;
 u32 secure_el1_flags;
 u32 non_secure_el1_interrupt;
 u32 non_secure_el1_flags;
 u32 virtual_timer_interrupt;
 u32 virtual_timer_flags;
 u32 non_secure_el2_interrupt;
 u32 non_secure_el2_flags;
 u64 counter_read_block_address;
 u32 platform_timer_count;
 u32 platform_timer_offset;
};







struct acpi_gtdt_el2 {
 u32 virtual_el2_timer_gsiv;
 u32 virtual_el2_timer_flags;
};



struct acpi_gtdt_header {
 u8 type;
 u16 length;
};



enum acpi_gtdt_type {
 ACPI_GTDT_TYPE_TIMER_BLOCK = 0,
 ACPI_GTDT_TYPE_WATCHDOG = 1,
 ACPI_GTDT_TYPE_RESERVED = 2
};





struct acpi_gtdt_timer_block {
 struct acpi_gtdt_header header;
 u8 reserved;
 u64 block_address;
 u32 timer_count;
 u32 timer_offset;
};



struct acpi_gtdt_timer_entry {
 u8 frame_number;
 u8 reserved[3];
 u64 base_address;
 u64 el0_base_address;
 u32 timer_interrupt;
 u32 timer_flags;
 u32 virtual_timer_interrupt;
 u32 virtual_timer_flags;
 u32 common_flags;
};
# 1062 "../include/acpi/actbl1.h"
struct acpi_gtdt_watchdog {
 struct acpi_gtdt_header header;
 u8 reserved;
 u64 refresh_frame_address;
 u64 control_frame_address;
 u32 timer_interrupt;
 u32 timer_flags;
};
# 1084 "../include/acpi/actbl1.h"
struct acpi_table_hest {
 struct acpi_table_header header;
 u32 error_source_count;
};



struct acpi_hest_header {
 u16 type;
 u16 source_id;
};



enum acpi_hest_types {
 ACPI_HEST_TYPE_IA32_CHECK = 0,
 ACPI_HEST_TYPE_IA32_CORRECTED_CHECK = 1,
 ACPI_HEST_TYPE_IA32_NMI = 2,
 ACPI_HEST_TYPE_NOT_USED3 = 3,
 ACPI_HEST_TYPE_NOT_USED4 = 4,
 ACPI_HEST_TYPE_NOT_USED5 = 5,
 ACPI_HEST_TYPE_AER_ROOT_PORT = 6,
 ACPI_HEST_TYPE_AER_ENDPOINT = 7,
 ACPI_HEST_TYPE_AER_BRIDGE = 8,
 ACPI_HEST_TYPE_GENERIC_ERROR = 9,
 ACPI_HEST_TYPE_GENERIC_ERROR_V2 = 10,
 ACPI_HEST_TYPE_IA32_DEFERRED_CHECK = 11,
 ACPI_HEST_TYPE_RESERVED = 12
};
# 1122 "../include/acpi/actbl1.h"
struct acpi_hest_ia_error_bank {
 u8 bank_number;
 u8 clear_status_on_init;
 u8 status_format;
 u8 reserved;
 u32 control_register;
 u64 control_data;
 u32 status_register;
 u32 address_register;
 u32 misc_register;
};



struct acpi_hest_aer_common {
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 bus;
 u16 device;
 u16 function;
 u16 device_control;
 u16 reserved2;
 u32 uncorrectable_mask;
 u32 uncorrectable_severity;
 u32 correctable_mask;
 u32 advanced_capabilities;
};
# 1169 "../include/acpi/actbl1.h"
struct acpi_hest_notify {
 u8 type;
 u8 length;
 u16 config_write_enable;
 u32 poll_interval;
 u32 vector;
 u32 polling_threshold_value;
 u32 polling_threshold_window;
 u32 error_threshold_value;
 u32 error_threshold_window;
};



enum acpi_hest_notify_types {
 ACPI_HEST_NOTIFY_POLLED = 0,
 ACPI_HEST_NOTIFY_EXTERNAL = 1,
 ACPI_HEST_NOTIFY_LOCAL = 2,
 ACPI_HEST_NOTIFY_SCI = 3,
 ACPI_HEST_NOTIFY_NMI = 4,
 ACPI_HEST_NOTIFY_CMCI = 5,
 ACPI_HEST_NOTIFY_MCE = 6,
 ACPI_HEST_NOTIFY_GPIO = 7,
 ACPI_HEST_NOTIFY_SEA = 8,
 ACPI_HEST_NOTIFY_SEI = 9,
 ACPI_HEST_NOTIFY_GSIV = 10,
 ACPI_HEST_NOTIFY_SOFTWARE_DELEGATED = 11,
 ACPI_HEST_NOTIFY_RESERVED = 12
};
# 1214 "../include/acpi/actbl1.h"
struct acpi_hest_ia_machine_check {
 struct acpi_hest_header header;
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u64 global_capability_data;
 u64 global_control_data;
 u8 num_hardware_banks;
 u8 reserved3[7];
};



struct acpi_hest_ia_corrected {
 struct acpi_hest_header header;
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 struct acpi_hest_notify notify;
 u8 num_hardware_banks;
 u8 reserved2[3];
};



struct acpi_hest_ia_nmi {
 struct acpi_hest_header header;
 u32 reserved;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 max_raw_data_length;
};





struct acpi_hest_aer_root {
 struct acpi_hest_header header;
 struct acpi_hest_aer_common aer;
 u32 root_error_command;
};



struct acpi_hest_aer {
 struct acpi_hest_header header;
 struct acpi_hest_aer_common aer;
};



struct acpi_hest_aer_bridge {
 struct acpi_hest_header header;
 struct acpi_hest_aer_common aer;
 u32 uncorrectable_mask2;
 u32 uncorrectable_severity2;
 u32 advanced_capabilities2;
};



struct acpi_hest_generic {
 struct acpi_hest_header header;
 u16 related_source_id;
 u8 reserved;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 max_raw_data_length;
 struct acpi_generic_address error_status_address;
 struct acpi_hest_notify notify;
 u32 error_block_length;
};



struct acpi_hest_generic_v2 {
 struct acpi_hest_header header;
 u16 related_source_id;
 u8 reserved;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 u32 max_raw_data_length;
 struct acpi_generic_address error_status_address;
 struct acpi_hest_notify notify;
 u32 error_block_length;
 struct acpi_generic_address read_ack_register;
 u64 read_ack_preserve;
 u64 read_ack_write;
};



struct acpi_hest_generic_status {
 u32 block_status;
 u32 raw_data_offset;
 u32 raw_data_length;
 u32 data_length;
 u32 error_severity;
};
# 1331 "../include/acpi/actbl1.h"
struct acpi_hest_generic_data {
 u8 section_type[16];
 u32 error_severity;
 u16 revision;
 u8 validation_bits;
 u8 flags;
 u32 error_data_length;
 u8 fru_id[16];
 u8 fru_text[20];
};



struct acpi_hest_generic_data_v300 {
 u8 section_type[16];
 u32 error_severity;
 u16 revision;
 u8 validation_bits;
 u8 flags;
 u32 error_data_length;
 u8 fru_id[16];
 u8 fru_text[20];
 u64 time_stamp;
};
# 1371 "../include/acpi/actbl1.h"
struct acpi_hest_ia_deferred_check {
 struct acpi_hest_header header;
 u16 reserved1;
 u8 flags;
 u8 enabled;
 u32 records_to_preallocate;
 u32 max_sections_per_record;
 struct acpi_hest_notify notify;
 u8 num_hardware_banks;
 u8 reserved2[3];
};
# 1390 "../include/acpi/actbl1.h"
struct acpi_table_hmat {
 struct acpi_table_header header;
 u32 reserved;
};



enum acpi_hmat_type {
 ACPI_HMAT_TYPE_PROXIMITY = 0,
 ACPI_HMAT_TYPE_LOCALITY = 1,
 ACPI_HMAT_TYPE_CACHE = 2,
 ACPI_HMAT_TYPE_RESERVED = 3
};

struct acpi_hmat_structure {
 u16 type;
 u16 reserved;
 u32 length;
};







struct acpi_hmat_proximity_domain {
 struct acpi_hmat_structure header;
 u16 flags;
 u16 reserved1;
 u32 processor_PD;
 u32 memory_PD;
 u32 reserved2;
 u64 reserved3;
 u64 reserved4;
};
# 1435 "../include/acpi/actbl1.h"
struct acpi_hmat_locality {
 struct acpi_hmat_structure header;
 u8 flags;
 u8 data_type;
 u16 reserved1;
 u32 number_of_initiator_Pds;
 u32 number_of_target_Pds;
 u32 reserved2;
 u64 entry_base_unit;
};
# 1469 "../include/acpi/actbl1.h"
struct acpi_hmat_cache {
 struct acpi_hmat_structure header;
 u32 memory_PD;
 u32 reserved1;
 u64 cache_size;
 u32 cache_attributes;
 u16 reserved2;
 u16 number_of_SMBIOShandles;
};
# 1509 "../include/acpi/actbl1.h"
struct acpi_table_hpet {
 struct acpi_table_header header;
 u32 id;
 struct acpi_generic_address address;
 u8 sequence;
 u16 minimum_tick;
 u8 flags;
};







enum acpi_hpet_page_protect {
 ACPI_HPET_NO_PAGE_PROTECT = 0,
 ACPI_HPET_PAGE_PROTECT4 = 1,
 ACPI_HPET_PAGE_PROTECT64 = 2
};
# 1543 "../include/acpi/actbl1.h"
struct acpi_table_ibft {
 struct acpi_table_header header;
 u8 reserved[12];
};



struct acpi_ibft_header {
 u8 type;
 u8 version;
 u16 length;
 u8 index;
 u8 flags;
};



enum acpi_ibft_type {
 ACPI_IBFT_TYPE_NOT_USED = 0,
 ACPI_IBFT_TYPE_CONTROL = 1,
 ACPI_IBFT_TYPE_INITIATOR = 2,
 ACPI_IBFT_TYPE_NIC = 3,
 ACPI_IBFT_TYPE_TARGET = 4,
 ACPI_IBFT_TYPE_EXTENSIONS = 5,
 ACPI_IBFT_TYPE_RESERVED = 6
};



struct acpi_ibft_control {
 struct acpi_ibft_header header;
 u16 extensions;
 u16 initiator_offset;
 u16 nic0_offset;
 u16 target0_offset;
 u16 nic1_offset;
 u16 target1_offset;
};

struct acpi_ibft_initiator {
 struct acpi_ibft_header header;
 u8 sns_server[16];
 u8 slp_server[16];
 u8 primary_server[16];
 u8 secondary_server[16];
 u16 name_length;
 u16 name_offset;
};

struct acpi_ibft_nic {
 struct acpi_ibft_header header;
 u8 ip_address[16];
 u8 subnet_mask_prefix;
 u8 origin;
 u8 gateway[16];
 u8 primary_dns[16];
 u8 secondary_dns[16];
 u8 dhcp[16];
 u16 vlan;
 u8 mac_address[6];
 u16 pci_address;
 u16 name_length;
 u16 name_offset;
};

struct acpi_ibft_target {
 struct acpi_ibft_header header;
 u8 target_ip_address[16];
 u16 target_ip_socket;
 u8 target_boot_lun[8];
 u8 chap_type;
 u8 nic_association;
 u16 target_name_length;
 u16 target_name_offset;
 u16 chap_name_length;
 u16 chap_name_offset;
 u16 chap_secret_length;
 u16 chap_secret_offset;
 u16 reverse_chap_name_length;
 u16 reverse_chap_name_offset;
 u16 reverse_chap_secret_length;
 u16 reverse_chap_secret_offset;
};



#pragma pack()
# 371 "../include/acpi/actbl.h" 2
# 1 "../include/acpi/actbl2.h" 1
# 51 "../include/acpi/actbl2.h"
#pragma pack(1)
# 74 "../include/acpi/actbl2.h"
struct acpi_table_iort {
 struct acpi_table_header header;
 u32 node_count;
 u32 node_offset;
 u32 reserved;
};




struct acpi_iort_node {
 u8 type;
 u16 length;
 u8 revision;
 u32 reserved;
 u32 mapping_count;
 u32 mapping_offset;
 char node_data[1];
};



enum acpi_iort_node_type {
 ACPI_IORT_NODE_ITS_GROUP = 0x00,
 ACPI_IORT_NODE_NAMED_COMPONENT = 0x01,
 ACPI_IORT_NODE_PCI_ROOT_COMPLEX = 0x02,
 ACPI_IORT_NODE_SMMU = 0x03,
 ACPI_IORT_NODE_SMMU_V3 = 0x04,
 ACPI_IORT_NODE_PMCG = 0x05
};

struct acpi_iort_id_mapping {
 u32 input_base;
 u32 id_count;
 u32 output_base;
 u32 output_reference;
 u32 flags;
};





struct acpi_iort_memory_access {
 u32 cache_coherency;
 u8 hints;
 u16 reserved;
 u8 memory_flags;
};
# 144 "../include/acpi/actbl2.h"
struct acpi_iort_its_group {
 u32 its_count;
 u32 identifiers[1];
};

struct acpi_iort_named_component {
 u32 node_flags;
 u64 memory_properties;
 u8 memory_address_limit;
 char device_name[1];
};






struct acpi_iort_root_complex {
 u64 memory_properties;
 u32 ats_attribute;
 u32 pci_segment_number;
 u8 memory_address_limit;
 u8 reserved[3];
};






struct acpi_iort_smmu {
 u64 base_address;
 u64 span;
 u32 model;
 u32 flags;
 u32 global_interrupt_offset;
 u32 context_interrupt_count;
 u32 context_interrupt_offset;
 u32 pmu_interrupt_count;
 u32 pmu_interrupt_offset;
 u64 interrupts[1];
};
# 203 "../include/acpi/actbl2.h"
struct acpi_iort_smmu_gsi {
 u32 nsg_irpt;
 u32 nsg_irpt_flags;
 u32 nsg_cfg_irpt;
 u32 nsg_cfg_irpt_flags;
};

struct acpi_iort_smmu_v3 {
 u64 base_address;
 u32 flags;
 u32 reserved;
 u64 vatos_address;
 u32 model;
 u32 event_gsiv;
 u32 pri_gsiv;
 u32 gerr_gsiv;
 u32 sync_gsiv;
 u32 pxm;
 u32 id_mapping_index;
};
# 236 "../include/acpi/actbl2.h"
struct acpi_iort_pmcg {
 u64 page0_base_address;
 u32 overflow_gsiv;
 u32 node_reference;
 u64 page1_base_address;
};
# 253 "../include/acpi/actbl2.h"
struct acpi_table_ivrs {
 struct acpi_table_header header;
 u32 info;
 u64 reserved;
};
# 267 "../include/acpi/actbl2.h"
struct acpi_ivrs_header {
 u8 type;
 u8 flags;
 u16 length;
 u16 device_id;
};



enum acpi_ivrs_type {
 ACPI_IVRS_TYPE_HARDWARE = 0x10,
 ACPI_IVRS_TYPE_MEMORY1 = 0x20,
 ACPI_IVRS_TYPE_MEMORY2 = 0x21,
 ACPI_IVRS_TYPE_MEMORY3 = 0x22
};
# 304 "../include/acpi/actbl2.h"
struct acpi_ivrs_hardware {
 struct acpi_ivrs_header header;
 u16 capability_offset;
 u64 base_address;
 u16 pci_segment_group;
 u16 info;
 u32 reserved;
};
# 324 "../include/acpi/actbl2.h"
struct acpi_ivrs_de_header {
 u8 type;
 u16 id;
 u8 data_setting;
};







enum acpi_ivrs_device_entry_type {


 ACPI_IVRS_TYPE_PAD4 = 0,
 ACPI_IVRS_TYPE_ALL = 1,
 ACPI_IVRS_TYPE_SELECT = 2,
 ACPI_IVRS_TYPE_START = 3,
 ACPI_IVRS_TYPE_END = 4,



 ACPI_IVRS_TYPE_PAD8 = 64,
 ACPI_IVRS_TYPE_NOT_USED = 65,
 ACPI_IVRS_TYPE_ALIAS_SELECT = 66,
 ACPI_IVRS_TYPE_ALIAS_START = 67,
 ACPI_IVRS_TYPE_EXT_SELECT = 70,
 ACPI_IVRS_TYPE_EXT_START = 71,
 ACPI_IVRS_TYPE_SPECIAL = 72
};
# 367 "../include/acpi/actbl2.h"
struct acpi_ivrs_device4 {
 struct acpi_ivrs_de_header header;
};



struct acpi_ivrs_device8a {
 struct acpi_ivrs_de_header header;
 u8 reserved1;
 u16 used_id;
 u8 reserved2;
};



struct acpi_ivrs_device8b {
 struct acpi_ivrs_de_header header;
 u32 extended_data;
};







struct acpi_ivrs_device8c {
 struct acpi_ivrs_de_header header;
 u8 handle;
 u16 used_id;
 u8 variety;
};
# 407 "../include/acpi/actbl2.h"
struct acpi_ivrs_memory {
 struct acpi_ivrs_header header;
 u16 aux_data;
 u64 reserved;
 u64 start_address;
 u64 memory_length;
};
# 423 "../include/acpi/actbl2.h"
struct acpi_table_lpit {
 struct acpi_table_header header;
};



struct acpi_lpit_header {
 u32 type;
 u32 length;
 u16 unique_id;
 u16 reserved;
 u32 flags;
};



enum acpi_lpit_type {
 ACPI_LPIT_TYPE_NATIVE_CSTATE = 0x00,
 ACPI_LPIT_TYPE_RESERVED = 0x01
};
# 455 "../include/acpi/actbl2.h"
struct acpi_lpit_native {
 struct acpi_lpit_header header;
 struct acpi_generic_address entry_trigger;
 u32 residency;
 u32 latency;
 struct acpi_generic_address residency_counter;
 u64 counter_frequency;
};
# 471 "../include/acpi/actbl2.h"
struct acpi_table_madt {
 struct acpi_table_header header;
 u32 address;
 u32 flags;
};
# 488 "../include/acpi/actbl2.h"
enum acpi_madt_type {
 ACPI_MADT_TYPE_LOCAL_APIC = 0,
 ACPI_MADT_TYPE_IO_APIC = 1,
 ACPI_MADT_TYPE_INTERRUPT_OVERRIDE = 2,
 ACPI_MADT_TYPE_NMI_SOURCE = 3,
 ACPI_MADT_TYPE_LOCAL_APIC_NMI = 4,
 ACPI_MADT_TYPE_LOCAL_APIC_OVERRIDE = 5,
 ACPI_MADT_TYPE_IO_SAPIC = 6,
 ACPI_MADT_TYPE_LOCAL_SAPIC = 7,
 ACPI_MADT_TYPE_INTERRUPT_SOURCE = 8,
 ACPI_MADT_TYPE_LOCAL_X2APIC = 9,
 ACPI_MADT_TYPE_LOCAL_X2APIC_NMI = 10,
 ACPI_MADT_TYPE_GENERIC_INTERRUPT = 11,
 ACPI_MADT_TYPE_GENERIC_DISTRIBUTOR = 12,
 ACPI_MADT_TYPE_GENERIC_MSI_FRAME = 13,
 ACPI_MADT_TYPE_GENERIC_REDISTRIBUTOR = 14,
 ACPI_MADT_TYPE_GENERIC_TRANSLATOR = 15,
 ACPI_MADT_TYPE_RESERVED = 16
};







struct acpi_madt_local_apic {
 struct acpi_subtable_header header;
 u8 processor_id;
 u8 id;
 u32 lapic_flags;
};



struct acpi_madt_io_apic {
 struct acpi_subtable_header header;
 u8 id;
 u8 reserved;
 u32 address;
 u32 global_irq_base;
};



struct acpi_madt_interrupt_override {
 struct acpi_subtable_header header;
 u8 bus;
 u8 source_irq;
 u32 global_irq;
 u16 inti_flags;
};



struct acpi_madt_nmi_source {
 struct acpi_subtable_header header;
 u16 inti_flags;
 u32 global_irq;
};



struct acpi_madt_local_apic_nmi {
 struct acpi_subtable_header header;
 u8 processor_id;
 u16 inti_flags;
 u8 lint;
};



struct acpi_madt_local_apic_override {
 struct acpi_subtable_header header;
 u16 reserved;
 u64 address;
};



struct acpi_madt_io_sapic {
 struct acpi_subtable_header header;
 u8 id;
 u8 reserved;
 u32 global_irq_base;
 u64 address;
};



struct acpi_madt_local_sapic {
 struct acpi_subtable_header header;
 u8 processor_id;
 u8 id;
 u8 eid;
 u8 reserved[3];
 u32 lapic_flags;
 u32 uid;
 char uid_string[1];
};



struct acpi_madt_interrupt_source {
 struct acpi_subtable_header header;
 u16 inti_flags;
 u8 type;
 u8 id;
 u8 eid;
 u8 io_sapic_vector;
 u32 global_irq;
 u32 flags;
};







struct acpi_madt_local_x2apic {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 local_apic_id;
 u32 lapic_flags;
 u32 uid;
};



struct acpi_madt_local_x2apic_nmi {
 struct acpi_subtable_header header;
 u16 inti_flags;
 u32 uid;
 u8 lint;
 u8 reserved[3];
};



struct acpi_madt_generic_interrupt {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 cpu_interface_number;
 u32 uid;
 u32 flags;
 u32 parking_version;
 u32 performance_interrupt;
 u64 parked_address;
 u64 base_address;
 u64 gicv_base_address;
 u64 gich_base_address;
 u32 vgic_interrupt;
 u64 gicr_base_address;
 u64 arm_mpidr;
 u8 efficiency_class;
 u8 reserved2[1];
 u16 spe_interrupt;
};
# 656 "../include/acpi/actbl2.h"
struct acpi_madt_generic_distributor {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 gic_id;
 u64 base_address;
 u32 global_irq_base;
 u8 version;
 u8 reserved2[3];
};



enum acpi_madt_gic_version {
 ACPI_MADT_GIC_VERSION_NONE = 0,
 ACPI_MADT_GIC_VERSION_V1 = 1,
 ACPI_MADT_GIC_VERSION_V2 = 2,
 ACPI_MADT_GIC_VERSION_V3 = 3,
 ACPI_MADT_GIC_VERSION_V4 = 4,
 ACPI_MADT_GIC_VERSION_RESERVED = 5
};



struct acpi_madt_generic_msi_frame {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 msi_frame_id;
 u64 base_address;
 u32 flags;
 u16 spi_count;
 u16 spi_base;
};







struct acpi_madt_generic_redistributor {
 struct acpi_subtable_header header;
 u16 reserved;
 u64 base_address;
 u32 length;
};



struct acpi_madt_generic_translator {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 translation_id;
 u64 base_address;
 u32 reserved2;
};
# 746 "../include/acpi/actbl2.h"
struct acpi_table_mcfg {
 struct acpi_table_header header;
 u8 reserved[8];
};



struct acpi_mcfg_allocation {
 u64 address;
 u16 pci_segment;
 u8 start_bus_number;
 u8 end_bus_number;
 u32 reserved;
};
# 771 "../include/acpi/actbl2.h"
struct acpi_table_mchi {
 struct acpi_table_header header;
 u8 interface_type;
 u8 protocol;
 u64 protocol_data;
 u8 interrupt_type;
 u8 gpe;
 u8 pci_device_flag;
 u32 global_interrupt;
 struct acpi_generic_address control_register;
 u8 pci_segment;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
};
# 802 "../include/acpi/actbl2.h"
struct acpi_table_mpst {
 struct acpi_table_header header;
  u8 channel_id; u8 reserved1[3]; u16 power_node_count; u16 reserved2;
};



struct acpi_mpst_channel {
 u8 channel_id; u8 reserved1[3]; u16 power_node_count; u16 reserved2;
};



struct acpi_mpst_power_node {
 u8 flags;
 u8 reserved1;
 u16 node_id;
 u32 length;
 u64 range_address;
 u64 range_length;
 u32 num_power_states;
 u32 num_physical_components;
};
# 834 "../include/acpi/actbl2.h"
struct acpi_mpst_power_state {
 u8 power_state;
 u8 info_index;
};



struct acpi_mpst_component {
 u16 component_id;
};



struct acpi_mpst_data_hdr {
 u16 characteristics_count;
 u16 reserved;
};

struct acpi_mpst_power_data {
 u8 structure_id;
 u8 flags;
 u16 reserved1;
 u32 average_power;
 u32 power_saving;
 u64 exit_latency;
 u64 reserved2;
};
# 870 "../include/acpi/actbl2.h"
struct acpi_mpst_shared {
 u32 signature;
 u16 pcc_command;
 u16 pcc_status;
 u32 command_register;
 u32 status_register;
 u32 power_state_id;
 u32 power_node_id;
 u64 energy_consumed;
 u64 average_power;
};
# 889 "../include/acpi/actbl2.h"
struct acpi_table_msct {
 struct acpi_table_header header;
 u32 proximity_offset;
 u32 max_proximity_domains;
 u32 max_clock_domains;
 u64 max_address;
};



struct acpi_msct_proximity {
 u8 revision;
 u8 length;
 u32 range_start;
 u32 range_end;
 u32 processor_capacity;
 u64 memory_capacity;
};
# 919 "../include/acpi/actbl2.h"
struct acpi_table_msdm {
 struct acpi_table_header header;
};
# 934 "../include/acpi/actbl2.h"
struct acpi_table_mtmr {
 struct acpi_table_header header;
};



struct acpi_mtmr_entry {
 struct acpi_generic_address physical_address;
 u32 frequency;
 u32 irq;
};
# 953 "../include/acpi/actbl2.h"
struct acpi_table_nfit {
 struct acpi_table_header header;
 u32 reserved;
};



struct acpi_nfit_header {
 u16 type;
 u16 length;
};



enum acpi_nfit_type {
 ACPI_NFIT_TYPE_SYSTEM_ADDRESS = 0,
 ACPI_NFIT_TYPE_MEMORY_MAP = 1,
 ACPI_NFIT_TYPE_INTERLEAVE = 2,
 ACPI_NFIT_TYPE_SMBIOS = 3,
 ACPI_NFIT_TYPE_CONTROL_REGION = 4,
 ACPI_NFIT_TYPE_DATA_REGION = 5,
 ACPI_NFIT_TYPE_FLUSH_ADDRESS = 6,
 ACPI_NFIT_TYPE_CAPABILITIES = 7,
 ACPI_NFIT_TYPE_RESERVED = 8
};







struct acpi_nfit_system_address {
 struct acpi_nfit_header header;
 u16 range_index;
 u16 flags;
 u32 reserved;
 u32 proximity_domain;
 u8 range_guid[16];
 u64 address;
 u64 length;
 u64 memory_mapping;
};
# 1006 "../include/acpi/actbl2.h"
struct acpi_nfit_memory_map {
 struct acpi_nfit_header header;
 u32 device_handle;
 u16 physical_id;
 u16 region_id;
 u16 range_index;
 u16 region_index;
 u64 region_size;
 u64 region_offset;
 u64 address;
 u16 interleave_index;
 u16 interleave_ways;
 u16 flags;
 u16 reserved;
};
# 1034 "../include/acpi/actbl2.h"
struct acpi_nfit_interleave {
 struct acpi_nfit_header header;
 u16 interleave_index;
 u16 reserved;
 u32 line_count;
 u32 line_size;
 u32 line_offset[1];
};



struct acpi_nfit_smbios {
 struct acpi_nfit_header header;
 u32 reserved;
 u8 data[1];
};



struct acpi_nfit_control_region {
 struct acpi_nfit_header header;
 u16 region_index;
 u16 vendor_id;
 u16 device_id;
 u16 revision_id;
 u16 subsystem_vendor_id;
 u16 subsystem_device_id;
 u16 subsystem_revision_id;
 u8 valid_fields;
 u8 manufacturing_location;
 u16 manufacturing_date;
 u8 reserved[2];
 u32 serial_number;
 u16 code;
 u16 windows;
 u64 window_size;
 u64 command_offset;
 u64 command_size;
 u64 status_offset;
 u64 status_size;
 u16 flags;
 u8 reserved1[6];
};
# 1088 "../include/acpi/actbl2.h"
struct acpi_nfit_data_region {
 struct acpi_nfit_header header;
 u16 region_index;
 u16 windows;
 u64 offset;
 u64 size;
 u64 capacity;
 u64 start_address;
};



struct acpi_nfit_flush_address {
 struct acpi_nfit_header header;
 u32 device_handle;
 u16 hint_count;
 u8 reserved[6];
 u64 hint_address[1];
};



struct acpi_nfit_capabilities {
 struct acpi_nfit_header header;
 u8 highest_capability;
 u8 reserved[3];
 u32 capabilities;
 u32 reserved2;
};
# 1127 "../include/acpi/actbl2.h"
struct nfit_device_handle {
 u32 handle;
};
# 1178 "../include/acpi/actbl2.h"
struct acpi_table_pcct {
 struct acpi_table_header header;
 u32 flags;
 u64 reserved;
};







enum acpi_pcct_type {
 ACPI_PCCT_TYPE_GENERIC_SUBSPACE = 0,
 ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE = 1,
 ACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE_TYPE2 = 2,
 ACPI_PCCT_TYPE_EXT_PCC_MASTER_SUBSPACE = 3,
 ACPI_PCCT_TYPE_EXT_PCC_SLAVE_SUBSPACE = 4,
 ACPI_PCCT_TYPE_RESERVED = 5
};







struct acpi_pcct_subspace {
 struct acpi_subtable_header header;
 u8 reserved[6];
 u64 base_address;
 u64 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u16 min_turnaround_time;
};



struct acpi_pcct_hw_reduced {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved;
 u64 base_address;
 u64 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u16 min_turnaround_time;
};



struct acpi_pcct_hw_reduced_type2 {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved;
 u64 base_address;
 u64 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u16 min_turnaround_time;
 struct acpi_generic_address platform_ack_register;
 u64 ack_preserve_mask;
 u64 ack_write_mask;
};



struct acpi_pcct_ext_pcc_master {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved1;
 u64 base_address;
 u32 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u32 min_turnaround_time;
 struct acpi_generic_address platform_ack_register;
 u64 ack_preserve_mask;
 u64 ack_set_mask;
 u64 reserved2;
 struct acpi_generic_address cmd_complete_register;
 u64 cmd_complete_mask;
 struct acpi_generic_address cmd_update_register;
 u64 cmd_update_preserve_mask;
 u64 cmd_update_set_mask;
 struct acpi_generic_address error_status_register;
 u64 error_status_mask;
};



struct acpi_pcct_ext_pcc_slave {
 struct acpi_subtable_header header;
 u32 platform_interrupt;
 u8 flags;
 u8 reserved1;
 u64 base_address;
 u32 length;
 struct acpi_generic_address doorbell_register;
 u64 preserve_mask;
 u64 write_mask;
 u32 latency;
 u32 max_access_rate;
 u32 min_turnaround_time;
 struct acpi_generic_address platform_ack_register;
 u64 ack_preserve_mask;
 u64 ack_set_mask;
 u64 reserved2;
 struct acpi_generic_address cmd_complete_register;
 u64 cmd_complete_mask;
 struct acpi_generic_address cmd_update_register;
 u64 cmd_update_preserve_mask;
 u64 cmd_update_set_mask;
 struct acpi_generic_address error_status_register;
 u64 error_status_mask;
};
# 1322 "../include/acpi/actbl2.h"
struct acpi_pcct_shared_memory {
 u32 signature;
 u16 command;
 u16 status;
};



struct acpi_pcct_ext_pcc_shared_memory {
 u32 signature;
 u32 flags;
 u32 length;
 u32 command;
};
# 1344 "../include/acpi/actbl2.h"
struct acpi_table_pdtt {
 struct acpi_table_header header;
 u8 trigger_count;
 u8 reserved[3];
 u32 array_offset;
};






struct acpi_pdtt_channel {
 u8 subchannel_id;
 u8 flags;
};
# 1374 "../include/acpi/actbl2.h"
struct acpi_table_pmtt {
 struct acpi_table_header header;
 u32 reserved;
};



struct acpi_pmtt_header {
 u8 type;
 u8 reserved1;
 u16 length;
 u16 flags;
 u16 reserved2;
};
# 1408 "../include/acpi/actbl2.h"
struct acpi_pmtt_socket {
 struct acpi_pmtt_header header;
 u16 socket_id;
 u16 reserved;
};



struct acpi_pmtt_controller {
 struct acpi_pmtt_header header;
 u32 read_latency;
 u32 write_latency;
 u32 read_bandwidth;
 u32 write_bandwidth;
 u16 access_width;
 u16 alignment;
 u16 reserved;
 u16 domain_count;
};



struct acpi_pmtt_domain {
 u32 proximity_domain;
};



struct acpi_pmtt_physical_component {
 struct acpi_pmtt_header header;
 u16 component_id;
 u16 reserved;
 u32 memory_size;
 u32 bios_handle;
};
# 1451 "../include/acpi/actbl2.h"
struct acpi_table_pptt {
 struct acpi_table_header header;
};



enum acpi_pptt_type {
 ACPI_PPTT_TYPE_PROCESSOR = 0,
 ACPI_PPTT_TYPE_CACHE = 1,
 ACPI_PPTT_TYPE_ID = 2,
 ACPI_PPTT_TYPE_RESERVED = 3
};



struct acpi_pptt_processor {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 flags;
 u32 parent;
 u32 acpi_processor_id;
 u32 number_of_priv_resources;
};
# 1485 "../include/acpi/actbl2.h"
struct acpi_pptt_cache {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 flags;
 u32 next_level_of_cache;
 u32 size;
 u32 number_of_sets;
 u8 associativity;
 u8 attributes;
 u16 line_size;
};
# 1529 "../include/acpi/actbl2.h"
struct acpi_pptt_id {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 vendor_id;
 u64 level1_id;
 u64 level2_id;
 u16 major_rev;
 u16 minor_rev;
 u16 spin_rev;
};
# 1547 "../include/acpi/actbl2.h"
struct acpi_table_rasf {
 struct acpi_table_header header;
 u8 channel_id[12];
};



struct acpi_rasf_shared_memory {
 u32 signature;
 u16 command;
 u16 status;
 u16 version;
 u8 capabilities[16];
 u8 set_capabilities[16];
 u16 num_parameter_blocks;
 u32 set_capabilities_status;
};



struct acpi_rasf_parameter_block {
 u16 type;
 u16 version;
 u16 length;
};



struct acpi_rasf_patrol_scrub_parameter {
 struct acpi_rasf_parameter_block header;
 u16 patrol_scrub_command;
 u64 requested_address_range[2];
 u64 actual_address_range[2];
 u16 flags;
 u8 requested_speed;
};
# 1594 "../include/acpi/actbl2.h"
enum acpi_rasf_commands {
 ACPI_RASF_EXECUTE_RASF_COMMAND = 1
};



enum acpi_rasf_capabiliities {
 ACPI_HW_PATROL_SCRUB_SUPPORTED = 0,
 ACPI_SW_PATROL_SCRUB_EXPOSED = 1
};



enum acpi_rasf_patrol_scrub_commands {
 ACPI_RASF_GET_PATROL_PARAMETERS = 1,
 ACPI_RASF_START_PATROL_SCRUBBER = 2,
 ACPI_RASF_STOP_PATROL_SCRUBBER = 3
};







enum acpi_rasf_status {
 ACPI_RASF_SUCCESS = 0,
 ACPI_RASF_NOT_VALID = 1,
 ACPI_RASF_NOT_SUPPORTED = 2,
 ACPI_RASF_BUSY = 3,
 ACPI_RASF_FAILED = 4,
 ACPI_RASF_ABORTED = 5,
 ACPI_RASF_INVALID_DATA = 6
};
# 1643 "../include/acpi/actbl2.h"
struct acpi_table_sbst {
 struct acpi_table_header header;
 u32 warning_level;
 u32 low_level;
 u32 critical_level;
};
# 1659 "../include/acpi/actbl2.h"
struct acpi_table_sdei {
 struct acpi_table_header header;
};
# 1670 "../include/acpi/actbl2.h"
struct acpi_table_sdev {
 struct acpi_table_header header;
};

struct acpi_sdev_header {
 u8 type;
 u8 flags;
 u16 length;
};



enum acpi_sdev_type {
 ACPI_SDEV_TYPE_NAMESPACE_DEVICE = 0,
 ACPI_SDEV_TYPE_PCIE_ENDPOINT_DEVICE = 1,
 ACPI_SDEV_TYPE_RESERVED = 2
};
# 1698 "../include/acpi/actbl2.h"
struct acpi_sdev_namespace {
 struct acpi_sdev_header header;
 u16 device_id_offset;
 u16 device_id_length;
 u16 vendor_data_offset;
 u16 vendor_data_length;
};



struct acpi_sdev_pcie {
 struct acpi_sdev_header header;
 u16 segment;
 u16 start_bus;
 u16 path_offset;
 u16 path_length;
 u16 vendor_data_offset;
 u16 vendor_data_length;
};



struct acpi_sdev_pcie_path {
 u8 device;
 u8 function;
};



#pragma pack()
# 372 "../include/acpi/actbl.h" 2
# 1 "../include/acpi/actbl3.h" 1
# 50 "../include/acpi/actbl3.h"
#pragma pack(1)
# 75 "../include/acpi/actbl3.h"
struct acpi_table_slic {
 struct acpi_table_header header;
};
# 86 "../include/acpi/actbl3.h"
struct acpi_table_slit {
 struct acpi_table_header header;
 u64 locality_count;
 u8 entry[1];
};
# 102 "../include/acpi/actbl3.h"
struct acpi_table_spcr {
 struct acpi_table_header header;
 u8 interface_type;
 u8 reserved[3];
 struct acpi_generic_address serial_port;
 u8 interrupt_type;
 u8 pc_interrupt;
 u32 interrupt;
 u8 baud_rate;
 u8 parity;
 u8 stop_bits;
 u8 flow_control;
 u8 terminal_type;
 u8 reserved1;
 u16 pci_device_id;
 u16 pci_vendor_id;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u32 pci_flags;
 u8 pci_segment;
 u32 reserved2;
};
# 143 "../include/acpi/actbl3.h"
struct acpi_table_spmi {
 struct acpi_table_header header;
 u8 interface_type;
 u8 reserved;
 u16 spec_revision;
 u8 interrupt_type;
 u8 gpe_number;
 u8 reserved1;
 u8 pci_device_flag;
 u32 interrupt;
 struct acpi_generic_address ipmi_register;
 u8 pci_segment;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u8 reserved2;
};



enum acpi_spmi_interface_types {
 ACPI_SPMI_NOT_USED = 0,
 ACPI_SPMI_KEYBOARD = 1,
 ACPI_SPMI_SMI = 2,
 ACPI_SPMI_BLOCK_TRANSFER = 3,
 ACPI_SPMI_SMBUS = 4,
 ACPI_SPMI_RESERVED = 5
};
# 179 "../include/acpi/actbl3.h"
struct acpi_table_srat {
 struct acpi_table_header header;
 u32 table_revision;
 u64 reserved;
};



enum acpi_srat_type {
 ACPI_SRAT_TYPE_CPU_AFFINITY = 0,
 ACPI_SRAT_TYPE_MEMORY_AFFINITY = 1,
 ACPI_SRAT_TYPE_X2APIC_CPU_AFFINITY = 2,
 ACPI_SRAT_TYPE_GICC_AFFINITY = 3,
 ACPI_SRAT_TYPE_GIC_ITS_AFFINITY = 4,
 ACPI_SRAT_TYPE_GENERIC_AFFINITY = 5,
 ACPI_SRAT_TYPE_RESERVED = 6
};







struct acpi_srat_cpu_affinity {
 struct acpi_subtable_header header;
 u8 proximity_domain_lo;
 u8 apic_id;
 u32 flags;
 u8 local_sapic_eid;
 u8 proximity_domain_hi[3];
 u32 clock_domain;
};







struct acpi_srat_mem_affinity {
 struct acpi_subtable_header header;
 u32 proximity_domain;
 u16 reserved;
 u64 base_address;
 u64 length;
 u32 reserved1;
 u32 flags;
 u64 reserved2;
};
# 238 "../include/acpi/actbl3.h"
struct acpi_srat_x2apic_cpu_affinity {
 struct acpi_subtable_header header;
 u16 reserved;
 u32 proximity_domain;
 u32 apic_id;
 u32 flags;
 u32 clock_domain;
 u32 reserved2;
};







struct acpi_srat_gicc_affinity {
 struct acpi_subtable_header header;
 u32 proximity_domain;
 u32 acpi_processor_uid;
 u32 flags;
 u32 clock_domain;
};







struct acpi_srat_gic_its_affinity {
 struct acpi_subtable_header header;
 u32 proximity_domain;
 u16 reserved;
 u32 its_id;
};



struct acpi_srat_generic_affinity {
 struct acpi_subtable_header header;
 u8 reserved;
 u8 device_handle_type;
 u32 proximity_domain;
 u8 device_handle[16];
 u32 flags;
 u32 reserved1;
};
# 301 "../include/acpi/actbl3.h"
struct acpi_table_stao {
 struct acpi_table_header header;
 u8 ignore_uart;
};
# 323 "../include/acpi/actbl3.h"
struct acpi_table_tcpa_hdr {
 struct acpi_table_header header;
 u16 platform_class;
};
# 335 "../include/acpi/actbl3.h"
struct acpi_table_tcpa_client {
 u32 minimum_log_length;
 u64 log_address;
};

struct acpi_table_tcpa_server {
 u16 reserved;
 u64 minimum_log_length;
 u64 log_address;
 u16 spec_revision;
 u8 device_flags;
 u8 interrupt_flags;
 u8 gpe_number;
 u8 reserved2[3];
 u32 global_interrupt;
 struct acpi_generic_address address;
 u32 reserved3;
 struct acpi_generic_address config_address;
 u8 group;
 u8 bus;
 u8 device;
 u8 function;
};
# 387 "../include/acpi/actbl3.h"
struct acpi_table_tpm23 {
 struct acpi_table_header header;
 u32 reserved;
 u64 control_address;
 u32 start_method;
};
# 402 "../include/acpi/actbl3.h"
struct acpi_tmp23_trailer {
 u32 reserved;
};



struct acpi_table_tpm2 {
 struct acpi_table_header header;
 u16 platform_class;
 u16 reserved;
 u64 control_address;
 u32 start_method;


};
# 436 "../include/acpi/actbl3.h"
struct acpi_tpm2_trailer {
 u8 method_parameters[12];
 u32 minimum_log_length;
 u64 log_address;
};







struct acpi_tpm2_arm_smc {
 u32 global_interrupt;
 u8 interrupt_flags;
 u8 operation_flags;
 u16 reserved;
 u32 function_id;
};
# 474 "../include/acpi/actbl3.h"
struct acpi_table_uefi {
 struct acpi_table_header header;
 u8 identifier[16];
 u16 data_offset;
};
# 491 "../include/acpi/actbl3.h"
struct acpi_table_vrtc {
 struct acpi_table_header header;
};



struct acpi_vrtc_entry {
 struct acpi_generic_address physical_address;
 u32 irq;
};
# 511 "../include/acpi/actbl3.h"
struct acpi_table_waet {
 struct acpi_table_header header;
 u32 flags;
};
# 531 "../include/acpi/actbl3.h"
struct acpi_table_wdat {
 struct acpi_table_header header;
 u32 header_length;
 u16 pci_segment;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u8 reserved[3];
 u32 timer_period;
 u32 max_count;
 u32 min_count;
 u8 flags;
 u8 reserved2[3];
 u32 entries;
};
# 554 "../include/acpi/actbl3.h"
struct acpi_wdat_entry {
 u8 action;
 u8 instruction;
 u16 reserved;
 struct acpi_generic_address register_region;
 u32 value;
 u32 mask;
};



enum acpi_wdat_actions {
 ACPI_WDAT_RESET = 1,
 ACPI_WDAT_GET_CURRENT_COUNTDOWN = 4,
 ACPI_WDAT_GET_COUNTDOWN = 5,
 ACPI_WDAT_SET_COUNTDOWN = 6,
 ACPI_WDAT_GET_RUNNING_STATE = 8,
 ACPI_WDAT_SET_RUNNING_STATE = 9,
 ACPI_WDAT_GET_STOPPED_STATE = 10,
 ACPI_WDAT_SET_STOPPED_STATE = 11,
 ACPI_WDAT_GET_REBOOT = 16,
 ACPI_WDAT_SET_REBOOT = 17,
 ACPI_WDAT_GET_SHUTDOWN = 18,
 ACPI_WDAT_SET_SHUTDOWN = 19,
 ACPI_WDAT_GET_STATUS = 32,
 ACPI_WDAT_SET_STATUS = 33,
 ACPI_WDAT_ACTION_RESERVED = 34
};



enum acpi_wdat_instructions {
 ACPI_WDAT_READ_VALUE = 0,
 ACPI_WDAT_READ_COUNTDOWN = 1,
 ACPI_WDAT_WRITE_VALUE = 2,
 ACPI_WDAT_WRITE_COUNTDOWN = 3,
 ACPI_WDAT_INSTRUCTION_RESERVED = 4,
 ACPI_WDAT_PRESERVE_REGISTER = 0x80
};
# 604 "../include/acpi/actbl3.h"
struct acpi_table_wddt {
 struct acpi_table_header header;
 u16 spec_version;
 u16 table_version;
 u16 pci_vendor_id;
 struct acpi_generic_address address;
 u16 max_count;
 u16 min_count;
 u16 period;
 u16 status;
 u16 capability;
};
# 642 "../include/acpi/actbl3.h"
struct acpi_table_wdrt {
 struct acpi_table_header header;
 struct acpi_generic_address control_register;
 struct acpi_generic_address count_register;
 u16 pci_device_id;
 u16 pci_vendor_id;
 u8 pci_bus;
 u8 pci_device;
 u8 pci_function;
 u8 pci_segment;
 u16 max_count;
 u8 units;
};
# 665 "../include/acpi/actbl3.h"
struct acpi_table_wpbt {
 struct acpi_table_header header;
 u32 handoff_size;
 u64 handoff_address;
 u8 layout;
 u8 type;
 u16 arguments_length;
};
# 684 "../include/acpi/actbl3.h"
struct acpi_table_wsmt {
 struct acpi_table_header header;
 u32 protection_flags;
};
# 704 "../include/acpi/actbl3.h"
struct acpi_table_xenv {
 struct acpi_table_header header;
 u64 grant_table_address;
 u64 grant_table_size;
 u32 event_interrupt;
 u8 event_flags;
};



#pragma pack()
# 373 "../include/acpi/actbl.h" 2
# 27 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/acrestyp.h" 1
# 16 "../include/acpi/acrestyp.h"
typedef u16 acpi_rs_length;
typedef u32 acpi_rsdesc_size;
# 121 "../include/acpi/acrestyp.h"
#pragma pack(1)




struct acpi_uuid {
 u8 data[16];
};

struct acpi_vendor_uuid {
 u8 subtype;
 u8 data[16];
};




struct acpi_resource_irq {
 u8 descriptor_length;
 u8 triggering;
 u8 polarity;
 u8 shareable;
 u8 wake_capable;
 u8 interrupt_count;
 u8 interrupts[1];
};

struct acpi_resource_dma {
 u8 type;
 u8 bus_master;
 u8 transfer;
 u8 channel_count;
 u8 channels[1];
};

struct acpi_resource_start_dependent {
 u8 descriptor_length;
 u8 compatibility_priority;
 u8 performance_robustness;
};






struct acpi_resource_io {
 u8 io_decode;
 u8 alignment;
 u8 address_length;
 u16 minimum;
 u16 maximum;
};

struct acpi_resource_fixed_io {
 u16 address;
 u8 address_length;
};

struct acpi_resource_fixed_dma {
 u16 request_lines;
 u16 channels;
 u8 width;
};
# 195 "../include/acpi/acrestyp.h"
struct acpi_resource_vendor {
 u16 byte_length;
 u8 byte_data[1];
};



struct acpi_resource_vendor_typed {
 u16 byte_length;
 u8 uuid_subtype;
 u8 uuid[16];
 u8 byte_data[1];
};

struct acpi_resource_end_tag {
 u8 checksum;
};

struct acpi_resource_memory24 {
 u8 write_protect;
 u16 minimum;
 u16 maximum;
 u16 alignment;
 u16 address_length;
};

struct acpi_resource_memory32 {
 u8 write_protect;
 u32 minimum;
 u32 maximum;
 u32 alignment;
 u32 address_length;
};

struct acpi_resource_fixed_memory32 {
 u8 write_protect;
 u32 address;
 u32 address_length;
};

struct acpi_memory_attribute {
 u8 write_protect;
 u8 caching;
 u8 range_type;
 u8 translation;
};

struct acpi_io_attribute {
 u8 range_type;
 u8 translation;
 u8 translation_type;
 u8 reserved1;
};

union acpi_resource_attribute {
 struct acpi_memory_attribute mem;
 struct acpi_io_attribute io;



 u8 type_specific;
};

struct acpi_resource_label {
 u16 string_length;
 char *string_ptr;
};

struct acpi_resource_source {
 u8 index;
 u16 string_length;
 char *string_ptr;
};
# 279 "../include/acpi/acrestyp.h"
struct acpi_address16_attribute {
 u16 granularity;
 u16 minimum;
 u16 maximum;
 u16 translation_offset;
 u16 address_length;
};

struct acpi_address32_attribute {
 u32 granularity;
 u32 minimum;
 u32 maximum;
 u32 translation_offset;
 u32 address_length;
};

struct acpi_address64_attribute {
 u64 granularity;
 u64 minimum;
 u64 maximum;
 u64 translation_offset;
 u64 address_length;
};

struct acpi_resource_address {
u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info;};

struct acpi_resource_address16 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; struct acpi_address16_attribute address;
 struct acpi_resource_source resource_source;
};

struct acpi_resource_address32 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; struct acpi_address32_attribute address;
 struct acpi_resource_source resource_source;
};

struct acpi_resource_address64 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; struct acpi_address64_attribute address;
 struct acpi_resource_source resource_source;
};

struct acpi_resource_extended_address64 {
 u8 resource_type; u8 producer_consumer; u8 decode; u8 min_address_fixed; u8 max_address_fixed; union acpi_resource_attribute info; u8 revision_ID;
 struct acpi_address64_attribute address;
 u64 type_specific;
};

struct acpi_resource_extended_irq {
 u8 producer_consumer;
 u8 triggering;
 u8 polarity;
 u8 shareable;
 u8 wake_capable;
 u8 interrupt_count;
 struct acpi_resource_source resource_source;
 u32 interrupts[1];
};

struct acpi_resource_generic_register {
 u8 space_id;
 u8 bit_width;
 u8 bit_offset;
 u8 access_size;
 u64 address;
};

struct acpi_resource_gpio {
 u8 revision_id;
 u8 connection_type;
 u8 producer_consumer;
 u8 pin_config;
 u8 shareable;
 u8 wake_capable;
 u8 io_restriction;
 u8 triggering;
 u8 polarity;
 u16 drive_strength;
 u16 debounce_timeout;
 u16 pin_table_length;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 u16 *pin_table;
 u8 *vendor_data;
};
# 398 "../include/acpi/acrestyp.h"
struct acpi_resource_common_serialbus {
u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data;};
# 412 "../include/acpi/acrestyp.h"
struct acpi_resource_i2c_serialbus {
 u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data; u8 access_mode;
 u16 slave_address;
 u32 connection_speed;
};






struct acpi_resource_spi_serialbus {
 u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data; u8 wire_mode;
 u8 device_polarity;
 u8 data_bit_length;
 u8 clock_phase;
 u8 clock_polarity;
 u16 device_selection;
 u32 connection_speed;
};
# 453 "../include/acpi/acrestyp.h"
struct acpi_resource_uart_serialbus {
 u8 revision_id; u8 type; u8 producer_consumer; u8 slave_mode; u8 connection_sharing; u8 type_revision_id; u16 type_data_length; u16 vendor_length; struct acpi_resource_source resource_source; u8 *vendor_data; u8 endian;
 u8 data_bits;
 u8 stop_bits;
 u8 flow_control;
 u8 parity;
 u8 lines_enabled;
 u16 rx_fifo_size;
 u16 tx_fifo_size;
 u32 default_baud_rate;
};
# 508 "../include/acpi/acrestyp.h"
struct acpi_resource_pin_function {
 u8 revision_id;
 u8 pin_config;
 u8 shareable;
 u16 function_number;
 u16 pin_table_length;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 u16 *pin_table;
 u8 *vendor_data;
};

struct acpi_resource_pin_config {
 u8 revision_id;
 u8 producer_consumer;
 u8 shareable;
 u8 pin_config_type;
 u32 pin_config_value;
 u16 pin_table_length;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 u16 *pin_table;
 u8 *vendor_data;
};
# 550 "../include/acpi/acrestyp.h"
struct acpi_resource_pin_group {
 u8 revision_id;
 u8 producer_consumer;
 u16 pin_table_length;
 u16 vendor_length;
 u16 *pin_table;
 struct acpi_resource_label resource_label;
 u8 *vendor_data;
};

struct acpi_resource_pin_group_function {
 u8 revision_id;
 u8 producer_consumer;
 u8 shareable;
 u16 function_number;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 struct acpi_resource_label resource_source_label;
 u8 *vendor_data;
};

struct acpi_resource_pin_group_config {
 u8 revision_id;
 u8 producer_consumer;
 u8 shareable;
 u8 pin_config_type;
 u32 pin_config_value;
 u16 vendor_length;
 struct acpi_resource_source resource_source;
 struct acpi_resource_label resource_source_label;
 u8 *vendor_data;
};
# 614 "../include/acpi/acrestyp.h"
union acpi_resource_data {
 struct acpi_resource_irq irq;
 struct acpi_resource_dma dma;
 struct acpi_resource_start_dependent start_dpf;
 struct acpi_resource_io io;
 struct acpi_resource_fixed_io fixed_io;
 struct acpi_resource_fixed_dma fixed_dma;
 struct acpi_resource_vendor vendor;
 struct acpi_resource_vendor_typed vendor_typed;
 struct acpi_resource_end_tag end_tag;
 struct acpi_resource_memory24 memory24;
 struct acpi_resource_memory32 memory32;
 struct acpi_resource_fixed_memory32 fixed_memory32;
 struct acpi_resource_address16 address16;
 struct acpi_resource_address32 address32;
 struct acpi_resource_address64 address64;
 struct acpi_resource_extended_address64 ext_address64;
 struct acpi_resource_extended_irq extended_irq;
 struct acpi_resource_generic_register generic_reg;
 struct acpi_resource_gpio gpio;
 struct acpi_resource_i2c_serialbus i2c_serial_bus;
 struct acpi_resource_spi_serialbus spi_serial_bus;
 struct acpi_resource_uart_serialbus uart_serial_bus;
 struct acpi_resource_common_serialbus common_serial_bus;
 struct acpi_resource_pin_function pin_function;
 struct acpi_resource_pin_config pin_config;
 struct acpi_resource_pin_group pin_group;
 struct acpi_resource_pin_group_function pin_group_function;
 struct acpi_resource_pin_group_config pin_group_config;



 struct acpi_resource_address address;
};



struct acpi_resource {
 u32 type;
 u32 length;
 union acpi_resource_data data;
};



#pragma pack()
# 670 "../include/acpi/acrestyp.h"
struct acpi_pci_routing_table {
 u32 length;
 u32 pin;
 u64 address;
 u32 source_index;
 char source[4];
};
# 28 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/platform/acenvex.h" 1
# 23 "../include/acpi/platform/acenvex.h"
# 1 "../include/acpi/platform/aclinuxex.h" 1
# 40 "../include/acpi/platform/aclinuxex.h"
acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_os_initialize(void);

acpi_status acpi_os_terminate(void);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_os_allocate(acpi_size size)
{
 return kmalloc(size, ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })? ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)) : ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_os_allocate_zeroed(acpi_size size)
{
 return kzalloc(size, ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })? ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)) : ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_free(void *memory)
{
 kfree(memory);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_os_acquire_object(struct kmem_cache * cache)
{
 return kmem_cache_zalloc(cache,
     ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); })? ((( gfp_t)0x20u)|(( gfp_t)0x200u)|(( gfp_t)0x800u)) : ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 acpi_os_get_thread_id(void)
{
 return (u64) (unsigned long)get_current();
}
# 104 "../include/acpi/platform/aclinuxex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long acpi_os_acquire_raw_lock(raw_spinlock_t * lockp)
{
 unsigned long flags;

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = __raw_spin_lock_irqsave(lockp); } while (0);
 return flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_release_raw_lock(raw_spinlock_t * lockp,
         unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); __raw_spin_unlock_irqrestore(lockp, flags); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_delete_raw_lock(raw_spinlock_t * handle)
{
 acpi_os_free (handle);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 acpi_os_readable(void *pointer, acpi_size length)
{
 return (1 == 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_os_initialize_debugger(void)
{
 return (acpi_status) 0x0000;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_os_terminate_debugger(void)
{
 return;
}
# 24 "../include/acpi/platform/acenvex.h" 2
# 39 "../include/acpi/platform/acenvex.h"
# 1 "../include/acpi/platform/acgccex.h" 1
# 40 "../include/acpi/platform/acenvex.h" 2
# 29 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/acoutput.h" 1
# 30 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/acpiosxf.h" 1
# 20 "../include/acpi/acpiosxf.h"
typedef enum {
 OSL_GLOBAL_LOCK_HANDLER,
 OSL_NOTIFY_HANDLER,
 OSL_GPE_HANDLER,
 OSL_DEBUGGER_MAIN_THREAD,
 OSL_DEBUGGER_EXEC_THREAD,
 OSL_EC_POLL_HANDLER,
 OSL_EC_BURST_HANDLER
} acpi_execute_type;
# 38 "../include/acpi/acpiosxf.h"
struct acpi_signal_fatal_info {
 u32 type;
 u32 code;
 u32 argument;
};
# 59 "../include/acpi/acpiosxf.h"
acpi_physical_address acpi_os_get_root_pointer(void);



acpi_status
acpi_os_predefined_override(const struct acpi_predefined_names *init_val,
       acpi_string *new_val);



acpi_status
acpi_os_table_override(struct acpi_table_header *existing_table,
         struct acpi_table_header **new_table);



acpi_status
acpi_os_physical_table_override(struct acpi_table_header *existing_table,
    acpi_physical_address *new_address,
    u32 *new_table_length);
# 89 "../include/acpi/acpiosxf.h"
void acpi_os_delete_lock(spinlock_t * handle);



unsigned long acpi_os_acquire_lock(spinlock_t * handle);



void acpi_os_release_lock(spinlock_t * handle, unsigned long flags);
# 125 "../include/acpi/acpiosxf.h"
acpi_status
acpi_os_create_semaphore(u32 max_units,
    u32 initial_units, void * * out_handle);



acpi_status acpi_os_delete_semaphore(void * handle);



acpi_status
acpi_os_wait_semaphore(void * handle, u32 units, u16 timeout);



acpi_status acpi_os_signal_semaphore(void * handle, u32 units);
# 183 "../include/acpi/acpiosxf.h"
void *acpi_os_map_memory(acpi_physical_address where, acpi_size length);



void acpi_os_unmap_memory(void *logical_address, acpi_size size);



acpi_status
acpi_os_get_physical_address(void *logical_address,
        acpi_physical_address *physical_address);






acpi_status
acpi_os_create_cache(char *cache_name,
       u16 object_size,
       u16 max_depth, struct kmem_cache ** return_cache);



acpi_status acpi_os_delete_cache(struct kmem_cache * cache);



acpi_status acpi_os_purge_cache(struct kmem_cache * cache);







acpi_status acpi_os_release_object(struct kmem_cache * cache, void *object);






acpi_status
acpi_os_install_interrupt_handler(u32 interrupt_number,
      acpi_osd_handler service_routine,
      void *context);



acpi_status
acpi_os_remove_interrupt_handler(u32 interrupt_number,
     acpi_osd_handler service_routine);
# 246 "../include/acpi/acpiosxf.h"
acpi_status
acpi_os_execute(acpi_execute_type type,
  acpi_osd_exec_callback function, void *context);



void acpi_os_wait_events_complete(void);



void acpi_os_sleep(u64 milliseconds);



void acpi_os_stall(u32 microseconds);






acpi_status acpi_os_read_port(acpi_io_address address, u32 *value, u32 width);



acpi_status acpi_os_write_port(acpi_io_address address, u32 value, u32 width);





int acpi_os_read_iomem(void *virt_addr, u64 *value, u32 width);


acpi_status
acpi_os_read_memory(acpi_physical_address address, u64 *value, u32 width);



acpi_status
acpi_os_write_memory(acpi_physical_address address, u64 value, u32 width);
# 295 "../include/acpi/acpiosxf.h"
acpi_status
acpi_os_read_pci_configuration(struct acpi_pci_id *pci_id,
          u32 reg, u64 *value, u32 width);



acpi_status
acpi_os_write_pci_configuration(struct acpi_pci_id *pci_id,
    u32 reg, u64 value, u32 width);
# 318 "../include/acpi/acpiosxf.h"
u64 acpi_os_get_timer(void);



acpi_status acpi_os_signal(u32 function, void *info);



acpi_status acpi_os_enter_sleep(u8 sleep_state, u32 rega_value, u32 regb_value);






__attribute__ ((__format__ (__printf__, 1, 1 +1)))
void acpi_os_printf(const char *format, ...);



void acpi_os_vprintf(const char *format, va_list args);
# 349 "../include/acpi/acpiosxf.h"
acpi_status acpi_os_get_line(char *buffer, u32 buffer_length, u32 *bytes_read);
# 361 "../include/acpi/acpiosxf.h"
acpi_status acpi_os_wait_command_ready(void);



acpi_status acpi_os_notify_command_complete(void);



void
acpi_os_trace_point(acpi_trace_event_type type,
      u8 begin, u8 *aml, char *pathname);
# 31 "../include/acpi/acpi.h" 2
# 1 "../include/acpi/acpixf.h" 1
# 17 "../include/acpi/acpixf.h"
# 1 "../include/acpi/acconfig.h" 1
# 18 "../include/acpi/acpixf.h" 2


# 1 "../include/acpi/acbuffer.h" 1
# 32 "../include/acpi/acbuffer.h"
struct acpi_fde_info {
 u32 floppy0;
 u32 floppy1;
 u32 floppy2;
 u32 floppy3;
 u32 tape;
};





struct acpi_grt_info {
 u16 year;
 u8 month;
 u8 day;
 u8 hour;
 u8 minute;
 u8 second;
 u8 valid;
 u16 milliseconds;
 u16 timezone;
 u8 daylight;
 u8 reserved[3];
};



struct acpi_gtm_info {
 u32 pio_speed0;
 u32 dma_speed0;
 u32 pio_speed1;
 u32 dma_speed1;
 u32 flags;
};
# 77 "../include/acpi/acbuffer.h"
struct acpi_pld_info {
 u8 revision;
 u8 ignore_color;
 u8 red;
 u8 green;
 u8 blue;
 u16 width;
 u16 height;
 u8 user_visible;
 u8 dock;
 u8 lid;
 u8 panel;
 u8 vertical_position;
 u8 horizontal_position;
 u8 shape;
 u8 group_orientation;
 u8 group_token;
 u8 group_position;
 u8 bay;
 u8 ejectable;
 u8 ospm_eject_required;
 u8 cabinet_number;
 u8 card_cage_number;
 u8 reference;
 u8 rotation;
 u8 order;
 u8 reserved;
 u16 vertical_offset;
 u16 horizontal_offset;
};
# 21 "../include/acpi/acpixf.h" 2
# 104 "../include/acpi/acpixf.h"
extern u8 acpi_gbl_enable_interpreter_slack;
# 113 "../include/acpi/acpixf.h"
extern u8 acpi_gbl_auto_serialize_methods;






extern u8 acpi_gbl_create_osi_method;





extern u8 acpi_gbl_use_default_register_widths;
# 136 "../include/acpi/acpixf.h"
extern u8 acpi_gbl_enable_table_validation;




extern u8 acpi_gbl_enable_aml_debug_object;







extern u8 acpi_gbl_copy_dsdt_locally;







extern u8 acpi_gbl_do_not_use_xsdt;
# 167 "../include/acpi/acpixf.h"
extern u8 acpi_gbl_use32_bit_fadt_addresses;
# 176 "../include/acpi/acpixf.h"
extern u8 acpi_gbl_use32_bit_facs_addresses;







extern u8 acpi_gbl_truncate_io_addresses;





extern u8 acpi_gbl_disable_auto_repair;





extern u8 acpi_gbl_disable_ssdt_table_install;




extern u8 acpi_gbl_runtime_namespace_override;





extern u8 acpi_gbl_osi_data;






extern u8 acpi_gbl_reduced_hardware;






extern u32 acpi_gbl_max_loop_iterations;
# 231 "../include/acpi/acpixf.h"
extern u8 acpi_gbl_ignore_package_resolution_errors;





extern u32 acpi_gbl_trace_flags;
extern const char * acpi_gbl_trace_method_name;
extern u32 acpi_gbl_trace_dbg_level;
extern u32 acpi_gbl_trace_dbg_layer;






extern u32 acpi_dbg_level;
extern u32 acpi_dbg_layer;



extern u8 acpi_gbl_display_debug_timer;
# 266 "../include/acpi/acpixf.h"
extern struct acpi_table_fadt acpi_gbl_FADT;
extern u32 acpi_current_gpe_count;
extern u8 acpi_gbl_system_awake_and_running;
# 404 "../include/acpi/acpixf.h"
acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_initialize_tables(struct acpi_table_desc *initial_storage, u32 initial_table_count, u8 allow_resize);




acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_initialize_subsystem(void);

acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_enable_subsystem(u32 flags);

acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_initialize_objects(u32 flags);

acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_terminate(void);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable(void) {return(((acpi_status) (0x001C | 0x0000)));}
acpi_status acpi_subsystem_status(void);

acpi_status acpi_get_system_info(struct acpi_buffer *ret_buffer);


acpi_status acpi_get_statistics(struct acpi_statistics *stats);

const char *acpi_format_exception(acpi_status exception);

acpi_status acpi_purge_cached_objects(void);

acpi_status acpi_install_interface(acpi_string interface_name);


acpi_status acpi_remove_interface(acpi_string interface_name);

acpi_status acpi_update_interfaces(u8 action);

u32 acpi_check_address_range(acpi_adr_space_type space_id, acpi_physical_address address, acpi_size length, u8 warn);





acpi_status acpi_decode_pld_buffer(u8 *in_buffer, acpi_size length, struct acpi_pld_info **return_buffer);
# 456 "../include/acpi/acpixf.h"
acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_install_table(acpi_physical_address address, u8 physical);



acpi_status acpi_load_table(struct acpi_table_header *table);


acpi_status acpi_unload_parent_table(acpi_handle object);


acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_load_tables(void);





acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_reallocate_root_table(void);


acpi_status __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_find_root_pointer(acpi_physical_address *rsdp_address);


acpi_status acpi_get_table_header(acpi_string signature, u32 instance, struct acpi_table_header *out_table_header);




acpi_status acpi_get_table(acpi_string signature, u32 instance, struct acpi_table_header **out_table);



void acpi_put_table(struct acpi_table_header *table);

acpi_status acpi_get_table_by_index(u32 table_index, struct acpi_table_header **out_table);



acpi_status acpi_install_table_handler(acpi_table_handler handler, void *context);


acpi_status acpi_remove_table_handler(acpi_table_handler handler);






acpi_status acpi_walk_namespace(acpi_object_type type, acpi_handle start_object, u32 max_depth, acpi_walk_callback descending_callback, acpi_walk_callback ascending_callback, void *context, void **return_value);
# 513 "../include/acpi/acpixf.h"
acpi_status acpi_get_devices(const char *HID, acpi_walk_callback user_function, void *context, void **return_value);




acpi_status acpi_get_name(acpi_handle object, u32 name_type, struct acpi_buffer *ret_path_ptr);


acpi_status acpi_get_handle(acpi_handle parent, acpi_string pathname, acpi_handle *ret_handle);



acpi_status acpi_attach_data(acpi_handle object, acpi_object_handler handler, void *data);



acpi_status acpi_detach_data(acpi_handle object, acpi_object_handler handler);


acpi_status acpi_get_data(acpi_handle object, acpi_object_handler handler, void **data);



acpi_status acpi_debug_trace(const char *name, u32 debug_level, u32 debug_layer, u32 flags);






acpi_status acpi_evaluate_object(acpi_handle object, acpi_string pathname, struct acpi_object_list *parameter_objects, struct acpi_buffer *return_object_buffer);






acpi_status acpi_evaluate_object_typed(acpi_handle object, acpi_string pathname, struct acpi_object_list *external_params, struct acpi_buffer *return_buffer, acpi_object_type return_type);
# 559 "../include/acpi/acpixf.h"
acpi_status acpi_get_object_info(acpi_handle object, struct acpi_device_info **return_buffer);



acpi_status acpi_install_method(u8 *buffer);

acpi_status acpi_get_next_object(acpi_object_type type, acpi_handle parent, acpi_handle child, acpi_handle *out_handle);





acpi_status acpi_get_type(acpi_handle object, acpi_object_type *out_type);



acpi_status acpi_get_parent(acpi_handle object, acpi_handle *out_handle);






acpi_status acpi_install_initialization_handler (acpi_init_handler handler, u32 function);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_sci_handler(acpi_sci_handler address, void *context) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_sci_handler(acpi_sci_handler address) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_global_event_handler (acpi_gbl_event_handler handler, void *context) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_fixed_event_handler(u32 acpi_event, acpi_event_handler handler, void *context) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_fixed_event_handler(u32 acpi_event, acpi_event_handler handler) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_gpe_handler(acpi_handle gpe_device, u32 gpe_number, u32 type, acpi_gpe_handler address, void *context) {return(((acpi_status) (0x001C | 0x0000)));}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_gpe_raw_handler(acpi_handle gpe_device, u32 gpe_number, u32 type, acpi_gpe_handler address, void *context) {return(((acpi_status) (0x001C | 0x0000)));}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_gpe_handler(acpi_handle gpe_device, u32 gpe_number, acpi_gpe_handler address) {return(((acpi_status) (0x001C | 0x0000)));}




acpi_status acpi_install_notify_handler(acpi_handle device, u32 handler_type, acpi_notify_handler handler, void *context);





acpi_status acpi_remove_notify_handler(acpi_handle device, u32 handler_type, acpi_notify_handler handler);




acpi_status acpi_install_address_space_handler(acpi_handle device, acpi_adr_space_type space_id, acpi_adr_space_handler handler, acpi_adr_space_setup setup, void *context);
# 649 "../include/acpi/acpixf.h"
acpi_status acpi_remove_address_space_handler(acpi_handle device, acpi_adr_space_type space_id, acpi_adr_space_handler handler);






acpi_status acpi_install_exception_handler (acpi_exception_handler handler);


acpi_status acpi_install_interface_handler (acpi_interface_handler handler);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_acquire_global_lock(u16 timeout, u32 *handle) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_release_global_lock(u32 handle) {return(((acpi_status) (0x001C | 0x0000)));}





acpi_status acpi_acquire_mutex(acpi_handle handle, acpi_string pathname, u16 timeout);




acpi_status acpi_release_mutex(acpi_handle handle, acpi_string pathname);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_event(u32 event, u32 flags) {return(((acpi_status) (0x001C | 0x0000)));}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable_event(u32 event, u32 flags) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_clear_event(u32 event) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_event_status(u32 event, acpi_event_status *event_status) {return(((acpi_status) (0x001C | 0x0000)));}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_update_all_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_clear_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_set_gpe(acpi_handle gpe_device, u32 gpe_number, u8 action) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_finish_gpe(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_mask_gpe(acpi_handle gpe_device, u32 gpe_number, u8 is_masked) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_mark_gpe_for_wake(acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_setup_gpe_for_wake(acpi_handle parent_device, acpi_handle gpe_device, u32 gpe_number) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_set_gpe_wake_mask(acpi_handle gpe_device, u32 gpe_number, u8 action) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_gpe_status(acpi_handle gpe_device, u32 gpe_number, acpi_event_status *event_status) {return(((acpi_status) (0x001C | 0x0000)));}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 acpi_dispatch_gpe(acpi_handle gpe_device, u32 gpe_number) {return(0);}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_disable_all_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_all_runtime_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enable_all_wakeup_gpes(void) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_gpe_device(u32 gpe_index, acpi_handle *gpe_device) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_install_gpe_block(acpi_handle gpe_device, struct acpi_generic_address *gpe_block_address, u32 register_count, u32 interrupt_number) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_remove_gpe_block(acpi_handle gpe_device) {return(((acpi_status) (0x001C | 0x0000)));}





typedef
acpi_status (*acpi_walk_resource_callback) (struct acpi_resource * resource,
         void *context);

acpi_status acpi_get_vendor_resource(acpi_handle device, char *name, struct acpi_vendor_uuid *uuid, struct acpi_buffer *ret_buffer);






acpi_status acpi_get_current_resources(acpi_handle device, struct acpi_buffer *ret_buffer);



acpi_status acpi_get_possible_resources(acpi_handle device, struct acpi_buffer *ret_buffer);



acpi_status acpi_get_event_resources(acpi_handle device_handle, struct acpi_buffer *ret_buffer);



acpi_status acpi_walk_resource_buffer(struct acpi_buffer *buffer, acpi_walk_resource_callback user_function, void *context);





acpi_status acpi_walk_resources(acpi_handle device, char *name, acpi_walk_resource_callback user_function, void *context);



acpi_status acpi_set_current_resources(acpi_handle device, struct acpi_buffer *in_buffer);



acpi_status acpi_get_irq_routing_table(acpi_handle device, struct acpi_buffer *ret_buffer);



acpi_status acpi_resource_to_address64(struct acpi_resource *resource, struct acpi_resource_address64 *out);





acpi_status acpi_buffer_to_resource(u8 *aml_buffer, u16 aml_buffer_length, struct acpi_resource **resource_ptr);
# 825 "../include/acpi/acpixf.h"
acpi_status acpi_reset(void);

acpi_status acpi_read(u64 *value, struct acpi_generic_address *reg);



acpi_status acpi_write(u64 value, struct acpi_generic_address *reg);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_read_bit_register(u32 register_id, u32 *return_value) {return(((acpi_status) (0x001C | 0x0000)));}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_write_bit_register(u32 register_id, u32 value) {return(((acpi_status) (0x001C | 0x0000)));}






acpi_status acpi_get_sleep_type_data(u8 sleep_state, u8 *slp_typ_a, u8 *slp_typ_b);




acpi_status acpi_enter_sleep_state_prep(u8 sleep_state);

acpi_status acpi_enter_sleep_state(u8 sleep_state);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_enter_sleep_state_s4bios(void) {return(((acpi_status) (0x001C | 0x0000)));}

acpi_status acpi_leave_sleep_state_prep(u8 sleep_state);

acpi_status acpi_leave_sleep_state(u8 sleep_state);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_set_firmware_waking_vector (acpi_physical_address physical_address, acpi_physical_address physical_address64) {return(((acpi_status) (0x001C | 0x0000)));}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_timer_resolution(u32 *resolution) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_timer(u32 *ticks) {return(((acpi_status) (0x001C | 0x0000)));}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_status acpi_get_timer_duration(u32 start_ticks, u32 end_ticks, u32 *time_elapsed) {return(((acpi_status) (0x001C | 0x0000)));}







__attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_error(const char *module_name, u32 line_number, const char *format, ...);




__attribute__ ((__format__ (__printf__, 4, 4 +1))) void acpi_exception(const char *module_name, u32 line_number, acpi_status status, const char *format, ...);





__attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_warning(const char *module_name, u32 line_number, const char *format, ...);




__attribute__ ((__format__ (__printf__, 1, 1 +1))) void acpi_info(const char *format, ...);


__attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_bios_error(const char *module_name, u32 line_number, const char *format, ...);




__attribute__ ((__format__ (__printf__, 4, 4 +1))) void acpi_bios_exception(const char *module_name, u32 line_number, acpi_status status, const char *format, ...);





__attribute__ ((__format__ (__printf__, 3, 3 +1))) void acpi_bios_warning(const char *module_name, u32 line_number, const char *format, ...);
# 919 "../include/acpi/acpixf.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 6, 6 +1))) void acpi_debug_print(u32 requested_debug_level, u32 line_number, const char *function_name, const char *module_name, u32 component_id, const char *format, ...) {return;}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __attribute__ ((__format__ (__printf__, 6, 6 +1))) void acpi_debug_print_raw(u32 requested_debug_level, u32 line_number, const char *function_name, const char *module_name, u32 component_id, const char *format, ...) {return;}
# 936 "../include/acpi/acpixf.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_trace_point(acpi_trace_event_type type, u8 begin, u8 *aml, char *pathname) {return;}




acpi_status acpi_initialize_debugger(void);

void acpi_terminate_debugger(void);




acpi_status acpi_get_data_full(acpi_handle object, acpi_object_handler handler, void **data, void (*callback)(void *));





void acpi_run_debugger(char *batch_buffer);

void acpi_set_debugger_thread_id(u64 thread_id);
# 32 "../include/acpi/acpi.h" 2
# 23 "../include/linux/acpi.h" 2





# 1 "../include/linux/dynamic_debug.h" 1
# 14 "../include/linux/dynamic_debug.h"
struct _ddebug {




 const char *modname;
 const char *function;
 const char *filename;
 const char *format;
 unsigned int lineno:18;
# 40 "../include/linux/dynamic_debug.h"
 unsigned int flags:8;

 union {
  struct static_key_true dd_key_true;
  struct static_key_false dd_key_false;
 } key;

} __attribute__((aligned(8)));
# 180 "../include/linux/dynamic_debug.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ddebug_add_module(struct _ddebug *tab, unsigned int n,
        const char *modname)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ddebug_remove_module(const char *mod)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int ddebug_dyndbg_module_param_cb(char *param, char *val,
      const char *modname)
{
 if (strstr(param, "dyndbg")) {

  printk("\001" "4" "dyndbg param is supported only in "
   "CONFIG_DYNAMIC_DEBUG builds\n");
  return 0;
 }
 return -22;
}
# 29 "../include/linux/acpi.h" 2



# 1 "../include/acpi/acpi_bus.h" 1
# 17 "../include/acpi/acpi_bus.h"
struct acpi_handle_list {
 u32 count;
 acpi_handle handles[10];
};


acpi_status
acpi_extract_package(union acpi_object *package,
       struct acpi_buffer *format, struct acpi_buffer *buffer);
acpi_status
acpi_evaluate_integer(acpi_handle handle,
        acpi_string pathname,
        struct acpi_object_list *arguments, unsigned long long *data);
acpi_status
acpi_evaluate_reference(acpi_handle handle,
   acpi_string pathname,
   struct acpi_object_list *arguments,
   struct acpi_handle_list *list);
acpi_status
acpi_evaluate_ost(acpi_handle handle, u32 source_event, u32 status_code,
    struct acpi_buffer *status_buf);

acpi_status
acpi_get_physical_device_location(acpi_handle handle, struct acpi_pld_info **pld);

bool acpi_has_method(acpi_handle handle, char *name);
acpi_status acpi_execute_simple_method(acpi_handle handle, char *method,
           u64 arg);
acpi_status acpi_evaluate_ej0(acpi_handle handle);
acpi_status acpi_evaluate_lck(acpi_handle handle, int lock);
bool acpi_ata_match(acpi_handle handle);
bool acpi_bay_match(acpi_handle handle);
bool acpi_dock_match(acpi_handle handle);

bool acpi_check_dsm(acpi_handle handle, const guid_t *guid, u64 rev, u64 funcs);
union acpi_object *acpi_evaluate_dsm(acpi_handle handle, const guid_t *guid,
   u64 rev, u64 func, union acpi_object *argv4);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) union acpi_object *
acpi_evaluate_dsm_typed(acpi_handle handle, const guid_t *guid, u64 rev,
   u64 func, union acpi_object *argv4,
   acpi_object_type type)
{
 union acpi_object *obj;

 obj = acpi_evaluate_dsm(handle, guid, rev, func, argv4);
 if (obj && obj->type != type) {
  acpi_os_free (obj);
  obj = ((void *)0);
 }

 return obj;
}
# 78 "../include/acpi/acpi_bus.h"
bool acpi_dev_found(const char *hid);
bool acpi_dev_present(const char *hid, const char *uid, s64 hrv);

struct acpi_device *
acpi_dev_get_first_match_dev(const char *hid, const char *uid, s64 hrv);




# 1 "../include/linux/proc_fs.h" 1
# 11 "../include/linux/proc_fs.h"
struct proc_dir_entry;
struct seq_file;
struct seq_operations;



typedef int (*proc_write_t)(struct file *, char *, size_t);

extern void proc_root_init(void);
extern void proc_flush_task(struct task_struct *);

extern struct proc_dir_entry *proc_symlink(const char *,
  struct proc_dir_entry *, const char *);
extern struct proc_dir_entry *proc_mkdir(const char *, struct proc_dir_entry *);
extern struct proc_dir_entry *proc_mkdir_data(const char *, umode_t,
           struct proc_dir_entry *, void *);
extern struct proc_dir_entry *proc_mkdir_mode(const char *, umode_t,
           struct proc_dir_entry *);
struct proc_dir_entry *proc_create_mount_point(const char *name);

struct proc_dir_entry *proc_create_seq_private(const char *name, umode_t mode,
  struct proc_dir_entry *parent, const struct seq_operations *ops,
  unsigned int state_size, void *data);




struct proc_dir_entry *proc_create_single_data(const char *name, umode_t mode,
  struct proc_dir_entry *parent,
  int (*show)(struct seq_file *, void *), void *data);



extern struct proc_dir_entry *proc_create_data(const char *, umode_t,
            struct proc_dir_entry *,
            const struct file_operations *,
            void *);

struct proc_dir_entry *proc_create(const char *name, umode_t mode, struct proc_dir_entry *parent, const struct file_operations *proc_fops);
extern void proc_set_size(struct proc_dir_entry *, loff_t);
extern void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
extern void *PDE_DATA(const struct inode *);
extern void *proc_get_parent_data(const struct inode *);
extern void proc_remove(struct proc_dir_entry *);
extern void remove_proc_entry(const char *, struct proc_dir_entry *);
extern int remove_proc_subtree(const char *, struct proc_dir_entry *);

struct proc_dir_entry *proc_create_net_data(const char *name, umode_t mode,
  struct proc_dir_entry *parent, const struct seq_operations *ops,
  unsigned int state_size, void *data);


struct proc_dir_entry *proc_create_net_single(const char *name, umode_t mode,
  struct proc_dir_entry *parent,
  int (*show)(struct seq_file *, void *), void *data);
struct proc_dir_entry *proc_create_net_data_write(const char *name, umode_t mode,
        struct proc_dir_entry *parent,
        const struct seq_operations *ops,
        proc_write_t write,
        unsigned int state_size, void *data);
struct proc_dir_entry *proc_create_net_single_write(const char *name, umode_t mode,
          struct proc_dir_entry *parent,
          int (*show)(struct seq_file *, void *),
          proc_write_t write,
          void *data);
extern struct pid *tgid_pidfd_to_pid(const struct file *file);
# 134 "../include/linux/proc_fs.h"
struct net;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct proc_dir_entry *proc_net_mkdir(
 struct net *net, const char *name, struct proc_dir_entry *parent)
{
 return proc_mkdir_data(name, 0, parent, net);
}

struct ns_common;
int open_related_ns(struct ns_common *ns,
     struct ns_common *(*get_ns)(struct ns_common *ns));


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct pid_namespace *proc_pid_ns(const struct inode *inode)
{
 return inode->i_sb->s_fs_info;
}
# 87 "../include/acpi/acpi_bus.h" 2


extern struct proc_dir_entry *acpi_root_dir;

enum acpi_bus_device_type {
 ACPI_BUS_TYPE_DEVICE = 0,
 ACPI_BUS_TYPE_POWER,
 ACPI_BUS_TYPE_PROCESSOR,
 ACPI_BUS_TYPE_THERMAL,
 ACPI_BUS_TYPE_POWER_BUTTON,
 ACPI_BUS_TYPE_SLEEP_BUTTON,
 ACPI_BUS_TYPE_ECDT_EC,
 ACPI_BUS_DEVICE_TYPE_COUNT
};

struct acpi_driver;
struct acpi_device;






struct acpi_hotplug_profile {
 struct kobject kobj;
 int (*scan_dependent)(struct acpi_device *adev);
 void (*notify_online)(struct acpi_device *adev);
 bool enabled:1;
 bool demand_offline:1;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct acpi_hotplug_profile *to_acpi_hotplug_profile(
      struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_121(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct acpi_hotplug_profile *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_121(); } while (0); ((struct acpi_hotplug_profile *)(__mptr - __builtin_offsetof(struct acpi_hotplug_profile, kobj))); });
}

struct acpi_scan_handler {
 const struct acpi_device_id *ids;
 struct list_head list_node;
 bool (*match)(const char *idstr, const struct acpi_device_id **matchid);
 int (*attach)(struct acpi_device *dev, const struct acpi_device_id *id);
 void (*detach)(struct acpi_device *dev);
 void (*bind)(struct device *phys_dev);
 void (*unbind)(struct device *phys_dev);
 struct acpi_hotplug_profile hotplug;
};






struct acpi_hotplug_context {
 struct acpi_device *self;
 int (*notify)(struct acpi_device *, u32);
 void (*uevent)(struct acpi_device *, u32);
 void (*fixup)(struct acpi_device *);
};






typedef int (*acpi_op_add) (struct acpi_device * device);
typedef int (*acpi_op_remove) (struct acpi_device * device);
typedef void (*acpi_op_notify) (struct acpi_device * device, u32 event);

struct acpi_device_ops {
 acpi_op_add add;
 acpi_op_remove remove;
 acpi_op_notify notify;
};



struct acpi_driver {
 char name[80];
 char class[80];
 const struct acpi_device_id *ids;
 unsigned int flags;
 struct acpi_device_ops ops;
 struct device_driver drv;
 struct module *owner;
};
# 181 "../include/acpi/acpi_bus.h"
struct acpi_device_status {
 u32 present:1;
 u32 enabled:1;
 u32 show_in_ui:1;
 u32 functional:1;
 u32 battery_present:1;
 u32 reserved:27;
};



struct acpi_device_flags {
 u32 dynamic_status:1;
 u32 removable:1;
 u32 ejectable:1;
 u32 power_manageable:1;
 u32 match_driver:1;
 u32 initialized:1;
 u32 visited:1;
 u32 hotplug_notify:1;
 u32 is_dock_station:1;
 u32 of_compatible_ok:1;
 u32 coherent_dma:1;
 u32 cca_seen:1;
 u32 enumeration_by_parent:1;
 u32 reserved:19;
};



struct acpi_device_dir {
 struct proc_dir_entry *entry;
};





typedef char acpi_bus_id[8];
typedef u64 acpi_bus_address;
typedef char acpi_device_name[40];
typedef char acpi_device_class[20];

struct acpi_hardware_id {
 struct list_head list;
 const char *id;
};

struct acpi_pnp_type {
 u32 hardware_id:1;
 u32 bus_address:1;
 u32 platform_id:1;
 u32 reserved:29;
};

struct acpi_device_pnp {
 acpi_bus_id bus_id;
 struct acpi_pnp_type type;
 acpi_bus_address bus_address;
 char *unique_id;
 struct list_head ids;
 acpi_device_name device_name;
 acpi_device_class device_class;
 union acpi_object *str_obj;
};



const char *acpi_device_hid(struct acpi_device *device);






struct acpi_device_power_flags {
 u32 explicit_get:1;
 u32 power_resources:1;
 u32 inrush_current:1;
 u32 power_removed:1;
 u32 ignore_parent:1;
 u32 dsw_present:1;
 u32 reserved:26;
};

struct acpi_device_power_state {
 struct {
  u8 valid:1;
  u8 explicit_set:1;
  u8 reserved:6;
 } flags;
 int power;
 int latency;
 struct list_head resources;
};

struct acpi_device_power {
 int state;
 struct acpi_device_power_flags flags;
 struct acpi_device_power_state states[5];
};



struct acpi_device_perf_flags {
 u8 reserved:8;
};

struct acpi_device_perf_state {
 struct {
  u8 valid:1;
  u8 reserved:7;
 } flags;
 u8 power;
 u8 performance;
 int latency;
};

struct acpi_device_perf {
 int state;
 struct acpi_device_perf_flags flags;
 int state_count;
 struct acpi_device_perf_state *states;
};


struct acpi_device_wakeup_flags {
 u8 valid:1;
 u8 notifier_present:1;
};

struct acpi_device_wakeup_context {
 void (*func)(struct acpi_device_wakeup_context *context);
 struct device *dev;
};

struct acpi_device_wakeup {
 acpi_handle gpe_device;
 u64 gpe_number;
 u64 sleep_state;
 struct list_head resources;
 struct acpi_device_wakeup_flags flags;
 struct acpi_device_wakeup_context context;
 struct wakeup_source *ws;
 int prepare_count;
 int enable_count;
};

struct acpi_device_physical_node {
 unsigned int node_id;
 struct list_head node;
 struct device *dev;
 bool put_online:1;
};

struct acpi_device_properties {
 const guid_t *guid;
 const union acpi_object *properties;
 struct list_head list;
};


struct acpi_device_data {
 const union acpi_object *pointer;
 struct list_head properties;
 const union acpi_object *of_compatible;
 struct list_head subnodes;
};

struct acpi_gpio_mapping;


struct acpi_device {
 int device_type;
 acpi_handle handle;
 struct fwnode_handle fwnode;
 struct acpi_device *parent;
 struct list_head children;
 struct list_head node;
 struct list_head wakeup_list;
 struct list_head del_list;
 struct acpi_device_status status;
 struct acpi_device_flags flags;
 struct acpi_device_pnp pnp;
 struct acpi_device_power power;
 struct acpi_device_wakeup wakeup;
 struct acpi_device_perf performance;
 struct acpi_device_dir dir;
 struct acpi_device_data data;
 struct acpi_scan_handler *handler;
 struct acpi_hotplug_context *hp;
 struct acpi_driver *driver;
 const struct acpi_gpio_mapping *driver_gpios;
 void *driver_data;
 struct device dev;
 unsigned int physical_node_count;
 unsigned int dep_unmet;
 struct list_head physical_node_list;
 struct mutex physical_node_lock;
 void (*remove)(struct acpi_device *);
};


struct acpi_data_node {
 const char *name;
 acpi_handle handle;
 struct fwnode_handle fwnode;
 struct fwnode_handle *parent;
 struct acpi_device_data data;
 struct list_head sibling;
 struct kobject kobj;
 struct completion kobj_done;
};

extern const struct fwnode_operations acpi_device_fwnode_ops;
extern const struct fwnode_operations acpi_data_fwnode_ops;
extern const struct fwnode_operations acpi_static_fwnode_ops;

bool is_acpi_device_node(const struct fwnode_handle *fwnode);
bool is_acpi_data_node(const struct fwnode_handle *fwnode);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_acpi_node(const struct fwnode_handle *fwnode)
{
 return (is_acpi_device_node(fwnode) || is_acpi_data_node(fwnode));
}
# 427 "../include/acpi/acpi_bus.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_acpi_static_node(const struct fwnode_handle *fwnode)
{
 return !IS_ERR_OR_NULL(fwnode) &&
  fwnode->ops == &acpi_static_fwnode_ops;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_data_node_match(const struct fwnode_handle *fwnode,
     const char *name)
{
 return is_acpi_data_node(fwnode) ?
  (!strcmp(({ typeof(fwnode) __to_acpi_data_node_fwnode = fwnode; is_acpi_data_node(__to_acpi_data_node_fwnode) ? ({ void *__mptr = (void *)(__to_acpi_data_node_fwnode); do { extern void __compiletime_assert_437(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(__to_acpi_data_node_fwnode)), typeof(((struct acpi_data_node *)0)->fwnode)) && !__builtin_types_compatible_p(typeof(*(__to_acpi_data_node_fwnode)), typeof(void))))) __compiletime_assert_437(); } while (0); ((struct acpi_data_node *)(__mptr - __builtin_offsetof(struct acpi_data_node, fwnode))); }) : ((void *)0); })->name, name)) : false;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *acpi_fwnode_handle(struct acpi_device *adev)
{
 return &adev->fwnode;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_driver_data(struct acpi_device *d)
{
 return d->driver_data;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_set_device_status(struct acpi_device *adev, u32 sta)
{
 *((u32 *)&adev->status) = sta;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_set_hp_context(struct acpi_device *adev,
           struct acpi_hotplug_context *hp)
{
 hp->self = adev;
 adev->hp = hp;
}

void acpi_initialize_hp_context(struct acpi_device *adev,
    struct acpi_hotplug_context *hp,
    int (*notify)(struct acpi_device *, u32),
    void (*uevent)(struct acpi_device *, u32));


extern struct bus_type acpi_bus_type;






struct acpi_bus_event {
 struct list_head node;
 acpi_device_class device_class;
 acpi_bus_id bus_id;
 u32 type;
 u32 data;
};

extern struct kobject *acpi_kobj;
extern int acpi_bus_generate_netlink_event(const char*, const char*, u8, int);
void acpi_bus_private_data_handler(acpi_handle, void *);
int acpi_bus_get_private_data(acpi_handle, void **);
int acpi_bus_attach_private_data(acpi_handle, void *);
void acpi_bus_detach_private_data(acpi_handle);
extern int acpi_notifier_call_chain(struct acpi_device *, u32, u32);
extern int register_acpi_notifier(struct notifier_block *);
extern int unregister_acpi_notifier(struct notifier_block *);





int acpi_bus_get_device(acpi_handle handle, struct acpi_device **device);
struct acpi_device *acpi_bus_get_acpi_device(acpi_handle handle);
void acpi_bus_put_acpi_device(struct acpi_device *adev);
acpi_status acpi_bus_get_status_handle(acpi_handle handle,
           unsigned long long *sta);
int acpi_bus_get_status(struct acpi_device *device);

int acpi_bus_set_power(acpi_handle handle, int state);
const char *acpi_power_state_string(int state);
int acpi_device_set_power(struct acpi_device *device, int state);
int acpi_bus_init_power(struct acpi_device *device);
int acpi_device_fix_up_power(struct acpi_device *device);
int acpi_bus_update_power(acpi_handle handle, int *state_p);
int acpi_device_update_power(struct acpi_device *device, int *state_p);
bool acpi_bus_power_manageable(acpi_handle handle);
int acpi_device_power_add_dependent(struct acpi_device *adev,
        struct device *dev);
void acpi_device_power_remove_dependent(struct acpi_device *adev,
     struct device *dev);


bool acpi_bus_can_wakeup(acpi_handle handle);




void acpi_scan_lock_acquire(void);
void acpi_scan_lock_release(void);
void acpi_lock_hp_context(void);
void acpi_unlock_hp_context(void);
int acpi_scan_add_handler(struct acpi_scan_handler *handler);
int acpi_bus_register_driver(struct acpi_driver *driver);
void acpi_bus_unregister_driver(struct acpi_driver *driver);
int acpi_bus_scan(acpi_handle handle);
void acpi_bus_trim(struct acpi_device *start);
acpi_status acpi_bus_get_ejd(acpi_handle handle, acpi_handle * ejd);
int acpi_match_device_ids(struct acpi_device *device,
     const struct acpi_device_id *ids);
void acpi_set_modalias(struct acpi_device *adev, const char *default_id,
         char *modalias, size_t len);
int acpi_create_dir(struct acpi_device *);
void acpi_remove_dir(struct acpi_device *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_device_enumerated(struct acpi_device *adev)
{
 return adev && adev->flags.initialized && adev->flags.visited;
}
# 563 "../include/acpi/acpi_bus.h"
struct acpi_bus_type {
 struct list_head list;
 const char *name;
 bool (*match)(struct device *dev);
 struct acpi_device * (*find_companion)(struct device *);
 void (*setup)(struct device *);
 void (*cleanup)(struct device *);
};
int register_acpi_bus_type(struct acpi_bus_type *);
int unregister_acpi_bus_type(struct acpi_bus_type *);
int acpi_bind_one(struct device *dev, struct acpi_device *adev);
int acpi_unbind_one(struct device *dev);

struct acpi_pci_root {
 struct acpi_device * device;
 struct pci_bus *bus;
 u16 segment;
 struct resource secondary;

 u32 osc_support_set;
 u32 osc_control_set;
 phys_addr_t mcfg_addr;
};



bool acpi_dma_supported(struct acpi_device *adev);
enum dev_dma_attr acpi_get_dma_attr(struct acpi_device *adev);
int acpi_dma_get_range(struct device *dev, u64 *dma_addr, u64 *offset,
         u64 *size);
int acpi_dma_configure(struct device *dev, enum dev_dma_attr attr);

struct acpi_device *acpi_find_child_device(struct acpi_device *parent,
        u64 address, bool check_children);
int acpi_is_root_bridge(acpi_handle);
struct acpi_pci_root *acpi_pci_find_root(acpi_handle handle);

int acpi_enable_wakeup_device_power(struct acpi_device *dev, int state);
int acpi_disable_wakeup_device_power(struct acpi_device *dev);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_device_always_present(struct acpi_device *adev)
{
 return false;
}



void acpi_pm_wakeup_event(struct device *dev);
acpi_status acpi_add_pm_notifier(struct acpi_device *adev, struct device *dev,
   void (*func)(struct acpi_device_wakeup_context *context));
acpi_status acpi_remove_pm_notifier(struct acpi_device *adev);
bool acpi_pm_device_can_wakeup(struct device *dev);
int acpi_pm_device_sleep_state(struct device *, int *, int);
int acpi_pm_set_device_wakeup(struct device *dev, bool enable);
int acpi_pm_set_bridge_wakeup(struct device *dev, bool enable);
# 660 "../include/acpi/acpi_bus.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_sleep_state_supported(u8 sleep_state) { return false; }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 acpi_target_system_state(void) { return (u8) 0; }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_device_power_manageable(struct acpi_device *adev)
{
 return adev->flags.power_manageable;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_device_can_wakeup(struct acpi_device *adev)
{
 return adev->wakeup.flags.valid;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_device_can_poweroff(struct acpi_device *adev)
{
 return adev->power.states[(u8) 4].flags.valid ||
  ((acpi_gbl_FADT.header.revision < 6) &&
  adev->power.states[(u8) 3].flags.explicit_set);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_dev_put(struct acpi_device *adev)
{
 put_device(&adev->dev);
}
# 33 "../include/linux/acpi.h" 2
# 1 "../include/acpi/acpi_drivers.h" 1
# 69 "../include/acpi/acpi_drivers.h"
int acpi_irq_penalty_init(void);
int acpi_pci_link_allocate_irq(acpi_handle handle, int index, int *triggering,
          int *polarity, char **name);
int acpi_pci_link_free_irq(acpi_handle handle);



struct pci_bus;


struct pci_dev *acpi_get_pci_dev(acpi_handle);
# 89 "../include/acpi/acpi_drivers.h"
struct pci_bus *pci_acpi_scan_root(struct acpi_pci_root *root);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pci_acpi_crs_quirks(void) { }
# 110 "../include/acpi/acpi_drivers.h"
extern int is_dock_device(struct acpi_device *adev);
# 34 "../include/linux/acpi.h" 2
# 1 "../include/acpi/acpi_numa.h" 1
# 16 "../include/acpi/acpi_numa.h"
extern int pxm_to_node(int);
extern int node_to_pxm(int);
extern int acpi_map_pxm_to_node(int);
extern unsigned char acpi_srat_revision;
extern int acpi_numa __attribute__((__section__(".init.data")));

extern void bad_srat(void);
extern int srat_disabled(void);
# 35 "../include/linux/acpi.h" 2
# 1 "../include/acpi/acpi_io.h" 1






# 1 "../arch/arm64/include/asm/acpi.h" 1
# 12 "../arch/arm64/include/asm/acpi.h"
# 1 "../include/linux/efi.h" 1
# 20 "../include/linux/efi.h"
# 1 "../include/linux/rtc.h" 1
# 18 "../include/linux/rtc.h"
# 1 "../include/linux/nvmem-provider.h" 1
# 15 "../include/linux/nvmem-provider.h"
struct nvmem_device;
struct nvmem_cell_info;
typedef int (*nvmem_reg_read_t)(void *priv, unsigned int offset,
    void *val, size_t bytes);
typedef int (*nvmem_reg_write_t)(void *priv, unsigned int offset,
     void *val, size_t bytes);

enum nvmem_type {
 NVMEM_TYPE_UNKNOWN = 0,
 NVMEM_TYPE_EEPROM,
 NVMEM_TYPE_OTP,
 NVMEM_TYPE_BATTERY_BACKED,
};
# 56 "../include/linux/nvmem-provider.h"
struct nvmem_config {
 struct device *dev;
 const char *name;
 int id;
 struct module *owner;
 const struct nvmem_cell_info *cells;
 int ncells;
 enum nvmem_type type;
 bool read_only;
 bool root_only;
 bool no_of_node;
 nvmem_reg_read_t reg_read;
 nvmem_reg_write_t reg_write;
 int size;
 int word_size;
 int stride;
 void *priv;

 bool compat;
 struct device *base_dev;
};
# 90 "../include/linux/nvmem-provider.h"
struct nvmem_cell_table {
 const char *nvmem_name;
 const struct nvmem_cell_info *cells;
 size_t ncells;
 struct list_head node;
};



struct nvmem_device *nvmem_register(const struct nvmem_config *cfg);
void nvmem_unregister(struct nvmem_device *nvmem);

struct nvmem_device *devm_nvmem_register(struct device *dev,
      const struct nvmem_config *cfg);

int devm_nvmem_unregister(struct device *dev, struct nvmem_device *nvmem);

void nvmem_add_cell_table(struct nvmem_cell_table *table);
void nvmem_del_cell_table(struct nvmem_cell_table *table);
# 19 "../include/linux/rtc.h" 2
# 1 "../include/uapi/linux/rtc.h" 1
# 21 "../include/uapi/linux/rtc.h"
struct rtc_time {
 int tm_sec;
 int tm_min;
 int tm_hour;
 int tm_mday;
 int tm_mon;
 int tm_year;
 int tm_wday;
 int tm_yday;
 int tm_isdst;
};





struct rtc_wkalrm {
 unsigned char enabled;
 unsigned char pending;
 struct rtc_time time;
};
# 56 "../include/uapi/linux/rtc.h"
struct rtc_pll_info {
 int pll_ctrl;
 int pll_value;
 int pll_max;
 int pll_min;
 int pll_posmult;
 int pll_negmult;
 long pll_clock;
};
# 20 "../include/linux/rtc.h" 2

extern int rtc_month_days(unsigned int month, unsigned int year);
extern int rtc_year_days(unsigned int day, unsigned int month, unsigned int year);
extern int rtc_valid_tm(struct rtc_time *tm);
extern time64_t rtc_tm_to_time64(struct rtc_time *tm);
extern void rtc_time64_to_tm(time64_t time, struct rtc_time *tm);
ktime_t rtc_tm_to_ktime(struct rtc_time tm);
struct rtc_time rtc_ktime_to_tm(ktime_t kt);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) time64_t rtc_tm_sub(struct rtc_time *lhs, struct rtc_time *rhs)
{
 return rtc_tm_to_time64(lhs) - rtc_tm_to_time64(rhs);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void rtc_time_to_tm(unsigned long time, struct rtc_time *tm)
{
 rtc_time64_to_tm(time, tm);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rtc_tm_to_time(struct rtc_time *tm, unsigned long *time)
{
 *time = rtc_tm_to_time64(tm);

 return 0;
}




# 1 "../include/linux/cdev.h" 1
# 10 "../include/linux/cdev.h"
struct file_operations;
struct inode;
struct module;

struct cdev {
 struct kobject kobj;
 struct module *owner;
 const struct file_operations *ops;
 struct list_head list;
 dev_t dev;
 unsigned int count;
} ;

void cdev_init(struct cdev *, const struct file_operations *);

struct cdev *cdev_alloc(void);

void cdev_put(struct cdev *p);

int cdev_add(struct cdev *, dev_t, unsigned);

void cdev_set_parent(struct cdev *p, struct kobject *kobj);
int cdev_device_add(struct cdev *cdev, struct device *dev);
void cdev_device_del(struct cdev *cdev, struct device *dev);

void cdev_del(struct cdev *);

void cd_forget(struct inode *);
# 52 "../include/linux/rtc.h" 2
# 1 "../include/linux/poll.h" 1
# 13 "../include/linux/poll.h"
# 1 "../include/uapi/linux/poll.h" 1
# 1 "./arch/arm64/include/generated/uapi/asm/poll.h" 1
# 1 "../include/uapi/asm-generic/poll.h" 1
# 36 "../include/uapi/asm-generic/poll.h"
struct pollfd {
 int fd;
 short events;
 short revents;
};
# 2 "./arch/arm64/include/generated/uapi/asm/poll.h" 2
# 2 "../include/uapi/linux/poll.h" 2
# 14 "../include/linux/poll.h" 2
# 1 "../include/uapi/linux/eventpoll.h" 1
# 77 "../include/uapi/linux/eventpoll.h"
struct epoll_event {
 __poll_t events;
 __u64 data;
} ;


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void ep_take_care_of_epollwakeup(struct epoll_event *epev)
{
 if ((epev->events & (( __poll_t)(1U << 29))) && !capable(36))
  epev->events &= ~(( __poll_t)(1U << 29));
}
# 15 "../include/linux/poll.h" 2

extern struct ctl_table epoll_table[];
# 32 "../include/linux/poll.h"
struct poll_table_struct;




typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);





typedef struct poll_table_struct {
 poll_queue_proc _qproc;
 __poll_t _key;
} poll_table;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
 if (p && p->_qproc && wait_address)
  p->_qproc(filp, wait_address, p);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool poll_does_not_wait(const poll_table *p)
{
 return p == ((void *)0) || p->_qproc == ((void *)0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t poll_requested_events(const poll_table *p)
{
 return p ? p->_key : ~(__poll_t)0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void init_poll_funcptr(poll_table *pt, poll_queue_proc qproc)
{
 pt->_qproc = qproc;
 pt->_key = ~(__poll_t)0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool file_can_poll(struct file *file)
{
 return file->f_op->poll;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t vfs_poll(struct file *file, struct poll_table_struct *pt)
{
 if (__builtin_expect(!!(!file->f_op->poll), 0))
  return (( __poll_t)0x00000001 | ( __poll_t)0x00000004 | ( __poll_t)0x00000040 | ( __poll_t)0x00000100);
 return file->f_op->poll(file, pt);
}

struct poll_table_entry {
 struct file *filp;
 __poll_t key;
 wait_queue_entry_t wait;
 wait_queue_head_t *wait_address;
};




struct poll_wqueues {
 poll_table pt;
 struct poll_table_page *table;
 struct task_struct *polling_task;
 int triggered;
 int error;
 int inline_index;
 struct poll_table_entry inline_entries[((768 - 256) / sizeof(struct poll_table_entry))];
};

extern void poll_initwait(struct poll_wqueues *pwq);
extern void poll_freewait(struct poll_wqueues *pwq);
extern u64 select_estimate_accuracy(struct timespec64 *tv);



extern int core_sys_select(int n, fd_set *inp, fd_set *outp,
      fd_set *exp, struct timespec64 *end_time);

extern int poll_select_set_timeout(struct timespec64 *to, time64_t sec,
       long nsec);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __u16 mangle_poll(__poll_t val)
{
 __u16 v = ( __u16)val;

 return (( __u16)( __poll_t)0x00000001 < 0x0001 ? (v & ( __u16)( __poll_t)0x00000001) * (0x0001/( __u16)( __poll_t)0x00000001) : (v & ( __u16)( __poll_t)0x00000001) / (( __u16)( __poll_t)0x00000001/0x0001)) | (( __u16)( __poll_t)0x00000004 < 0x0004 ? (v & ( __u16)( __poll_t)0x00000004) * (0x0004/( __u16)( __poll_t)0x00000004) : (v & ( __u16)( __poll_t)0x00000004) / (( __u16)( __poll_t)0x00000004/0x0004)) | (( __u16)( __poll_t)0x00000002 < 0x0002 ? (v & ( __u16)( __poll_t)0x00000002) * (0x0002/( __u16)( __poll_t)0x00000002) : (v & ( __u16)( __poll_t)0x00000002) / (( __u16)( __poll_t)0x00000002/0x0002)) | (( __u16)( __poll_t)0x00000008 < 0x0008 ? (v & ( __u16)( __poll_t)0x00000008) * (0x0008/( __u16)( __poll_t)0x00000008) : (v & ( __u16)( __poll_t)0x00000008) / (( __u16)( __poll_t)0x00000008/0x0008)) | (( __u16)( __poll_t)0x00000020 < 0x0020 ? (v & ( __u16)( __poll_t)0x00000020) * (0x0020/( __u16)( __poll_t)0x00000020) : (v & ( __u16)( __poll_t)0x00000020) / (( __u16)( __poll_t)0x00000020/0x0020)) |
  (( __u16)( __poll_t)0x00000040 < 0x0040 ? (v & ( __u16)( __poll_t)0x00000040) * (0x0040/( __u16)( __poll_t)0x00000040) : (v & ( __u16)( __poll_t)0x00000040) / (( __u16)( __poll_t)0x00000040/0x0040)) | (( __u16)( __poll_t)0x00000080 < 0x0080 ? (v & ( __u16)( __poll_t)0x00000080) * (0x0080/( __u16)( __poll_t)0x00000080) : (v & ( __u16)( __poll_t)0x00000080) / (( __u16)( __poll_t)0x00000080/0x0080)) | (( __u16)( __poll_t)0x00000100 < 0x0100 ? (v & ( __u16)( __poll_t)0x00000100) * (0x0100/( __u16)( __poll_t)0x00000100) : (v & ( __u16)( __poll_t)0x00000100) / (( __u16)( __poll_t)0x00000100/0x0100)) | (( __u16)( __poll_t)0x00000200 < 0x0200 ? (v & ( __u16)( __poll_t)0x00000200) * (0x0200/( __u16)( __poll_t)0x00000200) : (v & ( __u16)( __poll_t)0x00000200) / (( __u16)( __poll_t)0x00000200/0x0200)) |
  (( __u16)( __poll_t)0x00000010 < 0x0010 ? (v & ( __u16)( __poll_t)0x00000010) * (0x0010/( __u16)( __poll_t)0x00000010) : (v & ( __u16)( __poll_t)0x00000010) / (( __u16)( __poll_t)0x00000010/0x0010)) | (( __u16)( __poll_t)0x00002000 < 0x2000 ? (v & ( __u16)( __poll_t)0x00002000) * (0x2000/( __u16)( __poll_t)0x00002000) : (v & ( __u16)( __poll_t)0x00002000) / (( __u16)( __poll_t)0x00002000/0x2000)) | (( __u16)( __poll_t)0x00000400 < 0x0400 ? (v & ( __u16)( __poll_t)0x00000400) * (0x0400/( __u16)( __poll_t)0x00000400) : (v & ( __u16)( __poll_t)0x00000400) / (( __u16)( __poll_t)0x00000400/0x0400));

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) __poll_t demangle_poll(u16 val)
{

 return ( __poll_t)(0x0001 < ( __u16)( __poll_t)0x00000001 ? (val & 0x0001) * (( __u16)( __poll_t)0x00000001/0x0001) : (val & 0x0001) / (0x0001/( __u16)( __poll_t)0x00000001)) | ( __poll_t)(0x0004 < ( __u16)( __poll_t)0x00000004 ? (val & 0x0004) * (( __u16)( __poll_t)0x00000004/0x0004) : (val & 0x0004) / (0x0004/( __u16)( __poll_t)0x00000004)) | ( __poll_t)(0x0002 < ( __u16)( __poll_t)0x00000002 ? (val & 0x0002) * (( __u16)( __poll_t)0x00000002/0x0002) : (val & 0x0002) / (0x0002/( __u16)( __poll_t)0x00000002)) | ( __poll_t)(0x0008 < ( __u16)( __poll_t)0x00000008 ? (val & 0x0008) * (( __u16)( __poll_t)0x00000008/0x0008) : (val & 0x0008) / (0x0008/( __u16)( __poll_t)0x00000008)) | ( __poll_t)(0x0020 < ( __u16)( __poll_t)0x00000020 ? (val & 0x0020) * (( __u16)( __poll_t)0x00000020/0x0020) : (val & 0x0020) / (0x0020/( __u16)( __poll_t)0x00000020)) |
  ( __poll_t)(0x0040 < ( __u16)( __poll_t)0x00000040 ? (val & 0x0040) * (( __u16)( __poll_t)0x00000040/0x0040) : (val & 0x0040) / (0x0040/( __u16)( __poll_t)0x00000040)) | ( __poll_t)(0x0080 < ( __u16)( __poll_t)0x00000080 ? (val & 0x0080) * (( __u16)( __poll_t)0x00000080/0x0080) : (val & 0x0080) / (0x0080/( __u16)( __poll_t)0x00000080)) | ( __poll_t)(0x0100 < ( __u16)( __poll_t)0x00000100 ? (val & 0x0100) * (( __u16)( __poll_t)0x00000100/0x0100) : (val & 0x0100) / (0x0100/( __u16)( __poll_t)0x00000100)) | ( __poll_t)(0x0200 < ( __u16)( __poll_t)0x00000200 ? (val & 0x0200) * (( __u16)( __poll_t)0x00000200/0x0200) : (val & 0x0200) / (0x0200/( __u16)( __poll_t)0x00000200)) |
  ( __poll_t)(0x0010 < ( __u16)( __poll_t)0x00000010 ? (val & 0x0010) * (( __u16)( __poll_t)0x00000010/0x0010) : (val & 0x0010) / (0x0010/( __u16)( __poll_t)0x00000010)) | ( __poll_t)(0x2000 < ( __u16)( __poll_t)0x00002000 ? (val & 0x2000) * (( __u16)( __poll_t)0x00002000/0x2000) : (val & 0x2000) / (0x2000/( __u16)( __poll_t)0x00002000)) | ( __poll_t)(0x0400 < ( __u16)( __poll_t)0x00000400 ? (val & 0x0400) * (( __u16)( __poll_t)0x00000400/0x0400) : (val & 0x0400) / (0x0400/( __u16)( __poll_t)0x00000400));

}
# 53 "../include/linux/rtc.h" 2




extern struct class *rtc_class;
# 75 "../include/linux/rtc.h"
struct rtc_class_ops {
 int (*ioctl)(struct device *, unsigned int, unsigned long);
 int (*read_time)(struct device *, struct rtc_time *);
 int (*set_time)(struct device *, struct rtc_time *);
 int (*read_alarm)(struct device *, struct rtc_wkalrm *);
 int (*set_alarm)(struct device *, struct rtc_wkalrm *);
 int (*proc)(struct device *, struct seq_file *);
 int (*alarm_irq_enable)(struct device *, unsigned int enabled);
 int (*read_offset)(struct device *, long *offset);
 int (*set_offset)(struct device *, long offset);
};

struct rtc_device;

struct rtc_timer {
 struct timerqueue_node node;
 ktime_t period;
 void (*func)(struct rtc_device *rtc);
 struct rtc_device *rtc;
 int enabled;
};




struct rtc_device {
 struct device dev;
 struct module *owner;

 int id;

 const struct rtc_class_ops *ops;
 struct mutex ops_lock;

 struct cdev char_dev;
 unsigned long flags;

 unsigned long irq_data;
 spinlock_t irq_lock;
 wait_queue_head_t irq_queue;
 struct fasync_struct *async_queue;

 int irq_freq;
 int max_user_freq;

 struct timerqueue_head timerqueue;
 struct rtc_timer aie_timer;
 struct rtc_timer uie_rtctimer;
 struct hrtimer pie_timer;
 int pie_enabled;
 struct work_struct irqwork;

 int uie_unsupported;







 long set_offset_nsec;

 bool registered;


 bool nvram_old_abi;
 struct bin_attribute *nvram;

 time64_t range_min;
 timeu64_t range_max;
 time64_t start_secs;
 time64_t offset_secs;
 bool set_start_time;


 struct work_struct uie_task;
 struct timer_list uie_timer;

 unsigned int oldsecs;
 unsigned int uie_irq_active:1;
 unsigned int stop_uie_polling:1;
 unsigned int uie_task_active:1;
 unsigned int uie_timer_active:1;

};
# 169 "../include/linux/rtc.h"
extern struct rtc_device *devm_rtc_device_register(struct device *dev,
     const char *name,
     const struct rtc_class_ops *ops,
     struct module *owner);
struct rtc_device *devm_rtc_allocate_device(struct device *dev);
int __rtc_register_device(struct module *owner, struct rtc_device *rtc);

extern int rtc_read_time(struct rtc_device *rtc, struct rtc_time *tm);
extern int rtc_set_time(struct rtc_device *rtc, struct rtc_time *tm);
extern int rtc_set_ntp_time(struct timespec64 now, unsigned long *target_nsec);
int __rtc_read_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm);
extern int rtc_read_alarm(struct rtc_device *rtc,
   struct rtc_wkalrm *alrm);
extern int rtc_set_alarm(struct rtc_device *rtc,
    struct rtc_wkalrm *alrm);
extern int rtc_initialize_alarm(struct rtc_device *rtc,
    struct rtc_wkalrm *alrm);
extern void rtc_update_irq(struct rtc_device *rtc,
   unsigned long num, unsigned long events);

extern struct rtc_device *rtc_class_open(const char *name);
extern void rtc_class_close(struct rtc_device *rtc);

extern int rtc_irq_set_state(struct rtc_device *rtc, int enabled);
extern int rtc_irq_set_freq(struct rtc_device *rtc, int freq);
extern int rtc_update_irq_enable(struct rtc_device *rtc, unsigned int enabled);
extern int rtc_alarm_irq_enable(struct rtc_device *rtc, unsigned int enabled);
extern int rtc_dev_update_irq_enable_emul(struct rtc_device *rtc,
      unsigned int enabled);

void rtc_handle_legacy_irq(struct rtc_device *rtc, int num, int mode);
void rtc_aie_update_irq(struct rtc_device *rtc);
void rtc_uie_update_irq(struct rtc_device *rtc);
enum hrtimer_restart rtc_pie_update_irq(struct hrtimer *timer);

void rtc_timer_init(struct rtc_timer *timer, void (*f)(struct rtc_device *r),
      struct rtc_device *rtc);
int rtc_timer_start(struct rtc_device *rtc, struct rtc_timer *timer,
      ktime_t expires, ktime_t period);
void rtc_timer_cancel(struct rtc_device *rtc, struct rtc_timer *timer);
int rtc_read_offset(struct rtc_device *rtc, long *offset);
int rtc_set_offset(struct rtc_device *rtc, long offset);
void rtc_timer_do_work(struct work_struct *work);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_leap_year(unsigned int year)
{
 return (!(year % 4) && (year % 100)) || !(year % 400);
}
# 227 "../include/linux/rtc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool rtc_tv_nsec_ok(s64 set_offset_nsec,
      struct timespec64 *to_set,
      const struct timespec64 *now)
{

 const unsigned long TIME_SET_NSEC_FUZZ = ((1000000000L +1000/2)/1000) * 5;
 struct timespec64 delay = {.tv_sec = 0,
       .tv_nsec = set_offset_nsec};

 *to_set = timespec64_add(*now, delay);

 if (to_set->tv_nsec < TIME_SET_NSEC_FUZZ) {
  to_set->tv_nsec = 0;
  return true;
 }

 if (to_set->tv_nsec > 1000000000L - TIME_SET_NSEC_FUZZ) {
  to_set->tv_sec++;
  to_set->tv_nsec = 0;
  return true;
 }
 return false;
}





extern int rtc_hctosys_ret;





int rtc_nvmem_register(struct rtc_device *rtc,
         struct nvmem_config *nvmem_config);
void rtc_nvmem_unregister(struct rtc_device *rtc);
# 274 "../include/linux/rtc.h"
int rtc_add_group(struct rtc_device *rtc, const struct attribute_group *grp);
int rtc_add_groups(struct rtc_device *rtc, const struct attribute_group **grps);
# 21 "../include/linux/efi.h" 2


# 1 "../include/linux/pstore.h" 1
# 15 "../include/linux/pstore.h"
# 1 "../include/linux/kmsg_dump.h" 1
# 23 "../include/linux/kmsg_dump.h"
enum kmsg_dump_reason {
 KMSG_DUMP_UNDEF,
 KMSG_DUMP_PANIC,
 KMSG_DUMP_OOPS,
 KMSG_DUMP_EMERG,
 KMSG_DUMP_RESTART,
 KMSG_DUMP_HALT,
 KMSG_DUMP_POWEROFF,
};
# 41 "../include/linux/kmsg_dump.h"
struct kmsg_dumper {
 struct list_head list;
 void (*dump)(struct kmsg_dumper *dumper, enum kmsg_dump_reason reason);
 enum kmsg_dump_reason max_reason;
 bool active;
 bool registered;


 u32 cur_idx;
 u32 next_idx;
 u64 cur_seq;
 u64 next_seq;
};


void kmsg_dump(enum kmsg_dump_reason reason);

bool kmsg_dump_get_line_nolock(struct kmsg_dumper *dumper, bool syslog,
          char *line, size_t size, size_t *len);

bool kmsg_dump_get_line(struct kmsg_dumper *dumper, bool syslog,
   char *line, size_t size, size_t *len);

bool kmsg_dump_get_buffer(struct kmsg_dumper *dumper, bool syslog,
     char *buf, size_t size, size_t *len);

void kmsg_dump_rewind_nolock(struct kmsg_dumper *dumper);

void kmsg_dump_rewind(struct kmsg_dumper *dumper);

int kmsg_dump_register(struct kmsg_dumper *dumper);

int kmsg_dump_unregister(struct kmsg_dumper *dumper);
# 16 "../include/linux/pstore.h" 2





struct module;






enum pstore_type_id {

 PSTORE_TYPE_DMESG = 0,
 PSTORE_TYPE_MCE = 1,
 PSTORE_TYPE_CONSOLE = 2,
 PSTORE_TYPE_FTRACE = 3,


 PSTORE_TYPE_PPC_RTAS = 4,
 PSTORE_TYPE_PPC_OF = 5,
 PSTORE_TYPE_PPC_COMMON = 6,
 PSTORE_TYPE_PMSG = 7,
 PSTORE_TYPE_PPC_OPAL = 8,


 PSTORE_TYPE_MAX
};

const char *pstore_type_to_name(enum pstore_type_id type);
enum pstore_type_id pstore_name_to_type(const char *name);

struct pstore_info;
# 69 "../include/linux/pstore.h"
struct pstore_record {
 struct pstore_info *psi;
 enum pstore_type_id type;
 u64 id;
 struct timespec64 time;
 char *buf;
 ssize_t size;
 ssize_t ecc_notice_size;

 int count;
 enum kmsg_dump_reason reason;
 unsigned int part;
 bool compressed;
};
# 171 "../include/linux/pstore.h"
struct pstore_info {
 struct module *owner;
 char *name;

 struct semaphore buf_lock;
 char *buf;
 size_t bufsize;

 struct mutex read_mutex;

 int flags;
 void *data;

 int (*open)(struct pstore_info *psi);
 int (*close)(struct pstore_info *psi);
 ssize_t (*read)(struct pstore_record *record);
 int (*write)(struct pstore_record *record);
 int (*write_user)(struct pstore_record *record,
          const char *buf);
 int (*erase)(struct pstore_record *record);
};







extern int pstore_register(struct pstore_info *);
extern void pstore_unregister(struct pstore_info *);

struct pstore_ftrace_record {
 unsigned long ip;
 unsigned long parent_ip;
 u64 ts;
};
# 252 "../include/linux/pstore.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pstore_ftrace_encode_cpu(struct pstore_ftrace_record *rec, unsigned int cpu)
{
 rec->ts &= ~((((((1UL))) << (8)) - 1));
 rec->ts |= cpu;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int
pstore_ftrace_decode_cpu(struct pstore_ftrace_record *rec)
{
 return rec->ts & (((((1UL))) << (8)) - 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64
pstore_ftrace_read_timestamp(struct pstore_ftrace_record *rec)
{
 return rec->ts >> 8;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
pstore_ftrace_write_timestamp(struct pstore_ftrace_record *rec, u64 val)
{
 rec->ts = (rec->ts & (((((1UL))) << (8)) - 1)) | (val << 8);
}
# 24 "../include/linux/efi.h" 2

# 1 "../include/linux/reboot.h" 1






# 1 "../include/uapi/linux/reboot.h" 1
# 8 "../include/linux/reboot.h" 2

struct device;






enum reboot_mode {
 REBOOT_UNDEFINED = -1,
 REBOOT_COLD = 0,
 REBOOT_WARM,
 REBOOT_HARD,
 REBOOT_SOFT,
 REBOOT_GPIO,
};
extern enum reboot_mode reboot_mode;
extern enum reboot_mode panic_reboot_mode;

enum reboot_type {
 BOOT_TRIPLE = 't',
 BOOT_KBD = 'k',
 BOOT_BIOS = 'b',
 BOOT_ACPI = 'a',
 BOOT_EFI = 'e',
 BOOT_CF9_FORCE = 'p',
 BOOT_CF9_SAFE = 'q',
};
extern enum reboot_type reboot_type;

extern int reboot_default;
extern int reboot_cpu;
extern int reboot_force;


extern int register_reboot_notifier(struct notifier_block *);
extern int unregister_reboot_notifier(struct notifier_block *);

extern int devm_register_reboot_notifier(struct device *, struct notifier_block *);

extern int register_restart_handler(struct notifier_block *);
extern int unregister_restart_handler(struct notifier_block *);
extern void do_kernel_restart(char *cmd);





extern void migrate_to_reboot_cpu(void);
extern void machine_restart(char *cmd);
extern void machine_halt(void);
extern void machine_power_off(void);

extern void machine_shutdown(void);
struct pt_regs;
extern void machine_crash_shutdown(struct pt_regs *);





extern void kernel_restart_prepare(char *cmd);
extern void kernel_restart(char *cmd);
extern void kernel_halt(void);
extern void kernel_power_off(void);

extern int C_A_D;
void ctrl_alt_del(void);


extern char poweroff_cmd[256];

extern void orderly_poweroff(bool force);
extern void orderly_reboot(void);





extern void emergency_restart(void);

# 1 "./arch/arm64/include/generated/asm/emergency-restart.h" 1
# 1 "../include/asm-generic/emergency-restart.h" 1




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void machine_emergency_restart(void)
{
 machine_restart(((void *)0));
}
# 2 "./arch/arm64/include/generated/asm/emergency-restart.h" 2
# 89 "../include/linux/reboot.h" 2
# 26 "../include/linux/efi.h" 2

# 1 "../include/linux/screen_info.h" 1




# 1 "../include/uapi/linux/screen_info.h" 1
# 11 "../include/uapi/linux/screen_info.h"
struct screen_info {
 __u8 orig_x;
 __u8 orig_y;
 __u16 ext_mem_k;
 __u16 orig_video_page;
 __u8 orig_video_mode;
 __u8 orig_video_cols;
 __u8 flags;
 __u8 unused2;
 __u16 orig_video_ega_bx;
 __u16 unused3;
 __u8 orig_video_lines;
 __u8 orig_video_isVGA;
 __u16 orig_video_points;


 __u16 lfb_width;
 __u16 lfb_height;
 __u16 lfb_depth;
 __u32 lfb_base;
 __u32 lfb_size;
 __u16 cl_magic, cl_offset;
 __u16 lfb_linelength;
 __u8 red_size;
 __u8 red_pos;
 __u8 green_size;
 __u8 green_pos;
 __u8 blue_size;
 __u8 blue_pos;
 __u8 rsvd_size;
 __u8 rsvd_pos;
 __u16 vesapm_seg;
 __u16 vesapm_off;
 __u16 pages;
 __u16 vesa_attributes;
 __u32 capabilities;
 __u32 ext_lfb_base;
 __u8 _reserved[2];
} __attribute__((packed));
# 6 "../include/linux/screen_info.h" 2

extern struct screen_info screen_info;
# 28 "../include/linux/efi.h" 2
# 45 "../include/linux/efi.h"
typedef unsigned long efi_status_t;
typedef u8 efi_bool_t;
typedef u16 efi_char16_t;
typedef u64 efi_physical_addr_t;
typedef void *efi_handle_t;
# 64 "../include/linux/efi.h"
typedef guid_t efi_guid_t __attribute__((__aligned__(__alignof__(u32))));







typedef struct {
 u64 signature;
 u32 revision;
 u32 headersize;
 u32 crc32;
 u32 reserved;
} efi_table_hdr_t;
# 122 "../include/linux/efi.h"
typedef struct {
 u32 type;
 u32 pad;
 u64 phys_addr;
 u64 virt_addr;
 u64 num_pages;
 u64 attribute;
} efi_memory_desc_t;

typedef struct {
 efi_guid_t guid;
 u32 headersize;
 u32 flags;
 u32 imagesize;
} efi_capsule_header_t;

struct efi_boot_memmap {
 efi_memory_desc_t **map;
 unsigned long *map_size;
 unsigned long *desc_size;
 u32 *desc_ver;
 unsigned long *key_ptr;
 unsigned long *buff_size;
};
# 154 "../include/linux/efi.h"
struct capsule_info {
 efi_capsule_header_t header;
 efi_capsule_header_t *capsule;
 int reset_type;
 long index;
 size_t count;
 size_t total_size;
 struct page **pages;
 phys_addr_t *phys;
 size_t page_bytes_remain;
};

int __efi_capsule_setup_info(struct capsule_info *cap_info);
# 176 "../include/linux/efi.h"
typedef int (*efi_freemem_callback_t) (u64 start, u64 end, void *arg);
# 185 "../include/linux/efi.h"
typedef struct {
 u16 year;
 u8 month;
 u8 day;
 u8 hour;
 u8 minute;
 u8 second;
 u8 pad1;
 u32 nanosecond;
 s16 timezone;
 u8 daylight;
 u8 pad2;
} efi_time_t;

typedef struct {
 u32 resolution;
 u32 accuracy;
 u8 sets_to_zero;
} efi_time_cap_t;

typedef struct {
 efi_table_hdr_t hdr;
 u32 raise_tpl;
 u32 restore_tpl;
 u32 allocate_pages;
 u32 free_pages;
 u32 get_memory_map;
 u32 allocate_pool;
 u32 free_pool;
 u32 create_event;
 u32 set_timer;
 u32 wait_for_event;
 u32 signal_event;
 u32 close_event;
 u32 check_event;
 u32 install_protocol_interface;
 u32 reinstall_protocol_interface;
 u32 uninstall_protocol_interface;
 u32 handle_protocol;
 u32 __reserved;
 u32 register_protocol_notify;
 u32 locate_handle;
 u32 locate_device_path;
 u32 install_configuration_table;
 u32 load_image;
 u32 start_image;
 u32 exit;
 u32 unload_image;
 u32 exit_boot_services;
 u32 get_next_monotonic_count;
 u32 stall;
 u32 set_watchdog_timer;
 u32 connect_controller;
 u32 disconnect_controller;
 u32 open_protocol;
 u32 close_protocol;
 u32 open_protocol_information;
 u32 protocols_per_handle;
 u32 locate_handle_buffer;
 u32 locate_protocol;
 u32 install_multiple_protocol_interfaces;
 u32 uninstall_multiple_protocol_interfaces;
 u32 calculate_crc32;
 u32 copy_mem;
 u32 set_mem;
 u32 create_event_ex;
} __attribute__((__packed__)) efi_boot_services_32_t;

typedef struct {
 efi_table_hdr_t hdr;
 u64 raise_tpl;
 u64 restore_tpl;
 u64 allocate_pages;
 u64 free_pages;
 u64 get_memory_map;
 u64 allocate_pool;
 u64 free_pool;
 u64 create_event;
 u64 set_timer;
 u64 wait_for_event;
 u64 signal_event;
 u64 close_event;
 u64 check_event;
 u64 install_protocol_interface;
 u64 reinstall_protocol_interface;
 u64 uninstall_protocol_interface;
 u64 handle_protocol;
 u64 __reserved;
 u64 register_protocol_notify;
 u64 locate_handle;
 u64 locate_device_path;
 u64 install_configuration_table;
 u64 load_image;
 u64 start_image;
 u64 exit;
 u64 unload_image;
 u64 exit_boot_services;
 u64 get_next_monotonic_count;
 u64 stall;
 u64 set_watchdog_timer;
 u64 connect_controller;
 u64 disconnect_controller;
 u64 open_protocol;
 u64 close_protocol;
 u64 open_protocol_information;
 u64 protocols_per_handle;
 u64 locate_handle_buffer;
 u64 locate_protocol;
 u64 install_multiple_protocol_interfaces;
 u64 uninstall_multiple_protocol_interfaces;
 u64 calculate_crc32;
 u64 copy_mem;
 u64 set_mem;
 u64 create_event_ex;
} __attribute__((__packed__)) efi_boot_services_64_t;




typedef struct {
 efi_table_hdr_t hdr;
 void *raise_tpl;
 void *restore_tpl;
 efi_status_t (*allocate_pages)(int, int, unsigned long,
           efi_physical_addr_t *);
 efi_status_t (*free_pages)(efi_physical_addr_t, unsigned long);
 efi_status_t (*get_memory_map)(unsigned long *, void *, unsigned long *,
           unsigned long *, u32 *);
 efi_status_t (*allocate_pool)(int, unsigned long, void **);
 efi_status_t (*free_pool)(void *);
 void *create_event;
 void *set_timer;
 void *wait_for_event;
 void *signal_event;
 void *close_event;
 void *check_event;
 void *install_protocol_interface;
 void *reinstall_protocol_interface;
 void *uninstall_protocol_interface;
 efi_status_t (*handle_protocol)(efi_handle_t, efi_guid_t *, void **);
 void *__reserved;
 void *register_protocol_notify;
 efi_status_t (*locate_handle)(int, efi_guid_t *, void *,
          unsigned long *, efi_handle_t *);
 void *locate_device_path;
 efi_status_t (*install_configuration_table)(efi_guid_t *, void *);
 void *load_image;
 void *start_image;
 void *exit;
 void *unload_image;
 efi_status_t (*exit_boot_services)(efi_handle_t, unsigned long);
 void *get_next_monotonic_count;
 void *stall;
 void *set_watchdog_timer;
 void *connect_controller;
 void *disconnect_controller;
 void *open_protocol;
 void *close_protocol;
 void *open_protocol_information;
 void *protocols_per_handle;
 void *locate_handle_buffer;
 efi_status_t (*locate_protocol)(efi_guid_t *, void *, void **);
 void *install_multiple_protocol_interfaces;
 void *uninstall_multiple_protocol_interfaces;
 void *calculate_crc32;
 void *copy_mem;
 void *set_mem;
 void *create_event_ex;
} efi_boot_services_t;

typedef enum {
 EfiPciIoWidthUint8,
 EfiPciIoWidthUint16,
 EfiPciIoWidthUint32,
 EfiPciIoWidthUint64,
 EfiPciIoWidthFifoUint8,
 EfiPciIoWidthFifoUint16,
 EfiPciIoWidthFifoUint32,
 EfiPciIoWidthFifoUint64,
 EfiPciIoWidthFillUint8,
 EfiPciIoWidthFillUint16,
 EfiPciIoWidthFillUint32,
 EfiPciIoWidthFillUint64,
 EfiPciIoWidthMaximum
} EFI_PCI_IO_PROTOCOL_WIDTH;

typedef enum {
 EfiPciIoAttributeOperationGet,
 EfiPciIoAttributeOperationSet,
 EfiPciIoAttributeOperationEnable,
 EfiPciIoAttributeOperationDisable,
 EfiPciIoAttributeOperationSupported,
    EfiPciIoAttributeOperationMaximum
} EFI_PCI_IO_PROTOCOL_ATTRIBUTE_OPERATION;

typedef struct {
 u32 read;
 u32 write;
} efi_pci_io_protocol_access_32_t;

typedef struct {
 u64 read;
 u64 write;
} efi_pci_io_protocol_access_64_t;

typedef struct {
 void *read;
 void *write;
} efi_pci_io_protocol_access_t;

typedef struct {
 u32 poll_mem;
 u32 poll_io;
 efi_pci_io_protocol_access_32_t mem;
 efi_pci_io_protocol_access_32_t io;
 efi_pci_io_protocol_access_32_t pci;
 u32 copy_mem;
 u32 map;
 u32 unmap;
 u32 allocate_buffer;
 u32 free_buffer;
 u32 flush;
 u32 get_location;
 u32 attributes;
 u32 get_bar_attributes;
 u32 set_bar_attributes;
 u64 romsize;
 u32 romimage;
} efi_pci_io_protocol_32_t;

typedef struct {
 u64 poll_mem;
 u64 poll_io;
 efi_pci_io_protocol_access_64_t mem;
 efi_pci_io_protocol_access_64_t io;
 efi_pci_io_protocol_access_64_t pci;
 u64 copy_mem;
 u64 map;
 u64 unmap;
 u64 allocate_buffer;
 u64 free_buffer;
 u64 flush;
 u64 get_location;
 u64 attributes;
 u64 get_bar_attributes;
 u64 set_bar_attributes;
 u64 romsize;
 u64 romimage;
} efi_pci_io_protocol_64_t;

typedef struct {
 void *poll_mem;
 void *poll_io;
 efi_pci_io_protocol_access_t mem;
 efi_pci_io_protocol_access_t io;
 efi_pci_io_protocol_access_t pci;
 void *copy_mem;
 void *map;
 void *unmap;
 void *allocate_buffer;
 void *free_buffer;
 void *flush;
 void *get_location;
 void *attributes;
 void *get_bar_attributes;
 void *set_bar_attributes;
 uint64_t romsize;
 void *romimage;
} efi_pci_io_protocol_t;
# 475 "../include/linux/efi.h"
typedef struct {
 u32 version;
 u32 get;
 u32 set;
 u32 del;
 u32 get_all;
} apple_properties_protocol_32_t;

typedef struct {
 u64 version;
 u64 get;
 u64 set;
 u64 del;
 u64 get_all;
} apple_properties_protocol_64_t;

typedef struct {
 u32 get_capability;
 u32 get_event_log;
 u32 hash_log_extend_event;
 u32 submit_command;
 u32 get_active_pcr_banks;
 u32 set_active_pcr_banks;
 u32 get_result_of_set_active_pcr_banks;
} efi_tcg2_protocol_32_t;

typedef struct {
 u64 get_capability;
 u64 get_event_log;
 u64 hash_log_extend_event;
 u64 submit_command;
 u64 get_active_pcr_banks;
 u64 set_active_pcr_banks;
 u64 get_result_of_set_active_pcr_banks;
} efi_tcg2_protocol_64_t;

typedef u32 efi_tcg2_event_log_format;

typedef struct {
 void *get_capability;
 efi_status_t (*get_event_log)(efi_handle_t, efi_tcg2_event_log_format,
  efi_physical_addr_t *, efi_physical_addr_t *, efi_bool_t *);
 void *hash_log_extend_event;
 void *submit_command;
 void *get_active_pcr_banks;
 void *set_active_pcr_banks;
 void *get_result_of_set_active_pcr_banks;
} efi_tcg2_protocol_t;
# 537 "../include/linux/efi.h"
typedef struct {
 efi_table_hdr_t hdr;
 u32 get_time;
 u32 set_time;
 u32 get_wakeup_time;
 u32 set_wakeup_time;
 u32 set_virtual_address_map;
 u32 convert_pointer;
 u32 get_variable;
 u32 get_next_variable;
 u32 set_variable;
 u32 get_next_high_mono_count;
 u32 reset_system;
 u32 update_capsule;
 u32 query_capsule_caps;
 u32 query_variable_info;
} efi_runtime_services_32_t;

typedef struct {
 efi_table_hdr_t hdr;
 u64 get_time;
 u64 set_time;
 u64 get_wakeup_time;
 u64 set_wakeup_time;
 u64 set_virtual_address_map;
 u64 convert_pointer;
 u64 get_variable;
 u64 get_next_variable;
 u64 set_variable;
 u64 get_next_high_mono_count;
 u64 reset_system;
 u64 update_capsule;
 u64 query_capsule_caps;
 u64 query_variable_info;
} efi_runtime_services_64_t;

typedef efi_status_t efi_get_time_t (efi_time_t *tm, efi_time_cap_t *tc);
typedef efi_status_t efi_set_time_t (efi_time_t *tm);
typedef efi_status_t efi_get_wakeup_time_t (efi_bool_t *enabled, efi_bool_t *pending,
         efi_time_t *tm);
typedef efi_status_t efi_set_wakeup_time_t (efi_bool_t enabled, efi_time_t *tm);
typedef efi_status_t efi_get_variable_t (efi_char16_t *name, efi_guid_t *vendor, u32 *attr,
      unsigned long *data_size, void *data);
typedef efi_status_t efi_get_next_variable_t (unsigned long *name_size, efi_char16_t *name,
           efi_guid_t *vendor);
typedef efi_status_t efi_set_variable_t (efi_char16_t *name, efi_guid_t *vendor,
      u32 attr, unsigned long data_size,
      void *data);
typedef efi_status_t efi_get_next_high_mono_count_t (u32 *count);
typedef void efi_reset_system_t (int reset_type, efi_status_t status,
     unsigned long data_size, efi_char16_t *data);
typedef efi_status_t efi_set_virtual_address_map_t (unsigned long memory_map_size,
      unsigned long descriptor_size,
      u32 descriptor_version,
      efi_memory_desc_t *virtual_map);
typedef efi_status_t efi_query_variable_info_t(u32 attr,
            u64 *storage_space,
            u64 *remaining_space,
            u64 *max_variable_size);
typedef efi_status_t efi_update_capsule_t(efi_capsule_header_t **capsules,
       unsigned long count,
       unsigned long sg_list);
typedef efi_status_t efi_query_capsule_caps_t(efi_capsule_header_t **capsules,
           unsigned long count,
           u64 *max_size,
           int *reset_type);
typedef efi_status_t efi_query_variable_store_t(u32 attributes,
      unsigned long size,
      bool nonblocking);

typedef struct {
 efi_table_hdr_t hdr;
 efi_get_time_t *get_time;
 efi_set_time_t *set_time;
 efi_get_wakeup_time_t *get_wakeup_time;
 efi_set_wakeup_time_t *set_wakeup_time;
 efi_set_virtual_address_map_t *set_virtual_address_map;
 void *convert_pointer;
 efi_get_variable_t *get_variable;
 efi_get_next_variable_t *get_next_variable;
 efi_set_variable_t *set_variable;
 efi_get_next_high_mono_count_t *get_next_high_mono_count;
 efi_reset_system_t *reset_system;
 efi_update_capsule_t *update_capsule;
 efi_query_capsule_caps_t *query_capsule_caps;
 efi_query_variable_info_t *query_variable_info;
} efi_runtime_services_t;

void efi_native_runtime_setup(void);
# 698 "../include/linux/efi.h"
typedef struct {
 efi_guid_t guid;
 u64 table;
} efi_config_table_64_t;

typedef struct {
 efi_guid_t guid;
 u32 table;
} efi_config_table_32_t;

typedef struct {
 efi_guid_t guid;
 unsigned long table;
} efi_config_table_t;

typedef struct {
 efi_guid_t guid;
 const char *name;
 unsigned long *ptr;
} efi_config_table_type_t;
# 728 "../include/linux/efi.h"
typedef struct {
 efi_table_hdr_t hdr;
 u64 fw_vendor;
 u32 fw_revision;
 u32 __pad1;
 u64 con_in_handle;
 u64 con_in;
 u64 con_out_handle;
 u64 con_out;
 u64 stderr_handle;
 u64 stderr;
 u64 runtime;
 u64 boottime;
 u32 nr_tables;
 u32 __pad2;
 u64 tables;
} efi_system_table_64_t;

typedef struct {
 efi_table_hdr_t hdr;
 u32 fw_vendor;
 u32 fw_revision;
 u32 con_in_handle;
 u32 con_in;
 u32 con_out_handle;
 u32 con_out;
 u32 stderr_handle;
 u32 stderr;
 u32 runtime;
 u32 boottime;
 u32 nr_tables;
 u32 tables;
} efi_system_table_32_t;

typedef struct {
 efi_table_hdr_t hdr;
 unsigned long fw_vendor;
 u32 fw_revision;
 unsigned long con_in_handle;
 unsigned long con_in;
 unsigned long con_out_handle;
 unsigned long con_out;
 unsigned long stderr_handle;
 unsigned long stderr;
 efi_runtime_services_t *runtime;
 efi_boot_services_t *boottime;
 unsigned long nr_tables;
 unsigned long tables;
} efi_system_table_t;






struct efi_memory_map_data {
 phys_addr_t phys_map;
 unsigned long size;
 unsigned long desc_version;
 unsigned long desc_size;
};

struct efi_memory_map {
 phys_addr_t phys_map;
 void *map;
 void *map_end;
 int nr_map;
 unsigned long desc_version;
 unsigned long desc_size;
 bool late;
};

struct efi_mem_range {
 struct range range;
 u64 attribute;
};

struct efi_fdt_params {
 u64 system_table;
 u64 mmap;
 u32 mmap_size;
 u32 desc_size;
 u32 desc_ver;
};

typedef struct {
 u32 revision;
 u32 parent_handle;
 u32 system_table;
 u32 device_handle;
 u32 file_path;
 u32 reserved;
 u32 load_options_size;
 u32 load_options;
 u32 image_base;
 __u64 __attribute__((aligned(8))) image_size;
 unsigned int image_code_type;
 unsigned int image_data_type;
 unsigned long unload;
} efi_loaded_image_32_t;

typedef struct {
 u32 revision;
 u64 parent_handle;
 u64 system_table;
 u64 device_handle;
 u64 file_path;
 u64 reserved;
 u32 load_options_size;
 u64 load_options;
 u64 image_base;
 __u64 __attribute__((aligned(8))) image_size;
 unsigned int image_code_type;
 unsigned int image_data_type;
 unsigned long unload;
} efi_loaded_image_64_t;

typedef struct {
 u32 revision;
 void *parent_handle;
 efi_system_table_t *system_table;
 void *device_handle;
 void *file_path;
 void *reserved;
 u32 load_options_size;
 void *load_options;
 void *image_base;
 __u64 __attribute__((aligned(8))) image_size;
 unsigned int image_code_type;
 unsigned int image_data_type;
 unsigned long unload;
} efi_loaded_image_t;


typedef struct {
 u64 size;
 u64 file_size;
 u64 phys_size;
 efi_time_t create_time;
 efi_time_t last_access_time;
 efi_time_t modification_time;
 __u64 __attribute__((aligned(8))) attribute;
 efi_char16_t filename[1];
} efi_file_info_t;

typedef struct {
 u64 revision;
 u32 open;
 u32 close;
 u32 delete;
 u32 read;
 u32 write;
 u32 get_position;
 u32 set_position;
 u32 get_info;
 u32 set_info;
 u32 flush;
} efi_file_handle_32_t;

typedef struct {
 u64 revision;
 u64 open;
 u64 close;
 u64 delete;
 u64 read;
 u64 write;
 u64 get_position;
 u64 set_position;
 u64 get_info;
 u64 set_info;
 u64 flush;
} efi_file_handle_64_t;

typedef struct _efi_file_handle {
 u64 revision;
 efi_status_t (*open)(struct _efi_file_handle *,
        struct _efi_file_handle **,
        efi_char16_t *, u64, u64);
 efi_status_t (*close)(struct _efi_file_handle *);
 void *delete;
 efi_status_t (*read)(struct _efi_file_handle *, unsigned long *,
        void *);
 void *write;
 void *get_position;
 void *set_position;
 efi_status_t (*get_info)(struct _efi_file_handle *, efi_guid_t *,
   unsigned long *, void *);
 void *set_info;
 void *flush;
} efi_file_handle_t;

typedef struct {
 u64 revision;
 u32 open_volume;
} efi_file_io_interface_32_t;

typedef struct {
 u64 revision;
 u64 open_volume;
} efi_file_io_interface_64_t;

typedef struct _efi_file_io_interface {
 u64 revision;
 int (*open_volume)(struct _efi_file_io_interface *,
      efi_file_handle_t **);
} efi_file_io_interface_t;





typedef struct {
 u32 version;
 u32 length;
 u64 memory_protection_attribute;
} efi_properties_table_t;






typedef struct {
 u32 version;
 u32 num_entries;
 u32 desc_size;
 u32 reserved;
 efi_memory_desc_t entry[0];
} efi_memory_attributes_table_t;

typedef struct {
 efi_guid_t signature_owner;
 u8 signature_data[];
} efi_signature_data_t;

typedef struct {
 efi_guid_t signature_type;
 u32 signature_list_size;
 u32 signature_header_size;
 u32 signature_size;
 u8 signature_header[];

} efi_signature_list_t;

typedef u8 efi_sha256_hash_t[32];

typedef struct {
 efi_sha256_hash_t to_be_signed_hash;
 efi_time_t time_of_revocation;
} efi_cert_x509_sha256_t;




extern struct efi {
 efi_system_table_t *systab;
 unsigned int runtime_version;
 unsigned long mps;
 unsigned long acpi;
 unsigned long acpi20;
 unsigned long smbios;
 unsigned long smbios3;
 unsigned long boot_info;
 unsigned long hcdp;
 unsigned long uga;
 unsigned long fw_vendor;
 unsigned long runtime;
 unsigned long config_table;
 unsigned long esrt;
 unsigned long properties_table;
 unsigned long mem_attr_table;
 unsigned long rng_seed;
 unsigned long tpm_log;
 unsigned long tpm_final_log;
 unsigned long mem_reserve;
 efi_get_time_t *get_time;
 efi_set_time_t *set_time;
 efi_get_wakeup_time_t *get_wakeup_time;
 efi_set_wakeup_time_t *set_wakeup_time;
 efi_get_variable_t *get_variable;
 efi_get_next_variable_t *get_next_variable;
 efi_set_variable_t *set_variable;
 efi_set_variable_t *set_variable_nonblocking;
 efi_query_variable_info_t *query_variable_info;
 efi_query_variable_info_t *query_variable_info_nonblocking;
 efi_update_capsule_t *update_capsule;
 efi_query_capsule_caps_t *query_capsule_caps;
 efi_get_next_high_mono_count_t *get_next_high_mono_count;
 efi_reset_system_t *reset_system;
 efi_set_virtual_address_map_t *set_virtual_address_map;
 struct efi_memory_map memmap;
 unsigned long flags;
} efi;

extern struct mm_struct efi_mm;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
efi_guidcmp (efi_guid_t left, efi_guid_t right)
{
 return memcmp(&left, &right, sizeof (efi_guid_t));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) char *
efi_guid_to_str(efi_guid_t *guid, char *out)
{
 sprintf(out, "%pUl", guid->b);
        return out;
}

extern void efi_init (void);
extern void *efi_get_pal_addr (void);
extern void efi_map_pal_code (void);
extern void efi_memmap_walk (efi_freemem_callback_t callback, void *arg);
extern void efi_gettimeofday (struct timespec64 *ts);
extern void efi_enter_virtual_mode (void);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) efi_status_t efi_query_variable_store(u32 attributes,
          unsigned long size,
          bool nonblocking)
{
 return 0;
}

extern void *efi_lookup_mapped_addr(u64 phys_addr);

extern phys_addr_t __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_memmap_alloc(unsigned int num_entries);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_memmap_init_early(struct efi_memory_map_data *data);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_memmap_init_late(phys_addr_t addr, unsigned long size);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_memmap_unmap(void);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_memmap_install(phys_addr_t addr, unsigned int nr_map);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_memmap_split_count(efi_memory_desc_t *md,
      struct range *range);
extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_memmap_insert(struct efi_memory_map *old_memmap,
         void *buf, struct efi_mem_range *mem);

extern int efi_config_init(efi_config_table_type_t *arch_tables);

extern void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_esrt_init(void);



extern int efi_config_parse_tables(void *config_tables, int count, int sz,
       efi_config_table_type_t *arch_tables);
extern u64 efi_get_iobase (void);
extern int efi_mem_type(unsigned long phys_addr);
extern u64 efi_mem_attributes (unsigned long phys_addr);
extern u64 efi_mem_attribute (unsigned long phys_addr, unsigned long size);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_uart_console_only (void);
extern u64 efi_mem_desc_end(efi_memory_desc_t *md);
extern int efi_mem_desc_lookup(u64 phys_addr, efi_memory_desc_t *out_md);
extern void efi_mem_reserve(phys_addr_t addr, u64 size);
extern int efi_mem_reserve_persistent(phys_addr_t addr, u64 size);
extern void efi_initialize_iomem_resources(struct resource *code_resource,
  struct resource *data_resource, struct resource *bss_resource);
extern int efi_get_fdt_params(struct efi_fdt_params *params);
extern struct kobject *efi_kobj;

extern int efi_reboot_quirk_mode;
extern bool efi_poweroff_required(void);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void efi_fake_memmap(void) { }
# 1107 "../include/linux/efi.h"
typedef int (*efi_memattr_perm_setter)(struct mm_struct *, efi_memory_desc_t *);

extern int efi_memattr_init(void);
extern int efi_memattr_apply_permissions(struct mm_struct *mm,
      efi_memattr_perm_setter fn);
# 1154 "../include/linux/efi.h"
char * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) efi_md_typeattr_format(char *buf, size_t size,
         const efi_memory_desc_t *md);


typedef void (*efi_element_handler_t)(const char *source,
          const void *element_data,
          size_t element_size);
extern int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) parse_efi_signature_list(
 const char *source,
 const void *data, size_t size,
 efi_element_handler_t (*get_handler_for_guid)(const efi_guid_t *));
# 1174 "../include/linux/efi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int efi_range_is_wc(unsigned long start, unsigned long len)
{
 unsigned long i;

 for (i = 0; i < len; i += (1UL << 12)) {
  unsigned long paddr = ({ phys_addr_t __x = (phys_addr_t)(((unsigned long)(start + i))); (!(((u64)__x) & ((((1UL))) << (vabits_actual - 1)))) ? (((__x) + physvirt_offset)) : ((__x) - kimage_voffset); });
  if (!(efi_mem_attributes(paddr) & ((u64)0x0000000000000002ULL)))
   return 0;
 }

 return 1;
}
# 1210 "../include/linux/efi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool efi_enabled(int feature)
{
 return test_bit(feature, &efi.flags) != 0;
}
extern void efi_reboot(enum reboot_mode reboot_mode, const char *__unused);
# 1230 "../include/linux/efi.h"
extern int efi_status_to_err(efi_status_t status);
# 1301 "../include/linux/efi.h"
struct efi_generic_dev_path {
 u8 type;
 u8 sub_type;
 u16 length;
} __attribute ((packed));

struct efi_dev_path {
 u8 type;
 u8 sub_type;
 u16 length;
 union {
  struct {
   u32 hid;
   u32 uid;
  } acpi;
  struct {
   u8 fn;
   u8 dev;
  } pci;
 };
} __attribute ((packed));





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memrange_efi_to_native(u64 *addr, u64 *npages)
{
 *npages = (((*addr + (*npages<<12)) + ((1UL) << 16)-1) >> 16) - ((*addr) >> 16);
 *addr &= (~(((1UL) << 16)-1));
}
# 1340 "../include/linux/efi.h"
struct efivar_operations {
 efi_get_variable_t *get_variable;
 efi_get_next_variable_t *get_next_variable;
 efi_set_variable_t *set_variable;
 efi_set_variable_t *set_variable_nonblocking;
 efi_query_variable_store_t *query_variable_store;
};

struct efivars {
 struct kset *kset;
 struct kobject *kobject;
 const struct efivar_operations *ops;
};
# 1363 "../include/linux/efi.h"
struct efi_variable {
 efi_char16_t VariableName[1024/sizeof(efi_char16_t)];
 efi_guid_t VendorGuid;
 unsigned long DataSize;
 __u8 Data[1024];
 efi_status_t Status;
 __u32 Attributes;
} __attribute__((packed));

struct efivar_entry {
 struct efi_variable var;
 struct list_head list;
 struct kobject kobj;
 bool scanning;
 bool deleting;
};

typedef struct {
 u32 reset;
 u32 output_string;
 u32 test_string;
} efi_simple_text_output_protocol_32_t;

typedef struct {
 u64 reset;
 u64 output_string;
 u64 test_string;
} efi_simple_text_output_protocol_64_t;

struct efi_simple_text_output_protocol {
 void *reset;
 efi_status_t (*output_string)(void *, void *);
 void *test_string;
};







struct efi_pixel_bitmask {
 u32 red_mask;
 u32 green_mask;
 u32 blue_mask;
 u32 reserved_mask;
};

struct efi_graphics_output_mode_info {
 u32 version;
 u32 horizontal_resolution;
 u32 vertical_resolution;
 int pixel_format;
 struct efi_pixel_bitmask pixel_information;
 u32 pixels_per_scan_line;
} __attribute__((__packed__));

struct efi_graphics_output_protocol_mode_32 {
 u32 max_mode;
 u32 mode;
 u32 info;
 u32 size_of_info;
 u64 frame_buffer_base;
 u32 frame_buffer_size;
} __attribute__((__packed__));

struct efi_graphics_output_protocol_mode_64 {
 u32 max_mode;
 u32 mode;
 u64 info;
 u64 size_of_info;
 u64 frame_buffer_base;
 u64 frame_buffer_size;
} __attribute__((__packed__));

struct efi_graphics_output_protocol_mode {
 u32 max_mode;
 u32 mode;
 unsigned long info;
 unsigned long size_of_info;
 u64 frame_buffer_base;
 unsigned long frame_buffer_size;
} __attribute__((__packed__));

struct efi_graphics_output_protocol_32 {
 u32 query_mode;
 u32 set_mode;
 u32 blt;
 u32 mode;
};

struct efi_graphics_output_protocol_64 {
 u64 query_mode;
 u64 set_mode;
 u64 blt;
 u64 mode;
};

struct efi_graphics_output_protocol {
 unsigned long query_mode;
 unsigned long set_mode;
 unsigned long blt;
 struct efi_graphics_output_protocol_mode *mode;
};

typedef efi_status_t (*efi_graphics_output_protocol_query_mode)(
 struct efi_graphics_output_protocol *, u32, unsigned long *,
 struct efi_graphics_output_mode_info **);

extern struct list_head efivar_sysfs_list;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
efivar_unregister(struct efivar_entry *var)
{
 kobject_put(&var->kobj);
}

int efivars_register(struct efivars *efivars,
       const struct efivar_operations *ops,
       struct kobject *kobject);
int efivars_unregister(struct efivars *efivars);
struct kobject *efivars_kobject(void);

int efivar_init(int (*func)(efi_char16_t *, efi_guid_t, unsigned long, void *),
  void *data, bool duplicates, struct list_head *head);

int efivar_entry_add(struct efivar_entry *entry, struct list_head *head);
int efivar_entry_remove(struct efivar_entry *entry);

int __efivar_entry_delete(struct efivar_entry *entry);
int efivar_entry_delete(struct efivar_entry *entry);

int efivar_entry_size(struct efivar_entry *entry, unsigned long *size);
int __efivar_entry_get(struct efivar_entry *entry, u32 *attributes,
         unsigned long *size, void *data);
int efivar_entry_get(struct efivar_entry *entry, u32 *attributes,
       unsigned long *size, void *data);
int efivar_entry_set(struct efivar_entry *entry, u32 attributes,
       unsigned long size, void *data, struct list_head *head);
int efivar_entry_set_get_size(struct efivar_entry *entry, u32 attributes,
         unsigned long *size, void *data, bool *set);
int efivar_entry_set_safe(efi_char16_t *name, efi_guid_t vendor, u32 attributes,
     bool block, unsigned long size, void *data);

int efivar_entry_iter_begin(void);
void efivar_entry_iter_end(void);

int __efivar_entry_iter(int (*func)(struct efivar_entry *, void *),
   struct list_head *head, void *data,
   struct efivar_entry **prev);
int efivar_entry_iter(int (*func)(struct efivar_entry *, void *),
        struct list_head *head, void *data);

struct efivar_entry *efivar_entry_find(efi_char16_t *name, efi_guid_t guid,
           struct list_head *head, bool remove);

bool efivar_validate(efi_guid_t vendor, efi_char16_t *var_name, u8 *data,
       unsigned long data_size);
bool efivar_variable_is_removable(efi_guid_t vendor, const char *name,
      size_t len);

extern struct work_struct efivar_work;
void efivar_run_worker(void);







extern bool efi_capsule_pending(int *reset_type);

extern int efi_capsule_supported(efi_guid_t guid, u32 flags,
     size_t size, int *reset);

extern int efi_capsule_update(efi_capsule_header_t *capsule,
         phys_addr_t *pages);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int efi_runtime_map_init(struct kobject *kobj)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int efi_get_runtime_map_size(void)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int efi_get_runtime_map_desc_size(void)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int efi_runtime_map_copy(void *buf, size_t bufsz)
{
 return 0;
}





void efi_printk(efi_system_table_t *sys_table_arg, char *str);

void efi_free(efi_system_table_t *sys_table_arg, unsigned long size,
       unsigned long addr);

char *efi_convert_cmdline(efi_system_table_t *sys_table_arg,
     efi_loaded_image_t *image, int *cmd_line_len);

efi_status_t efi_get_memory_map(efi_system_table_t *sys_table_arg,
    struct efi_boot_memmap *map);

efi_status_t efi_low_alloc(efi_system_table_t *sys_table_arg,
      unsigned long size, unsigned long align,
      unsigned long *addr);

efi_status_t efi_high_alloc(efi_system_table_t *sys_table_arg,
       unsigned long size, unsigned long align,
       unsigned long *addr, unsigned long max);

efi_status_t efi_relocate_kernel(efi_system_table_t *sys_table_arg,
     unsigned long *image_addr,
     unsigned long image_size,
     unsigned long alloc_size,
     unsigned long preferred_addr,
     unsigned long alignment);

efi_status_t handle_cmdline_files(efi_system_table_t *sys_table_arg,
      efi_loaded_image_t *image,
      char *cmd_line, char *option_string,
      unsigned long max_addr,
      unsigned long *load_addr,
      unsigned long *load_size);

efi_status_t efi_parse_options(char const *cmdline);

efi_status_t efi_setup_gop(efi_system_table_t *sys_table_arg,
      struct screen_info *si, efi_guid_t *proto,
      unsigned long size);


extern bool efi_runtime_disabled(void);




extern void efi_call_virt_check_flags(unsigned long flags, const char *call);
extern unsigned long efi_call_virt_save_flags(void);

enum efi_secureboot_mode {
 efi_secureboot_mode_unset,
 efi_secureboot_mode_unknown,
 efi_secureboot_mode_disabled,
 efi_secureboot_mode_enabled,
};
enum efi_secureboot_mode efi_get_secureboot(efi_system_table_t *sys_table);


void efi_enable_reset_attack_mitigation(efi_system_table_t *sys_table_arg);





void efi_retrieve_tpm2_eventlog(efi_system_table_t *sys_table);
# 1685 "../include/linux/efi.h"
typedef efi_status_t (*efi_exit_boot_map_processing)(
 efi_system_table_t *sys_table_arg,
 struct efi_boot_memmap *map,
 void *priv);

efi_status_t efi_exit_boot_services(efi_system_table_t *sys_table,
        void *handle,
        struct efi_boot_memmap *map,
        void *priv,
        efi_exit_boot_map_processing priv_func);



struct linux_efi_random_seed {
 u32 size;
 u8 bits[];
};

struct linux_efi_tpm_eventlog {
 u32 size;
 u32 final_events_preboot_size;
 u8 version;
 u8 log[];
};

extern int efi_tpm_eventlog_init(void);

struct efi_tcg2_final_events_table {
 u64 version;
 u64 nr_events;
 u8 events[];
};
extern int efi_tpm_final_log_size;

extern unsigned long rci2_table_phys;






enum efi_rts_ids {
 EFI_NONE,
 EFI_GET_TIME,
 EFI_SET_TIME,
 EFI_GET_WAKEUP_TIME,
 EFI_SET_WAKEUP_TIME,
 EFI_GET_VARIABLE,
 EFI_GET_NEXT_VARIABLE,
 EFI_SET_VARIABLE,
 EFI_QUERY_VARIABLE_INFO,
 EFI_GET_NEXT_HIGH_MONO_COUNT,
 EFI_RESET_SYSTEM,
 EFI_UPDATE_CAPSULE,
 EFI_QUERY_CAPSULE_CAPS,
};
# 1749 "../include/linux/efi.h"
struct efi_runtime_work {
 void *arg1;
 void *arg2;
 void *arg3;
 void *arg4;
 void *arg5;
 efi_status_t status;
 struct work_struct work;
 enum efi_rts_ids efi_rts_id;
 struct completion efi_rts_comp;
};

extern struct efi_runtime_work efi_rts_work;


extern struct workqueue_struct *efi_rts_wq;

struct linux_efi_memreserve {
 int size;
 atomic_t count;
 phys_addr_t next;
 struct {
  phys_addr_t base;
  phys_addr_t size;
 } entry[0];
};
# 13 "../arch/arm64/include/asm/acpi.h" 2
# 1 "../include/linux/memblock.h" 1
# 14 "../include/linux/memblock.h"
# 1 "./arch/arm64/include/generated/asm/dma.h" 1
# 1 "../include/asm-generic/dma.h" 1
# 13 "../include/asm-generic/dma.h"
extern int request_dma(unsigned int dmanr, const char *device_id);
extern void free_dma(unsigned int dmanr);
# 2 "./arch/arm64/include/generated/asm/dma.h" 2
# 15 "../include/linux/memblock.h" 2

extern unsigned long max_low_pfn;
extern unsigned long min_low_pfn;




extern unsigned long max_pfn;



extern unsigned long long max_possible_pfn;
# 35 "../include/linux/memblock.h"
enum memblock_flags {
 MEMBLOCK_NONE = 0x0,
 MEMBLOCK_HOTPLUG = 0x1,
 MEMBLOCK_MIRROR = 0x2,
 MEMBLOCK_NOMAP = 0x4,
};
# 49 "../include/linux/memblock.h"
struct memblock_region {
 phys_addr_t base;
 phys_addr_t size;
 enum memblock_flags flags;

 int nid;

};
# 66 "../include/linux/memblock.h"
struct memblock_type {
 unsigned long cnt;
 unsigned long max;
 phys_addr_t total_size;
 struct memblock_region *regions;
 char *name;
};
# 82 "../include/linux/memblock.h"
struct memblock {
 bool bottom_up;
 phys_addr_t current_limit;
 struct memblock_type memory;
 struct memblock_type reserved;



};

extern struct memblock memblock;
extern int memblock_debug;
# 102 "../include/linux/memblock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memblock_discard(void) {}





phys_addr_t memblock_find_in_range(phys_addr_t start, phys_addr_t end,
       phys_addr_t size, phys_addr_t align);
void memblock_allow_resize(void);
int memblock_add_node(phys_addr_t base, phys_addr_t size, int nid);
int memblock_add(phys_addr_t base, phys_addr_t size);
int memblock_remove(phys_addr_t base, phys_addr_t size);
int memblock_free(phys_addr_t base, phys_addr_t size);
int memblock_reserve(phys_addr_t base, phys_addr_t size);
void memblock_trim_memory(phys_addr_t align);
bool memblock_overlaps_region(struct memblock_type *type,
         phys_addr_t base, phys_addr_t size);
int memblock_mark_hotplug(phys_addr_t base, phys_addr_t size);
int memblock_clear_hotplug(phys_addr_t base, phys_addr_t size);
int memblock_mark_mirror(phys_addr_t base, phys_addr_t size);
int memblock_mark_nomap(phys_addr_t base, phys_addr_t size);
int memblock_clear_nomap(phys_addr_t base, phys_addr_t size);

unsigned long memblock_free_all(void);
void reset_node_managed_pages(pg_data_t *pgdat);
void reset_all_zones_managed_pages(void);


int memblock_add_range(struct memblock_type *type,
         phys_addr_t base, phys_addr_t size,
         int nid, enum memblock_flags flags);

void __next_mem_range(u64 *idx, int nid, enum memblock_flags flags,
        struct memblock_type *type_a,
        struct memblock_type *type_b, phys_addr_t *out_start,
        phys_addr_t *out_end, int *out_nid);

void __next_mem_range_rev(u64 *idx, int nid, enum memblock_flags flags,
     struct memblock_type *type_a,
     struct memblock_type *type_b, phys_addr_t *out_start,
     phys_addr_t *out_end, int *out_nid);

void __next_reserved_mem_region(u64 *idx, phys_addr_t *out_start,
    phys_addr_t *out_end);

void __memblock_free_late(phys_addr_t base, phys_addr_t size);
# 204 "../include/linux/memblock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memblock_is_hotpluggable(struct memblock_region *m)
{
 return m->flags & MEMBLOCK_HOTPLUG;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memblock_is_mirror(struct memblock_region *m)
{
 return m->flags & MEMBLOCK_MIRROR;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memblock_is_nomap(struct memblock_region *m)
{
 return m->flags & MEMBLOCK_NOMAP;
}


int memblock_search_pfn_nid(unsigned long pfn, unsigned long *start_pfn,
       unsigned long *end_pfn);
void __next_mem_pfn_range(int *idx, int nid, unsigned long *out_start_pfn,
     unsigned long *out_end_pfn, int *out_nid);
# 315 "../include/linux/memblock.h"
int memblock_set_node(phys_addr_t base, phys_addr_t size,
        struct memblock_type *type, int nid);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memblock_set_region_node(struct memblock_region *r, int nid)
{
 r->nid = nid;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int memblock_get_region_node(const struct memblock_region *r)
{
 return r->nid;
}
# 350 "../include/linux/memblock.h"
phys_addr_t memblock_phys_alloc_range(phys_addr_t size, phys_addr_t align,
          phys_addr_t start, phys_addr_t end);
phys_addr_t memblock_phys_alloc_try_nid(phys_addr_t size, phys_addr_t align, int nid);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) phys_addr_t memblock_phys_alloc(phys_addr_t size,
           phys_addr_t align)
{
 return memblock_phys_alloc_range(size, align, 0,
      0);
}

void *memblock_alloc_try_nid_raw(phys_addr_t size, phys_addr_t align,
     phys_addr_t min_addr, phys_addr_t max_addr,
     int nid);
void *memblock_alloc_try_nid(phys_addr_t size, phys_addr_t align,
        phys_addr_t min_addr, phys_addr_t max_addr,
        int nid);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_alloc(phys_addr_t size, phys_addr_t align)
{
 return memblock_alloc_try_nid(size, align, 0,
          0, (-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_alloc_raw(phys_addr_t size,
            phys_addr_t align)
{
 return memblock_alloc_try_nid_raw(size, align, 0,
       0,
       (-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_alloc_from(phys_addr_t size,
      phys_addr_t align,
      phys_addr_t min_addr)
{
 return memblock_alloc_try_nid(size, align, min_addr,
          0, (-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_alloc_low(phys_addr_t size,
            phys_addr_t align)
{
 return memblock_alloc_try_nid(size, align, 0,
          (arm64_dma_phys_limit - 1), (-1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_alloc_node(phys_addr_t size,
      phys_addr_t align, int nid)
{
 return memblock_alloc_try_nid(size, align, 0,
          0, nid);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_free_early(phys_addr_t base,
           phys_addr_t size)
{
 memblock_free(base, size);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_free_early_nid(phys_addr_t base,
        phys_addr_t size, int nid)
{
 memblock_free(base, size);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_free_late(phys_addr_t base, phys_addr_t size)
{
 __memblock_free_late(base, size);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) memblock_set_bottom_up(bool enable)
{
 memblock.bottom_up = enable;
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool memblock_bottom_up(void)
{
 return memblock.bottom_up;
}

phys_addr_t memblock_phys_mem_size(void);
phys_addr_t memblock_reserved_size(void);
phys_addr_t memblock_mem_size(unsigned long limit_pfn);
phys_addr_t memblock_start_of_DRAM(void);
phys_addr_t memblock_end_of_DRAM(void);
void memblock_enforce_memory_limit(phys_addr_t memory_limit);
void memblock_cap_memory_range(phys_addr_t base, phys_addr_t size);
void memblock_mem_limit_remove_map(phys_addr_t limit);
bool memblock_is_memory(phys_addr_t addr);
bool memblock_is_map_memory(phys_addr_t addr);
bool memblock_is_region_memory(phys_addr_t base, phys_addr_t size);
bool memblock_is_reserved(phys_addr_t addr);
bool memblock_is_region_reserved(phys_addr_t base, phys_addr_t size);

extern void __memblock_dump_all(void);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void memblock_dump_all(void)
{
 if (memblock_debug)
  __memblock_dump_all();
}







void memblock_set_current_limit(phys_addr_t limit);


phys_addr_t memblock_get_current_limit(void);
# 486 "../include/linux/memblock.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memblock_region_memory_base_pfn(const struct memblock_region *reg)
{
 return (((reg->base) + ((1UL) << 16)-1) >> 16);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memblock_region_memory_end_pfn(const struct memblock_region *reg)
{
 return ((reg->base + reg->size) >> 16);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memblock_region_reserved_base_pfn(const struct memblock_region *reg)
{
 return ((reg->base) >> 16);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long memblock_region_reserved_end_pfn(const struct memblock_region *reg)
{
 return (((reg->base + reg->size) + ((1UL) << 16)-1) >> 16);
}
# 534 "../include/linux/memblock.h"
extern void *alloc_large_system_hash(const char *tablename,
         unsigned long bucketsize,
         unsigned long numentries,
         int scale,
         int flags,
         unsigned int *_hash_shift,
         unsigned int *_hash_mask,
         unsigned long low_limit,
         unsigned long high_limit);
# 554 "../include/linux/memblock.h"
extern int hashdist;





extern void early_memtest(phys_addr_t start, phys_addr_t end);
# 14 "../arch/arm64/include/asm/acpi.h" 2
# 1 "../include/linux/psci.h" 1
# 16 "../include/linux/psci.h"
bool psci_tos_resident_on(int cpu);

int psci_cpu_suspend_enter(u32 state);
bool psci_power_state_is_valid(u32 state);

enum psci_conduit {
 PSCI_CONDUIT_NONE,
 PSCI_CONDUIT_SMC,
 PSCI_CONDUIT_HVC,
};

enum smccc_version {
 SMCCC_VERSION_1_0,
 SMCCC_VERSION_1_1,
};

struct psci_operations {
 u32 (*get_version)(void);
 int (*cpu_suspend)(u32 state, unsigned long entry_point);
 int (*cpu_off)(u32 state);
 int (*cpu_on)(unsigned long cpuid, unsigned long entry_point);
 int (*migrate)(unsigned long cpuid);
 int (*affinity_info)(unsigned long target_affinity,
   unsigned long lowest_affinity_level);
 int (*migrate_info_type)(void);
 enum psci_conduit conduit;
 enum smccc_version smccc_version;
};

extern struct psci_operations psci_ops;


int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) psci_dt_init(void);





int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) psci_acpi_init(void);
bool __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_psci_present(void);
bool acpi_psci_use_hvc(void);
# 15 "../arch/arm64/include/asm/acpi.h" 2




# 1 "../arch/arm64/include/asm/smp_plat.h" 1
# 13 "../arch/arm64/include/asm/smp_plat.h"
# 1 "./arch/arm64/include/generated/uapi/asm/types.h" 1
# 14 "../arch/arm64/include/asm/smp_plat.h" 2

struct mpidr_hash {
 u64 mask;
 u32 shift_aff[4];
 u32 bits;
};

extern struct mpidr_hash mpidr_hash;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 mpidr_hash_size(void)
{
 return 1 << mpidr_hash.bits;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int get_logical_index(u64 mpidr)
{
 int cpu;
 for (cpu = 0; cpu < nr_cpu_ids; cpu++)
  if (__cpu_logical_map[cpu] == mpidr)
   return cpu;
 return -22;
}
# 20 "../arch/arm64/include/asm/acpi.h" 2
# 46 "../arch/arm64/include/asm/acpi.h"
pgprot_t __acpi_get_mem_attribute(phys_addr_t addr);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *acpi_os_ioremap(acpi_physical_address phys,
         acpi_size size)
{

 if (memblock_is_map_memory(phys))
  return (void *)((unsigned long)((phys) - physvirt_offset));






 return __ioremap(phys, size, __acpi_get_mem_attribute(phys));
}


typedef u64 phys_cpuid_t;



extern int acpi_disabled;
extern int acpi_noirq;
extern int acpi_pci_disabled;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void disable_acpi(void)
{
 acpi_disabled = 1;
 acpi_pci_disabled = 1;
 acpi_noirq = 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void enable_acpi(void)
{
 acpi_disabled = 0;
 acpi_pci_disabled = 0;
 acpi_noirq = 0;
}
# 101 "../arch/arm64/include/asm/acpi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_has_cpu_in_madt(void)
{
 return true;
}

struct acpi_madt_generic_interrupt *acpi_cpu_get_madt_gicc(int cpu);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 get_acpi_id_for_cpu(unsigned int cpu)
{
 return acpi_cpu_get_madt_gicc(cpu)->uid;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_fix_phys_package_id(int num, u32 slot) { }
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_init_cpus(void);
int apei_claim_sea(struct pt_regs *regs);






bool acpi_parking_protocol_valid(int cpu);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__))
acpi_set_mailbox_entry(int cpu, struct acpi_madt_generic_interrupt *processor);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *acpi_get_enable_method(int cpu)
{
 if (acpi_psci_present())
  return "psci";

 if (acpi_parking_protocol_valid(cpu))
  return "parking-protocol";

 return ((void *)0);
}
# 151 "../arch/arm64/include/asm/acpi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pgprot_t arch_apei_get_mem_attribute(phys_addr_t addr)
{
 return __acpi_get_mem_attribute(addr);
}



int arm64_acpi_numa_init(void);
int acpi_numa_get_nid(unsigned int cpu);
void acpi_map_cpus_to_nodes(void);
# 8 "../include/acpi/acpi_io.h" 2
# 17 "../include/acpi/acpi_io.h"
extern bool acpi_permanent_mmap;

void __attribute__((__section__(".ref.text"))) __attribute__((__noinline__))
*acpi_os_map_iomem(acpi_physical_address phys, acpi_size size);
void __attribute__((__section__(".ref.text"))) __attribute__((__noinline__)) acpi_os_unmap_iomem(void *virt, acpi_size size);
void *acpi_os_get_iomem(acpi_physical_address phys, unsigned int size);

int acpi_os_map_generic_address(struct acpi_generic_address *addr);
void acpi_os_unmap_generic_address(struct acpi_generic_address *addr);
# 36 "../include/linux/acpi.h" 2


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) acpi_handle acpi_device_handle(struct acpi_device *adev)
{
 return adev ? adev->handle : ((void *)0);
}
# 50 "../include/linux/acpi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fwnode_handle *acpi_alloc_fwnode_static(void)
{
 struct fwnode_handle *fwnode;

 fwnode = kzalloc(sizeof(struct fwnode_handle), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!fwnode)
  return ((void *)0);

 fwnode->ops = &acpi_static_fwnode_ops;

 return fwnode;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_free_fwnode_static(struct fwnode_handle *fwnode)
{
 if (({ int __ret_warn_on = !!(!is_acpi_static_node(fwnode)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/acpi.h\"; .popsection; .long 14472b - 14470b; .short 65; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return;

 kfree(fwnode);
}
# 84 "../include/linux/acpi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool has_acpi_companion(struct device *dev)
{
 return is_acpi_device_node(dev->fwnode);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_preset_companion(struct device *dev,
      struct acpi_device *parent, u64 addr)
{
 set_primary_fwnode(dev, (acpi_find_child_device(parent, addr, false)) ? acpi_fwnode_handle(acpi_find_child_device(parent, addr, false)) : ((void *)0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const char *acpi_dev_name(struct acpi_device *adev)
{
 return dev_name(&adev->dev);
}

struct device *acpi_get_first_physical_node(struct acpi_device *adev);

enum acpi_irq_model_id {
 ACPI_IRQ_MODEL_PIC = 0,
 ACPI_IRQ_MODEL_IOAPIC,
 ACPI_IRQ_MODEL_IOSAPIC,
 ACPI_IRQ_MODEL_PLATFORM,
 ACPI_IRQ_MODEL_GIC,
 ACPI_IRQ_MODEL_COUNT
};

extern enum acpi_irq_model_id acpi_irq_model;

enum acpi_interrupt_id {
 ACPI_INTERRUPT_PMI = 1,
 ACPI_INTERRUPT_INIT,
 ACPI_INTERRUPT_CPEI,
 ACPI_INTERRUPT_COUNT
};



enum acpi_address_range_id {
 ACPI_ADDRESS_RANGE_MEMORY = 1,
 ACPI_ADDRESS_RANGE_RESERVED = 2,
 ACPI_ADDRESS_RANGE_ACPI = 3,
 ACPI_ADDRESS_RANGE_NVS = 4,
 ACPI_ADDRESS_RANGE_COUNT
};



union acpi_subtable_headers {
 struct acpi_subtable_header common;
 struct acpi_hmat_structure hmat;
};

typedef int (*acpi_tbl_table_handler)(struct acpi_table_header *table);

typedef int (*acpi_tbl_entry_handler)(union acpi_subtable_headers *header,
          const unsigned long end);



struct acpi_debugger_ops {
 int (*create_thread)(acpi_osd_exec_callback function, void *context);
 ssize_t (*write_log)(const char *msg);
 ssize_t (*read_cmd)(char *buffer, size_t length);
 int (*wait_command_ready)(bool single_step, char *buffer, size_t length);
 int (*notify_command_complete)(void);
};

struct acpi_debugger {
 const struct acpi_debugger_ops *ops;
 struct module *owner;
 struct mutex lock;
};
# 169 "../include/linux/acpi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_debugger_init(void)
{
 return -19;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_register_debugger(struct module *owner,
      const struct acpi_debugger_ops *ops)
{
 return -19;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_unregister_debugger(const struct acpi_debugger_ops *ops)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_debugger_create_thread(acpi_osd_exec_callback function,
           void *context)
{
 return -19;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_debugger_write_log(const char *msg)
{
 return -19;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_debugger_read_cmd(char *buffer, u32 buffer_length)
{
 return -19;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_debugger_wait_command_ready(void)
{
 return -19;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_debugger_notify_command_complete(void)
{
 return -19;
}






struct acpi_subtable_proc {
 int id;
 acpi_tbl_entry_handler handler;
 int count;
};

void *__acpi_map_table(unsigned long phys, unsigned long size);
void __acpi_unmap_table(void *map, unsigned long size);
int early_acpi_boot_init(void);
int acpi_boot_init (void);
void acpi_boot_table_init (void);
int acpi_mps_check (void);
int acpi_numa_init (void);

int acpi_table_init (void);
int acpi_table_parse(char *id, acpi_tbl_table_handler handler);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_table_parse_entries(char *id, unsigned long table_size,
         int entry_id,
         acpi_tbl_entry_handler handler,
         unsigned int max_entries);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_table_parse_entries_array(char *id, unsigned long table_size,
         struct acpi_subtable_proc *proc, int proc_num,
         unsigned int max_entries);
int acpi_table_parse_madt(enum acpi_madt_type id,
     acpi_tbl_entry_handler handler,
     unsigned int max_entries);
int acpi_parse_mcfg (struct acpi_table_header *header);
void acpi_table_print_madt_entry (struct acpi_subtable_header *madt);


void acpi_numa_slit_init (struct acpi_table_slit *slit);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
acpi_numa_processor_affinity_init(struct acpi_srat_cpu_affinity *pa) { }


void acpi_numa_x2apic_affinity_init(struct acpi_srat_x2apic_cpu_affinity *pa);


void acpi_numa_gicc_affinity_init(struct acpi_srat_gicc_affinity *pa);





int acpi_numa_memory_affinity_init (struct acpi_srat_mem_affinity *ma);






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool invalid_logical_cpuid(u32 cpuid)
{
 return (int)cpuid < 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool invalid_phys_cpuid(phys_cpuid_t phys_id)
{
 return phys_id == (~0UL);
}


bool acpi_duplicate_processor_id(int proc_id);



int acpi_map_cpu(acpi_handle handle, phys_cpuid_t physid, u32 acpi_id,
   int *pcpu);
int acpi_unmap_cpu(int cpu);






int acpi_register_ioapic(acpi_handle handle, u64 phys_addr, u32 gsi_base);
int acpi_unregister_ioapic(acpi_handle handle, u32 gsi_base);
int acpi_ioapic_registered(acpi_handle handle, u32 gsi_base);
void acpi_irq_stats_init(void);
extern u32 acpi_irq_handled;
extern u32 acpi_irq_not_handled;
extern unsigned int acpi_sci_irq;
extern bool acpi_no_s5;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_sci_irq_valid(void)
{
 return acpi_sci_irq != ((unsigned)-1);
}

extern int sbf_port;
extern unsigned long acpi_realmode_flags;

int acpi_register_gsi (struct device *dev, u32 gsi, int triggering, int polarity);
int acpi_gsi_to_irq (u32 gsi, unsigned int *irq);
int acpi_isa_irq_to_gsi (unsigned isa_irq, u32 *gsi);

void acpi_set_irq_model(enum acpi_irq_model_id model,
   struct fwnode_handle *fwnode);

struct irq_domain *acpi_irq_create_hierarchy(unsigned int flags,
          unsigned int size,
          struct fwnode_handle *fwnode,
          const struct irq_domain_ops *ops,
          void *host_data);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_get_override_irq(u32 gsi, int *trigger, int *polarity)
{
 return -1;
}






void acpi_unregister_gsi (u32 gsi);

struct pci_dev;

int acpi_pci_irq_enable (struct pci_dev *dev);
void acpi_penalize_isa_irq(int irq, int active);
bool acpi_isa_irq_available(int irq);

void acpi_penalize_sci_irq(int irq, int trigger, int polarity);






void acpi_pci_irq_disable (struct pci_dev *dev);

extern int ec_read(u8 addr, u8 *val);
extern int ec_write(u8 addr, u8 val);
extern int ec_transaction(u8 command,
                          const u8 *wdata, unsigned wdata_len,
                          u8 *rdata, unsigned rdata_len);
extern acpi_handle ec_get_handle(void);

extern bool acpi_is_pnp_device(struct acpi_device *);
# 397 "../include/linux/acpi.h"
extern char acpi_video_backlight_string[];
extern long acpi_is_video_device(acpi_handle handle);
extern int acpi_blacklisted(void);
extern void acpi_osi_setup(char *str);
extern bool acpi_osi_is_win8(void);


int acpi_map_pxm_to_online_node(int pxm);
int acpi_map_pxm_to_node(int pxm);
int acpi_get_node(acpi_handle handle);
# 421 "../include/linux/acpi.h"
extern int acpi_paddr_to_node(u64 start_addr, u64 size);

extern int pnpacpi_disabled;



bool acpi_dev_resource_memory(struct acpi_resource *ares, struct resource *res);
bool acpi_dev_resource_io(struct acpi_resource *ares, struct resource *res);
bool acpi_dev_resource_address_space(struct acpi_resource *ares,
         struct resource_win *win);
bool acpi_dev_resource_ext_address_space(struct acpi_resource *ares,
      struct resource_win *win);
unsigned long acpi_dev_irq_flags(u8 triggering, u8 polarity, u8 shareable);
unsigned int acpi_dev_get_irq_type(int triggering, int polarity);
bool acpi_dev_resource_interrupt(struct acpi_resource *ares, int index,
     struct resource *res);

void acpi_dev_free_resource_list(struct list_head *list);
int acpi_dev_get_resources(struct acpi_device *adev, struct list_head *list,
      int (*preproc)(struct acpi_resource *, void *),
      void *preproc_data);
int acpi_dev_get_dma_resources(struct acpi_device *adev,
          struct list_head *list);
int acpi_dev_filter_resource_type(struct acpi_resource *ares,
      unsigned long types);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_dev_filter_resource_type_cb(struct acpi_resource *ares,
         void *arg)
{
 return acpi_dev_filter_resource_type(ares, (unsigned long)arg);
}

struct acpi_device *acpi_resource_consumer(struct resource *res);

int acpi_check_resource_conflict(const struct resource *res);

int acpi_check_region(resource_size_t start, resource_size_t n,
        const char *name);

acpi_status acpi_release_memory(acpi_handle handle, struct resource *res,
    u32 level);

int acpi_resources_are_enforced(void);


void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_no_s4_hw_signature(void);



void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_old_suspend_ordering(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_nvs_nosave(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_nvs_nosave_s3(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) acpi_sleep_no_blacklist(void);


struct acpi_osc_context {
 char *uuid_str;
 int rev;
 struct acpi_buffer cap;
 struct acpi_buffer ret;
};

acpi_status acpi_run_osc(acpi_handle handle, struct acpi_osc_context *context);
# 509 "../include/linux/acpi.h"
extern bool osc_sb_apei_support_acked;
extern bool osc_pc_lpi_support_confirmed;
# 541 "../include/linux/acpi.h"
extern acpi_status acpi_pci_osc_control_set(acpi_handle handle,
          u32 *mask, u32 req);
# 579 "../include/linux/acpi.h"
enum acpi_predicate {
 all_versions,
 less_than_or_equal,
 equal,
 greater_than_or_equal,
};


struct acpi_platform_list {
 char oem_id[6 +1];
 char oem_table_id[8 +1];
 u32 oem_revision;
 char *table;
 enum acpi_predicate pred;
 char *reason;
 u32 data;
};
int acpi_match_platform_list(const struct acpi_platform_list *plat);

extern void acpi_early_init(void);
extern void acpi_subsystem_init(void);
extern void arch_post_acpi_subsys_init(void);

extern int acpi_nvs_register(__u64 start, __u64 size);

extern int acpi_nvs_for_each_region(int (*func)(__u64, __u64, void *),
        void *data);

const struct acpi_device_id *acpi_match_device(const struct acpi_device_id *ids,
            const struct device *dev);

const void *acpi_device_get_match_data(const struct device *dev);
extern bool acpi_driver_match_device(struct device *dev,
         const struct device_driver *drv);
int acpi_device_uevent_modalias(struct device *, struct kobj_uevent_env *);
int acpi_device_modalias(struct device *, char *, int);
void acpi_walk_dep_device_list(acpi_handle handle);

struct platform_device *acpi_create_platform_device(struct acpi_device *,
          struct property_entry *);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_device_set_enumerated(struct acpi_device *adev)
{
 adev->flags.visited = true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void acpi_device_clear_enumerated(struct acpi_device *adev)
{
 adev->flags.visited = false;
}

enum acpi_reconfig_event {
 ACPI_RECONFIG_DEVICE_ADD = 0,
 ACPI_RECONFIG_DEVICE_REMOVE,
};

int acpi_reconfig_notifier_register(struct notifier_block *nb);
int acpi_reconfig_notifier_unregister(struct notifier_block *nb);


int acpi_gtdt_init(struct acpi_table_header *table, int *platform_timer_count);
int acpi_gtdt_map_ppi(int type);
bool acpi_gtdt_c3stop(int type);
int acpi_arch_timer_mem_init(struct arch_timer_mem *timer_mem, int *timer_count);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 acpi_arch_get_root_pointer(void)
{
 return 0;
}
# 881 "../include/linux/acpi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_ioapic_add(acpi_handle root) { return 0; }



void acpi_os_set_prepare_sleep(int (*func)(u8 sleep_state,
          u32 pm1a_ctrl, u32 pm1b_ctrl));

acpi_status acpi_os_prepare_sleep(u8 sleep_state,
      u32 pm1a_control, u32 pm1b_control);

void acpi_os_set_prepare_extended_sleep(int (*func)(u8 sleep_state,
            u32 val_a, u32 val_b));

acpi_status acpi_os_prepare_extended_sleep(u8 sleep_state,
        u32 val_a, u32 val_b);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_reserve_mem_area(acpi_physical_address addr,
       size_t size)
{
}






int acpi_dev_suspend(struct device *dev, bool wakeup);
int acpi_dev_resume(struct device *dev);
int acpi_subsys_runtime_suspend(struct device *dev);
int acpi_subsys_runtime_resume(struct device *dev);
int acpi_dev_pm_attach(struct device *dev, bool power_on);
# 927 "../include/linux/acpi.h"
int acpi_subsys_prepare(struct device *dev);
void acpi_subsys_complete(struct device *dev);
int acpi_subsys_suspend_late(struct device *dev);
int acpi_subsys_suspend_noirq(struct device *dev);
int acpi_subsys_suspend(struct device *dev);
int acpi_subsys_freeze(struct device *dev);
int acpi_subsys_poweroff(struct device *dev);
void acpi_ec_mark_gpe_for_wake(void);
void acpi_ec_set_gpe_wake_mask(u8 action);
# 949 "../include/linux/acpi.h"
__attribute__((__format__(printf, 3, 4)))
void acpi_handle_printk(const char *level, acpi_handle handle,
   const char *fmt, ...);
# 1002 "../include/linux/acpi.h"
bool acpi_gpio_get_irq_resource(struct acpi_resource *ares,
    struct acpi_resource_gpio **agpio);
int acpi_dev_gpio_irq_get(struct acpi_device *adev, int index);
# 1020 "../include/linux/acpi.h"
int acpi_dev_get_property(const struct acpi_device *adev, const char *name,
     acpi_object_type type, const union acpi_object **obj);
int __acpi_node_get_property_reference(const struct fwnode_handle *fwnode,
    const char *name, size_t index, size_t num_args,
    struct fwnode_reference_args *args);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int acpi_node_get_property_reference(
    const struct fwnode_handle *fwnode,
    const char *name, size_t index,
    struct fwnode_reference_args *args)
{
 return __acpi_node_get_property_reference(fwnode, name, index,
  8, args);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool acpi_dev_has_props(const struct acpi_device *adev)
{
 return !list_empty(&adev->data.properties);
}

struct acpi_device_properties *
acpi_data_add_props(struct acpi_device_data *data, const guid_t *guid,
      const union acpi_object *properties);

int acpi_node_prop_get(const struct fwnode_handle *fwnode, const char *propname,
         void **valptr);
int acpi_dev_prop_read_single(struct acpi_device *adev,
         const char *propname, enum dev_prop_type proptype,
         void *val);
int acpi_node_prop_read(const struct fwnode_handle *fwnode,
   const char *propname, enum dev_prop_type proptype,
   void *val, size_t nval);
int acpi_dev_prop_read(const struct acpi_device *adev, const char *propname,
         enum dev_prop_type proptype, void *val, size_t nval);

struct fwnode_handle *acpi_get_next_subnode(const struct fwnode_handle *fwnode,
         struct fwnode_handle *child);
struct fwnode_handle *acpi_node_get_parent(const struct fwnode_handle *fwnode);

struct acpi_probe_entry;
typedef bool (*acpi_probe_entry_validate_subtbl)(struct acpi_subtable_header *,
       struct acpi_probe_entry *);
# 1078 "../include/linux/acpi.h"
struct acpi_probe_entry {
 __u8 id[5];
 __u8 type;
 acpi_probe_entry_validate_subtbl subtable_valid;
 union {
  acpi_tbl_table_handler probe_table;
  acpi_tbl_entry_handler probe_subtbl;
 };
 kernel_ulong_t driver_data;
};
# 1103 "../include/linux/acpi.h"
int __acpi_probe_device_table(struct acpi_probe_entry *start, int nr);
# 1217 "../include/linux/acpi.h"
void acpi_table_upgrade(void);





extern bool acpi_has_watchdog(void);





extern bool qdf2400_e44_present;
int acpi_parse_spcr(bool enable_earlycon, bool enable_console);
# 1239 "../include/linux/acpi.h"
int acpi_irq_get(acpi_handle handle, unsigned int index, struct resource *res);
# 1251 "../include/linux/acpi.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lpit_read_residency_count_address(u64 *address)
{
 return -22;
}



int acpi_pptt_cpu_is_thread(unsigned int cpu);
int find_acpi_cpu_topology(unsigned int cpu, int level);
int find_acpi_cpu_topology_package(unsigned int cpu);
int find_acpi_cpu_topology_hetero_id(unsigned int cpu);
int find_acpi_cpu_cache_topology(unsigned int cpu, int level);
# 1287 "../include/linux/acpi.h"
extern int acpi_platform_notify(struct device *dev, enum kobject_action action);
# 14 "../include/linux/i2c.h" 2




# 1 "../include/linux/rtmutex.h" 1
# 20 "../include/linux/rtmutex.h"
extern int max_lock_depth;
# 30 "../include/linux/rtmutex.h"
struct rt_mutex {
 raw_spinlock_t wait_lock;
 struct rb_root_cached waiters;
 struct task_struct *owner;
# 43 "../include/linux/rtmutex.h"
};

struct rt_mutex_waiter;
struct hrtimer_sleeper;






 static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_mutex_debug_check_no_locks_freed(const void *from,
             unsigned long len)
 {
 return 0;
 }
# 101 "../include/linux/rtmutex.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int rt_mutex_is_locked(struct rt_mutex *lock)
{
 return lock->owner != ((void *)0);
}

extern void __rt_mutex_init(struct rt_mutex *lock, const char *name, struct lock_class_key *key);
extern void rt_mutex_destroy(struct rt_mutex *lock);





extern void rt_mutex_lock(struct rt_mutex *lock);



extern int rt_mutex_lock_interruptible(struct rt_mutex *lock);
extern int rt_mutex_timed_lock(struct rt_mutex *lock,
          struct hrtimer_sleeper *timeout);

extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);
# 19 "../include/linux/i2c.h" 2



# 1 "../include/uapi/linux/i2c.h" 1
# 69 "../include/uapi/linux/i2c.h"
struct i2c_msg {
 __u16 addr;
 __u16 flags;
# 84 "../include/uapi/linux/i2c.h"
 __u16 len;
 __u8 *buf;
};
# 135 "../include/uapi/linux/i2c.h"
union i2c_smbus_data {
 __u8 byte;
 __u16 word;
 __u8 block[32 + 2];

};
# 23 "../include/linux/i2c.h" 2

extern struct bus_type i2c_bus_type;
extern struct device_type i2c_adapter_type;
extern struct device_type i2c_client_type;



struct i2c_msg;
struct i2c_algorithm;
struct i2c_adapter;
struct i2c_client;
struct i2c_driver;
struct i2c_device_identity;
union i2c_smbus_data;
struct i2c_board_info;
enum i2c_slave_event;
typedef int (*i2c_slave_cb_t)(struct i2c_client *client,
         enum i2c_slave_event event, u8 *val);

struct module;
struct property_entry;
# 53 "../include/linux/i2c.h"
extern int i2c_transfer_buffer_flags(const struct i2c_client *client,
         char *buf, int count, u16 flags);
# 64 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_recv(const struct i2c_client *client,
      char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, buf, count, 0x0001);
};
# 79 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_recv_dmasafe(const struct i2c_client *client,
       char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, buf, count,
      0x0001 | 0x0200);
};
# 94 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_send(const struct i2c_client *client,
      const char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, (char *)buf, count, 0);
};
# 109 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_master_send_dmasafe(const struct i2c_client *client,
       const char *buf, int count)
{
 return i2c_transfer_buffer_flags(client, (char *)buf, count,
      0x0200);
};



extern int i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
   int num);

extern int __i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs,
     int num);






s32 i2c_smbus_xfer(struct i2c_adapter *adapter, u16 addr,
     unsigned short flags, char read_write, u8 command,
     int protocol, union i2c_smbus_data *data);


s32 __i2c_smbus_xfer(struct i2c_adapter *adapter, u16 addr,
       unsigned short flags, char read_write, u8 command,
       int protocol, union i2c_smbus_data *data);




extern s32 i2c_smbus_read_byte(const struct i2c_client *client);
extern s32 i2c_smbus_write_byte(const struct i2c_client *client, u8 value);
extern s32 i2c_smbus_read_byte_data(const struct i2c_client *client,
        u8 command);
extern s32 i2c_smbus_write_byte_data(const struct i2c_client *client,
         u8 command, u8 value);
extern s32 i2c_smbus_read_word_data(const struct i2c_client *client,
        u8 command);
extern s32 i2c_smbus_write_word_data(const struct i2c_client *client,
         u8 command, u16 value);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s32
i2c_smbus_read_word_swapped(const struct i2c_client *client, u8 command)
{
 s32 value = i2c_smbus_read_word_data(client, command);

 return (value < 0) ? value : (__builtin_constant_p((__u16)(value)) ? ((__u16)( (((__u16)(value) & (__u16)0x00ffU) << 8) | (((__u16)(value) & (__u16)0xff00U) >> 8))) : __fswab16(value));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s32
i2c_smbus_write_word_swapped(const struct i2c_client *client,
        u8 command, u16 value)
{
 return i2c_smbus_write_word_data(client, command, (__builtin_constant_p((__u16)(value)) ? ((__u16)( (((__u16)(value) & (__u16)0x00ffU) << 8) | (((__u16)(value) & (__u16)0xff00U) >> 8))) : __fswab16(value)));
}


extern s32 i2c_smbus_read_block_data(const struct i2c_client *client,
         u8 command, u8 *values);
extern s32 i2c_smbus_write_block_data(const struct i2c_client *client,
          u8 command, u8 length, const u8 *values);

extern s32 i2c_smbus_read_i2c_block_data(const struct i2c_client *client,
      u8 command, u8 length, u8 *values);
extern s32 i2c_smbus_write_i2c_block_data(const struct i2c_client *client,
       u8 command, u8 length,
       const u8 *values);
extern s32
i2c_smbus_read_i2c_block_data_or_emulated(const struct i2c_client *client,
       u8 command, u8 length, u8 *values);
int i2c_get_device_id(const struct i2c_client *client,
        struct i2c_device_identity *id);
# 191 "../include/linux/i2c.h"
struct i2c_device_identity {
 u16 manufacturer_id;
# 208 "../include/linux/i2c.h"
 u16 part_id;
 u8 die_revision;
};

enum i2c_alert_protocol {
 I2C_PROTOCOL_SMBUS_ALERT,
 I2C_PROTOCOL_SMBUS_HOST_NOTIFY,
};
# 253 "../include/linux/i2c.h"
struct i2c_driver {
 unsigned int class;


 int (*probe)(struct i2c_client *client, const struct i2c_device_id *id);
 int (*remove)(struct i2c_client *client);




 int (*probe_new)(struct i2c_client *client);


 void (*shutdown)(struct i2c_client *client);
# 275 "../include/linux/i2c.h"
 void (*alert)(struct i2c_client *client, enum i2c_alert_protocol protocol,
        unsigned int data);




 int (*command)(struct i2c_client *client, unsigned int cmd, void *arg);

 struct device_driver driver;
 const struct i2c_device_id *id_table;


 int (*detect)(struct i2c_client *client, struct i2c_board_info *info);
 const unsigned short *address_list;
 struct list_head clients;

 bool disable_i2c_core_irq_mapping;
};
# 313 "../include/linux/i2c.h"
struct i2c_client {
 unsigned short flags;
# 324 "../include/linux/i2c.h"
 unsigned short addr;


 char name[20];
 struct i2c_adapter *adapter;
 struct device dev;
 int init_irq;
 int irq;
 struct list_head detected;

 i2c_slave_cb_t slave_cb;

};


extern struct i2c_client *i2c_verify_client(struct device *dev);
extern struct i2c_adapter *i2c_verify_adapter(struct device *dev);
extern const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *id,
     const struct i2c_client *client);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct i2c_client *kobj_to_i2c_client(struct kobject *kobj)
{
 struct device * const dev = ({ void *__mptr = (void *)(kobj); do { extern void __compiletime_assert_346(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void))))) __compiletime_assert_346(); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
 return ({ void *__mptr = (void *)(dev); do { extern void __compiletime_assert_347(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(dev)), typeof(((struct i2c_client *)0)->dev)) && !__builtin_types_compatible_p(typeof(*(dev)), typeof(void))))) __compiletime_assert_347(); } while (0); ((struct i2c_client *)(__mptr - __builtin_offsetof(struct i2c_client, dev))); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *i2c_get_clientdata(const struct i2c_client *dev)
{
 return dev_get_drvdata(&dev->dev);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_set_clientdata(struct i2c_client *dev, void *data)
{
 dev_set_drvdata(&dev->dev, data);
}




enum i2c_slave_event {
 I2C_SLAVE_READ_REQUESTED,
 I2C_SLAVE_WRITE_REQUESTED,
 I2C_SLAVE_READ_PROCESSED,
 I2C_SLAVE_WRITE_RECEIVED,
 I2C_SLAVE_STOP,
};

extern int i2c_slave_register(struct i2c_client *client, i2c_slave_cb_t slave_cb);
extern int i2c_slave_unregister(struct i2c_client *client);
extern bool i2c_detect_slave_mode(struct device *dev);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_slave_event(struct i2c_client *client,
      enum i2c_slave_event event, u8 *val)
{
 return client->slave_cb(client, event, val);
}
# 409 "../include/linux/i2c.h"
struct i2c_board_info {
 char type[20];
 unsigned short flags;
 unsigned short addr;
 const char *dev_name;
 void *platform_data;
 struct device_node *of_node;
 struct fwnode_handle *fwnode;
 const struct property_entry *properties;
 const struct resource *resources;
 unsigned int num_resources;
 int irq;
};
# 442 "../include/linux/i2c.h"
extern struct i2c_client *
i2c_new_device(struct i2c_adapter *adap, struct i2c_board_info const *info);

extern struct i2c_client *
i2c_new_client_device(struct i2c_adapter *adap, struct i2c_board_info const *info);







extern struct i2c_client *
i2c_new_probed_device(struct i2c_adapter *adap,
        struct i2c_board_info *info,
        unsigned short const *addr_list,
        int (*probe)(struct i2c_adapter *adap, unsigned short addr));


extern int i2c_probe_func_quick_read(struct i2c_adapter *adap, unsigned short addr);




extern struct i2c_client *
i2c_new_dummy(struct i2c_adapter *adap, u16 address);

extern struct i2c_client *
i2c_new_dummy_device(struct i2c_adapter *adapter, u16 address);

extern struct i2c_client *
devm_i2c_new_dummy_device(struct device *dev, struct i2c_adapter *adap, u16 address);

extern struct i2c_client *
i2c_new_secondary_device(struct i2c_client *client,
    const char *name,
    u16 default_addr);

extern void i2c_unregister_device(struct i2c_client *client);







extern int
i2c_register_board_info(int busnum, struct i2c_board_info const *info,
   unsigned n);
# 526 "../include/linux/i2c.h"
struct i2c_algorithm {
# 536 "../include/linux/i2c.h"
 int (*master_xfer)(struct i2c_adapter *adap, struct i2c_msg *msgs,
      int num);
 int (*master_xfer_atomic)(struct i2c_adapter *adap,
       struct i2c_msg *msgs, int num);
 int (*smbus_xfer)(struct i2c_adapter *adap, u16 addr,
     unsigned short flags, char read_write,
     u8 command, int size, union i2c_smbus_data *data);
 int (*smbus_xfer_atomic)(struct i2c_adapter *adap, u16 addr,
     unsigned short flags, char read_write,
     u8 command, int size, union i2c_smbus_data *data);


 u32 (*functionality)(struct i2c_adapter *adap);


 int (*reg_slave)(struct i2c_client *client);
 int (*unreg_slave)(struct i2c_client *client);

};
# 564 "../include/linux/i2c.h"
struct i2c_lock_operations {
 void (*lock_bus)(struct i2c_adapter *adapter, unsigned int flags);
 int (*trylock_bus)(struct i2c_adapter *adapter, unsigned int flags);
 void (*unlock_bus)(struct i2c_adapter *adapter, unsigned int flags);
};
# 579 "../include/linux/i2c.h"
struct i2c_timings {
 u32 bus_freq_hz;
 u32 scl_rise_ns;
 u32 scl_fall_ns;
 u32 scl_int_delay_ns;
 u32 sda_fall_ns;
 u32 sda_hold_ns;
};
# 611 "../include/linux/i2c.h"
struct i2c_bus_recovery_info {
 int (*recover_bus)(struct i2c_adapter *adap);

 int (*get_scl)(struct i2c_adapter *adap);
 void (*set_scl)(struct i2c_adapter *adap, int val);
 int (*get_sda)(struct i2c_adapter *adap);
 void (*set_sda)(struct i2c_adapter *adap, int val);
 int (*get_bus_free)(struct i2c_adapter *adap);

 void (*prepare_recovery)(struct i2c_adapter *adap);
 void (*unprepare_recovery)(struct i2c_adapter *adap);


 struct gpio_desc *scl_gpiod;
 struct gpio_desc *sda_gpiod;
};

int i2c_recover_bus(struct i2c_adapter *adap);


int i2c_generic_scl_recovery(struct i2c_adapter *adap);
# 654 "../include/linux/i2c.h"
struct i2c_adapter_quirks {
 u64 flags;
 int max_num_msgs;
 u16 max_write_len;
 u16 max_read_len;
 u16 max_comb_1st_msg_len;
 u16 max_comb_2nd_msg_len;
};
# 685 "../include/linux/i2c.h"
struct i2c_adapter {
 struct module *owner;
 unsigned int class;
 const struct i2c_algorithm *algo;
 void *algo_data;


 const struct i2c_lock_operations *lock_ops;
 struct rt_mutex bus_lock;
 struct rt_mutex mux_lock;

 int timeout;
 int retries;
 struct device dev;
 unsigned long locked_flags;



 int nr;
 char name[48];
 struct completion dev_released;

 struct mutex userspace_clients_lock;
 struct list_head userspace_clients;

 struct i2c_bus_recovery_info *bus_recovery_info;
 const struct i2c_adapter_quirks *quirks;

 struct irq_domain *host_notify_domain;
};


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *i2c_get_adapdata(const struct i2c_adapter *adap)
{
 return dev_get_drvdata(&adap->dev);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_set_adapdata(struct i2c_adapter *adap, void *data)
{
 dev_set_drvdata(&adap->dev, data);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct i2c_adapter *
i2c_parent_is_i2c_adapter(const struct i2c_adapter *adapter)
{

 struct device *parent = adapter->dev.parent;

 if (parent != ((void *)0) && parent->type == &i2c_adapter_type)
  return ({ void *__mptr = (void *)(parent); do { extern void __compiletime_assert_734(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(parent)), typeof(((struct i2c_adapter *)0)->dev)) && !__builtin_types_compatible_p(typeof(*(parent)), typeof(void))))) __compiletime_assert_734(); } while (0); ((struct i2c_adapter *)(__mptr - __builtin_offsetof(struct i2c_adapter, dev))); });
 else

  return ((void *)0);
}

int i2c_for_each_dev(void *data, int (*fn)(struct device *dev, void *data));
# 752 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
i2c_lock_bus(struct i2c_adapter *adapter, unsigned int flags)
{
 adapter->lock_ops->lock_bus(adapter, flags);
}
# 766 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
i2c_trylock_bus(struct i2c_adapter *adapter, unsigned int flags)
{
 return adapter->lock_ops->trylock_bus(adapter, flags);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
i2c_unlock_bus(struct i2c_adapter *adapter, unsigned int flags)
{
 adapter->lock_ops->unlock_bus(adapter, flags);
}
# 794 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_mark_adapter_suspended(struct i2c_adapter *adap)
{
 i2c_lock_bus(adap, ((((1UL))) << (0)));
 set_bit(0, &adap->locked_flags);
 i2c_unlock_bus(adap, ((((1UL))) << (0)));
}
# 809 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void i2c_mark_adapter_resumed(struct i2c_adapter *adap)
{
 i2c_lock_bus(adap, ((((1UL))) << (0)));
 clear_bit(0, &adap->locked_flags);
 i2c_unlock_bus(adap, ((((1UL))) << (0)));
}
# 836 "../include/linux/i2c.h"
extern int i2c_add_adapter(struct i2c_adapter *adap);
extern void i2c_del_adapter(struct i2c_adapter *adap);
extern int i2c_add_numbered_adapter(struct i2c_adapter *adap);

extern int i2c_register_driver(struct module *owner, struct i2c_driver *driver);
extern void i2c_del_driver(struct i2c_driver *driver);





extern struct i2c_client *i2c_use_client(struct i2c_client *client);
extern void i2c_release_client(struct i2c_client *client);



extern void i2c_clients_command(struct i2c_adapter *adap,
    unsigned int cmd, void *arg);

extern struct i2c_adapter *i2c_get_adapter(int nr);
extern void i2c_put_adapter(struct i2c_adapter *adap);
extern unsigned int i2c_adapter_depth(struct i2c_adapter *adapter);

void i2c_parse_fw_timings(struct device *dev, struct i2c_timings *t, bool use_defaults);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 i2c_get_functionality(struct i2c_adapter *adap)
{
 return adap->algo->functionality(adap);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_check_functionality(struct i2c_adapter *adap, u32 func)
{
 return (func & i2c_get_functionality(adap)) == func;
}
# 880 "../include/linux/i2c.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool i2c_check_quirks(struct i2c_adapter *adap, u64 quirks)
{
 if (!adap->quirks)
  return false;
 return (adap->quirks->flags & quirks) == quirks;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int i2c_adapter_id(struct i2c_adapter *adap)
{
 return adap->nr;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 i2c_8bit_addr_from_msg(const struct i2c_msg *msg)
{
 return (msg->addr << 1) | (msg->flags & 0x0001 ? 1 : 0);
}

u8 *i2c_get_dma_safe_msg_buf(struct i2c_msg *msg, unsigned int threshold);
void i2c_put_dma_safe_msg_buf(u8 *buf, struct i2c_msg *msg, bool xferred);

int i2c_handle_smbus_host_notify(struct i2c_adapter *adap, unsigned short addr);
# 929 "../include/linux/i2c.h"
extern struct i2c_client *of_find_i2c_device_by_node(struct device_node *node);


extern struct i2c_adapter *of_find_i2c_adapter_by_node(struct device_node *node);


struct i2c_adapter *of_get_i2c_adapter_by_node(struct device_node *node);

extern const struct of_device_id
*i2c_of_match_device(const struct of_device_id *matches,
       struct i2c_client *client);

int of_i2c_get_board_info(struct device *dev, struct device_node *node,
     struct i2c_board_info *info);
# 977 "../include/linux/i2c.h"
struct acpi_resource;
struct acpi_resource_i2c_serialbus;


bool i2c_acpi_get_i2c_resource(struct acpi_resource *ares,
          struct acpi_resource_i2c_serialbus **i2c);
u32 i2c_acpi_find_bus_speed(struct device *dev);
struct i2c_client *i2c_acpi_new_device(struct device *dev, int index,
           struct i2c_board_info *info);
struct i2c_adapter *i2c_acpi_find_adapter_by_handle(acpi_handle handle);
# 29 "../include/drm/drm_crtc.h" 2


# 1 "../include/linux/fb.h" 1





# 1 "../include/uapi/linux/fb.h" 1
# 157 "../include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
 char id[16];
 unsigned long smem_start;

 __u32 smem_len;
 __u32 type;
 __u32 type_aux;
 __u32 visual;
 __u16 xpanstep;
 __u16 ypanstep;
 __u16 ywrapstep;
 __u32 line_length;
 unsigned long mmio_start;

 __u32 mmio_len;
 __u32 accel;

 __u16 capabilities;
 __u16 reserved[2];
};
# 188 "../include/uapi/linux/fb.h"
struct fb_bitfield {
 __u32 offset;
 __u32 length;
 __u32 msb_right;

};
# 241 "../include/uapi/linux/fb.h"
struct fb_var_screeninfo {
 __u32 xres;
 __u32 yres;
 __u32 xres_virtual;
 __u32 yres_virtual;
 __u32 xoffset;
 __u32 yoffset;

 __u32 bits_per_pixel;
 __u32 grayscale;

 struct fb_bitfield red;
 struct fb_bitfield green;
 struct fb_bitfield blue;
 struct fb_bitfield transp;

 __u32 nonstd;

 __u32 activate;

 __u32 height;
 __u32 width;

 __u32 accel_flags;


 __u32 pixclock;
 __u32 left_margin;
 __u32 right_margin;
 __u32 upper_margin;
 __u32 lower_margin;
 __u32 hsync_len;
 __u32 vsync_len;
 __u32 sync;
 __u32 vmode;
 __u32 rotate;
 __u32 colorspace;
 __u32 reserved[4];
};

struct fb_cmap {
 __u32 start;
 __u32 len;
 __u16 *red;
 __u16 *green;
 __u16 *blue;
 __u16 *transp;
};

struct fb_con2fbmap {
 __u32 console;
 __u32 framebuffer;
};
# 302 "../include/uapi/linux/fb.h"
enum {

 FB_BLANK_UNBLANK = 0,


 FB_BLANK_NORMAL = 0 + 1,


 FB_BLANK_VSYNC_SUSPEND = 1 + 1,


 FB_BLANK_HSYNC_SUSPEND = 2 + 1,


 FB_BLANK_POWERDOWN = 3 + 1
};
# 329 "../include/uapi/linux/fb.h"
struct fb_vblank {
 __u32 flags;
 __u32 count;
 __u32 vcount;
 __u32 hcount;
 __u32 reserved[4];
};





struct fb_copyarea {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 sx;
 __u32 sy;
};

struct fb_fillrect {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 color;
 __u32 rop;
};

struct fb_image {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 fg_color;
 __u32 bg_color;
 __u8 depth;
 const char *data;
 struct fb_cmap cmap;
};
# 383 "../include/uapi/linux/fb.h"
struct fbcurpos {
 __u16 x, y;
};

struct fb_cursor {
 __u16 set;
 __u16 enable;
 __u16 rop;
 const char *mask;
 struct fbcurpos hot;
 struct fb_image image;
};
# 7 "../include/linux/fb.h" 2








# 1 "../include/linux/backlight.h" 1
# 13 "../include/linux/backlight.h"
# 1 "../include/linux/fb.h" 1
# 14 "../include/linux/backlight.h" 2
# 32 "../include/linux/backlight.h"
enum backlight_update_reason {
 BACKLIGHT_UPDATE_HOTKEY,
 BACKLIGHT_UPDATE_SYSFS,
};

enum backlight_type {
 BACKLIGHT_RAW = 1,
 BACKLIGHT_PLATFORM,
 BACKLIGHT_FIRMWARE,
 BACKLIGHT_TYPE_MAX,
};

enum backlight_notification {
 BACKLIGHT_REGISTERED,
 BACKLIGHT_UNREGISTERED,
};

enum backlight_scale {
 BACKLIGHT_SCALE_UNKNOWN = 0,
 BACKLIGHT_SCALE_LINEAR,
 BACKLIGHT_SCALE_NON_LINEAR,
};

struct backlight_device;
struct fb_info;

struct backlight_ops {
 unsigned int options;




 int (*update_status)(struct backlight_device *);


 int (*get_brightness)(struct backlight_device *);


 int (*check_fb)(struct backlight_device *, struct fb_info *);
};


struct backlight_properties {

 int brightness;

 int max_brightness;


 int power;


 int fb_blank;

 enum backlight_type type;

 unsigned int state;

 enum backlight_scale scale;




};

struct backlight_device {

 struct backlight_properties props;


 struct mutex update_lock;




 struct mutex ops_lock;
 const struct backlight_ops *ops;


 struct notifier_block fb_notif;


 struct list_head entry;

 struct device dev;


 bool fb_bl_on[32];

 int use_count;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int backlight_update_status(struct backlight_device *bd)
{
 int ret = -2;

 mutex_lock(&bd->update_lock);
 if (bd->ops && bd->ops->update_status)
  ret = bd->ops->update_status(bd);
 mutex_unlock(&bd->update_lock);

 return ret;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int backlight_enable(struct backlight_device *bd)
{
 if (!bd)
  return 0;

 bd->props.power = FB_BLANK_UNBLANK;
 bd->props.fb_blank = FB_BLANK_UNBLANK;
 bd->props.state &= ~(1 << 1);

 return backlight_update_status(bd);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int backlight_disable(struct backlight_device *bd)
{
 if (!bd)
  return 0;

 bd->props.power = FB_BLANK_POWERDOWN;
 bd->props.fb_blank = FB_BLANK_POWERDOWN;
 bd->props.state |= (1 << 1);

 return backlight_update_status(bd);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void backlight_put(struct backlight_device *bd)
{
 if (bd)
  put_device(&bd->dev);
}

extern struct backlight_device *backlight_device_register(const char *name,
 struct device *dev, void *devdata, const struct backlight_ops *ops,
 const struct backlight_properties *props);
extern struct backlight_device *devm_backlight_device_register(
 struct device *dev, const char *name, struct device *parent,
 void *devdata, const struct backlight_ops *ops,
 const struct backlight_properties *props);
extern void backlight_device_unregister(struct backlight_device *bd);
extern void devm_backlight_device_unregister(struct device *dev,
     struct backlight_device *bd);
extern void backlight_force_update(struct backlight_device *bd,
       enum backlight_update_reason reason);
extern int backlight_register_notifier(struct notifier_block *nb);
extern int backlight_unregister_notifier(struct notifier_block *nb);
extern struct backlight_device *backlight_device_get_by_type(enum backlight_type type);
extern int backlight_device_set_brightness(struct backlight_device *bd, unsigned long brightness);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * bl_get_data(struct backlight_device *bl_dev)
{
 return dev_get_drvdata(&bl_dev->dev);
}

struct generic_bl_info {
 const char *name;
 int max_intensity;
 int default_intensity;
 int limit_mask;
 void (*set_bl_intensity)(int intensity);
 void (*kick_battery)(void);
};


struct backlight_device *of_find_backlight_by_node(struct device_node *node);
# 222 "../include/linux/backlight.h"
struct backlight_device *of_find_backlight(struct device *dev);
struct backlight_device *devm_of_find_backlight(struct device *dev);
# 16 "../include/linux/fb.h" 2



struct vm_area_struct;
struct fb_info;
struct device;
struct file;
struct videomode;
struct device_node;
# 52 "../include/linux/fb.h"
struct fb_chroma {
 __u32 redx;
 __u32 greenx;
 __u32 bluex;
 __u32 whitex;
 __u32 redy;
 __u32 greeny;
 __u32 bluey;
 __u32 whitey;
};

struct fb_monspecs {
 struct fb_chroma chroma;
 struct fb_videomode *modedb;
 __u8 manufacturer[4];
 __u8 monitor[14];
 __u8 serial_no[14];
 __u8 ascii[14];
 __u32 modedb_len;
 __u32 model;
 __u32 serial;
 __u32 year;
 __u32 week;
 __u32 hfmin;
 __u32 hfmax;
 __u32 dclkmin;
 __u32 dclkmax;
 __u16 input;
 __u16 dpms;
 __u16 signal;
 __u16 vfmin;
 __u16 vfmax;
 __u16 gamma;
 __u16 gtf : 1;
 __u16 misc;
 __u8 version;
 __u8 revision;
 __u8 max_x;
 __u8 max_y;
};

struct fb_cmap_user {
 __u32 start;
 __u32 len;
 __u16 *red;
 __u16 *green;
 __u16 *blue;
 __u16 *transp;
};

struct fb_image_user {
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
 __u32 fg_color;
 __u32 bg_color;
 __u8 depth;
 const char *data;
 struct fb_cmap_user cmap;
};

struct fb_cursor_user {
 __u16 set;
 __u16 enable;
 __u16 rop;
 const char *mask;
 struct fbcurpos hot;
 struct fb_image_user image;
};
# 139 "../include/linux/fb.h"
struct fb_event {
 struct fb_info *info;
 void *data;
};

struct fb_blit_caps {
 u32 x;
 u32 y;
 u32 len;
 u32 flags;
};


extern int fb_register_client(struct notifier_block *nb);
extern int fb_unregister_client(struct notifier_block *nb);
extern int fb_notifier_call_chain(unsigned long val, void *v);
# 185 "../include/linux/fb.h"
struct fb_pixmap {
 u8 *addr;
 u32 size;
 u32 offset;
 u32 buf_align;
 u32 scan_align;
 u32 access_align;
 u32 flags;
 u32 blit_x;
 u32 blit_y;



 void (*writeio)(struct fb_info *info, void *dst, void *src, unsigned int size);
 void (*readio) (struct fb_info *info, void *dst, void *src, unsigned int size);
};


struct fb_deferred_io {

 unsigned long delay;
 struct mutex lock;
 struct list_head pagelist;

 void (*first_io)(struct fb_info *info);
 void (*deferred_io)(struct fb_info *info, struct list_head *pagelist);
};
# 228 "../include/linux/fb.h"
struct fb_ops {

 struct module *owner;
 int (*fb_open)(struct fb_info *info, int user);
 int (*fb_release)(struct fb_info *info, int user);




 ssize_t (*fb_read)(struct fb_info *info, char *buf,
      size_t count, loff_t *ppos);
 ssize_t (*fb_write)(struct fb_info *info, const char *buf,
       size_t count, loff_t *ppos);



 int (*fb_check_var)(struct fb_var_screeninfo *var, struct fb_info *info);


 int (*fb_set_par)(struct fb_info *info);


 int (*fb_setcolreg)(unsigned regno, unsigned red, unsigned green,
       unsigned blue, unsigned transp, struct fb_info *info);


 int (*fb_setcmap)(struct fb_cmap *cmap, struct fb_info *info);


 int (*fb_blank)(int blank, struct fb_info *info);


 int (*fb_pan_display)(struct fb_var_screeninfo *var, struct fb_info *info);


 void (*fb_fillrect) (struct fb_info *info, const struct fb_fillrect *rect);

 void (*fb_copyarea) (struct fb_info *info, const struct fb_copyarea *region);

 void (*fb_imageblit) (struct fb_info *info, const struct fb_image *image);


 int (*fb_cursor) (struct fb_info *info, struct fb_cursor *cursor);


 int (*fb_sync)(struct fb_info *info);


 int (*fb_ioctl)(struct fb_info *info, unsigned int cmd,
   unsigned long arg);


 int (*fb_compat_ioctl)(struct fb_info *info, unsigned cmd,
   unsigned long arg);


 int (*fb_mmap)(struct fb_info *info, struct vm_area_struct *vma);


 void (*fb_get_caps)(struct fb_info *info, struct fb_blit_caps *caps,
       struct fb_var_screeninfo *var);


 void (*fb_destroy)(struct fb_info *info);


 int (*fb_debug_enter)(struct fb_info *info);
 int (*fb_debug_leave)(struct fb_info *info);
};
# 306 "../include/linux/fb.h"
struct fb_tilemap {
 __u32 width;
 __u32 height;
 __u32 depth;
 __u32 length;
 const __u8 *data;

};

struct fb_tilerect {
 __u32 sx;
 __u32 sy;
 __u32 width;
 __u32 height;
 __u32 index;
 __u32 fg;
 __u32 bg;
 __u32 rop;
};

struct fb_tilearea {
 __u32 sx;
 __u32 sy;
 __u32 dx;
 __u32 dy;
 __u32 width;
 __u32 height;
};

struct fb_tileblit {
 __u32 sx;
 __u32 sy;
 __u32 width;
 __u32 height;
 __u32 fg;
 __u32 bg;
 __u32 length;
 __u32 *indices;
};

struct fb_tilecursor {
 __u32 sx;
 __u32 sy;
 __u32 mode;
 __u32 shape;
 __u32 fg;
 __u32 bg;
};

struct fb_tile_ops {

 void (*fb_settile)(struct fb_info *info, struct fb_tilemap *map);




 void (*fb_tilecopy)(struct fb_info *info, struct fb_tilearea *area);

 void (*fb_tilefill)(struct fb_info *info, struct fb_tilerect *rect);

 void (*fb_tileblit)(struct fb_info *info, struct fb_tileblit *blit);

 void (*fb_tilecursor)(struct fb_info *info,
         struct fb_tilecursor *cursor);

 int (*fb_get_tilemax)(struct fb_info *info);
};
# 439 "../include/linux/fb.h"
struct fb_info {
 atomic_t count;
 int node;
 int flags;




 int fbcon_rotate_hint;
 struct mutex lock;
 struct mutex mm_lock;
 struct fb_var_screeninfo var;
 struct fb_fix_screeninfo fix;
 struct fb_monspecs monspecs;
 struct work_struct queue;
 struct fb_pixmap pixmap;
 struct fb_pixmap sprite;
 struct fb_cmap cmap;
 struct list_head modelist;
 struct fb_videomode *mode;





 struct backlight_device *bl_dev;


 struct mutex bl_curve_mutex;
 u8 bl_curve[128];


 struct delayed_work deferred_work;
 struct fb_deferred_io *fbdefio;


 struct fb_ops *fbops;
 struct device *device;
 struct device *dev;
 int class_flag;

 struct fb_tile_ops *tileops;

 union {
  char *screen_base;
  char *screen_buffer;
 };
 unsigned long screen_size;
 void *pseudo_palette;


 u32 state;
 void *fbcon_par;

 void *par;



 struct apertures_struct {
  unsigned int count;
  struct aperture {
   resource_size_t base;
   resource_size_t size;
  } ranges[0];
 } *apertures;

 bool skip_vt_switch;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct apertures_struct *alloc_apertures(unsigned int max_num) {
 struct apertures_struct *a = kzalloc(sizeof(struct apertures_struct)
   + max_num * sizeof(struct aperture), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!a)
  return ((void *)0);
 a->count = max_num;
 return a;
}
# 589 "../include/linux/fb.h"
extern int fb_set_var(struct fb_info *info, struct fb_var_screeninfo *var);
extern int fb_pan_display(struct fb_info *info, struct fb_var_screeninfo *var);
extern int fb_blank(struct fb_info *info, int blank);
extern void cfb_fillrect(struct fb_info *info, const struct fb_fillrect *rect);
extern void cfb_copyarea(struct fb_info *info, const struct fb_copyarea *area);
extern void cfb_imageblit(struct fb_info *info, const struct fb_image *image);



extern void sys_fillrect(struct fb_info *info, const struct fb_fillrect *rect);
extern void sys_copyarea(struct fb_info *info, const struct fb_copyarea *area);
extern void sys_imageblit(struct fb_info *info, const struct fb_image *image);
extern ssize_t fb_sys_read(struct fb_info *info, char *buf,
      size_t count, loff_t *ppos);
extern ssize_t fb_sys_write(struct fb_info *info, const char *buf,
       size_t count, loff_t *ppos);


extern int register_framebuffer(struct fb_info *fb_info);
extern void unregister_framebuffer(struct fb_info *fb_info);
extern void unlink_framebuffer(struct fb_info *fb_info);
extern int remove_conflicting_pci_framebuffers(struct pci_dev *pdev, int res_id,
            const char *name);
extern int remove_conflicting_framebuffers(struct apertures_struct *a,
        const char *name, bool primary);
extern int fb_prepare_logo(struct fb_info *fb_info, int rotate);
extern int fb_show_logo(struct fb_info *fb_info, int rotate);
extern char* fb_get_buffer_offset(struct fb_info *info, struct fb_pixmap *buf, u32 size);
extern void fb_pad_unaligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 idx,
    u32 height, u32 shift_high, u32 shift_low, u32 mod);
extern void fb_pad_aligned_buffer(u8 *dst, u32 d_pitch, u8 *src, u32 s_pitch, u32 height);
extern void fb_set_suspend(struct fb_info *info, int state);
extern int fb_get_color_depth(struct fb_var_screeninfo *var,
         struct fb_fix_screeninfo *fix);
extern int fb_get_options(const char *name, char **option);
extern int fb_new_modelist(struct fb_info *info);

extern struct fb_info *registered_fb[32];
extern int num_registered_fb;
extern bool fb_center_logo;
extern struct class *fb_class;





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_fb_info(struct fb_info *info)
{
 mutex_lock(&info->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void unlock_fb_info(struct fb_info *info)
{
 mutex_unlock(&info->lock);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __fb_pad_aligned_buffer(u8 *dst, u32 d_pitch,
        u8 *src, u32 s_pitch, u32 height)
{
 u32 i, j;

 d_pitch -= s_pitch;

 for (i = height; i--; ) {

  for (j = 0; j < s_pitch; j++)
   *dst++ = *src++;
  dst += d_pitch;
 }
}


int fb_deferred_io_mmap(struct fb_info *info, struct vm_area_struct *vma);
extern void fb_deferred_io_init(struct fb_info *info);
extern void fb_deferred_io_open(struct fb_info *info,
    struct inode *inode,
    struct file *file);
extern void fb_deferred_io_cleanup(struct fb_info *info);
extern int fb_deferred_io_fsync(struct file *file, loff_t start,
    loff_t end, int datasync);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool fb_be_math(struct fb_info *info)
{


 return info->flags & 0x100000;
# 687 "../include/linux/fb.h"
}


extern struct fb_info *framebuffer_alloc(size_t size, struct device *dev);
extern void framebuffer_release(struct fb_info *info);
extern int fb_init_device(struct fb_info *fb_info);
extern void fb_cleanup_device(struct fb_info *head);
extern void fb_bl_default_curve(struct fb_info *fb_info, u8 off, u8 min, u8 max);
# 711 "../include/linux/fb.h"
extern int fbmon_dpms(const struct fb_info *fb_info);
extern int fb_get_mode(int flags, u32 val, struct fb_var_screeninfo *var,
         struct fb_info *info);
extern int fb_validate_mode(const struct fb_var_screeninfo *var,
       struct fb_info *info);
extern int fb_parse_edid(unsigned char *edid, struct fb_var_screeninfo *var);
extern const unsigned char *fb_firmware_edid(struct device *device);
extern void fb_edid_to_monspecs(unsigned char *edid,
    struct fb_monspecs *specs);
extern void fb_destroy_modedb(struct fb_videomode *modedb);
extern int fb_find_mode_cvt(struct fb_videomode *mode, int margins, int rb);
extern unsigned char *fb_ddc_read(struct i2c_adapter *adapter);

extern int of_get_fb_videomode(struct device_node *np,
          struct fb_videomode *fb,
          int index);
extern int fb_videomode_from_videomode(const struct videomode *vm,
           struct fb_videomode *fbmode);





extern void fb_var_to_videomode(struct fb_videomode *mode,
    const struct fb_var_screeninfo *var);
extern void fb_videomode_to_var(struct fb_var_screeninfo *var,
    const struct fb_videomode *mode);
extern int fb_mode_is_equal(const struct fb_videomode *mode1,
       const struct fb_videomode *mode2);
extern int fb_add_videomode(const struct fb_videomode *mode,
       struct list_head *head);
extern void fb_delete_videomode(const struct fb_videomode *mode,
    struct list_head *head);
extern const struct fb_videomode *fb_match_mode(const struct fb_var_screeninfo *var,
      struct list_head *head);
extern const struct fb_videomode *fb_find_best_mode(const struct fb_var_screeninfo *var,
          struct list_head *head);
extern const struct fb_videomode *fb_find_nearest_mode(const struct fb_videomode *mode,
             struct list_head *head);
extern void fb_destroy_modelist(struct list_head *head);
extern void fb_videomode_to_modelist(const struct fb_videomode *modedb, int num,
         struct list_head *head);
extern const struct fb_videomode *fb_find_best_display(const struct fb_monspecs *specs,
             struct list_head *head);


extern int fb_alloc_cmap(struct fb_cmap *cmap, int len, int transp);
extern int fb_alloc_cmap_gfp(struct fb_cmap *cmap, int len, int transp, gfp_t flags);
extern void fb_dealloc_cmap(struct fb_cmap *cmap);
extern int fb_copy_cmap(const struct fb_cmap *from, struct fb_cmap *to);
extern int fb_cmap_to_user(const struct fb_cmap *from, struct fb_cmap_user *to);
extern int fb_set_cmap(struct fb_cmap *cmap, struct fb_info *fb_info);
extern int fb_set_user_cmap(struct fb_cmap_user *cmap, struct fb_info *fb_info);
extern const struct fb_cmap *fb_default_cmap(int len);
extern void fb_invert_cmaps(void);

struct fb_videomode {
 const char *name;
 u32 refresh;
 u32 xres;
 u32 yres;
 u32 pixclock;
 u32 left_margin;
 u32 right_margin;
 u32 upper_margin;
 u32 lower_margin;
 u32 hsync_len;
 u32 vsync_len;
 u32 sync;
 u32 vmode;
 u32 flag;
};

struct dmt_videomode {
 u32 dmt_id;
 u32 std_2byte_code;
 u32 cvt_3byte_code;
 const struct fb_videomode *mode;
};

extern const char *fb_mode_option;
extern const struct fb_videomode vesa_modes[];
extern const struct dmt_videomode dmt_modes[];

struct fb_modelist {
 struct list_head list;
 struct fb_videomode mode;
};

extern int fb_find_mode(struct fb_var_screeninfo *var,
   struct fb_info *info, const char *mode_option,
   const struct fb_videomode *db,
   unsigned int dbsize,
   const struct fb_videomode *default_mode,
   unsigned int default_bpp);
# 32 "../include/drm/drm_crtc.h" 2
# 1 "../include/linux/hdmi.h" 1
# 30 "../include/linux/hdmi.h"
enum hdmi_packet_type {
 HDMI_PACKET_TYPE_NULL = 0x00,
 HDMI_PACKET_TYPE_AUDIO_CLOCK_REGEN = 0x01,
 HDMI_PACKET_TYPE_AUDIO_SAMPLE = 0x02,
 HDMI_PACKET_TYPE_GENERAL_CONTROL = 0x03,
 HDMI_PACKET_TYPE_ACP = 0x04,
 HDMI_PACKET_TYPE_ISRC1 = 0x05,
 HDMI_PACKET_TYPE_ISRC2 = 0x06,
 HDMI_PACKET_TYPE_ONE_BIT_AUDIO_SAMPLE = 0x07,
 HDMI_PACKET_TYPE_DST_AUDIO = 0x08,
 HDMI_PACKET_TYPE_HBR_AUDIO_STREAM = 0x09,
 HDMI_PACKET_TYPE_GAMUT_METADATA = 0x0a,

};

enum hdmi_infoframe_type {
 HDMI_INFOFRAME_TYPE_VENDOR = 0x81,
 HDMI_INFOFRAME_TYPE_AVI = 0x82,
 HDMI_INFOFRAME_TYPE_SPD = 0x83,
 HDMI_INFOFRAME_TYPE_AUDIO = 0x84,
 HDMI_INFOFRAME_TYPE_DRM = 0x87,
};
# 64 "../include/linux/hdmi.h"
struct hdmi_any_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
};

enum hdmi_colorspace {
 HDMI_COLORSPACE_RGB,
 HDMI_COLORSPACE_YUV422,
 HDMI_COLORSPACE_YUV444,
 HDMI_COLORSPACE_YUV420,
 HDMI_COLORSPACE_RESERVED4,
 HDMI_COLORSPACE_RESERVED5,
 HDMI_COLORSPACE_RESERVED6,
 HDMI_COLORSPACE_IDO_DEFINED,
};

enum hdmi_scan_mode {
 HDMI_SCAN_MODE_NONE,
 HDMI_SCAN_MODE_OVERSCAN,
 HDMI_SCAN_MODE_UNDERSCAN,
 HDMI_SCAN_MODE_RESERVED,
};

enum hdmi_colorimetry {
 HDMI_COLORIMETRY_NONE,
 HDMI_COLORIMETRY_ITU_601,
 HDMI_COLORIMETRY_ITU_709,
 HDMI_COLORIMETRY_EXTENDED,
};

enum hdmi_picture_aspect {
 HDMI_PICTURE_ASPECT_NONE,
 HDMI_PICTURE_ASPECT_4_3,
 HDMI_PICTURE_ASPECT_16_9,
 HDMI_PICTURE_ASPECT_64_27,
 HDMI_PICTURE_ASPECT_256_135,
 HDMI_PICTURE_ASPECT_RESERVED,
};

enum hdmi_active_aspect {
 HDMI_ACTIVE_ASPECT_16_9_TOP = 2,
 HDMI_ACTIVE_ASPECT_14_9_TOP = 3,
 HDMI_ACTIVE_ASPECT_16_9_CENTER = 4,
 HDMI_ACTIVE_ASPECT_PICTURE = 8,
 HDMI_ACTIVE_ASPECT_4_3 = 9,
 HDMI_ACTIVE_ASPECT_16_9 = 10,
 HDMI_ACTIVE_ASPECT_14_9 = 11,
 HDMI_ACTIVE_ASPECT_4_3_SP_14_9 = 13,
 HDMI_ACTIVE_ASPECT_16_9_SP_14_9 = 14,
 HDMI_ACTIVE_ASPECT_16_9_SP_4_3 = 15,
};

enum hdmi_extended_colorimetry {
 HDMI_EXTENDED_COLORIMETRY_XV_YCC_601,
 HDMI_EXTENDED_COLORIMETRY_XV_YCC_709,
 HDMI_EXTENDED_COLORIMETRY_S_YCC_601,
 HDMI_EXTENDED_COLORIMETRY_OPYCC_601,
 HDMI_EXTENDED_COLORIMETRY_OPRGB,


 HDMI_EXTENDED_COLORIMETRY_BT2020_CONST_LUM,
 HDMI_EXTENDED_COLORIMETRY_BT2020,
 HDMI_EXTENDED_COLORIMETRY_RESERVED,
};

enum hdmi_quantization_range {
 HDMI_QUANTIZATION_RANGE_DEFAULT,
 HDMI_QUANTIZATION_RANGE_LIMITED,
 HDMI_QUANTIZATION_RANGE_FULL,
 HDMI_QUANTIZATION_RANGE_RESERVED,
};


enum hdmi_nups {
 HDMI_NUPS_UNKNOWN,
 HDMI_NUPS_HORIZONTAL,
 HDMI_NUPS_VERTICAL,
 HDMI_NUPS_BOTH,
};

enum hdmi_ycc_quantization_range {
 HDMI_YCC_QUANTIZATION_RANGE_LIMITED,
 HDMI_YCC_QUANTIZATION_RANGE_FULL,
};

enum hdmi_content_type {
 HDMI_CONTENT_TYPE_GRAPHICS,
 HDMI_CONTENT_TYPE_PHOTO,
 HDMI_CONTENT_TYPE_CINEMA,
 HDMI_CONTENT_TYPE_GAME,
};

enum hdmi_metadata_type {
 HDMI_STATIC_METADATA_TYPE1 = 1,
};

enum hdmi_eotf {
 HDMI_EOTF_TRADITIONAL_GAMMA_SDR,
 HDMI_EOTF_TRADITIONAL_GAMMA_HDR,
 HDMI_EOTF_SMPTE_ST2084,
 HDMI_EOTF_BT_2100_HLG,
};

struct hdmi_avi_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 enum hdmi_colorspace colorspace;
 enum hdmi_scan_mode scan_mode;
 enum hdmi_colorimetry colorimetry;
 enum hdmi_picture_aspect picture_aspect;
 enum hdmi_active_aspect active_aspect;
 bool itc;
 enum hdmi_extended_colorimetry extended_colorimetry;
 enum hdmi_quantization_range quantization_range;
 enum hdmi_nups nups;
 unsigned char video_code;
 enum hdmi_ycc_quantization_range ycc_quantization_range;
 enum hdmi_content_type content_type;
 unsigned char pixel_repeat;
 unsigned short top_bar;
 unsigned short bottom_bar;
 unsigned short left_bar;
 unsigned short right_bar;
};


struct hdmi_drm_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 enum hdmi_eotf eotf;
 enum hdmi_metadata_type metadata_type;
 struct {
  u16 x, y;
 } display_primaries[3];
 struct {
  u16 x, y;
 } white_point;
 u16 max_display_mastering_luminance;
 u16 min_display_mastering_luminance;
 u16 max_cll;
 u16 max_fall;
};

int hdmi_avi_infoframe_init(struct hdmi_avi_infoframe *frame);
ssize_t hdmi_avi_infoframe_pack(struct hdmi_avi_infoframe *frame, void *buffer,
    size_t size);
ssize_t hdmi_avi_infoframe_pack_only(const struct hdmi_avi_infoframe *frame,
         void *buffer, size_t size);
int hdmi_avi_infoframe_check(struct hdmi_avi_infoframe *frame);
int hdmi_drm_infoframe_init(struct hdmi_drm_infoframe *frame);
ssize_t hdmi_drm_infoframe_pack(struct hdmi_drm_infoframe *frame, void *buffer,
    size_t size);
ssize_t hdmi_drm_infoframe_pack_only(const struct hdmi_drm_infoframe *frame,
         void *buffer, size_t size);
int hdmi_drm_infoframe_check(struct hdmi_drm_infoframe *frame);

enum hdmi_spd_sdi {
 HDMI_SPD_SDI_UNKNOWN,
 HDMI_SPD_SDI_DSTB,
 HDMI_SPD_SDI_DVDP,
 HDMI_SPD_SDI_DVHS,
 HDMI_SPD_SDI_HDDVR,
 HDMI_SPD_SDI_DVC,
 HDMI_SPD_SDI_DSC,
 HDMI_SPD_SDI_VCD,
 HDMI_SPD_SDI_GAME,
 HDMI_SPD_SDI_PC,
 HDMI_SPD_SDI_BD,
 HDMI_SPD_SDI_SACD,
 HDMI_SPD_SDI_HDDVD,
 HDMI_SPD_SDI_PMP,
};

struct hdmi_spd_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 char vendor[8];
 char product[16];
 enum hdmi_spd_sdi sdi;
};

int hdmi_spd_infoframe_init(struct hdmi_spd_infoframe *frame,
       const char *vendor, const char *product);
ssize_t hdmi_spd_infoframe_pack(struct hdmi_spd_infoframe *frame, void *buffer,
    size_t size);
ssize_t hdmi_spd_infoframe_pack_only(const struct hdmi_spd_infoframe *frame,
         void *buffer, size_t size);
int hdmi_spd_infoframe_check(struct hdmi_spd_infoframe *frame);

enum hdmi_audio_coding_type {
 HDMI_AUDIO_CODING_TYPE_STREAM,
 HDMI_AUDIO_CODING_TYPE_PCM,
 HDMI_AUDIO_CODING_TYPE_AC3,
 HDMI_AUDIO_CODING_TYPE_MPEG1,
 HDMI_AUDIO_CODING_TYPE_MP3,
 HDMI_AUDIO_CODING_TYPE_MPEG2,
 HDMI_AUDIO_CODING_TYPE_AAC_LC,
 HDMI_AUDIO_CODING_TYPE_DTS,
 HDMI_AUDIO_CODING_TYPE_ATRAC,
 HDMI_AUDIO_CODING_TYPE_DSD,
 HDMI_AUDIO_CODING_TYPE_EAC3,
 HDMI_AUDIO_CODING_TYPE_DTS_HD,
 HDMI_AUDIO_CODING_TYPE_MLP,
 HDMI_AUDIO_CODING_TYPE_DST,
 HDMI_AUDIO_CODING_TYPE_WMA_PRO,
 HDMI_AUDIO_CODING_TYPE_CXT,
};

enum hdmi_audio_sample_size {
 HDMI_AUDIO_SAMPLE_SIZE_STREAM,
 HDMI_AUDIO_SAMPLE_SIZE_16,
 HDMI_AUDIO_SAMPLE_SIZE_20,
 HDMI_AUDIO_SAMPLE_SIZE_24,
};

enum hdmi_audio_sample_frequency {
 HDMI_AUDIO_SAMPLE_FREQUENCY_STREAM,
 HDMI_AUDIO_SAMPLE_FREQUENCY_32000,
 HDMI_AUDIO_SAMPLE_FREQUENCY_44100,
 HDMI_AUDIO_SAMPLE_FREQUENCY_48000,
 HDMI_AUDIO_SAMPLE_FREQUENCY_88200,
 HDMI_AUDIO_SAMPLE_FREQUENCY_96000,
 HDMI_AUDIO_SAMPLE_FREQUENCY_176400,
 HDMI_AUDIO_SAMPLE_FREQUENCY_192000,
};

enum hdmi_audio_coding_type_ext {

 HDMI_AUDIO_CODING_TYPE_EXT_CT,






 HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC,
 HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC_V2,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG_SURROUND,


 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_V2,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC,
 HDMI_AUDIO_CODING_TYPE_EXT_DRA,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_SURROUND,
 HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC_SURROUND = 10,
};

struct hdmi_audio_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 unsigned char channels;
 enum hdmi_audio_coding_type coding_type;
 enum hdmi_audio_sample_size sample_size;
 enum hdmi_audio_sample_frequency sample_frequency;
 enum hdmi_audio_coding_type_ext coding_type_ext;
 unsigned char channel_allocation;
 unsigned char level_shift_value;
 bool downmix_inhibit;

};

int hdmi_audio_infoframe_init(struct hdmi_audio_infoframe *frame);
ssize_t hdmi_audio_infoframe_pack(struct hdmi_audio_infoframe *frame,
      void *buffer, size_t size);
ssize_t hdmi_audio_infoframe_pack_only(const struct hdmi_audio_infoframe *frame,
           void *buffer, size_t size);
int hdmi_audio_infoframe_check(struct hdmi_audio_infoframe *frame);

enum hdmi_3d_structure {
 HDMI_3D_STRUCTURE_INVALID = -1,
 HDMI_3D_STRUCTURE_FRAME_PACKING = 0,
 HDMI_3D_STRUCTURE_FIELD_ALTERNATIVE,
 HDMI_3D_STRUCTURE_LINE_ALTERNATIVE,
 HDMI_3D_STRUCTURE_SIDE_BY_SIDE_FULL,
 HDMI_3D_STRUCTURE_L_DEPTH,
 HDMI_3D_STRUCTURE_L_DEPTH_GFX_GFX_DEPTH,
 HDMI_3D_STRUCTURE_TOP_AND_BOTTOM,
 HDMI_3D_STRUCTURE_SIDE_BY_SIDE_HALF = 8,
};


struct hdmi_vendor_infoframe {
 enum hdmi_infoframe_type type;
 unsigned char version;
 unsigned char length;
 unsigned int oui;
 u8 vic;
 enum hdmi_3d_structure s3d_struct;
 unsigned int s3d_ext_data;
};


struct hdr_static_metadata {
 __u8 eotf;
 __u8 metadata_type;
 __u16 max_cll;
 __u16 max_fall;
 __u16 min_cll;
};






struct hdr_sink_metadata {



 __u32 metadata_type;



 union {
  struct hdr_static_metadata hdmi_type1;
 };
};

int hdmi_vendor_infoframe_init(struct hdmi_vendor_infoframe *frame);
ssize_t hdmi_vendor_infoframe_pack(struct hdmi_vendor_infoframe *frame,
       void *buffer, size_t size);
ssize_t hdmi_vendor_infoframe_pack_only(const struct hdmi_vendor_infoframe *frame,
     void *buffer, size_t size);
int hdmi_vendor_infoframe_check(struct hdmi_vendor_infoframe *frame);

union hdmi_vendor_any_infoframe {
 struct {
  enum hdmi_infoframe_type type;
  unsigned char version;
  unsigned char length;
  unsigned int oui;
 } any;
 struct hdmi_vendor_infoframe hdmi;
};
# 418 "../include/linux/hdmi.h"
union hdmi_infoframe {
 struct hdmi_any_infoframe any;
 struct hdmi_avi_infoframe avi;
 struct hdmi_spd_infoframe spd;
 union hdmi_vendor_any_infoframe vendor;
 struct hdmi_audio_infoframe audio;
 struct hdmi_drm_infoframe drm;
};

ssize_t hdmi_infoframe_pack(union hdmi_infoframe *frame, void *buffer,
       size_t size);
ssize_t hdmi_infoframe_pack_only(const union hdmi_infoframe *frame,
     void *buffer, size_t size);
int hdmi_infoframe_check(union hdmi_infoframe *frame);
int hdmi_infoframe_unpack(union hdmi_infoframe *frame,
     const void *buffer, size_t size);
void hdmi_infoframe_log(const char *level, struct device *dev,
   const union hdmi_infoframe *frame);
# 33 "../include/drm/drm_crtc.h" 2
# 1 "../include/uapi/linux/media-bus-format.h" 1
# 34 "../include/drm/drm_crtc.h" 2

# 1 "../include/uapi/drm/drm_fourcc.h" 1
# 36 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_modeset_lock.h" 1
# 29 "../include/drm/drm_modeset_lock.h"
struct drm_modeset_lock;
# 43 "../include/drm/drm_modeset_lock.h"
struct drm_modeset_acquire_ctx {

 struct ww_acquire_ctx ww_ctx;






 struct drm_modeset_lock *contended;




 struct list_head locked;




 bool trylock_only;


 bool interruptible;
};
# 76 "../include/drm/drm_modeset_lock.h"
struct drm_modeset_lock {



 struct ww_mutex mutex;





 struct list_head head;
};



void drm_modeset_acquire_init(struct drm_modeset_acquire_ctx *ctx,
  uint32_t flags);
void drm_modeset_acquire_fini(struct drm_modeset_acquire_ctx *ctx);
void drm_modeset_drop_locks(struct drm_modeset_acquire_ctx *ctx);
int drm_modeset_backoff(struct drm_modeset_acquire_ctx *ctx);

void drm_modeset_lock_init(struct drm_modeset_lock *lock);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_modeset_lock_fini(struct drm_modeset_lock *lock)
{
 ({ int __ret_warn_on = !!(!list_empty(&lock->head)); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/drm/drm_modeset_lock.h\"; .popsection; .long 14472b - 14470b; .short 105; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_modeset_is_locked(struct drm_modeset_lock *lock)
{
 return ww_mutex_is_locked(&lock->mutex);
}

int drm_modeset_lock(struct drm_modeset_lock *lock,
  struct drm_modeset_acquire_ctx *ctx);
int __attribute__((__warn_unused_result__)) drm_modeset_lock_single_interruptible(struct drm_modeset_lock *lock);
void drm_modeset_unlock(struct drm_modeset_lock *lock);

struct drm_device;
struct drm_crtc;
struct drm_plane;

void drm_modeset_lock_all(struct drm_device *dev);
void drm_modeset_unlock_all(struct drm_device *dev);
void drm_warn_on_modeset_not_all_locked(struct drm_device *dev);

int drm_modeset_lock_all_ctx(struct drm_device *dev,
        struct drm_modeset_acquire_ctx *ctx);
# 37 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_rect.h" 1
# 41 "../include/drm/drm_rect.h"
struct drm_rect {
 int x1, y1, x2, y2;
};
# 84 "../include/drm/drm_rect.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_adjust_size(struct drm_rect *r, int dw, int dh)
{
 r->x1 -= dw >> 1;
 r->y1 -= dh >> 1;
 r->x2 += (dw + 1) >> 1;
 r->y2 += (dh + 1) >> 1;
}
# 101 "../include/drm/drm_rect.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_translate(struct drm_rect *r, int dx, int dy)
{
 r->x1 += dx;
 r->y1 += dy;
 r->x2 += dx;
 r->y2 += dy;
}
# 117 "../include/drm/drm_rect.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_rect_downscale(struct drm_rect *r, int horz, int vert)
{
 r->x1 /= horz;
 r->y1 /= vert;
 r->x2 /= horz;
 r->y2 /= vert;
}
# 132 "../include/drm/drm_rect.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_rect_width(const struct drm_rect *r)
{
 return r->x2 - r->x1;
}
# 144 "../include/drm/drm_rect.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_rect_height(const struct drm_rect *r)
{
 return r->y2 - r->y1;
}
# 156 "../include/drm/drm_rect.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_rect_visible(const struct drm_rect *r)
{
 return drm_rect_width(r) > 0 && drm_rect_height(r) > 0;
}
# 169 "../include/drm/drm_rect.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_rect_equals(const struct drm_rect *r1,
       const struct drm_rect *r2)
{
 return r1->x1 == r2->x1 && r1->x2 == r2->x2 &&
  r1->y1 == r2->y1 && r1->y2 == r2->y2;
}

bool drm_rect_intersect(struct drm_rect *r, const struct drm_rect *clip);
bool drm_rect_clip_scaled(struct drm_rect *src, struct drm_rect *dst,
     const struct drm_rect *clip);
int drm_rect_calc_hscale(const struct drm_rect *src,
    const struct drm_rect *dst,
    int min_hscale, int max_hscale);
int drm_rect_calc_vscale(const struct drm_rect *src,
    const struct drm_rect *dst,
    int min_vscale, int max_vscale);
void drm_rect_debug_print(const char *prefix,
     const struct drm_rect *r, bool fixed_point);
void drm_rect_rotate(struct drm_rect *r,
       int width, int height,
       unsigned int rotation);
void drm_rect_rotate_inv(struct drm_rect *r,
    int width, int height,
    unsigned int rotation);
# 38 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_mode_object.h" 1
# 27 "../include/drm/drm_mode_object.h"
# 1 "../include/drm/drm_lease.h" 1








struct drm_file;
struct drm_device;
struct drm_master;

struct drm_master *drm_lease_owner(struct drm_master *master);

void drm_lease_destroy(struct drm_master *lessee);

bool drm_lease_held(struct drm_file *file_priv, int id);

bool _drm_lease_held(struct drm_file *file_priv, int id);

void drm_lease_revoke(struct drm_master *master);

uint32_t drm_lease_filter_crtcs(struct drm_file *file_priv, uint32_t crtcs);

int drm_mode_create_lease_ioctl(struct drm_device *dev,
    void *data, struct drm_file *file_priv);

int drm_mode_list_lessees_ioctl(struct drm_device *dev,
    void *data, struct drm_file *file_priv);

int drm_mode_get_lease_ioctl(struct drm_device *dev,
        void *data, struct drm_file *file_priv);

int drm_mode_revoke_lease_ioctl(struct drm_device *dev,
    void *data, struct drm_file *file_priv);
# 28 "../include/drm/drm_mode_object.h" 2
struct drm_object_properties;
struct drm_property;
struct drm_device;
struct drm_file;
# 55 "../include/drm/drm_mode_object.h"
struct drm_mode_object {
 uint32_t id;
 uint32_t type;
 struct drm_object_properties *properties;
 struct kref refcount;
 void (*free_cb)(struct kref *kref);
};





struct drm_object_properties {





 int count;
# 82 "../include/drm/drm_mode_object.h"
 struct drm_property *properties[24];
# 102 "../include/drm/drm_mode_object.h"
 uint64_t values[24];
};
# 117 "../include/drm/drm_mode_object.h"
struct drm_mode_object *drm_mode_object_find(struct drm_device *dev,
          struct drm_file *file_priv,
          uint32_t id, uint32_t type);
void drm_mode_object_get(struct drm_mode_object *obj);
void drm_mode_object_put(struct drm_mode_object *obj);

int drm_object_property_set_value(struct drm_mode_object *obj,
      struct drm_property *property,
      uint64_t val);
int drm_object_property_get_value(struct drm_mode_object *obj,
      struct drm_property *property,
      uint64_t *value);

void drm_object_attach_property(struct drm_mode_object *obj,
    struct drm_property *property,
    uint64_t init_val);

bool drm_mode_object_lease_required(uint32_t type);
# 39 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_framebuffer.h" 1
# 32 "../include/drm/drm_framebuffer.h"
struct drm_clip_rect;
struct drm_device;
struct drm_file;
struct drm_format_info;
struct drm_framebuffer;
struct drm_gem_object;




struct drm_framebuffer_funcs {
# 53 "../include/drm/drm_framebuffer.h"
 void (*destroy)(struct drm_framebuffer *framebuffer);
# 73 "../include/drm/drm_framebuffer.h"
 int (*create_handle)(struct drm_framebuffer *fb,
        struct drm_file *file_priv,
        unsigned int *handle);
# 97 "../include/drm/drm_framebuffer.h"
 int (*dirty)(struct drm_framebuffer *framebuffer,
       struct drm_file *file_priv, unsigned flags,
       unsigned color, struct drm_clip_rect *clips,
       unsigned num_clips);
};
# 117 "../include/drm/drm_framebuffer.h"
struct drm_framebuffer {



 struct drm_device *dev;




 struct list_head head;




 struct drm_mode_object base;




 char comm[16];




 const struct drm_format_info *format;



 const struct drm_framebuffer_funcs *funcs;




 unsigned int pitches[4];
# 168 "../include/drm/drm_framebuffer.h"
 unsigned int offsets[4];






 uint64_t modifier;




 unsigned int width;




 unsigned int height;




 int flags;





 int hot_x;





 int hot_y;



 struct list_head filp_head;






 struct drm_gem_object *obj[4];
};



int drm_framebuffer_init(struct drm_device *dev,
    struct drm_framebuffer *fb,
    const struct drm_framebuffer_funcs *funcs);
struct drm_framebuffer *drm_framebuffer_lookup(struct drm_device *dev,
            struct drm_file *file_priv,
            uint32_t id);
void drm_framebuffer_remove(struct drm_framebuffer *fb);
void drm_framebuffer_cleanup(struct drm_framebuffer *fb);
void drm_framebuffer_unregister_private(struct drm_framebuffer *fb);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_framebuffer_get(struct drm_framebuffer *fb)
{
 drm_mode_object_get(&fb->base);
}
# 246 "../include/drm/drm_framebuffer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_framebuffer_put(struct drm_framebuffer *fb)
{
 drm_mode_object_put(&fb->base);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t drm_framebuffer_read_refcount(const struct drm_framebuffer *fb)
{
 return kref_read(&fb->base.refcount);
}
# 270 "../include/drm/drm_framebuffer.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_framebuffer_assign(struct drm_framebuffer **p,
       struct drm_framebuffer *fb)
{
 if (fb)
  drm_framebuffer_get(fb);
 if (*p)
  drm_framebuffer_put(*p);
 *p = fb;
}
# 295 "../include/drm/drm_framebuffer.h"
int drm_framebuffer_plane_width(int width,
    const struct drm_framebuffer *fb, int plane);
int drm_framebuffer_plane_height(int height,
     const struct drm_framebuffer *fb, int plane);
# 40 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_modes.h" 1
# 33 "../include/drm/drm_modes.h"
# 1 "../include/drm/drm_connector.h" 1
# 31 "../include/drm/drm_connector.h"
# 1 "../include/drm/drm_util.h" 1
# 76 "../include/drm/drm_util.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_can_sleep(void)
{
 if ((preempt_count() != 0) || (0) || ({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }))
  return false;
 return true;
}
# 32 "../include/drm/drm_connector.h" 2



struct drm_connector_helper_funcs;
struct drm_modeset_acquire_ctx;
struct drm_device;
struct drm_crtc;
struct drm_encoder;
struct drm_property;
struct drm_property_blob;
struct drm_printer;
struct edid;
struct i2c_adapter;

enum drm_connector_force {
 DRM_FORCE_UNSPECIFIED,
 DRM_FORCE_OFF,
 DRM_FORCE_ON,
 DRM_FORCE_ON_DIGITAL,
};







enum drm_connector_status {




 connector_status_connected = 1,







 connector_status_disconnected = 2,
# 83 "../include/drm/drm_connector.h"
 connector_status_unknown = 3,
};
# 94 "../include/drm/drm_connector.h"
enum drm_connector_registration_state {






 DRM_CONNECTOR_INITIALIZING = 0,







 DRM_CONNECTOR_REGISTERED = 1,
# 130 "../include/drm/drm_connector.h"
 DRM_CONNECTOR_UNREGISTERED = 2,
};

enum subpixel_order {
 SubPixelUnknown = 0,
 SubPixelHorizontalRGB,
 SubPixelHorizontalBGR,
 SubPixelVerticalRGB,
 SubPixelVerticalBGR,
 SubPixelNone,

};




struct drm_scrambling {



 bool supported;



 bool low_rates;
};







struct drm_scdc {



 bool supported;



 bool read_request;



 struct drm_scrambling scrambling;
};
# 185 "../include/drm/drm_connector.h"
struct drm_hdmi_info {

 struct drm_scdc scdc;







 unsigned long y420_vdb_modes[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];







 unsigned long y420_cmdb_modes[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];


 u64 y420_cmdb_map;


 u8 y420_dc_modes;
};
# 223 "../include/drm/drm_connector.h"
enum drm_link_status {
 DRM_LINK_STATUS_GOOD = 0,
 DRM_LINK_STATUS_BAD = 1,
};
# 249 "../include/drm/drm_connector.h"
enum drm_panel_orientation {
 DRM_MODE_PANEL_ORIENTATION_UNKNOWN = -1,
 DRM_MODE_PANEL_ORIENTATION_NORMAL = 0,
 DRM_MODE_PANEL_ORIENTATION_BOTTOM_UP,
 DRM_MODE_PANEL_ORIENTATION_LEFT_UP,
 DRM_MODE_PANEL_ORIENTATION_RIGHT_UP,
};
# 330 "../include/drm/drm_connector.h"
enum drm_bus_flags {
 DRM_BUS_FLAG_DE_LOW = ((((1UL))) << (0)),
 DRM_BUS_FLAG_DE_HIGH = ((((1UL))) << (1)),
 DRM_BUS_FLAG_PIXDATA_POSEDGE = ((((1UL))) << (2)),
 DRM_BUS_FLAG_PIXDATA_NEGEDGE = ((((1UL))) << (3)),
 DRM_BUS_FLAG_PIXDATA_DRIVE_POSEDGE = DRM_BUS_FLAG_PIXDATA_POSEDGE,
 DRM_BUS_FLAG_PIXDATA_DRIVE_NEGEDGE = DRM_BUS_FLAG_PIXDATA_NEGEDGE,
 DRM_BUS_FLAG_PIXDATA_SAMPLE_POSEDGE = DRM_BUS_FLAG_PIXDATA_NEGEDGE,
 DRM_BUS_FLAG_PIXDATA_SAMPLE_NEGEDGE = DRM_BUS_FLAG_PIXDATA_POSEDGE,
 DRM_BUS_FLAG_DATA_MSB_TO_LSB = ((((1UL))) << (4)),
 DRM_BUS_FLAG_DATA_LSB_TO_MSB = ((((1UL))) << (5)),
 DRM_BUS_FLAG_SYNC_POSEDGE = ((((1UL))) << (6)),
 DRM_BUS_FLAG_SYNC_NEGEDGE = ((((1UL))) << (7)),
 DRM_BUS_FLAG_SYNC_DRIVE_POSEDGE = DRM_BUS_FLAG_SYNC_POSEDGE,
 DRM_BUS_FLAG_SYNC_DRIVE_NEGEDGE = DRM_BUS_FLAG_SYNC_NEGEDGE,
 DRM_BUS_FLAG_SYNC_SAMPLE_POSEDGE = DRM_BUS_FLAG_SYNC_NEGEDGE,
 DRM_BUS_FLAG_SYNC_SAMPLE_NEGEDGE = DRM_BUS_FLAG_SYNC_POSEDGE,
 DRM_BUS_FLAG_SHARP_SIGNALS = ((((1UL))) << (8)),
};
# 361 "../include/drm/drm_connector.h"
struct drm_display_info {



 unsigned int width_mm;




 unsigned int height_mm;




 unsigned int bpc;




 enum subpixel_order subpixel_order;
# 394 "../include/drm/drm_connector.h"
 int panel_orientation;







 u32 color_formats;






 const u32 *bus_formats;



 unsigned int num_bus_formats;






 u32 bus_flags;





 int max_tmds_clock;




 bool dvi_dual;




 bool has_hdmi_infoframe;





 bool rgb_quant_range_selectable;





 u8 edid_hdmi_dc_modes;




 u8 cea_rev;




 struct drm_hdmi_info hdmi;




 bool non_desktop;
};

int drm_display_info_set_bus_formats(struct drm_display_info *info,
         const u32 *formats,
         unsigned int num_formats);







struct drm_connector_tv_margins {



 unsigned int bottom;




 unsigned int left;




 unsigned int right;




 unsigned int top;
};
# 510 "../include/drm/drm_connector.h"
struct drm_tv_connector_state {
 enum drm_mode_subconnector subconnector;
 struct drm_connector_tv_margins margins;
 unsigned int mode;
 unsigned int brightness;
 unsigned int contrast;
 unsigned int flicker_reduction;
 unsigned int overscan;
 unsigned int saturation;
 unsigned int hue;
};




struct drm_connector_state {

 struct drm_connector *connector;







 struct drm_crtc *crtc;
# 553 "../include/drm/drm_connector.h"
 struct drm_encoder *best_encoder;





 enum drm_link_status link_status;


 struct drm_atomic_state *state;






 struct drm_crtc_commit *commit;


 struct drm_tv_connector_state tv;
# 586 "../include/drm/drm_connector.h"
 bool self_refresh_aware;
# 595 "../include/drm/drm_connector.h"
 enum hdmi_picture_aspect picture_aspect_ratio;







 unsigned int content_type;





 unsigned int hdcp_content_type;





 unsigned int scaling_mode;





 unsigned int content_protection;






 u32 colorspace;
# 641 "../include/drm/drm_connector.h"
 struct drm_writeback_job *writeback_job;





 u8 max_requested_bpc;





 u8 max_bpc;





 struct drm_property_blob *hdr_output_metadata;
};
# 669 "../include/drm/drm_connector.h"
struct drm_connector_funcs {
# 686 "../include/drm/drm_connector.h"
 int (*dpms)(struct drm_connector *connector, int mode);
# 698 "../include/drm/drm_connector.h"
 void (*reset)(struct drm_connector *connector);
# 726 "../include/drm/drm_connector.h"
 enum drm_connector_status (*detect)(struct drm_connector *connector,
         bool force);
# 743 "../include/drm/drm_connector.h"
 void (*force)(struct drm_connector *connector);
# 768 "../include/drm/drm_connector.h"
 int (*fill_modes)(struct drm_connector *connector, uint32_t max_width, uint32_t max_height);
# 784 "../include/drm/drm_connector.h"
 int (*set_property)(struct drm_connector *connector, struct drm_property *property,
        uint64_t val);
# 803 "../include/drm/drm_connector.h"
 int (*late_register)(struct drm_connector *connector);
# 816 "../include/drm/drm_connector.h"
 void (*early_unregister)(struct drm_connector *connector);
# 826 "../include/drm/drm_connector.h"
 void (*destroy)(struct drm_connector *connector);
# 859 "../include/drm/drm_connector.h"
 struct drm_connector_state *(*atomic_duplicate_state)(struct drm_connector *connector);
# 869 "../include/drm/drm_connector.h"
 void (*atomic_destroy_state)(struct drm_connector *connector,
         struct drm_connector_state *state);
# 914 "../include/drm/drm_connector.h"
 int (*atomic_set_property)(struct drm_connector *connector,
       struct drm_connector_state *state,
       struct drm_property *property,
       uint64_t val);
# 937 "../include/drm/drm_connector.h"
 int (*atomic_get_property)(struct drm_connector *connector,
       const struct drm_connector_state *state,
       struct drm_property *property,
       uint64_t *val);
# 951 "../include/drm/drm_connector.h"
 void (*atomic_print_state)(struct drm_printer *p,
       const struct drm_connector_state *state);
};
# 963 "../include/drm/drm_connector.h"
struct drm_cmdline_mode {





 char name[32];






 bool specified;






 bool refresh_specified;






 bool bpp_specified;






 int xres;






 int yres;






 int bpp;






 int refresh;






 bool rb;






 bool interlace;







 bool cvt;







 bool margins;







 enum drm_connector_force force;
# 1066 "../include/drm/drm_connector.h"
 unsigned int rotation_reflection;




 struct drm_connector_tv_margins tv_margins;
};
# 1082 "../include/drm/drm_connector.h"
struct drm_connector {

 struct drm_device *dev;

 struct device *kdev;

 struct device_attribute *attr;
# 1098 "../include/drm/drm_connector.h"
 struct list_head head;


 struct drm_mode_object base;


 char *name;






 struct mutex mutex;







 unsigned index;





 int connector_type;

 int connector_type_id;





 bool interlace_allowed;





 bool doublescan_allowed;





 bool stereo_allowed;







 bool ycbcr_420_allowed;







 enum drm_connector_registration_state registration_state;






 struct list_head modes;






 enum drm_connector_status status;







 struct list_head probed_modes;
# 1194 "../include/drm/drm_connector.h"
 struct drm_display_info display_info;


 const struct drm_connector_funcs *funcs;






 struct drm_property_blob *edid_blob_ptr;


 struct drm_object_properties properties;





 struct drm_property *scaling_mode_property;
# 1224 "../include/drm/drm_connector.h"
 struct drm_property *vrr_capable_property;





 struct drm_property *colorspace_property;







 struct drm_property_blob *path_blob_ptr;





 struct drm_property *max_bpc_property;
# 1271 "../include/drm/drm_connector.h"
 uint8_t polled;







 int dpms;


 const struct drm_connector_helper_funcs *helper_private;


 struct drm_cmdline_mode cmdline_mode;

 enum drm_connector_force force;

 bool override_edid;






 uint32_t encoder_ids[3];







 struct drm_encoder *encoder;



 uint8_t eld[128];

 bool latency_present[2];




 int video_latency[2];




 int audio_latency[2];
# 1331 "../include/drm/drm_connector.h"
 struct i2c_adapter *ddc;





 int null_edid_counter;


 unsigned bad_edid_counter;






 bool edid_corrupt;


 struct dentry *debugfs_entry;
# 1366 "../include/drm/drm_connector.h"
 struct drm_connector_state *state;
# 1383 "../include/drm/drm_connector.h"
 struct drm_property_blob *tile_blob_ptr;


 bool has_tile;

 struct drm_tile_group *tile_group;

 bool tile_is_single_monitor;



 uint8_t num_h_tile, num_v_tile;


 uint8_t tile_h_loc, tile_v_loc;


 uint16_t tile_h_size, tile_v_size;
# 1409 "../include/drm/drm_connector.h"
 struct llist_node free_node;


 struct hdr_sink_metadata hdr_sink_metadata;
};



int drm_connector_init(struct drm_device *dev,
         struct drm_connector *connector,
         const struct drm_connector_funcs *funcs,
         int connector_type);
int drm_connector_init_with_ddc(struct drm_device *dev,
    struct drm_connector *connector,
    const struct drm_connector_funcs *funcs,
    int connector_type,
    struct i2c_adapter *ddc);
void drm_connector_attach_edid_property(struct drm_connector *connector);
int drm_connector_register(struct drm_connector *connector);
void drm_connector_unregister(struct drm_connector *connector);
int drm_connector_attach_encoder(struct drm_connector *connector,
          struct drm_encoder *encoder);

void drm_connector_cleanup(struct drm_connector *connector);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_connector_index(const struct drm_connector *connector)
{
 return connector->index;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 drm_connector_mask(const struct drm_connector *connector)
{
 return 1 << connector->index;
}
# 1453 "../include/drm/drm_connector.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector *drm_connector_lookup(struct drm_device *dev,
  struct drm_file *file_priv,
  uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xc0c0c0c0);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_1459(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_connector *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_1459(); } while (0); ((struct drm_connector *)(__mptr - __builtin_offsetof(struct drm_connector, base))); }) : ((void *)0);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_connector_get(struct drm_connector *connector)
{
 drm_mode_object_get(&connector->base);
}
# 1480 "../include/drm/drm_connector.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_connector_put(struct drm_connector *connector)
{
 drm_mode_object_put(&connector->base);
}
# 1496 "../include/drm/drm_connector.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_connector_is_unregistered(struct drm_connector *connector)
{
 return ({ union { typeof(connector->registration_state) __val; char __c[1]; } __u; if (1) __read_once_size(&(connector->registration_state), __u.__c, sizeof(connector->registration_state)); else __read_once_size_nocheck(&(connector->registration_state), __u.__c, sizeof(connector->registration_state)); do { } while (0); __u.__val; }) ==
  DRM_CONNECTOR_UNREGISTERED;
}

const char *drm_get_connector_status_name(enum drm_connector_status status);
const char *drm_get_subpixel_order_name(enum subpixel_order order);
const char *drm_get_dpms_name(int val);
const char *drm_get_dvi_i_subconnector_name(int val);
const char *drm_get_dvi_i_select_name(int val);
const char *drm_get_tv_subconnector_name(int val);
const char *drm_get_tv_select_name(int val);
const char *drm_get_content_protection_name(int val);
const char *drm_get_hdcp_content_type_name(int val);

int drm_mode_create_dvi_i_properties(struct drm_device *dev);
int drm_mode_create_tv_margin_properties(struct drm_device *dev);
int drm_mode_create_tv_properties(struct drm_device *dev,
      unsigned int num_modes,
      const char * const modes[]);
void drm_connector_attach_tv_margin_properties(struct drm_connector *conn);
int drm_mode_create_scaling_mode_property(struct drm_device *dev);
int drm_connector_attach_content_type_property(struct drm_connector *dev);
int drm_connector_attach_scaling_mode_property(struct drm_connector *connector,
            u32 scaling_mode_mask);
int drm_connector_attach_vrr_capable_property(
  struct drm_connector *connector);
int drm_mode_create_aspect_ratio_property(struct drm_device *dev);
int drm_mode_create_colorspace_property(struct drm_connector *connector);
int drm_mode_create_content_type_property(struct drm_device *dev);
void drm_hdmi_avi_infoframe_content_type(struct hdmi_avi_infoframe *frame,
      const struct drm_connector_state *conn_state);

int drm_mode_create_suggested_offset_properties(struct drm_device *dev);

int drm_connector_set_path_property(struct drm_connector *connector,
        const char *path);
int drm_connector_set_tile_property(struct drm_connector *connector);
int drm_connector_update_edid_property(struct drm_connector *connector,
           const struct edid *edid);
void drm_connector_set_link_status_property(struct drm_connector *connector,
         uint64_t link_status);
void drm_connector_set_vrr_capable_property(
  struct drm_connector *connector, bool capable);
int drm_connector_init_panel_orientation_property(
 struct drm_connector *connector, int width, int height);
int drm_connector_attach_max_bpc_property(struct drm_connector *connector,
       int min, int max);
# 1557 "../include/drm/drm_connector.h"
struct drm_tile_group {
 struct kref refcount;
 struct drm_device *dev;
 int id;
 u8 group_data[8];
};

struct drm_tile_group *drm_mode_create_tile_group(struct drm_device *dev,
        char topology[8]);
struct drm_tile_group *drm_mode_get_tile_group(struct drm_device *dev,
            char topology[8]);
void drm_mode_put_tile_group(struct drm_device *dev,
        struct drm_tile_group *tg);
# 1580 "../include/drm/drm_connector.h"
struct drm_connector_list_iter {

 struct drm_device *dev;
 struct drm_connector *conn;
};

void drm_connector_list_iter_begin(struct drm_device *dev,
       struct drm_connector_list_iter *iter);
struct drm_connector *
drm_connector_list_iter_next(struct drm_connector_list_iter *iter);
void drm_connector_list_iter_end(struct drm_connector_list_iter *iter);

bool drm_connector_has_possible_encoder(struct drm_connector *connector,
     struct drm_encoder *encoder);
# 34 "../include/drm/drm_modes.h" 2

struct videomode;
# 91 "../include/drm/drm_modes.h"
enum drm_mode_status {
 MODE_OK = 0,
 MODE_HSYNC,
 MODE_VSYNC,
 MODE_H_ILLEGAL,
 MODE_V_ILLEGAL,
 MODE_BAD_WIDTH,
 MODE_NOMODE,
 MODE_NO_INTERLACE,
 MODE_NO_DBLESCAN,
 MODE_NO_VSCAN,
 MODE_MEM,
 MODE_VIRTUAL_X,
 MODE_VIRTUAL_Y,
 MODE_MEM_VIRT,
 MODE_NOCLOCK,
 MODE_CLOCK_HIGH,
 MODE_CLOCK_LOW,
 MODE_CLOCK_RANGE,
 MODE_BAD_HVALUE,
 MODE_BAD_VVALUE,
 MODE_BAD_VSCAN,
 MODE_HSYNC_NARROW,
 MODE_HSYNC_WIDE,
 MODE_HBLANK_NARROW,
 MODE_HBLANK_WIDE,
 MODE_VSYNC_NARROW,
 MODE_VSYNC_WIDE,
 MODE_VBLANK_NARROW,
 MODE_VBLANK_WIDE,
 MODE_PANEL,
 MODE_INTERLACE_WIDTH,
 MODE_ONE_WIDTH,
 MODE_ONE_HEIGHT,
 MODE_ONE_SIZE,
 MODE_NO_REDUCED,
 MODE_NO_STEREO,
 MODE_NO_420,
 MODE_STALE = -3,
 MODE_BAD = -2,
 MODE_ERROR = -1
};
# 224 "../include/drm/drm_modes.h"
struct drm_display_mode {





 struct list_head head;






 char name[32];







 enum drm_mode_status status;
# 273 "../include/drm/drm_modes.h"
 unsigned int type;






 int clock;
 int hdisplay;
 int hsync_start;
 int hsync_end;
 int htotal;
 int hskew;
 int vdisplay;
 int vsync_start;
 int vsync_end;
 int vtotal;
 int vscan;
# 325 "../include/drm/drm_modes.h"
 unsigned int flags;







 int width_mm;







 int height_mm;
# 358 "../include/drm/drm_modes.h"
 int crtc_clock;
 int crtc_hdisplay;
 int crtc_hblank_start;
 int crtc_hblank_end;
 int crtc_hsync_start;
 int crtc_hsync_end;
 int crtc_htotal;
 int crtc_hskew;
 int crtc_vdisplay;
 int crtc_vblank_start;
 int crtc_vblank_end;
 int crtc_vsync_start;
 int crtc_vsync_end;
 int crtc_vtotal;
# 381 "../include/drm/drm_modes.h"
 int *private;






 int private_flags;
# 398 "../include/drm/drm_modes.h"
 int vrefresh;
# 408 "../include/drm/drm_modes.h"
 int hsync;






 enum hdmi_picture_aspect picture_aspect_ratio;
# 428 "../include/drm/drm_modes.h"
 struct list_head export_head;
};
# 456 "../include/drm/drm_modes.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_mode_is_stereo(const struct drm_display_mode *mode)
{
 return mode->flags & (0x1f<<14);
}

struct drm_connector;
struct drm_cmdline_mode;

struct drm_display_mode *drm_mode_create(struct drm_device *dev);
void drm_mode_destroy(struct drm_device *dev, struct drm_display_mode *mode);
void drm_mode_convert_to_umode(struct drm_mode_modeinfo *out,
          const struct drm_display_mode *in);
int drm_mode_convert_umode(struct drm_device *dev,
      struct drm_display_mode *out,
      const struct drm_mode_modeinfo *in);
void drm_mode_probed_add(struct drm_connector *connector, struct drm_display_mode *mode);
void drm_mode_debug_printmodeline(const struct drm_display_mode *mode);
bool drm_mode_is_420_only(const struct drm_display_info *display,
     const struct drm_display_mode *mode);
bool drm_mode_is_420_also(const struct drm_display_info *display,
     const struct drm_display_mode *mode);
bool drm_mode_is_420(const struct drm_display_info *display,
       const struct drm_display_mode *mode);

struct drm_display_mode *drm_cvt_mode(struct drm_device *dev,
          int hdisplay, int vdisplay, int vrefresh,
          bool reduced, bool interlaced,
          bool margins);
struct drm_display_mode *drm_gtf_mode(struct drm_device *dev,
          int hdisplay, int vdisplay, int vrefresh,
          bool interlaced, int margins);
struct drm_display_mode *drm_gtf_mode_complex(struct drm_device *dev,
           int hdisplay, int vdisplay,
           int vrefresh, bool interlaced,
           int margins,
           int GTF_M, int GTF_2C,
           int GTF_K, int GTF_2J);
void drm_display_mode_from_videomode(const struct videomode *vm,
         struct drm_display_mode *dmode);
void drm_display_mode_to_videomode(const struct drm_display_mode *dmode,
       struct videomode *vm);
void drm_bus_flags_from_videomode(const struct videomode *vm, u32 *bus_flags);
int of_get_drm_display_mode(struct device_node *np,
       struct drm_display_mode *dmode, u32 *bus_flags,
       int index);

void drm_mode_set_name(struct drm_display_mode *mode);
int drm_mode_hsync(const struct drm_display_mode *mode);
int drm_mode_vrefresh(const struct drm_display_mode *mode);
void drm_mode_get_hv_timing(const struct drm_display_mode *mode,
       int *hdisplay, int *vdisplay);

void drm_mode_set_crtcinfo(struct drm_display_mode *p,
      int adjust_flags);
void drm_mode_copy(struct drm_display_mode *dst,
     const struct drm_display_mode *src);
struct drm_display_mode *drm_mode_duplicate(struct drm_device *dev,
         const struct drm_display_mode *mode);
bool drm_mode_match(const struct drm_display_mode *mode1,
      const struct drm_display_mode *mode2,
      unsigned int match_flags);
bool drm_mode_equal(const struct drm_display_mode *mode1,
      const struct drm_display_mode *mode2);
bool drm_mode_equal_no_clocks(const struct drm_display_mode *mode1,
         const struct drm_display_mode *mode2);
bool drm_mode_equal_no_clocks_no_stereo(const struct drm_display_mode *mode1,
     const struct drm_display_mode *mode2);


enum drm_mode_status drm_mode_validate_driver(struct drm_device *dev,
           const struct drm_display_mode *mode);
enum drm_mode_status drm_mode_validate_size(const struct drm_display_mode *mode,
         int maxX, int maxY);
enum drm_mode_status
drm_mode_validate_ycbcr420(const struct drm_display_mode *mode,
      struct drm_connector *connector);
void drm_mode_prune_invalid(struct drm_device *dev,
       struct list_head *mode_list, bool verbose);
void drm_mode_sort(struct list_head *mode_list);
void drm_connector_list_update(struct drm_connector *connector);


bool
drm_mode_parse_command_line_for_connector(const char *mode_option,
       const struct drm_connector *connector,
       struct drm_cmdline_mode *mode);
struct drm_display_mode *
drm_mode_create_from_cmdline_mode(struct drm_device *dev,
      struct drm_cmdline_mode *cmd);
# 41 "../include/drm/drm_crtc.h" 2

# 1 "../include/drm/drm_device.h" 1
# 10 "../include/drm/drm_device.h"
# 1 "../include/drm/drm_mode_config.h" 1
# 34 "../include/drm/drm_mode_config.h"
struct drm_file;
struct drm_device;
struct drm_atomic_state;
struct drm_mode_fb_cmd2;
struct drm_format_info;
struct drm_display_mode;







struct drm_mode_config_funcs {
# 77 "../include/drm/drm_mode_config.h"
 struct drm_framebuffer *(*fb_create)(struct drm_device *dev,
          struct drm_file *file_priv,
          const struct drm_mode_fb_cmd2 *mode_cmd);
# 92 "../include/drm/drm_mode_config.h"
 const struct drm_format_info *(*get_format_info)(const struct drm_mode_fb_cmd2 *mode_cmd);
# 109 "../include/drm/drm_mode_config.h"
 void (*output_poll_changed)(struct drm_device *dev);
# 119 "../include/drm/drm_mode_config.h"
 enum drm_mode_status (*mode_valid)(struct drm_device *dev,
        const struct drm_display_mode *mode);
# 196 "../include/drm/drm_mode_config.h"
 int (*atomic_check)(struct drm_device *dev,
       struct drm_atomic_state *state);
# 278 "../include/drm/drm_mode_config.h"
 int (*atomic_commit)(struct drm_device *dev,
        struct drm_atomic_state *state,
        bool nonblock);
# 297 "../include/drm/drm_mode_config.h"
 struct drm_atomic_state *(*atomic_state_alloc)(struct drm_device *dev);
# 318 "../include/drm/drm_mode_config.h"
 void (*atomic_state_clear)(struct drm_atomic_state *state);
# 333 "../include/drm/drm_mode_config.h"
 void (*atomic_state_free)(struct drm_atomic_state *state);
};
# 358 "../include/drm/drm_mode_config.h"
struct drm_mode_config {
# 369 "../include/drm/drm_mode_config.h"
 struct mutex mutex;
# 379 "../include/drm/drm_mode_config.h"
 struct drm_modeset_lock connection_mutex;
# 389 "../include/drm/drm_mode_config.h"
 struct drm_modeset_acquire_ctx *acquire_ctx;







 struct mutex idr_mutex;







 struct idr object_idr;







 struct idr tile_idr;


 struct mutex fb_lock;

 int num_fb;

 struct list_head fb_list;





 spinlock_t connector_list_lock;




 int num_connector;



 struct ida connector_ida;







 struct list_head connector_list;
# 453 "../include/drm/drm_mode_config.h"
 struct llist_head connector_free_list;



 struct work_struct connector_free_work;







 int num_encoder;







 struct list_head encoder_list;
# 482 "../include/drm/drm_mode_config.h"
 int num_total_plane;






 struct list_head plane_list;







 int num_crtc;






 struct list_head crtc_list;
# 513 "../include/drm/drm_mode_config.h"
 struct list_head property_list;
# 522 "../include/drm/drm_mode_config.h"
 struct list_head privobj_list;

 int min_width, min_height;
 int max_width, max_height;
 const struct drm_mode_config_funcs *funcs;
 resource_size_t fb_base;


 bool poll_enabled;
 bool poll_running;
 bool delayed_event;
 struct delayed_work output_poll_work;







 struct mutex blob_lock;







 struct list_head property_blob_list;







 struct drm_property *edid_property;




 struct drm_property *dpms_property;




 struct drm_property *path_property;





 struct drm_property *tile_property;




 struct drm_property *link_status_property;




 struct drm_property *plane_type_property;




 struct drm_property *prop_src_x;




 struct drm_property *prop_src_y;




 struct drm_property *prop_src_w;




 struct drm_property *prop_src_h;




 struct drm_property *prop_crtc_x;




 struct drm_property *prop_crtc_y;




 struct drm_property *prop_crtc_w;




 struct drm_property *prop_crtc_h;




 struct drm_property *prop_fb_id;




 struct drm_property *prop_in_fence_fd;





 struct drm_property *prop_out_fence_ptr;




 struct drm_property *prop_crtc_id;
# 653 "../include/drm/drm_mode_config.h"
 struct drm_property *prop_fb_damage_clips;





 struct drm_property *prop_active;





 struct drm_property *prop_mode_id;




 struct drm_property *prop_vrr_enabled;





 struct drm_property *dvi_i_subconnector_property;




 struct drm_property *dvi_i_select_subconnector_property;





 struct drm_property *tv_subconnector_property;




 struct drm_property *tv_select_subconnector_property;




 struct drm_property *tv_mode_property;




 struct drm_property *tv_left_margin_property;




 struct drm_property *tv_right_margin_property;




 struct drm_property *tv_top_margin_property;




 struct drm_property *tv_bottom_margin_property;




 struct drm_property *tv_brightness_property;




 struct drm_property *tv_contrast_property;




 struct drm_property *tv_flicker_reduction_property;




 struct drm_property *tv_overscan_property;




 struct drm_property *tv_saturation_property;



 struct drm_property *tv_hue_property;





 struct drm_property *scaling_mode_property;




 struct drm_property *aspect_ratio_property;




 struct drm_property *content_type_property;




 struct drm_property *degamma_lut_property;




 struct drm_property *degamma_lut_size_property;





 struct drm_property *ctm_property;





 struct drm_property *gamma_lut_property;




 struct drm_property *gamma_lut_size_property;





 struct drm_property *suggested_x_property;




 struct drm_property *suggested_y_property;






 struct drm_property *non_desktop_property;






 struct drm_property *panel_orientation_property;






 struct drm_property *writeback_fb_id_property;







 struct drm_property *writeback_pixel_formats_property;







 struct drm_property *writeback_out_fence_ptr_property;






 struct drm_property *hdr_output_metadata_property;





 struct drm_property *content_protection_property;





 struct drm_property *hdcp_content_type_property;


 uint32_t preferred_depth, prefer_shadow;






 bool prefer_shadow_fbdev;







 bool quirk_addfb_prefer_xbgr_30bpp;
# 888 "../include/drm/drm_mode_config.h"
 bool quirk_addfb_prefer_host_byte_order;





 bool async_page_flip;






 bool allow_fb_modifiers;







 bool normalize_zpos;





 struct drm_property *modifiers_property;


 uint32_t cursor_width, cursor_height;
# 927 "../include/drm/drm_mode_config.h"
 struct drm_atomic_state *suspend_state;

 const struct drm_mode_config_helper_funcs *helper_private;
};

void drm_mode_config_init(struct drm_device *dev);
void drm_mode_config_reset(struct drm_device *dev);
void drm_mode_config_cleanup(struct drm_device *dev);
# 11 "../include/drm/drm_device.h" 2

struct drm_driver;
struct drm_minor;
struct drm_master;
struct drm_device_dma;
struct drm_vblank_crtc;
struct drm_sg_mem;
struct drm_local_map;
struct drm_vma_offset_manager;
struct drm_vram_mm;
struct drm_fb_helper;

struct inode;

struct pci_dev;
struct pci_controller;






enum switch_power_state {

 DRM_SWITCH_POWER_ON = 0,


 DRM_SWITCH_POWER_OFF = 1,


 DRM_SWITCH_POWER_CHANGING = 2,


 DRM_SWITCH_POWER_DYNAMIC_OFF = 3,
};







struct drm_device {





 struct list_head legacy_dev_list;


 int if_version;


 struct kref ref;


 struct device *dev;


 struct drm_driver *driver;
# 80 "../include/drm/drm_device.h"
 void *dev_private;


 struct drm_minor *primary;


 struct drm_minor *render;






 bool registered;







 struct drm_master *master;
# 111 "../include/drm/drm_device.h"
 u32 driver_features;







 bool unplugged;


 struct inode *anon_inode;


 char *unique;






 struct mutex struct_mutex;






 struct mutex master_mutex;







 int open_count;


 struct mutex filelist_mutex;





 struct list_head filelist;







 struct list_head filelist_internal;






 struct mutex clientlist_mutex;






 struct list_head clientlist;
# 187 "../include/drm/drm_device.h"
 bool irq_enabled;




 int irq;
# 207 "../include/drm/drm_device.h"
 bool vblank_disable_immediate;
# 217 "../include/drm/drm_device.h"
 struct drm_vblank_crtc *vblank;






 spinlock_t vblank_time_lock;




 spinlock_t vbl_lock;
# 252 "../include/drm/drm_device.h"
 u32 max_vblank_count;


 struct list_head vblank_event_list;







 spinlock_t event_lock;


 struct drm_agp_head *agp;


 struct pci_dev *pdev;






 unsigned int num_crtcs;


 struct drm_mode_config mode_config;


 struct mutex object_name_lock;


 struct idr object_name_idr;


 struct drm_vma_offset_manager *vma_offset_manager;


 struct drm_vram_mm *vram_mm;
# 301 "../include/drm/drm_device.h"
 enum switch_power_state switch_power_state;







 struct drm_fb_helper *fb_helper;





 struct list_head ctxlist;


 struct mutex ctxlist_mutex;


 struct idr ctx_idr;


 struct list_head maplist;


 struct drm_open_hash map_hash;


 struct list_head vmalist;


 struct drm_device_dma *dma;


 __volatile__ long context_flag;


 int last_context;


 spinlock_t buf_lock;


 int buf_use;


 atomic_t buf_alloc;

 struct {
  int context;
  struct drm_hw_lock *lock;
 } sigdata;

 struct drm_local_map *agp_buffer_map;
 unsigned int agp_buffer_token;


 struct drm_sg_mem *sg;

};
# 43 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_property.h" 1
# 41 "../include/drm/drm_property.h"
struct drm_property_enum {
 uint64_t value;
 struct list_head head;
 char name[32];
};
# 73 "../include/drm/drm_property.h"
struct drm_property {



 struct list_head head;




 struct drm_mode_object base;
# 159 "../include/drm/drm_property.h"
 uint32_t flags;




 char name[32];




 uint32_t num_values;







 uint64_t *values;




 struct drm_device *dev;







 struct list_head enum_list;
};
# 209 "../include/drm/drm_property.h"
struct drm_property_blob {
 struct drm_mode_object base;
 struct drm_device *dev;
 struct list_head head_global;
 struct list_head head_file;
 size_t length;
 void *data;
};

struct drm_prop_enum_list {
 int type;
 const char *name;
};
# 234 "../include/drm/drm_property.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_property_type_is(struct drm_property *property,
     uint32_t type)
{

 if (property->flags & 0x0000ffc0)
  return (property->flags & 0x0000ffc0) == type;
 return property->flags & type;
}

struct drm_property *drm_property_create(struct drm_device *dev,
      u32 flags, const char *name,
      int num_values);
struct drm_property *drm_property_create_enum(struct drm_device *dev,
           u32 flags, const char *name,
           const struct drm_prop_enum_list *props,
           int num_values);
struct drm_property *drm_property_create_bitmask(struct drm_device *dev,
       u32 flags, const char *name,
       const struct drm_prop_enum_list *props,
       int num_props,
       uint64_t supported_bits);
struct drm_property *drm_property_create_range(struct drm_device *dev,
            u32 flags, const char *name,
            uint64_t min, uint64_t max);
struct drm_property *drm_property_create_signed_range(struct drm_device *dev,
            u32 flags, const char *name,
            int64_t min, int64_t max);
struct drm_property *drm_property_create_object(struct drm_device *dev,
      u32 flags, const char *name,
      uint32_t type);
struct drm_property *drm_property_create_bool(struct drm_device *dev,
           u32 flags, const char *name);
int drm_property_add_enum(struct drm_property *property,
     uint64_t value, const char *name);
void drm_property_destroy(struct drm_device *dev, struct drm_property *property);

struct drm_property_blob *drm_property_create_blob(struct drm_device *dev,
         size_t length,
         const void *data);
struct drm_property_blob *drm_property_lookup_blob(struct drm_device *dev,
         uint32_t id);
int drm_property_replace_global_blob(struct drm_device *dev,
         struct drm_property_blob **replace,
         size_t length,
         const void *data,
         struct drm_mode_object *obj_holds_id,
         struct drm_property *prop_holds_id);
bool drm_property_replace_blob(struct drm_property_blob **blob,
          struct drm_property_blob *new_blob);
struct drm_property_blob *drm_property_blob_get(struct drm_property_blob *blob);
void drm_property_blob_put(struct drm_property_blob *blob);
# 294 "../include/drm/drm_property.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_property *drm_property_find(struct drm_device *dev,
           struct drm_file *file_priv,
           uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xb0b0b0b0);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_300(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_property *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_300(); } while (0); ((struct drm_property *)(__mptr - __builtin_offsetof(struct drm_property, base))); }) : ((void *)0);
}
# 44 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_bridge.h" 1
# 31 "../include/drm/drm_bridge.h"
struct drm_bridge;
struct drm_bridge_timings;
struct drm_panel;




struct drm_bridge_funcs {
# 51 "../include/drm/drm_bridge.h"
 int (*attach)(struct drm_bridge *bridge);
# 61 "../include/drm/drm_bridge.h"
 void (*detach)(struct drm_bridge *bridge);
# 94 "../include/drm/drm_bridge.h"
 enum drm_mode_status (*mode_valid)(struct drm_bridge *bridge,
        const struct drm_display_mode *mode);
# 132 "../include/drm/drm_bridge.h"
 bool (*mode_fixup)(struct drm_bridge *bridge,
      const struct drm_display_mode *mode,
      struct drm_display_mode *adjusted_mode);
# 151 "../include/drm/drm_bridge.h"
 void (*disable)(struct drm_bridge *bridge);
# 170 "../include/drm/drm_bridge.h"
 void (*post_disable)(struct drm_bridge *bridge);
# 198 "../include/drm/drm_bridge.h"
 void (*mode_set)(struct drm_bridge *bridge,
    const struct drm_display_mode *mode,
    const struct drm_display_mode *adjusted_mode);
# 219 "../include/drm/drm_bridge.h"
 void (*pre_enable)(struct drm_bridge *bridge);
# 239 "../include/drm/drm_bridge.h"
 void (*enable)(struct drm_bridge *bridge);
# 263 "../include/drm/drm_bridge.h"
 void (*atomic_pre_enable)(struct drm_bridge *bridge,
      struct drm_atomic_state *state);
# 288 "../include/drm/drm_bridge.h"
 void (*atomic_enable)(struct drm_bridge *bridge,
         struct drm_atomic_state *state);
# 310 "../include/drm/drm_bridge.h"
 void (*atomic_disable)(struct drm_bridge *bridge,
          struct drm_atomic_state *state);
# 335 "../include/drm/drm_bridge.h"
 void (*atomic_post_disable)(struct drm_bridge *bridge,
        struct drm_atomic_state *state);
};




struct drm_bridge_timings {







 u32 input_bus_flags;






 u32 setup_time_ps;






 u32 hold_time_ps;







 bool dual_link;
};




struct drm_bridge {

 struct drm_device *dev;

 struct drm_encoder *encoder;

 struct drm_bridge *next;


 struct device_node *of_node;


 struct list_head list;





 const struct drm_bridge_timings *timings;

 const struct drm_bridge_funcs *funcs;

 void *driver_private;
};

void drm_bridge_add(struct drm_bridge *bridge);
void drm_bridge_remove(struct drm_bridge *bridge);
struct drm_bridge *of_drm_find_bridge(struct device_node *np);
int drm_bridge_attach(struct drm_encoder *encoder, struct drm_bridge *bridge,
        struct drm_bridge *previous);

bool drm_bridge_mode_fixup(struct drm_bridge *bridge,
      const struct drm_display_mode *mode,
      struct drm_display_mode *adjusted_mode);
enum drm_mode_status drm_bridge_mode_valid(struct drm_bridge *bridge,
        const struct drm_display_mode *mode);
void drm_bridge_disable(struct drm_bridge *bridge);
void drm_bridge_post_disable(struct drm_bridge *bridge);
void drm_bridge_mode_set(struct drm_bridge *bridge,
    const struct drm_display_mode *mode,
    const struct drm_display_mode *adjusted_mode);
void drm_bridge_pre_enable(struct drm_bridge *bridge);
void drm_bridge_enable(struct drm_bridge *bridge);

void drm_atomic_bridge_disable(struct drm_bridge *bridge,
          struct drm_atomic_state *state);
void drm_atomic_bridge_post_disable(struct drm_bridge *bridge,
        struct drm_atomic_state *state);
void drm_atomic_bridge_pre_enable(struct drm_bridge *bridge,
      struct drm_atomic_state *state);
void drm_atomic_bridge_enable(struct drm_bridge *bridge,
         struct drm_atomic_state *state);


struct drm_bridge *drm_panel_bridge_add(struct drm_panel *panel,
     u32 connector_type);
void drm_panel_bridge_remove(struct drm_bridge *bridge);
struct drm_bridge *devm_drm_panel_bridge_add(struct device *dev,
          struct drm_panel *panel,
          u32 connector_type);
# 45 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_edid.h" 1
# 30 "../include/drm/drm_edid.h"
struct drm_device;
struct i2c_adapter;
# 44 "../include/drm/drm_edid.h"
struct est_timings {
 u8 t1;
 u8 t2;
 u8 mfg_rsvd;
} __attribute__((packed));
# 58 "../include/drm/drm_edid.h"
struct std_timing {
 u8 hsize;
 u8 vfreq_aspect;
} __attribute__((packed));
# 70 "../include/drm/drm_edid.h"
struct detailed_pixel_timing {
 u8 hactive_lo;
 u8 hblank_lo;
 u8 hactive_hblank_hi;
 u8 vactive_lo;
 u8 vblank_lo;
 u8 vactive_vblank_hi;
 u8 hsync_offset_lo;
 u8 hsync_pulse_width_lo;
 u8 vsync_offset_pulse_width_lo;
 u8 hsync_vsync_offset_pulse_width_hi;
 u8 width_mm_lo;
 u8 height_mm_lo;
 u8 width_height_mm_hi;
 u8 hborder;
 u8 vborder;
 u8 misc;
} __attribute__((packed));


struct detailed_data_string {
 u8 str[13];
} __attribute__((packed));

struct detailed_data_monitor_range {
 u8 min_vfreq;
 u8 max_vfreq;
 u8 min_hfreq_khz;
 u8 max_hfreq_khz;
 u8 pixel_clock_mhz;
 u8 flags;
 union {
  struct {
   u8 reserved;
   u8 hfreq_start_khz;
   u8 c;
   __le16 m;
   u8 k;
   u8 j;
  } __attribute__((packed)) gtf2;
  struct {
   u8 version;
   u8 data1;
   u8 data2;
   u8 supported_aspects;
   u8 flags;
   u8 supported_scalings;
   u8 preferred_refresh;
  } __attribute__((packed)) cvt;
 } formula;
} __attribute__((packed));

struct detailed_data_wpindex {
 u8 white_yx_lo;
 u8 white_x_hi;
 u8 white_y_hi;
 u8 gamma;
} __attribute__((packed));

struct detailed_data_color_point {
 u8 windex1;
 u8 wpindex1[3];
 u8 windex2;
 u8 wpindex2[3];
} __attribute__((packed));

struct cvt_timing {
 u8 code[3];
} __attribute__((packed));

struct detailed_non_pixel {
 u8 pad1;
 u8 type;


 u8 pad2;
 union {
  struct detailed_data_string str;
  struct detailed_data_monitor_range range;
  struct detailed_data_wpindex color;
  struct std_timing timings[6];
  struct cvt_timing cvt[4];
 } data;
} __attribute__((packed));
# 165 "../include/drm/drm_edid.h"
struct detailed_timing {
 __le16 pixel_clock;
 union {
  struct detailed_pixel_timing pixel_data;
  struct detailed_non_pixel other_data;
 } data;
} __attribute__((packed));
# 285 "../include/drm/drm_edid.h"
struct edid {
 u8 header[8];

 u8 mfg_id[2];
 u8 prod_code[2];
 u32 serial;
 u8 mfg_week;
 u8 mfg_year;

 u8 version;
 u8 revision;

 u8 input;
 u8 width_cm;
 u8 height_cm;
 u8 gamma;
 u8 features;

 u8 red_green_lo;
 u8 black_white_lo;
 u8 red_x;
 u8 red_y;
 u8 green_x;
 u8 green_y;
 u8 blue_x;
 u8 blue_y;
 u8 white_x;
 u8 white_y;

 struct est_timings established_timings;

 struct std_timing standard_timings[8];

 struct detailed_timing detailed_timings[4];

 u8 extensions;

 u8 checksum;
} __attribute__((packed));




struct cea_sad {
 u8 format;
 u8 channels;
 u8 freq;
 u8 byte2;
};

struct drm_encoder;
struct drm_connector;
struct drm_connector_state;
struct drm_display_mode;

int drm_edid_to_sad(struct edid *edid, struct cea_sad **sads);
int drm_edid_to_speaker_allocation(struct edid *edid, u8 **sadb);
int drm_av_sync_delay(struct drm_connector *connector,
        const struct drm_display_mode *mode);


struct edid *drm_load_edid_firmware(struct drm_connector *connector);
int __drm_set_edid_firmware_path(const char *path);
int __drm_get_edid_firmware_path(char *buf, size_t bufsize);
# 357 "../include/drm/drm_edid.h"
int
drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe *frame,
      struct drm_connector *connector,
      const struct drm_display_mode *mode);
int
drm_hdmi_vendor_infoframe_from_display_mode(struct hdmi_vendor_infoframe *frame,
         struct drm_connector *connector,
         const struct drm_display_mode *mode);

void
drm_hdmi_avi_infoframe_colorspace(struct hdmi_avi_infoframe *frame,
      const struct drm_connector_state *conn_state);

void
drm_hdmi_avi_infoframe_quant_range(struct hdmi_avi_infoframe *frame,
       struct drm_connector *connector,
       const struct drm_display_mode *mode,
       enum hdmi_quantization_range rgb_quant_range);

int
drm_hdmi_infoframe_set_hdr_metadata(struct hdmi_drm_infoframe *frame,
        const struct drm_connector_state *conn_state);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_mnl(const uint8_t *eld)
{
 return (eld[4] & (0x1f << 0)) >> 0;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const uint8_t *drm_eld_sad(const uint8_t *eld)
{
 unsigned int ver, mnl;

 ver = (eld[0] & (0x1f << 3)) >> 3;
 if (ver != 2 && ver != 31)
  return ((void *)0);

 mnl = drm_eld_mnl(eld);
 if (mnl > 16)
  return ((void *)0);

 return eld + (20 + (mnl) + 3 * (0));
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_sad_count(const uint8_t *eld)
{
 return (eld[5] & (0xf << 4)) >>
  4;
}
# 425 "../include/drm/drm_edid.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_calc_baseline_block_size(const uint8_t *eld)
{
 return 20 - 4 +
  drm_eld_mnl(eld) + drm_eld_sad_count(eld) * 3;
}
# 441 "../include/drm/drm_edid.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_eld_size(const uint8_t *eld)
{
 return 4 + eld[2] * 4;
}
# 453 "../include/drm/drm_edid.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 drm_eld_get_spk_alloc(const uint8_t *eld)
{
 return eld[7] & 0x7f;
}
# 465 "../include/drm/drm_edid.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8 drm_eld_get_conn_type(const uint8_t *eld)
{
 return eld[5] & (3 << 2);
}

bool drm_probe_ddc(struct i2c_adapter *adapter);
struct edid *drm_do_get_edid(struct drm_connector *connector,
 int (*get_edid_block)(void *data, u8 *buf, unsigned int block,
         size_t len),
 void *data);
struct edid *drm_get_edid(struct drm_connector *connector,
     struct i2c_adapter *adapter);
struct edid *drm_get_edid_switcheroo(struct drm_connector *connector,
         struct i2c_adapter *adapter);
struct edid *drm_edid_duplicate(const struct edid *edid);
int drm_add_edid_modes(struct drm_connector *connector, struct edid *edid);
int drm_add_override_edid_modes(struct drm_connector *connector);

u8 drm_match_cea_mode(const struct drm_display_mode *to_match);
enum hdmi_picture_aspect drm_get_cea_aspect_ratio(const u8 video_code);
bool drm_detect_hdmi_monitor(struct edid *edid);
bool drm_detect_monitor_audio(struct edid *edid);
enum hdmi_quantization_range
drm_default_rgb_quant_range(const struct drm_display_mode *mode);
int drm_add_modes_noedid(struct drm_connector *connector,
    int hdisplay, int vdisplay);
void drm_set_preferred_mode(struct drm_connector *connector,
       int hpref, int vpref);

int drm_edid_header_is_valid(const u8 *raw_edid);
bool drm_edid_block_valid(u8 *raw_edid, int block, bool print_bad_edid,
     bool *edid_corrupt);
bool drm_edid_is_valid(struct edid *edid);
void drm_edid_get_monitor_name(struct edid *edid, char *name,
          int buflen);
struct drm_display_mode *drm_mode_find_dmt(struct drm_device *dev,
        int hsize, int vsize, int fresh,
        bool rb);
# 46 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_plane.h" 1
# 29 "../include/drm/drm_plane.h"
# 1 "../include/drm/drm_color_mgmt.h" 1
# 29 "../include/drm/drm_color_mgmt.h"
struct drm_crtc;
struct drm_plane;

uint32_t drm_color_lut_extract(uint32_t user_input, uint32_t bit_precision);

void drm_crtc_enable_color_mgmt(struct drm_crtc *crtc,
    uint degamma_lut_size,
    bool has_ctm,
    uint gamma_lut_size);

int drm_mode_crtc_set_gamma_size(struct drm_crtc *crtc,
     int gamma_size);
# 49 "../include/drm/drm_color_mgmt.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_color_lut_size(const struct drm_property_blob *blob)
{
 return blob->length / sizeof(struct drm_color_lut);
}

enum drm_color_encoding {
 DRM_COLOR_YCBCR_BT601,
 DRM_COLOR_YCBCR_BT709,
 DRM_COLOR_YCBCR_BT2020,
 DRM_COLOR_ENCODING_MAX,
};

enum drm_color_range {
 DRM_COLOR_YCBCR_LIMITED_RANGE,
 DRM_COLOR_YCBCR_FULL_RANGE,
 DRM_COLOR_RANGE_MAX,
};

int drm_plane_create_color_properties(struct drm_plane *plane,
          u32 supported_encodings,
          u32 supported_ranges,
          enum drm_color_encoding default_encoding,
          enum drm_color_range default_range);







enum drm_color_lut_tests {
# 88 "../include/drm/drm_color_mgmt.h"
 DRM_COLOR_LUT_EQUAL_CHANNELS = ((((1UL))) << (0)),







 DRM_COLOR_LUT_NON_DECREASING = ((((1UL))) << (1)),
};

int drm_color_lut_check(const struct drm_property_blob *lut, u32 tests);
# 30 "../include/drm/drm_plane.h" 2




struct drm_crtc;
struct drm_printer;
struct drm_modeset_acquire_ctx;
# 47 "../include/drm/drm_plane.h"
struct drm_plane_state {

 struct drm_plane *plane;







 struct drm_crtc *crtc;







 struct drm_framebuffer *fb;
# 80 "../include/drm/drm_plane.h"
 struct dma_fence *fence;
# 89 "../include/drm/drm_plane.h"
 int32_t crtc_x;






 int32_t crtc_y;



 uint32_t crtc_w, crtc_h;





 uint32_t src_x;




 uint32_t src_y;


 uint32_t src_h, src_w;







 u16 alpha;







 uint16_t pixel_blend_mode;






 unsigned int rotation;
# 151 "../include/drm/drm_plane.h"
 unsigned int zpos;
# 160 "../include/drm/drm_plane.h"
 unsigned int normalized_zpos;






 enum drm_color_encoding color_encoding;






 enum drm_color_range color_range;
# 184 "../include/drm/drm_plane.h"
 struct drm_property_blob *fb_damage_clips;



 struct drm_rect src, dst;







 bool visible;







 struct drm_crtc_commit *commit;


 struct drm_atomic_state *state;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_rect
drm_plane_state_src(const struct drm_plane_state *state)
{
 struct drm_rect src = {
  .x1 = state->src_x,
  .y1 = state->src_y,
  .x2 = state->src_x + state->src_w,
  .y2 = state->src_y + state->src_h,
 };
 return src;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_rect
drm_plane_state_dest(const struct drm_plane_state *state)
{
 struct drm_rect dest = {
  .x1 = state->crtc_x,
  .y1 = state->crtc_y,
  .x2 = state->crtc_x + state->crtc_w,
  .y2 = state->crtc_y + state->crtc_h,
 };
 return dest;
}




struct drm_plane_funcs {
# 264 "../include/drm/drm_plane.h"
 int (*update_plane)(struct drm_plane *plane,
       struct drm_crtc *crtc, struct drm_framebuffer *fb,
       int crtc_x, int crtc_y,
       unsigned int crtc_w, unsigned int crtc_h,
       uint32_t src_x, uint32_t src_y,
       uint32_t src_w, uint32_t src_h,
       struct drm_modeset_acquire_ctx *ctx);
# 287 "../include/drm/drm_plane.h"
 int (*disable_plane)(struct drm_plane *plane,
        struct drm_modeset_acquire_ctx *ctx);
# 297 "../include/drm/drm_plane.h"
 void (*destroy)(struct drm_plane *plane);
# 309 "../include/drm/drm_plane.h"
 void (*reset)(struct drm_plane *plane);
# 325 "../include/drm/drm_plane.h"
 int (*set_property)(struct drm_plane *plane,
       struct drm_property *property, uint64_t val);
# 359 "../include/drm/drm_plane.h"
 struct drm_plane_state *(*atomic_duplicate_state)(struct drm_plane *plane);
# 369 "../include/drm/drm_plane.h"
 void (*atomic_destroy_state)(struct drm_plane *plane,
         struct drm_plane_state *state);
# 414 "../include/drm/drm_plane.h"
 int (*atomic_set_property)(struct drm_plane *plane,
       struct drm_plane_state *state,
       struct drm_property *property,
       uint64_t val);
# 437 "../include/drm/drm_plane.h"
 int (*atomic_get_property)(struct drm_plane *plane,
       const struct drm_plane_state *state,
       struct drm_property *property,
       uint64_t *val);
# 454 "../include/drm/drm_plane.h"
 int (*late_register)(struct drm_plane *plane);
# 465 "../include/drm/drm_plane.h"
 void (*early_unregister)(struct drm_plane *plane);
# 476 "../include/drm/drm_plane.h"
 void (*atomic_print_state)(struct drm_printer *p,
       const struct drm_plane_state *state);
# 495 "../include/drm/drm_plane.h"
 bool (*format_mod_supported)(struct drm_plane *plane, uint32_t format,
         uint64_t modifier);
};
# 517 "../include/drm/drm_plane.h"
enum drm_plane_type {






 DRM_PLANE_TYPE_OVERLAY,
# 534 "../include/drm/drm_plane.h"
 DRM_PLANE_TYPE_PRIMARY,
# 543 "../include/drm/drm_plane.h"
 DRM_PLANE_TYPE_CURSOR,
};
# 556 "../include/drm/drm_plane.h"
struct drm_plane {

 struct drm_device *dev;
# 567 "../include/drm/drm_plane.h"
 struct list_head head;


 char *name;
# 581 "../include/drm/drm_plane.h"
 struct drm_modeset_lock mutex;


 struct drm_mode_object base;





 uint32_t possible_crtcs;

 uint32_t *format_types;

 unsigned int format_count;




 bool format_default;


 uint64_t *modifiers;

 unsigned int modifier_count;
# 613 "../include/drm/drm_plane.h"
 struct drm_crtc *crtc;
# 622 "../include/drm/drm_plane.h"
 struct drm_framebuffer *fb;







 struct drm_framebuffer *old_fb;


 const struct drm_plane_funcs *funcs;


 struct drm_object_properties properties;


 enum drm_plane_type type;





 unsigned index;


 const struct drm_plane_helper_funcs *helper_private;
# 663 "../include/drm/drm_plane.h"
 struct drm_plane_state *state;






 struct drm_property *alpha_property;





 struct drm_property *zpos_property;





 struct drm_property *rotation_property;







 struct drm_property *blend_mode_property;
# 699 "../include/drm/drm_plane.h"
 struct drm_property *color_encoding_property;







 struct drm_property *color_range_property;
};



__attribute__((__format__(printf, 9, 10)))
int drm_universal_plane_init(struct drm_device *dev,
        struct drm_plane *plane,
        uint32_t possible_crtcs,
        const struct drm_plane_funcs *funcs,
        const uint32_t *formats,
        unsigned int format_count,
        const uint64_t *format_modifiers,
        enum drm_plane_type type,
        const char *name, ...);
int drm_plane_init(struct drm_device *dev,
     struct drm_plane *plane,
     uint32_t possible_crtcs,
     const struct drm_plane_funcs *funcs,
     const uint32_t *formats, unsigned int format_count,
     bool is_primary);
void drm_plane_cleanup(struct drm_plane *plane);
# 737 "../include/drm/drm_plane.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_plane_index(const struct drm_plane *plane)
{
 return plane->index;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 drm_plane_mask(const struct drm_plane *plane)
{
 return 1 << drm_plane_index(plane);
}

struct drm_plane * drm_plane_from_index(struct drm_device *dev, int idx);
void drm_plane_force_disable(struct drm_plane *plane);

int drm_mode_plane_set_obj_prop(struct drm_plane *plane,
           struct drm_property *property,
           uint64_t value);
# 767 "../include/drm/drm_plane.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane *drm_plane_find(struct drm_device *dev,
  struct drm_file *file_priv,
  uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xeeeeeeee);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_773(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_plane *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_773(); } while (0); ((struct drm_plane *)(__mptr - __builtin_offsetof(struct drm_plane, base))); }) : ((void *)0);
}
# 811 "../include/drm/drm_plane.h"
bool drm_any_plane_has_format(struct drm_device *dev,
         u32 format, u64 modifier);
# 822 "../include/drm/drm_plane.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int
drm_plane_get_damage_clips_count(const struct drm_plane_state *state)
{
 return (state && state->fb_damage_clips) ?
  state->fb_damage_clips->length/sizeof(struct drm_mode_rect) : 0;
}
# 839 "../include/drm/drm_plane.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_mode_rect *
drm_plane_get_damage_clips(const struct drm_plane_state *state)
{
 return (struct drm_mode_rect *)((state && state->fb_damage_clips) ?
     state->fb_damage_clips->data : ((void *)0));
}
# 47 "../include/drm/drm_crtc.h" 2
# 1 "../include/drm/drm_blend.h" 1
# 34 "../include/drm/drm_blend.h"
struct drm_device;
struct drm_atomic_state;
struct drm_plane;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_rotation_90_or_270(unsigned int rotation)
{
 return rotation & ((1<<1) | (1<<3));
}



int drm_plane_create_alpha_property(struct drm_plane *plane);
int drm_plane_create_rotation_property(struct drm_plane *plane,
           unsigned int rotation,
           unsigned int supported_rotations);
unsigned int drm_rotation_simplify(unsigned int rotation,
       unsigned int supported_rotations);

int drm_plane_create_zpos_property(struct drm_plane *plane,
       unsigned int zpos,
       unsigned int min, unsigned int max);
int drm_plane_create_zpos_immutable_property(struct drm_plane *plane,
          unsigned int zpos);
int drm_atomic_normalize_zpos(struct drm_device *dev,
         struct drm_atomic_state *state);
int drm_plane_create_blend_mode_property(struct drm_plane *plane,
      unsigned int supported_modes);
# 48 "../include/drm/drm_crtc.h" 2

# 1 "../include/drm/drm_debugfs_crc.h" 1
# 33 "../include/drm/drm_debugfs_crc.h"
struct drm_crtc_crc_entry {
 bool has_frame_counter;
 uint32_t frame;
 uint32_t crcs[10];
};
# 53 "../include/drm/drm_debugfs_crc.h"
struct drm_crtc_crc {
 spinlock_t lock;
 const char *source;
 bool opened, overflow;
 struct drm_crtc_crc_entry *entries;
 int head, tail;
 size_t values_cnt;
 wait_queue_head_t wq;
};


int drm_crtc_add_crc_entry(struct drm_crtc *crtc, bool has_frame,
      uint32_t frame, uint32_t *crcs);
# 50 "../include/drm/drm_crtc.h" 2


struct drm_device;
struct drm_mode_set;
struct drm_file;
struct drm_clip_rect;
struct drm_printer;
struct drm_self_refresh_data;
struct device_node;
struct dma_fence;
struct edid;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int64_t U642I64(uint64_t val)
{
 return (int64_t)*((int64_t *)&val);
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t I642U64(int64_t val)
{
 return (uint64_t)*((uint64_t *)&val);
}

struct drm_crtc;
struct drm_pending_vblank_event;
struct drm_plane;
struct drm_bridge;
struct drm_atomic_state;

struct drm_crtc_helper_funcs;
struct drm_plane_helper_funcs;
# 100 "../include/drm/drm_crtc.h"
struct drm_crtc_state {

 struct drm_crtc *crtc;






 bool enable;
# 124 "../include/drm/drm_crtc.h"
 bool active;





 bool planes_changed : 1;
# 142 "../include/drm/drm_crtc.h"
 bool mode_changed : 1;






 bool active_changed : 1;
# 160 "../include/drm/drm_crtc.h"
 bool connectors_changed : 1;





 bool zpos_changed : 1;





 bool color_mgmt_changed : 1;
# 195 "../include/drm/drm_crtc.h"
 bool no_vblank : 1;





 u32 plane_mask;





 u32 connector_mask;





 u32 encoder_mask;
# 228 "../include/drm/drm_crtc.h"
 struct drm_display_mode adjusted_mode;
# 245 "../include/drm/drm_crtc.h"
 struct drm_display_mode mode;





 struct drm_property_blob *mode_blob;
# 260 "../include/drm/drm_crtc.h"
 struct drm_property_blob *degamma_lut;







 struct drm_property_blob *ctm;
# 277 "../include/drm/drm_crtc.h"
 struct drm_property_blob *gamma_lut;







 u32 target_vblank;







 u32 pageflip_flags;
# 302 "../include/drm/drm_crtc.h"
 bool vrr_enabled;
# 313 "../include/drm/drm_crtc.h"
 bool self_refresh_active;
# 363 "../include/drm/drm_crtc.h"
 struct drm_pending_vblank_event *event;
# 372 "../include/drm/drm_crtc.h"
 struct drm_crtc_commit *commit;


 struct drm_atomic_state *state;
};
# 390 "../include/drm/drm_crtc.h"
struct drm_crtc_funcs {
# 401 "../include/drm/drm_crtc.h"
 void (*reset)(struct drm_crtc *crtc);
# 424 "../include/drm/drm_crtc.h"
 int (*cursor_set)(struct drm_crtc *crtc, struct drm_file *file_priv,
     uint32_t handle, uint32_t width, uint32_t height);
# 446 "../include/drm/drm_crtc.h"
 int (*cursor_set2)(struct drm_crtc *crtc, struct drm_file *file_priv,
      uint32_t handle, uint32_t width, uint32_t height,
      int32_t hot_x, int32_t hot_y);
# 466 "../include/drm/drm_crtc.h"
 int (*cursor_move)(struct drm_crtc *crtc, int x, int y);
# 481 "../include/drm/drm_crtc.h"
 int (*gamma_set)(struct drm_crtc *crtc, u16 *r, u16 *g, u16 *b,
    uint32_t size,
    struct drm_modeset_acquire_ctx *ctx);
# 492 "../include/drm/drm_crtc.h"
 void (*destroy)(struct drm_crtc *crtc);
# 508 "../include/drm/drm_crtc.h"
 int (*set_config)(struct drm_mode_set *set,
     struct drm_modeset_acquire_ctx *ctx);
# 564 "../include/drm/drm_crtc.h"
 int (*page_flip)(struct drm_crtc *crtc,
    struct drm_framebuffer *fb,
    struct drm_pending_vblank_event *event,
    uint32_t flags,
    struct drm_modeset_acquire_ctx *ctx);
# 583 "../include/drm/drm_crtc.h"
 int (*page_flip_target)(struct drm_crtc *crtc,
    struct drm_framebuffer *fb,
    struct drm_pending_vblank_event *event,
    uint32_t flags, uint32_t target,
    struct drm_modeset_acquire_ctx *ctx);
# 603 "../include/drm/drm_crtc.h"
 int (*set_property)(struct drm_crtc *crtc,
       struct drm_property *property, uint64_t val);
# 637 "../include/drm/drm_crtc.h"
 struct drm_crtc_state *(*atomic_duplicate_state)(struct drm_crtc *crtc);
# 647 "../include/drm/drm_crtc.h"
 void (*atomic_destroy_state)(struct drm_crtc *crtc,
         struct drm_crtc_state *state);
# 692 "../include/drm/drm_crtc.h"
 int (*atomic_set_property)(struct drm_crtc *crtc,
       struct drm_crtc_state *state,
       struct drm_property *property,
       uint64_t val);
# 714 "../include/drm/drm_crtc.h"
 int (*atomic_get_property)(struct drm_crtc *crtc,
       const struct drm_crtc_state *state,
       struct drm_property *property,
       uint64_t *val);
# 732 "../include/drm/drm_crtc.h"
 int (*late_register)(struct drm_crtc *crtc);
# 743 "../include/drm/drm_crtc.h"
 void (*early_unregister)(struct drm_crtc *crtc);
# 772 "../include/drm/drm_crtc.h"
 int (*set_crc_source)(struct drm_crtc *crtc, const char *source);
# 788 "../include/drm/drm_crtc.h"
 int (*verify_crc_source)(struct drm_crtc *crtc, const char *source,
     size_t *values_cnt);
# 810 "../include/drm/drm_crtc.h"
 const char *const *(*get_crc_sources)(struct drm_crtc *crtc,
           size_t *count);
# 822 "../include/drm/drm_crtc.h"
 void (*atomic_print_state)(struct drm_printer *p,
       const struct drm_crtc_state *state);
# 849 "../include/drm/drm_crtc.h"
 u32 (*get_vblank_counter)(struct drm_crtc *crtc);
# 862 "../include/drm/drm_crtc.h"
 int (*enable_vblank)(struct drm_crtc *crtc);







 void (*disable_vblank)(struct drm_crtc *crtc);
};







struct drm_crtc {

 struct drm_device *dev;

 struct device_node *port;







 struct list_head head;


 char *name;
# 906 "../include/drm/drm_crtc.h"
 struct drm_modeset_lock mutex;


 struct drm_mode_object base;
# 918 "../include/drm/drm_crtc.h"
 struct drm_plane *primary;
# 927 "../include/drm/drm_crtc.h"
 struct drm_plane *cursor;





 unsigned index;
# 942 "../include/drm/drm_crtc.h"
 int cursor_x;







 int cursor_y;
# 960 "../include/drm/drm_crtc.h"
 bool enabled;
# 970 "../include/drm/drm_crtc.h"
 struct drm_display_mode mode;
# 985 "../include/drm/drm_crtc.h"
 struct drm_display_mode hwmode;
# 994 "../include/drm/drm_crtc.h"
 int x;







 int y;


 const struct drm_crtc_funcs *funcs;





 uint32_t gamma_size;





 uint16_t *gamma_store;


 const struct drm_crtc_helper_funcs *helper_private;


 struct drm_object_properties properties;
# 1038 "../include/drm/drm_crtc.h"
 struct drm_crtc_state *state;
# 1055 "../include/drm/drm_crtc.h"
 struct list_head commit_list;






 spinlock_t commit_lock;







 struct dentry *debugfs_entry;







 struct drm_crtc_crc crc;






 unsigned int fence_context;






 spinlock_t fence_lock;






 unsigned long fence_seqno;






 char timeline_name[32];






 struct drm_self_refresh_data *self_refresh_data;
};
# 1129 "../include/drm/drm_crtc.h"
struct drm_mode_set {
 struct drm_framebuffer *fb;
 struct drm_crtc *crtc;
 struct drm_display_mode *mode;

 uint32_t x;
 uint32_t y;

 struct drm_connector **connectors;
 size_t num_connectors;
};



__attribute__((__format__(printf, 6, 7)))
int drm_crtc_init_with_planes(struct drm_device *dev,
         struct drm_crtc *crtc,
         struct drm_plane *primary,
         struct drm_plane *cursor,
         const struct drm_crtc_funcs *funcs,
         const char *name, ...);
void drm_crtc_cleanup(struct drm_crtc *crtc);
# 1159 "../include/drm/drm_crtc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_crtc_index(const struct drm_crtc *crtc)
{
 return crtc->index;
}
# 1171 "../include/drm/drm_crtc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint32_t drm_crtc_mask(const struct drm_crtc *crtc)
{
 return 1 << drm_crtc_index(crtc);
}

int drm_mode_set_config_internal(struct drm_mode_set *set);
struct drm_crtc *drm_crtc_from_index(struct drm_device *dev, int idx);
# 1189 "../include/drm/drm_crtc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc *drm_crtc_find(struct drm_device *dev,
  struct drm_file *file_priv,
  uint32_t id)
{
 struct drm_mode_object *mo;
 mo = drm_mode_object_find(dev, file_priv, id, 0xcccccccc);
 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_1195(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_crtc *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_1195(); } while (0); ((struct drm_crtc *)(__mptr - __builtin_offsetof(struct drm_crtc, base))); }) : ((void *)0);
}
# 34 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2

# 1 "../include/drm/drm_encoder.h" 1
# 33 "../include/drm/drm_encoder.h"
struct drm_encoder;






struct drm_encoder_funcs {







 void (*reset)(struct drm_encoder *encoder);
# 57 "../include/drm/drm_encoder.h"
 void (*destroy)(struct drm_encoder *encoder);
# 72 "../include/drm/drm_encoder.h"
 int (*late_register)(struct drm_encoder *encoder);
# 83 "../include/drm/drm_encoder.h"
 void (*early_unregister)(struct drm_encoder *encoder);
};
# 99 "../include/drm/drm_encoder.h"
struct drm_encoder {
 struct drm_device *dev;
 struct list_head head;

 struct drm_mode_object base;
 char *name;
# 131 "../include/drm/drm_encoder.h"
 int encoder_type;





 unsigned index;
# 150 "../include/drm/drm_encoder.h"
 uint32_t possible_crtcs;
# 167 "../include/drm/drm_encoder.h"
 uint32_t possible_clones;






 struct drm_crtc *crtc;
 struct drm_bridge *bridge;
 const struct drm_encoder_funcs *funcs;
 const struct drm_encoder_helper_funcs *helper_private;
};



__attribute__((__format__(printf, 5, 6)))
int drm_encoder_init(struct drm_device *dev,
       struct drm_encoder *encoder,
       const struct drm_encoder_funcs *funcs,
       int encoder_type, const char *name, ...);
# 195 "../include/drm/drm_encoder.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int drm_encoder_index(const struct drm_encoder *encoder)
{
 return encoder->index;
}
# 207 "../include/drm/drm_encoder.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 drm_encoder_mask(const struct drm_encoder *encoder)
{
 return 1 << drm_encoder_index(encoder);
}
# 219 "../include/drm/drm_encoder.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_encoder_crtc_ok(struct drm_encoder *encoder,
           struct drm_crtc *crtc)
{
 return !!(encoder->possible_crtcs & drm_crtc_mask(crtc));
}
# 234 "../include/drm/drm_encoder.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_encoder *drm_encoder_find(struct drm_device *dev,
         struct drm_file *file_priv,
         uint32_t id)
{
 struct drm_mode_object *mo;

 mo = drm_mode_object_find(dev, file_priv, id, 0xe0e0e0e0);

 return mo ? ({ void *__mptr = (void *)(mo); do { extern void __compiletime_assert_242(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(mo)), typeof(((struct drm_encoder *)0)->base)) && !__builtin_types_compatible_p(typeof(*(mo)), typeof(void))))) __compiletime_assert_242(); } while (0); ((struct drm_encoder *)(__mptr - __builtin_offsetof(struct drm_encoder, base))); }) : ((void *)0);
}

void drm_encoder_cleanup(struct drm_encoder *encoder);
# 36 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2
# 1 "../include/drm/drm_dp_helper.h" 1
# 1044 "../include/drm/drm_dp_helper.h"
bool drm_dp_channel_eq_ok(const u8 link_status[6],
     int lane_count);
bool drm_dp_clock_recovery_ok(const u8 link_status[6],
         int lane_count);
u8 drm_dp_get_adjust_request_voltage(const u8 link_status[6],
         int lane);
u8 drm_dp_get_adjust_request_pre_emphasis(const u8 link_status[6],
       int lane);







void drm_dp_link_train_clock_recovery_delay(const u8 dpcd[0xf]);
void drm_dp_link_train_channel_eq_delay(const u8 dpcd[0xf]);

u8 drm_dp_link_rate_to_bw_code(int link_rate);
int drm_dp_bw_code_to_link_rate(u8 link_bw);
# 1084 "../include/drm/drm_dp_helper.h"
struct dp_sdp_header {
 u8 HB0;
 u8 HB1;
 u8 HB2;
 u8 HB3;
} __attribute__((__packed__));
# 1116 "../include/drm/drm_dp_helper.h"
struct dp_sdp {
 struct dp_sdp_header sdp_header;
 u8 db[32];
} __attribute__((__packed__));





int drm_dp_psr_setup_time(const u8 psr_cap[2]);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_dp_max_link_rate(const u8 dpcd[0xf])
{
 return drm_dp_bw_code_to_link_rate(dpcd[0x001]);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8
drm_dp_max_lane_count(const u8 dpcd[0xf])
{
 return dpcd[0x002] & 0x1f;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_enhanced_frame_cap(const u8 dpcd[0xf])
{
 return dpcd[0x000] >= 0x11 &&
  (dpcd[0x002] & (1 << 7));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_tps3_supported(const u8 dpcd[0xf])
{
 return dpcd[0x000] >= 0x12 &&
  dpcd[0x002] & (1 << 6);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_tps4_supported(const u8 dpcd[0xf])
{
 return dpcd[0x000] >= 0x14 &&
  dpcd[0x003] & (1 << 7);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u8
drm_dp_training_pattern_mask(const u8 dpcd[0xf])
{
 return (dpcd[0x000] >= 0x14) ? 0xf :
  0x3;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_is_branch(const u8 dpcd[0xf])
{
 return dpcd[0x005] & (1 << 0);
}


u8 drm_dp_dsc_sink_max_slice_count(const u8 dsc_dpcd[0xf],
       bool is_edp);
u8 drm_dp_dsc_sink_line_buf_depth(const u8 dsc_dpcd[0xf]);
int drm_dp_dsc_sink_supported_input_bpcs(const u8 dsc_dpc[0xf],
      u8 dsc_bpc[3]);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_sink_supports_dsc(const u8 dsc_dpcd[0xf])
{
 return dsc_dpcd[0x060 - 0x060] &
  (1 << 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16
drm_edp_dsc_sink_output_bpp(const u8 dsc_dpcd[0xf])
{
 return dsc_dpcd[0x067 - 0x060] |
  (dsc_dpcd[0x068 - 0x060] &
   (0x3 << 0) <<
   8);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32
drm_dp_dsc_sink_max_slice_width(const u8 dsc_dpcd[0xf])
{

 return dsc_dpcd[0x06C - 0x060] *
  320;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_sink_supports_fec(const u8 fec_capable)
{
 return fec_capable & (1 << 0);
}
# 1223 "../include/drm/drm_dp_helper.h"
struct drm_dp_aux_msg {
 unsigned int address;
 u8 request;
 u8 reply;
 void *buffer;
 size_t size;
};

struct cec_adapter;
struct edid;
# 1242 "../include/drm/drm_dp_helper.h"
struct drm_dp_aux_cec {
 struct mutex lock;
 struct cec_adapter *adap;
 const char *name;
 struct device *parent;
 struct delayed_work unregister_work;
};
# 1290 "../include/drm/drm_dp_helper.h"
struct drm_dp_aux {
 const char *name;
 struct i2c_adapter ddc;
 struct device *dev;
 struct drm_crtc *crtc;
 struct mutex hw_mutex;
 struct work_struct crc_work;
 u8 crc_count;
 ssize_t (*transfer)(struct drm_dp_aux *aux,
       struct drm_dp_aux_msg *msg);



 unsigned i2c_nack_count;



 unsigned i2c_defer_count;



 struct drm_dp_aux_cec cec;



 bool is_remote;
};

ssize_t drm_dp_dpcd_read(struct drm_dp_aux *aux, unsigned int offset,
    void *buffer, size_t size);
ssize_t drm_dp_dpcd_write(struct drm_dp_aux *aux, unsigned int offset,
     void *buffer, size_t size);
# 1332 "../include/drm/drm_dp_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t drm_dp_dpcd_readb(struct drm_dp_aux *aux,
     unsigned int offset, u8 *valuep)
{
 return drm_dp_dpcd_read(aux, offset, valuep, 1);
}
# 1347 "../include/drm/drm_dp_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ssize_t drm_dp_dpcd_writeb(struct drm_dp_aux *aux,
      unsigned int offset, u8 value)
{
 return drm_dp_dpcd_write(aux, offset, &value, 1);
}

int drm_dp_dpcd_read_link_status(struct drm_dp_aux *aux,
     u8 status[6]);






struct drm_dp_link {
 unsigned char revision;
 unsigned int rate;
 unsigned int num_lanes;
 unsigned long capabilities;
};

int drm_dp_link_probe(struct drm_dp_aux *aux, struct drm_dp_link *link);
int drm_dp_link_power_up(struct drm_dp_aux *aux, struct drm_dp_link *link);
int drm_dp_link_power_down(struct drm_dp_aux *aux, struct drm_dp_link *link);
int drm_dp_link_configure(struct drm_dp_aux *aux, struct drm_dp_link *link);
int drm_dp_downstream_max_clock(const u8 dpcd[0xf],
    const u8 port_cap[4]);
int drm_dp_downstream_max_bpc(const u8 dpcd[0xf],
         const u8 port_cap[4]);
int drm_dp_downstream_id(struct drm_dp_aux *aux, char id[6]);
void drm_dp_downstream_debug(struct seq_file *m, const u8 dpcd[0xf],
        const u8 port_cap[4], struct drm_dp_aux *aux);

void drm_dp_aux_init(struct drm_dp_aux *aux);
int drm_dp_aux_register(struct drm_dp_aux *aux);
void drm_dp_aux_unregister(struct drm_dp_aux *aux);

int drm_dp_start_crc(struct drm_dp_aux *aux, struct drm_crtc *crtc);
int drm_dp_stop_crc(struct drm_dp_aux *aux);

struct drm_dp_dpcd_ident {
 u8 oui[3];
 u8 device_id[6];
 u8 hw_rev;
 u8 sw_major_rev;
 u8 sw_minor_rev;
} __attribute__((__packed__));






struct drm_dp_desc {
 struct drm_dp_dpcd_ident ident;
 u32 quirks;
};

int drm_dp_read_desc(struct drm_dp_aux *aux, struct drm_dp_desc *desc,
       bool is_branch);
# 1415 "../include/drm/drm_dp_helper.h"
enum drm_dp_quirk {






 DP_DPCD_QUIRK_CONSTANT_N,






 DP_DPCD_QUIRK_NO_PSR,






 DP_DPCD_QUIRK_NO_SINK_COUNT,
};
# 1446 "../include/drm/drm_dp_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_dp_has_quirk(const struct drm_dp_desc *desc, enum drm_dp_quirk quirk)
{
 return desc->quirks & ((((1UL))) << (quirk));
}
# 1460 "../include/drm/drm_dp_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_irq(struct drm_dp_aux *aux)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_register_connector(struct drm_dp_aux *aux,
       const char *name,
       struct device *parent)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_unregister_connector(struct drm_dp_aux *aux)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_set_edid(struct drm_dp_aux *aux,
           const struct edid *edid)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_dp_cec_unset_edid(struct drm_dp_aux *aux)
{
}
# 37 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2
# 1 "../include/drm/drm_fixed.h" 1
# 30 "../include/drm/drm_fixed.h"
typedef union dfixed {
 u32 full;
} fixed20_12;
# 45 "../include/drm/drm_fixed.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dfixed_floor(fixed20_12 A)
{
 u32 non_frac = ((A).full >> 12);

 return (u32)(((non_frac) << 12));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dfixed_ceil(fixed20_12 A)
{
 u32 non_frac = ((A).full >> 12);

 if (A.full > (u32)(((non_frac) << 12)))
  return (u32)(((non_frac + 1) << 12));
 else
  return (u32)(((non_frac) << 12));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 dfixed_div(fixed20_12 A, fixed20_12 B)
{
 u64 tmp = ((u64)A.full << 13);

 ({ uint32_t __base = (B.full); uint32_t __rem; __rem = ((uint64_t)(tmp)) % __base; (tmp) = ((uint64_t)(tmp)) / __base; __rem; });
 tmp += 1;
 tmp /= 2;
 return ((u32)(tmp));
}
# 79 "../include/drm/drm_fixed.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_int2fixp(int a)
{
 return ((s64)a) << 32;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_fixp2int(s64 a)
{
 return ((s64)a) >> 32;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int drm_fixp2int_ceil(s64 a)
{
 if (a > 0)
  return drm_fixp2int(a + ((1ULL << 32) - 1LL));
 else
  return drm_fixp2int(a - ((1ULL << 32) - 1LL));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned drm_fixp_msbset(s64 a)
{
 unsigned shift, sign = (a >> 63) & 1;

 for (shift = 62; shift > 0; --shift)
  if (((a >> shift) & 1) != sign)
   return shift;

 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_mul(s64 a, s64 b)
{
 unsigned shift = drm_fixp_msbset(a) + drm_fixp_msbset(b);
 s64 result;

 if (shift > 61) {
  shift = shift - 61;
  a >>= (shift >> 1) + (shift & 1);
  b >>= shift >> 1;
 } else
  shift = 0;

 result = a * b;

 if (shift > 32)
  return result << (shift - 32);

 if (shift < 32)
  return result >> (32 - shift);

 return result;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_div(s64 a, s64 b)
{
 unsigned shift = 62 - drm_fixp_msbset(a);
 s64 result;

 a <<= shift;

 if (shift < 32)
  b >>= (32 - shift);

 result = div64_s64(a, b);

 if (shift > 32)
  return result >> (shift - 32);

 return result;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_from_fraction(s64 a, s64 b)
{
 s64 res;
 bool a_neg = a < 0;
 bool b_neg = b < 0;
 u64 a_abs = a_neg ? -a : a;
 u64 b_abs = b_neg ? -b : b;
 u64 rem;


 u64 res_abs = div64_u64_rem(a_abs, b_abs, &rem);


 {
  u32 i = 32;

  do {
   rem <<= 1;
   res_abs <<= 1;
   if (rem >= b_abs) {
    res_abs |= 1;
    rem -= b_abs;
   }
  } while (--i != 0);
 }


 {
  u64 summand = (rem << 1) >= b_abs;

  res_abs += summand;
 }

 res = (s64) res_abs;
 if (a_neg ^ b_neg)
  res = -res;
 return res;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) s64 drm_fixp_exp(s64 x)
{
 s64 tolerance = div64_s64((1ULL << 32), 1000000);
 s64 sum = (1ULL << 32), term, y = x;
 u64 count = 1;

 if (x < 0)
  y = -1 * x;

 term = y;

 while (term >= tolerance) {
  sum = sum + term;
  count = count + 1;
  term = drm_fixp_mul(term, div64_s64(y, count));
 }

 if (x < 0)
  sum = drm_fixp_div((1ULL << 32), sum);

 return sum;
}
# 38 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2
# 1 "../include/drm/drm_crtc_helper.h" 1
# 43 "../include/drm/drm_crtc_helper.h"
# 1 "../include/drm/drm_modeset_helper_vtables.h" 1
# 51 "../include/drm/drm_modeset_helper_vtables.h"
enum mode_set_atomic;
struct drm_writeback_connector;
struct drm_writeback_job;







struct drm_crtc_helper_funcs {
# 78 "../include/drm/drm_modeset_helper_vtables.h"
 void (*dpms)(struct drm_crtc *crtc, int mode);
# 93 "../include/drm/drm_modeset_helper_vtables.h"
 void (*prepare)(struct drm_crtc *crtc);
# 108 "../include/drm/drm_modeset_helper_vtables.h"
 void (*commit)(struct drm_crtc *crtc);
# 141 "../include/drm/drm_modeset_helper_vtables.h"
 enum drm_mode_status (*mode_valid)(struct drm_crtc *crtc,
        const struct drm_display_mode *mode);
# 187 "../include/drm/drm_modeset_helper_vtables.h"
 bool (*mode_fixup)(struct drm_crtc *crtc,
      const struct drm_display_mode *mode,
      struct drm_display_mode *adjusted_mode);
# 206 "../include/drm/drm_modeset_helper_vtables.h"
 int (*mode_set)(struct drm_crtc *crtc, struct drm_display_mode *mode,
   struct drm_display_mode *adjusted_mode, int x, int y,
   struct drm_framebuffer *old_fb);
# 231 "../include/drm/drm_modeset_helper_vtables.h"
 void (*mode_set_nofb)(struct drm_crtc *crtc);
# 250 "../include/drm/drm_modeset_helper_vtables.h"
 int (*mode_set_base)(struct drm_crtc *crtc, int x, int y,
        struct drm_framebuffer *old_fb);
# 267 "../include/drm/drm_modeset_helper_vtables.h"
 int (*mode_set_base_atomic)(struct drm_crtc *crtc,
        struct drm_framebuffer *fb, int x, int y,
        enum mode_set_atomic);
# 302 "../include/drm/drm_modeset_helper_vtables.h"
 void (*disable)(struct drm_crtc *crtc);
# 355 "../include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_crtc *crtc,
       struct drm_crtc_state *state);
# 376 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_begin)(struct drm_crtc *crtc,
        struct drm_crtc_state *old_crtc_state);
# 400 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_flush)(struct drm_crtc *crtc,
        struct drm_crtc_state *old_crtc_state);
# 426 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_enable)(struct drm_crtc *crtc,
         struct drm_crtc_state *old_crtc_state);
# 451 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_disable)(struct drm_crtc *crtc,
          struct drm_crtc_state *old_crtc_state);
};






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_crtc_helper_add(struct drm_crtc *crtc,
           const struct drm_crtc_helper_funcs *funcs)
{
 crtc->helper_private = funcs;
}







struct drm_encoder_helper_funcs {
# 489 "../include/drm/drm_modeset_helper_vtables.h"
 void (*dpms)(struct drm_encoder *encoder, int mode);
# 522 "../include/drm/drm_modeset_helper_vtables.h"
 enum drm_mode_status (*mode_valid)(struct drm_encoder *crtc,
        const struct drm_display_mode *mode);
# 565 "../include/drm/drm_modeset_helper_vtables.h"
 bool (*mode_fixup)(struct drm_encoder *encoder,
      const struct drm_display_mode *mode,
      struct drm_display_mode *adjusted_mode);
# 582 "../include/drm/drm_modeset_helper_vtables.h"
 void (*prepare)(struct drm_encoder *encoder);
# 597 "../include/drm/drm_modeset_helper_vtables.h"
 void (*commit)(struct drm_encoder *encoder);
# 621 "../include/drm/drm_modeset_helper_vtables.h"
 void (*mode_set)(struct drm_encoder *encoder,
    struct drm_display_mode *mode,
    struct drm_display_mode *adjusted_mode);
# 644 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_mode_set)(struct drm_encoder *encoder,
    struct drm_crtc_state *crtc_state,
    struct drm_connector_state *conn_state);
# 662 "../include/drm/drm_modeset_helper_vtables.h"
 struct drm_crtc *(*get_crtc)(struct drm_encoder *encoder);
# 679 "../include/drm/drm_modeset_helper_vtables.h"
 enum drm_connector_status (*detect)(struct drm_encoder *encoder,
         struct drm_connector *connector);
# 702 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_disable)(struct drm_encoder *encoder,
          struct drm_atomic_state *state);
# 725 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_enable)(struct drm_encoder *encoder,
         struct drm_atomic_state *state);
# 759 "../include/drm/drm_modeset_helper_vtables.h"
 void (*disable)(struct drm_encoder *encoder);
# 777 "../include/drm/drm_modeset_helper_vtables.h"
 void (*enable)(struct drm_encoder *encoder);
# 815 "../include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_encoder *encoder,
       struct drm_crtc_state *crtc_state,
       struct drm_connector_state *conn_state);
};






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_encoder_helper_add(struct drm_encoder *encoder,
       const struct drm_encoder_helper_funcs *funcs)
{
 encoder->helper_private = funcs;
}







struct drm_connector_helper_funcs {
# 874 "../include/drm/drm_modeset_helper_vtables.h"
 int (*get_modes)(struct drm_connector *connector);
# 900 "../include/drm/drm_modeset_helper_vtables.h"
 int (*detect_ctx)(struct drm_connector *connector,
     struct drm_modeset_acquire_ctx *ctx,
     bool force);
# 938 "../include/drm/drm_modeset_helper_vtables.h"
 enum drm_mode_status (*mode_valid)(struct drm_connector *connector,
        struct drm_display_mode *mode);
# 969 "../include/drm/drm_modeset_helper_vtables.h"
 struct drm_encoder *(*best_encoder)(struct drm_connector *connector);
# 996 "../include/drm/drm_modeset_helper_vtables.h"
 struct drm_encoder *(*atomic_best_encoder)(struct drm_connector *connector,
         struct drm_connector_state *connector_state);
# 1030 "../include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_connector *connector,
       struct drm_atomic_state *state);
# 1045 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_commit)(struct drm_connector *connector,
         struct drm_connector_state *state);

 int (*prepare_writeback_job)(struct drm_writeback_connector *connector,
         struct drm_writeback_job *job);
 void (*cleanup_writeback_job)(struct drm_writeback_connector *connector,
          struct drm_writeback_job *job);
};






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_connector_helper_add(struct drm_connector *connector,
         const struct drm_connector_helper_funcs *funcs)
{
 connector->helper_private = funcs;
}







struct drm_plane_helper_funcs {
# 1103 "../include/drm/drm_modeset_helper_vtables.h"
 int (*prepare_fb)(struct drm_plane *plane,
     struct drm_plane_state *new_state);
# 1114 "../include/drm/drm_modeset_helper_vtables.h"
 void (*cleanup_fb)(struct drm_plane *plane,
      struct drm_plane_state *old_state);
# 1153 "../include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_check)(struct drm_plane *plane,
       struct drm_plane_state *state);
# 1171 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_update)(struct drm_plane *plane,
         struct drm_plane_state *old_state);
# 1195 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_disable)(struct drm_plane *plane,
          struct drm_plane_state *old_state);
# 1214 "../include/drm/drm_modeset_helper_vtables.h"
 int (*atomic_async_check)(struct drm_plane *plane,
      struct drm_plane_state *state);
# 1253 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_async_update)(struct drm_plane *plane,
        struct drm_plane_state *new_state);
};






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_plane_helper_add(struct drm_plane *plane,
     const struct drm_plane_helper_funcs *funcs)
{
 plane->helper_private = funcs;
}






struct drm_mode_config_helper_funcs {
# 1309 "../include/drm/drm_modeset_helper_vtables.h"
 void (*atomic_commit_tail)(struct drm_atomic_state *state);
};
# 44 "../include/drm/drm_crtc_helper.h" 2
# 1 "../include/drm/drm_modeset_helper.h" 1
# 26 "../include/drm/drm_modeset_helper.h"
struct drm_crtc;
struct drm_crtc_funcs;
struct drm_device;
struct drm_framebuffer;
struct drm_mode_fb_cmd2;

void drm_helper_move_panel_connectors_to_head(struct drm_device *);

void drm_helper_mode_fill_fb_struct(struct drm_device *dev,
        struct drm_framebuffer *fb,
        const struct drm_mode_fb_cmd2 *mode_cmd);

int drm_crtc_init(struct drm_device *dev, struct drm_crtc *crtc,
    const struct drm_crtc_funcs *funcs);

int drm_mode_config_helper_suspend(struct drm_device *dev);
int drm_mode_config_helper_resume(struct drm_device *dev);
# 45 "../include/drm/drm_crtc_helper.h" 2

void drm_helper_disable_unused_functions(struct drm_device *dev);
int drm_crtc_helper_set_config(struct drm_mode_set *set,
          struct drm_modeset_acquire_ctx *ctx);
bool drm_crtc_helper_set_mode(struct drm_crtc *crtc,
         struct drm_display_mode *mode,
         int x, int y,
         struct drm_framebuffer *old_fb);
bool drm_helper_crtc_in_use(struct drm_crtc *crtc);
bool drm_helper_encoder_in_use(struct drm_encoder *encoder);

int drm_helper_connector_dpms(struct drm_connector *connector, int mode);

void drm_helper_resume_force_mode(struct drm_device *dev);
int drm_helper_force_disable_all(struct drm_device *dev);
# 39 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2
# 1 "../include/drm/drm_fb_helper.h" 1
# 33 "../include/drm/drm_fb_helper.h"
struct drm_fb_helper;


# 1 "../include/drm/drm_client.h" 1
# 13 "../include/drm/drm_client.h"
struct drm_client_dev;
struct drm_device;
struct drm_file;
struct drm_framebuffer;
struct drm_gem_object;
struct drm_minor;
struct module;




struct drm_client_funcs {



 struct module *owner;
# 38 "../include/drm/drm_client.h"
 void (*unregister)(struct drm_client_dev *client);
# 49 "../include/drm/drm_client.h"
 int (*restore)(struct drm_client_dev *client);
# 59 "../include/drm/drm_client.h"
 int (*hotplug)(struct drm_client_dev *client);
};




struct drm_client_dev {



 struct drm_device *dev;




 const char *name;







 struct list_head list;




 const struct drm_client_funcs *funcs;




 struct drm_file *file;




 struct mutex modeset_mutex;




 struct drm_mode_set *modesets;
};

int drm_client_init(struct drm_device *dev, struct drm_client_dev *client,
      const char *name, const struct drm_client_funcs *funcs);
void drm_client_release(struct drm_client_dev *client);
void drm_client_register(struct drm_client_dev *client);

void drm_client_dev_unregister(struct drm_device *dev);
void drm_client_dev_hotplug(struct drm_device *dev);
void drm_client_dev_restore(struct drm_device *dev);




struct drm_client_buffer {



 struct drm_client_dev *client;




 u32 handle;




 u32 pitch;




 struct drm_gem_object *gem;




 void *vaddr;




 struct drm_framebuffer *fb;
};

struct drm_client_buffer *
drm_client_framebuffer_create(struct drm_client_dev *client, u32 width, u32 height, u32 format);
void drm_client_framebuffer_delete(struct drm_client_buffer *buffer);
void *drm_client_buffer_vmap(struct drm_client_buffer *buffer);
void drm_client_buffer_vunmap(struct drm_client_buffer *buffer);

int drm_client_modeset_create(struct drm_client_dev *client);
void drm_client_modeset_free(struct drm_client_dev *client);
int drm_client_modeset_probe(struct drm_client_dev *client, unsigned int width, unsigned int height);
bool drm_client_rotation(struct drm_mode_set *modeset, unsigned int *rotation);
int drm_client_modeset_commit_force(struct drm_client_dev *client);
int drm_client_modeset_commit(struct drm_client_dev *client);
int drm_client_modeset_dpms(struct drm_client_dev *client, int mode);
# 186 "../include/drm/drm_client.h"
int drm_client_debugfs_init(struct drm_minor *minor);
# 36 "../include/drm/drm_fb_helper.h" 2



# 1 "../include/linux/vgaarb.h" 1
# 34 "../include/linux/vgaarb.h"
# 1 "../include/video/vga.h" 1
# 22 "../include/video/vga.h"
# 1 "./arch/arm64/include/generated/asm/vga.h" 1
# 1 "../include/asm-generic/vga.h" 1
# 2 "./arch/arm64/include/generated/asm/vga.h" 2
# 23 "../include/video/vga.h" 2
# 182 "../include/video/vga.h"
struct vgastate {
 void *vgabase;
 unsigned long membase;
 __u32 memsize;
 __u32 flags;
 __u32 depth;
 __u32 num_attr;
 __u32 num_crtc;
 __u32 num_gfx;
 __u32 num_seq;
 void *vidstate;
};

extern int save_vga(struct vgastate *state);
extern int restore_vga(struct vgastate *state);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_io_r (unsigned short port)
{
 return inb_p(port);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_io_w (unsigned short port, unsigned char val)
{
 outb_p(val, port);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_io_w_fast (unsigned short port, unsigned char reg,
      unsigned char val)
{
 logic_outw((((val) << 8) | (reg)), port);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_mm_r (void *regbase, unsigned short port)
{
 return ({ u8 __v = ({ u8 __r = __raw_readb(regbase + port); __r; }); ({ unsigned long tmp; asm volatile("dmb " "oshld" : : : "memory"); asm volatile("eor	%0, %1, %1\n" "cbnz	%0, ." : "=r" (tmp) : "r" ((unsigned long)(__v)) : "memory"); }); __v; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_mm_w (void *regbase, unsigned short port, unsigned char val)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writeb(((val)),((regbase + port)))); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_mm_w_fast (void *regbase, unsigned short port,
      unsigned char reg, unsigned char val)
{
 ({ asm volatile("dmb " "oshst" : : : "memory"); ((void)__raw_writew(( u16)(( __le16)(__u16)(((((val) << 8) | (reg))))),((regbase + port)))); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_r (void *regbase, unsigned short port)
{
 if (regbase)
  return vga_mm_r (regbase, port);
 else
  return vga_io_r (port);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_w (void *regbase, unsigned short port, unsigned char val)
{
 if (regbase)
  vga_mm_w (regbase, port, val);
 else
  vga_io_w (port, val);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_w_fast (void *regbase, unsigned short port,
          unsigned char reg, unsigned char val)
{
 if (regbase)
  vga_mm_w_fast (regbase, port, reg, val);
 else
  vga_io_w_fast (port, reg, val);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_rcrt (void *regbase, unsigned char reg)
{
        vga_w (regbase, 0x3D4, reg);
        return vga_r (regbase, 0x3D5);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_wcrt (void *regbase, unsigned char reg, unsigned char val)
{

 vga_w_fast (regbase, 0x3D4, reg, val);




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_io_rcrt (unsigned char reg)
{
        vga_io_w (0x3D4, reg);
        return vga_io_r (0x3D5);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_io_wcrt (unsigned char reg, unsigned char val)
{

 vga_io_w_fast (0x3D4, reg, val);




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_mm_rcrt (void *regbase, unsigned char reg)
{
        vga_mm_w (regbase, 0x3D4, reg);
        return vga_mm_r (regbase, 0x3D5);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_mm_wcrt (void *regbase, unsigned char reg, unsigned char val)
{

 vga_mm_w_fast (regbase, 0x3D4, reg, val);




}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_rseq (void *regbase, unsigned char reg)
{
        vga_w (regbase, 0x3C4, reg);
        return vga_r (regbase, 0x3C5);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_wseq (void *regbase, unsigned char reg, unsigned char val)
{

 vga_w_fast (regbase, 0x3C4, reg, val);




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_io_rseq (unsigned char reg)
{
        vga_io_w (0x3C4, reg);
        return vga_io_r (0x3C5);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_io_wseq (unsigned char reg, unsigned char val)
{

 vga_io_w_fast (0x3C4, reg, val);




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_mm_rseq (void *regbase, unsigned char reg)
{
        vga_mm_w (regbase, 0x3C4, reg);
        return vga_mm_r (regbase, 0x3C5);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_mm_wseq (void *regbase, unsigned char reg, unsigned char val)
{

 vga_mm_w_fast (regbase, 0x3C4, reg, val);




}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_rgfx (void *regbase, unsigned char reg)
{
        vga_w (regbase, 0x3CE, reg);
        return vga_r (regbase, 0x3CF);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_wgfx (void *regbase, unsigned char reg, unsigned char val)
{

 vga_w_fast (regbase, 0x3CE, reg, val);




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_io_rgfx (unsigned char reg)
{
        vga_io_w (0x3CE, reg);
        return vga_io_r (0x3CF);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_io_wgfx (unsigned char reg, unsigned char val)
{

 vga_io_w_fast (0x3CE, reg, val);




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_mm_rgfx (void *regbase, unsigned char reg)
{
        vga_mm_w (regbase, 0x3CE, reg);
        return vga_mm_r (regbase, 0x3CF);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_mm_wgfx (void *regbase, unsigned char reg, unsigned char val)
{

 vga_mm_w_fast (regbase, 0x3CE, reg, val);




}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_rattr (void *regbase, unsigned char reg)
{
        vga_w (regbase, 0x3C0, reg);
        return vga_r (regbase, 0x3C1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_wattr (void *regbase, unsigned char reg, unsigned char val)
{
        vga_w (regbase, 0x3C0, reg);
        vga_w (regbase, 0x3C0, val);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_io_rattr (unsigned char reg)
{
        vga_io_w (0x3C0, reg);
        return vga_io_r (0x3C1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_io_wattr (unsigned char reg, unsigned char val)
{
        vga_io_w (0x3C0, reg);
        vga_io_w (0x3C0, val);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned char vga_mm_rattr (void *regbase, unsigned char reg)
{
        vga_mm_w (regbase, 0x3C0, reg);
        return vga_mm_r (regbase, 0x3C1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void vga_mm_wattr (void *regbase, unsigned char reg, unsigned char val)
{
        vga_mm_w (regbase, 0x3C0, reg);
        vga_mm_w (regbase, 0x3C0, val);
}
# 35 "../include/linux/vgaarb.h" 2
# 51 "../include/linux/vgaarb.h"
struct pci_dev;
# 69 "../include/linux/vgaarb.h"
extern void vga_set_legacy_decoding(struct pci_dev *pdev,
        unsigned int decodes);






extern int vga_get(struct pci_dev *pdev, unsigned int rsrc, int interruptible);
# 91 "../include/linux/vgaarb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vga_get_interruptible(struct pci_dev *pdev,
     unsigned int rsrc)
{
       return vga_get(pdev, rsrc, 1);
}
# 106 "../include/linux/vgaarb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vga_get_uninterruptible(struct pci_dev *pdev,
       unsigned int rsrc)
{
       return vga_get(pdev, rsrc, 0);
}


extern int vga_tryget(struct pci_dev *pdev, unsigned int rsrc);





extern void vga_put(struct pci_dev *pdev, unsigned int rsrc);






extern struct pci_dev *vga_default_device(void);
extern void vga_set_default_device(struct pci_dev *pdev);
extern int vga_remove_vgacon(struct pci_dev *pdev);
# 141 "../include/linux/vgaarb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int vga_conflicts(struct pci_dev *p1, struct pci_dev *p2)
{
       return 1;
}



int vga_client_register(struct pci_dev *pdev, void *cookie,
   void (*irq_set_state)(void *cookie, bool state),
   unsigned int (*set_vga_decode)(void *cookie, bool state));
# 40 "../include/drm/drm_fb_helper.h" 2

enum mode_set_atomic {
 LEAVE_ATOMIC_MODE_SET,
 ENTER_ATOMIC_MODE_SET,
};
# 63 "../include/drm/drm_fb_helper.h"
struct drm_fb_helper_surface_size {
 u32 fb_width;
 u32 fb_height;
 u32 surface_width;
 u32 surface_height;
 u32 surface_bpp;
 u32 surface_depth;
};






struct drm_fb_helper_funcs {
# 92 "../include/drm/drm_fb_helper.h"
 int (*fb_probe)(struct drm_fb_helper *helper,
   struct drm_fb_helper_surface_size *sizes);
};
# 114 "../include/drm/drm_fb_helper.h"
struct drm_fb_helper {





 struct drm_client_dev client;






 struct drm_client_buffer *buffer;

 struct drm_framebuffer *fb;
 struct drm_device *dev;
 const struct drm_fb_helper_funcs *funcs;
 struct fb_info *fbdev;
 u32 pseudo_palette[17];
 struct drm_clip_rect dirty_clip;
 spinlock_t dirty_lock;
 struct work_struct dirty_work;
 struct work_struct resume_work;
# 149 "../include/drm/drm_fb_helper.h"
 struct mutex lock;






 struct list_head kernel_fb_list;
# 165 "../include/drm/drm_fb_helper.h"
 bool delayed_hotplug;
# 177 "../include/drm/drm_fb_helper.h"
 bool deferred_setup;
# 188 "../include/drm/drm_fb_helper.h"
 int preferred_bpp;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_fb_helper *
drm_fb_helper_from_client(struct drm_client_dev *client)
{
 return ({ void *__mptr = (void *)(client); do { extern void __compiletime_assert_194(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(client)), typeof(((struct drm_fb_helper *)0)->client)) && !__builtin_types_compatible_p(typeof(*(client)), typeof(void))))) __compiletime_assert_194(); } while (0); ((struct drm_fb_helper *)(__mptr - __builtin_offsetof(struct drm_fb_helper, client))); });
}
# 214 "../include/drm/drm_fb_helper.h"
void drm_fb_helper_prepare(struct drm_device *dev, struct drm_fb_helper *helper,
      const struct drm_fb_helper_funcs *funcs);
int drm_fb_helper_init(struct drm_device *dev,
         struct drm_fb_helper *helper, int max_conn);
void drm_fb_helper_fini(struct drm_fb_helper *helper);
int drm_fb_helper_blank(int blank, struct fb_info *info);
int drm_fb_helper_pan_display(struct fb_var_screeninfo *var,
         struct fb_info *info);
int drm_fb_helper_set_par(struct fb_info *info);
int drm_fb_helper_check_var(struct fb_var_screeninfo *var,
       struct fb_info *info);

int drm_fb_helper_restore_fbdev_mode_unlocked(struct drm_fb_helper *fb_helper);

struct fb_info *drm_fb_helper_alloc_fbi(struct drm_fb_helper *fb_helper);
void drm_fb_helper_unregister_fbi(struct drm_fb_helper *fb_helper);
void drm_fb_helper_fill_info(struct fb_info *info,
        struct drm_fb_helper *fb_helper,
        struct drm_fb_helper_surface_size *sizes);

void drm_fb_helper_unlink_fbi(struct drm_fb_helper *fb_helper);

void drm_fb_helper_deferred_io(struct fb_info *info,
          struct list_head *pagelist);
int drm_fb_helper_defio_init(struct drm_fb_helper *fb_helper);

ssize_t drm_fb_helper_sys_read(struct fb_info *info, char *buf,
          size_t count, loff_t *ppos);
ssize_t drm_fb_helper_sys_write(struct fb_info *info, const char *buf,
    size_t count, loff_t *ppos);

void drm_fb_helper_sys_fillrect(struct fb_info *info,
    const struct fb_fillrect *rect);
void drm_fb_helper_sys_copyarea(struct fb_info *info,
    const struct fb_copyarea *area);
void drm_fb_helper_sys_imageblit(struct fb_info *info,
     const struct fb_image *image);

void drm_fb_helper_cfb_fillrect(struct fb_info *info,
    const struct fb_fillrect *rect);
void drm_fb_helper_cfb_copyarea(struct fb_info *info,
    const struct fb_copyarea *area);
void drm_fb_helper_cfb_imageblit(struct fb_info *info,
     const struct fb_image *image);

void drm_fb_helper_set_suspend(struct drm_fb_helper *fb_helper, bool suspend);
void drm_fb_helper_set_suspend_unlocked(struct drm_fb_helper *fb_helper,
     bool suspend);

int drm_fb_helper_setcmap(struct fb_cmap *cmap, struct fb_info *info);

int drm_fb_helper_ioctl(struct fb_info *info, unsigned int cmd,
   unsigned long arg);

int drm_fb_helper_hotplug_event(struct drm_fb_helper *fb_helper);
int drm_fb_helper_initial_config(struct drm_fb_helper *fb_helper, int bpp_sel);
int drm_fb_helper_debug_enter(struct fb_info *info);
int drm_fb_helper_debug_leave(struct fb_info *info);

int drm_fb_helper_fbdev_setup(struct drm_device *dev,
         struct drm_fb_helper *fb_helper,
         const struct drm_fb_helper_funcs *funcs,
         unsigned int preferred_bpp,
         unsigned int max_conn_count);
void drm_fb_helper_fbdev_teardown(struct drm_device *dev);

void drm_fb_helper_lastclose(struct drm_device *dev);
void drm_fb_helper_output_poll_changed(struct drm_device *dev);

int drm_fb_helper_generic_probe(struct drm_fb_helper *fb_helper,
    struct drm_fb_helper_surface_size *sizes);
int drm_fbdev_generic_setup(struct drm_device *dev, unsigned int preferred_bpp);
# 498 "../include/drm/drm_fb_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_fb_helper_single_add_all_connectors(struct drm_fb_helper *fb_helper)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_fb_helper_add_one_connector(struct drm_fb_helper *fb_helper,
    struct drm_connector *connector)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_fb_helper_remove_one_connector(struct drm_fb_helper *fb_helper,
       struct drm_connector *connector)
{
 return 0;
}
# 528 "../include/drm/drm_fb_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_fb_helper_remove_conflicting_framebuffers(struct apertures_struct *a,
           const char *name, bool primary)
{

 return remove_conflicting_framebuffers(a, name, primary);



}
# 551 "../include/drm/drm_fb_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
drm_fb_helper_remove_conflicting_pci_framebuffers(struct pci_dev *pdev,
        int resource_id,
        const char *name)
{
 int ret = 0;






 ret = remove_conflicting_pci_framebuffers(pdev, resource_id, name);

 if (ret == 0)
  ret = vga_remove_vgacon(pdev);
 return ret;
}
# 40 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2
# 1 "../include/drm/drm_plane_helper.h" 1
# 41 "../include/drm/drm_plane_helper.h"
void drm_primary_helper_destroy(struct drm_plane *plane);
extern const struct drm_plane_funcs drm_primary_helper_funcs;
# 41 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2
# 1 "../include/drm/drm_probe_helper.h" 1







struct drm_connector;
struct drm_device;
struct drm_modeset_acquire_ctx;

int drm_helper_probe_single_connector_modes(struct drm_connector
         *connector, uint32_t maxX,
         uint32_t maxY);
int drm_helper_probe_detect(struct drm_connector *connector,
       struct drm_modeset_acquire_ctx *ctx,
       bool force);
void drm_kms_helper_poll_init(struct drm_device *dev);
void drm_kms_helper_poll_fini(struct drm_device *dev);
bool drm_helper_hpd_irq_event(struct drm_device *dev);
void drm_kms_helper_hotplug_event(struct drm_device *dev);

void drm_kms_helper_poll_disable(struct drm_device *dev);
void drm_kms_helper_poll_enable(struct drm_device *dev);
bool drm_kms_helper_is_poll_worker(void);
# 42 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2

# 1 "../include/linux/i2c-algo-bit.h" 1
# 21 "../include/linux/i2c-algo-bit.h"
struct i2c_algo_bit_data {
 void *data;
 void (*setsda) (void *data, int state);
 void (*setscl) (void *data, int state);
 int (*getsda) (void *data);
 int (*getscl) (void *data);
 int (*pre_xfer) (struct i2c_adapter *);
 void (*post_xfer) (struct i2c_adapter *);


 int udelay;



 int timeout;
 bool can_do_atomic;
};

int i2c_bit_add_bus(struct i2c_adapter *);
int i2c_bit_add_numbered_bus(struct i2c_adapter *);
extern const struct i2c_algorithm i2c_bit_algo;
# 44 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_irq.h" 1
# 28 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_irq.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/soc15_ih_clientid.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../include/soc15_ih_clientid.h"
enum soc15_ih_clientid {
 SOC15_IH_CLIENTID_IH = 0x00,
 SOC15_IH_CLIENTID_ACP = 0x01,
 SOC15_IH_CLIENTID_ATHUB = 0x02,
 SOC15_IH_CLIENTID_BIF = 0x03,
 SOC15_IH_CLIENTID_DCE = 0x04,
 SOC15_IH_CLIENTID_ISP = 0x05,
 SOC15_IH_CLIENTID_PCIE0 = 0x06,
 SOC15_IH_CLIENTID_RLC = 0x07,
 SOC15_IH_CLIENTID_SDMA0 = 0x08,
 SOC15_IH_CLIENTID_SDMA1 = 0x09,
 SOC15_IH_CLIENTID_SE0SH = 0x0a,
 SOC15_IH_CLIENTID_SE1SH = 0x0b,
 SOC15_IH_CLIENTID_SE2SH = 0x0c,
 SOC15_IH_CLIENTID_SE3SH = 0x0d,
 SOC15_IH_CLIENTID_UVD1 = 0x0e,
 SOC15_IH_CLIENTID_THM = 0x0f,
 SOC15_IH_CLIENTID_UVD = 0x10,
 SOC15_IH_CLIENTID_VCE0 = 0x11,
 SOC15_IH_CLIENTID_VMC = 0x12,
 SOC15_IH_CLIENTID_XDMA = 0x13,
 SOC15_IH_CLIENTID_GRBM_CP = 0x14,
 SOC15_IH_CLIENTID_ATS = 0x15,
 SOC15_IH_CLIENTID_ROM_SMUIO = 0x16,
 SOC15_IH_CLIENTID_DF = 0x17,
 SOC15_IH_CLIENTID_VCE1 = 0x18,
 SOC15_IH_CLIENTID_PWR = 0x19,
 SOC15_IH_CLIENTID_UTCL2 = 0x1b,
 SOC15_IH_CLIENTID_EA = 0x1c,
 SOC15_IH_CLIENTID_UTCL2LOG = 0x1d,
 SOC15_IH_CLIENTID_MP0 = 0x1e,
 SOC15_IH_CLIENTID_MP1 = 0x1f,

 SOC15_IH_CLIENTID_MAX,

 SOC15_IH_CLIENTID_VCN = SOC15_IH_CLIENTID_UVD,
 SOC15_IH_CLIENTID_VCN1 = SOC15_IH_CLIENTID_UVD1,
 SOC15_IH_CLIENTID_SDMA2 = SOC15_IH_CLIENTID_ACP,
 SOC15_IH_CLIENTID_SDMA3 = SOC15_IH_CLIENTID_DCE,
 SOC15_IH_CLIENTID_SDMA4 = SOC15_IH_CLIENTID_ISP,
 SOC15_IH_CLIENTID_SDMA5 = SOC15_IH_CLIENTID_VCE0,
 SOC15_IH_CLIENTID_SDMA6 = SOC15_IH_CLIENTID_XDMA,
 SOC15_IH_CLIENTID_SDMA7 = SOC15_IH_CLIENTID_VCE1,
 SOC15_IH_CLIENTID_VMC1 = SOC15_IH_CLIENTID_PCIE0,
};
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_irq.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ih.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ih.h"
struct amdgpu_device;
struct amdgpu_iv_entry;




struct amdgpu_ih_ring {
 unsigned ring_size;
 uint32_t ptr_mask;
 u32 doorbell_index;
 bool use_doorbell;
 bool use_bus_addr;

 struct amdgpu_bo *ring_obj;
 volatile uint32_t *ring;
 uint64_t gpu_addr;

 uint64_t wptr_addr;
 volatile uint32_t *wptr_cpu;

 uint64_t rptr_addr;
 volatile uint32_t *rptr_cpu;

 bool enabled;
 unsigned rptr;
 atomic_t lock;
};


struct amdgpu_ih_funcs {

 u32 (*get_wptr)(struct amdgpu_device *adev, struct amdgpu_ih_ring *ih);
 void (*decode_iv)(struct amdgpu_device *adev, struct amdgpu_ih_ring *ih,
     struct amdgpu_iv_entry *entry);
 void (*set_rptr)(struct amdgpu_device *adev, struct amdgpu_ih_ring *ih);
};






int amdgpu_ih_ring_init(struct amdgpu_device *adev, struct amdgpu_ih_ring *ih,
   unsigned ring_size, bool use_bus_addr);
void amdgpu_ih_ring_fini(struct amdgpu_device *adev, struct amdgpu_ih_ring *ih);
int amdgpu_ih_process(struct amdgpu_device *adev, struct amdgpu_ih_ring *ih);
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_irq.h" 2
# 39 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_irq.h"
struct amdgpu_device;

enum amdgpu_interrupt_state {
 AMDGPU_IRQ_STATE_DISABLE,
 AMDGPU_IRQ_STATE_ENABLE,
};

struct amdgpu_iv_entry {
 unsigned client_id;
 unsigned src_id;
 unsigned ring_id;
 unsigned vmid;
 unsigned vmid_src;
 uint64_t timestamp;
 unsigned timestamp_src;
 unsigned pasid;
 unsigned pasid_src;
 unsigned src_data[4];
 const uint32_t *iv_entry;
};

struct amdgpu_irq_src {
 unsigned num_types;
 atomic_t *enabled_types;
 const struct amdgpu_irq_src_funcs *funcs;
 void *data;
};

struct amdgpu_irq_client {
 struct amdgpu_irq_src **sources;
};


struct amdgpu_irq_src_funcs {
 int (*set)(struct amdgpu_device *adev, struct amdgpu_irq_src *source,
     unsigned type, enum amdgpu_interrupt_state state);

 int (*process)(struct amdgpu_device *adev,
         struct amdgpu_irq_src *source,
         struct amdgpu_iv_entry *entry);
};

struct amdgpu_irq {
 bool installed;
 spinlock_t lock;

 struct amdgpu_irq_client client[SOC15_IH_CLIENTID_MAX];


 bool msi_enabled;


 struct amdgpu_ih_ring ih, ih1, ih2;
 const struct amdgpu_ih_funcs *ih_funcs;
 struct work_struct ih1_work, ih2_work;
 struct amdgpu_irq_src self_irq;


 struct irq_domain *domain;
 unsigned virq[0x100];
 uint32_t srbm_soft_reset;
};

void amdgpu_irq_disable_all(struct amdgpu_device *adev);
irqreturn_t amdgpu_irq_handler(int irq, void *arg);

int amdgpu_irq_init(struct amdgpu_device *adev);
void amdgpu_irq_fini(struct amdgpu_device *adev);
int amdgpu_irq_add_id(struct amdgpu_device *adev,
        unsigned client_id, unsigned src_id,
        struct amdgpu_irq_src *source);
void amdgpu_irq_dispatch(struct amdgpu_device *adev,
    struct amdgpu_ih_ring *ih);
int amdgpu_irq_update(struct amdgpu_device *adev, struct amdgpu_irq_src *src,
        unsigned type);
int amdgpu_irq_get(struct amdgpu_device *adev, struct amdgpu_irq_src *src,
     unsigned type);
int amdgpu_irq_put(struct amdgpu_device *adev, struct amdgpu_irq_src *src,
     unsigned type);
bool amdgpu_irq_enabled(struct amdgpu_device *adev, struct amdgpu_irq_src *src,
   unsigned type);
void amdgpu_irq_gpu_reset_resume_helper(struct amdgpu_device *adev);

int amdgpu_irq_add_domain(struct amdgpu_device *adev);
void amdgpu_irq_remove_domain(struct amdgpu_device *adev);
unsigned amdgpu_irq_create_mapping(struct amdgpu_device *adev, unsigned src_id);
# 46 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2

# 1 "../include/drm/drm_dp_mst_helper.h" 1
# 27 "../include/drm/drm_dp_mst_helper.h"
# 1 "../include/drm/drm_atomic.h" 1
# 70 "../include/drm/drm_atomic.h"
struct drm_crtc_commit {





 struct drm_crtc *crtc;
# 85 "../include/drm/drm_atomic.h"
 struct kref ref;
# 96 "../include/drm/drm_atomic.h"
 struct completion flip_done;
# 111 "../include/drm/drm_atomic.h"
 struct completion hw_done;
# 122 "../include/drm/drm_atomic.h"
 struct completion cleanup_done;







 struct list_head commit_entry;






 struct drm_pending_vblank_event *event;
# 146 "../include/drm/drm_atomic.h"
 bool abort_completion;
};

struct __drm_planes_state {
 struct drm_plane *ptr;
 struct drm_plane_state *state, *old_state, *new_state;
};

struct __drm_crtcs_state {
 struct drm_crtc *ptr;
 struct drm_crtc_state *state, *old_state, *new_state;
# 166 "../include/drm/drm_atomic.h"
 struct drm_crtc_commit *commit;

 s32 *out_fence_ptr;
 u64 last_vblank_count;
};

struct __drm_connnectors_state {
 struct drm_connector *ptr;
 struct drm_connector_state *state, *old_state, *new_state;







 s32 *out_fence_ptr;
};

struct drm_private_obj;
struct drm_private_state;
# 198 "../include/drm/drm_atomic.h"
struct drm_private_state_funcs {
# 210 "../include/drm/drm_atomic.h"
 struct drm_private_state *(*atomic_duplicate_state)(struct drm_private_obj *obj);






 void (*atomic_destroy_state)(struct drm_private_obj *obj,
         struct drm_private_state *state);
};
# 243 "../include/drm/drm_atomic.h"
struct drm_private_obj {




 struct list_head head;




 struct drm_modeset_lock lock;




 struct drm_private_state *state;







 const struct drm_private_state_funcs *funcs;
};
# 289 "../include/drm/drm_atomic.h"
struct drm_private_state {
 struct drm_atomic_state *state;
};

struct __drm_private_objs_state {
 struct drm_private_obj *ptr;
 struct drm_private_state *state, *old_state, *new_state;
};
# 316 "../include/drm/drm_atomic.h"
struct drm_atomic_state {
 struct kref ref;

 struct drm_device *dev;
# 329 "../include/drm/drm_atomic.h"
 bool allow_modeset : 1;
 bool legacy_cursor_update : 1;
 bool async_update : 1;
# 340 "../include/drm/drm_atomic.h"
 bool duplicated : 1;
 struct __drm_planes_state *planes;
 struct __drm_crtcs_state *crtcs;
 int num_connector;
 struct __drm_connnectors_state *connectors;
 int num_private_objs;
 struct __drm_private_objs_state *private_objs;

 struct drm_modeset_acquire_ctx *acquire_ctx;
# 360 "../include/drm/drm_atomic.h"
 struct drm_crtc_commit *fake_commit;







 struct work_struct commit_work;
};

void __drm_crtc_commit_free(struct kref *kref);
# 382 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_commit *drm_crtc_commit_get(struct drm_crtc_commit *commit)
{
 kref_get(&commit->ref);
 return commit;
}
# 395 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_crtc_commit_put(struct drm_crtc_commit *commit)
{
 kref_put(&commit->ref, __drm_crtc_commit_free);
}

struct drm_atomic_state * __attribute__((__warn_unused_result__))
drm_atomic_state_alloc(struct drm_device *dev);
void drm_atomic_state_clear(struct drm_atomic_state *state);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_atomic_state *
drm_atomic_state_get(struct drm_atomic_state *state)
{
 kref_get(&state->ref);
 return state;
}

void __drm_atomic_state_free(struct kref *ref);
# 426 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void drm_atomic_state_put(struct drm_atomic_state *state)
{
 kref_put(&state->ref, __drm_atomic_state_free);
}

int __attribute__((__warn_unused_result__))
drm_atomic_state_init(struct drm_device *dev, struct drm_atomic_state *state);
void drm_atomic_state_default_clear(struct drm_atomic_state *state);
void drm_atomic_state_default_release(struct drm_atomic_state *state);

struct drm_crtc_state * __attribute__((__warn_unused_result__))
drm_atomic_get_crtc_state(struct drm_atomic_state *state,
     struct drm_crtc *crtc);
struct drm_plane_state * __attribute__((__warn_unused_result__))
drm_atomic_get_plane_state(struct drm_atomic_state *state,
      struct drm_plane *plane);
struct drm_connector_state * __attribute__((__warn_unused_result__))
drm_atomic_get_connector_state(struct drm_atomic_state *state,
          struct drm_connector *connector);

void drm_atomic_private_obj_init(struct drm_device *dev,
     struct drm_private_obj *obj,
     struct drm_private_state *state,
     const struct drm_private_state_funcs *funcs);
void drm_atomic_private_obj_fini(struct drm_private_obj *obj);

struct drm_private_state * __attribute__((__warn_unused_result__))
drm_atomic_get_private_obj_state(struct drm_atomic_state *state,
     struct drm_private_obj *obj);
struct drm_private_state *
drm_atomic_get_old_private_obj_state(struct drm_atomic_state *state,
         struct drm_private_obj *obj);
struct drm_private_state *
drm_atomic_get_new_private_obj_state(struct drm_atomic_state *state,
         struct drm_private_obj *obj);

struct drm_connector *
drm_atomic_get_old_connector_for_encoder(struct drm_atomic_state *state,
      struct drm_encoder *encoder);
struct drm_connector *
drm_atomic_get_new_connector_for_encoder(struct drm_atomic_state *state,
      struct drm_encoder *encoder);
# 480 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_state *
drm_atomic_get_existing_crtc_state(struct drm_atomic_state *state,
       struct drm_crtc *crtc)
{
 return state->crtcs[drm_crtc_index(crtc)].state;
}
# 495 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_state *
drm_atomic_get_old_crtc_state(struct drm_atomic_state *state,
         struct drm_crtc *crtc)
{
 return state->crtcs[drm_crtc_index(crtc)].old_state;
}
# 509 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_crtc_state *
drm_atomic_get_new_crtc_state(struct drm_atomic_state *state,
         struct drm_crtc *crtc)
{
 return state->crtcs[drm_crtc_index(crtc)].new_state;
}
# 527 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane_state *
drm_atomic_get_existing_plane_state(struct drm_atomic_state *state,
        struct drm_plane *plane)
{
 return state->planes[drm_plane_index(plane)].state;
}
# 542 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane_state *
drm_atomic_get_old_plane_state(struct drm_atomic_state *state,
          struct drm_plane *plane)
{
 return state->planes[drm_plane_index(plane)].old_state;
}
# 557 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_plane_state *
drm_atomic_get_new_plane_state(struct drm_atomic_state *state,
          struct drm_plane *plane)
{
 return state->planes[drm_plane_index(plane)].new_state;
}
# 575 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector_state *
drm_atomic_get_existing_connector_state(struct drm_atomic_state *state,
     struct drm_connector *connector)
{
 int index = drm_connector_index(connector);

 if (index >= state->num_connector)
  return ((void *)0);

 return state->connectors[index].state;
}
# 595 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector_state *
drm_atomic_get_old_connector_state(struct drm_atomic_state *state,
       struct drm_connector *connector)
{
 int index = drm_connector_index(connector);

 if (index >= state->num_connector)
  return ((void *)0);

 return state->connectors[index].old_state;
}
# 615 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct drm_connector_state *
drm_atomic_get_new_connector_state(struct drm_atomic_state *state,
       struct drm_connector *connector)
{
 int index = drm_connector_index(connector);

 if (index >= state->num_connector)
  return ((void *)0);

 return state->connectors[index].new_state;
}
# 653 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct drm_plane_state *
__drm_atomic_get_current_plane_state(struct drm_atomic_state *state,
         struct drm_plane *plane)
{
 if (state->planes[drm_plane_index(plane)].state)
  return state->planes[drm_plane_index(plane)].state;

 return plane->state;
}

int __attribute__((__warn_unused_result__))
drm_atomic_add_affected_connectors(struct drm_atomic_state *state,
       struct drm_crtc *crtc);
int __attribute__((__warn_unused_result__))
drm_atomic_add_affected_planes(struct drm_atomic_state *state,
          struct drm_crtc *crtc);

int __attribute__((__warn_unused_result__)) drm_atomic_check_only(struct drm_atomic_state *state);
int __attribute__((__warn_unused_result__)) drm_atomic_commit(struct drm_atomic_state *state);
int __attribute__((__warn_unused_result__)) drm_atomic_nonblocking_commit(struct drm_atomic_state *state);

void drm_state_dump(struct drm_device *dev, struct drm_printer *p);
# 953 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_atomic_crtc_needs_modeset(const struct drm_crtc_state *state)
{
 return state->mode_changed || state->active_changed ||
        state->connectors_changed;
}
# 969 "../include/drm/drm_atomic.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
drm_atomic_crtc_effectively_active(const struct drm_crtc_state *state)
{
 return state->active || state->self_refresh_active;
}
# 28 "../include/drm/drm_dp_mst_helper.h" 2

struct drm_dp_mst_branch;
# 38 "../include/drm/drm_dp_mst_helper.h"
struct drm_dp_vcpi {
 int vcpi;
 int pbn;
 int aligned_pbn;
 int num_slots;
};
# 68 "../include/drm/drm_dp_mst_helper.h"
struct drm_dp_mst_port {




 struct kref topology_kref;






 struct kref malloc_kref;

 u8 port_num;
 bool input;
 bool mcs;
 bool ddps;
 u8 pdt;
 bool ldps;
 u8 dpcd_rev;
 u8 num_sdp_streams;
 u8 num_sdp_stream_sinks;
 uint16_t available_pbn;
 struct list_head next;
 struct drm_dp_mst_branch *mstb;
 struct drm_dp_aux aux;
 struct drm_dp_mst_branch *parent;

 struct drm_dp_vcpi vcpi;
 struct drm_connector *connector;
 struct drm_dp_mst_topology_mgr *mgr;





 struct edid *cached_edid;




 bool has_audio;
};
# 132 "../include/drm/drm_dp_mst_helper.h"
struct drm_dp_mst_branch {




 struct kref topology_kref;






 struct kref malloc_kref;

 u8 rad[8];
 u8 lct;
 int num_ports;

 int msg_slots;
 struct list_head ports;


 struct drm_dp_mst_port *port_parent;
 struct drm_dp_mst_topology_mgr *mgr;


 struct drm_dp_sideband_msg_tx *tx_slots[2];
 int last_seqno;
 bool link_address_sent;


 u8 guid[16];
};



struct drm_dp_sideband_msg_hdr {
 u8 lct;
 u8 lcr;
 u8 rad[8];
 bool broadcast;
 bool path_msg;
 u8 msg_len;
 bool somt;
 bool eomt;
 bool seqno;
};

struct drm_dp_nak_reply {
 u8 guid[16];
 u8 reason;
 u8 nak_data;
};

struct drm_dp_link_address_ack_reply {
 u8 guid[16];
 u8 nports;
 struct drm_dp_link_addr_reply_port {
  bool input_port;
  u8 peer_device_type;
  u8 port_number;
  bool mcs;
  bool ddps;
  bool legacy_device_plug_status;
  u8 dpcd_revision;
  u8 peer_guid[16];
  u8 num_sdp_streams;
  u8 num_sdp_stream_sinks;
 } ports[16];
};

struct drm_dp_remote_dpcd_read_ack_reply {
 u8 port_number;
 u8 num_bytes;
 u8 bytes[255];
};

struct drm_dp_remote_dpcd_write_ack_reply {
 u8 port_number;
};

struct drm_dp_remote_dpcd_write_nak_reply {
 u8 port_number;
 u8 reason;
 u8 bytes_written_before_failure;
};

struct drm_dp_remote_i2c_read_ack_reply {
 u8 port_number;
 u8 num_bytes;
 u8 bytes[255];
};

struct drm_dp_remote_i2c_read_nak_reply {
 u8 port_number;
 u8 nak_reason;
 u8 i2c_nak_transaction;
};

struct drm_dp_remote_i2c_write_ack_reply {
 u8 port_number;
};


struct drm_dp_sideband_msg_rx {
 u8 chunk[48];
 u8 msg[256];
 u8 curchunk_len;
 u8 curchunk_idx;
 u8 curchunk_hdrlen;
 u8 curlen;
 bool have_somt;
 bool have_eomt;
 struct drm_dp_sideband_msg_hdr initial_hdr;
};


struct drm_dp_allocate_payload {
 u8 port_number;
 u8 number_sdp_streams;
 u8 vcpi;
 u16 pbn;
 u8 sdp_stream_sink[16];
};

struct drm_dp_allocate_payload_ack_reply {
 u8 port_number;
 u8 vcpi;
 u16 allocated_pbn;
};

struct drm_dp_connection_status_notify {
 u8 guid[16];
 u8 port_number;
 bool legacy_device_plug_status;
 bool displayport_device_plug_status;
 bool message_capability_status;
 bool input_port;
 u8 peer_device_type;
};

struct drm_dp_remote_dpcd_read {
 u8 port_number;
 u32 dpcd_address;
 u8 num_bytes;
};

struct drm_dp_remote_dpcd_write {
 u8 port_number;
 u32 dpcd_address;
 u8 num_bytes;
 u8 *bytes;
};


struct drm_dp_remote_i2c_read {
 u8 num_transactions;
 u8 port_number;
 struct {
  u8 i2c_dev_id;
  u8 num_bytes;
  u8 *bytes;
  u8 no_stop_bit;
  u8 i2c_transaction_delay;
 } transactions[4];
 u8 read_i2c_device_id;
 u8 num_bytes_read;
};

struct drm_dp_remote_i2c_write {
 u8 port_number;
 u8 write_i2c_device_id;
 u8 num_bytes;
 u8 *bytes;
};


struct drm_dp_port_number_req {
 u8 port_number;
};

struct drm_dp_enum_path_resources_ack_reply {
 u8 port_number;
 u16 full_payload_bw_number;
 u16 avail_payload_bw_number;
};


struct drm_dp_port_number_rep {
 u8 port_number;
};

struct drm_dp_query_payload {
 u8 port_number;
 u8 vcpi;
};

struct drm_dp_resource_status_notify {
 u8 port_number;
 u8 guid[16];
 u16 available_pbn;
};

struct drm_dp_query_payload_ack_reply {
 u8 port_number;
 u8 allocated_pbn;
};

struct drm_dp_sideband_msg_req_body {
 u8 req_type;
 union ack_req {
  struct drm_dp_connection_status_notify conn_stat;
  struct drm_dp_port_number_req port_num;
  struct drm_dp_resource_status_notify resource_stat;

  struct drm_dp_query_payload query_payload;
  struct drm_dp_allocate_payload allocate_payload;

  struct drm_dp_remote_dpcd_read dpcd_read;
  struct drm_dp_remote_dpcd_write dpcd_write;

  struct drm_dp_remote_i2c_read i2c_read;
  struct drm_dp_remote_i2c_write i2c_write;
 } u;
};

struct drm_dp_sideband_msg_reply_body {
 u8 reply_type;
 u8 req_type;
 union ack_replies {
  struct drm_dp_nak_reply nak;
  struct drm_dp_link_address_ack_reply link_addr;
  struct drm_dp_port_number_rep port_number;

  struct drm_dp_enum_path_resources_ack_reply path_resources;
  struct drm_dp_allocate_payload_ack_reply allocate_payload;
  struct drm_dp_query_payload_ack_reply query_payload;

  struct drm_dp_remote_dpcd_read_ack_reply remote_dpcd_read_ack;
  struct drm_dp_remote_dpcd_write_ack_reply remote_dpcd_write_ack;
  struct drm_dp_remote_dpcd_write_nak_reply remote_dpcd_write_nack;

  struct drm_dp_remote_i2c_read_ack_reply remote_i2c_read_ack;
  struct drm_dp_remote_i2c_read_nak_reply remote_i2c_read_nack;
  struct drm_dp_remote_i2c_write_ack_reply remote_i2c_write_ack;
 } u;
};
# 390 "../include/drm/drm_dp_mst_helper.h"
struct drm_dp_sideband_msg_tx {
 u8 msg[256];
 u8 chunk[48];
 u8 cur_offset;
 u8 cur_len;
 struct drm_dp_mst_branch *dst;
 struct list_head next;
 int seqno;
 int state;
 bool path_msg;
 struct drm_dp_sideband_msg_reply_body reply;
};


struct drm_dp_mst_topology_mgr;
struct drm_dp_mst_topology_cbs {

 struct drm_connector *(*add_connector)(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port, const char *path);
 void (*register_connector)(struct drm_connector *connector);
 void (*destroy_connector)(struct drm_dp_mst_topology_mgr *mgr,
      struct drm_connector *connector);
};







struct drm_dp_payload {
 int payload_state;
 int start_slot;
 int num_slots;
 int vcpi;
};



struct drm_dp_vcpi_allocation {
 struct drm_dp_mst_port *port;
 int vcpi;
 struct list_head next;
};

struct drm_dp_mst_topology_state {
 struct drm_private_state base;
 struct list_head vcpis;
 struct drm_dp_mst_topology_mgr *mgr;
};
# 449 "../include/drm/drm_dp_mst_helper.h"
struct drm_dp_mst_topology_mgr {



 struct drm_private_obj base;




 struct drm_device *dev;



 const struct drm_dp_mst_topology_cbs *cbs;




 int max_dpcd_transaction_bytes;




 struct drm_dp_aux *aux;



 int max_payloads;




 int conn_base_id;






 struct drm_dp_sideband_msg_rx down_rep_recv;





 struct drm_dp_sideband_msg_rx up_req_recv;




 struct mutex lock;





 bool mst_state;



 struct drm_dp_mst_branch *mst_primary;




 u8 dpcd[0xf];



 u8 sink_count;



 int pbn_div;




 const struct drm_private_state_funcs *funcs;





 struct mutex qlock;



 struct list_head tx_msg_downq;




 struct mutex payload_lock;




 struct drm_dp_vcpi **proposed_vcpis;



 struct drm_dp_payload *payloads;





 unsigned long payload_mask;



 unsigned long vcpi_mask;




 wait_queue_head_t tx_waitq;



 struct work_struct work;




 struct work_struct tx_work;




 struct list_head destroy_connector_list;



 struct mutex destroy_connector_lock;




 struct work_struct destroy_connector_work;
};

int drm_dp_mst_topology_mgr_init(struct drm_dp_mst_topology_mgr *mgr,
     struct drm_device *dev, struct drm_dp_aux *aux,
     int max_dpcd_transaction_bytes,
     int max_payloads, int conn_base_id);

void drm_dp_mst_topology_mgr_destroy(struct drm_dp_mst_topology_mgr *mgr);


int drm_dp_mst_topology_mgr_set_mst(struct drm_dp_mst_topology_mgr *mgr, bool mst_state);


int drm_dp_mst_hpd_irq(struct drm_dp_mst_topology_mgr *mgr, u8 *esi, bool *handled);


enum drm_connector_status drm_dp_mst_detect_port(struct drm_connector *connector, struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port);

bool drm_dp_mst_port_has_audio(struct drm_dp_mst_topology_mgr *mgr,
     struct drm_dp_mst_port *port);
struct edid *drm_dp_mst_get_edid(struct drm_connector *connector, struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port);


int drm_dp_calc_pbn_mode(int clock, int bpp);


bool drm_dp_mst_allocate_vcpi(struct drm_dp_mst_topology_mgr *mgr,
         struct drm_dp_mst_port *port, int pbn, int slots);

int drm_dp_mst_get_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port);


void drm_dp_mst_reset_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr, struct drm_dp_mst_port *port);


void drm_dp_mst_deallocate_vcpi(struct drm_dp_mst_topology_mgr *mgr,
    struct drm_dp_mst_port *port);


int drm_dp_find_vcpi_slots(struct drm_dp_mst_topology_mgr *mgr,
      int pbn);


int drm_dp_update_payload_part1(struct drm_dp_mst_topology_mgr *mgr);


int drm_dp_update_payload_part2(struct drm_dp_mst_topology_mgr *mgr);

int drm_dp_check_act_status(struct drm_dp_mst_topology_mgr *mgr);

void drm_dp_mst_dump_topology(struct seq_file *m,
         struct drm_dp_mst_topology_mgr *mgr);

void drm_dp_mst_topology_mgr_suspend(struct drm_dp_mst_topology_mgr *mgr);
int __attribute__((__warn_unused_result__))
drm_dp_mst_topology_mgr_resume(struct drm_dp_mst_topology_mgr *mgr);

ssize_t drm_dp_mst_dpcd_read(struct drm_dp_aux *aux,
        unsigned int offset, void *buffer, size_t size);
ssize_t drm_dp_mst_dpcd_write(struct drm_dp_aux *aux,
         unsigned int offset, void *buffer, size_t size);

int drm_dp_mst_connector_late_register(struct drm_connector *connector,
           struct drm_dp_mst_port *port);
void drm_dp_mst_connector_early_unregister(struct drm_connector *connector,
        struct drm_dp_mst_port *port);

struct drm_dp_mst_topology_state *drm_atomic_get_mst_topology_state(struct drm_atomic_state *state,
            struct drm_dp_mst_topology_mgr *mgr);
int __attribute__((__warn_unused_result__))
drm_dp_atomic_find_vcpi_slots(struct drm_atomic_state *state,
         struct drm_dp_mst_topology_mgr *mgr,
         struct drm_dp_mst_port *port, int pbn);
int __attribute__((__warn_unused_result__))
drm_dp_atomic_release_vcpi_slots(struct drm_atomic_state *state,
     struct drm_dp_mst_topology_mgr *mgr,
     struct drm_dp_mst_port *port);
int drm_dp_send_power_updown_phy(struct drm_dp_mst_topology_mgr *mgr,
     struct drm_dp_mst_port *port, bool power_up);
int __attribute__((__warn_unused_result__)) drm_dp_mst_atomic_check(struct drm_atomic_state *state);

void drm_dp_mst_get_port_malloc(struct drm_dp_mst_port *port);
void drm_dp_mst_put_port_malloc(struct drm_dp_mst_port *port);

extern const struct drm_private_state_funcs drm_dp_mst_topology_state_funcs;
# 695 "../include/drm/drm_dp_mst_helper.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
__drm_dp_mst_state_iter_get(struct drm_atomic_state *state,
       struct drm_dp_mst_topology_mgr **mgr,
       struct drm_dp_mst_topology_state **old_state,
       struct drm_dp_mst_topology_state **new_state,
       int i)
{
 struct __drm_private_objs_state *objs_state = &state->private_objs[i];

 if (objs_state->ptr->funcs != &drm_dp_mst_topology_state_funcs)
  return false;

 *mgr = ({ void *__mptr = (void *)(objs_state->ptr); do { extern void __compiletime_assert_707(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(objs_state->ptr)), typeof(((struct drm_dp_mst_topology_mgr *)0)->base)) && !__builtin_types_compatible_p(typeof(*(objs_state->ptr)), typeof(void))))) __compiletime_assert_707(); } while (0); ((struct drm_dp_mst_topology_mgr *)(__mptr - __builtin_offsetof(struct drm_dp_mst_topology_mgr, base))); });
 if (old_state)
  *old_state = ({ void *__mptr = (void *)(objs_state->old_state); do { extern void __compiletime_assert_709(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(objs_state->old_state)), typeof(((struct drm_dp_mst_topology_state *)0)->base)) && !__builtin_types_compatible_p(typeof(*(objs_state->old_state)), typeof(void))))) __compiletime_assert_709(); } while (0); ((struct drm_dp_mst_topology_state *)(__mptr - __builtin_offsetof(struct drm_dp_mst_topology_state, base))); });
 if (new_state)
  *new_state = ({ void *__mptr = (void *)(objs_state->new_state); do { extern void __compiletime_assert_711(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(objs_state->new_state)), typeof(((struct drm_dp_mst_topology_state *)0)->base)) && !__builtin_types_compatible_p(typeof(*(objs_state->new_state)), typeof(void))))) __compiletime_assert_711(); } while (0); ((struct drm_dp_mst_topology_state *)(__mptr - __builtin_offsetof(struct drm_dp_mst_topology_state, base))); });

 return true;
}
# 48 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/modules/inc/mod_freesync.h" 1
# 57 "../drivers/gpu/drm/amd/amdgpu/../display/modules/inc/mod_freesync.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/modules/inc/mod_shared.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../display/modules/inc/mod_shared.h"
enum color_transfer_func {
 TRANSFER_FUNC_UNKNOWN,
 TRANSFER_FUNC_SRGB,
 TRANSFER_FUNC_BT709,
 TRANSFER_FUNC_PQ2084,
 TRANSFER_FUNC_PQ2084_INTERIM,
 TRANSFER_FUNC_LINEAR_0_1,
 TRANSFER_FUNC_LINEAR_0_125,
 TRANSFER_FUNC_GAMMA_22,
 TRANSFER_FUNC_GAMMA_26
};

enum vrr_packet_type {
 PACKET_TYPE_VRR,
 PACKET_TYPE_FS1,
 PACKET_TYPE_FS2,
 PACKET_TYPE_VTEM
};
# 58 "../drivers/gpu/drm/amd/amdgpu/../display/modules/inc/mod_freesync.h" 2


struct mod_freesync {
 int dummy;
};


struct mod_freesync_caps {
 bool supported;
 unsigned int min_refresh_in_micro_hz;
 unsigned int max_refresh_in_micro_hz;
};

enum mod_vrr_state {
 VRR_STATE_UNSUPPORTED = 0,
 VRR_STATE_DISABLED,
 VRR_STATE_INACTIVE,
 VRR_STATE_ACTIVE_VARIABLE,
 VRR_STATE_ACTIVE_FIXED
};

struct mod_freesync_config {
 enum mod_vrr_state state;
 bool vsif_supported;
 bool ramping;
 bool btr;
 unsigned int min_refresh_in_uhz;
 unsigned int max_refresh_in_uhz;
};

struct mod_vrr_params_btr {
 bool btr_enabled;
 bool btr_active;
 uint32_t mid_point_in_us;
 uint32_t inserted_duration_in_us;
 uint32_t frames_to_insert;
 uint32_t frame_counter;
};

struct mod_vrr_params_fixed_refresh {
 bool fixed_active;
 bool ramping_active;
 bool ramping_done;
 uint32_t target_refresh_in_uhz;
 uint32_t frame_counter;
};

struct mod_vrr_params {
 bool supported;
 bool send_info_frame;
 enum mod_vrr_state state;

 uint32_t min_refresh_in_uhz;
 uint32_t max_duration_in_us;
 uint32_t max_refresh_in_uhz;
 uint32_t min_duration_in_us;

 struct dc_crtc_timing_adjust adjust;

 struct mod_vrr_params_fixed_refresh fixed;

 struct mod_vrr_params_btr btr;
};

struct mod_freesync *mod_freesync_create(struct dc *dc);
void mod_freesync_destroy(struct mod_freesync *mod_freesync);

bool mod_freesync_get_vmin_vmax(struct mod_freesync *mod_freesync,
  const struct dc_stream_state *stream,
  unsigned int *vmin,
  unsigned int *vmax);

bool mod_freesync_get_v_position(struct mod_freesync *mod_freesync,
  struct dc_stream_state *stream,
  unsigned int *nom_v_pos,
  unsigned int *v_pos);

void mod_freesync_get_settings(struct mod_freesync *mod_freesync,
  const struct mod_vrr_params *vrr,
  unsigned int *v_total_min, unsigned int *v_total_max,
  unsigned int *event_triggers,
  unsigned int *window_min, unsigned int *window_max,
  unsigned int *lfc_mid_point_in_us,
  unsigned int *inserted_frames,
  unsigned int *inserted_duration_in_us);

void mod_freesync_build_vrr_infopacket(struct mod_freesync *mod_freesync,
  const struct dc_stream_state *stream,
  const struct mod_vrr_params *vrr,
  enum vrr_packet_type packet_type,
  enum color_transfer_func app_tf,
  struct dc_info_packet *infopacket);

void mod_freesync_build_vrr_params(struct mod_freesync *mod_freesync,
  const struct dc_stream_state *stream,
  struct mod_freesync_config *in_config,
  struct mod_vrr_params *in_out_vrr);

void mod_freesync_handle_preflip(struct mod_freesync *mod_freesync,
  const struct dc_plane_state *plane,
  const struct dc_stream_state *stream,
  unsigned int curr_time_stamp_in_us,
  struct mod_vrr_params *in_out_vrr);

void mod_freesync_handle_v_update(struct mod_freesync *mod_freesync,
  const struct dc_stream_state *stream,
  struct mod_vrr_params *in_out_vrr);

unsigned long long mod_freesync_calc_nominal_field_rate(
   const struct dc_stream_state *stream);

bool mod_freesync_is_valid_range(struct mod_freesync *mod_freesync,
  const struct dc_stream_state *stream,
  uint32_t min_refresh_cap_in_uhz,
  uint32_t max_refresh_cap_in_uhz,
  uint32_t min_refresh_request_in_uhz,
  uint32_t max_refresh_request_in_uhz);
# 49 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h" 2

struct amdgpu_bo;
struct amdgpu_device;
struct amdgpu_encoder;
struct amdgpu_router;
struct amdgpu_hpd;
# 68 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h"
enum amdgpu_rmx_type {
 RMX_OFF,
 RMX_FULL,
 RMX_CENTER,
 RMX_ASPECT
};

enum amdgpu_underscan_type {
 UNDERSCAN_OFF,
 UNDERSCAN_ON,
 UNDERSCAN_AUTO,
};




enum amdgpu_hpd_id {
 AMDGPU_HPD_1 = 0,
 AMDGPU_HPD_2,
 AMDGPU_HPD_3,
 AMDGPU_HPD_4,
 AMDGPU_HPD_5,
 AMDGPU_HPD_6,
 AMDGPU_HPD_NONE = 0xff,
};

enum amdgpu_crtc_irq {
 AMDGPU_CRTC_IRQ_VBLANK1 = 0,
 AMDGPU_CRTC_IRQ_VBLANK2,
 AMDGPU_CRTC_IRQ_VBLANK3,
 AMDGPU_CRTC_IRQ_VBLANK4,
 AMDGPU_CRTC_IRQ_VBLANK5,
 AMDGPU_CRTC_IRQ_VBLANK6,
 AMDGPU_CRTC_IRQ_VLINE1,
 AMDGPU_CRTC_IRQ_VLINE2,
 AMDGPU_CRTC_IRQ_VLINE3,
 AMDGPU_CRTC_IRQ_VLINE4,
 AMDGPU_CRTC_IRQ_VLINE5,
 AMDGPU_CRTC_IRQ_VLINE6,
 AMDGPU_CRTC_IRQ_NONE = 0xff
};

enum amdgpu_pageflip_irq {
 AMDGPU_PAGEFLIP_IRQ_D1 = 0,
 AMDGPU_PAGEFLIP_IRQ_D2,
 AMDGPU_PAGEFLIP_IRQ_D3,
 AMDGPU_PAGEFLIP_IRQ_D4,
 AMDGPU_PAGEFLIP_IRQ_D5,
 AMDGPU_PAGEFLIP_IRQ_D6,
 AMDGPU_PAGEFLIP_IRQ_NONE = 0xff
};

enum amdgpu_flip_status {
 AMDGPU_FLIP_NONE,
 AMDGPU_FLIP_PENDING,
 AMDGPU_FLIP_SUBMITTED
};
# 142 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h"
struct amdgpu_i2c_bus_rec {
 bool valid;

 uint8_t i2c_id;

 enum amdgpu_hpd_id hpd;

 bool hw_capable;

 bool mm_i2c;

 uint32_t mask_clk_reg;
 uint32_t mask_data_reg;
 uint32_t a_clk_reg;
 uint32_t a_data_reg;
 uint32_t en_clk_reg;
 uint32_t en_data_reg;
 uint32_t y_clk_reg;
 uint32_t y_data_reg;
 uint32_t mask_clk_mask;
 uint32_t mask_data_mask;
 uint32_t a_clk_mask;
 uint32_t a_data_mask;
 uint32_t en_clk_mask;
 uint32_t en_data_mask;
 uint32_t y_clk_mask;
 uint32_t y_data_mask;
};
# 190 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h"
struct amdgpu_pll {

 uint32_t reference_freq;


 uint32_t reference_div;
 uint32_t post_div;


 uint32_t pll_in_min;
 uint32_t pll_in_max;
 uint32_t pll_out_min;
 uint32_t pll_out_max;
 uint32_t lcd_pll_out_min;
 uint32_t lcd_pll_out_max;
 uint32_t best_vco;


 uint32_t min_ref_div;
 uint32_t max_ref_div;
 uint32_t min_post_div;
 uint32_t max_post_div;
 uint32_t min_feedback_div;
 uint32_t max_feedback_div;
 uint32_t min_frac_feedback_div;
 uint32_t max_frac_feedback_div;


 uint32_t flags;


 uint32_t id;
};

struct amdgpu_i2c_chan {
 struct i2c_adapter adapter;
 struct drm_device *dev;
 struct i2c_algo_bit_data bit;
 struct amdgpu_i2c_bus_rec rec;
 struct drm_dp_aux aux;
 bool has_aux;
 struct mutex mutex;
};

struct amdgpu_fbdev;

struct amdgpu_afmt {
 bool enabled;
 int offset;
 bool last_buffer_filled_status;
 int id;
 struct amdgpu_audio_pin *pin;
};




struct amdgpu_audio_pin {
 int channels;
 int rate;
 int bits_per_sample;
 u8 status_bits;
 u8 category_code;
 u32 offset;
 bool connected;
 u32 id;
};

struct amdgpu_audio {
 bool enabled;
 struct amdgpu_audio_pin pin[9];
 int num_pins;
};

struct amdgpu_display_funcs {

 void (*bandwidth_update)(struct amdgpu_device *adev);

 u32 (*vblank_get_counter)(struct amdgpu_device *adev, int crtc);

 void (*backlight_set_level)(struct amdgpu_encoder *amdgpu_encoder,
        u8 level);

 u8 (*backlight_get_level)(struct amdgpu_encoder *amdgpu_encoder);

 bool (*hpd_sense)(struct amdgpu_device *adev, enum amdgpu_hpd_id hpd);
 void (*hpd_set_polarity)(struct amdgpu_device *adev,
     enum amdgpu_hpd_id hpd);
 u32 (*hpd_get_gpio_reg)(struct amdgpu_device *adev);

 void (*page_flip)(struct amdgpu_device *adev,
     int crtc_id, u64 crtc_base, bool async);
 int (*page_flip_get_scanoutpos)(struct amdgpu_device *adev, int crtc,
     u32 *vbl, u32 *position);

 void (*add_encoder)(struct amdgpu_device *adev,
       uint32_t encoder_enum,
       uint32_t supported_device,
       u16 caps);
 void (*add_connector)(struct amdgpu_device *adev,
         uint32_t connector_id,
         uint32_t supported_device,
         int connector_type,
         struct amdgpu_i2c_bus_rec *i2c_bus,
         uint16_t connector_object_id,
         struct amdgpu_hpd *hpd,
         struct amdgpu_router *router);


};

struct amdgpu_framebuffer {
 struct drm_framebuffer base;


 uint64_t address;
};

struct amdgpu_fbdev {
 struct drm_fb_helper helper;
 struct amdgpu_framebuffer rfb;
 struct list_head fbdev_list;
 struct amdgpu_device *adev;
};

struct amdgpu_mode_info {
 struct atom_context *atom_context;
 struct card_info *atom_card_info;
 bool mode_config_initialized;
 struct amdgpu_crtc *crtcs[6];
 struct drm_plane *planes[6];
 struct amdgpu_afmt *afmt[9];

 struct drm_property *coherent_mode_property;

 struct drm_property *load_detect_property;

 struct drm_property *underscan_property;
 struct drm_property *underscan_hborder_property;
 struct drm_property *underscan_vborder_property;

 struct drm_property *audio_property;

 struct drm_property *dither_property;

 struct drm_property *abm_level_property;

 struct edid *bios_hardcoded_edid;
 int bios_hardcoded_edid_size;


 struct amdgpu_fbdev *rfbdev;

 u16 firmware_flags;

 struct amdgpu_encoder *bl_encoder;
 u8 bl_level;
 struct amdgpu_audio audio;
 int num_crtc;
 int num_hpd;
 int num_dig;
 int disp_priority;
 const struct amdgpu_display_funcs *funcs;
 const enum drm_plane_type *plane_type;
};





struct amdgpu_backlight_privdata {
 struct amdgpu_encoder *encoder;
 uint8_t negative;
};



struct amdgpu_atom_ss {
 uint16_t percentage;
 uint16_t percentage_divider;
 uint8_t type;
 uint16_t step;
 uint8_t delay;
 uint8_t range;
 uint8_t refdiv;

 uint16_t rate;
 uint16_t amount;
};

struct amdgpu_crtc {
 struct drm_crtc base;
 int crtc_id;
 bool enabled;
 bool can_tile;
 uint32_t crtc_offset;
 struct drm_gem_object *cursor_bo;
 uint64_t cursor_addr;
 int cursor_x;
 int cursor_y;
 int cursor_hot_x;
 int cursor_hot_y;
 int cursor_width;
 int cursor_height;
 int max_cursor_width;
 int max_cursor_height;
 enum amdgpu_rmx_type rmx_type;
 u8 h_border;
 u8 v_border;
 fixed20_12 vsc;
 fixed20_12 hsc;
 struct drm_display_mode native_mode;
 u32 pll_id;

 struct amdgpu_flip_work *pflip_works;
 enum amdgpu_flip_status pflip_status;
 int deferred_flip_completion;
 u32 last_flip_vblank;

 struct amdgpu_atom_ss ss;
 bool ss_enabled;
 u32 adjusted_clock;
 int bpc;
 u32 pll_reference_div;
 u32 pll_post_div;
 u32 pll_flags;
 struct drm_encoder *encoder;
 struct drm_connector *connector;

 u32 line_time;
 u32 wm_low;
 u32 wm_high;
 u32 lb_vblank_lead_lines;
 struct drm_display_mode hw_mode;

 struct hrtimer vblank_timer;
 enum amdgpu_interrupt_state vsync_timer_enabled;

 int otg_inst;
 struct drm_pending_vblank_event *event;
};

struct amdgpu_encoder_atom_dig {
 bool linkb;

 bool coherent_mode;
 int dig_encoder;

 uint32_t lcd_misc;
 uint16_t panel_pwr_delay;
 uint32_t lcd_ss_id;

 struct drm_display_mode native_mode;
 struct backlight_device *bl_dev;
 int dpms_mode;
 uint8_t backlight_level;
 int panel_mode;
 struct amdgpu_afmt *afmt;
};

struct amdgpu_encoder {
 struct drm_encoder base;
 uint32_t encoder_enum;
 uint32_t encoder_id;
 uint32_t devices;
 uint32_t active_device;
 uint32_t flags;
 uint32_t pixel_clock;
 enum amdgpu_rmx_type rmx_type;
 enum amdgpu_underscan_type underscan_type;
 uint32_t underscan_hborder;
 uint32_t underscan_vborder;
 struct drm_display_mode native_mode;
 void *enc_priv;
 int audio_polling_active;
 bool is_ext_encoder;
 u16 caps;
};

struct amdgpu_connector_atom_dig {

 u8 dpcd[0xf];
 u8 dp_sink_type;
 int dp_clock;
 int dp_lane_count;
 bool edp_on;
};

struct amdgpu_gpio_rec {
 bool valid;
 u8 id;
 u32 reg;
 u32 mask;
 u32 shift;
};

struct amdgpu_hpd {
 enum amdgpu_hpd_id hpd;
 u8 plugged_state;
 struct amdgpu_gpio_rec gpio;
};

struct amdgpu_router {
 u32 router_id;
 struct amdgpu_i2c_bus_rec i2c_info;
 u8 i2c_addr;

 bool ddc_valid;
 u8 ddc_mux_type;
 u8 ddc_mux_control_pin;
 u8 ddc_mux_state;

 bool cd_valid;
 u8 cd_mux_type;
 u8 cd_mux_control_pin;
 u8 cd_mux_state;
};

enum amdgpu_connector_audio {
 AMDGPU_AUDIO_DISABLE = 0,
 AMDGPU_AUDIO_ENABLE = 1,
 AMDGPU_AUDIO_AUTO = 2
};

enum amdgpu_connector_dither {
 AMDGPU_FMT_DITHER_DISABLE = 0,
 AMDGPU_FMT_DITHER_ENABLE = 1,
};

struct amdgpu_dm_dp_aux {
 struct drm_dp_aux aux;
 struct ddc_service *ddc_service;
};

struct amdgpu_i2c_adapter {
 struct i2c_adapter base;

 struct ddc_service *ddc_service;
};



struct amdgpu_connector {
 struct drm_connector base;
 uint32_t connector_id;
 uint32_t devices;
 struct amdgpu_i2c_chan *ddc_bus;

 bool shared_ddc;
 bool use_digital;


 struct edid *edid;
 void *con_priv;
 bool dac_load_detect;
 bool detected_by_load;
 uint16_t connector_object_id;
 struct amdgpu_hpd hpd;
 struct amdgpu_router router;
 struct amdgpu_i2c_chan *router_bus;
 enum amdgpu_connector_audio audio;
 enum amdgpu_connector_dither dither;
 unsigned pixelclock_for_modeset;
};


struct amdgpu_mst_connector {
 struct amdgpu_connector base;

 struct drm_dp_mst_topology_mgr mst_mgr;
 struct amdgpu_dm_dp_aux dm_dp_aux;
 struct drm_dp_mst_port *port;
 struct amdgpu_connector *mst_port;
 bool is_mst_connector;
 struct amdgpu_encoder *mst_encoder;
};
# 577 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mode.h"
void amdgpu_link_encoder_connector(struct drm_device *dev);

struct drm_connector *
amdgpu_get_connector_for_encoder(struct drm_encoder *encoder);
struct drm_connector *
amdgpu_get_connector_for_encoder_init(struct drm_encoder *encoder);
bool amdgpu_dig_monitor_is_duallink(struct drm_encoder *encoder,
        u32 pixel_clock);

u16 amdgpu_encoder_get_dp_bridge_encoder_id(struct drm_encoder *encoder);
struct drm_encoder *amdgpu_get_external_encoder(struct drm_encoder *encoder);

bool amdgpu_display_ddc_probe(struct amdgpu_connector *amdgpu_connector,
         bool use_aux);

void amdgpu_encoder_set_active_device(struct drm_encoder *encoder);

int amdgpu_display_get_crtc_scanoutpos(struct drm_device *dev,
   unsigned int pipe, unsigned int flags, int *vpos,
   int *hpos, ktime_t *stime, ktime_t *etime,
   const struct drm_display_mode *mode);

int amdgpu_display_framebuffer_init(struct drm_device *dev,
        struct amdgpu_framebuffer *rfb,
        const struct drm_mode_fb_cmd2 *mode_cmd,
        struct drm_gem_object *obj);

int amdgpufb_remove(struct drm_device *dev, struct drm_framebuffer *fb);

void amdgpu_enc_destroy(struct drm_encoder *encoder);
void amdgpu_copy_fb(struct drm_device *dev, struct drm_gem_object *dst_obj);
bool amdgpu_display_crtc_scaling_mode_fixup(struct drm_crtc *crtc,
    const struct drm_display_mode *mode,
    struct drm_display_mode *adjusted_mode);
void amdgpu_panel_mode_fixup(struct drm_encoder *encoder,
        struct drm_display_mode *adjusted_mode);
int amdgpu_display_crtc_idx_to_irq_type(struct amdgpu_device *adev, int crtc);


int amdgpu_fbdev_init(struct amdgpu_device *adev);
void amdgpu_fbdev_fini(struct amdgpu_device *adev);
void amdgpu_fbdev_set_suspend(struct amdgpu_device *adev, int state);
int amdgpu_fbdev_total_size(struct amdgpu_device *adev);
bool amdgpu_fbdev_robj_is_fb(struct amdgpu_device *adev, struct amdgpu_bo *robj);

int amdgpu_align_pitch(struct amdgpu_device *adev, int width, int bpp, bool tiled);


void amdgpu_display_print_display_setup(struct drm_device *dev);
int amdgpu_display_modeset_create_props(struct amdgpu_device *adev);
int amdgpu_display_crtc_set_config(struct drm_mode_set *set,
       struct drm_modeset_acquire_ctx *ctx);
int amdgpu_display_crtc_page_flip_target(struct drm_crtc *crtc,
    struct drm_framebuffer *fb,
    struct drm_pending_vblank_event *event,
    uint32_t page_flip_flags, uint32_t target,
    struct drm_modeset_acquire_ctx *ctx);
extern const struct drm_mode_config_funcs amdgpu_mode_funcs;
# 58 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2


# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ucode.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ucode.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_socbb.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_socbb.h"
struct gpu_info_voltage_scaling_v1_0 {
 uint32_t state;
 uint32_t dscclk_mhz;
 uint32_t dcfclk_mhz;
 uint32_t socclk_mhz;
 uint32_t dram_speed_mts;
 uint32_t fabricclk_mhz;
 uint32_t dispclk_mhz;
 uint32_t phyclk_mhz;
 uint32_t dppclk_mhz;
};

struct gpu_info_soc_bounding_box_v1_0 {
 uint32_t sr_exit_time_us;
 uint32_t sr_enter_plus_exit_time_us;
 uint32_t urgent_latency_us;
 uint32_t urgent_latency_pixel_data_only_us;
 uint32_t urgent_latency_pixel_mixed_with_vm_data_us;
 uint32_t urgent_latency_vm_data_only_us;
 uint32_t writeback_latency_us;
 uint32_t ideal_dram_bw_after_urgent_percent;
 uint32_t pct_ideal_dram_sdp_bw_after_urgent_pixel_only;
 uint32_t pct_ideal_dram_sdp_bw_after_urgent_pixel_and_vm;
 uint32_t pct_ideal_dram_sdp_bw_after_urgent_vm_only;
 uint32_t max_avg_sdp_bw_use_normal_percent;
 uint32_t max_avg_dram_bw_use_normal_percent;
 uint32_t max_request_size_bytes;
 uint32_t downspread_percent;
 uint32_t dram_page_open_time_ns;
 uint32_t dram_rw_turnaround_time_ns;
 uint32_t dram_return_buffer_per_channel_bytes;
 uint32_t dram_channel_width_bytes;
 uint32_t fabric_datapath_to_dcn_data_return_bytes;
 uint32_t dcn_downspread_percent;
 uint32_t dispclk_dppclk_vco_speed_mhz;
 uint32_t dfs_vco_period_ps;
 uint32_t urgent_out_of_order_return_per_channel_pixel_only_bytes;
 uint32_t urgent_out_of_order_return_per_channel_pixel_and_vm_bytes;
 uint32_t urgent_out_of_order_return_per_channel_vm_only_bytes;
 uint32_t round_trip_ping_latency_dcfclk_cycles;
 uint32_t urgent_out_of_order_return_per_channel_bytes;
 uint32_t channel_interleave_bytes;
 uint32_t num_banks;
 uint32_t num_chans;
 uint32_t vmm_page_size_bytes;
 uint32_t dram_clock_change_latency_us;
 uint32_t writeback_dram_clock_change_latency_us;
 uint32_t return_bus_width_bytes;
 uint32_t voltage_override;
 uint32_t xfc_bus_transport_time_us;
 uint32_t xfc_xbuf_latency_tolerance_us;
 uint32_t use_urgent_burst_bw;
 uint32_t num_states;
 struct gpu_info_voltage_scaling_v1_0 clock_limits[8];
};
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ucode.h" 2

struct common_firmware_header {
 uint32_t size_bytes;
 uint32_t header_size_bytes;
 uint16_t header_version_major;
 uint16_t header_version_minor;
 uint16_t ip_version_major;
 uint16_t ip_version_minor;
 uint32_t ucode_version;
 uint32_t ucode_size_bytes;
 uint32_t ucode_array_offset_bytes;
 uint32_t crc32;
};


struct mc_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t io_debug_size_bytes;
 uint32_t io_debug_array_offset_bytes;
};


struct smc_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_start_addr;
};


struct smc_firmware_header_v2_0 {
 struct smc_firmware_header_v1_0 v1_0;
 uint32_t ppt_offset_bytes;
 uint32_t ppt_size_bytes;
};

struct smc_soft_pptable_entry {
        uint32_t id;
        uint32_t ppt_offset_bytes;
        uint32_t ppt_size_bytes;
};


struct smc_firmware_header_v2_1 {
        struct smc_firmware_header_v1_0 v1_0;
        uint32_t pptable_count;
        uint32_t pptable_entry_offset;
};


struct psp_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t sos_offset_bytes;
 uint32_t sos_size_bytes;
};


struct psp_firmware_header_v1_1 {
 struct psp_firmware_header_v1_0 v1_0;
 uint32_t toc_header_version;
 uint32_t toc_offset_bytes;
 uint32_t toc_size_bytes;
 uint32_t kdb_header_version;
 uint32_t kdb_offset_bytes;
 uint32_t kdb_size_bytes;
};


struct psp_firmware_header_v1_2 {
 struct psp_firmware_header_v1_0 v1_0;
 uint32_t reserve[3];
 uint32_t kdb_header_version;
 uint32_t kdb_offset_bytes;
 uint32_t kdb_size_bytes;
};


struct ta_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ta_xgmi_ucode_version;
 uint32_t ta_xgmi_offset_bytes;
 uint32_t ta_xgmi_size_bytes;
 uint32_t ta_ras_ucode_version;
 uint32_t ta_ras_offset_bytes;
 uint32_t ta_ras_size_bytes;
};


struct gfx_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t jt_offset;
 uint32_t jt_size;
};


struct mes_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t mes_ucode_version;
 uint32_t mes_ucode_size_bytes;
 uint32_t mes_ucode_offset_bytes;
 uint32_t mes_ucode_data_version;
 uint32_t mes_ucode_data_size_bytes;
 uint32_t mes_ucode_data_offset_bytes;
 uint32_t mes_uc_start_addr_lo;
 uint32_t mes_uc_start_addr_hi;
 uint32_t mes_data_start_addr_lo;
 uint32_t mes_data_start_addr_hi;
};


struct rlc_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t save_and_restore_offset;
 uint32_t clear_state_descriptor_offset;
 uint32_t avail_scratch_ram_locations;
 uint32_t master_pkt_description_offset;
};


struct rlc_firmware_header_v2_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t jt_offset;
 uint32_t jt_size;
 uint32_t save_and_restore_offset;
 uint32_t clear_state_descriptor_offset;
 uint32_t avail_scratch_ram_locations;
 uint32_t reg_restore_list_size;
 uint32_t reg_list_format_start;
 uint32_t reg_list_format_separate_start;
 uint32_t starting_offsets_start;
 uint32_t reg_list_format_size_bytes;
 uint32_t reg_list_format_array_offset_bytes;
 uint32_t reg_list_size_bytes;
 uint32_t reg_list_array_offset_bytes;
 uint32_t reg_list_format_separate_size_bytes;
 uint32_t reg_list_format_separate_array_offset_bytes;
 uint32_t reg_list_separate_size_bytes;
 uint32_t reg_list_separate_array_offset_bytes;
};


struct rlc_firmware_header_v2_1 {
 struct rlc_firmware_header_v2_0 v2_0;
 uint32_t reg_list_format_direct_reg_list_length;
 uint32_t save_restore_list_cntl_ucode_ver;
 uint32_t save_restore_list_cntl_feature_ver;
 uint32_t save_restore_list_cntl_size_bytes;
 uint32_t save_restore_list_cntl_offset_bytes;
 uint32_t save_restore_list_gpm_ucode_ver;
 uint32_t save_restore_list_gpm_feature_ver;
 uint32_t save_restore_list_gpm_size_bytes;
 uint32_t save_restore_list_gpm_offset_bytes;
 uint32_t save_restore_list_srm_ucode_ver;
 uint32_t save_restore_list_srm_feature_ver;
 uint32_t save_restore_list_srm_size_bytes;
 uint32_t save_restore_list_srm_offset_bytes;
};


struct sdma_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t ucode_feature_version;
 uint32_t ucode_change_version;
 uint32_t jt_offset;
 uint32_t jt_size;
};


struct sdma_firmware_header_v1_1 {
 struct sdma_firmware_header_v1_0 v1_0;
 uint32_t digest_size;
};


struct gpu_info_firmware_v1_0 {
 uint32_t gc_num_se;
 uint32_t gc_num_cu_per_sh;
 uint32_t gc_num_sh_per_se;
 uint32_t gc_num_rb_per_se;
 uint32_t gc_num_tccs;
 uint32_t gc_num_gprs;
 uint32_t gc_num_max_gs_thds;
 uint32_t gc_gs_table_depth;
 uint32_t gc_gsprim_buff_depth;
 uint32_t gc_parameter_cache_depth;
 uint32_t gc_double_offchip_lds_buffer;
 uint32_t gc_wave_size;
 uint32_t gc_max_waves_per_simd;
 uint32_t gc_max_scratch_slots_per_cu;
 uint32_t gc_lds_size;
};

struct gpu_info_firmware_v1_1 {
 struct gpu_info_firmware_v1_0 v1_0;
 uint32_t num_sc_per_sh;
 uint32_t num_packer_per_sc;
};



struct gpu_info_firmware_v1_2 {
 struct gpu_info_firmware_v1_1 v1_1;
 struct gpu_info_soc_bounding_box_v1_0 soc_bounding_box;
};


struct gpu_info_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint16_t version_major;
 uint16_t version_minor;
};


struct dmcu_firmware_header_v1_0 {
 struct common_firmware_header header;
 uint32_t intv_offset_bytes;
 uint32_t intv_size_bytes;
};


union amdgpu_firmware_header {
 struct common_firmware_header common;
 struct mc_firmware_header_v1_0 mc;
 struct smc_firmware_header_v1_0 smc;
 struct smc_firmware_header_v2_0 smc_v2_0;
 struct psp_firmware_header_v1_0 psp;
 struct psp_firmware_header_v1_1 psp_v1_1;
 struct ta_firmware_header_v1_0 ta;
 struct gfx_firmware_header_v1_0 gfx;
 struct rlc_firmware_header_v1_0 rlc;
 struct rlc_firmware_header_v2_0 rlc_v2_0;
 struct rlc_firmware_header_v2_1 rlc_v2_1;
 struct sdma_firmware_header_v1_0 sdma;
 struct sdma_firmware_header_v1_1 sdma_v1_1;
 struct gpu_info_firmware_header_v1_0 gpu_info;
 struct dmcu_firmware_header_v1_0 dmcu;
 uint8_t raw[0x100];
};




enum AMDGPU_UCODE_ID {
 AMDGPU_UCODE_ID_SDMA0 = 0,
 AMDGPU_UCODE_ID_SDMA1,
 AMDGPU_UCODE_ID_SDMA2,
 AMDGPU_UCODE_ID_SDMA3,
 AMDGPU_UCODE_ID_SDMA4,
 AMDGPU_UCODE_ID_SDMA5,
 AMDGPU_UCODE_ID_SDMA6,
 AMDGPU_UCODE_ID_SDMA7,
 AMDGPU_UCODE_ID_CP_CE,
 AMDGPU_UCODE_ID_CP_PFP,
 AMDGPU_UCODE_ID_CP_ME,
 AMDGPU_UCODE_ID_CP_MEC1,
 AMDGPU_UCODE_ID_CP_MEC1_JT,
 AMDGPU_UCODE_ID_CP_MEC2,
 AMDGPU_UCODE_ID_CP_MEC2_JT,
 AMDGPU_UCODE_ID_CP_MES,
 AMDGPU_UCODE_ID_CP_MES_DATA,
 AMDGPU_UCODE_ID_RLC_G,
 AMDGPU_UCODE_ID_RLC_RESTORE_LIST_CNTL,
 AMDGPU_UCODE_ID_RLC_RESTORE_LIST_GPM_MEM,
 AMDGPU_UCODE_ID_RLC_RESTORE_LIST_SRM_MEM,
 AMDGPU_UCODE_ID_STORAGE,
 AMDGPU_UCODE_ID_SMC,
 AMDGPU_UCODE_ID_UVD,
 AMDGPU_UCODE_ID_UVD1,
 AMDGPU_UCODE_ID_VCE,
 AMDGPU_UCODE_ID_VCN,
 AMDGPU_UCODE_ID_VCN1,
 AMDGPU_UCODE_ID_DMCU_ERAM,
 AMDGPU_UCODE_ID_DMCU_INTV,
 AMDGPU_UCODE_ID_VCN0_RAM,
 AMDGPU_UCODE_ID_VCN1_RAM,
 AMDGPU_UCODE_ID_MAXIMUM,
};


enum AMDGPU_UCODE_STATUS {
 AMDGPU_UCODE_STATUS_INVALID,
 AMDGPU_UCODE_STATUS_NOT_LOADED,
 AMDGPU_UCODE_STATUS_LOADED,
};

enum amdgpu_firmware_load_type {
 AMDGPU_FW_LOAD_DIRECT = 0,
 AMDGPU_FW_LOAD_SMU,
 AMDGPU_FW_LOAD_PSP,
 AMDGPU_FW_LOAD_RLC_BACKDOOR_AUTO,
};
# 332 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ucode.h"
struct amdgpu_firmware_info {

 enum AMDGPU_UCODE_ID ucode_id;

 const struct firmware *fw;

 uint64_t mc_addr;

 void *kaddr;

 uint32_t ucode_size;

 uint32_t tmr_mc_addr_lo;
 uint32_t tmr_mc_addr_hi;
};

struct amdgpu_firmware {
 struct amdgpu_firmware_info ucode[AMDGPU_UCODE_ID_MAXIMUM];
 enum amdgpu_firmware_load_type load_type;
 struct amdgpu_bo *fw_buf;
 unsigned int fw_size;
 unsigned int max_ucodes;

 const struct amdgpu_psp_funcs *funcs;
 struct amdgpu_bo *rbuf;
 struct mutex mutex;


 const struct firmware *gpu_info_fw;

 void *fw_buf_ptr;
 uint64_t fw_buf_mc;
};

void amdgpu_ucode_print_mc_hdr(const struct common_firmware_header *hdr);
void amdgpu_ucode_print_smc_hdr(const struct common_firmware_header *hdr);
void amdgpu_ucode_print_gfx_hdr(const struct common_firmware_header *hdr);
void amdgpu_ucode_print_rlc_hdr(const struct common_firmware_header *hdr);
void amdgpu_ucode_print_sdma_hdr(const struct common_firmware_header *hdr);
void amdgpu_ucode_print_psp_hdr(const struct common_firmware_header *hdr);
void amdgpu_ucode_print_gpu_info_hdr(const struct common_firmware_header *hdr);
int amdgpu_ucode_validate(const struct firmware *fw);
bool amdgpu_ucode_hdr_version(union amdgpu_firmware_header *hdr,
    uint16_t hdr_major, uint16_t hdr_minor);

int amdgpu_ucode_init_bo(struct amdgpu_device *adev);
int amdgpu_ucode_create_bo(struct amdgpu_device *adev);
int amdgpu_ucode_sysfs_init(struct amdgpu_device *adev);
void amdgpu_ucode_free_bo(struct amdgpu_device *adev);
void amdgpu_ucode_sysfs_fini(struct amdgpu_device *adev);

enum amdgpu_firmware_load_type
amdgpu_ucode_get_load_type(struct amdgpu_device *adev, int load_type);
# 61 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ttm.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ttm.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 1
# 28 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ttm.h" 2
# 43 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ttm.h"
struct amdgpu_mman {
 struct ttm_bo_device bdev;
 bool mem_global_referenced;
 bool initialized;
 void *aper_base_kaddr;


 struct dentry *debugfs_entries[8];



 const struct amdgpu_buffer_funcs *buffer_funcs;
 struct amdgpu_ring *buffer_funcs_ring;
 bool buffer_funcs_enabled;

 struct mutex gtt_window_lock;

 struct drm_sched_entity entity;
};

struct amdgpu_copy_mem {
 struct ttm_buffer_object *bo;
 struct ttm_mem_reg *mem;
 unsigned long offset;
};

extern const struct ttm_mem_type_manager_func amdgpu_gtt_mgr_func;
extern const struct ttm_mem_type_manager_func amdgpu_vram_mgr_func;

bool amdgpu_gtt_mgr_has_gart_addr(struct ttm_mem_reg *mem);
uint64_t amdgpu_gtt_mgr_usage(struct ttm_mem_type_manager *man);
int amdgpu_gtt_mgr_recover(struct ttm_mem_type_manager *man);

u64 amdgpu_vram_mgr_bo_visible_size(struct amdgpu_bo *bo);
uint64_t amdgpu_vram_mgr_usage(struct ttm_mem_type_manager *man);
uint64_t amdgpu_vram_mgr_vis_usage(struct ttm_mem_type_manager *man);

int amdgpu_ttm_init(struct amdgpu_device *adev);
void amdgpu_ttm_late_init(struct amdgpu_device *adev);
void amdgpu_ttm_fini(struct amdgpu_device *adev);
void amdgpu_ttm_set_buffer_funcs_status(struct amdgpu_device *adev,
     bool enable);

int amdgpu_copy_buffer(struct amdgpu_ring *ring, uint64_t src_offset,
         uint64_t dst_offset, uint32_t byte_count,
         struct dma_resv *resv,
         struct dma_fence **fence, bool direct_submit,
         bool vm_needs_flush);
int amdgpu_ttm_copy_mem_to_mem(struct amdgpu_device *adev,
          struct amdgpu_copy_mem *src,
          struct amdgpu_copy_mem *dst,
          uint64_t size,
          struct dma_resv *resv,
          struct dma_fence **f);
int amdgpu_fill_buffer(struct amdgpu_bo *bo,
   uint32_t src_data,
   struct dma_resv *resv,
   struct dma_fence **fence);

int amdgpu_mmap(struct file *filp, struct vm_area_struct *vma);
int amdgpu_ttm_alloc_gart(struct ttm_buffer_object *bo);
int amdgpu_ttm_recover_gart(struct ttm_buffer_object *tbo);


int amdgpu_ttm_tt_get_user_pages(struct amdgpu_bo *bo, struct page **pages);
bool amdgpu_ttm_tt_get_user_pages_done(struct ttm_tt *ttm);
# 121 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ttm.h"
void amdgpu_ttm_tt_set_user_pages(struct ttm_tt *ttm, struct page **pages);
int amdgpu_ttm_tt_set_userptr(struct ttm_tt *ttm, uint64_t addr,
         uint32_t flags);
bool amdgpu_ttm_tt_has_userptr(struct ttm_tt *ttm);
struct mm_struct *amdgpu_ttm_tt_get_usermm(struct ttm_tt *ttm);
bool amdgpu_ttm_tt_affect_userptr(struct ttm_tt *ttm, unsigned long start,
      unsigned long end);
bool amdgpu_ttm_tt_userptr_invalidated(struct ttm_tt *ttm,
           int *last_invalidated);
bool amdgpu_ttm_tt_is_userptr(struct ttm_tt *ttm);
bool amdgpu_ttm_tt_is_readonly(struct ttm_tt *ttm);
uint64_t amdgpu_ttm_tt_pde_flags(struct ttm_tt *ttm, struct ttm_mem_reg *mem);
uint64_t amdgpu_ttm_tt_pte_flags(struct amdgpu_device *adev, struct ttm_tt *ttm,
     struct ttm_mem_reg *mem);
# 62 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h" 1
# 28 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/psp_gfx_if.h" 1
# 37 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/psp_gfx_if.h"
enum psp_gfx_crtl_cmd_id
{
    GFX_CTRL_CMD_ID_INIT_RBI_RING = 0x00010000,
    GFX_CTRL_CMD_ID_INIT_GPCOM_RING = 0x00020000,
    GFX_CTRL_CMD_ID_DESTROY_RINGS = 0x00030000,
    GFX_CTRL_CMD_ID_CAN_INIT_RINGS = 0x00040000,
    GFX_CTRL_CMD_ID_ENABLE_INT = 0x00050000,
    GFX_CTRL_CMD_ID_DISABLE_INT = 0x00060000,
    GFX_CTRL_CMD_ID_MODE1_RST = 0x00070000,
    GFX_CTRL_CMD_ID_GBR_IH_SET = 0x00080000,
    GFX_CTRL_CMD_ID_CONSUME_CMD = 0x000A0000,
    GFX_CTRL_CMD_ID_DESTROY_GPCOM_RING = 0x000C0000,

    GFX_CTRL_CMD_ID_MAX = 0x000F0000,
};
# 63 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/psp_gfx_if.h"
struct psp_gfx_ctrl
{
    volatile uint32_t cmd_resp;
    volatile uint32_t rbi_wptr;
    volatile uint32_t rbi_rptr;
    volatile uint32_t gpcom_wptr;
    volatile uint32_t gpcom_rptr;
    volatile uint32_t ring_addr_lo;
    volatile uint32_t ring_addr_hi;
    volatile uint32_t ring_buf_size;

};
# 84 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/psp_gfx_if.h"
enum ih_reg_id {
 IH_RB = 0,
 IH_RB_RNG1 = 1,
 IH_RB_RNG2 = 2,
};


struct psp_gfx_cmd_gbr_ih_reg {
 uint32_t reg_value;
 enum ih_reg_id reg_id;
};


enum psp_gfx_cmd_id
{
    GFX_CMD_ID_LOAD_TA = 0x00000001,
    GFX_CMD_ID_UNLOAD_TA = 0x00000002,
    GFX_CMD_ID_INVOKE_CMD = 0x00000003,
    GFX_CMD_ID_LOAD_ASD = 0x00000004,
    GFX_CMD_ID_SETUP_TMR = 0x00000005,
    GFX_CMD_ID_LOAD_IP_FW = 0x00000006,
    GFX_CMD_ID_DESTROY_TMR = 0x00000007,
    GFX_CMD_ID_SAVE_RESTORE = 0x00000008,
    GFX_CMD_ID_SETUP_VMR = 0x00000009,
    GFX_CMD_ID_DESTROY_VMR = 0x0000000A,
    GFX_CMD_ID_PROG_REG = 0x0000000B,

    GFX_CMD_ID_LOAD_TOC = 0x00000020,
    GFX_CMD_ID_AUTOLOAD_RLC = 0x00000021,
};


struct psp_gfx_cmd_load_ta
{
    uint32_t app_phy_addr_lo;
    uint32_t app_phy_addr_hi;
    uint32_t app_len;
    uint32_t cmd_buf_phy_addr_lo;
    uint32_t cmd_buf_phy_addr_hi;
    uint32_t cmd_buf_len;





};



struct psp_gfx_cmd_unload_ta
{
    uint32_t session_id;

};




struct psp_gfx_buf_desc
{
    uint32_t buf_phy_addr_lo;
    uint32_t buf_phy_addr_hi;
    uint32_t buf_size;

};







struct psp_gfx_buf_list
{
    uint32_t num_desc;
    uint32_t total_size;
    struct psp_gfx_buf_desc buf_desc[64];


};


struct psp_gfx_cmd_invoke_cmd
{
    uint32_t session_id;
    uint32_t ta_cmd_id;
    struct psp_gfx_buf_list buf;

};



struct psp_gfx_cmd_setup_tmr
{
    uint32_t buf_phy_addr_lo;
    uint32_t buf_phy_addr_hi;
    uint32_t buf_size;

};



enum psp_gfx_fw_type {
 GFX_FW_TYPE_NONE = 0,
 GFX_FW_TYPE_CP_ME = 1,
 GFX_FW_TYPE_CP_PFP = 2,
 GFX_FW_TYPE_CP_CE = 3,
 GFX_FW_TYPE_CP_MEC = 4,
 GFX_FW_TYPE_CP_MEC_ME1 = 5,
 GFX_FW_TYPE_CP_MEC_ME2 = 6,
 GFX_FW_TYPE_RLC_V = 7,
 GFX_FW_TYPE_RLC_G = 8,
 GFX_FW_TYPE_SDMA0 = 9,
 GFX_FW_TYPE_SDMA1 = 10,
 GFX_FW_TYPE_DMCU_ERAM = 11,
 GFX_FW_TYPE_DMCU_ISR = 12,
 GFX_FW_TYPE_VCN = 13,
 GFX_FW_TYPE_UVD = 14,
 GFX_FW_TYPE_VCE = 15,
 GFX_FW_TYPE_ISP = 16,
 GFX_FW_TYPE_ACP = 17,
 GFX_FW_TYPE_SMU = 18,
 GFX_FW_TYPE_MMSCH = 19,
 GFX_FW_TYPE_RLC_RESTORE_LIST_GPM_MEM = 20,
 GFX_FW_TYPE_RLC_RESTORE_LIST_SRM_MEM = 21,
 GFX_FW_TYPE_RLC_RESTORE_LIST_SRM_CNTL = 22,
 GFX_FW_TYPE_UVD1 = 23,
 GFX_FW_TYPE_TOC = 24,
 GFX_FW_TYPE_RLC_P = 25,
 GFX_FW_TYPE_RLX6 = 26,
 GFX_FW_TYPE_GLOBAL_TAP_DELAYS = 27,
 GFX_FW_TYPE_SE0_TAP_DELAYS = 28,
 GFX_FW_TYPE_SE1_TAP_DELAYS = 29,
 GFX_FW_TYPE_GLOBAL_SE0_SE1_SKEW_DELAYS = 30,
 GFX_FW_TYPE_SDMA0_JT = 31,
 GFX_FW_TYPE_SDMA1_JT = 32,
 GFX_FW_TYPE_CP_MES = 33,
 GFX_FW_TYPE_MES_STACK = 34,
 GFX_FW_TYPE_RLC_SRM_DRAM_SR = 35,
 GFX_FW_TYPE_RLCG_SCRATCH_SR = 36,
 GFX_FW_TYPE_RLCP_SCRATCH_SR = 37,
 GFX_FW_TYPE_RLCV_SCRATCH_SR = 38,
 GFX_FW_TYPE_RLX6_DRAM_SR = 39,
 GFX_FW_TYPE_SDMA0_PG_CONTEXT = 40,
 GFX_FW_TYPE_SDMA1_PG_CONTEXT = 41,
 GFX_FW_TYPE_GLOBAL_MUX_SELECT_RAM = 42,
 GFX_FW_TYPE_SE0_MUX_SELECT_RAM = 43,
 GFX_FW_TYPE_SE1_MUX_SELECT_RAM = 44,
 GFX_FW_TYPE_ACCUM_CTRL_RAM = 45,
 GFX_FW_TYPE_RLCP_CAM = 46,
 GFX_FW_TYPE_RLC_SPP_CAM_EXT = 47,
 GFX_FW_TYPE_RLX6_DRAM_BOOT = 48,
 GFX_FW_TYPE_VCN0_RAM = 49,
 GFX_FW_TYPE_VCN1_RAM = 50,
 GFX_FW_TYPE_DMUB = 51,
 GFX_FW_TYPE_SDMA2 = 52,
 GFX_FW_TYPE_SDMA3 = 53,
 GFX_FW_TYPE_SDMA4 = 54,
 GFX_FW_TYPE_SDMA5 = 55,
 GFX_FW_TYPE_SDMA6 = 56,
 GFX_FW_TYPE_SDMA7 = 57,
 GFX_FW_TYPE_MAX
};


struct psp_gfx_cmd_load_ip_fw
{
    uint32_t fw_phy_addr_lo;
    uint32_t fw_phy_addr_hi;
    uint32_t fw_size;
    enum psp_gfx_fw_type fw_type;

};


struct psp_gfx_cmd_save_restore_ip_fw
{
    uint32_t save_fw;
    uint32_t save_restore_addr_lo;
    uint32_t save_restore_addr_hi;
    uint32_t buf_size;
    enum psp_gfx_fw_type fw_type;
};


struct psp_gfx_cmd_reg_prog {
 uint32_t reg_value;
 uint32_t reg_id;
};


struct psp_gfx_cmd_load_toc
{
    uint32_t toc_phy_addr_lo;
    uint32_t toc_phy_addr_hi;
    uint32_t toc_size;
};


union psp_gfx_commands
{
    struct psp_gfx_cmd_load_ta cmd_load_ta;
    struct psp_gfx_cmd_unload_ta cmd_unload_ta;
    struct psp_gfx_cmd_invoke_cmd cmd_invoke_cmd;
    struct psp_gfx_cmd_setup_tmr cmd_setup_tmr;
    struct psp_gfx_cmd_load_ip_fw cmd_load_ip_fw;
    struct psp_gfx_cmd_save_restore_ip_fw cmd_save_restore_ip_fw;
    struct psp_gfx_cmd_reg_prog cmd_setup_reg_prog;
    struct psp_gfx_cmd_setup_tmr cmd_setup_vmr;
    struct psp_gfx_cmd_load_toc cmd_load_toc;
};





struct psp_gfx_resp
{
    uint32_t status;
    uint32_t session_id;
    uint32_t fw_addr_lo;
    uint32_t fw_addr_hi;
    uint32_t tmr_size;

    uint32_t reserved[3];


};




struct psp_gfx_cmd_resp
{
    uint32_t buf_size;
    uint32_t buf_version;
    uint32_t cmd_id;



    uint32_t resp_buf_addr_lo;
    uint32_t resp_buf_addr_hi;
    uint32_t resp_offset;
    uint32_t resp_buf_size;

    union psp_gfx_commands cmd;

    uint8_t reserved_1[864 - sizeof(union psp_gfx_commands) - 28];




    struct psp_gfx_resp resp;

    uint8_t reserved_2[1024 - 864 - sizeof(struct psp_gfx_resp)];


};





struct psp_gfx_rb_frame
{
    uint32_t cmd_buf_addr_lo;
    uint32_t cmd_buf_addr_hi;
    uint32_t cmd_buf_size;
    uint32_t fence_addr_lo;
    uint32_t fence_addr_hi;
    uint32_t fence_value;
    uint32_t sid_lo;
    uint32_t sid_hi;
    uint8_t vmid;
    uint8_t frame_type;
    uint8_t reserved1[2];
    uint32_t reserved2[7];

};
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/ta_xgmi_if.h" 1
# 31 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/ta_xgmi_if.h"
enum ta_command_xgmi {
 TA_COMMAND_XGMI__INITIALIZE = 0x00,
 TA_COMMAND_XGMI__GET_NODE_ID = 0x01,
 TA_COMMAND_XGMI__GET_HIVE_ID = 0x02,
 TA_COMMAND_XGMI__GET_GET_TOPOLOGY_INFO = 0x03,
 TA_COMMAND_XGMI__SET_TOPOLOGY_INFO = 0x04
};


                                                            ;
enum ta_xgmi_connected_nodes {
 TA_XGMI__MAX_CONNECTED_NODES = 64
};

enum ta_xgmi_status {
 TA_XGMI_STATUS__SUCCESS = 0x00,
 TA_XGMI_STATUS__GENERIC_FAILURE = 0x01,
 TA_XGMI_STATUS__NULL_POINTER = 0x02,
 TA_XGMI_STATUS__INVALID_PARAMETER = 0x03,
 TA_XGMI_STATUS__NOT_INITIALIZED = 0x04,
 TA_XGMI_STATUS__INVALID_NODE_NUM = 0x05,
 TA_XGMI_STATUS__INVALID_NODE_ID = 0x06,
 TA_XGMI_STATUS__INVALID_TOPOLOGY = 0x07,
 TA_XGMI_STATUS__FAILED_ID_GEN = 0x08,
 TA_XGMI_STATUS__FAILED_TOPOLOGY_INIT = 0x09,
 TA_XGMI_STATUS__SET_SHARING_ERROR = 0x0A
};

enum ta_xgmi_assigned_sdma_engine {
 TA_XGMI_ASSIGNED_SDMA_ENGINE__NOT_ASSIGNED = -1,
 TA_XGMI_ASSIGNED_SDMA_ENGINE__SDMA0 = 0,
 TA_XGMI_ASSIGNED_SDMA_ENGINE__SDMA1 = 1,
 TA_XGMI_ASSIGNED_SDMA_ENGINE__SDMA2 = 2,
 TA_XGMI_ASSIGNED_SDMA_ENGINE__SDMA3 = 3,
 TA_XGMI_ASSIGNED_SDMA_ENGINE__SDMA4 = 4,
 TA_XGMI_ASSIGNED_SDMA_ENGINE__SDMA5 = 5
};



struct ta_xgmi_node_info {
 uint64_t node_id;
 uint8_t num_hops;
 uint8_t is_sharing_enabled;
 enum ta_xgmi_assigned_sdma_engine sdma_engine;
};

struct ta_xgmi_cmd_initialize_output {
 uint32_t status;
};

struct ta_xgmi_cmd_get_node_id_output {
 uint64_t node_id;
};

struct ta_xgmi_cmd_get_hive_id_output {
 uint64_t hive_id;
};

struct ta_xgmi_cmd_get_topology_info_input {
 uint32_t num_nodes;
 struct ta_xgmi_node_info nodes[TA_XGMI__MAX_CONNECTED_NODES];
};

struct ta_xgmi_cmd_get_topology_info_output {
 uint32_t num_nodes;
 struct ta_xgmi_node_info nodes[TA_XGMI__MAX_CONNECTED_NODES];
};

struct ta_xgmi_cmd_set_topology_info_input {
 uint32_t num_nodes;
 struct ta_xgmi_node_info nodes[TA_XGMI__MAX_CONNECTED_NODES];
};



union ta_xgmi_cmd_input {
 struct ta_xgmi_cmd_get_topology_info_input get_topology_info;
 struct ta_xgmi_cmd_set_topology_info_input set_topology_info;
};


union ta_xgmi_cmd_output {
 struct ta_xgmi_cmd_initialize_output initialize;
 struct ta_xgmi_cmd_get_node_id_output get_node_id;
 struct ta_xgmi_cmd_get_hive_id_output get_hive_id;
 struct ta_xgmi_cmd_get_topology_info_output get_topology_info;
};


struct ta_xgmi_shared_memory {
 uint32_t cmd_id;
 uint32_t resp_id;
 enum ta_xgmi_status xgmi_status;
 uint32_t reserved;
 union ta_xgmi_cmd_input xgmi_in_message;
 union ta_xgmi_cmd_output xgmi_out_message;
};
# 31 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/ta_ras_if.h" 1
# 33 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/ta_ras_if.h"
enum ras_command {
 TA_RAS_COMMAND__ENABLE_FEATURES = 0,
 TA_RAS_COMMAND__DISABLE_FEATURES,
 TA_RAS_COMMAND__TRIGGER_ERROR,
};

enum ta_ras_status {
 TA_RAS_STATUS__SUCCESS = 0x00,
 TA_RAS_STATUS__RESET_NEEDED = 0x01,
 TA_RAS_STATUS__ERROR_INVALID_PARAMETER = 0x02,
 TA_RAS_STATUS__ERROR_RAS_NOT_AVAILABLE = 0x03,
 TA_RAS_STATUS__ERROR_RAS_DUPLICATE_CMD = 0x04,
 TA_RAS_STATUS__ERROR_INJECTION_FAILED = 0x05,
 TA_RAS_STATUS__ERROR_ASD_READ_WRITE = 0x06,
 TA_RAS_STATUS__ERROR_TOGGLE_DF_CSTATE = 0x07,
 TA_RAS_STATUS__ERROR_TIMEOUT = 0x08,
 TA_RAS_STATUS__ERROR_BLOCK_DISABLED = 0x09,
 TA_RAS_STATUS__ERROR_GENERIC = 0x10,
};

enum ta_ras_block {
 TA_RAS_BLOCK__UMC = 0,
 TA_RAS_BLOCK__SDMA,
 TA_RAS_BLOCK__GFX,
 TA_RAS_BLOCK__MMHUB,
 TA_RAS_BLOCK__ATHUB,
 TA_RAS_BLOCK__PCIE_BIF,
 TA_RAS_BLOCK__HDP,
 TA_RAS_BLOCK__XGMI_WAFL,
 TA_RAS_BLOCK__DF,
 TA_RAS_BLOCK__SMN,
 TA_RAS_BLOCK__SEM,
 TA_RAS_BLOCK__MP0,
 TA_RAS_BLOCK__MP1,
 TA_RAS_BLOCK__FUSE,
 TA_NUM_BLOCK_MAX
};

enum ta_ras_error_type {
 TA_RAS_ERROR__NONE = 0,
 TA_RAS_ERROR__PARITY = 1,
 TA_RAS_ERROR__SINGLE_CORRECTABLE = 2,
 TA_RAS_ERROR__MULTI_UNCORRECTABLE = 4,
 TA_RAS_ERROR__POISON = 8,
};




struct ta_ras_enable_features_input {
 enum ta_ras_block block_id;
 enum ta_ras_error_type error_type;
};

struct ta_ras_disable_features_input {
 enum ta_ras_block block_id;
 enum ta_ras_error_type error_type;
};

struct ta_ras_trigger_error_input {
 enum ta_ras_block block_id;
 enum ta_ras_error_type inject_error_type;
 uint32_t sub_block_index;
 uint64_t address;
 uint64_t value;
};



union ta_ras_cmd_input {
 struct ta_ras_enable_features_input enable_features;
 struct ta_ras_disable_features_input disable_features;
 struct ta_ras_trigger_error_input trigger_error;
};



struct ta_ras_shared_memory {
 uint32_t cmd_id;
 uint32_t resp_id;
 enum ta_ras_status ras_status;
 uint32_t reserved;
 union ta_ras_cmd_input ras_in_message;
};
# 32 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h" 2
# 41 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h"
struct psp_context;
struct psp_xgmi_node_info;
struct psp_xgmi_topology_info;

enum psp_bootloader_cmd {
 PSP_BL__LOAD_SYSDRV = 0x10000,
 PSP_BL__LOAD_SOSDRV = 0x20000,
 PSP_BL__LOAD_KEY_DATABASE = 0x80000,
};

enum psp_ring_type
{
 PSP_RING_TYPE__INVALID = 0,




 PSP_RING_TYPE__UM = 1,
 PSP_RING_TYPE__KM = 2
};

struct psp_ring
{
 enum psp_ring_type ring_type;
 struct psp_gfx_rb_frame *ring_mem;
 uint64_t ring_mem_mc_addr;
 void *ring_mem_handle;
 uint32_t ring_size;
};


enum psp_reg_prog_id {
 PSP_REG_IH_RB_CNTL = 0,
 PSP_REG_IH_RB_CNTL_RING1 = 1,
 PSP_REG_IH_RB_CNTL_RING2 = 2,
 PSP_REG_LAST
};

struct psp_funcs
{
 int (*init_microcode)(struct psp_context *psp);
 int (*bootloader_load_kdb)(struct psp_context *psp);
 int (*bootloader_load_sysdrv)(struct psp_context *psp);
 int (*bootloader_load_sos)(struct psp_context *psp);
 int (*ring_init)(struct psp_context *psp, enum psp_ring_type ring_type);
 int (*ring_create)(struct psp_context *psp,
      enum psp_ring_type ring_type);
 int (*ring_stop)(struct psp_context *psp,
       enum psp_ring_type ring_type);
 int (*ring_destroy)(struct psp_context *psp,
       enum psp_ring_type ring_type);
 int (*cmd_submit)(struct psp_context *psp,
     uint64_t cmd_buf_mc_addr, uint64_t fence_mc_addr,
     int index);
 bool (*compare_sram_data)(struct psp_context *psp,
      struct amdgpu_firmware_info *ucode,
      enum AMDGPU_UCODE_ID ucode_type);
 bool (*smu_reload_quirk)(struct psp_context *psp);
 int (*mode1_reset)(struct psp_context *psp);
 int (*xgmi_get_node_id)(struct psp_context *psp, uint64_t *node_id);
 int (*xgmi_get_hive_id)(struct psp_context *psp, uint64_t *hive_id);
 int (*xgmi_get_topology_info)(struct psp_context *psp, int number_devices,
          struct psp_xgmi_topology_info *topology);
 int (*xgmi_set_topology_info)(struct psp_context *psp, int number_devices,
          struct psp_xgmi_topology_info *topology);
 bool (*support_vmr_ring)(struct psp_context *psp);
 int (*ras_trigger_error)(struct psp_context *psp,
   struct ta_ras_trigger_error_input *info);
 int (*ras_cure_posion)(struct psp_context *psp, uint64_t *mode_ptr);
 int (*rlc_autoload_start)(struct psp_context *psp);
};


struct psp_xgmi_node_info {
 uint64_t node_id;
 uint8_t num_hops;
 uint8_t is_sharing_enabled;
 enum ta_xgmi_assigned_sdma_engine sdma_engine;
};

struct psp_xgmi_topology_info {
 uint32_t num_nodes;
 struct psp_xgmi_node_info nodes[64];
};

struct psp_xgmi_context {
 uint8_t initialized;
 uint32_t session_id;
 struct amdgpu_bo *xgmi_shared_bo;
 uint64_t xgmi_shared_mc_addr;
 void *xgmi_shared_buf;
 struct psp_xgmi_topology_info top_info;
};

struct psp_ras_context {

 bool ras_initialized;
 uint32_t session_id;
 struct amdgpu_bo *ras_shared_bo;
 uint64_t ras_shared_mc_addr;
 void *ras_shared_buf;
 struct amdgpu_ras *ras;
};

struct psp_context
{
 struct amdgpu_device *adev;
 struct psp_ring km_ring;
 struct psp_gfx_cmd_resp *cmd;

 const struct psp_funcs *funcs;


 struct amdgpu_bo *fw_pri_bo;
 uint64_t fw_pri_mc_addr;
 void *fw_pri_buf;


 const struct firmware *sos_fw;
 uint32_t sos_fw_version;
 uint32_t sos_feature_version;
 uint32_t sys_bin_size;
 uint32_t sos_bin_size;
 uint32_t toc_bin_size;
 uint32_t kdb_bin_size;
 uint8_t *sys_start_addr;
 uint8_t *sos_start_addr;
 uint8_t *toc_start_addr;
 uint8_t *kdb_start_addr;


 struct amdgpu_bo *tmr_bo;
 uint64_t tmr_mc_addr;


 const struct firmware *asd_fw;
 uint32_t asd_fw_version;
 uint32_t asd_feature_version;
 uint32_t asd_ucode_size;
 uint8_t *asd_start_addr;
 struct amdgpu_bo *asd_shared_bo;
 uint64_t asd_shared_mc_addr;
 void *asd_shared_buf;


 struct amdgpu_bo *fence_buf_bo;
 uint64_t fence_buf_mc_addr;
 void *fence_buf;


 struct amdgpu_bo *cmd_buf_bo;
 uint64_t cmd_buf_mc_addr;
 struct psp_gfx_cmd_resp *cmd_buf_mem;


 atomic_t fence_value;

 bool autoload_supported;


 const struct firmware *ta_fw;
 uint32_t ta_fw_version;
 uint32_t ta_xgmi_ucode_version;
 uint32_t ta_xgmi_ucode_size;
 uint8_t *ta_xgmi_start_addr;
 uint32_t ta_ras_ucode_version;
 uint32_t ta_ras_ucode_size;
 uint8_t *ta_ras_start_addr;
 struct psp_xgmi_context xgmi_context;
 struct psp_ras_context ras;
 struct mutex mutex;
};

struct amdgpu_psp_funcs {
 bool (*check_fw_loading_status)(struct amdgpu_device *adev,
     enum AMDGPU_UCODE_ID);
};
# 264 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_psp.h"
extern const struct amd_ip_funcs psp_ip_funcs;

extern const struct amdgpu_ip_block_version psp_v3_1_ip_block;
extern int psp_wait_for(struct psp_context *psp, uint32_t reg_index,
   uint32_t field_val, uint32_t mask, bool check_changed);

extern const struct amdgpu_ip_block_version psp_v10_0_ip_block;
extern const struct amdgpu_ip_block_version psp_v12_0_ip_block;

int psp_gpu_reset(struct amdgpu_device *adev);
int psp_update_vcn_sram(struct amdgpu_device *adev, int inst_idx,
   uint64_t cmd_gpu_addr, int cmd_size);

int psp_xgmi_invoke(struct psp_context *psp, uint32_t ta_cmd_id);

int psp_ras_invoke(struct psp_context *psp, uint32_t ta_cmd_id);
int psp_ras_enable_features(struct psp_context *psp,
  union ta_ras_cmd_input *info, bool enable);

int psp_rlc_autoload_start(struct psp_context *psp);

extern const struct amdgpu_ip_block_version psp_v11_0_ip_block;
int psp_reg_program(struct psp_context *psp, enum psp_reg_prog_id reg,
  uint32_t value);
# 63 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gds.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gds.h"
struct amdgpu_ring;
struct amdgpu_bo;

struct amdgpu_gds {
 uint32_t gds_size;
 uint32_t gws_size;
 uint32_t oa_size;
 uint32_t gds_compute_max_wave_id;
};

struct amdgpu_gds_reg_offset {
 uint32_t mem_base;
 uint32_t mem_size;
 uint32_t gws;
 uint32_t oa;
};
# 64 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_sync.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_sync.h"
struct dma_fence;
struct dma_resv;
struct amdgpu_device;
struct amdgpu_ring;




struct amdgpu_sync {
 struct hlist_head fences[1 << (4)];
 struct dma_fence *last_vm_update;
};

void amdgpu_sync_create(struct amdgpu_sync *sync);
int amdgpu_sync_fence(struct amdgpu_device *adev, struct amdgpu_sync *sync,
        struct dma_fence *f, bool explicit);
int amdgpu_sync_resv(struct amdgpu_device *adev,
       struct amdgpu_sync *sync,
       struct dma_resv *resv,
       void *owner,
       bool explicit_sync);
struct dma_fence *amdgpu_sync_peek_fence(struct amdgpu_sync *sync,
         struct amdgpu_ring *ring);
struct dma_fence *amdgpu_sync_get_fence(struct amdgpu_sync *sync, bool *explicit);
int amdgpu_sync_clone(struct amdgpu_sync *source, struct amdgpu_sync *clone);
int amdgpu_sync_wait(struct amdgpu_sync *sync, bool intr);
void amdgpu_sync_free(struct amdgpu_sync *sync);
int amdgpu_sync_init(void);
void amdgpu_sync_fini(void);
# 65 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vm.h" 1
# 28 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vm.h"
# 1 "../include/linux/kfifo.h" 1
# 44 "../include/linux/kfifo.h"
struct __kfifo {
 unsigned int in;
 unsigned int out;
 unsigned int mask;
 unsigned int esize;
 void *data;
};
# 83 "../include/linux/kfifo.h"
struct kfifo { union { struct __kfifo kfifo; unsigned char *type; const unsigned char *const_type; char (*rectype)[0]; void *ptr; void const *ptr_const; }; unsigned char buf[0]; };
# 94 "../include/linux/kfifo.h"
struct kfifo_rec_ptr_1 { union { struct __kfifo kfifo; unsigned char *type; const unsigned char *const_type; char (*rectype)[1]; void *ptr; void const *ptr_const; }; unsigned char buf[0]; };
struct kfifo_rec_ptr_2 { union { struct __kfifo kfifo; unsigned char *type; const unsigned char *const_type; char (*rectype)[2]; void *ptr; void const *ptr_const; }; unsigned char buf[0]; };
# 162 "../include/linux/kfifo.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __attribute__((__warn_unused_result__))
__kfifo_uint_must_check_helper(unsigned int val)
{
 return val;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __attribute__((__warn_unused_result__))
__kfifo_int_must_check_helper(int val)
{
 return val;
}
# 758 "../include/linux/kfifo.h"
extern int __kfifo_alloc(struct __kfifo *fifo, unsigned int size,
 size_t esize, gfp_t gfp_mask);

extern void __kfifo_free(struct __kfifo *fifo);

extern int __kfifo_init(struct __kfifo *fifo, void *buffer,
 unsigned int size, size_t esize);

extern unsigned int __kfifo_in(struct __kfifo *fifo,
 const void *buf, unsigned int len);

extern unsigned int __kfifo_out(struct __kfifo *fifo,
 void *buf, unsigned int len);

extern int __kfifo_from_user(struct __kfifo *fifo,
 const void *from, unsigned long len, unsigned int *copied);

extern int __kfifo_to_user(struct __kfifo *fifo,
 void *to, unsigned long len, unsigned int *copied);

extern unsigned int __kfifo_dma_in_prepare(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len);

extern unsigned int __kfifo_dma_out_prepare(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len);

extern unsigned int __kfifo_out_peek(struct __kfifo *fifo,
 void *buf, unsigned int len);

extern unsigned int __kfifo_in_r(struct __kfifo *fifo,
 const void *buf, unsigned int len, size_t recsize);

extern unsigned int __kfifo_out_r(struct __kfifo *fifo,
 void *buf, unsigned int len, size_t recsize);

extern int __kfifo_from_user_r(struct __kfifo *fifo,
 const void *from, unsigned long len, unsigned int *copied,
 size_t recsize);

extern int __kfifo_to_user_r(struct __kfifo *fifo, void *to,
 unsigned long len, unsigned int *copied, size_t recsize);

extern unsigned int __kfifo_dma_in_prepare_r(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len, size_t recsize);

extern void __kfifo_dma_in_finish_r(struct __kfifo *fifo,
 unsigned int len, size_t recsize);

extern unsigned int __kfifo_dma_out_prepare_r(struct __kfifo *fifo,
 struct scatterlist *sgl, int nents, unsigned int len, size_t recsize);

extern void __kfifo_dma_out_finish_r(struct __kfifo *fifo, size_t recsize);

extern unsigned int __kfifo_len_r(struct __kfifo *fifo, size_t recsize);

extern void __kfifo_skip_r(struct __kfifo *fifo, size_t recsize);

extern unsigned int __kfifo_out_peek_r(struct __kfifo *fifo,
 void *buf, unsigned int len, size_t recsize);

extern unsigned int __kfifo_max_r(unsigned int len, size_t recsize);
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vm.h" 2


# 1 "../include/drm/drm_file.h" 1
# 39 "../include/drm/drm_file.h"
# 1 "../include/drm/drm_prime.h" 1
# 45 "../include/drm/drm_prime.h"
struct drm_prime_file_private {

 struct mutex lock;
 struct rb_root dmabufs;
 struct rb_root handles;
};

struct device;

struct dma_buf_export_info;
struct dma_buf;
struct dma_buf_attachment;

enum dma_data_direction;

struct drm_device;
struct drm_gem_object;
struct drm_file;

struct device;


struct dma_buf *drm_gem_dmabuf_export(struct drm_device *dev,
          struct dma_buf_export_info *exp_info);
void drm_gem_dmabuf_release(struct dma_buf *dma_buf);

int drm_gem_prime_fd_to_handle(struct drm_device *dev,
          struct drm_file *file_priv, int prime_fd, uint32_t *handle);
int drm_gem_prime_handle_to_fd(struct drm_device *dev,
          struct drm_file *file_priv, uint32_t handle, uint32_t flags,
          int *prime_fd);


int drm_gem_map_attach(struct dma_buf *dma_buf,
         struct dma_buf_attachment *attach);
void drm_gem_map_detach(struct dma_buf *dma_buf,
   struct dma_buf_attachment *attach);
struct sg_table *drm_gem_map_dma_buf(struct dma_buf_attachment *attach,
         enum dma_data_direction dir);
void drm_gem_unmap_dma_buf(struct dma_buf_attachment *attach,
      struct sg_table *sgt,
      enum dma_data_direction dir);
void *drm_gem_dmabuf_vmap(struct dma_buf *dma_buf);
void drm_gem_dmabuf_vunmap(struct dma_buf *dma_buf, void *vaddr);

int drm_gem_prime_mmap(struct drm_gem_object *obj, struct vm_area_struct *vma);
int drm_gem_dmabuf_mmap(struct dma_buf *dma_buf, struct vm_area_struct *vma);

struct sg_table *drm_prime_pages_to_sg(struct page **pages, unsigned int nr_pages);
struct dma_buf *drm_gem_prime_export(struct drm_gem_object *obj,
         int flags);


struct drm_gem_object *drm_gem_prime_import_dev(struct drm_device *dev,
      struct dma_buf *dma_buf,
      struct device *attach_dev);
struct drm_gem_object *drm_gem_prime_import(struct drm_device *dev,
         struct dma_buf *dma_buf);

void drm_prime_gem_destroy(struct drm_gem_object *obj, struct sg_table *sg);

int drm_prime_sg_to_page_addr_arrays(struct sg_table *sgt, struct page **pages,
         dma_addr_t *addrs, int max_pages);
# 40 "../include/drm/drm_file.h" 2

struct dma_fence;
struct drm_file;
struct drm_device;
struct device;
# 54 "../include/drm/drm_file.h"
enum drm_minor_type {
 DRM_MINOR_PRIMARY,
 DRM_MINOR_CONTROL,
 DRM_MINOR_RENDER,
};
# 69 "../include/drm/drm_file.h"
struct drm_minor {

 int index;
 int type;
 struct device *kdev;
 struct drm_device *dev;

 struct dentry *debugfs_root;

 struct list_head debugfs_list;
 struct mutex debugfs_lock;
};
# 89 "../include/drm/drm_file.h"
struct drm_pending_event {







 struct completion *completion;
# 106 "../include/drm/drm_file.h"
 void (*completion_release)(struct completion *completion);
# 116 "../include/drm/drm_file.h"
 struct drm_event *event;







 struct dma_fence *fence;







 struct drm_file *file_priv;
# 141 "../include/drm/drm_file.h"
 struct list_head link;
# 150 "../include/drm/drm_file.h"
 struct list_head pending_link;
};






struct drm_file {
# 168 "../include/drm/drm_file.h"
 bool authenticated;






 bool stereo_allowed;







 bool universal_planes;


 bool atomic;







 bool aspect_ratio_allowed;






 bool writeback_connectors;
# 212 "../include/drm/drm_file.h"
 bool is_master;
# 224 "../include/drm/drm_file.h"
 struct drm_master *master;


 struct pid *pid;


 drm_magic_t magic;







 struct list_head lhead;


 struct drm_minor *minor;







 struct idr object_idr;


 spinlock_t table_lock;


 struct idr syncobj_idr;

 spinlock_t syncobj_table_lock;


 struct file *filp;







 void *driver_priv;
# 279 "../include/drm/drm_file.h"
 struct list_head fbs;


 struct mutex fbs_lock;
# 292 "../include/drm/drm_file.h"
 struct list_head blobs;


 wait_queue_head_t event_wait;
# 306 "../include/drm/drm_file.h"
 struct list_head pending_event_list;
# 316 "../include/drm/drm_file.h"
 struct list_head event_list;
# 325 "../include/drm/drm_file.h"
 int event_space;


 struct mutex event_read_lock;






 struct drm_prime_file_private prime;



 unsigned long lock_count;

};
# 353 "../include/drm/drm_file.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_is_primary_client(const struct drm_file *file_priv)
{
 return file_priv->minor->type == DRM_MINOR_PRIMARY;
}
# 367 "../include/drm/drm_file.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool drm_is_render_client(const struct drm_file *file_priv)
{
 return file_priv->minor->type == DRM_MINOR_RENDER;
}

int drm_open(struct inode *inode, struct file *filp);
ssize_t drm_read(struct file *filp, char *buffer,
   size_t count, loff_t *offset);
int drm_release(struct inode *inode, struct file *filp);
__poll_t drm_poll(struct file *filp, struct poll_table_struct *wait);
int drm_event_reserve_init_locked(struct drm_device *dev,
      struct drm_file *file_priv,
      struct drm_pending_event *p,
      struct drm_event *e);
int drm_event_reserve_init(struct drm_device *dev,
      struct drm_file *file_priv,
      struct drm_pending_event *p,
      struct drm_event *e);
void drm_event_cancel_free(struct drm_device *dev,
      struct drm_pending_event *p);
void drm_send_event_locked(struct drm_device *dev, struct drm_pending_event *e);
void drm_send_event(struct drm_device *dev, struct drm_pending_event *e);
# 32 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vm.h" 2




# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ids.h" 1
# 36 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ids.h"
struct amdgpu_device;
struct amdgpu_vm;
struct amdgpu_ring;
struct amdgpu_sync;
struct amdgpu_job;

struct amdgpu_vmid {
 struct list_head list;
 struct amdgpu_sync active;
 struct dma_fence *last_flush;
 uint64_t owner;

 uint64_t pd_gpu_addr;

 struct dma_fence *flushed_updates;

 uint32_t current_gpu_reset_count;

 uint32_t gds_base;
 uint32_t gds_size;
 uint32_t gws_base;
 uint32_t gws_size;
 uint32_t oa_base;
 uint32_t oa_size;

 unsigned pasid;
 struct dma_fence *pasid_mapping;
};

struct amdgpu_vmid_mgr {
 struct mutex lock;
 unsigned num_ids;
 struct list_head ids_lru;
 struct amdgpu_vmid ids[16];
 atomic_t reserved_vmid_num;
};

int amdgpu_pasid_alloc(unsigned int bits);
void amdgpu_pasid_free(unsigned int pasid);
void amdgpu_pasid_free_delayed(struct dma_resv *resv,
          unsigned int pasid);

bool amdgpu_vmid_had_gpu_reset(struct amdgpu_device *adev,
          struct amdgpu_vmid *id);
int amdgpu_vmid_alloc_reserved(struct amdgpu_device *adev,
          struct amdgpu_vm *vm,
          unsigned vmhub);
void amdgpu_vmid_free_reserved(struct amdgpu_device *adev,
          struct amdgpu_vm *vm,
          unsigned vmhub);
int amdgpu_vmid_grab(struct amdgpu_vm *vm, struct amdgpu_ring *ring,
       struct amdgpu_sync *sync, struct dma_fence *fence,
       struct amdgpu_job *job);
void amdgpu_vmid_reset(struct amdgpu_device *adev, unsigned vmhub,
         unsigned vmid);
void amdgpu_vmid_reset_all(struct amdgpu_device *adev);

void amdgpu_vmid_mgr_init(struct amdgpu_device *adev);
void amdgpu_vmid_mgr_fini(struct amdgpu_device *adev);
# 37 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vm.h" 2

struct amdgpu_bo_va;
struct amdgpu_job;
struct amdgpu_bo_list_entry;
# 124 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vm.h"
enum amdgpu_vm_level {
 AMDGPU_VM_PDB2,
 AMDGPU_VM_PDB1,
 AMDGPU_VM_PDB0,
 AMDGPU_VM_PTB
};


struct amdgpu_vm_bo_base {

 struct amdgpu_vm *vm;
 struct amdgpu_bo *bo;


 struct amdgpu_vm_bo_base *next;


 struct list_head vm_status;


 bool moved;
};

struct amdgpu_vm_pt {
 struct amdgpu_vm_bo_base base;


 struct amdgpu_vm_pt *entries;
};


struct amdgpu_vm_pte_funcs {

 unsigned copy_pte_num_dw;


 void (*copy_pte)(struct amdgpu_ib *ib,
    uint64_t pe, uint64_t src,
    unsigned count);


 void (*write_pte)(struct amdgpu_ib *ib, uint64_t pe,
     uint64_t value, unsigned count,
     uint32_t incr);

 void (*set_pte_pde)(struct amdgpu_ib *ib,
       uint64_t pe,
       uint64_t addr, unsigned count,
       uint32_t incr, uint64_t flags);
};

struct amdgpu_task_info {
 char process_name[16];
 char task_name[16];
 pid_t pid;
 pid_t tgid;
};
# 189 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vm.h"
struct amdgpu_vm_update_params {




 struct amdgpu_device *adev;




 struct amdgpu_vm *vm;






 dma_addr_t *pages_addr;




 struct amdgpu_job *job;




 unsigned int num_dw_left;
};

struct amdgpu_vm_update_funcs {
 int (*map_table)(struct amdgpu_bo *bo);
 int (*prepare)(struct amdgpu_vm_update_params *p, void * owner,
         struct dma_fence *exclusive);
 int (*update)(struct amdgpu_vm_update_params *p,
        struct amdgpu_bo *bo, uint64_t pe, uint64_t addr,
        unsigned count, uint32_t incr, uint64_t flags);
 int (*commit)(struct amdgpu_vm_update_params *p,
        struct dma_fence **fence);
};

struct amdgpu_vm {

 struct rb_root_cached va;


 struct list_head evicted;


 struct list_head relocated;


 struct list_head moved;


 struct list_head idle;


 struct list_head invalidated;
 spinlock_t invalidated_lock;


 struct list_head freed;


 struct amdgpu_vm_pt root;
 struct dma_fence *last_update;


 struct drm_sched_entity entity;

 unsigned int pasid;

 struct amdgpu_vmid *reserved_vmid[3];


 bool use_cpu_for_update;


 const struct amdgpu_vm_update_funcs *update_funcs;


 bool pte_support_ats;


 struct { union { struct __kfifo kfifo; u64 *type; const u64 *const_type; char (*rectype)[0]; u64 *ptr; u64 const *ptr_const; }; u64 buf[((128 < 2) || (128 & (128 - 1))) ? -1 : 128]; } faults;


 struct amdkfd_process_info *process_info;


 struct list_head vm_list_node;


 uint64_t pd_phys_addr;


 struct amdgpu_task_info task_info;


 struct ttm_lru_bulk_move lru_bulk_move;

 bool bulk_moveable;
};

struct amdgpu_vm_manager {

 struct amdgpu_vmid_mgr id_mgr[3];


 u64 fence_context;
 unsigned seqno[28];

 uint64_t max_pfn;
 uint32_t num_level;
 uint32_t block_size;
 uint32_t fragment_size;
 enum amdgpu_vm_level root_level;

 u64 vram_base_offset;

 const struct amdgpu_vm_pte_funcs *vm_pte_funcs;
 struct drm_sched_rq *vm_pte_rqs[28];
 unsigned vm_pte_num_rqs;
 struct amdgpu_ring *page_fault;


 spinlock_t prt_lock;
 atomic_t num_prt_users;





 int vm_update_mode;




 struct idr pasid_idr;
 spinlock_t pasid_lock;


 uint32_t xgmi_map_counter;
 struct mutex lock_pstate;
};





extern const struct amdgpu_vm_update_funcs amdgpu_vm_cpu_funcs;
extern const struct amdgpu_vm_update_funcs amdgpu_vm_sdma_funcs;

void amdgpu_vm_manager_init(struct amdgpu_device *adev);
void amdgpu_vm_manager_fini(struct amdgpu_device *adev);

long amdgpu_vm_wait_idle(struct amdgpu_vm *vm, long timeout);
int amdgpu_vm_init(struct amdgpu_device *adev, struct amdgpu_vm *vm,
     int vm_context, unsigned int pasid);
int amdgpu_vm_make_compute(struct amdgpu_device *adev, struct amdgpu_vm *vm, unsigned int pasid);
void amdgpu_vm_release_compute(struct amdgpu_device *adev, struct amdgpu_vm *vm);
void amdgpu_vm_fini(struct amdgpu_device *adev, struct amdgpu_vm *vm);
void amdgpu_vm_get_pd_bo(struct amdgpu_vm *vm,
    struct list_head *validated,
    struct amdgpu_bo_list_entry *entry);
bool amdgpu_vm_ready(struct amdgpu_vm *vm);
int amdgpu_vm_validate_pt_bos(struct amdgpu_device *adev, struct amdgpu_vm *vm,
         int (*callback)(void *p, struct amdgpu_bo *bo),
         void *param);
int amdgpu_vm_flush(struct amdgpu_ring *ring, struct amdgpu_job *job, bool need_pipe_sync);
int amdgpu_vm_update_directories(struct amdgpu_device *adev,
     struct amdgpu_vm *vm);
int amdgpu_vm_clear_freed(struct amdgpu_device *adev,
     struct amdgpu_vm *vm,
     struct dma_fence **fence);
int amdgpu_vm_handle_moved(struct amdgpu_device *adev,
      struct amdgpu_vm *vm);
int amdgpu_vm_bo_update(struct amdgpu_device *adev,
   struct amdgpu_bo_va *bo_va,
   bool clear);
void amdgpu_vm_bo_invalidate(struct amdgpu_device *adev,
        struct amdgpu_bo *bo, bool evicted);
uint64_t amdgpu_vm_map_gart(const dma_addr_t *pages_addr, uint64_t addr);
struct amdgpu_bo_va *amdgpu_vm_bo_find(struct amdgpu_vm *vm,
           struct amdgpu_bo *bo);
struct amdgpu_bo_va *amdgpu_vm_bo_add(struct amdgpu_device *adev,
          struct amdgpu_vm *vm,
          struct amdgpu_bo *bo);
int amdgpu_vm_bo_map(struct amdgpu_device *adev,
       struct amdgpu_bo_va *bo_va,
       uint64_t addr, uint64_t offset,
       uint64_t size, uint64_t flags);
int amdgpu_vm_bo_replace_map(struct amdgpu_device *adev,
        struct amdgpu_bo_va *bo_va,
        uint64_t addr, uint64_t offset,
        uint64_t size, uint64_t flags);
int amdgpu_vm_bo_unmap(struct amdgpu_device *adev,
         struct amdgpu_bo_va *bo_va,
         uint64_t addr);
int amdgpu_vm_bo_clear_mappings(struct amdgpu_device *adev,
    struct amdgpu_vm *vm,
    uint64_t saddr, uint64_t size);
struct amdgpu_bo_va_mapping *amdgpu_vm_bo_lookup_mapping(struct amdgpu_vm *vm,
        uint64_t addr);
void amdgpu_vm_bo_trace_cs(struct amdgpu_vm *vm, struct ww_acquire_ctx *ticket);
void amdgpu_vm_bo_rmv(struct amdgpu_device *adev,
        struct amdgpu_bo_va *bo_va);
void amdgpu_vm_adjust_size(struct amdgpu_device *adev, uint32_t min_vm_size,
      uint32_t fragment_size_default, unsigned max_level,
      unsigned max_bits);
int amdgpu_vm_ioctl(struct drm_device *dev, void *data, struct drm_file *filp);
bool amdgpu_vm_need_pipeline_sync(struct amdgpu_ring *ring,
      struct amdgpu_job *job);
void amdgpu_vm_check_compute_bug(struct amdgpu_device *adev);

void amdgpu_vm_get_task_info(struct amdgpu_device *adev, unsigned int pasid,
        struct amdgpu_task_info *task_info);

void amdgpu_vm_set_task_info(struct amdgpu_vm *vm);

void amdgpu_vm_move_to_lru_tail(struct amdgpu_device *adev,
    struct amdgpu_vm *vm);
void amdgpu_vm_del_from_lru_notify(struct ttm_buffer_object *bo);
# 67 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_dpm.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_dpm.h"
enum amdgpu_int_thermal_type {
 THERMAL_TYPE_NONE,
 THERMAL_TYPE_EXTERNAL,
 THERMAL_TYPE_EXTERNAL_GPIO,
 THERMAL_TYPE_RV6XX,
 THERMAL_TYPE_RV770,
 THERMAL_TYPE_ADT7473_WITH_INTERNAL,
 THERMAL_TYPE_EVERGREEN,
 THERMAL_TYPE_SUMO,
 THERMAL_TYPE_NI,
 THERMAL_TYPE_SI,
 THERMAL_TYPE_EMC2103_WITH_INTERNAL,
 THERMAL_TYPE_CI,
 THERMAL_TYPE_KV,
};

enum amdgpu_dpm_auto_throttle_src {
 AMDGPU_DPM_AUTO_THROTTLE_SRC_THERMAL,
 AMDGPU_DPM_AUTO_THROTTLE_SRC_EXTERNAL
};

enum amdgpu_dpm_event_src {
 AMDGPU_DPM_EVENT_SRC_ANALOG = 0,
 AMDGPU_DPM_EVENT_SRC_EXTERNAL = 1,
 AMDGPU_DPM_EVENT_SRC_DIGITAL = 2,
 AMDGPU_DPM_EVENT_SRC_ANALOG_OR_EXTERNAL = 3,
 AMDGPU_DPM_EVENT_SRC_DIGIAL_OR_EXTERNAL = 4
};

struct amdgpu_ps {
 u32 caps;
 u32 class;
 u32 class2;

 u32 vclk;
 u32 dclk;

 u32 evclk;
 u32 ecclk;
 bool vce_active;
 enum amd_vce_level vce_level;

 void *ps_priv;
};

struct amdgpu_dpm_thermal {

 struct work_struct work;

 int min_temp;

 int max_temp;

 int max_edge_emergency_temp;

 int min_hotspot_temp;

 int max_hotspot_crit_temp;

 int max_hotspot_emergency_temp;

 int min_mem_temp;

 int max_mem_crit_temp;

 int max_mem_emergency_temp;

 bool high_to_low;

 struct amdgpu_irq_src irq;
};

enum amdgpu_clk_action
{
 AMDGPU_SCLK_UP = 1,
 AMDGPU_SCLK_DOWN
};

struct amdgpu_blacklist_clocks
{
 u32 sclk;
 u32 mclk;
 enum amdgpu_clk_action action;
};

struct amdgpu_clock_and_voltage_limits {
 u32 sclk;
 u32 mclk;
 u16 vddc;
 u16 vddci;
};

struct amdgpu_clock_array {
 u32 count;
 u32 *values;
};

struct amdgpu_clock_voltage_dependency_entry {
 u32 clk;
 u16 v;
};

struct amdgpu_clock_voltage_dependency_table {
 u32 count;
 struct amdgpu_clock_voltage_dependency_entry *entries;
};

union amdgpu_cac_leakage_entry {
 struct {
  u16 vddc;
  u32 leakage;
 };
 struct {
  u16 vddc1;
  u16 vddc2;
  u16 vddc3;
 };
};

struct amdgpu_cac_leakage_table {
 u32 count;
 union amdgpu_cac_leakage_entry *entries;
};

struct amdgpu_phase_shedding_limits_entry {
 u16 voltage;
 u32 sclk;
 u32 mclk;
};

struct amdgpu_phase_shedding_limits_table {
 u32 count;
 struct amdgpu_phase_shedding_limits_entry *entries;
};

struct amdgpu_uvd_clock_voltage_dependency_entry {
 u32 vclk;
 u32 dclk;
 u16 v;
};

struct amdgpu_uvd_clock_voltage_dependency_table {
 u8 count;
 struct amdgpu_uvd_clock_voltage_dependency_entry *entries;
};

struct amdgpu_vce_clock_voltage_dependency_entry {
 u32 ecclk;
 u32 evclk;
 u16 v;
};

struct amdgpu_vce_clock_voltage_dependency_table {
 u8 count;
 struct amdgpu_vce_clock_voltage_dependency_entry *entries;
};

struct amdgpu_ppm_table {
 u8 ppm_design;
 u16 cpu_core_number;
 u32 platform_tdp;
 u32 small_ac_platform_tdp;
 u32 platform_tdc;
 u32 small_ac_platform_tdc;
 u32 apu_tdp;
 u32 dgpu_tdp;
 u32 dgpu_ulv_power;
 u32 tj_max;
};

struct amdgpu_cac_tdp_table {
 u16 tdp;
 u16 configurable_tdp;
 u16 tdc;
 u16 battery_power_limit;
 u16 small_power_limit;
 u16 low_cac_leakage;
 u16 high_cac_leakage;
 u16 maximum_power_delivery_limit;
};

struct amdgpu_dpm_dynamic_state {
 struct amdgpu_clock_voltage_dependency_table vddc_dependency_on_sclk;
 struct amdgpu_clock_voltage_dependency_table vddci_dependency_on_mclk;
 struct amdgpu_clock_voltage_dependency_table vddc_dependency_on_mclk;
 struct amdgpu_clock_voltage_dependency_table mvdd_dependency_on_mclk;
 struct amdgpu_clock_voltage_dependency_table vddc_dependency_on_dispclk;
 struct amdgpu_uvd_clock_voltage_dependency_table uvd_clock_voltage_dependency_table;
 struct amdgpu_vce_clock_voltage_dependency_table vce_clock_voltage_dependency_table;
 struct amdgpu_clock_voltage_dependency_table samu_clock_voltage_dependency_table;
 struct amdgpu_clock_voltage_dependency_table acp_clock_voltage_dependency_table;
 struct amdgpu_clock_voltage_dependency_table vddgfx_dependency_on_sclk;
 struct amdgpu_clock_array valid_sclk_values;
 struct amdgpu_clock_array valid_mclk_values;
 struct amdgpu_clock_and_voltage_limits max_clock_voltage_on_dc;
 struct amdgpu_clock_and_voltage_limits max_clock_voltage_on_ac;
 u32 mclk_sclk_ratio;
 u32 sclk_mclk_delta;
 u16 vddc_vddci_delta;
 u16 min_vddc_for_pcie_gen2;
 struct amdgpu_cac_leakage_table cac_leakage_table;
 struct amdgpu_phase_shedding_limits_table phase_shedding_limits_table;
 struct amdgpu_ppm_table *ppm_table;
 struct amdgpu_cac_tdp_table *cac_tdp_table;
};

struct amdgpu_dpm_fan {
 u16 t_min;
 u16 t_med;
 u16 t_high;
 u16 pwm_min;
 u16 pwm_med;
 u16 pwm_high;
 u8 t_hyst;
 u32 cycle_delay;
 u16 t_max;
 u8 control_mode;
 u16 default_max_fan_pwm;
 u16 default_fan_output_sensitivity;
 u16 fan_output_sensitivity;
 bool ucode_fan_control;
};

enum amdgpu_pcie_gen {
 AMDGPU_PCIE_GEN1 = 0,
 AMDGPU_PCIE_GEN2 = 1,
 AMDGPU_PCIE_GEN3 = 2,
 AMDGPU_PCIE_GEN_INVALID = 0xffff
};
# 382 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_dpm.h"
struct amdgpu_dpm {
 struct amdgpu_ps *ps;

 int num_ps;

 struct amdgpu_ps *current_ps;

 struct amdgpu_ps *requested_ps;

 struct amdgpu_ps *boot_ps;

 struct amdgpu_ps *uvd_ps;

 u32 num_of_vce_states;
 struct amd_vce_state vce_states[6];
 enum amd_vce_level vce_level;
 enum amd_pm_state_type state;
 enum amd_pm_state_type user_state;
 enum amd_pm_state_type last_state;
 enum amd_pm_state_type last_user_state;
 u32 platform_caps;
 u32 voltage_response_time;
 u32 backbias_response_time;
 void *priv;
 u32 new_active_crtcs;
 int new_active_crtc_count;
 u32 current_active_crtcs;
 int current_active_crtc_count;
 struct amdgpu_dpm_dynamic_state dyn_state;
 struct amdgpu_dpm_fan fan;
 u32 tdp_limit;
 u32 near_tdp_limit;
 u32 near_tdp_limit_adjusted;
 u32 sq_ramping_threshold;
 u32 cac_leakage;
 u16 tdp_od_limit;
 u32 tdp_adjustment;
 u16 load_line_slope;
 bool power_control;

 bool thermal_active;
 bool uvd_active;
 bool vce_active;

 struct amdgpu_dpm_thermal thermal;

 enum amd_dpm_forced_level forced_level;
};

struct amdgpu_pm {
 struct mutex mutex;
 u32 current_sclk;
 u32 current_mclk;
 u32 default_sclk;
 u32 default_mclk;
 struct amdgpu_i2c_chan *i2c_bus;

 enum amdgpu_int_thermal_type int_thermal_type;
 struct device *int_hwmon_dev;

 bool no_fan;
 u8 fan_pulses_per_revolution;
 u8 fan_min_rpm;
 u8 fan_max_rpm;

 bool dpm_enabled;
 bool sysfs_initialized;
 struct amdgpu_dpm dpm;
 const struct firmware *fw;
 uint32_t fw_version;
 uint32_t pcie_gen_mask;
 uint32_t pcie_mlw_mask;
 struct amd_pp_display_configuration pm_display_cfg;
 uint32_t smu_prv_buffer_size;
 struct amdgpu_bo *smu_prv_buffer;
 bool ac_power;

 uint32_t pp_feature;

};
# 473 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_dpm.h"
enum amdgpu_td {
 AMDGPU_TD_AUTO,
 AMDGPU_TD_UP,
 AMDGPU_TD_DOWN,
};

enum amdgpu_display_watermark {
 AMDGPU_DISPLAY_WATERMARK_LOW = 0,
 AMDGPU_DISPLAY_WATERMARK_HIGH = 1,
};

enum amdgpu_display_gap
{
    AMDGPU_PM_DISPLAY_GAP_VBLANK_OR_WM = 0,
    AMDGPU_PM_DISPLAY_GAP_VBLANK = 1,
    AMDGPU_PM_DISPLAY_GAP_WATERMARK = 2,
    AMDGPU_PM_DISPLAY_GAP_IGNORE = 3,
};

void amdgpu_dpm_print_class_info(u32 class, u32 class2);
void amdgpu_dpm_print_cap_info(u32 caps);
void amdgpu_dpm_print_ps_status(struct amdgpu_device *adev,
    struct amdgpu_ps *rps);
u32 amdgpu_dpm_get_vblank_time(struct amdgpu_device *adev);
u32 amdgpu_dpm_get_vrefresh(struct amdgpu_device *adev);
void amdgpu_dpm_get_active_displays(struct amdgpu_device *adev);
int amdgpu_dpm_read_sensor(struct amdgpu_device *adev, enum amd_pp_sensors sensor,
      void *data, uint32_t *size);

bool amdgpu_is_internal_thermal_sensor(enum amdgpu_int_thermal_type sensor);

int amdgpu_get_platform_caps(struct amdgpu_device *adev);

int amdgpu_parse_extended_power_table(struct amdgpu_device *adev);
void amdgpu_free_extended_power_table(struct amdgpu_device *adev);

void amdgpu_add_thermal_controller(struct amdgpu_device *adev);

enum amdgpu_pcie_gen amdgpu_get_pcie_gen_support(struct amdgpu_device *adev,
       u32 sys_mask,
       enum amdgpu_pcie_gen asic_gen,
       enum amdgpu_pcie_gen default_gen);

struct amd_vce_state*
amdgpu_get_vce_clock_state(void *handle, u32 idx);

int amdgpu_dpm_set_powergating_by_smu(struct amdgpu_device *adev,
          uint32_t block_type, bool gate);

extern int amdgpu_dpm_get_sclk(struct amdgpu_device *adev, bool low);

extern int amdgpu_dpm_get_mclk(struct amdgpu_device *adev, bool low);
# 68 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_acp.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_acp.h"
# 1 "../include/linux/mfd/core.h" 1
# 13 "../include/linux/mfd/core.h"
# 1 "../include/linux/platform_device.h" 1
# 18 "../include/linux/platform_device.h"
struct mfd_cell;
struct property_entry;
struct platform_device_id;

struct platform_device {
 const char *name;
 int id;
 bool id_auto;
 struct device dev;
 u64 dma_mask;
 u32 num_resources;
 struct resource *resource;

 const struct platform_device_id *id_entry;
 char *driver_override;


 struct mfd_cell *mfd_cell;


 struct pdev_archdata archdata;
};






extern int platform_device_register(struct platform_device *);
extern void platform_device_unregister(struct platform_device *);

extern struct bus_type platform_bus_type;
extern struct device platform_bus;

extern struct resource *platform_get_resource(struct platform_device *,
           unsigned int, unsigned int);
extern struct device *
platform_find_device_by_driver(struct device *start,
          const struct device_driver *drv);
extern void *
devm_platform_ioremap_resource(struct platform_device *pdev,
          unsigned int index);
extern int platform_get_irq(struct platform_device *, unsigned int);
extern int platform_get_irq_optional(struct platform_device *, unsigned int);
extern int platform_irq_count(struct platform_device *);
extern struct resource *platform_get_resource_byname(struct platform_device *,
           unsigned int,
           const char *);
extern int platform_get_irq_byname(struct platform_device *, const char *);
extern int platform_add_devices(struct platform_device **, int);

struct platform_device_info {
  struct device *parent;
  struct fwnode_handle *fwnode;
  bool of_node_reused;

  const char *name;
  int id;

  const struct resource *res;
  unsigned int num_res;

  const void *data;
  size_t size_data;
  u64 dma_mask;

  struct property_entry *properties;
};
extern struct platform_device *platform_device_register_full(
  const struct platform_device_info *pdevinfo);
# 103 "../include/linux/platform_device.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct platform_device *platform_device_register_resndata(
  struct device *parent, const char *name, int id,
  const struct resource *res, unsigned int num,
  const void *data, size_t size) {

 struct platform_device_info pdevinfo = {
  .parent = parent,
  .name = name,
  .id = id,
  .res = res,
  .num_res = num,
  .data = data,
  .size_data = size,
  .dma_mask = 0,
 };

 return platform_device_register_full(&pdevinfo);
}
# 144 "../include/linux/platform_device.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct platform_device *platform_device_register_simple(
  const char *name, int id,
  const struct resource *res, unsigned int num)
{
 return platform_device_register_resndata(((void *)0), name, id,
   res, num, ((void *)0), 0);
}
# 168 "../include/linux/platform_device.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct platform_device *platform_device_register_data(
  struct device *parent, const char *name, int id,
  const void *data, size_t size)
{
 return platform_device_register_resndata(parent, name, id,
   ((void *)0), 0, data, size);
}

extern struct platform_device *platform_device_alloc(const char *name, int id);
extern int platform_device_add_resources(struct platform_device *pdev,
      const struct resource *res,
      unsigned int num);
extern int platform_device_add_data(struct platform_device *pdev,
        const void *data, size_t size);
extern int platform_device_add_properties(struct platform_device *pdev,
    const struct property_entry *properties);
extern int platform_device_add(struct platform_device *pdev);
extern void platform_device_del(struct platform_device *pdev);
extern void platform_device_put(struct platform_device *pdev);

struct platform_driver {
 int (*probe)(struct platform_device *);
 int (*remove)(struct platform_device *);
 void (*shutdown)(struct platform_device *);
 int (*suspend)(struct platform_device *, pm_message_t state);
 int (*resume)(struct platform_device *);
 struct device_driver driver;
 const struct platform_device_id *id_table;
 bool prevent_deferred_probe;
};
# 207 "../include/linux/platform_device.h"
extern int __platform_driver_register(struct platform_driver *,
     struct module *);
extern void platform_driver_unregister(struct platform_driver *);






extern int __platform_driver_probe(struct platform_driver *driver,
  int (*probe)(struct platform_device *), struct module *module);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *platform_get_drvdata(const struct platform_device *pdev)
{
 return dev_get_drvdata(&pdev->dev);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void platform_set_drvdata(struct platform_device *pdev,
     void *data)
{
 dev_set_drvdata(&pdev->dev, data);
}
# 282 "../include/linux/platform_device.h"
extern struct platform_device *__platform_create_bundle(
 struct platform_driver *driver, int (*probe)(struct platform_device *),
 struct resource *res, unsigned int n_res,
 const void *data, size_t size, struct module *module);

int __platform_register_drivers(struct platform_driver * const *drivers,
    unsigned int count, struct module *owner);
void platform_unregister_drivers(struct platform_driver * const *drivers,
     unsigned int count);





struct early_platform_driver {
 const char *class_str;
 struct platform_driver *pdrv;
 struct list_head list;
 int requested_id;
 char *buffer;
 int bufsize;
};




extern int early_platform_driver_register(struct early_platform_driver *epdrv,
       char *buf);
extern void early_platform_add_devices(struct platform_device **devs, int num);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_early_platform_device(struct platform_device *pdev)
{
 return !pdev->dev.driver;
}

extern void early_platform_driver_register_all(char *class_str);
extern int early_platform_driver_probe(char *class_str,
           int nr_probe, int user_only);
extern void early_platform_cleanup(void);
# 348 "../include/linux/platform_device.h"
extern int platform_pm_suspend(struct device *dev);
extern int platform_pm_resume(struct device *dev);






extern int platform_pm_freeze(struct device *dev);
extern int platform_pm_thaw(struct device *dev);
extern int platform_pm_poweroff(struct device *dev);
extern int platform_pm_restore(struct device *dev);







extern int platform_dma_configure(struct device *dev);
# 14 "../include/linux/mfd/core.h" 2

struct irq_domain;
struct property_entry;


struct mfd_cell_acpi_match {
 const char *pnpid;
 const unsigned long long adr;
};






struct mfd_cell {
 const char *name;
 int id;


 atomic_t *usage_count;
 int (*enable)(struct platform_device *dev);
 int (*disable)(struct platform_device *dev);

 int (*suspend)(struct platform_device *dev);
 int (*resume)(struct platform_device *dev);


 void *platform_data;
 size_t pdata_size;


 struct property_entry *properties;





 const char *of_compatible;


 const struct mfd_cell_acpi_match *acpi_match;





 int num_resources;
 const struct resource *resources;


 bool ignore_resource_conflicts;





 bool pm_runtime_no_callbacks;




 const char * const *parent_supplies;
 int num_parent_supplies;
};







extern int mfd_cell_enable(struct platform_device *pdev);
extern int mfd_cell_disable(struct platform_device *pdev);
# 104 "../include/linux/mfd/core.h"
extern int mfd_clone_cell(const char *cell, const char **clones,
  size_t n_clones);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) const struct mfd_cell *mfd_get_cell(struct platform_device *pdev)
{
 return pdev->mfd_cell;
}

extern int mfd_add_devices(struct device *parent, int id,
      const struct mfd_cell *cells, int n_devs,
      struct resource *mem_base,
      int irq_base, struct irq_domain *irq_domain);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mfd_add_hotplug_devices(struct device *parent,
  const struct mfd_cell *cells, int n_devs)
{
 return mfd_add_devices(parent, (-2), cells, n_devs,
   ((void *)0), 0, ((void *)0));
}

extern void mfd_remove_devices(struct device *parent);

extern int devm_mfd_add_devices(struct device *dev, int id,
    const struct mfd_cell *cells, int n_devs,
    struct resource *mem_base,
    int irq_base, struct irq_domain *irq_domain);
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_acp.h" 2

struct amdgpu_acp {
 struct device *parent;
 struct cgs_device *cgs_device;
 struct amd_acp_private *private;
 struct mfd_cell *acp_cell;
 struct resource *acp_res;
 struct acp_pm_domain *acp_genpd;
};

extern const struct amdgpu_ip_block_version acp_ip_block;
# 69 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_uvd.h" 1
# 40 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_uvd.h"
struct amdgpu_uvd_inst {
 struct amdgpu_bo *vcpu_bo;
 void *cpu_addr;
 uint64_t gpu_addr;
 void *saved_bo;
 struct amdgpu_ring ring;
 struct amdgpu_ring ring_enc[2];
 struct amdgpu_irq_src irq;
 uint32_t srbm_soft_reset;
};




struct amdgpu_uvd {
 const struct firmware *fw;
 unsigned fw_version;
 unsigned max_handles;
 unsigned num_enc_rings;
 uint8_t num_uvd_inst;
 bool address_64_bit;
 bool use_ctx_buf;
 struct amdgpu_uvd_inst inst[2];
 struct drm_file *filp[40];
 atomic_t handles[40];
 struct drm_sched_entity entity;
 struct delayed_work idle_work;
 unsigned harvest_config;

 unsigned decode_image_width;
};

int amdgpu_uvd_sw_init(struct amdgpu_device *adev);
int amdgpu_uvd_sw_fini(struct amdgpu_device *adev);
int amdgpu_uvd_entity_init(struct amdgpu_device *adev);
int amdgpu_uvd_suspend(struct amdgpu_device *adev);
int amdgpu_uvd_resume(struct amdgpu_device *adev);
int amdgpu_uvd_get_create_msg(struct amdgpu_ring *ring, uint32_t handle,
         struct dma_fence **fence);
int amdgpu_uvd_get_destroy_msg(struct amdgpu_ring *ring, uint32_t handle,
          bool direct, struct dma_fence **fence);
void amdgpu_uvd_free_handles(struct amdgpu_device *adev,
        struct drm_file *filp);
int amdgpu_uvd_ring_parse_cs(struct amdgpu_cs_parser *parser, uint32_t ib_idx);
void amdgpu_uvd_ring_begin_use(struct amdgpu_ring *ring);
void amdgpu_uvd_ring_end_use(struct amdgpu_ring *ring);
int amdgpu_uvd_ring_test_ib(struct amdgpu_ring *ring, long timeout);
uint32_t amdgpu_uvd_used_handles(struct amdgpu_device *adev);
# 70 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vce.h" 1
# 35 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vce.h"
struct amdgpu_vce {
 struct amdgpu_bo *vcpu_bo;
 uint64_t gpu_addr;
 void *cpu_addr;
 void *saved_bo;
 unsigned fw_version;
 unsigned fb_version;
 atomic_t handles[16];
 struct drm_file *filp[16];
 uint32_t img_size[16];
 struct delayed_work idle_work;
 struct mutex idle_mutex;
 const struct firmware *fw;
 struct amdgpu_ring ring[3];
 struct amdgpu_irq_src irq;
 unsigned harvest_config;
 struct drm_sched_entity entity;
 uint32_t srbm_soft_reset;
 unsigned num_rings;
};

int amdgpu_vce_sw_init(struct amdgpu_device *adev, unsigned long size);
int amdgpu_vce_sw_fini(struct amdgpu_device *adev);
int amdgpu_vce_entity_init(struct amdgpu_device *adev);
int amdgpu_vce_suspend(struct amdgpu_device *adev);
int amdgpu_vce_resume(struct amdgpu_device *adev);
int amdgpu_vce_get_create_msg(struct amdgpu_ring *ring, uint32_t handle,
         struct dma_fence **fence);
int amdgpu_vce_get_destroy_msg(struct amdgpu_ring *ring, uint32_t handle,
          bool direct, struct dma_fence **fence);
void amdgpu_vce_free_handles(struct amdgpu_device *adev, struct drm_file *filp);
int amdgpu_vce_ring_parse_cs(struct amdgpu_cs_parser *p, uint32_t ib_idx);
int amdgpu_vce_ring_parse_cs_vm(struct amdgpu_cs_parser *p, uint32_t ib_idx);
void amdgpu_vce_ring_emit_ib(struct amdgpu_ring *ring, struct amdgpu_job *job,
    struct amdgpu_ib *ib, uint32_t flags);
void amdgpu_vce_ring_emit_fence(struct amdgpu_ring *ring, u64 addr, u64 seq,
    unsigned flags);
int amdgpu_vce_ring_test_ring(struct amdgpu_ring *ring);
int amdgpu_vce_ring_test_ib(struct amdgpu_ring *ring, long timeout);
void amdgpu_vce_ring_begin_use(struct amdgpu_ring *ring);
void amdgpu_vce_ring_end_use(struct amdgpu_ring *ring);
unsigned amdgpu_vce_ring_get_emit_ib_size(struct amdgpu_ring *ring);
unsigned amdgpu_vce_ring_get_dma_frame_size(struct amdgpu_ring *ring);
# 71 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vcn.h" 1
# 126 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_vcn.h"
enum engine_status_constants {
 UVD_PGFSM_STATUS__UVDM_UVDU_PWR_ON = 0x2AAAA0,
 UVD_PGFSM_STATUS__UVDM_UVDU_PWR_ON_2_0 = 0xAAAA0,
 UVD_PGFSM_CONFIG__UVDM_UVDU_PWR_ON = 0x00000002,
 UVD_STATUS__UVD_BUSY = 0x00000004,
 GB_ADDR_CONFIG_DEFAULT = 0x26010011,
 UVD_STATUS__IDLE = 0x2,
 UVD_STATUS__BUSY = 0x5,
 UVD_POWER_STATUS__UVD_POWER_STATUS_TILES_OFF = 0x1,
 UVD_STATUS__RBC_BUSY = 0x1,
 UVD_PGFSM_STATUS_UVDJ_PWR_ON = 0,
};

enum internal_dpg_state {
 VCN_DPG_STATE__UNPAUSE = 0,
 VCN_DPG_STATE__PAUSE,
};

struct dpg_pause_state {
 enum internal_dpg_state fw_based;
 enum internal_dpg_state jpeg;
};

struct amdgpu_vcn_reg{
 unsigned data0;
 unsigned data1;
 unsigned cmd;
 unsigned nop;
 unsigned context_id;
 unsigned ib_vmid;
 unsigned ib_bar_low;
 unsigned ib_bar_high;
 unsigned ib_size;
 unsigned gp_scratch8;
 unsigned scratch9;
 unsigned jpeg_pitch;
};

struct amdgpu_vcn_inst {
 struct amdgpu_bo *vcpu_bo;
 void *cpu_addr;
 uint64_t gpu_addr;
 void *saved_bo;
 struct amdgpu_ring ring_dec;
 struct amdgpu_ring ring_enc[3];
 struct amdgpu_ring ring_jpeg;
 struct amdgpu_irq_src irq;
 struct amdgpu_vcn_reg external;
};

struct amdgpu_vcn {
 unsigned fw_version;
 struct delayed_work idle_work;
 const struct firmware *fw;
 unsigned num_enc_rings;
 enum amd_powergating_state cur_state;
 struct dpg_pause_state pause_state;

 bool indirect_sram;
 struct amdgpu_bo *dpg_sram_bo;
 void *dpg_sram_cpu_addr;
 uint64_t dpg_sram_gpu_addr;
 uint32_t *dpg_sram_curr_addr;

 uint8_t num_vcn_inst;
 struct amdgpu_vcn_inst inst[2];
 struct amdgpu_vcn_reg internal;

 unsigned harvest_config;
 int (*pause_dpg_mode)(struct amdgpu_device *adev,
  struct dpg_pause_state *new_state);
};

int amdgpu_vcn_sw_init(struct amdgpu_device *adev);
int amdgpu_vcn_sw_fini(struct amdgpu_device *adev);
int amdgpu_vcn_suspend(struct amdgpu_device *adev);
int amdgpu_vcn_resume(struct amdgpu_device *adev);
void amdgpu_vcn_ring_begin_use(struct amdgpu_ring *ring);
void amdgpu_vcn_ring_end_use(struct amdgpu_ring *ring);

int amdgpu_vcn_dec_ring_test_ring(struct amdgpu_ring *ring);
int amdgpu_vcn_dec_ring_test_ib(struct amdgpu_ring *ring, long timeout);

int amdgpu_vcn_enc_ring_test_ring(struct amdgpu_ring *ring);
int amdgpu_vcn_enc_ring_test_ib(struct amdgpu_ring *ring, long timeout);

int amdgpu_vcn_jpeg_ring_test_ring(struct amdgpu_ring *ring);
int amdgpu_vcn_jpeg_ring_test_ib(struct amdgpu_ring *ring, long timeout);
# 72 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mn.h" 1
# 28 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mn.h"
# 1 "../include/linux/hmm.h" 1
# 68 "../include/linux/hmm.h"
# 1 "../include/linux/migrate.h" 1





# 1 "../include/linux/mempolicy.h" 1
# 11 "../include/linux/mempolicy.h"
# 1 "../include/linux/dax.h" 1
# 13 "../include/linux/dax.h"
typedef unsigned long dax_entry_t;

struct iomap_ops;
struct dax_device;
struct dax_operations {





 long (*direct_access)(struct dax_device *, unsigned long, long,
   void **, pfn_t *);




 bool (*dax_supported)(struct dax_device *, struct block_device *, int,
   sector_t, sector_t);

 size_t (*copy_from_iter)(struct dax_device *, unsigned long, void *, size_t,
   struct iov_iter *);

 size_t (*copy_to_iter)(struct dax_device *, unsigned long, void *, size_t,
   struct iov_iter *);
};

extern struct attribute_group dax_attribute_group;


struct dax_device *dax_get_by_host(const char *host);
struct dax_device *alloc_dax(void *private, const char *host,
  const struct dax_operations *ops, unsigned long flags);
void put_dax(struct dax_device *dax_dev);
void kill_dax(struct dax_device *dax_dev);
void dax_write_cache(struct dax_device *dax_dev, bool wc);
bool dax_write_cache_enabled(struct dax_device *dax_dev);
bool __dax_synchronous(struct dax_device *dax_dev);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dax_synchronous(struct dax_device *dax_dev)
{
 return __dax_synchronous(dax_dev);
}
void __set_dax_synchronous(struct dax_device *dax_dev);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void set_dax_synchronous(struct dax_device *dax_dev)
{
 __set_dax_synchronous(dax_dev);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool daxdev_mapping_supported(struct vm_area_struct *vma,
          struct dax_device *dax_dev)
{
 if (!(vma->vm_flags & 0x00800000))
  return true;
 if (!((file_inode(vma->vm_file))->i_flags & 8192))
  return false;
 return dax_synchronous(dax_dev);
}
# 112 "../include/linux/dax.h"
struct writeback_control;
int bdev_dax_pgoff(struct block_device *, sector_t, size_t, unsigned long *pgoff);

bool __bdev_dax_supported(struct block_device *bdev, int blocksize);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bdev_dax_supported(struct block_device *bdev, int blocksize)
{
 return __bdev_dax_supported(bdev, blocksize);
}

bool __generic_fsdax_supported(struct dax_device *dax_dev,
  struct block_device *bdev, int blocksize, sector_t start,
  sector_t sectors);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool generic_fsdax_supported(struct dax_device *dax_dev,
  struct block_device *bdev, int blocksize, sector_t start,
  sector_t sectors)
{
 return __generic_fsdax_supported(dax_dev, bdev, blocksize, start,
   sectors);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct dax_device *fs_dax_get_by_host(const char *host)
{
 return dax_get_by_host(host);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fs_put_dax(struct dax_device *dax_dev)
{
 put_dax(dax_dev);
}

struct dax_device *fs_dax_get_by_bdev(struct block_device *bdev);
int dax_writeback_mapping_range(struct address_space *mapping,
  struct block_device *bdev, struct writeback_control *wbc);

struct page *dax_layout_busy_page(struct address_space *mapping);
dax_entry_t dax_lock_page(struct page *page);
void dax_unlock_page(struct page *page, dax_entry_t cookie);
# 200 "../include/linux/dax.h"
int dax_read_lock(void);
void dax_read_unlock(int id);
bool dax_alive(struct dax_device *dax_dev);
void *dax_get_private(struct dax_device *dax_dev);
long dax_direct_access(struct dax_device *dax_dev, unsigned long pgoff, long nr_pages,
  void **kaddr, pfn_t *pfn);
bool dax_supported(struct dax_device *dax_dev, struct block_device *bdev,
  int blocksize, sector_t start, sector_t len);
size_t dax_copy_from_iter(struct dax_device *dax_dev, unsigned long pgoff, void *addr,
  size_t bytes, struct iov_iter *i);
size_t dax_copy_to_iter(struct dax_device *dax_dev, unsigned long pgoff, void *addr,
  size_t bytes, struct iov_iter *i);
void dax_flush(struct dax_device *dax_dev, void *addr, size_t size);

ssize_t dax_iomap_rw(struct kiocb *iocb, struct iov_iter *iter,
  const struct iomap_ops *ops);
vm_fault_t dax_iomap_fault(struct vm_fault *vmf, enum page_entry_size pe_size,
      pfn_t *pfnp, int *errp, const struct iomap_ops *ops);
vm_fault_t dax_finish_sync_fault(struct vm_fault *vmf,
  enum page_entry_size pe_size, pfn_t pfn);
int dax_delete_mapping_entry(struct address_space *mapping, unsigned long index);
int dax_invalidate_mapping_entry_sync(struct address_space *mapping,
          unsigned long index);


int __dax_zero_page_range(struct block_device *bdev,
  struct dax_device *dax_dev, sector_t sector,
  unsigned int offset, unsigned int length);
# 237 "../include/linux/dax.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool dax_mapping(struct address_space *mapping)
{
 return mapping->host && ((mapping->host)->i_flags & 8192);
}
# 12 "../include/linux/mempolicy.h" 2




# 1 "../include/linux/pagemap.h" 1
# 11 "../include/linux/pagemap.h"
# 1 "../include/linux/highmem.h" 1
# 12 "../include/linux/highmem.h"
# 1 "../arch/arm64/include/asm/cacheflush.h" 1
# 64 "../arch/arm64/include/asm/cacheflush.h"
extern void __flush_icache_range(unsigned long start, unsigned long end);
extern int invalidate_icache_range(unsigned long start, unsigned long end);
extern void __flush_dcache_area(void *addr, size_t len);
extern void __inval_dcache_area(void *addr, size_t len);
extern void __clean_dcache_area_poc(void *addr, size_t len);
extern void __clean_dcache_area_pop(void *addr, size_t len);
extern void __clean_dcache_area_pou(void *addr, size_t len);
extern long __flush_cache_user_range(unsigned long start, unsigned long end);
extern void sync_icache_aliases(void *kaddr, unsigned long len);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_icache_range(unsigned long start, unsigned long end)
{
 __flush_icache_range(start, end);
# 95 "../arch/arm64/include/asm/cacheflush.h"
 kick_all_cpus_sync();
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_mm(struct mm_struct *mm)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_page(struct vm_area_struct *vma,
        unsigned long user_addr, unsigned long pfn)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_range(struct vm_area_struct *vma,
         unsigned long start, unsigned long end)
{
}




extern void __dma_map_area(const void *, size_t, int);
extern void __dma_unmap_area(const void *, size_t, int);
extern void __dma_flush_area(const void *, size_t);






extern void copy_to_user_page(struct vm_area_struct *, struct page *,
 unsigned long, void *, const void *, unsigned long);
# 146 "../arch/arm64/include/asm/cacheflush.h"
extern void flush_dcache_page(struct page *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __flush_icache_all(void)
{
 if (cpus_have_const_cap(28))
  return;

 asm("ic	ialluis");
 asm volatile("dsb " "ish" : : : "memory");
}
# 169 "../arch/arm64/include/asm/cacheflush.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vmap(unsigned long start, unsigned long end)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_cache_vunmap(unsigned long start, unsigned long end)
{
}

int set_memory_valid(unsigned long addr, int numpages, int enable);

int set_direct_map_invalid_noflush(struct page *page);
int set_direct_map_default_noflush(struct page *page);
# 13 "../include/linux/highmem.h" 2


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_anon_page(struct vm_area_struct *vma, struct page *page, unsigned long vmaddr)
{
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_kernel_dcache_page(struct page *page)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void flush_kernel_vmap_range(void *vaddr, int size)
{
}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void invalidate_kernel_vmap_range(void *vaddr, int size)
{
}



# 1 "./arch/arm64/include/generated/asm/kmap_types.h" 1
# 1 "../include/asm-generic/kmap_types.h" 1
# 2 "./arch/arm64/include/generated/asm/kmap_types.h" 2
# 33 "../include/linux/highmem.h" 2
# 71 "../include/linux/highmem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int nr_free_highpages(void) { return 0; }

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *kmap_to_page(void *addr)
{
 return ({ u64 __idx = (((u64)addr) - ((-((((1UL))) << ((48)))))) / ((1UL) << 16); u64 __addr = (-(((-((((1UL))) << ((((48))) - 1))) - ((-((((1UL))) << ((48)))))) >> (16 - (( __builtin_constant_p(sizeof(struct page)) ? ( ((sizeof(struct page)) == 0 || (sizeof(struct page)) == 1) ? 0 : ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( __builtin_constant_p((sizeof(struct page)) - 1) ? ( ((sizeof(struct page)) - 1) < 2 ? 0 : ((sizeof(struct page)) - 1) & (1ULL << 63) ? 63 : ((sizeof(struct page)) - 1) & (1ULL << 62) ? 62 : ((sizeof(struct page)) - 1) & (1ULL << 61) ? 61 : ((sizeof(struct page)) - 1) & (1ULL << 60) ? 60 : ((sizeof(struct page)) - 1) & (1ULL << 59) ? 59 : ((sizeof(struct page)) - 1) & (1ULL << 58) ? 58 : ((sizeof(struct page)) - 1) & (1ULL << 57) ? 57 : ((sizeof(struct page)) - 1) & (1ULL << 56) ? 56 : ((sizeof(struct page)) - 1) & (1ULL << 55) ? 55 : ((sizeof(struct page)) - 1) & (1ULL << 54) ? 54 : ((sizeof(struct page)) - 1) & (1ULL << 53) ? 53 : ((sizeof(struct page)) - 1) & (1ULL << 52) ? 52 : ((sizeof(struct page)) - 1) & (1ULL << 51) ? 51 : ((sizeof(struct page)) - 1) & (1ULL << 50) ? 50 : ((sizeof(struct page)) - 1) & (1ULL << 49) ? 49 : ((sizeof(struct page)) - 1) & (1ULL << 48) ? 48 : ((sizeof(struct page)) - 1) & (1ULL << 47) ? 47 : ((sizeof(struct page)) - 1) & (1ULL << 46) ? 46 : ((sizeof(struct page)) - 1) & (1ULL << 45) ? 45 : ((sizeof(struct page)) - 1) & (1ULL << 44) ? 44 : ((sizeof(struct page)) - 1) & (1ULL << 43) ? 43 : ((sizeof(struct page)) - 1) & (1ULL << 42) ? 42 : ((sizeof(struct page)) - 1) & (1ULL << 41) ? 41 : ((sizeof(struct page)) - 1) & (1ULL << 40) ? 40 : ((sizeof(struct page)) - 1) & (1ULL << 39) ? 39 : ((sizeof(struct page)) - 1) & (1ULL << 38) ? 38 : ((sizeof(struct page)) - 1) & (1ULL << 37) ? 37 : ((sizeof(struct page)) - 1) & (1ULL << 36) ? 36 : ((sizeof(struct page)) - 1) & (1ULL << 35) ? 35 : ((sizeof(struct page)) - 1) & (1ULL << 34) ? 34 : ((sizeof(struct page)) - 1) & (1ULL << 33) ? 33 : ((sizeof(struct page)) - 1) & (1ULL << 32) ? 32 : ((sizeof(struct page)) - 1) & (1ULL << 31) ? 31 : ((sizeof(struct page)) - 1) & (1ULL << 30) ? 30 : ((sizeof(struct page)) - 1) & (1ULL << 29) ? 29 : ((sizeof(struct page)) - 1) & (1ULL << 28) ? 28 : ((sizeof(struct page)) - 1) & (1ULL << 27) ? 27 : ((sizeof(struct page)) - 1) & (1ULL << 26) ? 26 : ((sizeof(struct page)) - 1) & (1ULL << 25) ? 25 : ((sizeof(struct page)) - 1) & (1ULL << 24) ? 24 : ((sizeof(struct page)) - 1) & (1ULL << 23) ? 23 : ((sizeof(struct page)) - 1) & (1ULL << 22) ? 22 : ((sizeof(struct page)) - 1) & (1ULL << 21) ? 21 : ((sizeof(struct page)) - 1) & (1ULL << 20) ? 20 : ((sizeof(struct page)) - 1) & (1ULL << 19) ? 19 : ((sizeof(struct page)) - 1) & (1ULL << 18) ? 18 : ((sizeof(struct page)) - 1) & (1ULL << 17) ? 17 : ((sizeof(struct page)) - 1) & (1ULL << 16) ? 16 : ((sizeof(struct page)) - 1) & (1ULL << 15) ? 15 : ((sizeof(struct page)) - 1) & (1ULL << 14) ? 14 : ((sizeof(struct page)) - 1) & (1ULL << 13) ? 13 : ((sizeof(struct page)) - 1) & (1ULL << 12) ? 12 : ((sizeof(struct page)) - 1) & (1ULL << 11) ? 11 : ((sizeof(struct page)) - 1) & (1ULL << 10) ? 10 : ((sizeof(struct page)) - 1) & (1ULL << 9) ? 9 : ((sizeof(struct page)) - 1) & (1ULL << 8) ? 8 : ((sizeof(struct page)) - 1) & (1ULL << 7) ? 7 : ((sizeof(struct page)) - 1) & (1ULL << 6) ? 6 : ((sizeof(struct page)) - 1) & (1ULL << 5) ? 5 : ((sizeof(struct page)) - 1) & (1ULL << 4) ? 4 : ((sizeof(struct page)) - 1) & (1ULL << 3) ? 3 : ((sizeof(struct page)) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((sizeof(struct page)) - 1) <= 4) ? __ilog2_u32((sizeof(struct page)) - 1) : __ilog2_u64((sizeof(struct page)) - 1) ) + 1) : __order_base_2(sizeof(struct page)) )))) - 0x00200000) + (__idx * sizeof(struct page)); (struct page *)__addr; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long totalhigh_pages(void) { return 0UL; }


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap(struct page *page)
{
 do { do { } while (0); } while (0);
 return lowmem_page_address(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kunmap(struct page *page)
{
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *kmap_atomic(struct page *page)
{
 __asm__ __volatile__("" : : : "memory");
 pagefault_disable();
 return lowmem_page_address(page);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __kunmap_atomic(void *addr)
{
 pagefault_enable();
 __asm__ __volatile__("" : : : "memory");
}
# 158 "../include/linux/highmem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_user_highpage(struct page *page, unsigned long vaddr)
{
 void *addr = kmap_atomic(page);
 __cpu_clear_user_page(addr, vaddr);
 do { do { extern void __compiletime_assert_162(void) ; if (!(!(__builtin_types_compatible_p(typeof((addr)), typeof(struct page *))))) __compiletime_assert_162(); } while (0); __kunmap_atomic(addr); } while (0);
}
# 181 "../include/linux/highmem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
__alloc_zeroed_user_highpage(gfp_t movableflags,
   struct vm_area_struct *vma,
   unsigned long vaddr)
{
 struct page *page = alloc_pages_vma((((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x02u)) | movableflags, 0, vma, vaddr, numa_node_id());


 if (page)
  clear_user_highpage(page, vaddr);

 return page;
}
# 204 "../include/linux/highmem.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *
alloc_zeroed_user_highpage_movable(struct vm_area_struct *vma,
     unsigned long vaddr)
{
 return __alloc_zeroed_user_highpage((( gfp_t)0x08u), vma, vaddr);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void clear_highpage(struct page *page)
{
 void *kaddr = kmap_atomic(page);
 clear_page(kaddr);
 do { do { extern void __compiletime_assert_215(void) ; if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_215(); } while (0); __kunmap_atomic(kaddr); } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segments(struct page *page,
 unsigned start1, unsigned end1,
 unsigned start2, unsigned end2)
{
 void *kaddr = kmap_atomic(page);

 do { if (__builtin_expect(!!(end1 > ((1UL) << 16) || end2 > ((1UL) << 16)), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/highmem.h\"; .popsection; .long 14472b - 14470b; .short 224; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);

 if (end1 > start1)
  memset(kaddr + start1, 0, end1 - start1);

 if (end2 > start2)
  memset(kaddr + start2, 0, end2 - start2);

 do { do { extern void __compiletime_assert_232(void) ; if (!(!(__builtin_types_compatible_p(typeof((kaddr)), typeof(struct page *))))) __compiletime_assert_232(); } while (0); __kunmap_atomic(kaddr); } while (0);
 flush_dcache_page(page);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user_segment(struct page *page,
 unsigned start, unsigned end)
{
 zero_user_segments(page, start, end, 0, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void zero_user(struct page *page,
 unsigned start, unsigned size)
{
 zero_user_segments(page, start, start + size, 0, 0);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_user_highpage(struct page *to, struct page *from,
 unsigned long vaddr, struct vm_area_struct *vma)
{
 char *vfrom, *vto;

 vfrom = kmap_atomic(from);
 vto = kmap_atomic(to);
 __cpu_copy_user_page(vto, vfrom, vaddr);
 do { do { extern void __compiletime_assert_258(void) ; if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_258(); } while (0); __kunmap_atomic(vto); } while (0);
 do { do { extern void __compiletime_assert_259(void) ; if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_259(); } while (0); __kunmap_atomic(vfrom); } while (0);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_highpage(struct page *to, struct page *from)
{
 char *vfrom, *vto;

 vfrom = kmap_atomic(from);
 vto = kmap_atomic(to);
 copy_page(vto, vfrom);
 do { do { extern void __compiletime_assert_273(void) ; if (!(!(__builtin_types_compatible_p(typeof((vto)), typeof(struct page *))))) __compiletime_assert_273(); } while (0); __kunmap_atomic(vto); } while (0);
 do { do { extern void __compiletime_assert_274(void) ; if (!(!(__builtin_types_compatible_p(typeof((vfrom)), typeof(struct page *))))) __compiletime_assert_274(); } while (0); __kunmap_atomic(vfrom); } while (0);
}
# 12 "../include/linux/pagemap.h" 2





# 1 "../include/linux/hugetlb_inline.h" 1








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_vm_hugetlb_page(struct vm_area_struct *vma)
{
 return !!(vma->vm_flags & 0x00400000);
}
# 18 "../include/linux/pagemap.h" 2

struct pagevec;




enum mapping_flags {
 AS_EIO = 0,
 AS_ENOSPC = 1,
 AS_MM_ALL_LOCKS = 2,
 AS_UNEVICTABLE = 3,
 AS_EXITING = 4,

 AS_NO_WRITEBACK_TAGS = 5,
};
# 48 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_error(struct address_space *mapping, int error)
{
 if (__builtin_expect(!!(!error), 1))
  return;


 filemap_set_wb_err(mapping, error);


 if (error == -28)
  set_bit(AS_ENOSPC, &mapping->flags);
 else
  set_bit(AS_EIO, &mapping->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_unevictable(struct address_space *mapping)
{
 set_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_clear_unevictable(struct address_space *mapping)
{
 clear_bit(AS_UNEVICTABLE, &mapping->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_unevictable(struct address_space *mapping)
{
 if (mapping)
  return test_bit(AS_UNEVICTABLE, &mapping->flags);
 return !!mapping;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_exiting(struct address_space *mapping)
{
 set_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_exiting(struct address_space *mapping)
{
 return test_bit(AS_EXITING, &mapping->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_no_writeback_tags(struct address_space *mapping)
{
 set_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mapping_use_writeback_tags(struct address_space *mapping)
{
 return !test_bit(AS_NO_WRITEBACK_TAGS, &mapping->flags);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_mask(struct address_space * mapping)
{
 return mapping->gfp_mask;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t mapping_gfp_constraint(struct address_space *mapping,
  gfp_t gfp_mask)
{
 return mapping_gfp_mask(mapping) & gfp_mask;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mapping_set_gfp_mask(struct address_space *m, gfp_t mask)
{
 m->gfp_mask = mask;
}

void release_pages(struct page **pages, int nr);
# 167 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __page_cache_add_speculative(struct page *page, int count)
{
# 186 "../include/linux/pagemap.h"
 if (__builtin_expect(!!(!page_ref_add_unless(page, count, 0)), 0)) {





  return 0;
 }

 ((void)(sizeof(( long)(PageTail(page)))));

 return 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cache_get_speculative(struct page *page)
{
 return __page_cache_add_speculative(page, 1);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int page_cache_add_speculative(struct page *page, int count)
{
 return __page_cache_add_speculative(page, count);
}


extern struct page *__page_cache_alloc(gfp_t gfp);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *page_cache_alloc(struct address_space *x)
{
 return __page_cache_alloc(mapping_gfp_mask(x));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) gfp_t readahead_gfp_mask(struct address_space *x)
{
 return mapping_gfp_mask(x) | (( gfp_t)0x10000u) | (( gfp_t)0x2000u);
}

typedef int filler_t(void *, struct page *);

unsigned long page_cache_next_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
unsigned long page_cache_prev_miss(struct address_space *mapping,
        unsigned long index, unsigned long max_scan);
# 244 "../include/linux/pagemap.h"
struct page *pagecache_get_page(struct address_space *mapping, unsigned long offset,
  int fgp_flags, gfp_t cache_gfp_mask);
# 257 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page(struct address_space *mapping,
     unsigned long offset)
{
 return pagecache_get_page(mapping, offset, 0, 0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_get_page_flags(struct address_space *mapping,
     unsigned long offset, int fgp_flags)
{
 return pagecache_get_page(mapping, offset, fgp_flags, 0);
}
# 282 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_lock_page(struct address_space *mapping,
     unsigned long offset)
{
 return pagecache_get_page(mapping, offset, 0x00000002, 0);
}
# 307 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *find_or_create_page(struct address_space *mapping,
     unsigned long offset, gfp_t gfp_mask)
{
 return pagecache_get_page(mapping, offset,
     0x00000002|0x00000001|0x00000004,
     gfp_mask);
}
# 328 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page_nowait(struct address_space *mapping,
    unsigned long index)
{
 return pagecache_get_page(mapping, index,
   0x00000002|0x00000004|0x00000010|0x00000020,
   mapping_gfp_mask(mapping));
}

struct page *find_get_entry(struct address_space *mapping, unsigned long offset);
struct page *find_lock_entry(struct address_space *mapping, unsigned long offset);
unsigned find_get_entries(struct address_space *mapping, unsigned long start,
     unsigned int nr_entries, struct page **entries,
     unsigned long *indices);
unsigned find_get_pages_range(struct address_space *mapping, unsigned long *start,
   unsigned long end, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages(struct address_space *mapping,
   unsigned long *start, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range(mapping, start, (unsigned long)-1, nr_pages,
        pages);
}
unsigned find_get_pages_contig(struct address_space *mapping, unsigned long start,
          unsigned int nr_pages, struct page **pages);
unsigned find_get_pages_range_tag(struct address_space *mapping, unsigned long *index,
   unsigned long end, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned find_get_pages_tag(struct address_space *mapping,
   unsigned long *index, xa_mark_t tag, unsigned int nr_pages,
   struct page **pages)
{
 return find_get_pages_range_tag(mapping, index, (unsigned long)-1, tag,
     nr_pages, pages);
}

struct page *grab_cache_page_write_begin(struct address_space *mapping,
   unsigned long index, unsigned flags);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *grab_cache_page(struct address_space *mapping,
        unsigned long index)
{
 return find_or_create_page(mapping, index, mapping_gfp_mask(mapping));
}

extern struct page * read_cache_page(struct address_space *mapping,
    unsigned long index, filler_t *filler, void *data);
extern struct page * read_cache_page_gfp(struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
extern int read_cache_pages(struct address_space *mapping,
  struct list_head *pages, filler_t *filler, void *data);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *read_mapping_page(struct address_space *mapping,
    unsigned long index, void *data)
{
 return read_cache_page(mapping, index, ((void *)0), data);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_index(struct page *page)
{
 unsigned long pgoff;

 if (__builtin_expect(!!(!PageTransTail(page)), 1))
  return page->index;





 pgoff = compound_head(page)->index;
 pgoff += page - compound_head(page);
 return pgoff;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long page_to_pgoff(struct page *page)
{
 if (__builtin_expect(!!(PageHeadHuge(page)), 0))
  return page->index << compound_order(page);

 return page_to_index(page);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_offset(struct page *page)
{
 return ((loff_t)page->index) << 16;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) loff_t page_file_offset(struct page *page)
{
 return ((loff_t)page_index(page)) << 16;
}

extern unsigned long linear_hugepage_index(struct vm_area_struct *vma,
         unsigned long address);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long linear_page_index(struct vm_area_struct *vma,
     unsigned long address)
{
 unsigned long pgoff;
 if (__builtin_expect(!!(is_vm_hugetlb_page(vma)), 0))
  return linear_hugepage_index(vma, address);
 pgoff = (address - vma->vm_start) >> 16;
 pgoff += vma->vm_pgoff;
 return pgoff;
}

extern void __lock_page(struct page *page);
extern int __lock_page_killable(struct page *page);
extern int __lock_page_or_retry(struct page *page, struct mm_struct *mm,
    unsigned int flags);
extern void unlock_page(struct page *page);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int trylock_page(struct page *page)
{
 page = compound_head(page);
 return (__builtin_expect(!!(!test_and_set_bit_lock(PG_locked, &page->flags)), 1));
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void lock_page(struct page *page)
{
 do { do { } while (0); } while (0);
 if (!trylock_page(page))
  __lock_page(page);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_page_killable(struct page *page)
{
 do { do { } while (0); } while (0);
 if (!trylock_page(page))
  return __lock_page_killable(page);
 return 0;
}
# 493 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int lock_page_or_retry(struct page *page, struct mm_struct *mm,
         unsigned int flags)
{
 do { do { } while (0); } while (0);
 return trylock_page(page) || __lock_page_or_retry(page, mm, flags);
}





extern void wait_on_page_bit(struct page *page, int bit_nr);
extern int wait_on_page_bit_killable(struct page *page, int bit_nr);
# 514 "../include/linux/pagemap.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void wait_on_page_locked(struct page *page)
{
 if (PageLocked(page))
  wait_on_page_bit(compound_head(page), PG_locked);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int wait_on_page_locked_killable(struct page *page)
{
 if (!PageLocked(page))
  return 0;
 return wait_on_page_bit_killable(compound_head(page), PG_locked);
}

extern void put_and_wait_on_page_locked(struct page *page);

void wait_on_page_writeback(struct page *page);
extern void end_page_writeback(struct page *page);
void wait_for_stable_page(struct page *page);

void page_endio(struct page *page, bool is_write, int err);




extern void add_page_wait_queue(struct page *page, wait_queue_entry_t *waiter);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fault_in_pages_writeable(char *uaddr, int size)
{
 char *end = uaddr + size - 1;

 if (__builtin_expect(!!(size == 0), 0))
  return 0;

 if (__builtin_expect(!!(uaddr > end), 0))
  return -14;




 do {
  if (__builtin_expect(!!(({ int __pu_err = 0; do { __typeof__(*((uaddr))) *__p = ((uaddr)); might_fault(); if (__range_ok(__p, sizeof(*__p))) { __p = (__typeof__(__p))__uaccess_mask_ptr(__p); do { __typeof__(*(__p)) __pu_val = (((0))); (void)0; uaccess_enable_not_uao(); switch (sizeof(*(__p))) { case 1: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "strb" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttrb" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; case 2: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "strh" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttrh" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; case 4: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "str" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttr" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; case 8: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "str" "     " "%x" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttr" " " "%x" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; default: do { extern void __compiletime_assert_557(void) ; if (!(!(1))) __compiletime_assert_557(); } while (0); } uaccess_disable_not_uao(); } while (0); } else { (__pu_err) = -14; } } while (0); __pu_err; }) != 0), 0))
   return -14;
  uaddr += ((1UL) << 16);
 } while (uaddr <= end);


 if (((unsigned long)uaddr & (~(((1UL) << 16)-1))) ==
   ((unsigned long)end & (~(((1UL) << 16)-1))))
  return ({ int __pu_err = 0; do { __typeof__(*((end))) *__p = ((end)); might_fault(); if (__range_ok(__p, sizeof(*__p))) { __p = (__typeof__(__p))__uaccess_mask_ptr(__p); do { __typeof__(*(__p)) __pu_val = (((0))); (void)0; uaccess_enable_not_uao(); switch (sizeof(*(__p))) { case 1: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "strb" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttrb" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; case 2: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "strh" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttrh" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; case 4: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "str" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttr" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; case 8: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "str" "     " "%x" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "sttr" " " "%x" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup,\"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__pu_err))) : "r" (__pu_val), "r" ((__p)), "i" (-14)); break; default: do { extern void __compiletime_assert_565(void) ; if (!(!(1))) __compiletime_assert_565(); } while (0); } uaccess_disable_not_uao(); } while (0); } else { (__pu_err) = -14; } } while (0); __pu_err; });

 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int fault_in_pages_readable(const char *uaddr, int size)
{
 volatile char c;
 const char *end = uaddr + size - 1;

 if (__builtin_expect(!!(size == 0), 0))
  return 0;

 if (__builtin_expect(!!(uaddr > end), 0))
  return -14;

 do {
  if (__builtin_expect(!!(({ int __gu_err = 0; do { __typeof__(*((uaddr))) *__p = ((uaddr)); might_fault(); if (__range_ok(__p, sizeof(*__p))) { __p = (__typeof__(__p))__uaccess_mask_ptr(__p); do { unsigned long __gu_val; (void)0; uaccess_enable_not_uao(); switch (sizeof(*(__p))) { case 1: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldrb" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtrb" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; case 2: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldrh" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtrh" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; case 4: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldr" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtr" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; case 8: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldr" "     " "%x" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtr" " " "%x" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; default: do { extern void __compiletime_assert_582(void) ; if (!(!(1))) __compiletime_assert_582(); } while (0); } uaccess_disable_not_uao(); (((c))) = ( __typeof__(*(__p)))__gu_val; } while (0); } else { ((c)) = 0; (__gu_err) = -14; } } while (0); __gu_err; }) != 0), 0))
   return -14;
  uaddr += ((1UL) << 16);
 } while (uaddr <= end);


 if (((unsigned long)uaddr & (~(((1UL) << 16)-1))) ==
   ((unsigned long)end & (~(((1UL) << 16)-1)))) {
  return ({ int __gu_err = 0; do { __typeof__(*((end))) *__p = ((end)); might_fault(); if (__range_ok(__p, sizeof(*__p))) { __p = (__typeof__(__p))__uaccess_mask_ptr(__p); do { unsigned long __gu_val; (void)0; uaccess_enable_not_uao(); switch (sizeof(*(__p))) { case 1: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldrb" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtrb" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; case 2: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldrh" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtrh" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; case 4: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldr" "     " "%w" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtr" " " "%w" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; case 8: asm volatile( "1:"".if ""1"" == 1\n" "661:\n\t" "ldr" "     " "%x" "1, [%2]\n" "\n" "662:\n" ".pushsection .altinstructions,\"a\"\n" " .word 661b - .\n" " .if " "0" " == 0\n" " .word 663f - .\n" " .else\n" " .word " "0" "- .\n" " .endif\n" " .hword " "9" "\n" " .byte 662b-661b\n" " .byte 664f-663f\n" ".popsection\n" " .if " "0" " == 0\n" ".pushsection .altinstr_replacement, \"a\"\n" "663:\n\t" "ldtr" " " "%x" "1, [%2]\n" "\n" "664:\n\t" ".popsection\n\t" ".org	. - (664b-663b) + (662b-661b)\n\t" ".org	. - (662b-661b) + (664b-663b)\n" ".else\n\t" "663:\n\t" "664:\n\t" ".endif\n" ".endif\n" "2:\n" "	.section .fixup, \"ax\"\n" "	.align	2\n" "3:	mov	%w0, %3\n" "	mov	%1, #0\n" "	b	2b\n" "	.previous\n" "	.pushsection	__ex_table, \"a\"\n" "	.align		3\n" "	.long		(" "1b" " - .), (" "3b" " - .)\n" "	.popsection\n" : "+r" (((__gu_err))), "=&r" (__gu_val) : "r" ((__p)), "i" (-14)); break; default: do { extern void __compiletime_assert_590(void) ; if (!(!(1))) __compiletime_assert_590(); } while (0); } uaccess_disable_not_uao(); (((c))) = ( __typeof__(*(__p)))__gu_val; } while (0); } else { ((c)) = 0; (__gu_err) = -14; } } while (0); __gu_err; });
 }

 (void)c;
 return 0;
}

int add_to_page_cache_locked(struct page *page, struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
int add_to_page_cache_lru(struct page *page, struct address_space *mapping,
    unsigned long index, gfp_t gfp_mask);
extern void delete_from_page_cache(struct page *page);
extern void __delete_from_page_cache(struct page *page, void *shadow);
int replace_page_cache_page(struct page *old, struct page *new, gfp_t gfp_mask);
void delete_from_page_cache_batch(struct address_space *mapping,
      struct pagevec *pvec);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int add_to_page_cache(struct page *page,
  struct address_space *mapping, unsigned long offset, gfp_t gfp_mask)
{
 int error;

 __SetPageLocked(page);
 error = add_to_page_cache_locked(page, mapping, offset, gfp_mask);
 if (__builtin_expect(!!(error), 0))
  __ClearPageLocked(page);
 return error;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long dir_pages(struct inode *inode)
{
 return (unsigned long)(inode->i_size + ((1UL) << 16) - 1) >>
          16;
}
# 17 "../include/linux/mempolicy.h" 2
# 1 "../include/uapi/linux/mempolicy.h" 1
# 19 "../include/uapi/linux/mempolicy.h"
enum {
 MPOL_DEFAULT,
 MPOL_PREFERRED,
 MPOL_BIND,
 MPOL_INTERLEAVE,
 MPOL_LOCAL,
 MPOL_MAX,
};
# 18 "../include/linux/mempolicy.h" 2

struct mm_struct;
# 45 "../include/linux/mempolicy.h"
struct mempolicy {
 atomic_t refcnt;
 unsigned short mode;
 unsigned short flags;
 union {
  short preferred_node;
  nodemask_t nodes;

 } v;
 union {
  nodemask_t cpuset_mems_allowed;
  nodemask_t user_nodemask;
 } w;
};






extern void __mpol_put(struct mempolicy *pol);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mpol_put(struct mempolicy *pol)
{
 if (pol)
  __mpol_put(pol);
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mpol_needs_cond_ref(struct mempolicy *pol)
{
 return (pol && (pol->flags & (1 << 0)));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mpol_cond_put(struct mempolicy *pol)
{
 if (mpol_needs_cond_ref(pol))
  __mpol_put(pol);
}

extern struct mempolicy *__mpol_dup(struct mempolicy *pol);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mempolicy *mpol_dup(struct mempolicy *pol)
{
 if (pol)
  pol = __mpol_dup(pol);
 return pol;
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mpol_get(struct mempolicy *pol)
{
 if (pol)
  atomic_inc(&pol->refcnt);
}

extern bool __mpol_equal(struct mempolicy *a, struct mempolicy *b);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool mpol_equal(struct mempolicy *a, struct mempolicy *b)
{
 if (a == b)
  return true;
 return __mpol_equal(a, b);
}
# 119 "../include/linux/mempolicy.h"
struct sp_node {
 struct rb_node nd;
 unsigned long start, end;
 struct mempolicy *policy;
};

struct shared_policy {
 struct rb_root root;
 rwlock_t lock;
};

int vma_dup_policy(struct vm_area_struct *src, struct vm_area_struct *dst);
void mpol_shared_policy_init(struct shared_policy *sp, struct mempolicy *mpol);
int mpol_set_shared_policy(struct shared_policy *info,
    struct vm_area_struct *vma,
    struct mempolicy *new);
void mpol_free_shared_policy(struct shared_policy *p);
struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *sp,
         unsigned long idx);

struct mempolicy *get_task_policy(struct task_struct *p);
struct mempolicy *__get_vma_policy(struct vm_area_struct *vma,
  unsigned long addr);
struct mempolicy *get_vma_policy(struct vm_area_struct *vma,
      unsigned long addr);
bool vma_policy_mof(struct vm_area_struct *vma);

extern void numa_default_policy(void);
extern void numa_policy_init(void);
extern void mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new);
extern void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new);

extern int huge_node(struct vm_area_struct *vma,
    unsigned long addr, gfp_t gfp_flags,
    struct mempolicy **mpol, nodemask_t **nodemask);
extern bool init_nodemask_of_mempolicy(nodemask_t *mask);
extern bool mempolicy_nodemask_intersects(struct task_struct *tsk,
    const nodemask_t *mask);
extern unsigned int mempolicy_slab_node(void);

extern enum zone_type policy_zone;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_highest_zone(enum zone_type k)
{
 if (k > policy_zone && k != ZONE_MOVABLE)
  policy_zone = k;
}

int do_migrate_pages(struct mm_struct *mm, const nodemask_t *from,
       const nodemask_t *to, int flags);



extern int mpol_parse_str(char *str, struct mempolicy **mpol);


extern void mpol_to_str(char *buffer, int maxlen, struct mempolicy *pol);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool vma_migratable(struct vm_area_struct *vma)
{
 if (vma->vm_flags & (0x00004000 | 0x00000400))
  return false;





 if (vma_is_dax(vma))
  return false;
# 200 "../include/linux/mempolicy.h"
 if (vma->vm_file &&
  gfp_zone(mapping_gfp_mask(vma->vm_file->f_mapping))
        < policy_zone)
   return false;
 return true;
}

extern int mpol_misplaced(struct page *, struct vm_area_struct *, unsigned long);
extern void mpol_put_task_policy(struct task_struct *);
# 7 "../include/linux/migrate.h" 2

# 1 "../include/linux/hugetlb.h" 1








# 1 "../include/linux/cgroup.h" 1
# 16 "../include/linux/cgroup.h"
# 1 "../include/uapi/linux/cgroupstats.h" 1
# 20 "../include/uapi/linux/cgroupstats.h"
# 1 "../include/uapi/linux/taskstats.h" 1
# 41 "../include/uapi/linux/taskstats.h"
struct taskstats {





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
# 72 "../include/uapi/linux/taskstats.h"
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;
 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
# 131 "../include/uapi/linux/taskstats.h"
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;


 __u64 thrashing_count;
 __u64 thrashing_delay_total;
};
# 180 "../include/uapi/linux/taskstats.h"
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
# 21 "../include/uapi/linux/cgroupstats.h" 2
# 32 "../include/uapi/linux/cgroupstats.h"
struct cgroupstats {
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
# 17 "../include/linux/cgroup.h" 2







# 1 "../include/linux/user_namespace.h" 1
# 17 "../include/linux/user_namespace.h"
struct uid_gid_extent {
 u32 first;
 u32 lower_first;
 u32 count;
};

struct uid_gid_map {
 u32 nr_extents;
 union {
  struct uid_gid_extent extent[5];
  struct {
   struct uid_gid_extent *forward;
   struct uid_gid_extent *reverse;
  };
 };
};





struct ucounts;

enum ucount_type {
 UCOUNT_USER_NAMESPACES,
 UCOUNT_PID_NAMESPACES,
 UCOUNT_UTS_NAMESPACES,
 UCOUNT_IPC_NAMESPACES,
 UCOUNT_NET_NAMESPACES,
 UCOUNT_MNT_NAMESPACES,
 UCOUNT_CGROUP_NAMESPACES,

 UCOUNT_INOTIFY_INSTANCES,
 UCOUNT_INOTIFY_WATCHES,

 UCOUNT_COUNTS,
};

struct user_namespace {
 struct uid_gid_map uid_map;
 struct uid_gid_map gid_map;
 struct uid_gid_map projid_map;
 atomic_t count;
 struct user_namespace *parent;
 int level;
 kuid_t owner;
 kgid_t group;
 struct ns_common ns;
 unsigned long flags;







 struct list_head keyring_name_list;
 struct key *user_keyring_register;
 struct rw_semaphore keyring_sem;






 struct work_struct work;

 struct ctl_table_set set;
 struct ctl_table_header *sysctls;

 struct ucounts *ucounts;
 int ucount_max[UCOUNT_COUNTS];
} ;

struct ucounts {
 struct hlist_node node;
 struct user_namespace *ns;
 kuid_t uid;
 int count;
 atomic_t ucount[UCOUNT_COUNTS];
};

extern struct user_namespace init_user_ns;

bool setup_userns_sysctls(struct user_namespace *ns);
void retire_userns_sysctls(struct user_namespace *ns);
struct ucounts *inc_ucount(struct user_namespace *ns, kuid_t uid, enum ucount_type type);
void dec_ucount(struct ucounts *ucounts, enum ucount_type type);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct user_namespace *get_user_ns(struct user_namespace *ns)
{
 if (ns)
  atomic_inc(&ns->count);
 return ns;
}

extern int create_user_ns(struct cred *new);
extern int unshare_userns(unsigned long unshare_flags, struct cred **new_cred);
extern void __put_user_ns(struct user_namespace *ns);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_user_ns(struct user_namespace *ns)
{
 if (ns && atomic_dec_and_test(&ns->count))
  __put_user_ns(ns);
}

struct seq_operations;
extern const struct seq_operations proc_uid_seq_operations;
extern const struct seq_operations proc_gid_seq_operations;
extern const struct seq_operations proc_projid_seq_operations;
extern ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
extern int proc_setgroups_show(struct seq_file *m, void *v);
extern bool userns_may_setgroups(const struct user_namespace *ns);
extern bool in_userns(const struct user_namespace *ancestor,
         const struct user_namespace *child);
extern bool current_in_userns(const struct user_namespace *target_ns);
struct ns_common *ns_get_owner(struct ns_common *ns);
# 25 "../include/linux/cgroup.h" 2

# 1 "../include/linux/kernel_stat.h" 1
# 20 "../include/linux/kernel_stat.h"
enum cpu_usage_stat {
 CPUTIME_USER,
 CPUTIME_NICE,
 CPUTIME_SYSTEM,
 CPUTIME_SOFTIRQ,
 CPUTIME_IRQ,
 CPUTIME_IDLE,
 CPUTIME_IOWAIT,
 CPUTIME_STEAL,
 CPUTIME_GUEST,
 CPUTIME_GUEST_NICE,
 NR_STATS,
};

struct kernel_cpustat {
 u64 cpustat[NR_STATS];
};

struct kernel_stat {
 unsigned long irqs_sum;
 unsigned int softirqs[NR_SOFTIRQS];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_stat) kstat;
extern __attribute__((section(".data..percpu" ""))) __typeof__(struct kernel_cpustat) kernel_cpustat;







extern unsigned long long nr_context_switches(void);

extern unsigned int kstat_irqs_cpu(unsigned int irq, int cpu);
extern void kstat_incr_irq_this_cpu(unsigned int irq);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void kstat_incr_softirqs_this_cpu(unsigned int irq)
{
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(kstat.softirqs[irq])) { case 1: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 2: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 4: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; case 8: do { *({ do { const void *__vpp_verify = (typeof((&(kstat.softirqs[irq])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq]))); (typeof((typeof(*(&(kstat.softirqs[irq]))) *)(&(kstat.softirqs[irq])))) (__ptr + ((__my_cpu_offset()))); }); }) += 1; } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_softirqs_cpu(unsigned int irq, int cpu)
{
       return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).softirqs[irq];
}




extern unsigned int kstat_irqs(unsigned int irq);
extern unsigned int kstat_irqs_usr(unsigned int irq);




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int kstat_cpu_irqs_sum(unsigned int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(kstat)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*((&(kstat)))) *)((&(kstat)))); (typeof((typeof(*((&(kstat)))) *)((&(kstat))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })).irqs_sum;
}

extern void account_user_time(struct task_struct *, u64);
extern void account_guest_time(struct task_struct *, u64);
extern void account_system_time(struct task_struct *, int, u64);
extern void account_system_index_time(struct task_struct *, u64,
          enum cpu_usage_stat);
extern void account_steal_time(u64);
extern void account_idle_time(u64);







extern void account_process_tick(struct task_struct *, int user);


extern void account_idle_ticks(unsigned long ticks);
# 27 "../include/linux/cgroup.h" 2

# 1 "../include/linux/cgroup-defs.h" 1
# 20 "../include/linux/cgroup-defs.h"
# 1 "../include/linux/u64_stats_sync.h" 1
# 65 "../include/linux/u64_stats_sync.h"
struct u64_stats_sync {



};


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_init(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
u64_stats_update_begin_irqsave(struct u64_stats_sync *syncp)
{
 unsigned long flags = 0;





 return flags;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
u64_stats_update_end_irqrestore(struct u64_stats_sync *syncp,
    unsigned long flags)
{




}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int __u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return 0;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool __u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return false;

}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry(const struct u64_stats_sync *syncp,
      unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int u64_stats_fetch_begin_irq(const struct u64_stats_sync *syncp)
{



 return __u64_stats_fetch_begin(syncp);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool u64_stats_fetch_retry_irq(const struct u64_stats_sync *syncp,
          unsigned int start)
{



 return __u64_stats_fetch_retry(syncp, start);
}
# 21 "../include/linux/cgroup-defs.h" 2

# 1 "../include/linux/bpf-cgroup.h" 1




# 1 "../include/linux/bpf.h" 1






# 1 "../include/uapi/linux/bpf.h" 1
# 12 "../include/uapi/linux/bpf.h"
# 1 "../include/uapi/linux/bpf_common.h" 1
# 13 "../include/uapi/linux/bpf.h" 2
# 47 "../include/uapi/linux/bpf.h"
enum {
 BPF_REG_0 = 0,
 BPF_REG_1,
 BPF_REG_2,
 BPF_REG_3,
 BPF_REG_4,
 BPF_REG_5,
 BPF_REG_6,
 BPF_REG_7,
 BPF_REG_8,
 BPF_REG_9,
 BPF_REG_10,
 __MAX_BPF_REG,
};




struct bpf_insn {
 __u8 code;
 __u8 dst_reg:4;
 __u8 src_reg:4;
 __s16 off;
 __s32 imm;
};


struct bpf_lpm_trie_key {
 __u32 prefixlen;
 __u8 data[0];
};

struct bpf_cgroup_storage_key {
 __u64 cgroup_inode_id;
 __u32 attach_type;
};


enum bpf_cmd {
 BPF_MAP_CREATE,
 BPF_MAP_LOOKUP_ELEM,
 BPF_MAP_UPDATE_ELEM,
 BPF_MAP_DELETE_ELEM,
 BPF_MAP_GET_NEXT_KEY,
 BPF_PROG_LOAD,
 BPF_OBJ_PIN,
 BPF_OBJ_GET,
 BPF_PROG_ATTACH,
 BPF_PROG_DETACH,
 BPF_PROG_TEST_RUN,
 BPF_PROG_GET_NEXT_ID,
 BPF_MAP_GET_NEXT_ID,
 BPF_PROG_GET_FD_BY_ID,
 BPF_MAP_GET_FD_BY_ID,
 BPF_OBJ_GET_INFO_BY_FD,
 BPF_PROG_QUERY,
 BPF_RAW_TRACEPOINT_OPEN,
 BPF_BTF_LOAD,
 BPF_BTF_GET_FD_BY_ID,
 BPF_TASK_FD_QUERY,
 BPF_MAP_LOOKUP_AND_DELETE_ELEM,
 BPF_MAP_FREEZE,
 BPF_BTF_GET_NEXT_ID,
};

enum bpf_map_type {
 BPF_MAP_TYPE_UNSPEC,
 BPF_MAP_TYPE_HASH,
 BPF_MAP_TYPE_ARRAY,
 BPF_MAP_TYPE_PROG_ARRAY,
 BPF_MAP_TYPE_PERF_EVENT_ARRAY,
 BPF_MAP_TYPE_PERCPU_HASH,
 BPF_MAP_TYPE_PERCPU_ARRAY,
 BPF_MAP_TYPE_STACK_TRACE,
 BPF_MAP_TYPE_CGROUP_ARRAY,
 BPF_MAP_TYPE_LRU_HASH,
 BPF_MAP_TYPE_LRU_PERCPU_HASH,
 BPF_MAP_TYPE_LPM_TRIE,
 BPF_MAP_TYPE_ARRAY_OF_MAPS,
 BPF_MAP_TYPE_HASH_OF_MAPS,
 BPF_MAP_TYPE_DEVMAP,
 BPF_MAP_TYPE_SOCKMAP,
 BPF_MAP_TYPE_CPUMAP,
 BPF_MAP_TYPE_XSKMAP,
 BPF_MAP_TYPE_SOCKHASH,
 BPF_MAP_TYPE_CGROUP_STORAGE,
 BPF_MAP_TYPE_REUSEPORT_SOCKARRAY,
 BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE,
 BPF_MAP_TYPE_QUEUE,
 BPF_MAP_TYPE_STACK,
 BPF_MAP_TYPE_SK_STORAGE,
 BPF_MAP_TYPE_DEVMAP_HASH,
};
# 149 "../include/uapi/linux/bpf.h"
enum bpf_prog_type {
 BPF_PROG_TYPE_UNSPEC,
 BPF_PROG_TYPE_SOCKET_FILTER,
 BPF_PROG_TYPE_KPROBE,
 BPF_PROG_TYPE_SCHED_CLS,
 BPF_PROG_TYPE_SCHED_ACT,
 BPF_PROG_TYPE_TRACEPOINT,
 BPF_PROG_TYPE_XDP,
 BPF_PROG_TYPE_PERF_EVENT,
 BPF_PROG_TYPE_CGROUP_SKB,
 BPF_PROG_TYPE_CGROUP_SOCK,
 BPF_PROG_TYPE_LWT_IN,
 BPF_PROG_TYPE_LWT_OUT,
 BPF_PROG_TYPE_LWT_XMIT,
 BPF_PROG_TYPE_SOCK_OPS,
 BPF_PROG_TYPE_SK_SKB,
 BPF_PROG_TYPE_CGROUP_DEVICE,
 BPF_PROG_TYPE_SK_MSG,
 BPF_PROG_TYPE_RAW_TRACEPOINT,
 BPF_PROG_TYPE_CGROUP_SOCK_ADDR,
 BPF_PROG_TYPE_LWT_SEG6LOCAL,
 BPF_PROG_TYPE_LIRC_MODE2,
 BPF_PROG_TYPE_SK_REUSEPORT,
 BPF_PROG_TYPE_FLOW_DISSECTOR,
 BPF_PROG_TYPE_CGROUP_SYSCTL,
 BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE,
 BPF_PROG_TYPE_CGROUP_SOCKOPT,
};

enum bpf_attach_type {
 BPF_CGROUP_INET_INGRESS,
 BPF_CGROUP_INET_EGRESS,
 BPF_CGROUP_INET_SOCK_CREATE,
 BPF_CGROUP_SOCK_OPS,
 BPF_SK_SKB_STREAM_PARSER,
 BPF_SK_SKB_STREAM_VERDICT,
 BPF_CGROUP_DEVICE,
 BPF_SK_MSG_VERDICT,
 BPF_CGROUP_INET4_BIND,
 BPF_CGROUP_INET6_BIND,
 BPF_CGROUP_INET4_CONNECT,
 BPF_CGROUP_INET6_CONNECT,
 BPF_CGROUP_INET4_POST_BIND,
 BPF_CGROUP_INET6_POST_BIND,
 BPF_CGROUP_UDP4_SENDMSG,
 BPF_CGROUP_UDP6_SENDMSG,
 BPF_LIRC_MODE2,
 BPF_FLOW_DISSECTOR,
 BPF_CGROUP_SYSCTL,
 BPF_CGROUP_UDP4_RECVMSG,
 BPF_CGROUP_UDP6_RECVMSG,
 BPF_CGROUP_GETSOCKOPT,
 BPF_CGROUP_SETSOCKOPT,
 __MAX_BPF_ATTACH_TYPE
};
# 350 "../include/uapi/linux/bpf.h"
enum bpf_stack_build_id_status {

 BPF_STACK_BUILD_ID_EMPTY = 0,

 BPF_STACK_BUILD_ID_VALID = 1,

 BPF_STACK_BUILD_ID_IP = 2,
};


struct bpf_stack_build_id {
 __s32 status;
 unsigned char build_id[20];
 union {
  __u64 offset;
  __u64 ip;
 };
};

union bpf_attr {
 struct {
  __u32 map_type;
  __u32 key_size;
  __u32 value_size;
  __u32 max_entries;
  __u32 map_flags;


  __u32 inner_map_fd;
  __u32 numa_node;


  char map_name[16U];
  __u32 map_ifindex;
  __u32 btf_fd;
  __u32 btf_key_type_id;
  __u32 btf_value_type_id;
 };

 struct {
  __u32 map_fd;
  __u64 __attribute__((aligned(8))) key;
  union {
   __u64 __attribute__((aligned(8))) value;
   __u64 __attribute__((aligned(8))) next_key;
  };
  __u64 flags;
 };

 struct {
  __u32 prog_type;
  __u32 insn_cnt;
  __u64 __attribute__((aligned(8))) insns;
  __u64 __attribute__((aligned(8))) license;
  __u32 log_level;
  __u32 log_size;
  __u64 __attribute__((aligned(8))) log_buf;
  __u32 kern_version;
  __u32 prog_flags;
  char prog_name[16U];
  __u32 prog_ifindex;




  __u32 expected_attach_type;
  __u32 prog_btf_fd;
  __u32 func_info_rec_size;
  __u64 __attribute__((aligned(8))) func_info;
  __u32 func_info_cnt;
  __u32 line_info_rec_size;
  __u64 __attribute__((aligned(8))) line_info;
  __u32 line_info_cnt;
 };

 struct {
  __u64 __attribute__((aligned(8))) pathname;
  __u32 bpf_fd;
  __u32 file_flags;
 };

 struct {
  __u32 target_fd;
  __u32 attach_bpf_fd;
  __u32 attach_type;
  __u32 attach_flags;
 };

 struct {
  __u32 prog_fd;
  __u32 retval;
  __u32 data_size_in;
  __u32 data_size_out;



  __u64 __attribute__((aligned(8))) data_in;
  __u64 __attribute__((aligned(8))) data_out;
  __u32 repeat;
  __u32 duration;
  __u32 ctx_size_in;
  __u32 ctx_size_out;



  __u64 __attribute__((aligned(8))) ctx_in;
  __u64 __attribute__((aligned(8))) ctx_out;
 } test;

 struct {
  union {
   __u32 start_id;
   __u32 prog_id;
   __u32 map_id;
   __u32 btf_id;
  };
  __u32 next_id;
  __u32 open_flags;
 };

 struct {
  __u32 bpf_fd;
  __u32 info_len;
  __u64 __attribute__((aligned(8))) info;
 } info;

 struct {
  __u32 target_fd;
  __u32 attach_type;
  __u32 query_flags;
  __u32 attach_flags;
  __u64 __attribute__((aligned(8))) prog_ids;
  __u32 prog_cnt;
 } query;

 struct {
  __u64 name;
  __u32 prog_fd;
 } raw_tracepoint;

 struct {
  __u64 __attribute__((aligned(8))) btf;
  __u64 __attribute__((aligned(8))) btf_log_buf;
  __u32 btf_size;
  __u32 btf_log_size;
  __u32 btf_log_level;
 };

 struct {
  __u32 pid;
  __u32 fd;
  __u32 flags;
  __u32 buf_len;
  __u64 __attribute__((aligned(8))) buf;




  __u32 prog_id;
  __u32 fd_type;
  __u64 probe_offset;
  __u64 probe_addr;
 } task_fd_query;
} __attribute__((aligned(8)));
# 2871 "../include/uapi/linux/bpf.h"
enum bpf_func_id {
 BPF_FUNC_unspec, BPF_FUNC_map_lookup_elem, BPF_FUNC_map_update_elem, BPF_FUNC_map_delete_elem, BPF_FUNC_probe_read, BPF_FUNC_ktime_get_ns, BPF_FUNC_trace_printk, BPF_FUNC_get_prandom_u32, BPF_FUNC_get_smp_processor_id, BPF_FUNC_skb_store_bytes, BPF_FUNC_l3_csum_replace, BPF_FUNC_l4_csum_replace, BPF_FUNC_tail_call, BPF_FUNC_clone_redirect, BPF_FUNC_get_current_pid_tgid, BPF_FUNC_get_current_uid_gid, BPF_FUNC_get_current_comm, BPF_FUNC_get_cgroup_classid, BPF_FUNC_skb_vlan_push, BPF_FUNC_skb_vlan_pop, BPF_FUNC_skb_get_tunnel_key, BPF_FUNC_skb_set_tunnel_key, BPF_FUNC_perf_event_read, BPF_FUNC_redirect, BPF_FUNC_get_route_realm, BPF_FUNC_perf_event_output, BPF_FUNC_skb_load_bytes, BPF_FUNC_get_stackid, BPF_FUNC_csum_diff, BPF_FUNC_skb_get_tunnel_opt, BPF_FUNC_skb_set_tunnel_opt, BPF_FUNC_skb_change_proto, BPF_FUNC_skb_change_type, BPF_FUNC_skb_under_cgroup, BPF_FUNC_get_hash_recalc, BPF_FUNC_get_current_task, BPF_FUNC_probe_write_user, BPF_FUNC_current_task_under_cgroup, BPF_FUNC_skb_change_tail, BPF_FUNC_skb_pull_data, BPF_FUNC_csum_update, BPF_FUNC_set_hash_invalid, BPF_FUNC_get_numa_node_id, BPF_FUNC_skb_change_head, BPF_FUNC_xdp_adjust_head, BPF_FUNC_probe_read_str, BPF_FUNC_get_socket_cookie, BPF_FUNC_get_socket_uid, BPF_FUNC_set_hash, BPF_FUNC_setsockopt, BPF_FUNC_skb_adjust_room, BPF_FUNC_redirect_map, BPF_FUNC_sk_redirect_map, BPF_FUNC_sock_map_update, BPF_FUNC_xdp_adjust_meta, BPF_FUNC_perf_event_read_value, BPF_FUNC_perf_prog_read_value, BPF_FUNC_getsockopt, BPF_FUNC_override_return, BPF_FUNC_sock_ops_cb_flags_set, BPF_FUNC_msg_redirect_map, BPF_FUNC_msg_apply_bytes, BPF_FUNC_msg_cork_bytes, BPF_FUNC_msg_pull_data, BPF_FUNC_bind, BPF_FUNC_xdp_adjust_tail, BPF_FUNC_skb_get_xfrm_state, BPF_FUNC_get_stack, BPF_FUNC_skb_load_bytes_relative, BPF_FUNC_fib_lookup, BPF_FUNC_sock_hash_update, BPF_FUNC_msg_redirect_hash, BPF_FUNC_sk_redirect_hash, BPF_FUNC_lwt_push_encap, BPF_FUNC_lwt_seg6_store_bytes, BPF_FUNC_lwt_seg6_adjust_srh, BPF_FUNC_lwt_seg6_action, BPF_FUNC_rc_repeat, BPF_FUNC_rc_keydown, BPF_FUNC_skb_cgroup_id, BPF_FUNC_get_current_cgroup_id, BPF_FUNC_get_local_storage, BPF_FUNC_sk_select_reuseport, BPF_FUNC_skb_ancestor_cgroup_id, BPF_FUNC_sk_lookup_tcp, BPF_FUNC_sk_lookup_udp, BPF_FUNC_sk_release, BPF_FUNC_map_push_elem, BPF_FUNC_map_pop_elem, BPF_FUNC_map_peek_elem, BPF_FUNC_msg_push_data, BPF_FUNC_msg_pop_data, BPF_FUNC_rc_pointer_rel, BPF_FUNC_spin_lock, BPF_FUNC_spin_unlock, BPF_FUNC_sk_fullsock, BPF_FUNC_tcp_sock, BPF_FUNC_skb_ecn_set_ce, BPF_FUNC_get_listener_sock, BPF_FUNC_skc_lookup_tcp, BPF_FUNC_tcp_check_syncookie, BPF_FUNC_sysctl_get_name, BPF_FUNC_sysctl_get_current_value, BPF_FUNC_sysctl_get_new_value, BPF_FUNC_sysctl_set_new_value, BPF_FUNC_strtol, BPF_FUNC_strtoul, BPF_FUNC_sk_storage_get, BPF_FUNC_sk_storage_delete, BPF_FUNC_send_signal, BPF_FUNC_tcp_gen_syncookie,
 __BPF_FUNC_MAX_ID,
};
# 2945 "../include/uapi/linux/bpf.h"
enum bpf_adj_room_mode {
 BPF_ADJ_ROOM_NET,
 BPF_ADJ_ROOM_MAC,
};


enum bpf_hdr_start_off {
 BPF_HDR_START_MAC,
 BPF_HDR_START_NET,
};


enum bpf_lwt_encap_mode {
 BPF_LWT_ENCAP_SEG6,
 BPF_LWT_ENCAP_SEG6_INLINE,
 BPF_LWT_ENCAP_IP,
};
# 2972 "../include/uapi/linux/bpf.h"
struct __sk_buff {
 __u32 len;
 __u32 pkt_type;
 __u32 mark;
 __u32 queue_mapping;
 __u32 protocol;
 __u32 vlan_present;
 __u32 vlan_tci;
 __u32 vlan_proto;
 __u32 priority;
 __u32 ingress_ifindex;
 __u32 ifindex;
 __u32 tc_index;
 __u32 cb[5];
 __u32 hash;
 __u32 tc_classid;
 __u32 data;
 __u32 data_end;
 __u32 napi_id;


 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;


 __u32 data_meta;
 union { struct bpf_flow_keys * flow_keys; __u64 :64; } __attribute__((aligned(8)));
 __u64 tstamp;
 __u32 wire_len;
 __u32 gso_segs;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};

struct bpf_tunnel_key {
 __u32 tunnel_id;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
 __u8 tunnel_tos;
 __u8 tunnel_ttl;
 __u16 tunnel_ext;
 __u32 tunnel_label;
};




struct bpf_xfrm_state {
 __u32 reqid;
 __u32 spi;
 __u16 family;
 __u16 ext;
 union {
  __u32 remote_ipv4;
  __u32 remote_ipv6[4];
 };
};
# 3043 "../include/uapi/linux/bpf.h"
enum bpf_ret_code {
 BPF_OK = 0,

 BPF_DROP = 2,

 BPF_REDIRECT = 7,
# 3057 "../include/uapi/linux/bpf.h"
 BPF_LWT_REROUTE = 128,
};

struct bpf_sock {
 __u32 bound_dev_if;
 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 mark;
 __u32 priority;

 __u32 src_ip4;
 __u32 src_ip6[4];
 __u32 src_port;
 __u32 dst_port;
 __u32 dst_ip4;
 __u32 dst_ip6[4];
 __u32 state;
};

struct bpf_tcp_sock {
 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;


 __u32 data_segs_in;


 __u32 segs_out;


 __u32 data_segs_out;


 __u32 lost_out;
 __u32 sacked_out;
 __u64 bytes_received;



 __u64 bytes_acked;



 __u32 dsack_dups;


 __u32 delivered;
 __u32 delivered_ce;
 __u32 icsk_retransmits;
};

struct bpf_sock_tuple {
 union {
  struct {
   __be32 saddr;
   __be32 daddr;
   __be16 sport;
   __be16 dport;
  } ipv4;
  struct {
   __be32 saddr[4];
   __be32 daddr[4];
   __be16 sport;
   __be16 dport;
  } ipv6;
 };
};

struct bpf_xdp_sock {
 __u32 queue_id;
};
# 3150 "../include/uapi/linux/bpf.h"
enum xdp_action {
 XDP_ABORTED = 0,
 XDP_DROP,
 XDP_PASS,
 XDP_TX,
 XDP_REDIRECT,
};




struct xdp_md {
 __u32 data;
 __u32 data_end;
 __u32 data_meta;

 __u32 ingress_ifindex;
 __u32 rx_queue_index;
};

enum sk_action {
 SK_DROP = 0,
 SK_PASS,
};




struct sk_msg_md {
 union { void * data; __u64 :64; } __attribute__((aligned(8)));
 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));

 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 size;
};

struct sk_reuseport_md {




 union { void * data; __u64 :64; } __attribute__((aligned(8)));

 union { void * data_end; __u64 :64; } __attribute__((aligned(8)));






 __u32 len;




 __u32 eth_protocol;
 __u32 ip_protocol;
 __u32 bind_inany;
 __u32 hash;
};



struct bpf_prog_info {
 __u32 type;
 __u32 id;
 __u8 tag[8];
 __u32 jited_prog_len;
 __u32 xlated_prog_len;
 __u64 __attribute__((aligned(8))) jited_prog_insns;
 __u64 __attribute__((aligned(8))) xlated_prog_insns;
 __u64 load_time;
 __u32 created_by_uid;
 __u32 nr_map_ids;
 __u64 __attribute__((aligned(8))) map_ids;
 char name[16U];
 __u32 ifindex;
 __u32 gpl_compatible:1;
 __u32 :31;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 nr_jited_ksyms;
 __u32 nr_jited_func_lens;
 __u64 __attribute__((aligned(8))) jited_ksyms;
 __u64 __attribute__((aligned(8))) jited_func_lens;
 __u32 btf_id;
 __u32 func_info_rec_size;
 __u64 __attribute__((aligned(8))) func_info;
 __u32 nr_func_info;
 __u32 nr_line_info;
 __u64 __attribute__((aligned(8))) line_info;
 __u64 __attribute__((aligned(8))) jited_line_info;
 __u32 nr_jited_line_info;
 __u32 line_info_rec_size;
 __u32 jited_line_info_rec_size;
 __u32 nr_prog_tags;
 __u64 __attribute__((aligned(8))) prog_tags;
 __u64 run_time_ns;
 __u64 run_cnt;
} __attribute__((aligned(8)));

struct bpf_map_info {
 __u32 type;
 __u32 id;
 __u32 key_size;
 __u32 value_size;
 __u32 max_entries;
 __u32 map_flags;
 char name[16U];
 __u32 ifindex;
 __u32 :32;
 __u64 netns_dev;
 __u64 netns_ino;
 __u32 btf_id;
 __u32 btf_key_type_id;
 __u32 btf_value_type_id;
} __attribute__((aligned(8)));

struct bpf_btf_info {
 __u64 __attribute__((aligned(8))) btf;
 __u32 btf_size;
 __u32 id;
} __attribute__((aligned(8)));





struct bpf_sock_addr {
 __u32 user_family;
 __u32 user_ip4;


 __u32 user_ip6[4];


 __u32 user_port;


 __u32 family;
 __u32 type;
 __u32 protocol;
 __u32 msg_src_ip4;


 __u32 msg_src_ip6[4];


 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};







struct bpf_sock_ops {
 __u32 op;
 union {
  __u32 args[4];
  __u32 reply;
  __u32 replylong[4];
 };
 __u32 family;
 __u32 remote_ip4;
 __u32 local_ip4;
 __u32 remote_ip6[4];
 __u32 local_ip6[4];
 __u32 remote_port;
 __u32 local_port;
 __u32 is_fullsock;



 __u32 snd_cwnd;
 __u32 srtt_us;
 __u32 bpf_sock_ops_cb_flags;
 __u32 state;
 __u32 rtt_min;
 __u32 snd_ssthresh;
 __u32 rcv_nxt;
 __u32 snd_nxt;
 __u32 snd_una;
 __u32 mss_cache;
 __u32 ecn_flags;
 __u32 rate_delivered;
 __u32 rate_interval_us;
 __u32 packets_out;
 __u32 retrans_out;
 __u32 total_retrans;
 __u32 segs_in;
 __u32 data_segs_in;
 __u32 segs_out;
 __u32 data_segs_out;
 __u32 lost_out;
 __u32 sacked_out;
 __u32 sk_txhash;
 __u64 bytes_received;
 __u64 bytes_acked;
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
};
# 3371 "../include/uapi/linux/bpf.h"
enum {
 BPF_SOCK_OPS_VOID,
 BPF_SOCK_OPS_TIMEOUT_INIT,


 BPF_SOCK_OPS_RWND_INIT,



 BPF_SOCK_OPS_TCP_CONNECT_CB,


 BPF_SOCK_OPS_ACTIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_PASSIVE_ESTABLISHED_CB,



 BPF_SOCK_OPS_NEEDS_ECN,


 BPF_SOCK_OPS_BASE_RTT,






 BPF_SOCK_OPS_RTO_CB,




 BPF_SOCK_OPS_RETRANS_CB,





 BPF_SOCK_OPS_STATE_CB,



 BPF_SOCK_OPS_TCP_LISTEN_CB,


 BPF_SOCK_OPS_RTT_CB,

};






enum {
 BPF_TCP_ESTABLISHED = 1,
 BPF_TCP_SYN_SENT,
 BPF_TCP_SYN_RECV,
 BPF_TCP_FIN_WAIT1,
 BPF_TCP_FIN_WAIT2,
 BPF_TCP_TIME_WAIT,
 BPF_TCP_CLOSE,
 BPF_TCP_CLOSE_WAIT,
 BPF_TCP_LAST_ACK,
 BPF_TCP_LISTEN,
 BPF_TCP_CLOSING,
 BPF_TCP_NEW_SYN_RECV,

 BPF_TCP_MAX_STATES
};




struct bpf_perf_event_value {
 __u64 counter;
 __u64 enabled;
 __u64 running;
};
# 3461 "../include/uapi/linux/bpf.h"
struct bpf_cgroup_dev_ctx {

 __u32 access_type;
 __u32 major;
 __u32 minor;
};

struct bpf_raw_tracepoint_args {
 __u64 args[0];
};







enum {
 BPF_FIB_LKUP_RET_SUCCESS,
 BPF_FIB_LKUP_RET_BLACKHOLE,
 BPF_FIB_LKUP_RET_UNREACHABLE,
 BPF_FIB_LKUP_RET_PROHIBIT,
 BPF_FIB_LKUP_RET_NOT_FWDED,
 BPF_FIB_LKUP_RET_FWD_DISABLED,
 BPF_FIB_LKUP_RET_UNSUPP_LWT,
 BPF_FIB_LKUP_RET_NO_NEIGH,
 BPF_FIB_LKUP_RET_FRAG_NEEDED,
};

struct bpf_fib_lookup {



 __u8 family;


 __u8 l4_protocol;
 __be16 sport;
 __be16 dport;


 __u16 tot_len;




 __u32 ifindex;

 union {

  __u8 tos;
  __be32 flowinfo;


  __u32 rt_metric;
 };

 union {
  __be32 ipv4_src;
  __u32 ipv6_src[4];
 };





 union {
  __be32 ipv4_dst;
  __u32 ipv6_dst[4];
 };


 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __u8 smac[6];
 __u8 dmac[6];
};

enum bpf_task_fd_type {
 BPF_FD_TYPE_RAW_TRACEPOINT,
 BPF_FD_TYPE_TRACEPOINT,
 BPF_FD_TYPE_KPROBE,
 BPF_FD_TYPE_KRETPROBE,
 BPF_FD_TYPE_UPROBE,
 BPF_FD_TYPE_URETPROBE,
};





struct bpf_flow_keys {
 __u16 nhoff;
 __u16 thoff;
 __u16 addr_proto;
 __u8 is_frag;
 __u8 is_first_frag;
 __u8 is_encap;
 __u8 ip_proto;
 __be16 n_proto;
 __be16 sport;
 __be16 dport;
 union {
  struct {
   __be32 ipv4_src;
   __be32 ipv4_dst;
  };
  struct {
   __u32 ipv6_src[4];
   __u32 ipv6_dst[4];
  };
 };
 __u32 flags;
 __be32 flow_label;
};

struct bpf_func_info {
 __u32 insn_off;
 __u32 type_id;
};




struct bpf_line_info {
 __u32 insn_off;
 __u32 file_name_off;
 __u32 line_off;
 __u32 line_col;
};

struct bpf_spin_lock {
 __u32 val;
};

struct bpf_sysctl {
 __u32 write;


 __u32 file_pos;


};

struct bpf_sockopt {
 union { struct bpf_sock * sk; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval; __u64 :64; } __attribute__((aligned(8)));
 union { void * optval_end; __u64 :64; } __attribute__((aligned(8)));

 __s32 level;
 __s32 optname;
 __s32 optlen;
 __s32 retval;
};
# 8 "../include/linux/bpf.h" 2


# 1 "../include/linux/file.h" 1
# 13 "../include/linux/file.h"
struct file;

extern void fput(struct file *);
extern void fput_many(struct file *, unsigned int);

struct file_operations;
struct vfsmount;
struct dentry;
struct inode;
struct path;
extern struct file *alloc_file_pseudo(struct inode *, struct vfsmount *,
 const char *, int flags, const struct file_operations *);
extern struct file *alloc_file_clone(struct file *, int flags,
 const struct file_operations *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fput_light(struct file *file, int fput_needed)
{
 if (fput_needed)
  fput(file);
}

struct fd {
 struct file *file;
 unsigned int flags;
};



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput(struct fd fd)
{
 if (fd.flags & 1)
  fput(fd.file);
}

extern struct file *fget(unsigned int fd);
extern struct file *fget_many(unsigned int fd, unsigned int refs);
extern struct file *fget_raw(unsigned int fd);
extern unsigned long __fdget(unsigned int fd);
extern unsigned long __fdget_raw(unsigned int fd);
extern unsigned long __fdget_pos(unsigned int fd);
extern void __f_unlock_pos(struct file *);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd __to_fd(unsigned long v)
{
 return (struct fd){(struct file *)(v & ~3),v & 3};
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget(unsigned int fd)
{
 return __to_fd(__fdget(fd));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_raw(unsigned int fd)
{
 return __to_fd(__fdget_raw(fd));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct fd fdget_pos(int fd)
{
 return __to_fd(__fdget_pos(fd));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void fdput_pos(struct fd f)
{
 if (f.flags & 2)
  __f_unlock_pos(f.file);
 fdput(f);
}

extern int f_dupfd(unsigned int from, struct file *file, unsigned flags);
extern int replace_fd(unsigned fd, struct file *file, unsigned flags);
extern void set_close_on_exec(unsigned int fd, int flag);
extern bool get_close_on_exec(unsigned int fd);
extern int get_unused_fd_flags(unsigned flags);
extern void put_unused_fd(unsigned int fd);

extern void fd_install(unsigned int fd, struct file *file);

extern void flush_delayed_fput(void);
extern void __fput_sync(struct file *);
# 11 "../include/linux/bpf.h" 2







struct bpf_verifier_env;
struct perf_event;
struct bpf_prog;
struct bpf_map;
struct sock;
struct seq_file;
struct btf;
struct btf_type;

extern struct idr btf_idr;
extern spinlock_t btf_idr_lock;


struct bpf_map_ops {

 int (*map_alloc_check)(union bpf_attr *attr);
 struct bpf_map *(*map_alloc)(union bpf_attr *attr);
 void (*map_release)(struct bpf_map *map, struct file *map_file);
 void (*map_free)(struct bpf_map *map);
 int (*map_get_next_key)(struct bpf_map *map, void *key, void *next_key);
 void (*map_release_uref)(struct bpf_map *map);
 void *(*map_lookup_elem_sys_only)(struct bpf_map *map, void *key);


 void *(*map_lookup_elem)(struct bpf_map *map, void *key);
 int (*map_update_elem)(struct bpf_map *map, void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_map *map, void *key);
 int (*map_push_elem)(struct bpf_map *map, void *value, u64 flags);
 int (*map_pop_elem)(struct bpf_map *map, void *value);
 int (*map_peek_elem)(struct bpf_map *map, void *value);


 void *(*map_fd_get_ptr)(struct bpf_map *map, struct file *map_file,
    int fd);
 void (*map_fd_put_ptr)(void *ptr);
 u32 (*map_gen_lookup)(struct bpf_map *map, struct bpf_insn *insn_buf);
 u32 (*map_fd_sys_lookup_elem)(void *ptr);
 void (*map_seq_show_elem)(struct bpf_map *map, void *key,
      struct seq_file *m);
 int (*map_check_btf)(const struct bpf_map *map,
        const struct btf *btf,
        const struct btf_type *key_type,
        const struct btf_type *value_type);


 int (*map_direct_value_addr)(const struct bpf_map *map,
         u64 *imm, u32 off);
 int (*map_direct_value_meta)(const struct bpf_map *map,
         u64 imm, u32 *off);
};

struct bpf_map_memory {
 u32 pages;
 struct user_struct *user;
};

struct bpf_map {



 const struct bpf_map_ops *ops __attribute__((__aligned__((1 << (6)))));
 struct bpf_map *inner_map_meta;

 void *security;

 enum bpf_map_type map_type;
 u32 key_size;
 u32 value_size;
 u32 max_entries;
 u32 map_flags;
 int spin_lock_off;
 u32 id;
 int numa_node;
 u32 btf_key_type_id;
 u32 btf_value_type_id;
 struct btf *btf;
 struct bpf_map_memory memory;
 bool unpriv_array;
 bool frozen;





 atomic_t refcnt __attribute__((__aligned__((1 << (6)))));
 atomic_t usercnt;
 struct work_struct work;
 char name[16U];
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool map_value_has_spin_lock(const struct bpf_map *map)
{
 return map->spin_lock_off >= 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_and_init_map_lock(struct bpf_map *map, void *dst)
{
 if (__builtin_expect(!!(!map_value_has_spin_lock(map)), 1))
  return;
 *(struct bpf_spin_lock *)(dst + map->spin_lock_off) =
  (struct bpf_spin_lock){};
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void copy_map_value(struct bpf_map *map, void *dst, void *src)
{
 if (__builtin_expect(!!(map_value_has_spin_lock(map)), 0)) {
  u32 off = map->spin_lock_off;

  memcpy(dst, src, off);
  memcpy(dst + off + sizeof(struct bpf_spin_lock),
         src + off + sizeof(struct bpf_spin_lock),
         map->value_size - off - sizeof(struct bpf_spin_lock));
 } else {
  memcpy(dst, src, map->value_size);
 }
}
void copy_map_value_locked(struct bpf_map *map, void *dst, void *src,
      bool lock_src);

struct bpf_offload_dev;
struct bpf_offloaded_map;

struct bpf_map_dev_ops {
 int (*map_get_next_key)(struct bpf_offloaded_map *map,
    void *key, void *next_key);
 int (*map_lookup_elem)(struct bpf_offloaded_map *map,
          void *key, void *value);
 int (*map_update_elem)(struct bpf_offloaded_map *map,
          void *key, void *value, u64 flags);
 int (*map_delete_elem)(struct bpf_offloaded_map *map, void *key);
};

struct bpf_offloaded_map {
 struct bpf_map map;
 struct net_device *netdev;
 const struct bpf_map_dev_ops *dev_ops;
 void *dev_priv;
 struct list_head offloads;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_offloaded_map *map_to_offmap(struct bpf_map *map)
{
 return ({ void *__mptr = (void *)(map); do { extern void __compiletime_assert_161(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(map)), typeof(((struct bpf_offloaded_map *)0)->map)) && !__builtin_types_compatible_p(typeof(*(map)), typeof(void))))) __compiletime_assert_161(); } while (0); ((struct bpf_offloaded_map *)(__mptr - __builtin_offsetof(struct bpf_offloaded_map, map))); });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_offload_neutral(const struct bpf_map *map)
{
 return map->map_type == BPF_MAP_TYPE_PERF_EVENT_ARRAY;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_support_seq_show(const struct bpf_map *map)
{
 return map->btf && map->ops->map_seq_show_elem;
}

int map_check_no_btf(const struct bpf_map *map,
       const struct btf *btf,
       const struct btf_type *key_type,
       const struct btf_type *value_type);

extern const struct bpf_map_ops bpf_map_offload_ops;


enum bpf_arg_type {
 ARG_DONTCARE = 0,




 ARG_CONST_MAP_PTR,
 ARG_PTR_TO_MAP_KEY,
 ARG_PTR_TO_MAP_VALUE,
 ARG_PTR_TO_UNINIT_MAP_VALUE,
 ARG_PTR_TO_MAP_VALUE_OR_NULL,




 ARG_PTR_TO_MEM,
 ARG_PTR_TO_MEM_OR_NULL,
 ARG_PTR_TO_UNINIT_MEM,




 ARG_CONST_SIZE,
 ARG_CONST_SIZE_OR_ZERO,

 ARG_PTR_TO_CTX,
 ARG_ANYTHING,
 ARG_PTR_TO_SPIN_LOCK,
 ARG_PTR_TO_SOCK_COMMON,
 ARG_PTR_TO_INT,
 ARG_PTR_TO_LONG,
 ARG_PTR_TO_SOCKET,
};


enum bpf_return_type {
 RET_INTEGER,
 RET_VOID,
 RET_PTR_TO_MAP_VALUE,
 RET_PTR_TO_MAP_VALUE_OR_NULL,
 RET_PTR_TO_SOCKET_OR_NULL,
 RET_PTR_TO_TCP_SOCK_OR_NULL,
 RET_PTR_TO_SOCK_COMMON_OR_NULL,
};





struct bpf_func_proto {
 u64 (*func)(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);
 bool gpl_only;
 bool pkt_access;
 enum bpf_return_type ret_type;
 enum bpf_arg_type arg1_type;
 enum bpf_arg_type arg2_type;
 enum bpf_arg_type arg3_type;
 enum bpf_arg_type arg4_type;
 enum bpf_arg_type arg5_type;
};





struct bpf_context;

enum bpf_access_type {
 BPF_READ = 1,
 BPF_WRITE = 2
};
# 264 "../include/linux/bpf.h"
enum bpf_reg_type {
 NOT_INIT = 0,
 SCALAR_VALUE,
 PTR_TO_CTX,
 CONST_PTR_TO_MAP,
 PTR_TO_MAP_VALUE,
 PTR_TO_MAP_VALUE_OR_NULL,
 PTR_TO_STACK,
 PTR_TO_PACKET_META,
 PTR_TO_PACKET,
 PTR_TO_PACKET_END,
 PTR_TO_FLOW_KEYS,
 PTR_TO_SOCKET,
 PTR_TO_SOCKET_OR_NULL,
 PTR_TO_SOCK_COMMON,
 PTR_TO_SOCK_COMMON_OR_NULL,
 PTR_TO_TCP_SOCK,
 PTR_TO_TCP_SOCK_OR_NULL,
 PTR_TO_TP_BUFFER,
 PTR_TO_XDP_SOCK,
};




struct bpf_insn_access_aux {
 enum bpf_reg_type reg_type;
 int ctx_field_size;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
bpf_ctx_record_field_size(struct bpf_insn_access_aux *aux, u32 size)
{
 aux->ctx_field_size = size;
}

struct bpf_prog_ops {
 int (*test_run)(struct bpf_prog *prog, const union bpf_attr *kattr,
   union bpf_attr *uattr);
};

struct bpf_verifier_ops {

 const struct bpf_func_proto *
 (*get_func_proto)(enum bpf_func_id func_id,
     const struct bpf_prog *prog);




 bool (*is_valid_access)(int off, int size, enum bpf_access_type type,
    const struct bpf_prog *prog,
    struct bpf_insn_access_aux *info);
 int (*gen_prologue)(struct bpf_insn *insn, bool direct_write,
       const struct bpf_prog *prog);
 int (*gen_ld_abs)(const struct bpf_insn *orig,
     struct bpf_insn *insn_buf);
 u32 (*convert_ctx_access)(enum bpf_access_type type,
      const struct bpf_insn *src,
      struct bpf_insn *dst,
      struct bpf_prog *prog, u32 *target_size);
};

struct bpf_prog_offload_ops {

 int (*insn_hook)(struct bpf_verifier_env *env,
    int insn_idx, int prev_insn_idx);
 int (*finalize)(struct bpf_verifier_env *env);

 int (*replace_insn)(struct bpf_verifier_env *env, u32 off,
       struct bpf_insn *insn);
 int (*remove_insns)(struct bpf_verifier_env *env, u32 off, u32 cnt);

 int (*prepare)(struct bpf_prog *prog);
 int (*translate)(struct bpf_prog *prog);
 void (*destroy)(struct bpf_prog *prog);
};

struct bpf_prog_offload {
 struct bpf_prog *prog;
 struct net_device *netdev;
 struct bpf_offload_dev *offdev;
 void *dev_priv;
 struct list_head offloads;
 bool dev_state;
 bool opt_failed;
 void *jited_image;
 u32 jited_len;
};

enum bpf_cgroup_storage_type {
 BPF_CGROUP_STORAGE_SHARED,
 BPF_CGROUP_STORAGE_PERCPU,
 __BPF_CGROUP_STORAGE_MAX
};



struct bpf_prog_stats {
 u64 cnt;
 u64 nsecs;
 struct u64_stats_sync syncp;
};

struct bpf_prog_aux {
 atomic_t refcnt;
 u32 used_map_cnt;
 u32 max_ctx_offset;
 u32 max_pkt_offset;
 u32 max_tp_access;
 u32 stack_depth;
 u32 id;
 u32 func_cnt;
 u32 func_idx;
 bool verifier_zext;
 bool offload_requested;
 struct bpf_prog **func;
 void *jit_data;
 struct latch_tree_node ksym_tnode;
 struct list_head ksym_lnode;
 const struct bpf_prog_ops *ops;
 struct bpf_map **used_maps;
 struct bpf_prog *prog;
 struct user_struct *user;
 u64 load_time;
 struct bpf_map *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
 char name[16U];

 void *security;

 struct bpf_prog_offload *offload;
 struct btf *btf;
 struct bpf_func_info *func_info;






 struct bpf_line_info *linfo;







 void **jited_linfo;
 u32 func_info_cnt;
 u32 nr_linfo;




 u32 linfo_idx;
 struct bpf_prog_stats *stats;
 union {
  struct work_struct work;
  struct callback_head rcu;
 };
};

struct bpf_array {
 struct bpf_map map;
 u32 elem_size;
 u32 index_mask;





 enum bpf_prog_type owner_prog_type;
 bool owner_jited;
 union {
  char value[0] __attribute__((__aligned__(8)));
  void *ptrs[0] __attribute__((__aligned__(8)));
  void *pptrs[0] __attribute__((__aligned__(8)));
 };
};
# 455 "../include/linux/bpf.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 bpf_map_flags_to_cap(struct bpf_map *map)
{
 u32 access_flags = map->map_flags & ((1U << 7) | (1U << 8));




 if (access_flags & (1U << 7))
  return ((((1UL))) << (0));
 else if (access_flags & (1U << 8))
  return ((((1UL))) << (1));
 else
  return ((((1UL))) << (0)) | ((((1UL))) << (1));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_flags_access_ok(u32 access_flags)
{
 return (access_flags & ((1U << 7) | (1U << 8))) !=
        ((1U << 7) | (1U << 8));
}

struct bpf_event_entry {
 struct perf_event *event;
 struct file *perf_file;
 struct file *map_file;
 struct callback_head rcu;
};

bool bpf_prog_array_compatible(struct bpf_array *array, const struct bpf_prog *fp);
int bpf_prog_calc_tag(struct bpf_prog *fp);

const struct bpf_func_proto *bpf_get_trace_printk_proto(void);

typedef unsigned long (*bpf_ctx_copy_t)(void *dst, const void *src,
     unsigned long off, unsigned long len);
typedef u32 (*bpf_convert_ctx_access_t)(enum bpf_access_type type,
     const struct bpf_insn *src,
     struct bpf_insn *dst,
     struct bpf_prog *prog,
     u32 *target_size);

u64 bpf_event_output(struct bpf_map *map, u64 flags, void *meta, u64 meta_size,
       void *ctx, u64 ctx_size, bpf_ctx_copy_t ctx_copy);
# 511 "../include/linux/bpf.h"
struct bpf_prog_array_item {
 struct bpf_prog *prog;
 struct bpf_cgroup_storage *cgroup_storage[__BPF_CGROUP_STORAGE_MAX];
};

struct bpf_prog_array {
 struct callback_head rcu;
 struct bpf_prog_array_item items[0];
};

struct bpf_prog_array *bpf_prog_array_alloc(u32 prog_cnt, gfp_t flags);
void bpf_prog_array_free(struct bpf_prog_array *progs);
int bpf_prog_array_length(struct bpf_prog_array *progs);
bool bpf_prog_array_is_empty(struct bpf_prog_array *array);
int bpf_prog_array_copy_to_user(struct bpf_prog_array *progs,
    __u32 *prog_ids, u32 cnt);

void bpf_prog_array_delete_safe(struct bpf_prog_array *progs,
    struct bpf_prog *old_prog);
int bpf_prog_array_copy_info(struct bpf_prog_array *array,
        u32 *prog_ids, u32 request_cnt,
        u32 *prog_cnt);
int bpf_prog_array_copy(struct bpf_prog_array *old_array,
   struct bpf_prog *exclude_prog,
   struct bpf_prog *include_prog,
   struct bpf_prog_array **new_array);
# 618 "../include/linux/bpf.h"
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) bpf_prog_active;

extern const struct file_operations bpf_map_fops;
extern const struct file_operations bpf_prog_fops;







# 1 "../include/linux/bpf_types.h" 1




extern const struct bpf_prog_ops sk_filter_prog_ops; extern const struct bpf_verifier_ops sk_filter_verifier_ops;
extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;
extern const struct bpf_prog_ops tc_cls_act_prog_ops; extern const struct bpf_verifier_ops tc_cls_act_verifier_ops;
extern const struct bpf_prog_ops xdp_prog_ops; extern const struct bpf_verifier_ops xdp_verifier_ops;

extern const struct bpf_prog_ops cg_skb_prog_ops; extern const struct bpf_verifier_ops cg_skb_verifier_ops;
extern const struct bpf_prog_ops cg_sock_prog_ops; extern const struct bpf_verifier_ops cg_sock_verifier_ops;
extern const struct bpf_prog_ops cg_sock_addr_prog_ops; extern const struct bpf_verifier_ops cg_sock_addr_verifier_ops;

extern const struct bpf_prog_ops lwt_in_prog_ops; extern const struct bpf_verifier_ops lwt_in_verifier_ops;
extern const struct bpf_prog_ops lwt_out_prog_ops; extern const struct bpf_verifier_ops lwt_out_verifier_ops;
extern const struct bpf_prog_ops lwt_xmit_prog_ops; extern const struct bpf_verifier_ops lwt_xmit_verifier_ops;
extern const struct bpf_prog_ops lwt_seg6local_prog_ops; extern const struct bpf_verifier_ops lwt_seg6local_verifier_ops;
extern const struct bpf_prog_ops sock_ops_prog_ops; extern const struct bpf_verifier_ops sock_ops_verifier_ops;
extern const struct bpf_prog_ops sk_skb_prog_ops; extern const struct bpf_verifier_ops sk_skb_verifier_ops;
extern const struct bpf_prog_ops sk_msg_prog_ops; extern const struct bpf_verifier_ops sk_msg_verifier_ops;
extern const struct bpf_prog_ops flow_dissector_prog_ops; extern const struct bpf_verifier_ops flow_dissector_verifier_ops;
# 31 "../include/linux/bpf_types.h"
extern const struct bpf_prog_ops cg_dev_prog_ops; extern const struct bpf_verifier_ops cg_dev_verifier_ops;
extern const struct bpf_prog_ops cg_sysctl_prog_ops; extern const struct bpf_verifier_ops cg_sysctl_verifier_ops;
extern const struct bpf_prog_ops cg_sockopt_prog_ops; extern const struct bpf_verifier_ops cg_sockopt_verifier_ops;





extern const struct bpf_prog_ops sk_reuseport_prog_ops; extern const struct bpf_verifier_ops sk_reuseport_verifier_ops;


extern const struct bpf_map_ops array_map_ops;
extern const struct bpf_map_ops percpu_array_map_ops;
extern const struct bpf_map_ops prog_array_map_ops;
extern const struct bpf_map_ops perf_event_array_map_ops;

extern const struct bpf_map_ops cgroup_array_map_ops;


extern const struct bpf_map_ops cgroup_storage_map_ops;
extern const struct bpf_map_ops cgroup_storage_map_ops;

extern const struct bpf_map_ops htab_map_ops;
extern const struct bpf_map_ops htab_percpu_map_ops;
extern const struct bpf_map_ops htab_lru_map_ops;
extern const struct bpf_map_ops htab_lru_percpu_map_ops;
extern const struct bpf_map_ops trie_map_ops;

extern const struct bpf_map_ops stack_trace_map_ops;

extern const struct bpf_map_ops array_of_maps_map_ops;
extern const struct bpf_map_ops htab_of_maps_map_ops;

extern const struct bpf_map_ops dev_map_ops;
extern const struct bpf_map_ops dev_map_hash_ops;
extern const struct bpf_map_ops sk_storage_map_ops;

extern const struct bpf_map_ops sock_map_ops;
extern const struct bpf_map_ops sock_hash_ops;

extern const struct bpf_map_ops cpu_map_ops;




extern const struct bpf_map_ops reuseport_array_ops;


extern const struct bpf_map_ops queue_map_ops;
extern const struct bpf_map_ops stack_map_ops;
# 629 "../include/linux/bpf.h" 2



extern const struct bpf_prog_ops bpf_offload_prog_ops;
extern const struct bpf_verifier_ops tc_cls_act_analyzer_ops;
extern const struct bpf_verifier_ops xdp_analyzer_ops;

struct bpf_prog *bpf_prog_get(u32 ufd);
struct bpf_prog *bpf_prog_get_type_dev(u32 ufd, enum bpf_prog_type type,
           bool attach_drv);
struct bpf_prog * __attribute__((__warn_unused_result__)) bpf_prog_add(struct bpf_prog *prog, int i);
void bpf_prog_sub(struct bpf_prog *prog, int i);
struct bpf_prog * __attribute__((__warn_unused_result__)) bpf_prog_inc(struct bpf_prog *prog);
struct bpf_prog * __attribute__((__warn_unused_result__)) bpf_prog_inc_not_zero(struct bpf_prog *prog);
void bpf_prog_put(struct bpf_prog *prog);
int __bpf_prog_charge(struct user_struct *user, u32 pages);
void __bpf_prog_uncharge(struct user_struct *user, u32 pages);

void bpf_prog_free_id(struct bpf_prog *prog, bool do_idr_lock);
void bpf_map_free_id(struct bpf_map *map, bool do_idr_lock);

struct bpf_map *bpf_map_get_with_uref(u32 ufd);
struct bpf_map *__bpf_map_get(struct fd f);
struct bpf_map * __attribute__((__warn_unused_result__)) bpf_map_inc(struct bpf_map *map, bool uref);
struct bpf_map * __attribute__((__warn_unused_result__)) bpf_map_inc_not_zero(struct bpf_map *map,
         bool uref);
void bpf_map_put_with_uref(struct bpf_map *map);
void bpf_map_put(struct bpf_map *map);
int bpf_map_charge_memlock(struct bpf_map *map, u32 pages);
void bpf_map_uncharge_memlock(struct bpf_map *map, u32 pages);
int bpf_map_charge_init(struct bpf_map_memory *mem, size_t size);
void bpf_map_charge_finish(struct bpf_map_memory *mem);
void bpf_map_charge_move(struct bpf_map_memory *dst,
    struct bpf_map_memory *src);
void *bpf_map_area_alloc(size_t size, int numa_node);
void bpf_map_area_free(void *base);
void bpf_map_init_from_attr(struct bpf_map *map, union bpf_attr *attr);

extern int sysctl_unprivileged_bpf_disabled;

int bpf_map_new_fd(struct bpf_map *map, int flags);
int bpf_prog_new_fd(struct bpf_prog *prog);

int bpf_obj_pin_user(u32 ufd, const char *pathname);
int bpf_obj_get_user(const char *pathname, int flags);

int bpf_percpu_hash_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_array_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_hash_update(struct bpf_map *map, void *key, void *value,
      u64 flags);
int bpf_percpu_array_update(struct bpf_map *map, void *key, void *value,
       u64 flags);

int bpf_stackmap_copy(struct bpf_map *map, void *key, void *value);

int bpf_fd_array_map_update_elem(struct bpf_map *map, struct file *map_file,
     void *key, void *value, u64 map_flags);
int bpf_fd_array_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);
int bpf_fd_htab_map_update_elem(struct bpf_map *map, struct file *map_file,
    void *key, void *value, u64 map_flags);
int bpf_fd_htab_map_lookup_elem(struct bpf_map *map, void *key, u32 *value);

int bpf_get_file_flag(int flags);
int bpf_check_uarg_tail_zero(void *uaddr, size_t expected_size,
        size_t actual_size);







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_long_memcpy(void *dst, const void *src, u32 size)
{
 const long *lsrc = src;
 long *ldst = dst;

 size /= sizeof(long);
 while (size--)
  *ldst++ = *lsrc++;
}


int bpf_check(struct bpf_prog **fp, union bpf_attr *attr,
       union bpf_attr *uattr);
void bpf_patch_call_args(struct bpf_insn *insn, u32 stack_depth);


struct xdp_buff;
struct sk_buff;

struct bpf_dtab_netdev *__dev_map_lookup_elem(struct bpf_map *map, u32 key);
struct bpf_dtab_netdev *__dev_map_hash_lookup_elem(struct bpf_map *map, u32 key);
void __dev_map_flush(struct bpf_map *map);
int dev_map_enqueue(struct bpf_dtab_netdev *dst, struct xdp_buff *xdp,
      struct net_device *dev_rx);
int dev_map_generic_redirect(struct bpf_dtab_netdev *dst, struct sk_buff *skb,
        struct bpf_prog *xdp_prog);

struct bpf_cpu_map_entry *__cpu_map_lookup_elem(struct bpf_map *map, u32 key);
void __cpu_map_flush(struct bpf_map *map);
int cpu_map_enqueue(struct bpf_cpu_map_entry *rcpu, struct xdp_buff *xdp,
      struct net_device *dev_rx);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int bpf_map_attr_numa_node(const union bpf_attr *attr)
{
 return (attr->map_flags & (1U << 2)) ?
  attr->numa_node : (-1);
}

struct bpf_prog *bpf_prog_get_type_path(const char *name, enum bpf_prog_type type);
int array_map_alloc_check(union bpf_attr *attr);

int bpf_prog_test_run_xdp(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_skb(struct bpf_prog *prog, const union bpf_attr *kattr,
     union bpf_attr *uattr);
int bpf_prog_test_run_flow_dissector(struct bpf_prog *prog,
         const union bpf_attr *kattr,
         union bpf_attr *uattr);
# 882 "../include/linux/bpf.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct bpf_prog *bpf_prog_get_type(u32 ufd,
       enum bpf_prog_type type)
{
 return bpf_prog_get_type_dev(ufd, type, false);
}

bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);

int bpf_prog_offload_compile(struct bpf_prog *prog);
void bpf_prog_offload_destroy(struct bpf_prog *prog);
int bpf_prog_offload_info_fill(struct bpf_prog_info *info,
          struct bpf_prog *prog);

int bpf_map_offload_info_fill(struct bpf_map_info *info, struct bpf_map *map);

int bpf_map_offload_lookup_elem(struct bpf_map *map, void *key, void *value);
int bpf_map_offload_update_elem(struct bpf_map *map,
    void *key, void *value, u64 flags);
int bpf_map_offload_delete_elem(struct bpf_map *map, void *key);
int bpf_map_offload_get_next_key(struct bpf_map *map,
     void *key, void *next_key);

bool bpf_offload_prog_map_match(struct bpf_prog *prog, struct bpf_map *map);

struct bpf_offload_dev *
bpf_offload_dev_create(const struct bpf_prog_offload_ops *ops, void *priv);
void bpf_offload_dev_destroy(struct bpf_offload_dev *offdev);
void *bpf_offload_dev_priv(struct bpf_offload_dev *offdev);
int bpf_offload_dev_netdev_register(struct bpf_offload_dev *offdev,
        struct net_device *netdev);
void bpf_offload_dev_netdev_unregister(struct bpf_offload_dev *offdev,
           struct net_device *netdev);
bool bpf_offload_dev_match(struct bpf_prog *prog, struct net_device *netdev);


int bpf_prog_offload_init(struct bpf_prog *prog, union bpf_attr *attr);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_prog_is_dev_bound(const struct bpf_prog_aux *aux)
{
 return aux->offload_requested;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool bpf_map_is_dev_bound(struct bpf_map *map)
{
 return __builtin_expect(!!(map->ops == &bpf_map_offload_ops), 0);
}

struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *attr);
void bpf_map_offload_map_free(struct bpf_map *map);
# 959 "../include/linux/bpf.h"
int sock_map_prog_update(struct bpf_map *map, struct bpf_prog *prog, u32 which);
int sock_map_get_from_fd(const union bpf_attr *attr, struct bpf_prog *prog);
# 982 "../include/linux/bpf.h"
struct xdp_sock;
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct xdp_sock *__xsk_map_lookup_elem(struct bpf_map *map,
           u32 key)
{
 return ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int __xsk_map_redirect(struct bpf_map *map, struct xdp_buff *xdp,
         struct xdp_sock *xs)
{
 return -95;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void __xsk_map_flush(struct bpf_map *map)
{
}



void bpf_sk_reuseport_detach(struct sock *sk);
int bpf_fd_reuseport_array_lookup_elem(struct bpf_map *map, void *key,
           void *value);
int bpf_fd_reuseport_array_update_elem(struct bpf_map *map, void *key,
           void *value, u64 map_flags);
# 1028 "../include/linux/bpf.h"
extern const struct bpf_func_proto bpf_map_lookup_elem_proto;
extern const struct bpf_func_proto bpf_map_update_elem_proto;
extern const struct bpf_func_proto bpf_map_delete_elem_proto;
extern const struct bpf_func_proto bpf_map_push_elem_proto;
extern const struct bpf_func_proto bpf_map_pop_elem_proto;
extern const struct bpf_func_proto bpf_map_peek_elem_proto;

extern const struct bpf_func_proto bpf_get_prandom_u32_proto;
extern const struct bpf_func_proto bpf_get_smp_processor_id_proto;
extern const struct bpf_func_proto bpf_get_numa_node_id_proto;
extern const struct bpf_func_proto bpf_tail_call_proto;
extern const struct bpf_func_proto bpf_ktime_get_ns_proto;
extern const struct bpf_func_proto bpf_get_current_pid_tgid_proto;
extern const struct bpf_func_proto bpf_get_current_uid_gid_proto;
extern const struct bpf_func_proto bpf_get_current_comm_proto;
extern const struct bpf_func_proto bpf_get_stackid_proto;
extern const struct bpf_func_proto bpf_get_stack_proto;
extern const struct bpf_func_proto bpf_sock_map_update_proto;
extern const struct bpf_func_proto bpf_sock_hash_update_proto;
extern const struct bpf_func_proto bpf_get_current_cgroup_id_proto;
extern const struct bpf_func_proto bpf_msg_redirect_hash_proto;
extern const struct bpf_func_proto bpf_msg_redirect_map_proto;
extern const struct bpf_func_proto bpf_sk_redirect_hash_proto;
extern const struct bpf_func_proto bpf_sk_redirect_map_proto;
extern const struct bpf_func_proto bpf_spin_lock_proto;
extern const struct bpf_func_proto bpf_spin_unlock_proto;
extern const struct bpf_func_proto bpf_get_local_storage_proto;
extern const struct bpf_func_proto bpf_strtol_proto;
extern const struct bpf_func_proto bpf_strtoul_proto;
extern const struct bpf_func_proto bpf_tcp_sock_proto;


void bpf_user_rnd_init_once(void);
u64 bpf_user_rnd_u32(u64 r1, u64 r2, u64 r3, u64 r4, u64 r5);


bool bpf_sock_common_is_valid_access(int off, int size,
         enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
bool bpf_sock_is_valid_access(int off, int size, enum bpf_access_type type,
         struct bpf_insn_access_aux *info);
u32 bpf_sock_convert_ctx_access(enum bpf_access_type type,
    const struct bpf_insn *si,
    struct bpf_insn *insn_buf,
    struct bpf_prog *prog,
    u32 *target_size);
# 1098 "../include/linux/bpf.h"
bool bpf_tcp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);

bool bpf_xdp_sock_is_valid_access(int off, int size, enum bpf_access_type type,
      struct bpf_insn_access_aux *info);

u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type type,
        const struct bpf_insn *si,
        struct bpf_insn *insn_buf,
        struct bpf_prog *prog,
        u32 *target_size);
# 6 "../include/linux/bpf-cgroup.h" 2







struct sock;
struct sockaddr;
struct cgroup;
struct sk_buff;
struct bpf_map;
struct bpf_prog;
struct bpf_sock_ops_kern;
struct bpf_cgroup_storage;
struct ctl_table;
struct ctl_table_header;



extern struct static_key_false cgroup_bpf_enabled_key;


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct bpf_cgroup_storage*) bpf_cgroup_storage[__BPF_CGROUP_STORAGE_MAX];





struct bpf_cgroup_storage_map;

struct bpf_storage_buffer {
 struct callback_head rcu;
 char data[0];
};

struct bpf_cgroup_storage {
 union {
  struct bpf_storage_buffer *buf;
  void *percpu_buf;
 };
 struct bpf_cgroup_storage_map *map;
 struct bpf_cgroup_storage_key key;
 struct list_head list;
 struct rb_node node;
 struct callback_head rcu;
};

struct bpf_prog_list {
 struct list_head node;
 struct bpf_prog *prog;
 struct bpf_cgroup_storage *storage[__BPF_CGROUP_STORAGE_MAX];
};

struct bpf_prog_array;

struct cgroup_bpf {

 struct bpf_prog_array *effective[__MAX_BPF_ATTACH_TYPE];






 struct list_head progs[__MAX_BPF_ATTACH_TYPE];
 u32 flags[__MAX_BPF_ATTACH_TYPE];


 struct bpf_prog_array *inactive;


 struct percpu_ref refcnt;


 struct work_struct release_work;
};

int cgroup_bpf_inherit(struct cgroup *cgrp);
void cgroup_bpf_offline(struct cgroup *cgrp);

int __cgroup_bpf_attach(struct cgroup *cgrp, struct bpf_prog *prog,
   enum bpf_attach_type type, u32 flags);
int __cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
   enum bpf_attach_type type);
int __cgroup_bpf_query(struct cgroup *cgrp, const union bpf_attr *attr,
         union bpf_attr *uattr);


int cgroup_bpf_attach(struct cgroup *cgrp, struct bpf_prog *prog,
        enum bpf_attach_type type, u32 flags);
int cgroup_bpf_detach(struct cgroup *cgrp, struct bpf_prog *prog,
        enum bpf_attach_type type, u32 flags);
int cgroup_bpf_query(struct cgroup *cgrp, const union bpf_attr *attr,
       union bpf_attr *uattr);

int __cgroup_bpf_run_filter_skb(struct sock *sk,
    struct sk_buff *skb,
    enum bpf_attach_type type);

int __cgroup_bpf_run_filter_sk(struct sock *sk,
          enum bpf_attach_type type);

int __cgroup_bpf_run_filter_sock_addr(struct sock *sk,
          struct sockaddr *uaddr,
          enum bpf_attach_type type,
          void *t_ctx);

int __cgroup_bpf_run_filter_sock_ops(struct sock *sk,
         struct bpf_sock_ops_kern *sock_ops,
         enum bpf_attach_type type);

int __cgroup_bpf_check_dev_permission(short dev_type, u32 major, u32 minor,
          short access, enum bpf_attach_type type);

int __cgroup_bpf_run_filter_sysctl(struct ctl_table_header *head,
       struct ctl_table *table, int write,
       void *buf, size_t *pcount,
       loff_t *ppos, void **new_buf,
       enum bpf_attach_type type);

int __cgroup_bpf_run_filter_setsockopt(struct sock *sock, int *level,
           int *optname, char *optval,
           int *optlen, char **kernel_optval);
int __cgroup_bpf_run_filter_getsockopt(struct sock *sk, int level,
           int optname, char *optval,
           int *optlen, int max_optlen,
           int retval);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum bpf_cgroup_storage_type cgroup_storage_type(
 struct bpf_map *map)
{
 if (map->map_type == BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE)
  return BPF_CGROUP_STORAGE_PERCPU;

 return BPF_CGROUP_STORAGE_SHARED;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void bpf_cgroup_storage_set(struct bpf_cgroup_storage
       *storage[__BPF_CGROUP_STORAGE_MAX])
{
 enum bpf_cgroup_storage_type stype;

 for (stype = 0; stype < __BPF_CGROUP_STORAGE_MAX; stype++)
  do { do { const void *__vpp_verify = (typeof((&(bpf_cgroup_storage[stype])) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(bpf_cgroup_storage[stype])) { case 1: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_8(({ do { const void *__vpp_verify = (typeof((&(bpf_cgroup_storage[stype])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype]))); (typeof((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype])))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)storage[stype]); __asm__ __volatile__("" : : : "memory"); });break; case 2: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_16(({ do { const void *__vpp_verify = (typeof((&(bpf_cgroup_storage[stype])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype]))); (typeof((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype])))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)storage[stype]); __asm__ __volatile__("" : : : "memory"); });break; case 4: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_32(({ do { const void *__vpp_verify = (typeof((&(bpf_cgroup_storage[stype])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype]))); (typeof((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype])))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)storage[stype]); __asm__ __volatile__("" : : : "memory"); });break; case 8: ({ __asm__ __volatile__("" : : : "memory"); __percpu_write_64(({ do { const void *__vpp_verify = (typeof((&(bpf_cgroup_storage[stype])) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __ptr = (unsigned long) ((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype]))); (typeof((typeof(*(&(bpf_cgroup_storage[stype]))) *)(&(bpf_cgroup_storage[stype])))) (__ptr + ((__my_cpu_offset()))); }); }), (unsigned long)storage[stype]); __asm__ __volatile__("" : : : "memory"); });break; default: __bad_size_call_parameter();break; } } while (0);
}

struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *prog,
     enum bpf_cgroup_storage_type stype);
void bpf_cgroup_storage_free(struct bpf_cgroup_storage *storage);
void bpf_cgroup_storage_link(struct bpf_cgroup_storage *storage,
        struct cgroup *cgroup,
        enum bpf_attach_type type);
void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *storage);
int bpf_cgroup_storage_assign(struct bpf_prog *prog, struct bpf_map *map);
void bpf_cgroup_storage_release(struct bpf_prog *prog, struct bpf_map *map);

int bpf_percpu_cgroup_storage_copy(struct bpf_map *map, void *key, void *value);
int bpf_percpu_cgroup_storage_update(struct bpf_map *map, void *key,
         void *value, u64 flags);
# 329 "../include/linux/bpf-cgroup.h"
int cgroup_bpf_prog_attach(const union bpf_attr *attr,
      enum bpf_prog_type ptype, struct bpf_prog *prog);
int cgroup_bpf_prog_detach(const union bpf_attr *attr,
      enum bpf_prog_type ptype);
int cgroup_bpf_prog_query(const union bpf_attr *attr,
     union bpf_attr *uattr);
# 23 "../include/linux/cgroup-defs.h" 2
# 1 "../include/linux/psi_types.h" 1



# 1 "../include/linux/kthread.h" 1







__attribute__((__format__(printf, 4, 5)))
struct task_struct *kthread_create_on_node(int (*threadfn)(void *data),
        void *data,
        int node,
        const char namefmt[], ...);
# 29 "../include/linux/kthread.h"
struct task_struct *kthread_create_on_cpu(int (*threadfn)(void *data),
       void *data,
       unsigned int cpu,
       const char *namefmt);
# 52 "../include/linux/kthread.h"
void free_kthread_struct(struct task_struct *k);
void kthread_bind(struct task_struct *k, unsigned int cpu);
void kthread_bind_mask(struct task_struct *k, const struct cpumask *mask);
int kthread_stop(struct task_struct *k);
bool kthread_should_stop(void);
bool kthread_should_park(void);
bool __kthread_should_park(struct task_struct *k);
bool kthread_freezable_should_stop(bool *was_frozen);
void *kthread_data(struct task_struct *k);
void *kthread_probe_data(struct task_struct *k);
int kthread_park(struct task_struct *k);
void kthread_unpark(struct task_struct *k);
void kthread_parkme(void);

int kthreadd(void *unused);
extern struct task_struct *kthreadd_task;
extern int tsk_fork_get_node(struct task_struct *tsk);
# 78 "../include/linux/kthread.h"
struct kthread_work;
typedef void (*kthread_work_func_t)(struct kthread_work *work);
void kthread_delayed_work_timer_fn(struct timer_list *t);

enum {
 KTW_FREEZABLE = 1 << 0,
};

struct kthread_worker {
 unsigned int flags;
 raw_spinlock_t lock;
 struct list_head work_list;
 struct list_head delayed_work_list;
 struct task_struct *task;
 struct kthread_work *current_work;
};

struct kthread_work {
 struct list_head node;
 kthread_work_func_t func;
 struct kthread_worker *worker;

 int canceling;
};

struct kthread_delayed_work {
 struct kthread_work work;
 struct timer_list timer;
};
# 148 "../include/linux/kthread.h"
extern void __kthread_init_worker(struct kthread_worker *worker,
   const char *name, struct lock_class_key *key);
# 171 "../include/linux/kthread.h"
int kthread_worker_fn(void *worker_ptr);

__attribute__((__format__(printf, 2, 3)))
struct kthread_worker *
kthread_create_worker(unsigned int flags, const char namefmt[], ...);

__attribute__((__format__(printf, 3, 4))) struct kthread_worker *
kthread_create_worker_on_cpu(int cpu, unsigned int flags,
        const char namefmt[], ...);

bool kthread_queue_work(struct kthread_worker *worker,
   struct kthread_work *work);

bool kthread_queue_delayed_work(struct kthread_worker *worker,
    struct kthread_delayed_work *dwork,
    unsigned long delay);

bool kthread_mod_delayed_work(struct kthread_worker *worker,
         struct kthread_delayed_work *dwork,
         unsigned long delay);

void kthread_flush_work(struct kthread_work *work);
void kthread_flush_worker(struct kthread_worker *worker);

bool kthread_cancel_work_sync(struct kthread_work *work);
bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *work);

void kthread_destroy_worker(struct kthread_worker *worker);

struct cgroup_subsys_state;


void kthread_associate_blkcg(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *kthread_blkcg(void);
# 5 "../include/linux/psi_types.h" 2
# 169 "../include/linux/psi_types.h"
struct psi_group { };
# 24 "../include/linux/cgroup-defs.h" 2



struct cgroup;
struct cgroup_root;
struct cgroup_subsys;
struct cgroup_taskset;
struct kernfs_node;
struct kernfs_ops;
struct kernfs_open_file;
struct seq_file;
struct poll_table_struct;







enum cgroup_subsys_id {

# 1 "../include/linux/cgroup_subsys.h" 1
# 13 "../include/linux/cgroup_subsys.h"
cpuset_cgrp_id,



cpu_cgrp_id,



cpuacct_cgrp_id,



io_cgrp_id,



memory_cgrp_id,



devices_cgrp_id,







net_cls_cgrp_id,



perf_event_cgrp_id,



net_prio_cgrp_id,



hugetlb_cgrp_id,



pids_cgrp_id,



rdma_cgrp_id,
# 45 "../include/linux/cgroup-defs.h" 2
 CGROUP_SUBSYS_COUNT,
};



enum {
 CSS_NO_REF = (1 << 0),
 CSS_ONLINE = (1 << 1),
 CSS_RELEASED = (1 << 2),
 CSS_VISIBLE = (1 << 3),
 CSS_DYING = (1 << 4),
};


enum {

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,


 CGRP_FREEZE,


 CGRP_FROZEN,
};


enum {
 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),






 CGRP_ROOT_NS_DELEGATE = (1 << 3),




 CGRP_ROOT_CPUSET_V2_MODE = (1 << 4),




 CGRP_ROOT_MEMORY_LOCAL_EVENTS = (1 << 5),
};


enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_NS_DELEGATABLE = (1 << 2),

 CFTYPE_NO_PREFIX = (1 << 3),
 CFTYPE_WORLD_WRITABLE = (1 << 4),
 CFTYPE_DEBUG = (1 << 5),


 __CFTYPE_ONLY_ON_DFL = (1 << 16),
 __CFTYPE_NOT_ON_DFL = (1 << 17),
};






struct cgroup_file {

 struct kernfs_node *kn;
 unsigned long notified_at;
 struct timer_list notify_timer;
};
# 133 "../include/linux/cgroup-defs.h"
struct cgroup_subsys_state {

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct list_head sibling;
 struct list_head children;


 struct list_head rstat_css_node;





 int id;

 unsigned int flags;







 u64 serial_nr;





 atomic_t online_cnt;


 struct work_struct destroy_work;
 struct rcu_work destroy_rwork;





 struct cgroup_subsys_state *parent;
};
# 190 "../include/linux/cgroup-defs.h"
struct css_set {





 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];


 refcount_t refcount;







 struct css_set *dom_cset;


 struct cgroup *dfl_cgrp;


 int nr_tasks;
# 222 "../include/linux/cgroup-defs.h"
 struct list_head tasks;
 struct list_head mg_tasks;
 struct list_head dying_tasks;


 struct list_head task_iters;
# 236 "../include/linux/cgroup-defs.h"
 struct list_head e_cset_node[CGROUP_SUBSYS_COUNT];


 struct list_head threaded_csets;
 struct list_head threaded_csets_node;





 struct hlist_node hlist;





 struct list_head cgrp_links;





 struct list_head mg_preload_node;
 struct list_head mg_node;
# 268 "../include/linux/cgroup-defs.h"
 struct cgroup *mg_src_cgrp;
 struct cgroup *mg_dst_cgrp;
 struct css_set *mg_dst_cset;


 bool dead;


 struct callback_head callback_head;
};

struct cgroup_base_stat {
 struct task_cputime cputime;
};
# 303 "../include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {




 struct u64_stats_sync bsync;
 struct cgroup_base_stat bstat;





 struct cgroup_base_stat last_bstat;
# 328 "../include/linux/cgroup-defs.h"
 struct cgroup *updated_children;
 struct cgroup *updated_next;
};

struct cgroup_freezer_state {

 bool freeze;


 int e_freeze;




 int nr_frozen_descendants;





 int nr_frozen_tasks;
};

struct cgroup {

 struct cgroup_subsys_state self;

 unsigned long flags;
# 365 "../include/linux/cgroup-defs.h"
 int id;







 int level;


 int max_depth;
# 389 "../include/linux/cgroup-defs.h"
 int nr_descendants;
 int nr_dying_descendants;
 int max_descendants;
# 404 "../include/linux/cgroup-defs.h"
 int nr_populated_csets;
 int nr_populated_domain_children;
 int nr_populated_threaded_children;

 int nr_threaded_children;

 struct kernfs_node *kn;
 struct cgroup_file procs_file;
 struct cgroup_file events_file;
# 421 "../include/linux/cgroup-defs.h"
 u16 subtree_control;
 u16 subtree_ss_mask;
 u16 old_subtree_control;
 u16 old_subtree_ss_mask;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroup_root *root;





 struct list_head cset_links;
# 444 "../include/linux/cgroup-defs.h"
 struct list_head e_csets[CGROUP_SUBSYS_COUNT];
# 453 "../include/linux/cgroup-defs.h"
 struct cgroup *dom_cgrp;
 struct cgroup *old_dom_cgrp;


 struct cgroup_rstat_cpu *rstat_cpu;
 struct list_head rstat_css_list;


 struct cgroup_base_stat pending_bstat;
 struct cgroup_base_stat bstat;
 struct prev_cputime prev_cputime;





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 wait_queue_head_t offline_waitq;


 struct work_struct release_agent_work;


 struct psi_group psi;


 struct cgroup_bpf bpf;


 atomic_t congestion_count;


 struct cgroup_freezer_state freezer;


 int ancestor_ids[];
};






struct cgroup_root {
 struct kernfs_root *kf_root;


 unsigned int subsys_mask;


 int hierarchy_id;


 struct cgroup cgrp;


 int cgrp_ancestor_id_storage;


 atomic_t nr_cgrps;


 struct list_head root_list;


 unsigned int flags;


 struct idr cgroup_idr;


 char release_agent_path[4096];


 char name[64];
};
# 540 "../include/linux/cgroup-defs.h"
struct cftype {





 char name[64];
 unsigned long private;





 size_t max_write_len;


 unsigned int flags;







 unsigned int file_offset;





 struct cgroup_subsys *ss;
 struct list_head node;
 struct kernfs_ops *kf_ops;

 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);





 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);


 int (*seq_show)(struct seq_file *sf, void *v);


 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);







 ssize_t (*write)(struct kernfs_open_file *of,
    char *buf, size_t nbytes, loff_t off);

 __poll_t (*poll)(struct kernfs_open_file *of,
    struct poll_table_struct *pt);




};





struct cgroup_subsys {
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_released)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);
 void (*css_reset)(struct cgroup_subsys_state *css);
 void (*css_rstat_flush)(struct cgroup_subsys_state *css, int cpu);
 int (*css_extra_stat_show)(struct seq_file *seq,
       struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_taskset *tset);
 void (*post_attach)(void);
 int (*can_fork)(struct task_struct *task);
 void (*cancel_fork)(struct task_struct *task);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct task_struct *task);
 void (*release)(struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 bool early_init:1;
# 664 "../include/linux/cgroup-defs.h"
 bool implicit_on_dfl:1;
# 676 "../include/linux/cgroup-defs.h"
 bool threaded:1;
# 690 "../include/linux/cgroup-defs.h"
 bool broken_hierarchy:1;
 bool warned_broken_hierarchy:1;


 int id;
 const char *name;


 const char *legacy_name;


 struct cgroup_root *root;


 struct idr css_idr;





 struct list_head cfts;





 struct cftype *dfl_cftypes;
 struct cftype *legacy_cftypes;
# 726 "../include/linux/cgroup-defs.h"
 unsigned int depends_on;
};

extern struct percpu_rw_semaphore cgroup_threadgroup_rwsem;
# 738 "../include/linux/cgroup-defs.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_begin(struct task_struct *tsk)
{
 percpu_down_read(&cgroup_threadgroup_rwsem);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_threadgroup_change_end(struct task_struct *tsk)
{
 percpu_up_read(&cgroup_threadgroup_rwsem);
}
# 796 "../include/linux/cgroup-defs.h"
struct sock_cgroup_data {
 union {

  struct {
   u8 is_data;
   u8 padding;
   u16 prioidx;
   u32 classid;
  } __attribute__((__packed__));
# 813 "../include/linux/cgroup-defs.h"
  u64 val;
 };
};






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u16 sock_cgroup_prioidx(const struct sock_cgroup_data *skcd)
{

 return (skcd->is_data & 1) ? skcd->prioidx : 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 sock_cgroup_classid(const struct sock_cgroup_data *skcd)
{

 return (skcd->is_data & 1) ? skcd->classid : 0;
}





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sock_cgroup_set_prioidx(struct sock_cgroup_data *skcd,
        u16 prioidx)
{
 struct sock_cgroup_data skcd_buf = {{ .val = ({ union { typeof(skcd->val) __val; char __c[1]; } __u; if (1) __read_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); else __read_once_size_nocheck(&(skcd->val), __u.__c, sizeof(skcd->val)); do { } while (0); __u.__val; }) }};

 if (sock_cgroup_prioidx(&skcd_buf) == prioidx)
  return;

 if (!(skcd_buf.is_data & 1)) {
  skcd_buf.val = 0;
  skcd_buf.is_data = 1;
 }

 skcd_buf.prioidx = prioidx;
 ({ union { typeof(skcd->val) __val; char __c[1]; } __u = { .__val = ( typeof(skcd->val)) (skcd_buf.val) }; __write_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void sock_cgroup_set_classid(struct sock_cgroup_data *skcd,
        u32 classid)
{
 struct sock_cgroup_data skcd_buf = {{ .val = ({ union { typeof(skcd->val) __val; char __c[1]; } __u; if (1) __read_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); else __read_once_size_nocheck(&(skcd->val), __u.__c, sizeof(skcd->val)); do { } while (0); __u.__val; }) }};

 if (sock_cgroup_classid(&skcd_buf) == classid)
  return;

 if (!(skcd_buf.is_data & 1)) {
  skcd_buf.val = 0;
  skcd_buf.is_data = 1;
 }

 skcd_buf.classid = classid;
 ({ union { typeof(skcd->val) __val; char __c[1]; } __u = { .__val = ( typeof(skcd->val)) (skcd_buf.val) }; __write_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); __u.__val; });
}
# 29 "../include/linux/cgroup.h" 2
# 50 "../include/linux/cgroup.h"
struct css_task_iter {
 struct cgroup_subsys *ss;
 unsigned int flags;

 struct list_head *cset_pos;
 struct list_head *cset_head;

 struct list_head *tcset_pos;
 struct list_head *tcset_head;

 struct list_head *task_pos;
 struct list_head *tasks_head;
 struct list_head *mg_tasks_head;
 struct list_head *dying_tasks_head;

 struct css_set *cur_cset;
 struct css_set *cur_dcset;
 struct task_struct *cur_task;
 struct list_head iters_node;
};

extern struct cgroup_root cgrp_dfl_root;
extern struct css_set init_css_set;



# 1 "../include/linux/cgroup_subsys.h" 1
# 13 "../include/linux/cgroup_subsys.h"
extern struct cgroup_subsys cpuset_cgrp_subsys;



extern struct cgroup_subsys cpu_cgrp_subsys;



extern struct cgroup_subsys cpuacct_cgrp_subsys;



extern struct cgroup_subsys io_cgrp_subsys;



extern struct cgroup_subsys memory_cgrp_subsys;



extern struct cgroup_subsys devices_cgrp_subsys;







extern struct cgroup_subsys net_cls_cgrp_subsys;



extern struct cgroup_subsys perf_event_cgrp_subsys;



extern struct cgroup_subsys net_prio_cgrp_subsys;



extern struct cgroup_subsys hugetlb_cgrp_subsys;



extern struct cgroup_subsys pids_cgrp_subsys;



extern struct cgroup_subsys rdma_cgrp_subsys;
# 76 "../include/linux/cgroup.h" 2





# 1 "../include/linux/cgroup_subsys.h" 1
# 13 "../include/linux/cgroup_subsys.h"
extern struct static_key_true cpuset_cgrp_subsys_enabled_key; extern struct static_key_true cpuset_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpu_cgrp_subsys_enabled_key; extern struct static_key_true cpu_cgrp_subsys_on_dfl_key;



extern struct static_key_true cpuacct_cgrp_subsys_enabled_key; extern struct static_key_true cpuacct_cgrp_subsys_on_dfl_key;



extern struct static_key_true io_cgrp_subsys_enabled_key; extern struct static_key_true io_cgrp_subsys_on_dfl_key;



extern struct static_key_true memory_cgrp_subsys_enabled_key; extern struct static_key_true memory_cgrp_subsys_on_dfl_key;



extern struct static_key_true devices_cgrp_subsys_enabled_key; extern struct static_key_true devices_cgrp_subsys_on_dfl_key;







extern struct static_key_true net_cls_cgrp_subsys_enabled_key; extern struct static_key_true net_cls_cgrp_subsys_on_dfl_key;



extern struct static_key_true perf_event_cgrp_subsys_enabled_key; extern struct static_key_true perf_event_cgrp_subsys_on_dfl_key;



extern struct static_key_true net_prio_cgrp_subsys_enabled_key; extern struct static_key_true net_prio_cgrp_subsys_on_dfl_key;



extern struct static_key_true hugetlb_cgrp_subsys_enabled_key; extern struct static_key_true hugetlb_cgrp_subsys_on_dfl_key;



extern struct static_key_true pids_cgrp_subsys_enabled_key; extern struct static_key_true pids_cgrp_subsys_on_dfl_key;



extern struct static_key_true rdma_cgrp_subsys_enabled_key; extern struct static_key_true rdma_cgrp_subsys_on_dfl_key;
# 82 "../include/linux/cgroup.h" 2
# 98 "../include/linux/cgroup.h"
bool css_has_online_children(struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_e_css(struct cgroup *cgroup,
      struct cgroup_subsys *ss);
struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *cgroup,
          struct cgroup_subsys *ss);
struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *dentry,
             struct cgroup_subsys *ss);

struct cgroup *cgroup_get_from_path(const char *path);
struct cgroup *cgroup_get_from_fd(int fd);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

int cgroup_add_dfl_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_add_legacy_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);
void cgroup_file_notify(struct cgroup_file *cfile);

int task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);
int cgroupstats_build(struct cgroupstats *stats, struct dentry *dentry);
int proc_cgroup_show(struct seq_file *m, struct pid_namespace *ns,
       struct pid *pid, struct task_struct *tsk);

void cgroup_fork(struct task_struct *p);
extern int cgroup_can_fork(struct task_struct *p);
extern void cgroup_cancel_fork(struct task_struct *p);
extern void cgroup_post_fork(struct task_struct *p);
void cgroup_exit(struct task_struct *p);
void cgroup_release(struct task_struct *p);
void cgroup_free(struct task_struct *p);

int cgroup_init_early(void);
int cgroup_init(void);

int cgroup_parse_float(const char *input, unsigned dec_shift, s64 *v);





struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);
struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *pos,
          struct cgroup_subsys_state *css);
struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *pos,
           struct cgroup_subsys_state *css);

struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset,
      struct cgroup_subsys_state **dst_cssp);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset,
     struct cgroup_subsys_state **dst_cssp);

void cgroup_enable_task_cg_lists(void);
void css_task_iter_start(struct cgroup_subsys_state *css, unsigned int flags,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);
# 314 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get(&css->refcnt);
}
# 327 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_get_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_get_many(&css->refcnt, n);
}
# 344 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget(&css->refcnt);
 return true;
}
# 361 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_tryget_online(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  return percpu_ref_tryget_live(&css->refcnt);
 return true;
}
# 383 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool css_is_dying(struct cgroup_subsys_state *css)
{
 return !(css->flags & CSS_NO_REF) && percpu_ref_is_dying(&css->refcnt);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put(&css->refcnt);
}
# 407 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void css_put_many(struct cgroup_subsys_state *css, unsigned int n)
{
 if (!(css->flags & CSS_NO_REF))
  percpu_ref_put_many(&css->refcnt, n);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_get(struct cgroup *cgrp)
{
 css_get(&cgrp->self);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_tryget(struct cgroup *cgrp)
{
 return css_tryget(&cgrp->self);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_put(struct cgroup *cgrp)
{
 css_put(&cgrp->self);
}
# 472 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct css_set *task_css_set(struct task_struct *task)
{
 return ({ typeof(*((task)->cgroups)) *________p1 = (typeof(*((task)->cgroups)) *)({ union { typeof(((task)->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((task)->cgroups)), __u.__c, sizeof(((task)->cgroups))); else __read_once_size_nocheck(&(((task)->cgroups)), __u.__c, sizeof(((task)->cgroups))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((task)->cgroups)) *)(________p1)); });
}
# 484 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ union { typeof((((task))->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); else __read_once_size_nocheck(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)];
}
# 499 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *
task_get_css(struct task_struct *task, int subsys_id)
{
 struct cgroup_subsys_state *css;

 rcu_read_lock();
 while (true) {
  css = task_css(task, subsys_id);






  if (__builtin_expect(!!(css_tryget(css)), 1))
   break;
  cpu_relax();
 }
 rcu_read_unlock();
 return css;
}
# 529 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_css_is_root(struct task_struct *task, int subsys_id)
{
 return ({ typeof(*(((task))->cgroups)) *________p1 = (typeof(*(((task))->cgroups)) *)({ union { typeof((((task))->cgroups)) __val; char __c[1]; } __u; if (1) __read_once_size(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); else __read_once_size_nocheck(&((((task))->cgroups)), __u.__c, sizeof((((task))->cgroups))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(((task))->cgroups)) *)(________p1)); })->subsys[(subsys_id)] ==
  init_css_set.subsys[subsys_id];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *task_dfl_cgroup(struct task_struct *task)
{
 return task_css_set(task)->dfl_cgrp;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_parent(struct cgroup *cgrp)
{
 struct cgroup_subsys_state *parent_css = cgrp->self.parent;

 if (parent_css)
  return ({ void *__mptr = (void *)(parent_css); do { extern void __compiletime_assert_551(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(parent_css)), typeof(((struct cgroup *)0)->self)) && !__builtin_types_compatible_p(typeof(*(parent_css)), typeof(void))))) __compiletime_assert_551(); } while (0); ((struct cgroup *)(__mptr - __builtin_offsetof(struct cgroup, self))); });
 return ((void *)0);
}
# 564 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_descendant(struct cgroup *cgrp,
     struct cgroup *ancestor)
{
 if (cgrp->root != ancestor->root || cgrp->level < ancestor->level)
  return false;
 return cgrp->ancestor_ids[ancestor->level] == ancestor->id;
}
# 583 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *cgroup_ancestor(struct cgroup *cgrp,
          int ancestor_level)
{
 if (cgrp->level < ancestor_level)
  return ((void *)0);
 while (cgrp && cgrp->level > ancestor_level)
  cgrp = cgroup_parent(cgrp);
 return cgrp;
}
# 602 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool task_under_cgroup_hierarchy(struct task_struct *task,
            struct cgroup *ancestor)
{
 struct css_set *cset = task_css_set(task);

 return cgroup_is_descendant(cset->dfl_cgrp, ancestor);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_is_populated(struct cgroup *cgrp)
{
 return cgrp->nr_populated_csets + cgrp->nr_populated_domain_children +
  cgrp->nr_populated_threaded_children;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) ino_t cgroup_ino(struct cgroup *cgrp)
{
 return cgrp->kn->id.ino;
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *of_cft(struct kernfs_open_file *of)
{
 return of->kn->priv;
}

struct cgroup_subsys_state *of_css(struct kernfs_open_file *of);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cftype *seq_cft(struct seq_file *seq)
{
 return of_cft(seq->private);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup_subsys_state *seq_css(struct seq_file *seq)
{
 return of_css(seq->private);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_name(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_name(cgrp->kn, buf, buflen);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int cgroup_path(struct cgroup *cgrp, char *buf, size_t buflen)
{
 return kernfs_path(cgrp->kn, buf, buflen);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_name(struct cgroup *cgrp)
{
 pr_cont_kernfs_name(cgrp->kn);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void pr_cont_cgroup_path(struct cgroup *cgrp)
{
 pr_cont_kernfs_path(cgrp->kn);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct psi_group *cgroup_psi(struct cgroup *cgrp)
{
 return &cgrp->psi;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_init_kthreadd(void)
{





 get_current()->no_cgroup_migration = 1;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_kthread_ready(void)
{




 get_current()->no_cgroup_migration = 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) union kernfs_node_id *cgroup_get_kernfs_id(struct cgroup *cgrp)
{
 return &cgrp->kn->id;
}

void cgroup_path_from_kernfs_id(const union kernfs_node_id *id,
     char *buf, size_t buflen);
# 751 "../include/linux/cgroup.h"
void cgroup_rstat_updated(struct cgroup *cgrp, int cpu);
void cgroup_rstat_flush(struct cgroup *cgrp);
void cgroup_rstat_flush_irqsafe(struct cgroup *cgrp);
void cgroup_rstat_flush_hold(struct cgroup *cgrp);
void cgroup_rstat_flush_release(void);





void cpuacct_charge(struct task_struct *tsk, u64 cputime);
void cpuacct_account_field(struct task_struct *tsk, int index, u64 val);






void __cgroup_account_cputime(struct cgroup *cgrp, u64 delta_exec);
void __cgroup_account_cputime_field(struct cgroup *cgrp,
        enum cpu_usage_stat index, u64 delta_exec);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime(struct task_struct *task,
       u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_charge(task, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime(cgrp, delta_exec);
 rcu_read_unlock();
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_account_cputime_field(struct task_struct *task,
      enum cpu_usage_stat index,
      u64 delta_exec)
{
 struct cgroup *cgrp;

 cpuacct_account_field(task, index, delta_exec);

 rcu_read_lock();
 cgrp = task_dfl_cgroup(task);
 if (cgroup_parent(cgrp))
  __cgroup_account_cputime_field(cgrp, index, delta_exec);
 rcu_read_unlock();
}
# 819 "../include/linux/cgroup.h"
extern spinlock_t cgroup_sk_update_lock;


void cgroup_sk_alloc_disable(void);
void cgroup_sk_alloc(struct sock_cgroup_data *skcd);
void cgroup_sk_free(struct sock_cgroup_data *skcd);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct cgroup *sock_cgroup_ptr(struct sock_cgroup_data *skcd)
{

 unsigned long v;





 v = ({ union { typeof(skcd->val) __val; char __c[1]; } __u; if (1) __read_once_size(&(skcd->val), __u.__c, sizeof(skcd->val)); else __read_once_size_nocheck(&(skcd->val), __u.__c, sizeof(skcd->val)); do { } while (0); __u.__val; });

 if (v & 1)
  return &cgrp_dfl_root.cgrp;

 return (struct cgroup *)(unsigned long)v ?: &cgrp_dfl_root.cgrp;



}
# 853 "../include/linux/cgroup.h"
struct cgroup_namespace {
 refcount_t count;
 struct ns_common ns;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct css_set *root_cset;
};

extern struct cgroup_namespace init_cgroup_ns;



void free_cgroup_ns(struct cgroup_namespace *ns);

struct cgroup_namespace *copy_cgroup_ns(unsigned long flags,
     struct user_namespace *user_ns,
     struct cgroup_namespace *old_ns);

int cgroup_path_ns(struct cgroup *cgrp, char *buf, size_t buflen,
     struct cgroup_namespace *ns);
# 886 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void get_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns)
  refcount_inc_checked(&ns->count);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void put_cgroup_ns(struct cgroup_namespace *ns)
{
 if (ns && refcount_dec_and_test_checked(&ns->count))
  free_cgroup_ns(ns);
}



void cgroup_enter_frozen(void);
void cgroup_leave_frozen(bool always_leave);
void cgroup_update_frozen(struct cgroup *cgrp);
void cgroup_freeze(struct cgroup *cgrp, bool freeze);
void cgroup_freezer_migrate_task(struct task_struct *task, struct cgroup *src,
     struct cgroup *dst);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_task_freeze(struct task_struct *task)
{
 bool ret;

 if (task->flags & 0x00200000)
  return false;

 rcu_read_lock();
 ret = test_bit(CGRP_FREEZE, &task_dfl_cgroup(task)->flags);
 rcu_read_unlock();

 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool cgroup_task_frozen(struct task_struct *task)
{
 return task->frozen;
}
# 942 "../include/linux/cgroup.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_get(struct cgroup *cgrp)
{
 percpu_ref_get(&cgrp->bpf.refcnt);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void cgroup_bpf_put(struct cgroup *cgrp)
{
 percpu_ref_put(&cgrp->bpf.refcnt);
}
# 10 "../include/linux/hugetlb.h" 2




struct ctl_table;
struct user_struct;
struct mmu_gather;


typedef struct { unsigned long pd; } hugepd_t;
# 30 "../include/linux/hugetlb.h"
struct hugepage_subpool {
 spinlock_t lock;
 long count;
 long max_hpages;
 long used_hpages;

 struct hstate *hstate;
 long min_hpages;
 long rsv_hpages;

};

struct resv_map {
 struct kref refs;
 spinlock_t lock;
 struct list_head regions;
 long adds_in_progress;
 struct list_head region_cache;
 long region_cache_count;
};
extern struct resv_map *resv_map_alloc(void);
void resv_map_release(struct kref *ref);

extern spinlock_t hugetlb_lock;
extern int hugetlb_max_hstate __attribute__((__section__(".data..read_mostly")));



struct hugepage_subpool *hugepage_new_subpool(struct hstate *h, long max_hpages,
      long min_hpages);
void hugepage_put_subpool(struct hugepage_subpool *spool);

void reset_vma_resv_huge_pages(struct vm_area_struct *vma);
int hugetlb_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
int hugetlb_overcommit_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
int hugetlb_treat_movable_handler(struct ctl_table *, int, void *, size_t *, loff_t *);


int hugetlb_mempolicy_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);


int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *);
long follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *,
    struct page **, struct vm_area_struct **,
    unsigned long *, unsigned long *, long, unsigned int,
    int *);
void unmap_hugepage_range(struct vm_area_struct *,
     unsigned long, unsigned long, struct page *);
void __unmap_hugepage_range_final(struct mmu_gather *tlb,
     struct vm_area_struct *vma,
     unsigned long start, unsigned long end,
     struct page *ref_page);
void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,
    unsigned long start, unsigned long end,
    struct page *ref_page);
void hugetlb_report_meminfo(struct seq_file *);
int hugetlb_report_node_meminfo(int, char *);
void hugetlb_show_meminfo(void);
unsigned long hugetlb_total_pages(void);
vm_fault_t hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,
   unsigned long address, unsigned int flags);
int hugetlb_mcopy_atomic_pte(struct mm_struct *dst_mm, pte_t *dst_pte,
    struct vm_area_struct *dst_vma,
    unsigned long dst_addr,
    unsigned long src_addr,
    struct page **pagep);
int hugetlb_reserve_pages(struct inode *inode, long from, long to,
      struct vm_area_struct *vma,
      vm_flags_t vm_flags);
long hugetlb_unreserve_pages(struct inode *inode, long start, long end,
      long freed);
bool isolate_huge_page(struct page *page, struct list_head *list);
void putback_active_hugepage(struct page *page);
void move_hugetlb_state(struct page *oldpage, struct page *newpage, int reason);
void free_huge_page(struct page *page);
void hugetlb_fix_reserve_counts(struct inode *inode);
extern struct mutex *hugetlb_fault_mutex_table;
u32 hugetlb_fault_mutex_hash(struct hstate *h, struct address_space *mapping,
    unsigned long idx, unsigned long address);

pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud);

extern int sysctl_hugetlb_shm_group;
extern struct list_head huge_boot_pages;



pte_t *huge_pte_alloc(struct mm_struct *mm,
   unsigned long addr, unsigned long sz);
pte_t *huge_pte_offset(struct mm_struct *mm,
         unsigned long addr, unsigned long sz);
int huge_pmd_unshare(struct mm_struct *mm, unsigned long *addr, pte_t *ptep);
void adjust_range_if_pmd_sharing_possible(struct vm_area_struct *vma,
    unsigned long *start, unsigned long *end);
struct page *follow_huge_addr(struct mm_struct *mm, unsigned long address,
         int write);
struct page *follow_huge_pd(struct vm_area_struct *vma,
       unsigned long address, hugepd_t hpd,
       int flags, int pdshift);
struct page *follow_huge_pmd(struct mm_struct *mm, unsigned long address,
    pmd_t *pmd, int flags);
struct page *follow_huge_pud(struct mm_struct *mm, unsigned long address,
    pud_t *pud, int flags);
struct page *follow_huge_pgd(struct mm_struct *mm, unsigned long address,
        pgd_t *pgd, int flags);

int pmd_huge(pmd_t pmd);
int pud_huge(pud_t pud);
unsigned long hugetlb_change_protection(struct vm_area_struct *vma,
  unsigned long address, unsigned long end, pgprot_t newprot);

bool is_hugetlb_entry_migration(pte_t pte);
# 237 "../include/linux/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int pgd_write(pgd_t pgd)
{
 do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../include/linux/hugetlb.h\"; .popsection; .long 14472b - 14470b; .short 239; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
 return 0;
}




enum {




 HUGETLB_SHMFS_INODE = 1,




 HUGETLB_ANONHUGE_INODE = 2,
};


struct hugetlbfs_sb_info {
 long max_inodes;
 long free_inodes;
 spinlock_t stat_lock;
 struct hstate *hstate;
 struct hugepage_subpool *spool;
 kuid_t uid;
 kgid_t gid;
 umode_t mode;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hugetlbfs_sb_info *HUGETLBFS_SB(struct super_block *sb)
{
 return sb->s_fs_info;
}

struct hugetlbfs_inode_info {
 struct shared_policy policy;
 struct inode vfs_inode;
 unsigned int seals;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hugetlbfs_inode_info *HUGETLBFS_I(struct inode *inode)
{
 return ({ void *__mptr = (void *)(inode); do { extern void __compiletime_assert_284(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(inode)), typeof(((struct hugetlbfs_inode_info *)0)->vfs_inode)) && !__builtin_types_compatible_p(typeof(*(inode)), typeof(void))))) __compiletime_assert_284(); } while (0); ((struct hugetlbfs_inode_info *)(__mptr - __builtin_offsetof(struct hugetlbfs_inode_info, vfs_inode))); });
}

extern const struct file_operations hugetlbfs_file_operations;
extern const struct vm_operations_struct hugetlb_vm_ops;
struct file *hugetlb_file_setup(const char *name, size_t size, vm_flags_t acct,
    struct user_struct **user, int creat_flags,
    int page_size_log);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_file_hugepages(struct file *file)
{
 if (file->f_op == &hugetlbfs_file_operations)
  return true;

 return is_file_shm_hugepages(file);
}
# 325 "../include/linux/hugetlb.h"
struct hstate {
 int next_nid_to_alloc;
 int next_nid_to_free;
 unsigned int order;
 unsigned long mask;
 unsigned long max_huge_pages;
 unsigned long nr_huge_pages;
 unsigned long free_huge_pages;
 unsigned long resv_huge_pages;
 unsigned long surplus_huge_pages;
 unsigned long nr_overcommit_huge_pages;
 struct list_head hugepage_activelist;
 struct list_head hugepage_freelists[(1 << 6)];
 unsigned int nr_huge_pages_node[(1 << 6)];
 unsigned int free_huge_pages_node[(1 << 6)];
 unsigned int surplus_huge_pages_node[(1 << 6)];


 struct cftype cgroup_files[5];

 char name[32];
};

struct huge_bootmem_page {
 struct list_head list;
 struct hstate *hstate;
};

struct page *alloc_huge_page(struct vm_area_struct *vma,
    unsigned long addr, int avoid_reserve);
struct page *alloc_huge_page_node(struct hstate *h, int nid);
struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,
    nodemask_t *nmask);
struct page *alloc_huge_page_vma(struct hstate *h, struct vm_area_struct *vma,
    unsigned long address);
struct page *alloc_migrate_huge_page(struct hstate *h, gfp_t gfp_mask,
         int nid, nodemask_t *nmask);
int huge_add_to_page_cache(struct page *page, struct address_space *mapping,
   unsigned long idx);


int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) __alloc_bootmem_huge_page(struct hstate *h);
int __attribute__((__section__(".init.text"))) __attribute__((__cold__)) alloc_bootmem_huge_page(struct hstate *h);

void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) hugetlb_bad_size(void);
void __attribute__((__section__(".init.text"))) __attribute__((__cold__)) hugetlb_add_hstate(unsigned order);
struct hstate *size_to_hstate(unsigned long size);





extern struct hstate hstates[4];
extern unsigned int default_hstate_idx;



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hstate *hstate_inode(struct inode *i)
{
 return HUGETLBFS_SB(i->i_sb)->hstate;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hstate *hstate_file(struct file *f)
{
 return hstate_inode(file_inode(f));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hstate *hstate_sizelog(int page_size_log)
{
 if (!page_size_log)
  return &(hstates[default_hstate_idx]);

 return size_to_hstate(1UL << page_size_log);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hstate *hstate_vma(struct vm_area_struct *vma)
{
 return hstate_file(vma->vm_file);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long huge_page_size(struct hstate *h)
{
 return (unsigned long)((1UL) << 16) << h->order;
}

extern unsigned long vma_kernel_pagesize(struct vm_area_struct *vma);

extern unsigned long vma_mmu_pagesize(struct vm_area_struct *vma);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long huge_page_mask(struct hstate *h)
{
 return h->mask;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int huge_page_order(struct hstate *h)
{
 return h->order;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned huge_page_shift(struct hstate *h)
{
 return h->order + 16;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hstate_is_gigantic(struct hstate *h)
{
 return huge_page_order(h) >= 14;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int pages_per_huge_page(struct hstate *h)
{
 return 1 << h->order;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned int blocks_per_huge_page(struct hstate *h)
{
 return huge_page_size(h) / 512;
}


# 1 "../arch/arm64/include/asm/hugetlb.h" 1
# 17 "../arch/arm64/include/asm/hugetlb.h"
extern bool arch_hugetlb_migration_supported(struct hstate *h);



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t huge_ptep_get(pte_t *ptep)
{
 return ({ union { typeof(*ptep) __val; char __c[1]; } __u; if (1) __read_once_size(&(*ptep), __u.__c, sizeof(*ptep)); else __read_once_size_nocheck(&(*ptep), __u.__c, sizeof(*ptep)); do { } while (0); __u.__val; });
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int is_hugepage_only_range(struct mm_struct *mm,
      unsigned long addr, unsigned long len)
{
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void arch_clear_hugepage_flags(struct page *page)
{
 clear_bit(PG_arch_1, &page->flags);
}

extern pte_t arch_make_huge_pte(pte_t entry, struct vm_area_struct *vma,
    struct page *page, int writable);


extern void set_huge_pte_at(struct mm_struct *mm, unsigned long addr,
       pte_t *ptep, pte_t pte);

extern int huge_ptep_set_access_flags(struct vm_area_struct *vma,
          unsigned long addr, pte_t *ptep,
          pte_t pte, int dirty);

extern pte_t huge_ptep_get_and_clear(struct mm_struct *mm,
         unsigned long addr, pte_t *ptep);

extern void huge_ptep_set_wrprotect(struct mm_struct *mm,
        unsigned long addr, pte_t *ptep);

extern void huge_ptep_clear_flush(struct vm_area_struct *vma,
      unsigned long addr, pte_t *ptep);

extern void huge_pte_clear(struct mm_struct *mm, unsigned long addr,
      pte_t *ptep, unsigned long sz);
extern void set_huge_swap_pte_at(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep, pte_t pte, unsigned long sz);



# 1 "../include/asm-generic/hugetlb.h" 1




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t mk_huge_pte(struct page *page, pgprot_t pgprot)
{
 return ((pte_t) { (((phys_addr_t)((unsigned long)((page) - vmemmap)) << 16) | ((pgprot).pgprot)) } );
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long huge_pte_write(pte_t pte)
{
 return (!!(((pte).pte) & ((((pteval_t)(1)) << 51))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long huge_pte_dirty(pte_t pte)
{
 return ((!!(((pte).pte) & (((pteval_t)(1)) << 55))) || ((!!(((pte).pte) & ((((pteval_t)(1)) << 51)))) && !(((pte).pte) & (((pteval_t)(1)) << 7))));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t huge_pte_mkwrite(pte_t pte)
{
 return pte_mkwrite(pte);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t huge_pte_mkdirty(pte_t pte)
{
 return pte_mkdirty(pte);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t huge_pte_modify(pte_t pte, pgprot_t newprot)
{
 return pte_modify(pte, newprot);
}
# 44 "../include/asm-generic/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hugetlb_free_pgd_range(struct mmu_gather *tlb,
  unsigned long addr, unsigned long end,
  unsigned long floor, unsigned long ceiling)
{
 free_pgd_range(tlb, addr, end, floor, ceiling);
}
# 77 "../include/asm-generic/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int huge_pte_none(pte_t pte)
{
 return (!((pte).pte));
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t huge_pte_wrprotect(pte_t pte)
{
 return pte_wrprotect(pte);
}



static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int prepare_hugepage_range(struct file *file,
  unsigned long addr, unsigned long len)
{
 struct hstate *h = hstate_file(file);

 if (len & ~huge_page_mask(h))
  return -22;
 if (addr & ~huge_page_mask(h))
  return -22;

 return 0;
}
# 130 "../include/asm-generic/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool gigantic_page_runtime_supported(void)
{
 return 1;
}
# 64 "../arch/arm64/include/asm/hugetlb.h" 2
# 445 "../include/linux/hugetlb.h" 2
# 454 "../include/linux/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct hstate *page_hstate(struct page *page)
{
 ((void)(sizeof(( long)(!PageHuge(page)))));
 return size_to_hstate(((1UL) << 16) << compound_order(page));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned hstate_index_to_shift(unsigned index)
{
 return hstates[index].order + 16;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int hstate_index(struct hstate *h)
{
 return h - hstates;
}

unsigned long __basepage_index(struct page *page);


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long basepage_index(struct page *page)
{
 if (!PageCompound(page))
  return page->index;

 return __basepage_index(page);
}

extern int dissolve_free_huge_page(struct page *page);
extern int dissolve_free_huge_pages(unsigned long start_pfn,
        unsigned long end_pfn);
# 504 "../include/linux/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hugepage_migration_supported(struct hstate *h)
{
 return arch_hugetlb_migration_supported(h);
}
# 524 "../include/linux/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hugepage_movable_supported(struct hstate *h)
{
 if (!hugepage_migration_supported(h))
  return false;

 if (hstate_is_gigantic(h))
  return false;
 return true;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *huge_pte_lockptr(struct hstate *h,
        struct mm_struct *mm, pte_t *pte)
{
 if (huge_page_size(h) == ((1UL) << ((16 - 3) * (4 - (2)) + 3)))
  return pmd_lockptr(mm, (pmd_t *) pte);
 ((void)(sizeof(( long)(huge_page_size(h) == ((1UL) << 16)))));
 return &mm->page_table_lock;
}
# 552 "../include/linux/hugetlb.h"
void hugetlb_report_usage(struct seq_file *m, struct mm_struct *mm);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hugetlb_count_add(long l, struct mm_struct *mm)
{
 atomic_long_add(l, &mm->hugetlb_usage);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void hugetlb_count_sub(long l, struct mm_struct *mm)
{
 atomic_long_sub(l, &mm->hugetlb_usage);
}
# 574 "../include/linux/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) pte_t huge_ptep_modify_prot_start(struct vm_area_struct *vma,
      unsigned long addr, pte_t *ptep)
{
 return huge_ptep_get_and_clear(vma->vm_mm, addr, ptep);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void huge_ptep_modify_prot_commit(struct vm_area_struct *vma,
      unsigned long addr, pte_t *ptep,
      pte_t old_pte, pte_t pte)
{
 set_huge_pte_at(vma->vm_mm, addr, ptep, pte);
}
# 745 "../include/linux/hugetlb.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) spinlock_t *huge_pte_lock(struct hstate *h,
     struct mm_struct *mm, pte_t *pte)
{
 spinlock_t *ptl;

 ptl = huge_pte_lockptr(h, mm, pte);
 spin_lock(ptl);
 return ptl;
}
# 9 "../include/linux/migrate.h" 2

typedef struct page *new_page_t(struct page *page, unsigned long private);
typedef void free_page_t(struct page *page, unsigned long private);
# 20 "../include/linux/migrate.h"
enum migrate_reason {
 MR_COMPACTION,
 MR_MEMORY_FAILURE,
 MR_MEMORY_HOTPLUG,
 MR_SYSCALL,
 MR_MEMPOLICY_MBIND,
 MR_NUMA_MISPLACED,
 MR_CONTIG_RANGE,
 MR_TYPES
};


extern const char *migrate_reason_names[MR_TYPES];

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *new_page_nodemask(struct page *page,
    int preferred_nid, nodemask_t *nodemask)
{
 gfp_t gfp_mask = ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x08u) | (( gfp_t)0x4000u);
 unsigned int order = 0;
 struct page *new_page = ((void *)0);

 if (PageHuge(page))
  return alloc_huge_page_nodemask(page_hstate(compound_head(page)),
    preferred_nid, nodemask);

 if (PageTransHuge(page)) {
  gfp_mask |= (((((((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x100000u)) | (( gfp_t)0x02u)) | (( gfp_t)0x08u)) | (( gfp_t)0x40000u) | (( gfp_t)0x80000u) | (( gfp_t)0x2000u)) & ~(( gfp_t)(0x400u|0x800u))) | (( gfp_t)0x400u));
  order = (((16 - 3) * (4 - (2)) + 3)-16);
 }

 if (PageHighMem(page) || (((page_zone(page)) - (page_zone(page))->zone_pgdat->node_zones) == ZONE_MOVABLE))
  gfp_mask |= (( gfp_t)0x02u);

 new_page = __alloc_pages_nodemask(gfp_mask, order,
    preferred_nid, nodemask);

 if (new_page && PageTransHuge(new_page))
  prep_transhuge_page(new_page);

 return new_page;
}



extern void putback_movable_pages(struct list_head *l);
extern int migrate_page(struct address_space *mapping,
   struct page *newpage, struct page *page,
   enum migrate_mode mode);
extern int migrate_pages(struct list_head *l, new_page_t new, free_page_t free,
  unsigned long private, enum migrate_mode mode, int reason);
extern int isolate_movable_page(struct page *page, isolate_mode_t mode);
extern void putback_movable_page(struct page *page);

extern int migrate_prep(void);
extern int migrate_prep_local(void);
extern void migrate_page_states(struct page *newpage, struct page *page);
extern void migrate_page_copy(struct page *newpage, struct page *page);
extern int migrate_huge_page_move_mapping(struct address_space *mapping,
      struct page *newpage, struct page *page);
extern int migrate_page_move_mapping(struct address_space *mapping,
  struct page *newpage, struct page *page, int extra_count);
# 110 "../include/linux/migrate.h"
extern int PageMovable(struct page *page);
extern void __SetPageMovable(struct page *page, struct address_space *mapping);
extern void __ClearPageMovable(struct page *page);
# 125 "../include/linux/migrate.h"
extern bool pmd_trans_migrating(pmd_t pmd);
extern int migrate_misplaced_page(struct page *page,
      struct vm_area_struct *vma, int node);
# 141 "../include/linux/migrate.h"
extern int migrate_misplaced_transhuge_page(struct mm_struct *mm,
   struct vm_area_struct *vma,
   pmd_t *pmd, pmd_t entry,
   unsigned long address,
   struct page *page, int node);
# 171 "../include/linux/migrate.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *migrate_pfn_to_page(unsigned long mpfn)
{
 if (!(mpfn & (1UL << 0)))
  return ((void *)0);
 return (vmemmap + (mpfn >> 6));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long migrate_pfn(unsigned long pfn)
{
 return (pfn << 6) | (1UL << 0);
}

struct migrate_vma {
 struct vm_area_struct *vma;
# 193 "../include/linux/migrate.h"
 unsigned long *dst;
 unsigned long *src;
 unsigned long cpages;
 unsigned long npages;
 unsigned long start;
 unsigned long end;
};

int migrate_vma_setup(struct migrate_vma *args);
void migrate_vma_pages(struct migrate_vma *migrate);
void migrate_vma_finalize(struct migrate_vma *migrate);
# 69 "../include/linux/hmm.h" 2


# 1 "../include/linux/mmu_notifier.h" 1
# 10 "../include/linux/mmu_notifier.h"
struct mmu_notifier;
struct mmu_notifier_ops;
# 35 "../include/linux/mmu_notifier.h"
enum mmu_notifier_event {
 MMU_NOTIFY_UNMAP = 0,
 MMU_NOTIFY_CLEAR,
 MMU_NOTIFY_PROTECTION_VMA,
 MMU_NOTIFY_PROTECTION_PAGE,
 MMU_NOTIFY_SOFT_DIRTY,
};
# 55 "../include/linux/mmu_notifier.h"
struct mmu_notifier_mm {

 struct hlist_head list;

 spinlock_t lock;
};



struct mmu_notifier_range {
 struct vm_area_struct *vma;
 struct mm_struct *mm;
 unsigned long start;
 unsigned long end;
 unsigned flags;
 enum mmu_notifier_event event;
};

struct mmu_notifier_ops {
# 97 "../include/linux/mmu_notifier.h"
 void (*release)(struct mmu_notifier *mn,
   struct mm_struct *mm);
# 109 "../include/linux/mmu_notifier.h"
 int (*clear_flush_young)(struct mmu_notifier *mn,
     struct mm_struct *mm,
     unsigned long start,
     unsigned long end);






 int (*clear_young)(struct mmu_notifier *mn,
      struct mm_struct *mm,
      unsigned long start,
      unsigned long end);







 int (*test_young)(struct mmu_notifier *mn,
     struct mm_struct *mm,
     unsigned long address);





 void (*change_pte)(struct mmu_notifier *mn,
      struct mm_struct *mm,
      unsigned long address,
      pte_t pte);
# 193 "../include/linux/mmu_notifier.h"
 int (*invalidate_range_start)(struct mmu_notifier *mn,
          const struct mmu_notifier_range *range);
 void (*invalidate_range_end)(struct mmu_notifier *mn,
         const struct mmu_notifier_range *range);
# 216 "../include/linux/mmu_notifier.h"
 void (*invalidate_range)(struct mmu_notifier *mn, struct mm_struct *mm,
     unsigned long start, unsigned long end);
# 229 "../include/linux/mmu_notifier.h"
 struct mmu_notifier *(*alloc_notifier)(struct mm_struct *mm);
 void (*free_notifier)(struct mmu_notifier *mn);
};
# 244 "../include/linux/mmu_notifier.h"
struct mmu_notifier {
 struct hlist_node hlist;
 const struct mmu_notifier_ops *ops;
 struct mm_struct *mm;
 struct callback_head rcu;
 unsigned int users;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mm_has_notifiers(struct mm_struct *mm)
{
 return __builtin_expect(!!(mm->mmu_notifier_mm), 0);
}

struct mmu_notifier *mmu_notifier_get_locked(const struct mmu_notifier_ops *ops,
          struct mm_struct *mm);
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct mmu_notifier *
mmu_notifier_get(const struct mmu_notifier_ops *ops, struct mm_struct *mm)
{
 struct mmu_notifier *ret;

 down_write(&mm->mmap_sem);
 ret = mmu_notifier_get_locked(ops, mm);
 up_write(&mm->mmap_sem);
 return ret;
}
void mmu_notifier_put(struct mmu_notifier *mn);
void mmu_notifier_synchronize(void);

extern int mmu_notifier_register(struct mmu_notifier *mn,
     struct mm_struct *mm);
extern int __mmu_notifier_register(struct mmu_notifier *mn,
       struct mm_struct *mm);
extern void mmu_notifier_unregister(struct mmu_notifier *mn,
        struct mm_struct *mm);
extern void __mmu_notifier_mm_destroy(struct mm_struct *mm);
extern void __mmu_notifier_release(struct mm_struct *mm);
extern int __mmu_notifier_clear_flush_young(struct mm_struct *mm,
       unsigned long start,
       unsigned long end);
extern int __mmu_notifier_clear_young(struct mm_struct *mm,
          unsigned long start,
          unsigned long end);
extern int __mmu_notifier_test_young(struct mm_struct *mm,
         unsigned long address);
extern void __mmu_notifier_change_pte(struct mm_struct *mm,
          unsigned long address, pte_t pte);
extern int __mmu_notifier_invalidate_range_start(struct mmu_notifier_range *r);
extern void __mmu_notifier_invalidate_range_end(struct mmu_notifier_range *r,
      bool only_end);
extern void __mmu_notifier_invalidate_range(struct mm_struct *mm,
      unsigned long start, unsigned long end);
extern bool
mmu_notifier_range_update_to_read_only(const struct mmu_notifier_range *range);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool
mmu_notifier_range_blockable(const struct mmu_notifier_range *range)
{
 return (range->flags & (1 << 0));
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_release(struct mm_struct *mm)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_release(mm);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_clear_flush_young(struct mm_struct *mm,
       unsigned long start,
       unsigned long end)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_clear_flush_young(mm, start, end);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_clear_young(struct mm_struct *mm,
        unsigned long start,
        unsigned long end)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_clear_young(mm, start, end);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int mmu_notifier_test_young(struct mm_struct *mm,
       unsigned long address)
{
 if (mm_has_notifiers(mm))
  return __mmu_notifier_test_young(mm, address);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_change_pte(struct mm_struct *mm,
        unsigned long address, pte_t pte)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_change_pte(mm, address, pte);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mmu_notifier_invalidate_range_start(struct mmu_notifier_range *range)
{
 do { do { } while (0); } while (0);

 do { } while (0);
 if (mm_has_notifiers(range->mm)) {
  range->flags |= (1 << 0);
  __mmu_notifier_invalidate_range_start(range);
 }
 do { } while (0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int
mmu_notifier_invalidate_range_start_nonblock(struct mmu_notifier_range *range)
{
 int ret = 0;

 do { } while (0);
 if (mm_has_notifiers(range->mm)) {
  range->flags &= ~(1 << 0);
  ret = __mmu_notifier_invalidate_range_start(range);
 }
 do { } while (0);
 return ret;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mmu_notifier_invalidate_range_end(struct mmu_notifier_range *range)
{
 if (mmu_notifier_range_blockable(range))
  do { do { } while (0); } while (0);

 if (mm_has_notifiers(range->mm))
  __mmu_notifier_invalidate_range_end(range, false);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void
mmu_notifier_invalidate_range_only_end(struct mmu_notifier_range *range)
{
 if (mm_has_notifiers(range->mm))
  __mmu_notifier_invalidate_range_end(range, true);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_invalidate_range(struct mm_struct *mm,
      unsigned long start, unsigned long end)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_invalidate_range(mm, start, end);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_mm_init(struct mm_struct *mm)
{
 mm->mmu_notifier_mm = ((void *)0);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_mm_destroy(struct mm_struct *mm)
{
 if (mm_has_notifiers(mm))
  __mmu_notifier_mm_destroy(mm);
}


static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void mmu_notifier_range_init(struct mmu_notifier_range *range,
        enum mmu_notifier_event event,
        unsigned flags,
        struct vm_area_struct *vma,
        struct mm_struct *mm,
        unsigned long start,
        unsigned long end)
{
 range->vma = vma;
 range->event = event;
 range->mm = mm;
 range->start = start;
 range->end = end;
 range->flags = flags;
}
# 72 "../include/linux/hmm.h" 2
# 86 "../include/linux/hmm.h"
struct hmm {
 struct mmu_notifier mmu_notifier;
 spinlock_t ranges_lock;
 struct list_head ranges;
 struct list_head mirrors;
 struct rw_semaphore mirrors_sem;
 wait_queue_head_t wq;
 long notifiers;
};
# 111 "../include/linux/hmm.h"
enum hmm_pfn_flag_e {
 HMM_PFN_VALID = 0,
 HMM_PFN_WRITE,
 HMM_PFN_DEVICE_PRIVATE,
 HMM_PFN_FLAG_MAX
};
# 138 "../include/linux/hmm.h"
enum hmm_pfn_value_e {
 HMM_PFN_ERROR,
 HMM_PFN_NONE,
 HMM_PFN_SPECIAL,
 HMM_PFN_VALUE_MAX
};
# 161 "../include/linux/hmm.h"
struct hmm_range {
 struct hmm *hmm;
 struct list_head list;
 unsigned long start;
 unsigned long end;
 uint64_t *pfns;
 const uint64_t *flags;
 const uint64_t *values;
 uint64_t default_flags;
 uint64_t pfn_flags_mask;
 uint8_t pfn_shift;
 bool valid;
};







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hmm_range_wait_until_valid(struct hmm_range *range,
           unsigned long timeout)
{
 return ({ long __ret = msecs_to_jiffies(timeout); do { do { } while (0); } while (0); if (!({ bool __cond = (range->valid); if (__cond && !__ret) __ret = 1; __cond || !__ret; })) __ret = ({ __label__ __out; struct wait_queue_entry __wq_entry; long __ret = msecs_to_jiffies(timeout); init_wait_entry(&__wq_entry, 0 ? 0x01 : 0); for (;;) { long __int = prepare_to_wait_event(&range->hmm->wq, &__wq_entry, 0x0002); if (({ bool __cond = (range->valid); if (__cond && !__ret) __ret = 1; __cond || !__ret; })) break; if ((!__builtin_constant_p(0x0002) || 0x0002 == 0x0001 || 0x0002 == (0x0100 | 0x0002)) && __int) { __ret = __int; goto __out; } __ret = schedule_timeout(__ret); } finish_wait(&range->hmm->wq, &__wq_entry); __out: __ret; }); __ret; }) != 0;

}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool hmm_range_valid(struct hmm_range *range)
{
 return range->valid;
}
# 207 "../include/linux/hmm.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct page *hmm_device_entry_to_page(const struct hmm_range *range,
          uint64_t entry)
{
 if (entry == range->values[HMM_PFN_NONE])
  return ((void *)0);
 if (entry == range->values[HMM_PFN_ERROR])
  return ((void *)0);
 if (entry == range->values[HMM_PFN_SPECIAL])
  return ((void *)0);
 if (!(entry & range->flags[HMM_PFN_VALID]))
  return ((void *)0);
 return (vmemmap + (entry >> range->pfn_shift));
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long
hmm_device_entry_to_pfn(const struct hmm_range *range, uint64_t pfn)
{
 if (pfn == range->values[HMM_PFN_NONE])
  return -1UL;
 if (pfn == range->values[HMM_PFN_ERROR])
  return -1UL;
 if (pfn == range->values[HMM_PFN_SPECIAL])
  return -1UL;
 if (!(pfn & range->flags[HMM_PFN_VALID]))
  return -1UL;
 return (pfn >> range->pfn_shift);
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t hmm_device_entry_from_page(const struct hmm_range *range,
        struct page *page)
{
 return ((unsigned long)((page) - vmemmap) << range->pfn_shift) |
  range->flags[HMM_PFN_VALID];
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t hmm_device_entry_from_pfn(const struct hmm_range *range,
       unsigned long pfn)
{
 return (pfn << range->pfn_shift) |
  range->flags[HMM_PFN_VALID];
}
# 315 "../include/linux/hmm.h"
struct hmm_mirror;






struct hmm_mirror_ops {
# 332 "../include/linux/hmm.h"
 void (*release)(struct hmm_mirror *mirror);
# 350 "../include/linux/hmm.h"
 int (*sync_cpu_device_pagetables)(
  struct hmm_mirror *mirror,
  const struct mmu_notifier_range *update);
};
# 366 "../include/linux/hmm.h"
struct hmm_mirror {
 struct hmm *hmm;
 const struct hmm_mirror_ops *ops;
 struct list_head list;
};

int hmm_mirror_register(struct hmm_mirror *mirror, struct mm_struct *mm);
void hmm_mirror_unregister(struct hmm_mirror *mirror);




int hmm_range_register(struct hmm_range *range, struct hmm_mirror *mirror);
void hmm_range_unregister(struct hmm_range *range);
# 389 "../include/linux/hmm.h"
long hmm_range_fault(struct hmm_range *range, unsigned int flags);

long hmm_range_dma_map(struct hmm_range *range,
         struct device *device,
         dma_addr_t *daddrs,
         unsigned int flags);
long hmm_range_dma_unmap(struct hmm_range *range,
    struct device *device,
    dma_addr_t *daddrs,
    bool dirty);
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mn.h" 2


# 1 "../include/linux/interval_tree.h" 1






struct interval_tree_node {
 struct rb_node rb;
 unsigned long start;
 unsigned long last;
 unsigned long __subtree_last;
};

extern void
interval_tree_insert(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern void
interval_tree_remove(struct interval_tree_node *node,
       struct rb_root_cached *root);

extern struct interval_tree_node *
interval_tree_iter_first(struct rb_root_cached *root,
    unsigned long start, unsigned long last);

extern struct interval_tree_node *
interval_tree_iter_next(struct interval_tree_node *node,
   unsigned long start, unsigned long last);
# 32 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mn.h" 2

enum amdgpu_mn_type {
 AMDGPU_MN_TYPE_GFX,
 AMDGPU_MN_TYPE_HSA,
};
# 52 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mn.h"
struct amdgpu_mn {

 struct amdgpu_device *adev;
 struct mm_struct *mm;
 enum amdgpu_mn_type type;


 struct work_struct work;


 struct hlist_node node;


 struct rw_semaphore lock;
 struct rb_root_cached objects;



 struct hmm_mirror mirror;

};


void amdgpu_mn_lock(struct amdgpu_mn *mn);
void amdgpu_mn_unlock(struct amdgpu_mn *mn);
struct amdgpu_mn *amdgpu_mn_get(struct amdgpu_device *adev,
    enum amdgpu_mn_type type);
int amdgpu_mn_register(struct amdgpu_bo *bo, unsigned long addr);
void amdgpu_mn_unregister(struct amdgpu_bo *bo);
void amdgpu_hmm_init_range(struct hmm_range *range);
# 73 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gmc.h" 1
# 63 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gmc.h"
struct firmware;




struct amdgpu_gmc_fault {
 uint64_t timestamp;
 uint64_t next:8;
 uint64_t key:52;
};




struct amdgpu_vmhub {
 uint32_t ctx0_ptb_addr_lo32;
 uint32_t ctx0_ptb_addr_hi32;
 uint32_t vm_inv_eng0_req;
 uint32_t vm_inv_eng0_ack;
 uint32_t vm_context0_cntl;
 uint32_t vm_l2_pro_fault_status;
 uint32_t vm_l2_pro_fault_cntl;
};




struct amdgpu_gmc_funcs {

 void (*flush_gpu_tlb)(struct amdgpu_device *adev, uint32_t vmid,
    uint32_t vmhub, uint32_t flush_type);

 uint64_t (*emit_flush_gpu_tlb)(struct amdgpu_ring *ring, unsigned vmid,
           uint64_t pd_addr);

 void (*emit_pasid_mapping)(struct amdgpu_ring *ring, unsigned vmid,
       unsigned pasid);

 void (*set_prt)(struct amdgpu_device *adev, bool enable);

 uint64_t (*get_vm_pte_flags)(struct amdgpu_device *adev,
         uint32_t flags);

 void (*get_vm_pde)(struct amdgpu_device *adev, int level,
      u64 *dst, u64 *flags);
};

struct amdgpu_xgmi {

 u64 node_id;
 u64 hive_id;

 u64 node_segment_size;

 unsigned physical_node_id;

 unsigned num_physical_nodes;

 struct list_head head;
 bool supported;
};

struct amdgpu_gmc {
 resource_size_t aper_size;
 resource_size_t aper_base;


 u64 mc_vram_size;
 u64 visible_vram_size;
 u64 agp_size;
 u64 agp_start;
 u64 agp_end;
 u64 gart_size;
 u64 gart_start;
 u64 gart_end;
 u64 vram_start;
 u64 vram_end;






 u64 fb_start;
 u64 fb_end;
 unsigned vram_width;
 u64 real_vram_size;
 int vram_mtrr;
 u64 mc_mask;
 const struct firmware *fw;
 uint32_t fw_version;
 struct amdgpu_irq_src vm_fault;
 uint32_t vram_type;
 uint32_t srbm_soft_reset;
 bool prt_warning;
 uint64_t stolen_size;

 u64 shared_aperture_start;
 u64 shared_aperture_end;
 u64 private_aperture_start;
 u64 private_aperture_end;

 spinlock_t invalidate_lock;
 bool translate_further;
 struct kfd_vm_fault_info *vm_fault_info;
 atomic_t vm_fault_info_updated;

 struct amdgpu_gmc_fault fault_ring[(1 << 8)];
 struct {
  uint64_t idx:8;
 } fault_hash[(1 << 8)];
 uint64_t last_fault:8;

 const struct amdgpu_gmc_funcs *gmc_funcs;

 struct amdgpu_xgmi xgmi;
 struct amdgpu_irq_src ecc_irq;
 struct ras_common_if *umc_ras_if;
 struct ras_common_if *mmhub_ras_if;
};
# 198 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gmc.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_gmc_vram_full_visible(struct amdgpu_gmc *gmc)
{
 ({ int __ret_warn_on = !!(gmc->real_vram_size < gmc->visible_vram_size); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("\001" "4" "------------[ cut here ]------------\n"); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gmc.h\"; .popsection; .long 14472b - 14470b; .short 200; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return (gmc->real_vram_size == gmc->visible_vram_size);
}






static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t amdgpu_gmc_sign_extend(uint64_t addr)
{
 if (addr >= 0x0000800000000000ULL)
  addr |= 0xffff800000000000ULL;

 return addr;
}

void amdgpu_gmc_get_pde_for_bo(struct amdgpu_bo *bo, int level,
          uint64_t *addr, uint64_t *flags);
int amdgpu_gmc_set_pte_pde(struct amdgpu_device *adev, void *cpu_pt_addr,
    uint32_t gpu_page_idx, uint64_t addr,
    uint64_t flags);
uint64_t amdgpu_gmc_pd_addr(struct amdgpu_bo *bo);
uint64_t amdgpu_gmc_agp_addr(struct ttm_buffer_object *bo);
void amdgpu_gmc_vram_location(struct amdgpu_device *adev, struct amdgpu_gmc *mc,
         u64 base);
void amdgpu_gmc_gart_location(struct amdgpu_device *adev,
         struct amdgpu_gmc *mc);
void amdgpu_gmc_agp_location(struct amdgpu_device *adev,
        struct amdgpu_gmc *mc);
bool amdgpu_gmc_filter_faults(struct amdgpu_device *adev, uint64_t addr,
         uint16_t pasid, uint64_t timestamp);
# 74 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gfx.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gfx.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/clearstate_defs.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/clearstate_defs.h"
enum section_id {
    SECT_NONE,
    SECT_CONTEXT,
    SECT_CLEAR,
    SECT_CTRLCONST
};

struct cs_extent_def {
    const unsigned int *extent;
    const unsigned int reg_index;
    const unsigned int reg_count;
};

struct cs_section_def {
    const struct cs_extent_def *section;
    const enum section_id id;
};
# 31 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gfx.h" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_rlc.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_rlc.h"
typedef enum _FIRMWARE_ID_ {
 FIRMWARE_ID_INVALID = 0,
 FIRMWARE_ID_RLC_G_UCODE = 1,
 FIRMWARE_ID_RLC_TOC = 2,
 FIRMWARE_ID_RLCG_SCRATCH = 3,
 FIRMWARE_ID_RLC_SRM_ARAM = 4,
 FIRMWARE_ID_RLC_SRM_INDEX_ADDR = 5,
 FIRMWARE_ID_RLC_SRM_INDEX_DATA = 6,
 FIRMWARE_ID_RLC_P_UCODE = 7,
 FIRMWARE_ID_RLC_V_UCODE = 8,
 FIRMWARE_ID_RLX6_UCODE = 9,
 FIRMWARE_ID_RLX6_DRAM_BOOT = 10,
 FIRMWARE_ID_GLOBAL_TAP_DELAYS = 11,
 FIRMWARE_ID_SE0_TAP_DELAYS = 12,
 FIRMWARE_ID_SE1_TAP_DELAYS = 13,
 FIRMWARE_ID_GLOBAL_SE0_SE1_SKEW_DELAYS = 14,
 FIRMWARE_ID_SDMA0_UCODE = 15,
 FIRMWARE_ID_SDMA0_JT = 16,
 FIRMWARE_ID_SDMA1_UCODE = 17,
 FIRMWARE_ID_SDMA1_JT = 18,
 FIRMWARE_ID_CP_CE = 19,
 FIRMWARE_ID_CP_PFP = 20,
 FIRMWARE_ID_CP_ME = 21,
 FIRMWARE_ID_CP_MEC = 22,
 FIRMWARE_ID_CP_MES = 23,
 FIRMWARE_ID_MES_STACK = 24,
 FIRMWARE_ID_RLC_SRM_DRAM_SR = 25,
 FIRMWARE_ID_RLCG_SCRATCH_SR = 26,
 FIRMWARE_ID_RLCP_SCRATCH_SR = 27,
 FIRMWARE_ID_RLCV_SCRATCH_SR = 28,
 FIRMWARE_ID_RLX6_DRAM_SR = 29,
 FIRMWARE_ID_SDMA0_PG_CONTEXT = 30,
 FIRMWARE_ID_SDMA1_PG_CONTEXT = 31,
 FIRMWARE_ID_GLOBAL_MUX_SELECT_RAM = 32,
 FIRMWARE_ID_SE0_MUX_SELECT_RAM = 33,
 FIRMWARE_ID_SE1_MUX_SELECT_RAM = 34,
 FIRMWARE_ID_ACCUM_CTRL_RAM = 35,
 FIRMWARE_ID_RLCP_CAM = 36,
 FIRMWARE_ID_RLC_SPP_CAM_EXT = 37,
 FIRMWARE_ID_MAX = 38,
} FIRMWARE_ID;

typedef struct _RLC_TABLE_OF_CONTENT {
 union {
  unsigned int DW0;
  struct {
   unsigned int offset : 25;
   unsigned int id : 7;
  };
 };

 union {
  unsigned int DW1;
  struct {
   unsigned int load_at_boot : 1;
   unsigned int load_at_vddgfx : 1;
   unsigned int load_at_reset : 1;
   unsigned int memory_destination : 2;
   unsigned int vfflr_image_code : 4;
   unsigned int load_mode_direct : 1;
   unsigned int save_for_vddgfx : 1;
   unsigned int save_for_vfflr : 1;
   unsigned int reserved : 1;
   unsigned int signed_source : 1;
   unsigned int size : 18;
  };
 };

 union {
  unsigned int DW2;
  struct {
   unsigned int indirect_addr_reg : 16;
   unsigned int index : 16;
  };
 };

 union {
  unsigned int DW3;
  struct {
   unsigned int indirect_data_reg : 16;
   unsigned int indirect_start_offset : 16;
  };
 };
} RLC_TABLE_OF_CONTENT;



struct amdgpu_rlc_funcs {
 bool (*is_rlc_enabled)(struct amdgpu_device *adev);
 void (*set_safe_mode)(struct amdgpu_device *adev);
 void (*unset_safe_mode)(struct amdgpu_device *adev);
 int (*init)(struct amdgpu_device *adev);
 u32 (*get_csb_size)(struct amdgpu_device *adev);
 void (*get_csb_buffer)(struct amdgpu_device *adev, volatile u32 *buffer);
 int (*get_cp_table_num)(struct amdgpu_device *adev);
 int (*resume)(struct amdgpu_device *adev);
 void (*stop)(struct amdgpu_device *adev);
 void (*reset)(struct amdgpu_device *adev);
 void (*start)(struct amdgpu_device *adev);
};

struct amdgpu_rlc {

 struct amdgpu_bo *save_restore_obj;
 uint64_t save_restore_gpu_addr;
 volatile uint32_t *sr_ptr;
 const u32 *reg_list;
 u32 reg_list_size;

 struct amdgpu_bo *clear_state_obj;
 uint64_t clear_state_gpu_addr;
 volatile uint32_t *cs_ptr;
 const struct cs_section_def *cs_data;
 u32 clear_state_size;

 struct amdgpu_bo *cp_table_obj;
 uint64_t cp_table_gpu_addr;
 volatile uint32_t *cp_table_ptr;
 u32 cp_table_size;


 bool in_safe_mode;
 const struct amdgpu_rlc_funcs *funcs;


 u32 save_and_restore_offset;
 u32 clear_state_descriptor_offset;
 u32 avail_scratch_ram_locations;
 u32 reg_restore_list_size;
 u32 reg_list_format_start;
 u32 reg_list_format_separate_start;
 u32 starting_offsets_start;
 u32 reg_list_format_size_bytes;
 u32 reg_list_size_bytes;
 u32 reg_list_format_direct_reg_list_length;
 u32 save_restore_list_cntl_size_bytes;
 u32 save_restore_list_gpm_size_bytes;
 u32 save_restore_list_srm_size_bytes;

 u32 *register_list_format;
 u32 *register_restore;
 u8 *save_restore_list_cntl;
 u8 *save_restore_list_gpm;
 u8 *save_restore_list_srm;

 bool is_rlc_v2_1;


 struct amdgpu_bo *rlc_autoload_bo;
 u64 rlc_autoload_gpu_addr;
 void *rlc_autoload_ptr;


 struct amdgpu_bo *rlc_toc_bo;
 uint64_t rlc_toc_gpu_addr;
 void *rlc_toc_buf;
};

void amdgpu_gfx_rlc_enter_safe_mode(struct amdgpu_device *adev);
void amdgpu_gfx_rlc_exit_safe_mode(struct amdgpu_device *adev);
int amdgpu_gfx_rlc_init_sr(struct amdgpu_device *adev, u32 dws);
int amdgpu_gfx_rlc_init_csb(struct amdgpu_device *adev);
int amdgpu_gfx_rlc_init_cpt(struct amdgpu_device *adev);
void amdgpu_gfx_rlc_setup_cp_table(struct amdgpu_device *adev);
void amdgpu_gfx_rlc_fini(struct amdgpu_device *adev);
# 33 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gfx.h" 2
# 44 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gfx.h"
struct amdgpu_mec {
 struct amdgpu_bo *hpd_eop_obj;
 u64 hpd_eop_gpu_addr;
 struct amdgpu_bo *mec_fw_obj;
 u64 mec_fw_gpu_addr;
 u32 num_mec;
 u32 num_pipe_per_mec;
 u32 num_queue_per_pipe;
 void *mqd_backup[8 + 1];


 unsigned long queue_bitmap[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};

enum amdgpu_unmap_queues_action {
 PREEMPT_QUEUES = 0,
 RESET_QUEUES,
 DISABLE_PROCESS_QUEUES,
 PREEMPT_QUEUES_NO_UNMAP,
};

struct kiq_pm4_funcs {

 void (*kiq_set_resources)(struct amdgpu_ring *kiq_ring,
     uint64_t queue_mask);
 void (*kiq_map_queues)(struct amdgpu_ring *kiq_ring,
     struct amdgpu_ring *ring);
 void (*kiq_unmap_queues)(struct amdgpu_ring *kiq_ring,
     struct amdgpu_ring *ring,
     enum amdgpu_unmap_queues_action action,
     u64 gpu_addr, u64 seq);
 void (*kiq_query_status)(struct amdgpu_ring *kiq_ring,
     struct amdgpu_ring *ring,
     u64 addr,
     u64 seq);

 int set_resources_size;
 int map_queues_size;
 int unmap_queues_size;
 int query_status_size;
};

struct amdgpu_kiq {
 u64 eop_gpu_addr;
 struct amdgpu_bo *eop_obj;
 spinlock_t ring_lock;
 struct amdgpu_ring ring;
 struct amdgpu_irq_src irq;
 const struct kiq_pm4_funcs *pmf;
};




struct amdgpu_scratch {
 unsigned num_reg;
 uint32_t reg_base;
 uint32_t free_mask;
};







struct amdgpu_rb_config {
 uint32_t rb_backend_disable;
 uint32_t user_rb_backend_disable;
 uint32_t raster_config;
 uint32_t raster_config_1;
};

struct gb_addr_config {
 uint16_t pipe_interleave_size;
 uint8_t num_pipes;
 uint8_t max_compress_frags;
 uint8_t num_banks;
 uint8_t num_se;
 uint8_t num_rb_per_se;
};

struct amdgpu_gfx_config {
 unsigned max_shader_engines;
 unsigned max_tile_pipes;
 unsigned max_cu_per_sh;
 unsigned max_sh_per_se;
 unsigned max_backends_per_se;
 unsigned max_texture_channel_caches;
 unsigned max_gprs;
 unsigned max_gs_threads;
 unsigned max_hw_contexts;
 unsigned sc_prim_fifo_size_frontend;
 unsigned sc_prim_fifo_size_backend;
 unsigned sc_hiz_tile_fifo_size;
 unsigned sc_earlyz_tile_fifo_size;

 unsigned num_tile_pipes;
 unsigned backend_enable_mask;
 unsigned mem_max_burst_length_bytes;
 unsigned mem_row_size_in_kb;
 unsigned shader_engine_tile_size;
 unsigned num_gpus;
 unsigned multi_gpu_tile_size;
 unsigned mc_arb_ramcfg;
 unsigned gb_addr_config;
 unsigned num_rbs;
 unsigned gs_vgt_table_depth;
 unsigned gs_prim_buffer_depth;

 uint32_t tile_mode_array[32];
 uint32_t macrotile_mode_array[16];

 struct gb_addr_config gb_addr_config_fields;
 struct amdgpu_rb_config rb_config[4][2];


 uint32_t double_offchip_lds_buf;

 uint32_t db_debug2;

 uint32_t num_sc_per_sh;
 uint32_t num_packer_per_sc;
 uint32_t pa_sc_tile_steering_override;
};

struct amdgpu_cu_info {
 uint32_t simd_per_cu;
 uint32_t max_waves_per_simd;
 uint32_t wave_front_size;
 uint32_t max_scratch_slots_per_cu;
 uint32_t lds_size;


 uint32_t number;
 uint32_t ao_cu_mask;
 uint32_t ao_cu_bitmap[4][4];
 uint32_t bitmap[4][4];
};

struct amdgpu_gfx_funcs {

 uint64_t (*get_gpu_clock_counter)(struct amdgpu_device *adev);
 void (*select_se_sh)(struct amdgpu_device *adev, u32 se_num,
        u32 sh_num, u32 instance);
 void (*read_wave_data)(struct amdgpu_device *adev, uint32_t simd,
          uint32_t wave, uint32_t *dst, int *no_fields);
 void (*read_wave_vgprs)(struct amdgpu_device *adev, uint32_t simd,
    uint32_t wave, uint32_t thread, uint32_t start,
    uint32_t size, uint32_t *dst);
 void (*read_wave_sgprs)(struct amdgpu_device *adev, uint32_t simd,
    uint32_t wave, uint32_t start, uint32_t size,
    uint32_t *dst);
 void (*select_me_pipe_q)(struct amdgpu_device *adev, u32 me, u32 pipe,
     u32 queue, u32 vmid);
 int (*ras_error_inject)(struct amdgpu_device *adev, void *inject_if);
 int (*query_ras_error_count) (struct amdgpu_device *adev, void *ras_error_status);
};

struct amdgpu_ngg_buf {
 struct amdgpu_bo *bo;
 uint64_t gpu_addr;
 uint32_t size;
 uint32_t bo_size;
};

enum {
 NGG_PRIM = 0,
 NGG_POS,
 NGG_CNTL,
 NGG_PARAM,
 NGG_BUF_MAX
};

struct amdgpu_ngg {
 struct amdgpu_ngg_buf buf[NGG_BUF_MAX];
 uint32_t gds_reserve_addr;
 uint32_t gds_reserve_size;
 bool init;
};

struct sq_work {
 struct work_struct work;
 unsigned ih_data;
};

struct amdgpu_pfp {
 struct amdgpu_bo *pfp_fw_obj;
 uint64_t pfp_fw_gpu_addr;
 uint32_t *pfp_fw_ptr;
};

struct amdgpu_ce {
 struct amdgpu_bo *ce_fw_obj;
 uint64_t ce_fw_gpu_addr;
 uint32_t *ce_fw_ptr;
};

struct amdgpu_me {
 struct amdgpu_bo *me_fw_obj;
 uint64_t me_fw_gpu_addr;
 uint32_t *me_fw_ptr;
 uint32_t num_me;
 uint32_t num_pipe_per_me;
 uint32_t num_queue_per_pipe;
 void *mqd_backup[2 + 1];


 unsigned long queue_bitmap[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};

struct amdgpu_gfx {
 struct mutex gpu_clock_mutex;
 struct amdgpu_gfx_config config;
 struct amdgpu_rlc rlc;
 struct amdgpu_pfp pfp;
 struct amdgpu_ce ce;
 struct amdgpu_me me;
 struct amdgpu_mec mec;
 struct amdgpu_kiq kiq;
 struct amdgpu_scratch scratch;
 const struct firmware *me_fw;
 uint32_t me_fw_version;
 const struct firmware *pfp_fw;
 uint32_t pfp_fw_version;
 const struct firmware *ce_fw;
 uint32_t ce_fw_version;
 const struct firmware *rlc_fw;
 uint32_t rlc_fw_version;
 const struct firmware *mec_fw;
 uint32_t mec_fw_version;
 const struct firmware *mec2_fw;
 uint32_t mec2_fw_version;
 uint32_t me_feature_version;
 uint32_t ce_feature_version;
 uint32_t pfp_feature_version;
 uint32_t rlc_feature_version;
 uint32_t rlc_srlc_fw_version;
 uint32_t rlc_srlc_feature_version;
 uint32_t rlc_srlg_fw_version;
 uint32_t rlc_srlg_feature_version;
 uint32_t rlc_srls_fw_version;
 uint32_t rlc_srls_feature_version;
 uint32_t mec_feature_version;
 uint32_t mec2_feature_version;
 bool mec_fw_write_wait;
 bool me_fw_write_wait;
 struct amdgpu_ring gfx_ring[2];
 unsigned num_gfx_rings;
 struct amdgpu_ring compute_ring[8];
 unsigned num_compute_rings;
 struct amdgpu_irq_src eop_irq;
 struct amdgpu_irq_src priv_reg_irq;
 struct amdgpu_irq_src priv_inst_irq;
 struct amdgpu_irq_src cp_ecc_error_irq;
 struct amdgpu_irq_src sq_irq;
 struct sq_work sq_work;


 uint32_t gfx_current_status;

 unsigned ce_ram_size;
 struct amdgpu_cu_info cu_info;
 const struct amdgpu_gfx_funcs *funcs;


 uint32_t grbm_soft_reset;
 uint32_t srbm_soft_reset;


 struct amdgpu_ngg ngg;


 bool gfx_off_state;
 struct mutex gfx_off_mutex;
 uint32_t gfx_off_req_count;
 struct delayed_work gfx_off_delay_work;


 struct mutex pipe_reserve_mutex;
 unsigned long pipe_reserve_bitmap[(((128) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];


 struct ras_common_if *ras_if;
};
# 342 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gfx.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 amdgpu_gfx_create_bitmask(u32 bit_width)
{
 return (u32)((1ULL << bit_width) - 1);
}

int amdgpu_gfx_scratch_get(struct amdgpu_device *adev, uint32_t *reg);
void amdgpu_gfx_scratch_free(struct amdgpu_device *adev, uint32_t reg);

void amdgpu_gfx_parse_disable_cu(unsigned *mask, unsigned max_se,
     unsigned max_sh);

int amdgpu_gfx_kiq_init_ring(struct amdgpu_device *adev,
        struct amdgpu_ring *ring,
        struct amdgpu_irq_src *irq);

void amdgpu_gfx_kiq_free_ring(struct amdgpu_ring *ring,
         struct amdgpu_irq_src *irq);

void amdgpu_gfx_kiq_fini(struct amdgpu_device *adev);
int amdgpu_gfx_kiq_init(struct amdgpu_device *adev,
   unsigned hpd_size);

int amdgpu_gfx_mqd_sw_init(struct amdgpu_device *adev,
      unsigned mqd_size);
void amdgpu_gfx_mqd_sw_fini(struct amdgpu_device *adev);
int amdgpu_gfx_disable_kcq(struct amdgpu_device *adev);
int amdgpu_gfx_enable_kcq(struct amdgpu_device *adev);

void amdgpu_gfx_compute_queue_acquire(struct amdgpu_device *adev);
void amdgpu_gfx_graphics_queue_acquire(struct amdgpu_device *adev);

int amdgpu_gfx_mec_queue_to_bit(struct amdgpu_device *adev, int mec,
    int pipe, int queue);
void amdgpu_gfx_bit_to_mec_queue(struct amdgpu_device *adev, int bit,
     int *mec, int *pipe, int *queue);
bool amdgpu_gfx_is_mec_queue_enabled(struct amdgpu_device *adev, int mec,
         int pipe, int queue);
int amdgpu_gfx_me_queue_to_bit(struct amdgpu_device *adev, int me,
          int pipe, int queue);
void amdgpu_gfx_bit_to_me_queue(struct amdgpu_device *adev, int bit,
    int *me, int *pipe, int *queue);
bool amdgpu_gfx_is_me_queue_enabled(struct amdgpu_device *adev, int me,
        int pipe, int queue);
void amdgpu_gfx_off_ctrl(struct amdgpu_device *adev, bool enable);
# 75 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_sdma.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_sdma.h"
enum amdgpu_sdma_irq {
 AMDGPU_SDMA_IRQ_INSTANCE0 = 0,
 AMDGPU_SDMA_IRQ_INSTANCE1,
 AMDGPU_SDMA_IRQ_INSTANCE2,
 AMDGPU_SDMA_IRQ_INSTANCE3,
 AMDGPU_SDMA_IRQ_INSTANCE4,
 AMDGPU_SDMA_IRQ_INSTANCE5,
 AMDGPU_SDMA_IRQ_INSTANCE6,
 AMDGPU_SDMA_IRQ_INSTANCE7,
 AMDGPU_SDMA_IRQ_LAST
};

struct amdgpu_sdma_instance {

 const struct firmware *fw;
 uint32_t fw_version;
 uint32_t feature_version;

 struct amdgpu_ring ring;
 struct amdgpu_ring page;
 bool burst_nop;
};

struct amdgpu_sdma {
 struct amdgpu_sdma_instance instance[8];
 struct amdgpu_irq_src trap_irq;
 struct amdgpu_irq_src illegal_inst_irq;
 struct amdgpu_irq_src ecc_irq;
 int num_instances;
 uint32_t srbm_soft_reset;
 bool has_page_queue;
 struct ras_common_if *ras_if;
};





struct amdgpu_buffer_funcs {

 uint32_t copy_max_bytes;


 unsigned copy_num_dw;


 void (*emit_copy_buffer)(struct amdgpu_ib *ib,

     uint64_t src_offset,

     uint64_t dst_offset,

     uint32_t byte_count);


 uint32_t fill_max_bytes;


 unsigned fill_num_dw;


 void (*emit_fill_buffer)(struct amdgpu_ib *ib,

     uint32_t src_data,

     uint64_t dst_offset,

     uint32_t byte_count);
};




struct amdgpu_sdma_instance *
amdgpu_sdma_get_instance_from_ring(struct amdgpu_ring *ring);
int amdgpu_sdma_get_index_from_ring(struct amdgpu_ring *ring, uint32_t *index);
uint64_t amdgpu_sdma_get_csa_mc_addr(struct amdgpu_ring *ring, unsigned vmid);
# 76 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.h" 1
# 53 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm_crc.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm_crc.h"
struct drm_crtc;
struct dm_crtc_state;

enum amdgpu_dm_pipe_crc_source {
 AMDGPU_DM_PIPE_CRC_SOURCE_NONE = 0,
 AMDGPU_DM_PIPE_CRC_SOURCE_CRTC,
 AMDGPU_DM_PIPE_CRC_SOURCE_CRTC_DITHER,
 AMDGPU_DM_PIPE_CRC_SOURCE_DPRX,
 AMDGPU_DM_PIPE_CRC_SOURCE_DPRX_DITHER,
 AMDGPU_DM_PIPE_CRC_SOURCE_MAX,
 AMDGPU_DM_PIPE_CRC_SOURCE_INVALID = -1,
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_dm_is_valid_crc_source(enum amdgpu_dm_pipe_crc_source source)
{
 return (source > AMDGPU_DM_PIPE_CRC_SOURCE_NONE) &&
        (source < AMDGPU_DM_PIPE_CRC_SOURCE_MAX);
}



int amdgpu_dm_crtc_configure_crc_source(struct drm_crtc *crtc,
     struct dm_crtc_state *dm_crtc_state,
     enum amdgpu_dm_pipe_crc_source source);
int amdgpu_dm_crtc_set_crc_source(struct drm_crtc *crtc, const char *src_name);
int amdgpu_dm_crtc_verify_crc_source(struct drm_crtc *crtc,
         const char *src_name,
         size_t *values_cnt);
const char *const *amdgpu_dm_crtc_get_crc_sources(struct drm_crtc *crtc,
        size_t *count);
void amdgpu_dm_crtc_handle_crc_irq(struct drm_crtc *crtc);
# 54 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.h" 2


struct amdgpu_device;
struct drm_device;
struct amdgpu_dm_irq_handler_data;
struct dc;

struct common_irq_params {
 struct amdgpu_device *adev;
 enum dc_irq_source irq_src;
};







struct irq_list_head {
 struct list_head head;

 struct work_struct work;
};







struct dm_comressor_info {
 void *cpu_addr;
 struct amdgpu_bo *bo_ptr;
 uint64_t gpu_addr;
};







struct amdgpu_dm_backlight_caps {
 int min_input_signal;
 int max_input_signal;
 bool caps_valid;
};
# 114 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.h"
struct amdgpu_display_manager {

 struct dc *dc;







 struct cgs_device *cgs_device;

 struct amdgpu_device *adev;
 struct drm_device *ddev;
 u16 display_indexes_num;
# 137 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.h"
 struct drm_private_obj atomic_obj;







 struct mutex dc_lock;






 struct mutex audio_lock;






 struct drm_audio_component *audio_component;







 bool audio_registered;
# 181 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.h"
 struct irq_list_head irq_handler_list_low_tab[DAL_IRQ_SOURCES_NUMBER];
# 191 "../drivers/gpu/drm/amd/amdgpu/../display/amdgpu_dm/amdgpu_dm.h"
 struct list_head irq_handler_list_high_tab[DAL_IRQ_SOURCES_NUMBER];







 struct common_irq_params
 pflip_params[DC_IRQ_SOURCE_PFLIP_LAST - DC_IRQ_SOURCE_PFLIP_FIRST + 1];







 struct common_irq_params
 vblank_params[DC_IRQ_SOURCE_VBLANK6 - DC_IRQ_SOURCE_VBLANK1 + 1];







 struct common_irq_params
 vupdate_params[DC_IRQ_SOURCE_VUPDATE6 - DC_IRQ_SOURCE_VUPDATE1 + 1];

 spinlock_t irq_handler_list_table_lock;

 struct backlight_device *backlight_dev;

 const struct dc_link *backlight_link;
 struct amdgpu_dm_backlight_caps backlight_caps;

 struct mod_freesync *freesync_module;

 struct drm_atomic_state *cached_state;

 struct dm_comressor_info compressor;

 const struct firmware *fw_dmcu;
 uint32_t dmcu_fw_version;







};

struct amdgpu_dm_connector {

 struct drm_connector base;
 uint32_t connector_id;



 struct edid *edid;


 struct amdgpu_hpd hpd;


 int num_modes;



 struct dc_sink *dc_sink;
 struct dc_link *dc_link;
 struct dc_sink *dc_em_sink;


 struct drm_dp_mst_topology_mgr mst_mgr;
 struct amdgpu_dm_dp_aux dm_dp_aux;
 struct drm_dp_mst_port *port;
 struct amdgpu_dm_connector *mst_port;
 struct amdgpu_encoder *mst_encoder;


 struct amdgpu_i2c_adapter *i2c;


 int min_vfreq ;
 int max_vfreq ;
 int pixel_clock_mhz;


 int audio_inst;

 struct mutex hpd_lock;

 bool fake_enable;

 uint32_t debugfs_dpcd_address;
 uint32_t debugfs_dpcd_size;

};



extern const struct amdgpu_ip_block_version dm_ip_block;

struct amdgpu_framebuffer;
struct amdgpu_display_manager;
struct dc_validation_set;
struct dc_plane_state;

struct dm_plane_state {
 struct drm_plane_state base;
 struct dc_plane_state *dc_state;
};

struct dm_crtc_state {
 struct drm_crtc_state base;
 struct dc_stream_state *stream;

 bool cm_has_degamma;
 bool cm_is_degamma_srgb;

 int update_type;
 int active_planes;
 bool interrupts_enabled;

 int crc_skip_count;
 enum amdgpu_dm_pipe_crc_source crc_src;

 bool freesync_timing_changed;
 bool freesync_vrr_info_changed;

 bool vrr_supported;
 struct mod_freesync_config freesync_config;
 struct mod_vrr_params vrr_params;
 struct dc_info_packet vrr_infopacket;

 int abm_level;
};



struct dm_atomic_state {
 struct drm_private_state base;

 struct dc_state *context;
};



struct dm_connector_state {
 struct drm_connector_state base;

 enum amdgpu_rmx_type scaling;
 uint8_t underscan_vborder;
 uint8_t underscan_hborder;
 bool underscan_enable;
 bool freesync_capable;
 uint8_t abm_level;
};




void amdgpu_dm_connector_funcs_reset(struct drm_connector *connector);
struct drm_connector_state *
amdgpu_dm_connector_atomic_duplicate_state(struct drm_connector *connector);
int amdgpu_dm_connector_atomic_set_property(struct drm_connector *connector,
         struct drm_connector_state *state,
         struct drm_property *property,
         uint64_t val);

int amdgpu_dm_connector_atomic_get_property(struct drm_connector *connector,
         const struct drm_connector_state *state,
         struct drm_property *property,
         uint64_t *val);

int amdgpu_dm_get_encoder_crtc_mask(struct amdgpu_device *adev);

void amdgpu_dm_connector_init_helper(struct amdgpu_display_manager *dm,
         struct amdgpu_dm_connector *aconnector,
         int connector_type,
         struct dc_link *link,
         int link_index);

enum drm_mode_status amdgpu_dm_connector_mode_valid(struct drm_connector *connector,
       struct drm_display_mode *mode);

void dm_restore_drm_connector_state(struct drm_device *dev,
        struct drm_connector *connector);

void amdgpu_dm_update_freesync_caps(struct drm_connector *connector,
     struct edid *edid);





void amdgpu_dm_init_color_mod(void);
int amdgpu_dm_update_crtc_color_mgmt(struct dm_crtc_state *crtc);
int amdgpu_dm_update_plane_color_mgmt(struct dm_crtc_state *crtc,
          struct dc_plane_state *dc_plane_state);

extern const struct drm_encoder_helper_funcs amdgpu_dm_encoder_helper_funcs;
# 77 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_virt.h" 1
# 33 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_virt.h"
struct amdgpu_mm_table {
 struct amdgpu_bo *bo;
 uint32_t *cpu_addr;
 uint64_t gpu_addr;
};




struct amdgpu_vf_error_buffer {
 struct mutex lock;
 int read_count;
 int write_count;
 uint16_t code[16];
 uint16_t flags[16];
 uint64_t data[16];
};




struct amdgpu_virt_ops {
 int (*req_full_gpu)(struct amdgpu_device *adev, bool init);
 int (*rel_full_gpu)(struct amdgpu_device *adev, bool init);
 int (*reset_gpu)(struct amdgpu_device *adev);
 int (*wait_reset)(struct amdgpu_device *adev);
 void (*trans_msg)(struct amdgpu_device *adev, u32 req, u32 data1, u32 data2, u32 data3);
 int (*get_pp_clk)(struct amdgpu_device *adev, u32 type, char *buf);
 int (*force_dpm_level)(struct amdgpu_device *adev, u32 level);
};




struct amdgpu_virt_fw_reserve {
 struct amd_sriov_msg_pf2vf_info_header *p_pf2vf;
 struct amd_sriov_msg_vf2pf_info_header *p_vf2pf;
 unsigned int checksum_key;
};
# 81 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_virt.h"
enum AMDGIM_FEATURE_FLAG {

 AMDGIM_FEATURE_ERROR_LOG_COLLECT = 0x1,

 AMDGIM_FEATURE_GIM_LOAD_UCODES = 0x2,

 AMDGIM_FEATURE_GIM_FLR_VRAMLOST = 0x4,

 AMDGIM_FEATURE_HW_PERF_SIMULATION = (1 << 3),
};

struct amd_sriov_msg_pf2vf_info_header {

 uint32_t size;

 uint32_t version;

 uint32_t reserved[2];
} __attribute__((__aligned__(4)));
struct amdgim_pf2vf_info_v1 {

 struct amd_sriov_msg_pf2vf_info_header header;

 unsigned int uvd_enc_max_pixels_count;

 unsigned int uvd_enc_max_bandwidth;

 unsigned int vce_enc_max_pixels_count;

 unsigned int vce_enc_max_bandwidth;

 unsigned int mecfw_kboffset;

 unsigned int feature_flags;

 unsigned int checksum;
} __attribute__((__aligned__(4)));

struct amdgim_pf2vf_info_v2 {

 struct amd_sriov_msg_pf2vf_info_header header;

 uint32_t checksum;

 uint32_t feature_flags;

 uint32_t uvd_enc_max_pixels_count;

 uint32_t uvd_enc_max_bandwidth;

 uint32_t vce_enc_max_pixels_count;

 uint32_t vce_enc_max_bandwidth;

 uint64_t mecfw_kboffset;

 uint32_t mecfw_ksize;

 uint64_t uvdfw_kboffset;

 uint32_t uvdfw_ksize;

 uint64_t vcefw_kboffset;

 uint32_t vcefw_ksize;
 uint32_t reserved[(256 - (((0)+3) / 4 + ((0)+1) / 2 + ((9 + sizeof(struct amd_sriov_msg_pf2vf_info_header)/sizeof(uint32_t))) + (3)*2))];
} __attribute__((__aligned__(4)));


struct amd_sriov_msg_vf2pf_info_header {

 uint32_t size;

 uint32_t version;

 uint32_t reserved[2];
} __attribute__((__aligned__(4)));

struct amdgim_vf2pf_info_v1 {

 struct amd_sriov_msg_vf2pf_info_header header;

 char driver_version[64];

 unsigned int driver_cert;

 unsigned int os_info;

 unsigned int fb_usage;

 unsigned int gfx_usage;

 unsigned int gfx_health;

 unsigned int compute_usage;

 unsigned int compute_health;

 unsigned int vce_enc_usage;

 unsigned int vce_enc_health;

 unsigned int uvd_enc_usage;

 unsigned int uvd_enc_health;
 unsigned int checksum;
} __attribute__((__aligned__(4)));

struct amdgim_vf2pf_info_v2 {

 struct amd_sriov_msg_vf2pf_info_header header;
 uint32_t checksum;

 uint8_t driver_version[64];

 uint32_t driver_cert;

 uint32_t os_info;

 uint32_t fb_usage;

 uint32_t gfx_usage;

 uint32_t gfx_health;

 uint32_t compute_usage;

 uint32_t compute_health;

 uint32_t vce_enc_usage;

 uint32_t vce_enc_health;

 uint32_t uvd_enc_usage;

 uint32_t uvd_enc_health;
 uint32_t reserved[(256 - (((64)+3) / 4 + ((0)+1) / 2 + ((12 + sizeof(struct amd_sriov_msg_vf2pf_info_header)/sizeof(uint32_t))) + (0)*2))];
} __attribute__((__aligned__(4)));


typedef struct amdgim_vf2pf_info_v2 amdgim_vf2pf_info ;
# 246 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_virt.h"
struct amdgpu_virt {
 uint32_t caps;
 struct amdgpu_bo *csa_obj;
 void *csa_cpu_addr;
 bool chained_ib_support;
 uint32_t reg_val_offs;
 struct amdgpu_irq_src ack_irq;
 struct amdgpu_irq_src rcv_irq;
 struct work_struct flr_work;
 struct amdgpu_mm_table mm_table;
 const struct amdgpu_virt_ops *ops;
 struct amdgpu_vf_error_buffer vf_errors;
 struct amdgpu_virt_fw_reserve fw_reserve;
 uint32_t gim_feature;

 struct mutex dpm_mutex;
 uint32_t reg_access_mode;
};
# 280 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_virt.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool is_virtual_machine(void)
{



 return false;

}




bool amdgpu_virt_mmio_blocked(struct amdgpu_device *adev);
void amdgpu_virt_init_setting(struct amdgpu_device *adev);
uint32_t amdgpu_virt_kiq_rreg(struct amdgpu_device *adev, uint32_t reg);
void amdgpu_virt_kiq_wreg(struct amdgpu_device *adev, uint32_t reg, uint32_t v);
void amdgpu_virt_kiq_reg_write_reg_wait(struct amdgpu_device *adev,
     uint32_t reg0, uint32_t rreg1,
     uint32_t ref, uint32_t mask);
int amdgpu_virt_request_full_gpu(struct amdgpu_device *adev, bool init);
int amdgpu_virt_release_full_gpu(struct amdgpu_device *adev, bool init);
int amdgpu_virt_reset_gpu(struct amdgpu_device *adev);
int amdgpu_virt_wait_reset(struct amdgpu_device *adev);
int amdgpu_virt_alloc_mm_table(struct amdgpu_device *adev);
void amdgpu_virt_free_mm_table(struct amdgpu_device *adev);
int amdgpu_virt_fw_reserve_get_checksum(void *obj, unsigned long obj_size,
     unsigned int key,
     unsigned int chksum);
void amdgpu_virt_init_data_exchange(struct amdgpu_device *adev);
uint32_t amdgpu_virt_get_sclk(struct amdgpu_device *adev, bool lowest);
uint32_t amdgpu_virt_get_mclk(struct amdgpu_device *adev, bool lowest);
# 78 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_csa.h" 1
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_csa.h"
uint32_t amdgpu_get_total_csa_size(struct amdgpu_device *adev);
uint64_t amdgpu_csa_vaddr(struct amdgpu_device *adev);
int amdgpu_allocate_static_csa(struct amdgpu_device *adev, struct amdgpu_bo **bo,
    u32 domain, uint32_t size);
int amdgpu_map_static_csa(struct amdgpu_device *adev, struct amdgpu_vm *vm,
     struct amdgpu_bo *bo, struct amdgpu_bo_va **bo_va,
     uint64_t csa_addr, uint32_t size);
void amdgpu_free_static_csa(struct amdgpu_bo **bo);
# 79 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gart.h" 1
# 32 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gart.h"
struct amdgpu_device;
struct amdgpu_bo;
# 42 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gart.h"
struct amdgpu_gart {
 struct amdgpu_bo *bo;

 void *ptr;
 unsigned num_gpu_pages;
 unsigned num_cpu_pages;
 unsigned table_size;

 struct page **pages;

 bool ready;


 uint64_t gart_pte_flags;
};

int amdgpu_gart_table_vram_alloc(struct amdgpu_device *adev);
void amdgpu_gart_table_vram_free(struct amdgpu_device *adev);
int amdgpu_gart_table_vram_pin(struct amdgpu_device *adev);
void amdgpu_gart_table_vram_unpin(struct amdgpu_device *adev);
int amdgpu_gart_init(struct amdgpu_device *adev);
void amdgpu_gart_fini(struct amdgpu_device *adev);
int amdgpu_gart_unbind(struct amdgpu_device *adev, uint64_t offset,
         int pages);
int amdgpu_gart_map(struct amdgpu_device *adev, uint64_t offset,
      int pages, dma_addr_t *dma_addr, uint64_t flags,
      void *dst);
int amdgpu_gart_bind(struct amdgpu_device *adev, uint64_t offset,
       int pages, struct page **pagelist,
       dma_addr_t *dma_addr, uint64_t flags);
# 80 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_debugfs.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_debugfs.h"
struct amdgpu_debugfs {
 const struct drm_info_list *files;
 unsigned num_files;
};

int amdgpu_debugfs_regs_init(struct amdgpu_device *adev);
void amdgpu_debugfs_regs_cleanup(struct amdgpu_device *adev);
int amdgpu_debugfs_init(struct amdgpu_device *adev);
void amdgpu_debugfs_preempt_cleanup(struct amdgpu_device *adev);
int amdgpu_debugfs_add_files(struct amdgpu_device *adev,
        const struct drm_info_list *files,
        unsigned nfiles);
int amdgpu_debugfs_fence_init(struct amdgpu_device *adev);
int amdgpu_debugfs_firmware_init(struct amdgpu_device *adev);
int amdgpu_debugfs_gem_init(struct amdgpu_device *adev);
# 81 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_job.h" 1
# 40 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_job.h"
struct amdgpu_fence;

struct amdgpu_job {
 struct drm_sched_job base;
 struct amdgpu_vm *vm;
 struct amdgpu_sync sync;
 struct amdgpu_sync sched_sync;
 struct amdgpu_ib *ibs;
 struct dma_fence *fence;
 uint32_t preamble_status;
 uint32_t preemption_status;
 uint32_t num_ibs;
 void *owner;
 bool vm_needs_flush;
 uint64_t vm_pd_addr;
 unsigned vmid;
 unsigned pasid;
 uint32_t gds_base, gds_size;
 uint32_t gws_base, gws_size;
 uint32_t oa_base, oa_size;
 uint32_t vram_lost_counter;


 uint64_t uf_addr;
 uint64_t uf_sequence;

};

int amdgpu_job_alloc(struct amdgpu_device *adev, unsigned num_ibs,
       struct amdgpu_job **job, struct amdgpu_vm *vm);
int amdgpu_job_alloc_with_ib(struct amdgpu_device *adev, unsigned size,
        struct amdgpu_job **job);

void amdgpu_job_free_resources(struct amdgpu_job *job);
void amdgpu_job_free(struct amdgpu_job *job);
int amdgpu_job_submit(struct amdgpu_job *job, struct drm_sched_entity *entity,
        void *owner, struct dma_fence **f);
int amdgpu_job_submit_direct(struct amdgpu_job *job, struct amdgpu_ring *ring,
        struct dma_fence **fence);
# 82 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_bo_list.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_bo_list.h"
struct amdgpu_device;
struct amdgpu_bo;
struct amdgpu_bo_va;
struct amdgpu_fpriv;

struct amdgpu_bo_list_entry {
 struct ttm_validate_buffer tv;
 struct amdgpu_bo_va *bo_va;
 uint32_t priority;
 struct page **user_pages;
 bool user_invalidated;
};

struct amdgpu_bo_list {
 struct callback_head rhead;
 struct kref refcount;
 struct amdgpu_bo *gds_obj;
 struct amdgpu_bo *gws_obj;
 struct amdgpu_bo *oa_obj;
 unsigned first_userptr;
 unsigned num_entries;
};

int amdgpu_bo_list_get(struct amdgpu_fpriv *fpriv, int id,
         struct amdgpu_bo_list **result);
void amdgpu_bo_list_get_list(struct amdgpu_bo_list *list,
        struct list_head *validated);
void amdgpu_bo_list_put(struct amdgpu_bo_list *list);
int amdgpu_bo_create_list_entry_array(struct drm_amdgpu_bo_list_in *in,
          struct drm_amdgpu_bo_list_entry **info_param);

int amdgpu_bo_list_create(struct amdgpu_device *adev,
     struct drm_file *filp,
     struct drm_amdgpu_bo_list_entry *info,
     unsigned num_entries,
     struct amdgpu_bo_list **list);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct amdgpu_bo_list_entry *
amdgpu_bo_list_array_entry(struct amdgpu_bo_list *list, unsigned index)
{
 struct amdgpu_bo_list_entry *array = (void *)&list[1];

 return &array[index];
}
# 83 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gem.h" 1
# 36 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_gem.h"
void amdgpu_gem_object_free(struct drm_gem_object *obj);
int amdgpu_gem_object_open(struct drm_gem_object *obj,
    struct drm_file *file_priv);
void amdgpu_gem_object_close(struct drm_gem_object *obj,
    struct drm_file *file_priv);
unsigned long amdgpu_gem_timeout(uint64_t timeout_ns);




void amdgpu_gem_force_release(struct amdgpu_device *adev);
int amdgpu_gem_object_create(struct amdgpu_device *adev, unsigned long size,
        int alignment, u32 initial_domain,
        u64 flags, enum ttm_bo_type type,
        struct dma_resv *resv,
        struct drm_gem_object **obj);

int amdgpu_mode_dumb_create(struct drm_file *file_priv,
       struct drm_device *dev,
       struct drm_mode_create_dumb *args);
int amdgpu_mode_dumb_mmap(struct drm_file *filp,
     struct drm_device *dev,
     uint32_t handle, uint64_t *offset_p);

int amdgpu_gem_create_ioctl(struct drm_device *dev, void *data,
       struct drm_file *filp);
int amdgpu_gem_info_ioctl(struct drm_device *dev, void *data,
     struct drm_file *filp);
int amdgpu_gem_userptr_ioctl(struct drm_device *dev, void *data,
   struct drm_file *filp);
int amdgpu_gem_mmap_ioctl(struct drm_device *dev, void *data,
     struct drm_file *filp);
int amdgpu_gem_wait_idle_ioctl(struct drm_device *dev, void *data,
         struct drm_file *filp);
int amdgpu_gem_va_ioctl(struct drm_device *dev, void *data,
     struct drm_file *filp);
int amdgpu_gem_op_ioctl(struct drm_device *dev, void *data,
   struct drm_file *filp);

int amdgpu_gem_metadata_ioctl(struct drm_device *dev, void *data,
    struct drm_file *filp);
# 84 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_doorbell.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_doorbell.h"
struct amdgpu_doorbell {

 resource_size_t base;
 resource_size_t size;
 u32 *ptr;
 u32 num_doorbells;
};







struct amdgpu_doorbell_index {
 uint32_t kiq;
 uint32_t mec_ring0;
 uint32_t mec_ring1;
 uint32_t mec_ring2;
 uint32_t mec_ring3;
 uint32_t mec_ring4;
 uint32_t mec_ring5;
 uint32_t mec_ring6;
 uint32_t mec_ring7;
 uint32_t userqueue_start;
 uint32_t userqueue_end;
 uint32_t gfx_ring0;
 uint32_t gfx_ring1;
 uint32_t sdma_engine[8];
 uint32_t ih;
 union {
  struct {
   uint32_t vcn_ring0_1;
   uint32_t vcn_ring2_3;
   uint32_t vcn_ring4_5;
   uint32_t vcn_ring6_7;
  } vcn;
  struct {
   uint32_t uvd_ring0_1;
   uint32_t uvd_ring2_3;
   uint32_t uvd_ring4_5;
   uint32_t uvd_ring6_7;
   uint32_t vce_ring0_1;
   uint32_t vce_ring2_3;
   uint32_t vce_ring4_5;
   uint32_t vce_ring6_7;
  } uvd_vce;
 };
 uint32_t first_non_cp;
 uint32_t last_non_cp;
 uint32_t max_assignment;

 uint32_t sdma_doorbell_range;
};

typedef enum _AMDGPU_DOORBELL_ASSIGNMENT
{
 AMDGPU_DOORBELL_KIQ = 0x000,
 AMDGPU_DOORBELL_HIQ = 0x001,
 AMDGPU_DOORBELL_DIQ = 0x002,
 AMDGPU_DOORBELL_MEC_RING0 = 0x010,
 AMDGPU_DOORBELL_MEC_RING1 = 0x011,
 AMDGPU_DOORBELL_MEC_RING2 = 0x012,
 AMDGPU_DOORBELL_MEC_RING3 = 0x013,
 AMDGPU_DOORBELL_MEC_RING4 = 0x014,
 AMDGPU_DOORBELL_MEC_RING5 = 0x015,
 AMDGPU_DOORBELL_MEC_RING6 = 0x016,
 AMDGPU_DOORBELL_MEC_RING7 = 0x017,
 AMDGPU_DOORBELL_GFX_RING0 = 0x020,
 AMDGPU_DOORBELL_sDMA_ENGINE0 = 0x1E0,
 AMDGPU_DOORBELL_sDMA_ENGINE1 = 0x1E1,
 AMDGPU_DOORBELL_IH = 0x1E8,
 AMDGPU_DOORBELL_MAX_ASSIGNMENT = 0x3FF,
 AMDGPU_DOORBELL_INVALID = 0xFFFF
} AMDGPU_DOORBELL_ASSIGNMENT;

typedef enum _AMDGPU_VEGA20_DOORBELL_ASSIGNMENT
{

 AMDGPU_VEGA20_DOORBELL_KIQ = 0x000,
 AMDGPU_VEGA20_DOORBELL_HIQ = 0x001,
 AMDGPU_VEGA20_DOORBELL_DIQ = 0x002,
 AMDGPU_VEGA20_DOORBELL_MEC_RING0 = 0x003,
 AMDGPU_VEGA20_DOORBELL_MEC_RING1 = 0x004,
 AMDGPU_VEGA20_DOORBELL_MEC_RING2 = 0x005,
 AMDGPU_VEGA20_DOORBELL_MEC_RING3 = 0x006,
 AMDGPU_VEGA20_DOORBELL_MEC_RING4 = 0x007,
 AMDGPU_VEGA20_DOORBELL_MEC_RING5 = 0x008,
 AMDGPU_VEGA20_DOORBELL_MEC_RING6 = 0x009,
 AMDGPU_VEGA20_DOORBELL_MEC_RING7 = 0x00A,
 AMDGPU_VEGA20_DOORBELL_USERQUEUE_START = 0x00B,
 AMDGPU_VEGA20_DOORBELL_USERQUEUE_END = 0x08A,
 AMDGPU_VEGA20_DOORBELL_GFX_RING0 = 0x08B,

 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE0 = 0x100,
 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE1 = 0x10A,
 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE2 = 0x114,
 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE3 = 0x11E,
 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE4 = 0x128,
 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE5 = 0x132,
 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE6 = 0x13C,
 AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE7 = 0x146,

 AMDGPU_VEGA20_DOORBELL_IH = 0x178,




 AMDGPU_VEGA20_DOORBELL64_VCN0_1 = 0x188,
 AMDGPU_VEGA20_DOORBELL64_VCN2_3 = 0x189,
 AMDGPU_VEGA20_DOORBELL64_VCN4_5 = 0x18A,
 AMDGPU_VEGA20_DOORBELL64_VCN6_7 = 0x18B,

 AMDGPU_VEGA20_DOORBELL64_VCN8_9 = 0x18C,
 AMDGPU_VEGA20_DOORBELL64_VCNa_b = 0x18D,
 AMDGPU_VEGA20_DOORBELL64_VCNc_d = 0x18E,
 AMDGPU_VEGA20_DOORBELL64_VCNe_f = 0x18F,

 AMDGPU_VEGA20_DOORBELL64_UVD_RING0_1 = 0x188,
 AMDGPU_VEGA20_DOORBELL64_UVD_RING2_3 = 0x189,
 AMDGPU_VEGA20_DOORBELL64_UVD_RING4_5 = 0x18A,
 AMDGPU_VEGA20_DOORBELL64_UVD_RING6_7 = 0x18B,

 AMDGPU_VEGA20_DOORBELL64_VCE_RING0_1 = 0x18C,
 AMDGPU_VEGA20_DOORBELL64_VCE_RING2_3 = 0x18D,
 AMDGPU_VEGA20_DOORBELL64_VCE_RING4_5 = 0x18E,
 AMDGPU_VEGA20_DOORBELL64_VCE_RING6_7 = 0x18F,

 AMDGPU_VEGA20_DOORBELL64_FIRST_NON_CP = AMDGPU_VEGA20_DOORBELL_sDMA_ENGINE0,
 AMDGPU_VEGA20_DOORBELL64_LAST_NON_CP = AMDGPU_VEGA20_DOORBELL64_VCE_RING6_7,

 AMDGPU_VEGA20_DOORBELL_MAX_ASSIGNMENT = 0x18F,
 AMDGPU_VEGA20_DOORBELL_INVALID = 0xFFFF
} AMDGPU_VEGA20_DOORBELL_ASSIGNMENT;

typedef enum _AMDGPU_NAVI10_DOORBELL_ASSIGNMENT
{

 AMDGPU_NAVI10_DOORBELL_KIQ = 0x000,
 AMDGPU_NAVI10_DOORBELL_HIQ = 0x001,
 AMDGPU_NAVI10_DOORBELL_DIQ = 0x002,
 AMDGPU_NAVI10_DOORBELL_MEC_RING0 = 0x003,
 AMDGPU_NAVI10_DOORBELL_MEC_RING1 = 0x004,
 AMDGPU_NAVI10_DOORBELL_MEC_RING2 = 0x005,
 AMDGPU_NAVI10_DOORBELL_MEC_RING3 = 0x006,
 AMDGPU_NAVI10_DOORBELL_MEC_RING4 = 0x007,
 AMDGPU_NAVI10_DOORBELL_MEC_RING5 = 0x008,
 AMDGPU_NAVI10_DOORBELL_MEC_RING6 = 0x009,
 AMDGPU_NAVI10_DOORBELL_MEC_RING7 = 0x00A,
 AMDGPU_NAVI10_DOORBELL_USERQUEUE_START = 0x00B,
 AMDGPU_NAVI10_DOORBELL_USERQUEUE_END = 0x08A,
 AMDGPU_NAVI10_DOORBELL_GFX_RING0 = 0x08B,
 AMDGPU_NAVI10_DOORBELL_GFX_RING1 = 0x08C,

 AMDGPU_NAVI10_DOORBELL_sDMA_ENGINE0 = 0x100,
 AMDGPU_NAVI10_DOORBELL_sDMA_ENGINE1 = 0x10A,

 AMDGPU_NAVI10_DOORBELL_IH = 0x178,




 AMDGPU_NAVI10_DOORBELL64_VCN0_1 = 0x188,
 AMDGPU_NAVI10_DOORBELL64_VCN2_3 = 0x189,
 AMDGPU_NAVI10_DOORBELL64_VCN4_5 = 0x18A,
 AMDGPU_NAVI10_DOORBELL64_VCN6_7 = 0x18B,

 AMDGPU_NAVI10_DOORBELL64_FIRST_NON_CP = AMDGPU_NAVI10_DOORBELL_sDMA_ENGINE0,
 AMDGPU_NAVI10_DOORBELL64_LAST_NON_CP = AMDGPU_NAVI10_DOORBELL64_VCN6_7,

 AMDGPU_NAVI10_DOORBELL_MAX_ASSIGNMENT = 0x18F,
 AMDGPU_NAVI10_DOORBELL_INVALID = 0xFFFF
} AMDGPU_NAVI10_DOORBELL_ASSIGNMENT;




typedef enum _AMDGPU_DOORBELL64_ASSIGNMENT
{
# 214 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_doorbell.h"
 AMDGPU_DOORBELL64_KIQ = 0x00,


 AMDGPU_DOORBELL64_HIQ = 0x01,
 AMDGPU_DOORBELL64_DIQ = 0x02,


 AMDGPU_DOORBELL64_MEC_RING0 = 0x03,
 AMDGPU_DOORBELL64_MEC_RING1 = 0x04,
 AMDGPU_DOORBELL64_MEC_RING2 = 0x05,
 AMDGPU_DOORBELL64_MEC_RING3 = 0x06,
 AMDGPU_DOORBELL64_MEC_RING4 = 0x07,
 AMDGPU_DOORBELL64_MEC_RING5 = 0x08,
 AMDGPU_DOORBELL64_MEC_RING6 = 0x09,
 AMDGPU_DOORBELL64_MEC_RING7 = 0x0a,


 AMDGPU_DOORBELL64_USERQUEUE_START = 0x0b,
 AMDGPU_DOORBELL64_USERQUEUE_END = 0x8a,


 AMDGPU_DOORBELL64_GFX_RING0 = 0x8b,
# 247 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_doorbell.h"
 AMDGPU_DOORBELL64_sDMA_ENGINE0 = 0xF0,
 AMDGPU_DOORBELL64_sDMA_HI_PRI_ENGINE0 = 0xF1,
 AMDGPU_DOORBELL64_sDMA_ENGINE1 = 0xF2,
 AMDGPU_DOORBELL64_sDMA_HI_PRI_ENGINE1 = 0xF3,


 AMDGPU_DOORBELL64_IH = 0xF4,
 AMDGPU_DOORBELL64_IH_RING1 = 0xF5,
 AMDGPU_DOORBELL64_IH_RING2 = 0xF6,


 AMDGPU_DOORBELL64_VCN0_1 = 0xF8,
 AMDGPU_DOORBELL64_VCN2_3 = 0xF9,
 AMDGPU_DOORBELL64_VCN4_5 = 0xFA,
 AMDGPU_DOORBELL64_VCN6_7 = 0xFB,




 AMDGPU_DOORBELL64_UVD_RING0_1 = 0xF8,
 AMDGPU_DOORBELL64_UVD_RING2_3 = 0xF9,
 AMDGPU_DOORBELL64_UVD_RING4_5 = 0xFA,
 AMDGPU_DOORBELL64_UVD_RING6_7 = 0xFB,

 AMDGPU_DOORBELL64_VCE_RING0_1 = 0xFC,
 AMDGPU_DOORBELL64_VCE_RING2_3 = 0xFD,
 AMDGPU_DOORBELL64_VCE_RING4_5 = 0xFE,
 AMDGPU_DOORBELL64_VCE_RING6_7 = 0xFF,

 AMDGPU_DOORBELL64_FIRST_NON_CP = AMDGPU_DOORBELL64_sDMA_ENGINE0,
 AMDGPU_DOORBELL64_LAST_NON_CP = AMDGPU_DOORBELL64_VCE_RING6_7,

 AMDGPU_DOORBELL64_MAX_ASSIGNMENT = 0xFF,
 AMDGPU_DOORBELL64_INVALID = 0xFFFF
} AMDGPU_DOORBELL64_ASSIGNMENT;

u32 amdgpu_mm_rdoorbell(struct amdgpu_device *adev, u32 index);
void amdgpu_mm_wdoorbell(struct amdgpu_device *adev, u32 index, u32 v);
u64 amdgpu_mm_rdoorbell64(struct amdgpu_device *adev, u32 index);
void amdgpu_mm_wdoorbell64(struct amdgpu_device *adev, u32 index, u64 v);
# 85 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_amdkfd.h" 1
# 36 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_amdkfd.h"
extern uint64_t amdgpu_amdkfd_total_mem_size;

struct amdgpu_device;

struct kfd_bo_va_list {
 struct list_head bo_list;
 struct amdgpu_bo_va *bo_va;
 void *kgd_dev;
 bool is_mapped;
 uint64_t va;
 uint64_t pte_flags;
};

struct kgd_mem {
 struct mutex lock;
 struct amdgpu_bo *bo;
 struct list_head bo_va_list;

 struct ttm_validate_buffer validate_list;
 struct ttm_validate_buffer resv_list;
 uint32_t domain;
 unsigned int mapped_to_gpu_memory;
 uint64_t va;

 uint32_t mapping_flags;

 atomic_t invalid;
 struct amdkfd_process_info *process_info;

 struct amdgpu_sync sync;

 bool aql_queue;
};


struct amdgpu_amdkfd_fence {
 struct dma_fence base;
 struct mm_struct *mm;
 spinlock_t lock;
 char timeline_name[16];
};

struct amdgpu_kfd_dev {
 struct kfd_dev *dev;
 uint64_t vram_used;
};

enum kgd_engine_type {
 KGD_ENGINE_PFP = 1,
 KGD_ENGINE_ME,
 KGD_ENGINE_CE,
 KGD_ENGINE_MEC1,
 KGD_ENGINE_MEC2,
 KGD_ENGINE_RLC,
 KGD_ENGINE_SDMA1,
 KGD_ENGINE_SDMA2,
 KGD_ENGINE_MAX
};

struct amdgpu_amdkfd_fence *amdgpu_amdkfd_fence_create(u64 context,
             struct mm_struct *mm);
bool amdkfd_fence_check_mm(struct dma_fence *f, struct mm_struct *mm);
struct amdgpu_amdkfd_fence *to_amdgpu_amdkfd_fence(struct dma_fence *f);

struct amdkfd_process_info {

 struct list_head vm_list_head;

 struct list_head kfd_bo_list;

 struct list_head userptr_valid_list;
 struct list_head userptr_inval_list;

 struct mutex lock;


 unsigned int n_vms;

 struct amdgpu_amdkfd_fence *eviction_fence;


 atomic_t evicted_bos;
 struct delayed_work restore_userptr_work;
 struct pid *pid;
};

int amdgpu_amdkfd_init(void);
void amdgpu_amdkfd_fini(void);

void amdgpu_amdkfd_suspend(struct amdgpu_device *adev);
int amdgpu_amdkfd_resume(struct amdgpu_device *adev);
void amdgpu_amdkfd_interrupt(struct amdgpu_device *adev,
   const void *ih_ring_entry);
void amdgpu_amdkfd_device_probe(struct amdgpu_device *adev);
void amdgpu_amdkfd_device_init(struct amdgpu_device *adev);
void amdgpu_amdkfd_device_fini(struct amdgpu_device *adev);

int amdgpu_amdkfd_evict_userptr(struct kgd_mem *mem, struct mm_struct *mm);
int amdgpu_amdkfd_submit_ib(struct kgd_dev *kgd, enum kgd_engine_type engine,
    uint32_t vmid, uint64_t gpu_addr,
    uint32_t *ib_cmd, uint32_t ib_len);
void amdgpu_amdkfd_set_compute_idle(struct kgd_dev *kgd, bool idle);
bool amdgpu_amdkfd_have_atomics_support(struct kgd_dev *kgd);

struct kfd2kgd_calls *amdgpu_amdkfd_gfx_7_get_functions(void);
struct kfd2kgd_calls *amdgpu_amdkfd_gfx_8_0_get_functions(void);
struct kfd2kgd_calls *amdgpu_amdkfd_gfx_9_0_get_functions(void);
struct kfd2kgd_calls *amdgpu_amdkfd_arcturus_get_functions(void);
struct kfd2kgd_calls *amdgpu_amdkfd_gfx_10_0_get_functions(void);

bool amdgpu_amdkfd_is_kfd_vmid(struct amdgpu_device *adev, u32 vmid);

int amdgpu_amdkfd_pre_reset(struct amdgpu_device *adev);

int amdgpu_amdkfd_post_reset(struct amdgpu_device *adev);

void amdgpu_amdkfd_gpu_reset(struct kgd_dev *kgd);


int amdgpu_amdkfd_alloc_gtt_mem(struct kgd_dev *kgd, size_t size,
    void **mem_obj, uint64_t *gpu_addr,
    void **cpu_ptr, bool mqd_gfx9);
void amdgpu_amdkfd_free_gtt_mem(struct kgd_dev *kgd, void *mem_obj);
int amdgpu_amdkfd_alloc_gws(struct kgd_dev *kgd, size_t size, void **mem_obj);
void amdgpu_amdkfd_free_gws(struct kgd_dev *kgd, void *mem_obj);
int amdgpu_amdkfd_add_gws_to_process(void *info, void *gws, struct kgd_mem **mem);
int amdgpu_amdkfd_remove_gws_from_process(void *info, void *mem);
uint32_t amdgpu_amdkfd_get_fw_version(struct kgd_dev *kgd,
          enum kgd_engine_type type);
void amdgpu_amdkfd_get_local_mem_info(struct kgd_dev *kgd,
          struct kfd_local_mem_info *mem_info);
uint64_t amdgpu_amdkfd_get_gpu_clock_counter(struct kgd_dev *kgd);

uint32_t amdgpu_amdkfd_get_max_engine_clock_in_mhz(struct kgd_dev *kgd);
void amdgpu_amdkfd_get_cu_info(struct kgd_dev *kgd, struct kfd_cu_info *cu_info);
int amdgpu_amdkfd_get_dmabuf_info(struct kgd_dev *kgd, int dma_buf_fd,
      struct kgd_dev **dmabuf_kgd,
      uint64_t *bo_size, void *metadata_buffer,
      size_t buffer_size, uint32_t *metadata_size,
      uint32_t *flags);
uint64_t amdgpu_amdkfd_get_vram_usage(struct kgd_dev *kgd);
uint64_t amdgpu_amdkfd_get_hive_id(struct kgd_dev *kgd);
uint64_t amdgpu_amdkfd_get_mmio_remap_phys_addr(struct kgd_dev *kgd);
uint32_t amdgpu_amdkfd_get_num_gws(struct kgd_dev *kgd);
uint8_t amdgpu_amdkfd_get_xgmi_hops_count(struct kgd_dev *dst, struct kgd_dev *src);
# 198 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_amdkfd.h"
int amdgpu_amdkfd_gpuvm_create_process_vm(struct kgd_dev *kgd, unsigned int pasid,
     void **vm, void **process_info,
     struct dma_fence **ef);
int amdgpu_amdkfd_gpuvm_acquire_process_vm(struct kgd_dev *kgd,
     struct file *filp, unsigned int pasid,
     void **vm, void **process_info,
     struct dma_fence **ef);
void amdgpu_amdkfd_gpuvm_destroy_cb(struct amdgpu_device *adev,
    struct amdgpu_vm *vm);
void amdgpu_amdkfd_gpuvm_destroy_process_vm(struct kgd_dev *kgd, void *vm);
void amdgpu_amdkfd_gpuvm_release_process_vm(struct kgd_dev *kgd, void *vm);
uint64_t amdgpu_amdkfd_gpuvm_get_process_page_dir(void *vm);
int amdgpu_amdkfd_gpuvm_alloc_memory_of_gpu(
  struct kgd_dev *kgd, uint64_t va, uint64_t size,
  void *vm, struct kgd_mem **mem,
  uint64_t *offset, uint32_t flags);
int amdgpu_amdkfd_gpuvm_free_memory_of_gpu(
  struct kgd_dev *kgd, struct kgd_mem *mem);
int amdgpu_amdkfd_gpuvm_map_memory_to_gpu(
  struct kgd_dev *kgd, struct kgd_mem *mem, void *vm);
int amdgpu_amdkfd_gpuvm_unmap_memory_from_gpu(
  struct kgd_dev *kgd, struct kgd_mem *mem, void *vm);
int amdgpu_amdkfd_gpuvm_sync_memory(
  struct kgd_dev *kgd, struct kgd_mem *mem, bool intr);
int amdgpu_amdkfd_gpuvm_map_gtt_bo_to_kernel(struct kgd_dev *kgd,
  struct kgd_mem *mem, void **kptr, uint64_t *size);
int amdgpu_amdkfd_gpuvm_restore_process_bos(void *process_info,
         struct dma_fence **ef);

int amdgpu_amdkfd_gpuvm_get_vm_fault_info(struct kgd_dev *kgd,
           struct kfd_vm_fault_info *info);

int amdgpu_amdkfd_gpuvm_import_dmabuf(struct kgd_dev *kgd,
          struct dma_buf *dmabuf,
          uint64_t va, void *vm,
          struct kgd_mem **mem, uint64_t *size,
          uint64_t *mmap_offset);

void amdgpu_amdkfd_gpuvm_init_mem_limits(void);
void amdgpu_amdkfd_unreserve_memory_limit(struct amdgpu_bo *bo);


int kgd2kfd_init(void);
void kgd2kfd_exit(void);
struct kfd_dev *kgd2kfd_probe(struct kgd_dev *kgd, struct pci_dev *pdev,
         const struct kfd2kgd_calls *f2g);
bool kgd2kfd_device_init(struct kfd_dev *kfd,
    const struct kgd2kfd_shared_resources *gpu_resources);
void kgd2kfd_device_exit(struct kfd_dev *kfd);
void kgd2kfd_suspend(struct kfd_dev *kfd);
int kgd2kfd_resume(struct kfd_dev *kfd);
int kgd2kfd_pre_reset(struct kfd_dev *kfd);
int kgd2kfd_post_reset(struct kfd_dev *kfd);
void kgd2kfd_interrupt(struct kfd_dev *kfd, const void *ih_ring_entry);
int kgd2kfd_quiesce_mm(struct mm_struct *mm);
int kgd2kfd_resume_mm(struct mm_struct *mm);
int kgd2kfd_schedule_evict_and_restore_process(struct mm_struct *mm,
            struct dma_fence *fence);
void kgd2kfd_set_sram_ecc_flag(struct kfd_dev *kfd);
# 86 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/amdgpu_smu.h" 1
# 25 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/amdgpu_smu.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 1
# 26 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/amdgpu_smu.h" 2


# 1 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_pp_smu.h" 1
# 33 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_pp_smu.h"
typedef bool BOOLEAN;

enum pp_smu_ver {






 PP_SMU_UNSUPPORTED,
 PP_SMU_VER_RV,

 PP_SMU_VER_NV,





 PP_SMU_VER_MAX
};

struct pp_smu {
 enum pp_smu_ver ver;
 const void *pp;






 const void *dm;
};

enum pp_smu_status {
 PP_SMU_RESULT_UNDEFINED = 0,
 PP_SMU_RESULT_OK = 1,
 PP_SMU_RESULT_FAIL,
 PP_SMU_RESULT_UNSUPPORTED
};




enum wm_type {
 WM_TYPE_PSTATE_CHG = 0,
 WM_TYPE_RETRAINING = 1,
};


struct pp_smu_wm_set_range {
 uint16_t min_fill_clk_mhz;
 uint16_t max_fill_clk_mhz;
 uint16_t min_drain_clk_mhz;
 uint16_t max_drain_clk_mhz;

 uint8_t wm_inst;
 uint8_t wm_type;
};



struct pp_smu_wm_range_sets {
 unsigned int num_reader_wm_sets;
 struct pp_smu_wm_set_range reader_wm_sets[4];

 unsigned int num_writer_wm_sets;
 struct pp_smu_wm_set_range writer_wm_sets[4];
};

struct pp_smu_funcs_rv {
 struct pp_smu pp_smu;





 void (*set_display_count)(struct pp_smu *pp, int count);
# 118 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_pp_smu.h"
 void (*set_wm_ranges)(struct pp_smu *pp,
   struct pp_smu_wm_range_sets *ranges);




 void (*set_hard_min_dcfclk_by_freq)(struct pp_smu *pp, int mhz);





 void (*set_min_deep_sleep_dcfclk)(struct pp_smu *pp, int mhz);




 void (*set_hard_min_fclk_by_freq)(struct pp_smu *pp, int mhz);




 void (*set_hard_min_socclk_by_freq)(struct pp_smu *pp, int mhz);


 void (*set_pme_wa_enable)(struct pp_smu *pp);
};





enum pp_smu_nv_clock_id {
 PP_SMU_NV_DISPCLK,
 PP_SMU_NV_PHYCLK,
 PP_SMU_NV_PIXELCLK
};




struct pp_smu_nv_clock_table {

 unsigned int displayClockInKhz;
 unsigned int dppClockInKhz;
 unsigned int phyClockInKhz;
 unsigned int pixelClockInKhz;
 unsigned int dscClockInKhz;


 unsigned int fabricClockInKhz;
 unsigned int socClockInKhz;
 unsigned int dcfClockInKhz;
 unsigned int uClockInKhz;
};

struct pp_smu_funcs_nv {
 struct pp_smu pp_smu;




 enum pp_smu_status (*set_display_count)(struct pp_smu *pp, int count);




 enum pp_smu_status (*set_hard_min_dcfclk_by_freq)(struct pp_smu *pp, int Mhz);





 enum pp_smu_status (*set_min_deep_sleep_dcfclk)(struct pp_smu *pp, int Mhz);




 enum pp_smu_status (*set_hard_min_uclk_by_freq)(struct pp_smu *pp, int Mhz);




 enum pp_smu_status (*set_hard_min_socclk_by_freq)(struct pp_smu *pp, int Mhz);


 enum pp_smu_status (*set_pme_wa_enable)(struct pp_smu *pp);




 enum pp_smu_status (*set_voltage_by_freq)(struct pp_smu *pp,
   enum pp_smu_nv_clock_id clock_id, int Mhz);
# 224 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_pp_smu.h"
 enum pp_smu_status (*set_wm_ranges)(struct pp_smu *pp,
   struct pp_smu_wm_range_sets *ranges);




 enum pp_smu_status (*get_maximum_sustainable_clocks)(struct pp_smu *pp,
   struct pp_smu_nv_clock_table *max_clocks);



 enum pp_smu_status (*get_uclk_dpm_states)(struct pp_smu *pp,
   unsigned int *clock_values_in_khz, unsigned int *num_states);
# 247 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_pp_smu.h"
 enum pp_smu_status (*set_pstate_handshake_support)(struct pp_smu *pp,
   BOOLEAN pstate_handshake_supported);
};
# 293 "../drivers/gpu/drm/amd/amdgpu/../display/dc/dm_pp_smu.h"
struct pp_smu_funcs {
 struct pp_smu ctx;
 union {
  struct pp_smu_funcs_rv rv_funcs;

  struct pp_smu_funcs_nv nv_funcs;





 };
};
# 29 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/amdgpu_smu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/smu_types.h" 1
# 174 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/smu_types.h"
enum smu_message_type {
 SMU_MSG_TestMessage, SMU_MSG_GetSmuVersion, SMU_MSG_GetDriverIfVersion, SMU_MSG_SetAllowedFeaturesMaskLow, SMU_MSG_SetAllowedFeaturesMaskHigh, SMU_MSG_EnableAllSmuFeatures, SMU_MSG_DisableAllSmuFeatures, SMU_MSG_EnableSmuFeaturesLow, SMU_MSG_EnableSmuFeaturesHigh, SMU_MSG_DisableSmuFeaturesLow, SMU_MSG_DisableSmuFeaturesHigh, SMU_MSG_GetEnabledSmuFeaturesLow, SMU_MSG_GetEnabledSmuFeaturesHigh, SMU_MSG_SetWorkloadMask, SMU_MSG_SetPptLimit, SMU_MSG_SetDriverDramAddrHigh, SMU_MSG_SetDriverDramAddrLow, SMU_MSG_SetToolsDramAddrHigh, SMU_MSG_SetToolsDramAddrLow, SMU_MSG_TransferTableSmu2Dram, SMU_MSG_TransferTableDram2Smu, SMU_MSG_UseDefaultPPTable, SMU_MSG_UseBackupPPTable, SMU_MSG_RunBtc, SMU_MSG_RequestI2CBus, SMU_MSG_ReleaseI2CBus, SMU_MSG_SetFloorSocVoltage, SMU_MSG_SoftReset, SMU_MSG_StartBacoMonitor, SMU_MSG_CancelBacoMonitor, SMU_MSG_EnterBaco, SMU_MSG_SetSoftMinByFreq, SMU_MSG_SetSoftMaxByFreq, SMU_MSG_SetHardMinByFreq, SMU_MSG_SetHardMaxByFreq, SMU_MSG_GetMinDpmFreq, SMU_MSG_GetMaxDpmFreq, SMU_MSG_GetDpmFreqByIndex, SMU_MSG_GetDpmClockFreq, SMU_MSG_GetSsVoltageByDpm, SMU_MSG_SetMemoryChannelConfig, SMU_MSG_SetGeminiMode, SMU_MSG_SetGeminiApertureHigh, SMU_MSG_SetGeminiApertureLow, SMU_MSG_SetMinLinkDpmByIndex, SMU_MSG_OverridePcieParameters, SMU_MSG_OverDriveSetPercentage, SMU_MSG_SetMinDeepSleepDcefclk, SMU_MSG_ReenableAcDcInterrupt, SMU_MSG_NotifyPowerSource, SMU_MSG_SetUclkFastSwitch, SMU_MSG_SetUclkDownHyst, SMU_MSG_GfxDeviceDriverReset, SMU_MSG_GetCurrentRpm, SMU_MSG_SetVideoFps, SMU_MSG_SetTjMax, SMU_MSG_SetFanTemperatureTarget, SMU_MSG_PrepareMp1ForUnload, SMU_MSG_DramLogSetDramAddrHigh, SMU_MSG_DramLogSetDramAddrLow, SMU_MSG_DramLogSetDramSize, SMU_MSG_SetFanMaxRpm, SMU_MSG_SetFanMinPwm, SMU_MSG_ConfigureGfxDidt, SMU_MSG_NumOfDisplays, SMU_MSG_RemoveMargins, SMU_MSG_ReadSerialNumTop32, SMU_MSG_ReadSerialNumBottom32, SMU_MSG_SetSystemVirtualDramAddrHigh, SMU_MSG_SetSystemVirtualDramAddrLow, SMU_MSG_WaflTest, SMU_MSG_SetFclkGfxClkRatio, SMU_MSG_AllowGfxOff, SMU_MSG_DisallowGfxOff, SMU_MSG_GetPptLimit, SMU_MSG_GetDcModeMaxDpmFreq, SMU_MSG_GetDebugData, SMU_MSG_SetXgmiMode, SMU_MSG_RunAfllBtc, SMU_MSG_ExitBaco, SMU_MSG_PrepareMp1ForReset, SMU_MSG_PrepareMp1ForShutdown, SMU_MSG_SetMGpuFanBoostLimitRpm, SMU_MSG_GetAVFSVoltageByDpm, SMU_MSG_PowerUpVcn, SMU_MSG_PowerDownVcn, SMU_MSG_PowerUpJpeg, SMU_MSG_PowerDownJpeg, SMU_MSG_BacoAudioD3PME, SMU_MSG_ArmD3, SMU_MSG_RunGfxDcBtc, SMU_MSG_RunSocDcBtc, SMU_MSG_SetMemoryChannelEnable, SMU_MSG_SetDfSwitchType, SMU_MSG_GetVoltageByDpm, SMU_MSG_GetVoltageByDpmOverdrive, SMU_MSG_PowerUpVcn0, SMU_MSG_PowerDownVcn0, SMU_MSG_PowerUpVcn1, SMU_MSG_PowerDownVcn1, SMU_MSG_PowerUpGfx, SMU_MSG_PowerDownIspByTile, SMU_MSG_PowerUpIspByTile, SMU_MSG_PowerDownSdma, SMU_MSG_PowerUpSdma, SMU_MSG_SetHardMinIspclkByFreq, SMU_MSG_SetHardMinVcn, SMU_MSG_Spare1, SMU_MSG_Spare2, SMU_MSG_SetAllowFclkSwitch, SMU_MSG_SetMinVideoGfxclkFreq, SMU_MSG_ActiveProcessNotify, SMU_MSG_SetCustomPolicy, SMU_MSG_QueryPowerLimit, SMU_MSG_SetGfxclkOverdriveByFreqVid, SMU_MSG_SetHardMinDcfclkByFreq, SMU_MSG_SetHardMinSocclkByFreq, SMU_MSG_ControlIgpuATS, SMU_MSG_SetMinVideoFclkFreq, SMU_MSG_SetMinDeepSleepDcfclk, SMU_MSG_ForcePowerDownGfx, SMU_MSG_SetPhyclkVoltageByFreq, SMU_MSG_SetDppclkVoltageByFreq, SMU_MSG_SetSoftMinVcn, SMU_MSG_EnablePostCode, SMU_MSG_GetGfxclkFrequency, SMU_MSG_GetFclkFrequency, SMU_MSG_GetMinGfxclkFrequency, SMU_MSG_GetMaxGfxclkFrequency, SMU_MSG_SetGfxCGPG, SMU_MSG_SetSoftMaxGfxClk, SMU_MSG_SetHardMinGfxClk, SMU_MSG_SetSoftMaxSocclkByFreq, SMU_MSG_SetSoftMaxFclkByFreq, SMU_MSG_SetSoftMaxVcn, SMU_MSG_PowerGateMmHub, SMU_MSG_UpdatePmeRestore, SMU_MSG_GpuChangeState, SMU_MSG_SetPowerLimitPercentage, SMU_MSG_ForceGfxContentSave, SMU_MSG_EnableTmdp48MHzRefclkPwrDown, SMU_MSG_PowerGateAtHub, SMU_MSG_SetSoftMinJpeg, SMU_MSG_SetHardMinFclkByFreq,
 SMU_MSG_MAX_COUNT,
};

enum smu_clk_type {
 SMU_GFXCLK,
 SMU_VCLK,
 SMU_DCLK,
 SMU_ECLK,
 SMU_SOCCLK,
 SMU_UCLK,
 SMU_DCEFCLK,
 SMU_DISPCLK,
 SMU_PIXCLK,
 SMU_PHYCLK,
 SMU_FCLK,
 SMU_SCLK,
 SMU_MCLK,
 SMU_PCIE,
 SMU_OD_SCLK,
 SMU_OD_MCLK,
 SMU_OD_VDDC_CURVE,
 SMU_OD_RANGE,
 SMU_CLK_COUNT,
};
# 258 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/smu_types.h"
enum smu_feature_mask {
 SMU_FEATURE_DPM_PREFETCHER_BIT, SMU_FEATURE_DPM_GFXCLK_BIT, SMU_FEATURE_DPM_UCLK_BIT, SMU_FEATURE_DPM_SOCCLK_BIT, SMU_FEATURE_DPM_UVD_BIT, SMU_FEATURE_DPM_VCE_BIT, SMU_FEATURE_ULV_BIT, SMU_FEATURE_DPM_MP0CLK_BIT, SMU_FEATURE_DPM_LINK_BIT, SMU_FEATURE_DPM_DCEFCLK_BIT, SMU_FEATURE_DS_GFXCLK_BIT, SMU_FEATURE_DS_SOCCLK_BIT, SMU_FEATURE_DS_LCLK_BIT, SMU_FEATURE_PPT_BIT, SMU_FEATURE_TDC_BIT, SMU_FEATURE_THERMAL_BIT, SMU_FEATURE_GFX_PER_CU_CG_BIT, SMU_FEATURE_RM_BIT, SMU_FEATURE_DS_DCEFCLK_BIT, SMU_FEATURE_ACDC_BIT, SMU_FEATURE_VR0HOT_BIT, SMU_FEATURE_VR1HOT_BIT, SMU_FEATURE_FW_CTF_BIT, SMU_FEATURE_LED_DISPLAY_BIT, SMU_FEATURE_FAN_CONTROL_BIT, SMU_FEATURE_GFX_EDC_BIT, SMU_FEATURE_GFXOFF_BIT, SMU_FEATURE_CG_BIT, SMU_FEATURE_DPM_FCLK_BIT, SMU_FEATURE_DS_FCLK_BIT, SMU_FEATURE_DS_MP1CLK_BIT, SMU_FEATURE_DS_MP0CLK_BIT, SMU_FEATURE_XGMI_BIT, SMU_FEATURE_DPM_GFX_PACE_BIT, SMU_FEATURE_MEM_VDDCI_SCALING_BIT, SMU_FEATURE_MEM_MVDD_SCALING_BIT, SMU_FEATURE_DS_UCLK_BIT, SMU_FEATURE_GFX_ULV_BIT, SMU_FEATURE_FW_DSTATE_BIT, SMU_FEATURE_BACO_BIT, SMU_FEATURE_VCN_PG_BIT, SMU_FEATURE_JPEG_PG_BIT, SMU_FEATURE_USB_PG_BIT, SMU_FEATURE_RSMU_SMN_CG_BIT, SMU_FEATURE_APCC_PLUS_BIT, SMU_FEATURE_GTHR_BIT, SMU_FEATURE_GFX_DCS_BIT, SMU_FEATURE_GFX_SS_BIT, SMU_FEATURE_OUT_OF_BAND_MONITOR_BIT, SMU_FEATURE_TEMP_DEPENDENT_VMIN_BIT, SMU_FEATURE_MMHUB_PG_BIT, SMU_FEATURE_ATHUB_PG_BIT, SMU_FEATURE_WAFL_CG_BIT,
 SMU_FEATURE_COUNT,
};
# 30 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/amdgpu_smu.h" 2





struct smu_hw_power_state {
 unsigned int magic;
};

struct smu_power_state;

enum smu_state_ui_label {
 SMU_STATE_UI_LABEL_NONE,
 SMU_STATE_UI_LABEL_BATTERY,
 SMU_STATE_UI_TABEL_MIDDLE_LOW,
 SMU_STATE_UI_LABEL_BALLANCED,
 SMU_STATE_UI_LABEL_MIDDLE_HIGHT,
 SMU_STATE_UI_LABEL_PERFORMANCE,
 SMU_STATE_UI_LABEL_BACO,
};

enum smu_state_classification_flag {
 SMU_STATE_CLASSIFICATION_FLAG_BOOT = 0x0001,
 SMU_STATE_CLASSIFICATION_FLAG_THERMAL = 0x0002,
 SMU_STATE_CLASSIFICATIN_FLAG_LIMITED_POWER_SOURCE = 0x0004,
 SMU_STATE_CLASSIFICATION_FLAG_RESET = 0x0008,
 SMU_STATE_CLASSIFICATION_FLAG_FORCED = 0x0010,
 SMU_STATE_CLASSIFICATION_FLAG_USER_3D_PERFORMANCE = 0x0020,
 SMU_STATE_CLASSIFICATION_FLAG_USER_2D_PERFORMANCE = 0x0040,
 SMU_STATE_CLASSIFICATION_FLAG_3D_PERFORMANCE = 0x0080,
 SMU_STATE_CLASSIFICATION_FLAG_AC_OVERDIRVER_TEMPLATE = 0x0100,
 SMU_STATE_CLASSIFICATION_FLAG_UVD = 0x0200,
 SMU_STATE_CLASSIFICATION_FLAG_3D_PERFORMANCE_LOW = 0x0400,
 SMU_STATE_CLASSIFICATION_FLAG_ACPI = 0x0800,
 SMU_STATE_CLASSIFICATION_FLAG_HD2 = 0x1000,
 SMU_STATE_CLASSIFICATION_FLAG_UVD_HD = 0x2000,
 SMU_STATE_CLASSIFICATION_FLAG_UVD_SD = 0x4000,
 SMU_STATE_CLASSIFICATION_FLAG_USER_DC_PERFORMANCE = 0x8000,
 SMU_STATE_CLASSIFICATION_FLAG_DC_OVERDIRVER_TEMPLATE = 0x10000,
 SMU_STATE_CLASSIFICATION_FLAG_BACO = 0x20000,
 SMU_STATE_CLASSIFICATIN_FLAG_LIMITED_POWER_SOURCE2 = 0x40000,
 SMU_STATE_CLASSIFICATION_FLAG_ULV = 0x80000,
 SMU_STATE_CLASSIFICATION_FLAG_UVD_MVC = 0x100000,
};

struct smu_state_classification_block {
 enum smu_state_ui_label ui_label;
 enum smu_state_classification_flag flags;
 int bios_index;
 bool temporary_state;
 bool to_be_deleted;
};

struct smu_state_pcie_block {
 unsigned int lanes;
};

enum smu_refreshrate_source {
 SMU_REFRESHRATE_SOURCE_EDID,
 SMU_REFRESHRATE_SOURCE_EXPLICIT
};

struct smu_state_display_block {
 bool disable_frame_modulation;
 bool limit_refreshrate;
 enum smu_refreshrate_source refreshrate_source;
 int explicit_refreshrate;
 int edid_refreshrate_index;
 bool enable_vari_bright;
};

struct smu_state_memroy_block {
 bool dll_off;
 uint8_t m3arb;
 uint8_t unused[3];
};

struct smu_state_software_algorithm_block {
 bool disable_load_balancing;
 bool enable_sleep_for_timestamps;
};

struct smu_temperature_range {
 int min;
 int max;
 int edge_emergency_max;
 int hotspot_min;
 int hotspot_crit_max;
 int hotspot_emergency_max;
 int mem_min;
 int mem_crit_max;
 int mem_emergency_max;
};

struct smu_state_validation_block {
 bool single_display_only;
 bool disallow_on_dc;
 uint8_t supported_power_levels;
};

struct smu_uvd_clocks {
 uint32_t vclk;
 uint32_t dclk;
};




struct smu_power_state {
 uint32_t id;
 struct list_head ordered_list;
 struct list_head all_states_list;

 struct smu_state_classification_block classification;
 struct smu_state_validation_block validation;
 struct smu_state_pcie_block pcie;
 struct smu_state_display_block display;
 struct smu_state_memroy_block memory;
 struct smu_temperature_range temperatures;
 struct smu_state_software_algorithm_block software;
 struct smu_uvd_clocks uvd_clocks;
 struct smu_hw_power_state hardware;
};

enum smu_power_src_type
{
 SMU_POWER_SOURCE_AC,
 SMU_POWER_SOURCE_DC,
 SMU_POWER_SOURCE_COUNT,
};

enum smu_memory_pool_size
{
    SMU_MEMORY_POOL_SIZE_ZERO = 0,
    SMU_MEMORY_POOL_SIZE_256_MB = 0x10000000,
    SMU_MEMORY_POOL_SIZE_512_MB = 0x20000000,
    SMU_MEMORY_POOL_SIZE_1_GB = 0x40000000,
    SMU_MEMORY_POOL_SIZE_2_GB = 0x80000000,
};
# 177 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/amdgpu_smu.h"
struct smu_table {
 uint64_t size;
 uint32_t align;
 uint8_t domain;
 uint64_t mc_address;
 void *cpu_addr;
 struct amdgpu_bo *bo;
};

enum smu_perf_level_designation {
 PERF_LEVEL_ACTIVITY,
 PERF_LEVEL_POWER_CONTAINMENT,
};

struct smu_performance_level {
 uint32_t core_clock;
 uint32_t memory_clock;
 uint32_t vddc;
 uint32_t vddci;
 uint32_t non_local_mem_freq;
 uint32_t non_local_mem_width;
};

struct smu_clock_info {
 uint32_t min_mem_clk;
 uint32_t max_mem_clk;
 uint32_t min_eng_clk;
 uint32_t max_eng_clk;
 uint32_t min_bus_bandwidth;
 uint32_t max_bus_bandwidth;
};

struct smu_bios_boot_up_values
{
 uint32_t revision;
 uint32_t gfxclk;
 uint32_t uclk;
 uint32_t socclk;
 uint32_t dcefclk;
 uint32_t eclk;
 uint32_t vclk;
 uint32_t dclk;
 uint16_t vddc;
 uint16_t vddci;
 uint16_t mvddc;
 uint16_t vdd_gfx;
 uint8_t cooling_id;
 uint32_t pp_table_id;
 uint32_t format_revision;
 uint32_t content_revision;
 uint32_t fclk;
};

enum smu_table_id
{
 SMU_TABLE_PPTABLE = 0,
 SMU_TABLE_WATERMARKS,
 SMU_TABLE_CUSTOM_DPM,
 SMU_TABLE_DPMCLOCKS,
 SMU_TABLE_AVFS,
 SMU_TABLE_AVFS_PSM_DEBUG,
 SMU_TABLE_AVFS_FUSE_OVERRIDE,
 SMU_TABLE_PMSTATUSLOG,
 SMU_TABLE_SMU_METRICS,
 SMU_TABLE_DRIVER_SMU_CONFIG,
 SMU_TABLE_ACTIVITY_MONITOR_COEFF,
 SMU_TABLE_OVERDRIVE,
 SMU_TABLE_I2C_COMMANDS,
 SMU_TABLE_PACE,
 SMU_TABLE_COUNT,
};

struct smu_table_context
{
 void *power_play_table;
 uint32_t power_play_table_size;
 void *hardcode_pptable;
 unsigned long metrics_time;
 void *metrics_table;
 void *clocks_table;

 void *max_sustainable_clocks;
 struct smu_bios_boot_up_values boot_values;
 void *driver_pptable;
 struct smu_table *tables;
 uint32_t table_count;
 struct smu_table memory_pool;
 uint8_t thermal_controller_type;
 uint16_t TDPODLimit;

 void *overdrive_table;
};

struct smu_dpm_context {
 uint32_t dpm_context_size;
 void *dpm_context;
 void *golden_dpm_context;
 bool enable_umd_pstate;
 enum amd_dpm_forced_level dpm_level;
 enum amd_dpm_forced_level saved_dpm_level;
 enum amd_dpm_forced_level requested_dpm_level;
 struct smu_power_state *dpm_request_power_state;
 struct smu_power_state *dpm_current_power_state;
 struct mclock_latency_table *mclk_latency_table;
};

struct smu_power_gate {
 bool uvd_gated;
 bool vce_gated;
 bool vcn_gated;
};

struct smu_power_context {
 void *power_context;
 uint32_t power_context_size;
 struct smu_power_gate power_gate;
};



struct smu_feature
{
 uint32_t feature_num;
 unsigned long supported[((((64)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 unsigned long allowed[((((64)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 unsigned long enabled[((((64)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
 struct mutex mutex;
};

struct smu_clocks {
 uint32_t engine_clock;
 uint32_t memory_clock;
 uint32_t bus_bandwidth;
 uint32_t engine_clock_in_sr;
 uint32_t dcef_clock;
 uint32_t dcef_clock_in_sr;
};


struct mclk_latency_entries {
 uint32_t frequency;
 uint32_t latency;
};
struct mclock_latency_table {
 uint32_t count;
 struct mclk_latency_entries entries[16];
};

enum smu_baco_state
{
 SMU_BACO_STATE_ENTER = 0,
 SMU_BACO_STATE_EXIT,
};

struct smu_baco_context
{
 struct mutex mutex;
 uint32_t state;
 bool platform_support;
};


struct smu_context
{
 struct amdgpu_device *adev;
 struct amdgpu_irq_src *irq_source;

 const struct smu_funcs *funcs;
 const struct pptable_funcs *ppt_funcs;
 struct mutex mutex;
 uint64_t pool_size;

 struct smu_table_context smu_table;
 struct smu_dpm_context smu_dpm;
 struct smu_power_context smu_power;
 struct smu_feature smu_feature;
 struct amd_pp_display_configuration *display_config;
 struct smu_baco_context smu_baco;
 void *od_settings;

 uint32_t pstate_sclk;
 uint32_t pstate_mclk;

 bool od_enabled;
 uint32_t power_limit;
 uint32_t default_power_limit;


 uint32_t ppt_offset_bytes;
 uint32_t ppt_size_bytes;
 uint8_t *ppt_start_addr;

 bool support_power_containment;
 bool disable_watermark;



 uint32_t watermarks_bitmap;
 uint32_t hard_min_uclk_req_from_dal;
 bool disable_uclk_switch;

 uint32_t workload_mask;
 uint32_t workload_prority[7];
 uint32_t workload_setting[7];
 uint32_t power_profile_mode;
 uint32_t default_power_profile_mode;
 bool pm_enabled;

 uint32_t smc_if_version;

};

struct pptable_funcs {
 int (*alloc_dpm_context)(struct smu_context *smu);
 int (*store_powerplay_table)(struct smu_context *smu);
 int (*check_powerplay_table)(struct smu_context *smu);
 int (*append_powerplay_table)(struct smu_context *smu);
 int (*get_smu_msg_index)(struct smu_context *smu, uint32_t index);
 int (*get_smu_clk_index)(struct smu_context *smu, uint32_t index);
 int (*get_smu_feature_index)(struct smu_context *smu, uint32_t index);
 int (*get_smu_table_index)(struct smu_context *smu, uint32_t index);
 int (*get_smu_power_index)(struct smu_context *smu, uint32_t index);
 int (*get_workload_type)(struct smu_context *smu, enum PP_SMC_POWER_PROFILE profile);
 int (*run_afll_btc)(struct smu_context *smu);
 int (*get_allowed_feature_mask)(struct smu_context *smu, uint32_t *feature_mask, uint32_t num);
 enum amd_pm_state_type (*get_current_power_state)(struct smu_context *smu);
 int (*set_default_dpm_table)(struct smu_context *smu);
 int (*set_power_state)(struct smu_context *smu);
 int (*populate_umd_state_clk)(struct smu_context *smu);
 int (*print_clk_levels)(struct smu_context *smu, enum smu_clk_type clk_type, char *buf);
 int (*force_clk_levels)(struct smu_context *smu, enum smu_clk_type clk_type, uint32_t mask);
 int (*set_default_od8_settings)(struct smu_context *smu);
 int (*get_od_percentage)(struct smu_context *smu, enum smu_clk_type clk_type);
 int (*set_od_percentage)(struct smu_context *smu,
     enum smu_clk_type clk_type,
     uint32_t value);
 int (*od_edit_dpm_table)(struct smu_context *smu,
     enum PP_OD_DPM_TABLE_COMMAND type,
     long *input, uint32_t size);
 int (*get_clock_by_type_with_latency)(struct smu_context *smu,
           enum smu_clk_type clk_type,
           struct
           pp_clock_levels_with_latency
           *clocks);
 int (*get_clock_by_type_with_voltage)(struct smu_context *smu,
           enum amd_pp_clock_type type,
           struct
           pp_clock_levels_with_voltage
           *clocks);
 int (*get_power_profile_mode)(struct smu_context *smu, char *buf);
 int (*set_power_profile_mode)(struct smu_context *smu, long *input, uint32_t size);
 int (*dpm_set_uvd_enable)(struct smu_context *smu, bool enable);
 int (*dpm_set_vce_enable)(struct smu_context *smu, bool enable);
 int (*read_sensor)(struct smu_context *smu, enum amd_pp_sensors sensor,
      void *data, uint32_t *size);
 int (*pre_display_config_changed)(struct smu_context *smu);
 int (*display_config_changed)(struct smu_context *smu);
 int (*apply_clocks_adjust_rules)(struct smu_context *smu);
 int (*notify_smc_dispaly_config)(struct smu_context *smu);
 int (*force_dpm_limit_value)(struct smu_context *smu, bool highest);
 int (*unforce_dpm_levels)(struct smu_context *smu);
 int (*get_profiling_clk_mask)(struct smu_context *smu,
          enum amd_dpm_forced_level level,
          uint32_t *sclk_mask,
          uint32_t *mclk_mask,
          uint32_t *soc_mask);
 int (*set_cpu_power_state)(struct smu_context *smu);
 bool (*is_dpm_running)(struct smu_context *smu);
 int (*tables_init)(struct smu_context *smu, struct smu_table *tables);
 int (*set_thermal_fan_table)(struct smu_context *smu);
 int (*get_fan_speed_percent)(struct smu_context *smu, uint32_t *speed);
 int (*get_fan_speed_rpm)(struct smu_context *smu, uint32_t *speed);
 int (*set_watermarks_table)(struct smu_context *smu, void *watermarks,
        struct dm_pp_wm_sets_with_clock_ranges_soc15 *clock_ranges);
 int (*get_current_clk_freq_by_table)(struct smu_context *smu,
          enum smu_clk_type clk_type,
          uint32_t *value);
 int (*get_thermal_temperature_range)(struct smu_context *smu, struct smu_temperature_range *range);
 int (*get_uclk_dpm_states)(struct smu_context *smu, uint32_t *clocks_in_khz, uint32_t *num_states);
 int (*set_default_od_settings)(struct smu_context *smu, bool initialize);
 int (*set_performance_level)(struct smu_context *smu, enum amd_dpm_forced_level level);
 int (*display_disable_memory_clock_switch)(struct smu_context *smu, bool disable_memory_clock_switch);
 void (*dump_pptable)(struct smu_context *smu);
 int (*get_power_limit)(struct smu_context *smu, uint32_t *limit, bool asic_default);
 int (*get_dpm_uclk_limited)(struct smu_context *smu, uint32_t *clock, bool max);
};

struct smu_funcs
{
 int (*init_microcode)(struct smu_context *smu);
 int (*init_smc_tables)(struct smu_context *smu);
 int (*fini_smc_tables)(struct smu_context *smu);
 int (*init_power)(struct smu_context *smu);
 int (*fini_power)(struct smu_context *smu);
 int (*load_microcode)(struct smu_context *smu);
 int (*check_fw_status)(struct smu_context *smu);
 int (*setup_pptable)(struct smu_context *smu);
 int (*get_vbios_bootup_values)(struct smu_context *smu);
 int (*get_clk_info_from_vbios)(struct smu_context *smu);
 int (*check_pptable)(struct smu_context *smu);
 int (*parse_pptable)(struct smu_context *smu);
 int (*populate_smc_tables)(struct smu_context *smu);
 int (*check_fw_version)(struct smu_context *smu);
 int (*powergate_sdma)(struct smu_context *smu, bool gate);
 int (*powergate_vcn)(struct smu_context *smu, bool gate);
 int (*set_gfx_cgpg)(struct smu_context *smu, bool enable);
 int (*write_pptable)(struct smu_context *smu);
 int (*set_min_dcef_deep_sleep)(struct smu_context *smu);
 int (*set_tool_table_location)(struct smu_context *smu);
 int (*notify_memory_pool_location)(struct smu_context *smu);
 int (*write_watermarks_table)(struct smu_context *smu);
 int (*set_last_dcef_min_deep_sleep_clk)(struct smu_context *smu);
 int (*system_features_control)(struct smu_context *smu, bool en);
 int (*send_smc_msg)(struct smu_context *smu, uint16_t msg);
 int (*send_smc_msg_with_param)(struct smu_context *smu, uint16_t msg, uint32_t param);
 int (*read_smc_arg)(struct smu_context *smu, uint32_t *arg);
 int (*init_display_count)(struct smu_context *smu, uint32_t count);
 int (*set_allowed_mask)(struct smu_context *smu);
 int (*get_enabled_mask)(struct smu_context *smu, uint32_t *feature_mask, uint32_t num);
 int (*notify_display_change)(struct smu_context *smu);
 int (*set_power_limit)(struct smu_context *smu, uint32_t n);
 int (*get_current_clk_freq)(struct smu_context *smu, enum smu_clk_type clk_id, uint32_t *value);
 int (*init_max_sustainable_clocks)(struct smu_context *smu);
 int (*start_thermal_control)(struct smu_context *smu);
 int (*read_sensor)(struct smu_context *smu, enum amd_pp_sensors sensor,
      void *data, uint32_t *size);
 int (*set_deep_sleep_dcefclk)(struct smu_context *smu, uint32_t clk);
 int (*set_active_display_count)(struct smu_context *smu, uint32_t count);
 int (*store_cc6_data)(struct smu_context *smu, uint32_t separation_time,
         bool cc6_disable, bool pstate_disable,
         bool pstate_switch_disable);
 int (*get_clock_by_type)(struct smu_context *smu,
     enum amd_pp_clock_type type,
     struct amd_pp_clocks *clocks);
 int (*get_max_high_clocks)(struct smu_context *smu,
       struct amd_pp_simple_clock_info *clocks);
 int (*display_clock_voltage_request)(struct smu_context *smu, struct
          pp_display_clock_request
          *clock_req);
 int (*get_dal_power_level)(struct smu_context *smu,
       struct amd_pp_simple_clock_info *clocks);
 int (*get_perf_level)(struct smu_context *smu,
         enum smu_perf_level_designation designation,
         struct smu_performance_level *level);
 int (*get_current_shallow_sleep_clocks)(struct smu_context *smu,
      struct smu_clock_info *clocks);
 int (*notify_smu_enable_pwe)(struct smu_context *smu);
 int (*set_watermarks_for_clock_ranges)(struct smu_context *smu,
            struct dm_pp_wm_sets_with_clock_ranges_soc15 *clock_ranges);
 int (*conv_power_profile_to_pplib_workload)(int power_profile);
 uint32_t (*get_fan_control_mode)(struct smu_context *smu);
 int (*set_fan_control_mode)(struct smu_context *smu, uint32_t mode);
 int (*set_fan_speed_percent)(struct smu_context *smu, uint32_t speed);
 int (*set_fan_speed_rpm)(struct smu_context *smu, uint32_t speed);
 int (*set_xgmi_pstate)(struct smu_context *smu, uint32_t pstate);
 int (*gfx_off_control)(struct smu_context *smu, bool enable);
 int (*register_irq_handler)(struct smu_context *smu);
 int (*set_azalia_d3_pme)(struct smu_context *smu);
 int (*get_max_sustainable_clocks_by_dc)(struct smu_context *smu, struct pp_smu_nv_clock_table *max_clocks);
 bool (*baco_is_support)(struct smu_context *smu);
 enum smu_baco_state (*baco_get_state)(struct smu_context *smu);
 int (*baco_set_state)(struct smu_context *smu, enum smu_baco_state state);
 int (*baco_reset)(struct smu_context *smu);
 int (*get_dpm_ultimate_freq)(struct smu_context *smu, enum smu_clk_type clk_type, uint32_t *min, uint32_t *max);
};
# 769 "../drivers/gpu/drm/amd/amdgpu/../powerplay/inc/amdgpu_smu.h"
extern int smu_get_atom_data_table(struct smu_context *smu, uint32_t table,
       uint16_t *size, uint8_t *frev, uint8_t *crev,
       uint8_t **addr);

extern const struct amd_ip_funcs smu_ip_funcs;

extern const struct amdgpu_ip_block_version smu_v11_0_ip_block;
extern const struct amdgpu_ip_block_version smu_v12_0_ip_block;

extern int smu_feature_init_dpm(struct smu_context *smu);

extern int smu_feature_is_enabled(struct smu_context *smu,
      enum smu_feature_mask mask);
extern int smu_feature_set_enabled(struct smu_context *smu,
       enum smu_feature_mask mask, bool enable);
extern int smu_feature_is_supported(struct smu_context *smu,
        enum smu_feature_mask mask);
extern int smu_feature_set_supported(struct smu_context *smu,
         enum smu_feature_mask mask, bool enable);

int smu_update_table(struct smu_context *smu, enum smu_table_id table_index, int argument,
       void *table_data, bool drv2smu);

bool is_support_sw_smu(struct amdgpu_device *adev);
bool is_support_sw_smu_xgmi(struct amdgpu_device *adev);
int smu_reset(struct smu_context *smu);
int smu_common_read_sensor(struct smu_context *smu, enum amd_pp_sensors sensor,
      void *data, uint32_t *size);
int smu_sys_get_pp_table(struct smu_context *smu, void **table);
int smu_sys_set_pp_table(struct smu_context *smu, void *buf, size_t size);
int smu_get_power_num_states(struct smu_context *smu, struct pp_states_info *state_info);
enum amd_pm_state_type smu_get_current_power_state(struct smu_context *smu);


extern int smu_display_configuration_change(struct smu_context *smu, const
         struct amd_pp_display_configuration
         *display_config);
extern int smu_get_current_clocks(struct smu_context *smu,
      struct amd_pp_clock_info *clocks);
extern int smu_dpm_set_power_gate(struct smu_context *smu,uint32_t block_type, bool gate);
extern int smu_handle_task(struct smu_context *smu,
      enum amd_dpm_forced_level level,
      enum amd_pp_task task_id);
int smu_switch_power_profile(struct smu_context *smu,
        enum PP_SMC_POWER_PROFILE type,
        bool en);
int smu_get_smc_version(struct smu_context *smu, uint32_t *if_version, uint32_t *smu_version);
int smu_get_dpm_freq_by_index(struct smu_context *smu, enum smu_clk_type clk_type,
         uint16_t level, uint32_t *value);
int smu_get_dpm_level_count(struct smu_context *smu, enum smu_clk_type clk_type,
       uint32_t *value);
int smu_get_dpm_freq_range(struct smu_context *smu, enum smu_clk_type clk_type,
      uint32_t *min, uint32_t *max);
int smu_set_soft_freq_range(struct smu_context *smu, enum smu_clk_type clk_type,
       uint32_t min, uint32_t max);
int smu_set_hard_freq_range(struct smu_context *smu, enum smu_clk_type clk_type,
       uint32_t min, uint32_t max);
enum amd_dpm_forced_level smu_get_performance_level(struct smu_context *smu);
int smu_force_performance_level(struct smu_context *smu, enum amd_dpm_forced_level level);
int smu_set_display_count(struct smu_context *smu, uint32_t count);
bool smu_clk_dpm_is_enabled(struct smu_context *smu, enum smu_clk_type clk_type);
int smu_feature_update_enable_state(struct smu_context *smu, uint64_t feature_mask, bool enabled);
const char *smu_get_message_name(struct smu_context *smu, enum smu_message_type type);
const char *smu_get_feature_name(struct smu_context *smu, enum smu_feature_mask feature);
size_t smu_sys_get_pp_feature_mask(struct smu_context *smu, char *buf);
int smu_sys_set_pp_feature_mask(struct smu_context *smu, uint64_t new_mask);
# 87 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_discovery.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_discovery.h"
int amdgpu_discovery_init(struct amdgpu_device *adev);
void amdgpu_discovery_fini(struct amdgpu_device *adev);
int amdgpu_discovery_reg_base_init(struct amdgpu_device *adev);
int amdgpu_discovery_get_ip_version(struct amdgpu_device *adev, int hw_id,
                                    int *major, int *minor);
int amdgpu_discovery_get_gfx_info(struct amdgpu_device *adev);
# 88 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mes.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mes.h"
struct amdgpu_mes_funcs;

struct amdgpu_mes {
 struct amdgpu_adev *adev;

 const struct firmware *fw;


 struct amdgpu_bo *ucode_fw_obj;
 uint64_t ucode_fw_gpu_addr;
 uint32_t *ucode_fw_ptr;
 uint32_t ucode_fw_version;
 uint64_t uc_start_addr;


 struct amdgpu_bo *data_fw_obj;
 uint64_t data_fw_gpu_addr;
 uint32_t *data_fw_ptr;
 uint32_t data_fw_version;
 uint64_t data_start_addr;


 struct amdgpu_mes_funcs *funcs;
};

struct mes_add_queue_input {
 uint32_t process_id;
 uint64_t page_table_base_addr;
 uint64_t process_va_start;
 uint64_t process_va_end;
 uint64_t process_quantum;
 uint64_t process_context_addr;
 uint64_t gang_quantum;
 uint64_t gang_context_addr;
 uint32_t inprocess_gang_priority;
 uint32_t gang_global_priority_level;
 uint32_t doorbell_offset;
 uint64_t mqd_addr;
 uint64_t wptr_addr;
 uint32_t queue_type;
 uint32_t paging;
};

struct mes_remove_queue_input {
 uint32_t doorbell_offset;
 uint64_t gang_context_addr;
};

struct mes_suspend_gang_input {
 bool suspend_all_gangs;
 uint64_t gang_context_addr;
 uint64_t suspend_fence_addr;
 uint32_t suspend_fence_value;
};

struct mes_resume_gang_input {
 bool resume_all_gangs;
 uint64_t gang_context_addr;
};

struct amdgpu_mes_funcs {
 int (*add_hw_queue)(struct amdgpu_mes *mes,
       struct mes_add_queue_input *input);

 int (*remove_hw_queue)(struct amdgpu_mes *mes,
          struct mes_remove_queue_input *input);

 int (*suspend_gang)(struct amdgpu_mes *mes,
       struct mes_suspend_gang_input *input);

 int (*resume_gang)(struct amdgpu_mes *mes,
      struct mes_resume_gang_input *input);
};
# 89 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_umc.h" 1
# 56 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_umc.h"
struct amdgpu_umc_funcs {
 void (*ras_init)(struct amdgpu_device *adev);
 void (*query_ras_error_count)(struct amdgpu_device *adev,
     void *ras_error_status);
 void (*query_ras_error_address)(struct amdgpu_device *adev,
     void *ras_error_status);
 void (*enable_umc_index_mode)(struct amdgpu_device *adev,
     uint32_t umc_instance);
 void (*disable_umc_index_mode)(struct amdgpu_device *adev);
};

struct amdgpu_umc {

 uint32_t max_ras_err_cnt_per_query;

 uint32_t channel_inst_num;

 uint32_t umc_inst_num;

 uint32_t channel_offs;

 const uint32_t *channel_idx_tbl;

 const struct amdgpu_umc_funcs *funcs;
};
# 90 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mmhub.h" 1
# 24 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_mmhub.h"
struct amdgpu_mmhub_funcs {
 void (*ras_init)(struct amdgpu_device *adev);
 void (*query_ras_error_count)(struct amdgpu_device *adev,
     void *ras_error_status);
};
# 91 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2



struct amdgpu_gpu_instance
{
 struct amdgpu_device *adev;
 int mgpu_fan_enabled;
};

struct amdgpu_mgpu_info
{
 struct amdgpu_gpu_instance gpu_ins[16];
 struct mutex mutex;
 uint32_t num_gpu;
 uint32_t num_dgpu;
 uint32_t num_apu;
};




extern int amdgpu_modeset;
extern int amdgpu_vram_limit;
extern int amdgpu_vis_vram_limit;
extern int amdgpu_gart_size;
extern int amdgpu_gtt_size;
extern int amdgpu_moverate;
extern int amdgpu_benchmarking;
extern int amdgpu_testing;
extern int amdgpu_audio;
extern int amdgpu_disp_priority;
extern int amdgpu_hw_i2c;
extern int amdgpu_pcie_gen2;
extern int amdgpu_msi;
extern int amdgpu_dpm;
extern int amdgpu_fw_load_type;
extern int amdgpu_aspm;
extern int amdgpu_runtime_pm;
extern uint amdgpu_ip_block_mask;
extern int amdgpu_bapm;
extern int amdgpu_deep_color;
extern int amdgpu_vm_size;
extern int amdgpu_vm_block_size;
extern int amdgpu_vm_fragment_size;
extern int amdgpu_vm_fault_stop;
extern int amdgpu_vm_debug;
extern int amdgpu_vm_update_mode;
extern int amdgpu_dc;
extern int amdgpu_sched_jobs;
extern int amdgpu_sched_hw_submission;
extern uint amdgpu_pcie_gen_cap;
extern uint amdgpu_pcie_lane_cap;
extern uint amdgpu_cg_mask;
extern uint amdgpu_pg_mask;
extern uint amdgpu_sdma_phase_quantum;
extern char *amdgpu_disable_cu;
extern char *amdgpu_virtual_display;
extern uint amdgpu_pp_feature_mask;
extern int amdgpu_ngg;
extern int amdgpu_prim_buf_per_se;
extern int amdgpu_pos_buf_per_se;
extern int amdgpu_cntl_sb_buf_per_se;
extern int amdgpu_param_buf_per_se;
extern int amdgpu_job_hang_limit;
extern int amdgpu_lbpw;
extern int amdgpu_compute_multipipe;
extern int amdgpu_gpu_recovery;
extern int amdgpu_emu_mode;
extern uint amdgpu_smu_memory_pool_size;
extern uint amdgpu_dc_feature_mask;
extern uint amdgpu_dm_abm_level;
extern struct amdgpu_mgpu_info mgpu_info;
extern int amdgpu_ras_enable;
extern uint amdgpu_ras_mask;
extern int amdgpu_async_gfx_ring;
extern int amdgpu_mcbp;
extern int amdgpu_discovery;
extern int amdgpu_mes;
extern int amdgpu_noretry;


extern int amdgpu_si_support;


extern int amdgpu_cik_support;
# 214 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h"
struct amdgpu_device;
struct amdgpu_ib;
struct amdgpu_cs_parser;
struct amdgpu_job;
struct amdgpu_irq_src;
struct amdgpu_fpriv;
struct amdgpu_bo_va_mapping;
struct amdgpu_atif;
struct kfd_vm_fault_info;

enum amdgpu_cp_irq {
 AMDGPU_CP_IRQ_GFX_ME0_PIPE0_EOP = 0,
 AMDGPU_CP_IRQ_GFX_ME0_PIPE1_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC1_PIPE0_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC1_PIPE1_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC1_PIPE2_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC1_PIPE3_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC2_PIPE0_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC2_PIPE1_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC2_PIPE2_EOP,
 AMDGPU_CP_IRQ_COMPUTE_MEC2_PIPE3_EOP,

 AMDGPU_CP_IRQ_LAST
};

enum amdgpu_thermal_irq {
 AMDGPU_THERMAL_IRQ_LOW_TO_HIGH = 0,
 AMDGPU_THERMAL_IRQ_HIGH_TO_LOW,

 AMDGPU_THERMAL_IRQ_LAST
};

enum amdgpu_kiq_irq {
 AMDGPU_CP_KIQ_IRQ_DRIVER0 = 0,
 AMDGPU_CP_KIQ_IRQ_LAST
};





int amdgpu_device_ip_set_clockgating_state(void *dev,
        enum amd_ip_block_type block_type,
        enum amd_clockgating_state state);
int amdgpu_device_ip_set_powergating_state(void *dev,
        enum amd_ip_block_type block_type,
        enum amd_powergating_state state);
void amdgpu_device_ip_get_clockgating_state(struct amdgpu_device *adev,
         u32 *flags);
int amdgpu_device_ip_wait_for_idle(struct amdgpu_device *adev,
       enum amd_ip_block_type block_type);
bool amdgpu_device_ip_is_idle(struct amdgpu_device *adev,
         enum amd_ip_block_type block_type);



struct amdgpu_ip_block_status {
 bool valid;
 bool sw;
 bool hw;
 bool late_initialized;
 bool hang;
};

struct amdgpu_ip_block_version {
 const enum amd_ip_block_type type;
 const u32 major;
 const u32 minor;
 const u32 rev;
 const struct amd_ip_funcs *funcs;
};

struct amdgpu_ip_block {
 struct amdgpu_ip_block_status status;
 const struct amdgpu_ip_block_version *version;
};

int amdgpu_device_ip_block_version_cmp(struct amdgpu_device *adev,
           enum amd_ip_block_type type,
           u32 major, u32 minor);

struct amdgpu_ip_block *
amdgpu_device_ip_get_ip_block(struct amdgpu_device *adev,
         enum amd_ip_block_type type);

int amdgpu_device_ip_block_add(struct amdgpu_device *adev,
          const struct amdgpu_ip_block_version *ip_block_version);




bool amdgpu_get_bios(struct amdgpu_device *adev);
bool amdgpu_read_bios(struct amdgpu_device *adev);







struct amdgpu_clock {
 struct amdgpu_pll ppll[3];
 struct amdgpu_pll spll;
 struct amdgpu_pll mpll;

 uint32_t default_mclk;
 uint32_t default_sclk;
 uint32_t default_dispclk;
 uint32_t current_dispclk;
 uint32_t dp_extclk;
 uint32_t max_pixel_clock;
};
# 353 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h"
struct amdgpu_sa_manager {
 wait_queue_head_t wq;
 struct amdgpu_bo *bo;
 struct list_head *hole;
 struct list_head flist[32];
 struct list_head olist;
 unsigned size;
 uint64_t gpu_addr;
 void *cpu_ptr;
 uint32_t domain;
 uint32_t align;
};


struct amdgpu_sa_bo {
 struct list_head olist;
 struct list_head flist;
 struct amdgpu_sa_manager *manager;
 unsigned soffset;
 unsigned eoffset;
 struct dma_fence *fence;
};

int amdgpu_fence_slab_init(void);
void amdgpu_fence_slab_fini(void);





struct amdgpu_flip_work {
 struct delayed_work flip_work;
 struct work_struct unpin_work;
 struct amdgpu_device *adev;
 int crtc_id;
 u32 target_vblank;
 uint64_t base;
 struct drm_pending_vblank_event *event;
 struct amdgpu_bo *old_abo;
 struct dma_fence *excl;
 unsigned shared_count;
 struct dma_fence **shared;
 struct dma_fence_cb cb;
 bool async;
};






struct amdgpu_ib {
 struct amdgpu_sa_bo *sa_bo;
 uint32_t length_dw;
 uint64_t gpu_addr;
 uint32_t *ptr;
 uint32_t flags;
};

extern const struct drm_sched_backend_ops amdgpu_sched_ops;





struct amdgpu_fpriv {
 struct amdgpu_vm vm;
 struct amdgpu_bo_va *prt_va;
 struct amdgpu_bo_va *csa_va;
 struct mutex bo_list_lock;
 struct idr bo_list_handles;
 struct amdgpu_ctx_mgr ctx_mgr;
};

int amdgpu_file_to_fpriv(struct file *filp, struct amdgpu_fpriv **fpriv);
int amdgpu_device_get_job_timeout_settings(struct amdgpu_device *adev);

int amdgpu_ib_get(struct amdgpu_device *adev, struct amdgpu_vm *vm,
    unsigned size, struct amdgpu_ib *ib);
void amdgpu_ib_free(struct amdgpu_device *adev, struct amdgpu_ib *ib,
      struct dma_fence *f);
int amdgpu_ib_schedule(struct amdgpu_ring *ring, unsigned num_ibs,
         struct amdgpu_ib *ibs, struct amdgpu_job *job,
         struct dma_fence **f);
int amdgpu_ib_pool_init(struct amdgpu_device *adev);
void amdgpu_ib_pool_fini(struct amdgpu_device *adev);
int amdgpu_ib_ring_tests(struct amdgpu_device *adev);




struct amdgpu_cs_chunk {
 uint32_t chunk_id;
 uint32_t length_dw;
 void *kdata;
};

struct amdgpu_cs_post_dep {
 struct drm_syncobj *syncobj;
 struct dma_fence_chain *chain;
 u64 point;
};

struct amdgpu_cs_parser {
 struct amdgpu_device *adev;
 struct drm_file *filp;
 struct amdgpu_ctx *ctx;


 unsigned nchunks;
 struct amdgpu_cs_chunk *chunks;


 struct amdgpu_job *job;
 struct drm_sched_entity *entity;


 struct ww_acquire_ctx ticket;
 struct amdgpu_bo_list *bo_list;
 struct amdgpu_mn *mn;
 struct amdgpu_bo_list_entry vm_pd;
 struct list_head validated;
 struct dma_fence *fence;
 uint64_t bytes_moved_threshold;
 uint64_t bytes_moved_vis_threshold;
 uint64_t bytes_moved;
 uint64_t bytes_moved_vis;
 struct amdgpu_bo_list_entry *evictable;


 struct amdgpu_bo_list_entry uf_entry;

 unsigned num_post_deps;
 struct amdgpu_cs_post_dep *post_deps;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u32 amdgpu_get_ib_value(struct amdgpu_cs_parser *p,
          uint32_t ib_idx, int idx)
{
 return p->job->ibs[ib_idx].ptr[idx];
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_set_ib_value(struct amdgpu_cs_parser *p,
           uint32_t ib_idx, int idx,
           uint32_t value)
{
 p->job->ibs[ib_idx].ptr[idx] = value;
}






struct amdgpu_wb {
 struct amdgpu_bo *wb_obj;
 volatile uint32_t *wb;
 uint64_t gpu_addr;
 u32 num_wb;
 unsigned long used[(((128) + (64) - 1) / (64))];
};

int amdgpu_device_wb_get(struct amdgpu_device *adev, u32 *wb);
void amdgpu_device_wb_free(struct amdgpu_device *adev, u32 wb);




void amdgpu_benchmark(struct amdgpu_device *adev, int test_number);





void amdgpu_test_moves(struct amdgpu_device *adev);




struct amdgpu_allowed_register_entry {
 uint32_t reg_offset;
 bool grbm_indexed;
};

enum amd_reset_method {
 AMD_RESET_METHOD_LEGACY = 0,
 AMD_RESET_METHOD_MODE0,
 AMD_RESET_METHOD_MODE1,
 AMD_RESET_METHOD_MODE2,
 AMD_RESET_METHOD_BACO
};




struct amdgpu_asic_funcs {
 bool (*read_disabled_bios)(struct amdgpu_device *adev);
 bool (*read_bios_from_rom)(struct amdgpu_device *adev,
       u8 *bios, u32 length_bytes);
 int (*read_register)(struct amdgpu_device *adev, u32 se_num,
        u32 sh_num, u32 reg_offset, u32 *value);
 void (*set_vga_state)(struct amdgpu_device *adev, bool state);
 int (*reset)(struct amdgpu_device *adev);
 enum amd_reset_method (*reset_method)(struct amdgpu_device *adev);

 u32 (*get_xclk)(struct amdgpu_device *adev);

 int (*set_uvd_clocks)(struct amdgpu_device *adev, u32 vclk, u32 dclk);
 int (*set_vce_clocks)(struct amdgpu_device *adev, u32 evclk, u32 ecclk);

 int (*get_pcie_lanes)(struct amdgpu_device *adev);
 void (*set_pcie_lanes)(struct amdgpu_device *adev, int lanes);

 u32 (*get_config_memsize)(struct amdgpu_device *adev);

 void (*flush_hdp)(struct amdgpu_device *adev, struct amdgpu_ring *ring);

 void (*invalidate_hdp)(struct amdgpu_device *adev,
          struct amdgpu_ring *ring);

 bool (*need_full_reset)(struct amdgpu_device *adev);

 void (*init_doorbell_index)(struct amdgpu_device *adev);

 void (*get_pcie_usage)(struct amdgpu_device *adev, uint64_t *count0,
          uint64_t *count1);

 bool (*need_reset_on_init)(struct amdgpu_device *adev);

 uint64_t (*get_pcie_replay_count)(struct amdgpu_device *adev);
};




int amdgpu_bo_list_ioctl(struct drm_device *dev, void *data,
    struct drm_file *filp);

int amdgpu_cs_ioctl(struct drm_device *dev, void *data, struct drm_file *filp);
int amdgpu_cs_fence_to_handle_ioctl(struct drm_device *dev, void *data,
        struct drm_file *filp);
int amdgpu_cs_wait_ioctl(struct drm_device *dev, void *data, struct drm_file *filp);
int amdgpu_cs_wait_fences_ioctl(struct drm_device *dev, void *data,
    struct drm_file *filp);


struct amdgpu_vram_scratch {
 struct amdgpu_bo *robj;
 volatile uint32_t *ptr;
 u64 gpu_addr;
};




struct amdgpu_atcs_functions {
 bool get_ext_state;
 bool pcie_perf_req;
 bool pcie_dev_rdy;
 bool pcie_bus_width;
};

struct amdgpu_atcs {
 struct amdgpu_atcs_functions functions;
};




struct amdgpu_fw_vram_usage {
 u64 start_offset;
 u64 size;
 struct amdgpu_bo *reserved_bo;
 void *va;
};




struct cgs_device *amdgpu_cgs_create_device(struct amdgpu_device *adev);
void amdgpu_cgs_destroy_device(struct cgs_device *cgs_device);




typedef uint32_t (*amdgpu_rreg_t)(struct amdgpu_device*, uint32_t);
typedef void (*amdgpu_wreg_t)(struct amdgpu_device*, uint32_t, uint32_t);

typedef uint64_t (*amdgpu_rreg64_t)(struct amdgpu_device*, uint32_t);
typedef void (*amdgpu_wreg64_t)(struct amdgpu_device*, uint32_t, uint64_t);

typedef uint32_t (*amdgpu_block_rreg_t)(struct amdgpu_device*, uint32_t, uint32_t);
typedef void (*amdgpu_block_wreg_t)(struct amdgpu_device*, uint32_t, uint32_t, uint32_t);






struct nbio_hdp_flush_reg {
 u32 ref_and_mask_cp0;
 u32 ref_and_mask_cp1;
 u32 ref_and_mask_cp2;
 u32 ref_and_mask_cp3;
 u32 ref_and_mask_cp4;
 u32 ref_and_mask_cp5;
 u32 ref_and_mask_cp6;
 u32 ref_and_mask_cp7;
 u32 ref_and_mask_cp8;
 u32 ref_and_mask_cp9;
 u32 ref_and_mask_sdma0;
 u32 ref_and_mask_sdma1;
 u32 ref_and_mask_sdma2;
 u32 ref_and_mask_sdma3;
 u32 ref_and_mask_sdma4;
 u32 ref_and_mask_sdma5;
 u32 ref_and_mask_sdma6;
 u32 ref_and_mask_sdma7;
};

struct amdgpu_mmio_remap {
 u32 reg_offset;
 resource_size_t bus_addr;
};

struct amdgpu_nbio_funcs {
 const struct nbio_hdp_flush_reg *hdp_flush_reg;
 u32 (*get_hdp_flush_req_offset)(struct amdgpu_device *adev);
 u32 (*get_hdp_flush_done_offset)(struct amdgpu_device *adev);
 u32 (*get_pcie_index_offset)(struct amdgpu_device *adev);
 u32 (*get_pcie_data_offset)(struct amdgpu_device *adev);
 u32 (*get_rev_id)(struct amdgpu_device *adev);
 void (*mc_access_enable)(struct amdgpu_device *adev, bool enable);
 void (*hdp_flush)(struct amdgpu_device *adev, struct amdgpu_ring *ring);
 u32 (*get_memsize)(struct amdgpu_device *adev);
 void (*sdma_doorbell_range)(struct amdgpu_device *adev, int instance,
   bool use_doorbell, int doorbell_index, int doorbell_size);
 void (*vcn_doorbell_range)(struct amdgpu_device *adev, bool use_doorbell,
       int doorbell_index, int instance);
 void (*enable_doorbell_aperture)(struct amdgpu_device *adev,
      bool enable);
 void (*enable_doorbell_selfring_aperture)(struct amdgpu_device *adev,
        bool enable);
 void (*ih_doorbell_range)(struct amdgpu_device *adev,
      bool use_doorbell, int doorbell_index);
 void (*update_medium_grain_clock_gating)(struct amdgpu_device *adev,
       bool enable);
 void (*update_medium_grain_light_sleep)(struct amdgpu_device *adev,
      bool enable);
 void (*get_clockgating_state)(struct amdgpu_device *adev,
          u32 *flags);
 void (*ih_control)(struct amdgpu_device *adev);
 void (*init_registers)(struct amdgpu_device *adev);
 void (*detect_hw_virt)(struct amdgpu_device *adev);
 void (*remap_hdp_registers)(struct amdgpu_device *adev);
};

struct amdgpu_df_funcs {
 void (*sw_init)(struct amdgpu_device *adev);
 void (*enable_broadcast_mode)(struct amdgpu_device *adev,
          bool enable);
 u32 (*get_fb_channel_number)(struct amdgpu_device *adev);
 u32 (*get_hbm_channel_number)(struct amdgpu_device *adev);
 void (*update_medium_grain_clock_gating)(struct amdgpu_device *adev,
       bool enable);
 void (*get_clockgating_state)(struct amdgpu_device *adev,
          u32 *flags);
 void (*enable_ecc_force_par_wr_rmw)(struct amdgpu_device *adev,
         bool enable);
 int (*pmc_start)(struct amdgpu_device *adev, uint64_t config,
      int is_enable);
 int (*pmc_stop)(struct amdgpu_device *adev, uint64_t config,
      int is_disable);
 void (*pmc_get_count)(struct amdgpu_device *adev, uint64_t config,
      uint64_t *count);
 uint64_t (*get_fica)(struct amdgpu_device *adev, uint32_t ficaa_val);
 void (*set_fica)(struct amdgpu_device *adev, uint32_t ficaa_val,
    uint32_t ficadl_val, uint32_t ficadh_val);
};

enum amd_hw_ip_block_type {
 GC_HWIP = 1,
 HDP_HWIP,
 SDMA0_HWIP,
 SDMA1_HWIP,
 SDMA2_HWIP,
 SDMA3_HWIP,
 SDMA4_HWIP,
 SDMA5_HWIP,
 SDMA6_HWIP,
 SDMA7_HWIP,
 MMHUB_HWIP,
 ATHUB_HWIP,
 NBIO_HWIP,
 MP0_HWIP,
 MP1_HWIP,
 UVD_HWIP,
 VCN_HWIP = UVD_HWIP,
 VCE_HWIP,
 DF_HWIP,
 DCE_HWIP,
 OSSSYS_HWIP,
 SMUIO_HWIP,
 PWR_HWIP,
 NBIF_HWIP,
 THM_HWIP,
 CLK_HWIP,
 UMC_HWIP,
 RSMU_HWIP,
 MAX_HWIP
};



struct amd_powerplay {
 void *pp_handle;
 const struct amd_pm_funcs *pp_funcs;
};



struct amdgpu_device {
 struct device *dev;
 struct drm_device *ddev;
 struct pci_dev *pdev;


 struct amdgpu_acp acp;



 enum amd_asic_type asic_type;
 uint32_t family;
 uint32_t rev_id;
 uint32_t external_rev_id;
 unsigned long flags;
 int usec_timeout;
 const struct amdgpu_asic_funcs *asic_funcs;
 bool shutdown;
 bool need_swiotlb;
 bool accel_working;
 struct notifier_block acpi_nb;
 struct amdgpu_i2c_chan *i2c_bus[16];
 struct amdgpu_debugfs debugfs[32];
 unsigned debugfs_count;

 struct dentry *debugfs_preempt;
 struct dentry *debugfs_regs[32];

 struct amdgpu_atif *atif;
 struct amdgpu_atcs atcs;
 struct mutex srbm_mutex;

 struct mutex grbm_idx_mutex;
 struct dev_pm_domain vga_pm_domain;
 bool have_disp_power_ref;
 bool have_atomics_support;


 bool is_atom_fw;
 uint8_t *bios;
 uint32_t bios_size;
 struct amdgpu_bo *stolen_vga_memory;
 uint32_t bios_scratch_reg_offset;
 uint32_t bios_scratch[16];


 resource_size_t rmmio_base;
 resource_size_t rmmio_size;
 void *rmmio;

 spinlock_t mmio_idx_lock;
 struct amdgpu_mmio_remap rmmio_remap;

 spinlock_t smc_idx_lock;
 amdgpu_rreg_t smc_rreg;
 amdgpu_wreg_t smc_wreg;

 spinlock_t pcie_idx_lock;
 amdgpu_rreg_t pcie_rreg;
 amdgpu_wreg_t pcie_wreg;
 amdgpu_rreg_t pciep_rreg;
 amdgpu_wreg_t pciep_wreg;
 amdgpu_rreg64_t pcie_rreg64;
 amdgpu_wreg64_t pcie_wreg64;

 spinlock_t uvd_ctx_idx_lock;
 amdgpu_rreg_t uvd_ctx_rreg;
 amdgpu_wreg_t uvd_ctx_wreg;

 spinlock_t didt_idx_lock;
 amdgpu_rreg_t didt_rreg;
 amdgpu_wreg_t didt_wreg;

 spinlock_t gc_cac_idx_lock;
 amdgpu_rreg_t gc_cac_rreg;
 amdgpu_wreg_t gc_cac_wreg;

 spinlock_t se_cac_idx_lock;
 amdgpu_rreg_t se_cac_rreg;
 amdgpu_wreg_t se_cac_wreg;

 spinlock_t audio_endpt_idx_lock;
 amdgpu_block_rreg_t audio_endpt_rreg;
 amdgpu_block_wreg_t audio_endpt_wreg;
 void *rio_mem;
 resource_size_t rio_mem_size;
 struct amdgpu_doorbell doorbell;


 struct amdgpu_clock clock;


 struct amdgpu_gmc gmc;
 struct amdgpu_gart gart;
 dma_addr_t dummy_page_addr;
 struct amdgpu_vm_manager vm_manager;
 struct amdgpu_vmhub vmhub[3];
 unsigned num_vmhubs;


 struct amdgpu_mman mman;
 struct amdgpu_vram_scratch vram_scratch;
 struct amdgpu_wb wb;
 atomic64_t num_bytes_moved;
 atomic64_t num_evictions;
 atomic64_t num_vram_cpu_page_faults;
 atomic_t gpu_reset_counter;
 atomic_t vram_lost_counter;


 struct {
  spinlock_t lock;
  s64 last_update_us;
  s64 accum_us;
  s64 accum_us_vis;
  u32 log2_max_MBps;
 } mm_stats;


 bool enable_virtual_display;
 struct amdgpu_mode_info mode_info;

 struct work_struct hotplug_work;
 struct amdgpu_irq_src crtc_irq;
 struct amdgpu_irq_src vupdate_irq;
 struct amdgpu_irq_src pageflip_irq;
 struct amdgpu_irq_src hpd_irq;


 u64 fence_context;
 unsigned num_rings;
 struct amdgpu_ring *rings[28];
 bool ib_pool_ready;
 struct amdgpu_sa_manager ring_tmp_bo;


 struct amdgpu_irq irq;


 struct amd_powerplay powerplay;
 bool pp_force_state_enabled;


 struct smu_context smu;


 struct amdgpu_pm pm;
 u32 cg_flags;
 u32 pg_flags;


 struct amdgpu_gfx gfx;


 struct amdgpu_sdma sdma;


 struct amdgpu_uvd uvd;


 struct amdgpu_vce vce;


 struct amdgpu_vcn vcn;


 struct amdgpu_firmware firmware;


 struct psp_context psp;


 struct amdgpu_gds gds;


 struct amdgpu_kfd_dev kfd;


 struct amdgpu_umc umc;


 struct amdgpu_display_manager dm;


 uint8_t *discovery;


 bool enable_mes;
 struct amdgpu_mes mes;

 struct amdgpu_ip_block ip_blocks[16];
 int num_ip_blocks;
 struct mutex mn_lock;
 struct hlist_head mn_hash[1 << (7)];


 atomic64_t vram_pin_size;
 atomic64_t visible_pin_size;
 atomic64_t gart_pin_size;


 uint32_t *reg_offset[MAX_HWIP][8];

 const struct amdgpu_nbio_funcs *nbio_funcs;
 const struct amdgpu_df_funcs *df_funcs;
 const struct amdgpu_mmhub_funcs *mmhub_funcs;


 struct delayed_work delayed_init_work;

 struct amdgpu_virt virt;

 struct amdgpu_fw_vram_usage fw_vram_usage;


 struct list_head shadow_list;
 struct mutex shadow_list_lock;

 struct list_head ring_lru_list;
 spinlock_t ring_lru_list_lock;


 bool has_hw_reset;
 u8 reset_magic[64];


 bool in_suspend;


 unsigned long last_mm_index;
 bool in_gpu_reset;
 enum pp_mp1_state mp1_state;
 struct mutex lock_reset;
 struct amdgpu_doorbell_index doorbell_index;

 int asic_reset_res;
 struct work_struct xgmi_reset_work;

 bool in_baco_reset;

 long gfx_timeout;
 long sdma_timeout;
 long video_timeout;
 long compute_timeout;

 uint64_t unique_id;
 uint64_t df_perfmon_config_assign_mask[4];
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct amdgpu_device *amdgpu_ttm_adev(struct ttm_bo_device *bdev)
{
 return ({ void *__mptr = (void *)(bdev); do { extern void __compiletime_assert_1025(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(bdev)), typeof(((struct amdgpu_device *)0)->mman.bdev)) && !__builtin_types_compatible_p(typeof(*(bdev)), typeof(void))))) __compiletime_assert_1025(); } while (0); ((struct amdgpu_device *)(__mptr - __builtin_offsetof(struct amdgpu_device, mman.bdev))); });
}

int amdgpu_device_init(struct amdgpu_device *adev,
         struct drm_device *ddev,
         struct pci_dev *pdev,
         uint32_t flags);
void amdgpu_device_fini(struct amdgpu_device *adev);
int amdgpu_gpu_wait_for_idle(struct amdgpu_device *adev);

uint32_t amdgpu_mm_rreg(struct amdgpu_device *adev, uint32_t reg,
   uint32_t acc_flags);
void amdgpu_mm_wreg(struct amdgpu_device *adev, uint32_t reg, uint32_t v,
      uint32_t acc_flags);
void amdgpu_mm_wreg8(struct amdgpu_device *adev, uint32_t offset, uint8_t value);
uint8_t amdgpu_mm_rreg8(struct amdgpu_device *adev, uint32_t offset);

u32 amdgpu_io_rreg(struct amdgpu_device *adev, u32 reg);
void amdgpu_io_wreg(struct amdgpu_device *adev, u32 reg, u32 v);

bool amdgpu_device_asic_has_dc_support(enum amd_asic_type asic_type);
bool amdgpu_device_has_dc_support(struct amdgpu_device *adev);

int emu_soc_asic_init(struct amdgpu_device *adev);
# 1157 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h"
bool amdgpu_device_should_recover_gpu(struct amdgpu_device *adev);
int amdgpu_device_gpu_recover(struct amdgpu_device *adev,
         struct amdgpu_job* job);
void amdgpu_device_pci_config_reset(struct amdgpu_device *adev);
bool amdgpu_device_need_post(struct amdgpu_device *adev);

void amdgpu_cs_report_moved_bytes(struct amdgpu_device *adev, u64 num_bytes,
      u64 num_vis_bytes);
int amdgpu_device_resize_fb_bar(struct amdgpu_device *adev);
void amdgpu_device_program_register_sequence(struct amdgpu_device *adev,
          const u32 *registers,
          const u32 array_size);

bool amdgpu_device_is_px(struct drm_device *dev);
bool amdgpu_device_is_peer_accessible(struct amdgpu_device *adev,
          struct amdgpu_device *peer_adev);
# 1183 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_register_atpx_handler(void) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_unregister_atpx_handler(void) {}
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_has_atpx_dgpu_power_cntl(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_is_atpx_hybrid(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_atpx_dgpu_req_power_for_displays(void) { return false; }
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_has_atpx(void) { return false; }





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void *amdgpu_atpx_get_dhandle(void) { return ((void *)0); }





extern const struct drm_ioctl_desc amdgpu_ioctls_kms[];
extern const int amdgpu_max_kms_ioctl;

int amdgpu_driver_load_kms(struct drm_device *dev, unsigned long flags);
void amdgpu_driver_unload_kms(struct drm_device *dev);
void amdgpu_driver_lastclose_kms(struct drm_device *dev);
int amdgpu_driver_open_kms(struct drm_device *dev, struct drm_file *file_priv);
void amdgpu_driver_postclose_kms(struct drm_device *dev,
     struct drm_file *file_priv);
int amdgpu_device_ip_suspend(struct amdgpu_device *adev);
int amdgpu_device_suspend(struct drm_device *dev, bool suspend, bool fbcon);
int amdgpu_device_resume(struct drm_device *dev, bool resume, bool fbcon);
u32 amdgpu_get_vblank_counter_kms(struct drm_device *dev, unsigned int pipe);
int amdgpu_enable_vblank_kms(struct drm_device *dev, unsigned int pipe);
void amdgpu_disable_vblank_kms(struct drm_device *dev, unsigned int pipe);
long amdgpu_kms_compat_ioctl(struct file *filp, unsigned int cmd,
        unsigned long arg);




struct amdgpu_afmt_acr {
 u32 clock;

 int n_32khz;
 int cts_32khz;

 int n_44_1khz;
 int cts_44_1khz;

 int n_48khz;
 int cts_48khz;

};

struct amdgpu_afmt_acr amdgpu_afmt_acr(uint32_t clock);



int amdgpu_acpi_init(struct amdgpu_device *adev);
void amdgpu_acpi_fini(struct amdgpu_device *adev);
bool amdgpu_acpi_is_pcie_performance_request_supported(struct amdgpu_device *adev);
int amdgpu_acpi_pcie_performance_request(struct amdgpu_device *adev,
      u8 perf_req, bool advertise);
int amdgpu_acpi_pcie_notify_device_ready(struct amdgpu_device *adev);

void amdgpu_acpi_get_backlight_caps(struct amdgpu_device *adev,
  struct amdgpu_dm_backlight_caps *caps);





int amdgpu_cs_find_mapping(struct amdgpu_cs_parser *parser,
      uint64_t addr, struct amdgpu_bo **bo,
      struct amdgpu_bo_va_mapping **mapping);


int amdgpu_dm_display_resume(struct amdgpu_device *adev );





void amdgpu_register_gpu_instance(struct amdgpu_device *adev);
void amdgpu_unregister_gpu_instance(struct amdgpu_device *adev);


# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_object.h" 1
# 32 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_object.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 1
# 33 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_object.h" 2




struct amdgpu_bo_param {
 unsigned long size;
 int byte_align;
 u32 domain;
 u32 preferred_domain;
 u64 flags;
 enum ttm_bo_type type;
 struct dma_resv *resv;
};


struct amdgpu_bo_va_mapping {
 struct amdgpu_bo_va *bo_va;
 struct list_head list;
 struct rb_node rb;
 uint64_t start;
 uint64_t last;
 uint64_t __subtree_last;
 uint64_t offset;
 uint64_t flags;
};


struct amdgpu_bo_va {
 struct amdgpu_vm_bo_base base;


 unsigned ref_count;


 struct dma_fence *last_pt_update;


 struct list_head invalids;
 struct list_head valids;


 bool cleared;

 bool is_xgmi;
};

struct amdgpu_bo {

 u32 preferred_domains;
 u32 allowed_domains;
 struct ttm_place placements[3];
 struct ttm_placement placement;
 struct ttm_buffer_object tbo;
 struct ttm_bo_kmap_obj kmap;
 u64 flags;
 unsigned pin_count;
 u64 tiling_flags;
 u64 metadata_flags;
 void *metadata;
 u32 metadata_size;
 unsigned prime_shared_count;

 struct amdgpu_vm_bo_base *vm_bo;

 struct amdgpu_bo *parent;
 struct amdgpu_bo *shadow;

 struct ttm_bo_kmap_obj dma_buf_vmap;
 struct amdgpu_mn *mn;

 union {
  struct list_head mn_list;
  struct list_head shadow_list;
 };

 struct kgd_mem *kfd_bo;
};

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct amdgpu_bo *ttm_to_amdgpu_bo(struct ttm_buffer_object *tbo)
{
 return ({ void *__mptr = (void *)(tbo); do { extern void __compiletime_assert_113(void) ; if (!(!(!__builtin_types_compatible_p(typeof(*(tbo)), typeof(((struct amdgpu_bo *)0)->tbo)) && !__builtin_types_compatible_p(typeof(*(tbo)), typeof(void))))) __compiletime_assert_113(); } while (0); ((struct amdgpu_bo *)(__mptr - __builtin_offsetof(struct amdgpu_bo, tbo))); });
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned amdgpu_mem_type_to_domain(u32 mem_type)
{
 switch (mem_type) {
 case 2:
  return 0x4;
 case 1:
  return 0x2;
 case 0:
  return 0x1;
 case (3 + 0):
  return 0x8;
 case (3 + 1):
  return 0x10;
 case (3 + 2):
  return 0x20;
 default:
  break;
 }
 return 0;
}
# 152 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_object.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int amdgpu_bo_reserve(struct amdgpu_bo *bo, bool no_intr)
{
 struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 int r;

 r = __ttm_bo_reserve(&bo->tbo, !no_intr, false, ((void *)0));
 if (__builtin_expect(!!(r != 0), 0)) {
  if (r != -512)
   _dev_err(adev->dev, "%p reserve failed\n", bo);
  return r;
 }
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void amdgpu_bo_unreserve(struct amdgpu_bo *bo)
{
 ttm_bo_unreserve(&bo->tbo);
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned long amdgpu_bo_size(struct amdgpu_bo *bo)
{
 return bo->tbo.num_pages << 16;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned amdgpu_bo_ngpu_pages(struct amdgpu_bo *bo)
{
 return (bo->tbo.num_pages << 16) / 4096;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) unsigned amdgpu_bo_gpu_page_alignment(struct amdgpu_bo *bo)
{
 return (bo->tbo.mem.page_alignment << 16) / 4096;
}







static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) u64 amdgpu_bo_mmap_offset(struct amdgpu_bo *bo)
{
 return drm_vma_node_offset_addr(&bo->tbo.base.vma_node);
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_bo_in_cpu_visible_vram(struct amdgpu_bo *bo)
{
 struct amdgpu_device *adev = amdgpu_ttm_adev(bo->tbo.bdev);
 unsigned fpfn = adev->gmc.visible_vram_size >> 16;
 struct drm_mm_node *node = bo->tbo.mem.mm_node;
 unsigned long pages_left;

 if (bo->tbo.mem.mem_type != 2)
  return false;

 for (pages_left = bo->tbo.mem.num_pages; pages_left;
      pages_left -= node->size, node++)
  if (node->start < fpfn)
   return true;

 return false;
}




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool amdgpu_bo_explicit_sync(struct amdgpu_bo *bo)
{
 return bo->flags & (1 << 7);
}

bool amdgpu_bo_is_amdgpu_bo(struct ttm_buffer_object *bo);
void amdgpu_bo_placement_from_domain(struct amdgpu_bo *abo, u32 domain);

int amdgpu_bo_create(struct amdgpu_device *adev,
       struct amdgpu_bo_param *bp,
       struct amdgpu_bo **bo_ptr);
int amdgpu_bo_create_reserved(struct amdgpu_device *adev,
         unsigned long size, int align,
         u32 domain, struct amdgpu_bo **bo_ptr,
         u64 *gpu_addr, void **cpu_addr);
int amdgpu_bo_create_kernel(struct amdgpu_device *adev,
       unsigned long size, int align,
       u32 domain, struct amdgpu_bo **bo_ptr,
       u64 *gpu_addr, void **cpu_addr);
void amdgpu_bo_free_kernel(struct amdgpu_bo **bo, u64 *gpu_addr,
      void **cpu_addr);
int amdgpu_bo_kmap(struct amdgpu_bo *bo, void **ptr);
void *amdgpu_bo_kptr(struct amdgpu_bo *bo);
void amdgpu_bo_kunmap(struct amdgpu_bo *bo);
struct amdgpu_bo *amdgpu_bo_ref(struct amdgpu_bo *bo);
void amdgpu_bo_unref(struct amdgpu_bo **bo);
int amdgpu_bo_pin(struct amdgpu_bo *bo, u32 domain);
int amdgpu_bo_pin_restricted(struct amdgpu_bo *bo, u32 domain,
        u64 min_offset, u64 max_offset);
int amdgpu_bo_unpin(struct amdgpu_bo *bo);
int amdgpu_bo_evict_vram(struct amdgpu_device *adev);
int amdgpu_bo_init(struct amdgpu_device *adev);
int amdgpu_bo_late_init(struct amdgpu_device *adev);
void amdgpu_bo_fini(struct amdgpu_device *adev);
int amdgpu_bo_fbdev_mmap(struct amdgpu_bo *bo,
    struct vm_area_struct *vma);
int amdgpu_bo_set_tiling_flags(struct amdgpu_bo *bo, u64 tiling_flags);
void amdgpu_bo_get_tiling_flags(struct amdgpu_bo *bo, u64 *tiling_flags);
int amdgpu_bo_set_metadata (struct amdgpu_bo *bo, void *metadata,
       uint32_t metadata_size, uint64_t flags);
int amdgpu_bo_get_metadata(struct amdgpu_bo *bo, void *buffer,
      size_t buffer_size, uint32_t *metadata_size,
      uint64_t *flags);
void amdgpu_bo_move_notify(struct ttm_buffer_object *bo,
      bool evict,
      struct ttm_mem_reg *new_mem);
void amdgpu_bo_release_notify(struct ttm_buffer_object *bo);
int amdgpu_bo_fault_reserve_notify(struct ttm_buffer_object *bo);
void amdgpu_bo_fence(struct amdgpu_bo *bo, struct dma_fence *fence,
       bool shared);
int amdgpu_bo_sync_wait(struct amdgpu_bo *bo, void *owner, bool intr);
u64 amdgpu_bo_gpu_offset(struct amdgpu_bo *bo);
int amdgpu_bo_validate(struct amdgpu_bo *bo);
int amdgpu_bo_restore_shadow(struct amdgpu_bo *shadow,
        struct dma_fence **fence);
uint32_t amdgpu_bo_get_preferred_pin_domain(struct amdgpu_device *adev,
         uint32_t domain);





static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) uint64_t amdgpu_sa_bo_gpu_addr(struct amdgpu_sa_bo *sa_bo)
{
 return sa_bo->manager->gpu_addr + sa_bo->soffset;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void * amdgpu_sa_bo_cpu_addr(struct amdgpu_sa_bo *sa_bo)
{
 return sa_bo->manager->cpu_ptr + sa_bo->soffset;
}

int amdgpu_sa_bo_manager_init(struct amdgpu_device *adev,
         struct amdgpu_sa_manager *sa_manager,
         unsigned size, u32 align, u32 domain);
void amdgpu_sa_bo_manager_fini(struct amdgpu_device *adev,
          struct amdgpu_sa_manager *sa_manager);
int amdgpu_sa_bo_manager_start(struct amdgpu_device *adev,
          struct amdgpu_sa_manager *sa_manager);
int amdgpu_sa_bo_new(struct amdgpu_sa_manager *sa_manager,
       struct amdgpu_sa_bo **sa_bo,
       unsigned size, unsigned align);
void amdgpu_sa_bo_free(struct amdgpu_device *adev,
         struct amdgpu_sa_bo **sa_bo,
         struct dma_fence *fence);

void amdgpu_sa_bo_dump_debug_info(struct amdgpu_sa_manager *sa_manager,
      struct seq_file *m);


bool amdgpu_bo_support_uswc(u64 bo_flags);
# 1268 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu.h" 2
# 30 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
# 1 "../include/linux/tracepoint.h" 1
# 23 "../include/linux/tracepoint.h"
struct module;
struct tracepoint;
struct notifier_block;

struct trace_eval_map {
 const char *system;
 const char *eval_string;
 unsigned long eval_value;
};



extern struct srcu_struct tracepoint_srcu;

extern int
tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data);
extern int
tracepoint_probe_register_prio(struct tracepoint *tp, void *probe, void *data,
          int prio);
extern int
tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data);
extern void
for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),
  void *priv);


struct tp_module {
 struct list_head list;
 struct module *mod;
};

bool trace_module_has_bad_taint(struct module *mod);
extern int register_tracepoint_module_notifier(struct notifier_block *nb);
extern int unregister_tracepoint_module_notifier(struct notifier_block *nb);
# 86 "../include/linux/tracepoint.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void tracepoint_synchronize_unregister(void)
{ }



extern int syscall_regfunc(void);
extern void syscall_unregfunc(void);
# 101 "../include/linux/tracepoint.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) struct tracepoint *tracepoint_ptr_deref(tracepoint_ptr_t *p)
{
 return offset_to_ptr(p);
}
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h" 2








static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_mm_rreg(unsigned did, uint32_t reg, uint32_t value) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_mm_rreg_rcuidle(unsigned did, uint32_t reg, uint32_t value) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_mm_rreg(void (*probe)(void *__data, unsigned did, uint32_t reg, uint32_t value), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_mm_rreg(void (*probe)(void *__data, unsigned did, uint32_t reg, uint32_t value), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_mm_rreg(void (*cb)(void *__data, unsigned did, uint32_t reg, uint32_t value)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_mm_rreg_enabled(void) { return false; };
# 57 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_mm_wreg(unsigned did, uint32_t reg, uint32_t value) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_mm_wreg_rcuidle(unsigned did, uint32_t reg, uint32_t value) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_mm_wreg(void (*probe)(void *__data, unsigned did, uint32_t reg, uint32_t value), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_mm_wreg(void (*probe)(void *__data, unsigned did, uint32_t reg, uint32_t value), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_mm_wreg(void (*cb)(void *__data, unsigned did, uint32_t reg, uint32_t value)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_mm_wreg_enabled(void) { return false; };
# 76 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_iv(unsigned ih, struct amdgpu_iv_entry *iv) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_iv_rcuidle(unsigned ih, struct amdgpu_iv_entry *iv) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_iv(void (*probe)(void *__data, unsigned ih, struct amdgpu_iv_entry *iv), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_iv(void (*probe)(void *__data, unsigned ih, struct amdgpu_iv_entry *iv), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_iv(void (*cb)(void *__data, unsigned ih, struct amdgpu_iv_entry *iv)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_iv_enabled(void) { return false; };
# 116 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_bo_create(struct amdgpu_bo *bo) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_bo_create_rcuidle(struct amdgpu_bo *bo) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_bo_create(void (*probe)(void *__data, struct amdgpu_bo *bo), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_bo_create(void (*probe)(void *__data, struct amdgpu_bo *bo), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_bo_create(void (*cb)(void *__data, struct amdgpu_bo *bo)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_bo_create_enabled(void) { return false; };
# 142 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_cs(struct amdgpu_cs_parser *p, int i) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_cs_rcuidle(struct amdgpu_cs_parser *p, int i) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_cs(void (*probe)(void *__data, struct amdgpu_cs_parser *p, int i), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_cs(void (*probe)(void *__data, struct amdgpu_cs_parser *p, int i), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_cs(void (*cb)(void *__data, struct amdgpu_cs_parser *p, int i)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_cs_enabled(void) { return false; };
# 164 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_cs_ioctl(struct amdgpu_job *job) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_cs_ioctl_rcuidle(struct amdgpu_job *job) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_cs_ioctl(void (*probe)(void *__data, struct amdgpu_job *job), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_cs_ioctl(void (*probe)(void *__data, struct amdgpu_job *job), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_cs_ioctl(void (*cb)(void *__data, struct amdgpu_job *job)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_cs_ioctl_enabled(void) { return false; };
# 190 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_sched_run_job(struct amdgpu_job *job) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_sched_run_job_rcuidle(struct amdgpu_job *job) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_sched_run_job(void (*probe)(void *__data, struct amdgpu_job *job), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_sched_run_job(void (*probe)(void *__data, struct amdgpu_job *job), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_sched_run_job(void (*cb)(void *__data, struct amdgpu_job *job)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_sched_run_job_enabled(void) { return false; };
# 216 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_grab_id(struct amdgpu_vm *vm, struct amdgpu_ring *ring, struct amdgpu_job *job) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_grab_id_rcuidle(struct amdgpu_vm *vm, struct amdgpu_ring *ring, struct amdgpu_job *job) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_grab_id(void (*probe)(void *__data, struct amdgpu_vm *vm, struct amdgpu_ring *ring, struct amdgpu_job *job), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_grab_id(void (*probe)(void *__data, struct amdgpu_vm *vm, struct amdgpu_ring *ring, struct amdgpu_job *job), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_grab_id(void (*cb)(void *__data, struct amdgpu_vm *vm, struct amdgpu_ring *ring, struct amdgpu_job *job)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_grab_id_enabled(void) { return false; };
# 243 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_map(struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_map_rcuidle(struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_bo_map(void (*probe)(void *__data, struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_bo_map(void (*probe)(void *__data, struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_bo_map(void (*cb)(void *__data, struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_bo_map_enabled(void) { return false; };
# 267 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_unmap(struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_unmap_rcuidle(struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_bo_unmap(void (*probe)(void *__data, struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_bo_unmap(void (*probe)(void *__data, struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_bo_unmap(void (*cb)(void *__data, struct amdgpu_bo_va *bo_va, struct amdgpu_bo_va_mapping *mapping)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_bo_unmap_enabled(void) { return false; };
# 307 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
 ;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_update(struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_update_rcuidle(struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_bo_update(void (*probe)(void *__data, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_bo_update(void (*probe)(void *__data, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_bo_update(void (*cb)(void *__data, struct amdgpu_bo_va_mapping *mapping)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_bo_update_enabled(void) { return false; };




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_mapping(struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_mapping_rcuidle(struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_bo_mapping(void (*probe)(void *__data, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_bo_mapping(void (*probe)(void *__data, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_bo_mapping(void (*cb)(void *__data, struct amdgpu_bo_va_mapping *mapping)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_bo_mapping_enabled(void) { return false; };




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_cs(struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_bo_cs_rcuidle(struct amdgpu_bo_va_mapping *mapping) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_bo_cs(void (*probe)(void *__data, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_bo_cs(void (*probe)(void *__data, struct amdgpu_bo_va_mapping *mapping), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_bo_cs(void (*cb)(void *__data, struct amdgpu_bo_va_mapping *mapping)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_bo_cs_enabled(void) { return false; };




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_set_ptes(uint64_t pe, uint64_t addr, unsigned count, uint32_t incr, uint64_t flags) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_set_ptes_rcuidle(uint64_t pe, uint64_t addr, unsigned count, uint32_t incr, uint64_t flags) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_set_ptes(void (*probe)(void *__data, uint64_t pe, uint64_t addr, unsigned count, uint32_t incr, uint64_t flags), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_set_ptes(void (*probe)(void *__data, uint64_t pe, uint64_t addr, unsigned count, uint32_t incr, uint64_t flags), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_set_ptes(void (*cb)(void *__data, uint64_t pe, uint64_t addr, unsigned count, uint32_t incr, uint64_t flags)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_set_ptes_enabled(void) { return false; };
# 348 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_copy_ptes(uint64_t pe, uint64_t src, unsigned count) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_copy_ptes_rcuidle(uint64_t pe, uint64_t src, unsigned count) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_copy_ptes(void (*probe)(void *__data, uint64_t pe, uint64_t src, unsigned count), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_copy_ptes(void (*probe)(void *__data, uint64_t pe, uint64_t src, unsigned count), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_copy_ptes(void (*cb)(void *__data, uint64_t pe, uint64_t src, unsigned count)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_copy_ptes_enabled(void) { return false; };
# 366 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_flush(struct amdgpu_ring *ring, unsigned vmid, uint64_t pd_addr) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_vm_flush_rcuidle(struct amdgpu_ring *ring, unsigned vmid, uint64_t pd_addr) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_vm_flush(void (*probe)(void *__data, struct amdgpu_ring *ring, unsigned vmid, uint64_t pd_addr), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_vm_flush(void (*probe)(void *__data, struct amdgpu_ring *ring, unsigned vmid, uint64_t pd_addr), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_vm_flush(void (*cb)(void *__data, struct amdgpu_ring *ring, unsigned vmid, uint64_t pd_addr)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_vm_flush_enabled(void) { return false; };
# 398 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
 ;

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_pasid_allocated(unsigned pasid) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_pasid_allocated_rcuidle(unsigned pasid) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_pasid_allocated(void (*probe)(void *__data, unsigned pasid), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_pasid_allocated(void (*probe)(void *__data, unsigned pasid), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_pasid_allocated(void (*cb)(void *__data, unsigned pasid)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_pasid_allocated_enabled(void) { return false; };




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_pasid_freed(unsigned pasid) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_pasid_freed_rcuidle(unsigned pasid) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_pasid_freed(void (*probe)(void *__data, unsigned pasid), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_pasid_freed(void (*probe)(void *__data, unsigned pasid), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_pasid_freed(void (*cb)(void *__data, unsigned pasid)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_pasid_freed_enabled(void) { return false; };




static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_bo_list_set(struct amdgpu_bo_list *list, struct amdgpu_bo *bo) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_bo_list_set_rcuidle(struct amdgpu_bo_list *list, struct amdgpu_bo *bo) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_bo_list_set(void (*probe)(void *__data, struct amdgpu_bo_list *list, struct amdgpu_bo *bo), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_bo_list_set(void (*probe)(void *__data, struct amdgpu_bo_list *list, struct amdgpu_bo *bo), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_bo_list_set(void (*cb)(void *__data, struct amdgpu_bo_list *list, struct amdgpu_bo *bo)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_bo_list_set_enabled(void) { return false; };
# 430 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_cs_bo_status(uint64_t total_bo, uint64_t total_size) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_cs_bo_status_rcuidle(uint64_t total_bo, uint64_t total_size) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_cs_bo_status(void (*probe)(void *__data, uint64_t total_bo, uint64_t total_size), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_cs_bo_status(void (*probe)(void *__data, uint64_t total_bo, uint64_t total_size), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_cs_bo_status(void (*cb)(void *__data, uint64_t total_bo, uint64_t total_size)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_cs_bo_status_enabled(void) { return false; };
# 446 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_bo_move(struct amdgpu_bo* bo, uint32_t new_placement, uint32_t old_placement) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_bo_move_rcuidle(struct amdgpu_bo* bo, uint32_t new_placement, uint32_t old_placement) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_bo_move(void (*probe)(void *__data, struct amdgpu_bo* bo, uint32_t new_placement, uint32_t old_placement), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_bo_move(void (*probe)(void *__data, struct amdgpu_bo* bo, uint32_t new_placement, uint32_t old_placement), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_bo_move(void (*cb)(void *__data, struct amdgpu_bo* bo, uint32_t new_placement, uint32_t old_placement)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_bo_move_enabled(void) { return false; };
# 467 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_ib_pipe_sync(struct amdgpu_job *sched_job, struct dma_fence *fence) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void trace_amdgpu_ib_pipe_sync_rcuidle(struct amdgpu_job *sched_job, struct dma_fence *fence) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int register_trace_amdgpu_ib_pipe_sync(void (*probe)(void *__data, struct amdgpu_job *sched_job, struct dma_fence *fence), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int unregister_trace_amdgpu_ib_pipe_sync(void (*probe)(void *__data, struct amdgpu_job *sched_job, struct dma_fence *fence), void *data) { return -38; } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) void check_trace_callback_type_amdgpu_ib_pipe_sync(void (*cb)(void *__data, struct amdgpu_job *sched_job, struct dma_fence *fence)) { } static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) bool trace_amdgpu_ib_pipe_sync_enabled(void) { return false; };
# 497 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h"
# 1 "../include/trace/define_trace.h" 1
# 498 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_trace.h" 2
# 32 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma0/sdma0_4_2_offset.h" 1
# 34 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma0/sdma0_4_2_sh_mask.h" 1
# 35 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma1/sdma1_4_2_offset.h" 1
# 36 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma1/sdma1_4_2_sh_mask.h" 1
# 37 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma2/sdma2_4_2_2_offset.h" 1
# 38 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma2/sdma2_4_2_2_sh_mask.h" 1
# 39 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma3/sdma3_4_2_2_offset.h" 1
# 40 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma3/sdma3_4_2_2_sh_mask.h" 1
# 41 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma4/sdma4_4_2_2_offset.h" 1
# 42 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma4/sdma4_4_2_2_sh_mask.h" 1
# 43 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma5/sdma5_4_2_2_offset.h" 1
# 44 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma5/sdma5_4_2_2_sh_mask.h" 1
# 45 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma6/sdma6_4_2_2_offset.h" 1
# 46 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma6/sdma6_4_2_2_sh_mask.h" 1
# 47 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma7/sdma7_4_2_2_offset.h" 1
# 48 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma7/sdma7_4_2_2_sh_mask.h" 1
# 49 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/hdp/hdp_4_0_offset.h" 1
# 50 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/asic_reg/sdma0/sdma0_4_1_default.h" 1
# 51 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15_common.h" 1
# 53 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15.h" 1
# 27 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/nbio_v6_1.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/nbio_v6_1.h"
extern const struct amdgpu_nbio_funcs nbio_v6_1_funcs;
# 28 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/nbio_v7_0.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/nbio_v7_0.h"
extern const struct amdgpu_nbio_funcs nbio_v7_0_funcs;
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15.h" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/nbio_v7_4.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/nbio_v7_4.h"
extern const struct amdgpu_nbio_funcs nbio_v7_4_funcs;
# 30 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15.h" 2




extern const struct amd_ip_funcs soc15_common_ip_funcs;

struct soc15_reg_golden {
 u32 hwip;
 u32 instance;
 u32 segment;
 u32 reg;
 u32 and_mask;
 u32 or_mask;
};

struct soc15_reg_entry {
 uint32_t hwip;
 uint32_t inst;
 uint32_t seg;
 uint32_t reg_offset;
 uint32_t reg_value;
 uint32_t se_num;
 uint32_t instance;
};

struct soc15_allowed_register_entry {
 uint32_t hwip;
 uint32_t inst;
 uint32_t seg;
 uint32_t reg_offset;
 bool grbm_indexed;
};
# 70 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/soc15.h"
void soc15_grbm_select(struct amdgpu_device *adev,
      u32 me, u32 pipe, u32 queue, u32 vmid);
int soc15_set_ip_blocks(struct amdgpu_device *adev);

void soc15_program_register_sequence(struct amdgpu_device *adev,
          const struct soc15_reg_golden *registers,
          const u32 array_size);

int vega10_reg_base_init(struct amdgpu_device *adev);
int vega20_reg_base_init(struct amdgpu_device *adev);
int arct_reg_base_init(struct amdgpu_device *adev);

void vega10_doorbell_index_init(struct amdgpu_device *adev);
void vega20_doorbell_index_init(struct amdgpu_device *adev);
# 54 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/vega10_sdma_pkt_open.h" 1
# 55 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../include/ivsrcid/sdma0/irqsrcs_sdma0_4_0.h" 1
# 57 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2
# 1 "../drivers/gpu/drm/amd/amdgpu/../include/ivsrcid/sdma1/irqsrcs_sdma1_4_0.h" 1
# 58 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2

# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras.h" 1
# 32 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras.h"
# 1 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras_eeprom.h" 1
# 29 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras_eeprom.h"
struct amdgpu_device;

enum amdgpu_ras_eeprom_err_type{
 AMDGPU_RAS_EEPROM_ERR_PLACE_HOLDER,
 AMDGPU_RAS_EEPROM_ERR_RECOVERABLE,
 AMDGPU_RAS_EEPROM_ERR_NON_RECOVERABLE
};

struct amdgpu_ras_eeprom_table_header {
 uint32_t header;
 uint32_t version;
 uint32_t first_rec_offset;
 uint32_t tbl_size;
 uint32_t checksum;
}__attribute__((__packed__));

struct amdgpu_ras_eeprom_control {
 struct amdgpu_ras_eeprom_table_header tbl_hdr;
 struct i2c_adapter eeprom_accessor;
 uint32_t next_addr;
 unsigned int num_recs;
 struct mutex tbl_mutex;
 bool bus_locked;
 uint32_t tbl_byte_sum;
};





struct eeprom_table_record {

 union {
  uint64_t address;
  uint64_t offset;
 };

 uint64_t retired_page;
 uint64_t ts;

 enum amdgpu_ras_eeprom_err_type err_type;

 union {
  unsigned char bank;
  unsigned char cu;
 };

 unsigned char mem_channel;
 unsigned char mcumc_id;
}__attribute__((__packed__));

int amdgpu_ras_eeprom_init(struct amdgpu_ras_eeprom_control *control);
void amdgpu_ras_eeprom_fini(struct amdgpu_ras_eeprom_control *control);

int amdgpu_ras_eeprom_process_recods(struct amdgpu_ras_eeprom_control *control,
         struct eeprom_table_record *records,
         bool write,
         int num);

void amdgpu_ras_eeprom_test(struct amdgpu_ras_eeprom_control *control);
# 33 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras.h" 2

enum amdgpu_ras_block {
 AMDGPU_RAS_BLOCK__UMC = 0,
 AMDGPU_RAS_BLOCK__SDMA,
 AMDGPU_RAS_BLOCK__GFX,
 AMDGPU_RAS_BLOCK__MMHUB,
 AMDGPU_RAS_BLOCK__ATHUB,
 AMDGPU_RAS_BLOCK__PCIE_BIF,
 AMDGPU_RAS_BLOCK__HDP,
 AMDGPU_RAS_BLOCK__XGMI_WAFL,
 AMDGPU_RAS_BLOCK__DF,
 AMDGPU_RAS_BLOCK__SMN,
 AMDGPU_RAS_BLOCK__SEM,
 AMDGPU_RAS_BLOCK__MP0,
 AMDGPU_RAS_BLOCK__MP1,
 AMDGPU_RAS_BLOCK__FUSE,

 AMDGPU_RAS_BLOCK__LAST
};




enum amdgpu_ras_gfx_subblock {

 AMDGPU_RAS_BLOCK__GFX_CPC_INDEX_START = 0,
 AMDGPU_RAS_BLOCK__GFX_CPC_SCRATCH =
  AMDGPU_RAS_BLOCK__GFX_CPC_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_CPC_UCODE,
 AMDGPU_RAS_BLOCK__GFX_DC_STATE_ME1,
 AMDGPU_RAS_BLOCK__GFX_DC_CSINVOC_ME1,
 AMDGPU_RAS_BLOCK__GFX_DC_RESTORE_ME1,
 AMDGPU_RAS_BLOCK__GFX_DC_STATE_ME2,
 AMDGPU_RAS_BLOCK__GFX_DC_CSINVOC_ME2,
 AMDGPU_RAS_BLOCK__GFX_DC_RESTORE_ME2,
 AMDGPU_RAS_BLOCK__GFX_CPC_INDEX_END =
  AMDGPU_RAS_BLOCK__GFX_DC_RESTORE_ME2,

 AMDGPU_RAS_BLOCK__GFX_CPF_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_CPF_ROQ_ME2 =
  AMDGPU_RAS_BLOCK__GFX_CPF_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_CPF_ROQ_ME1,
 AMDGPU_RAS_BLOCK__GFX_CPF_TAG,
 AMDGPU_RAS_BLOCK__GFX_CPF_INDEX_END = AMDGPU_RAS_BLOCK__GFX_CPF_TAG,

 AMDGPU_RAS_BLOCK__GFX_CPG_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_CPG_DMA_ROQ =
  AMDGPU_RAS_BLOCK__GFX_CPG_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_CPG_DMA_TAG,
 AMDGPU_RAS_BLOCK__GFX_CPG_TAG,
 AMDGPU_RAS_BLOCK__GFX_CPG_INDEX_END = AMDGPU_RAS_BLOCK__GFX_CPG_TAG,

 AMDGPU_RAS_BLOCK__GFX_GDS_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_GDS_MEM = AMDGPU_RAS_BLOCK__GFX_GDS_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_GDS_INPUT_QUEUE,
 AMDGPU_RAS_BLOCK__GFX_GDS_OA_PHY_CMD_RAM_MEM,
 AMDGPU_RAS_BLOCK__GFX_GDS_OA_PHY_DATA_RAM_MEM,
 AMDGPU_RAS_BLOCK__GFX_GDS_OA_PIPE_MEM,
 AMDGPU_RAS_BLOCK__GFX_GDS_INDEX_END =
  AMDGPU_RAS_BLOCK__GFX_GDS_OA_PIPE_MEM,

 AMDGPU_RAS_BLOCK__GFX_SPI_SR_MEM,

 AMDGPU_RAS_BLOCK__GFX_SQ_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_SQ_SGPR = AMDGPU_RAS_BLOCK__GFX_SQ_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_SQ_LDS_D,
 AMDGPU_RAS_BLOCK__GFX_SQ_LDS_I,
 AMDGPU_RAS_BLOCK__GFX_SQ_VGPR,
 AMDGPU_RAS_BLOCK__GFX_SQ_INDEX_END = AMDGPU_RAS_BLOCK__GFX_SQ_VGPR,

 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX_START,

 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX0_START =
  AMDGPU_RAS_BLOCK__GFX_SQC_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_UTCL1_LFIFO =
  AMDGPU_RAS_BLOCK__GFX_SQC_INDEX0_START,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_CU0_WRITE_DATA_BUF,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_CU0_UTCL1_LFIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_CU1_WRITE_DATA_BUF,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_CU1_UTCL1_LFIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_CU2_WRITE_DATA_BUF,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_CU2_UTCL1_LFIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX0_END =
  AMDGPU_RAS_BLOCK__GFX_SQC_DATA_CU2_UTCL1_LFIFO,

 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX1_START,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKA_TAG_RAM =
  AMDGPU_RAS_BLOCK__GFX_SQC_INDEX1_START,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKA_UTCL1_MISS_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKA_MISS_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKA_BANK_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKA_TAG_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKA_HIT_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKA_MISS_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKA_DIRTY_BIT_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKA_BANK_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX1_END =
  AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKA_BANK_RAM,

 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX2_START,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKB_TAG_RAM =
  AMDGPU_RAS_BLOCK__GFX_SQC_INDEX2_START,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKB_UTCL1_MISS_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKB_MISS_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_INST_BANKB_BANK_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKB_TAG_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKB_HIT_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKB_MISS_FIFO,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKB_DIRTY_BIT_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKB_BANK_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX2_END =
  AMDGPU_RAS_BLOCK__GFX_SQC_DATA_BANKB_BANK_RAM,
 AMDGPU_RAS_BLOCK__GFX_SQC_INDEX_END =
  AMDGPU_RAS_BLOCK__GFX_SQC_INDEX2_END,

 AMDGPU_RAS_BLOCK__GFX_TA_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TA_FS_DFIFO =
  AMDGPU_RAS_BLOCK__GFX_TA_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TA_FS_AFIFO,
 AMDGPU_RAS_BLOCK__GFX_TA_FL_LFIFO,
 AMDGPU_RAS_BLOCK__GFX_TA_FX_LFIFO,
 AMDGPU_RAS_BLOCK__GFX_TA_FS_CFIFO,
 AMDGPU_RAS_BLOCK__GFX_TA_INDEX_END = AMDGPU_RAS_BLOCK__GFX_TA_FS_CFIFO,

 AMDGPU_RAS_BLOCK__GFX_TCA_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TCA_HOLE_FIFO =
  AMDGPU_RAS_BLOCK__GFX_TCA_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TCA_REQ_FIFO,
 AMDGPU_RAS_BLOCK__GFX_TCA_INDEX_END =
  AMDGPU_RAS_BLOCK__GFX_TCA_REQ_FIFO,

 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX_START,

 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX0_START =
  AMDGPU_RAS_BLOCK__GFX_TCC_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_DATA =
  AMDGPU_RAS_BLOCK__GFX_TCC_INDEX0_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_DATA_BANK_0_1,
 AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_DATA_BANK_1_0,
 AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_DATA_BANK_1_1,
 AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_DIRTY_BANK_0,
 AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_DIRTY_BANK_1,
 AMDGPU_RAS_BLOCK__GFX_TCC_HIGH_RATE_TAG,
 AMDGPU_RAS_BLOCK__GFX_TCC_LOW_RATE_TAG,
 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX0_END =
  AMDGPU_RAS_BLOCK__GFX_TCC_LOW_RATE_TAG,

 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX1_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_IN_USE_DEC =
  AMDGPU_RAS_BLOCK__GFX_TCC_INDEX1_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_IN_USE_TRANSFER,
 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX1_END =
  AMDGPU_RAS_BLOCK__GFX_TCC_IN_USE_TRANSFER,

 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX2_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_RETURN_DATA =
  AMDGPU_RAS_BLOCK__GFX_TCC_INDEX2_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_RETURN_CONTROL,
 AMDGPU_RAS_BLOCK__GFX_TCC_UC_ATOMIC_FIFO,
 AMDGPU_RAS_BLOCK__GFX_TCC_WRITE_RETURN,
 AMDGPU_RAS_BLOCK__GFX_TCC_WRITE_CACHE_READ,
 AMDGPU_RAS_BLOCK__GFX_TCC_SRC_FIFO,
 AMDGPU_RAS_BLOCK__GFX_TCC_SRC_FIFO_NEXT_RAM,
 AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_TAG_PROBE_FIFO,
 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX2_END =
  AMDGPU_RAS_BLOCK__GFX_TCC_CACHE_TAG_PROBE_FIFO,

 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX3_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_LATENCY_FIFO =
  AMDGPU_RAS_BLOCK__GFX_TCC_INDEX3_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_LATENCY_FIFO_NEXT_RAM,
 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX3_END =
  AMDGPU_RAS_BLOCK__GFX_TCC_LATENCY_FIFO_NEXT_RAM,

 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX4_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_WRRET_TAG_WRITE_RETURN =
  AMDGPU_RAS_BLOCK__GFX_TCC_INDEX4_START,
 AMDGPU_RAS_BLOCK__GFX_TCC_ATOMIC_RETURN_BUFFER,
 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX4_END =
  AMDGPU_RAS_BLOCK__GFX_TCC_ATOMIC_RETURN_BUFFER,
 AMDGPU_RAS_BLOCK__GFX_TCC_INDEX_END =
  AMDGPU_RAS_BLOCK__GFX_TCC_INDEX4_END,

 AMDGPU_RAS_BLOCK__GFX_TCI_WRITE_RAM,

 AMDGPU_RAS_BLOCK__GFX_TCP_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TCP_CACHE_RAM =
  AMDGPU_RAS_BLOCK__GFX_TCP_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TCP_LFIFO_RAM,
 AMDGPU_RAS_BLOCK__GFX_TCP_CMD_FIFO,
 AMDGPU_RAS_BLOCK__GFX_TCP_VM_FIFO,
 AMDGPU_RAS_BLOCK__GFX_TCP_DB_RAM,
 AMDGPU_RAS_BLOCK__GFX_TCP_UTCL1_LFIFO0,
 AMDGPU_RAS_BLOCK__GFX_TCP_UTCL1_LFIFO1,
 AMDGPU_RAS_BLOCK__GFX_TCP_INDEX_END =
  AMDGPU_RAS_BLOCK__GFX_TCP_UTCL1_LFIFO1,

 AMDGPU_RAS_BLOCK__GFX_TD_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TD_SS_FIFO_LO =
  AMDGPU_RAS_BLOCK__GFX_TD_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_TD_SS_FIFO_HI,
 AMDGPU_RAS_BLOCK__GFX_TD_CS_FIFO,
 AMDGPU_RAS_BLOCK__GFX_TD_INDEX_END = AMDGPU_RAS_BLOCK__GFX_TD_CS_FIFO,

 AMDGPU_RAS_BLOCK__GFX_EA_INDEX_START,

 AMDGPU_RAS_BLOCK__GFX_EA_INDEX0_START =
  AMDGPU_RAS_BLOCK__GFX_EA_INDEX_START,
 AMDGPU_RAS_BLOCK__GFX_EA_DRAMRD_CMDMEM =
  AMDGPU_RAS_BLOCK__GFX_EA_INDEX0_START,
 AMDGPU_RAS_BLOCK__GFX_EA_DRAMWR_CMDMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_DRAMWR_DATAMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_RRET_TAGMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_WRET_TAGMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_GMIRD_CMDMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_GMIWR_CMDMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_GMIWR_DATAMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_INDEX0_END =
  AMDGPU_RAS_BLOCK__GFX_EA_GMIWR_DATAMEM,

 AMDGPU_RAS_BLOCK__GFX_EA_INDEX1_START,
 AMDGPU_RAS_BLOCK__GFX_EA_DRAMRD_PAGEMEM =
  AMDGPU_RAS_BLOCK__GFX_EA_INDEX1_START,
 AMDGPU_RAS_BLOCK__GFX_EA_DRAMWR_PAGEMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_IORD_CMDMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_IOWR_CMDMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_IOWR_DATAMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_GMIRD_PAGEMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_GMIWR_PAGEMEM,
 AMDGPU_RAS_BLOCK__GFX_EA_INDEX1_END =
  AMDGPU_RAS_BLOCK__GFX_EA_GMIWR_PAGEMEM,

 AMDGPU_RAS_BLOCK__GFX_EA_INDEX2_START,
 AMDGPU_RAS_BLOCK__GFX_EA_MAM_D0MEM =
  AMDGPU_RAS_BLOCK__GFX_EA_INDEX2_START,
 AMDGPU_RAS_BLOCK__GFX_EA_MAM_D1MEM,
 AMDGPU_RAS_BLOCK__GFX_EA_MAM_D2MEM,
 AMDGPU_RAS_BLOCK__GFX_EA_MAM_D3MEM,
 AMDGPU_RAS_BLOCK__GFX_EA_INDEX2_END =
  AMDGPU_RAS_BLOCK__GFX_EA_MAM_D3MEM,
 AMDGPU_RAS_BLOCK__GFX_EA_INDEX_END =
  AMDGPU_RAS_BLOCK__GFX_EA_INDEX2_END,

 AMDGPU_RAS_BLOCK__UTC_VML2_BANK_CACHE,

 AMDGPU_RAS_BLOCK__UTC_VML2_WALKER,

 AMDGPU_RAS_BLOCK__UTC_ATCL2_CACHE_2M_BANK,

 AMDGPU_RAS_BLOCK__UTC_ATCL2_CACHE_4K_BANK,
 AMDGPU_RAS_BLOCK__GFX_MAX
};

enum amdgpu_ras_error_type {
 AMDGPU_RAS_ERROR__NONE = 0,
 AMDGPU_RAS_ERROR__PARITY = 1,
 AMDGPU_RAS_ERROR__SINGLE_CORRECTABLE = 2,
 AMDGPU_RAS_ERROR__MULTI_UNCORRECTABLE = 4,
 AMDGPU_RAS_ERROR__POISON = 8,
};

enum amdgpu_ras_ret {
 AMDGPU_RAS_SUCCESS = 0,
 AMDGPU_RAS_FAIL,
 AMDGPU_RAS_UE,
 AMDGPU_RAS_CE,
 AMDGPU_RAS_PT,
};

struct ras_common_if {
 enum amdgpu_ras_block block;
 enum amdgpu_ras_error_type type;
 uint32_t sub_block_index;

 char name[32];
};

struct amdgpu_ras {


 uint32_t hw_supported;

 uint32_t supported;
 uint32_t features;
 struct list_head head;

 struct dentry *dir;

 struct dentry *ent;

 struct device_attribute features_attr;
 struct bin_attribute badpages_attr;

 struct ras_manager *objs;


 struct work_struct recovery_work;
 atomic_t in_recovery;
 struct amdgpu_device *adev;

 struct ras_err_handler_data *eh_data;
 struct mutex recovery_lock;

 uint32_t flags;

 struct amdgpu_ras_eeprom_control eeprom_control;
};

struct ras_fs_data {
 char sysfs_name[32];
 char debugfs_name[32];
};

struct ras_err_data {
 unsigned long ue_count;
 unsigned long ce_count;
 unsigned long err_addr_cnt;
 uint64_t *err_addr;
};

struct ras_err_handler_data {

 struct {
  unsigned long bp;
  struct amdgpu_bo *bo;
 } *bps;

 int count;

 int space_left;

 int last_reserved;
};

typedef int (*ras_ih_cb)(struct amdgpu_device *adev,
  struct ras_err_data *err_data,
  struct amdgpu_iv_entry *entry);

struct ras_ih_data {

 struct work_struct ih_work;
 int inuse;

 ras_ih_cb cb;

 unsigned char *ring;
 unsigned int ring_size;
 unsigned int element_size;
 unsigned int aligned_element_size;
 unsigned int rptr;
 unsigned int wptr;
};

struct ras_manager {
 struct ras_common_if head;

 int use;

 struct list_head node;

 struct amdgpu_device *adev;

 struct dentry *ent;

 struct device_attribute sysfs_attr;
 int attr_inuse;


 struct ras_fs_data fs_data;


 struct ras_ih_data ih_data;

 struct ras_err_data err_data;
};

struct ras_badpage {
 unsigned int bp;
 unsigned int size;
 unsigned int flags;
};


struct ras_fs_if {
 struct ras_common_if head;
 char sysfs_name[32];
 char debugfs_name[32];
};

struct ras_query_if {
 struct ras_common_if head;
 unsigned long ue_count;
 unsigned long ce_count;
};

struct ras_inject_if {
 struct ras_common_if head;
 uint64_t address;
 uint64_t value;
};

struct ras_cure_if {
 struct ras_common_if head;
 uint64_t address;
};

struct ras_ih_if {
 struct ras_common_if head;
 ras_ih_cb cb;
};

struct ras_dispatch_if {
 struct ras_common_if head;
 struct amdgpu_iv_entry *entry;
};

struct ras_debug_if {
 union {
  struct ras_common_if head;
  struct ras_inject_if inject;
 };
 int op;
};
# 474 "../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras.h"
static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int amdgpu_ras_is_supported(struct amdgpu_device *adev,
  unsigned int block)
{
 struct amdgpu_ras *ras = ((adev)->psp.ras.ras);

 if (block >= AMDGPU_RAS_BLOCK__LAST)
  return 0;
 return ras && (ras->supported & (1 << block));
}

int amdgpu_ras_request_reset_on_boot(struct amdgpu_device *adev,
  unsigned int block);

void amdgpu_ras_resume(struct amdgpu_device *adev);
void amdgpu_ras_suspend(struct amdgpu_device *adev);

unsigned long amdgpu_ras_query_error_count(struct amdgpu_device *adev,
  bool is_ce);


int amdgpu_ras_add_bad_pages(struct amdgpu_device *adev,
  unsigned long *bps, int pages);

int amdgpu_ras_reserve_bad_pages(struct amdgpu_device *adev);

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) int amdgpu_ras_reset_gpu(struct amdgpu_device *adev,
  bool is_baco)
{
 struct amdgpu_ras *ras = ((adev)->psp.ras.ras);

 if (atomic_cmpxchg(&ras->in_recovery, 0, 1) == 0)
  schedule_work(&ras->recovery_work);
 return 0;
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum ta_ras_block
amdgpu_ras_block_to_ta(enum amdgpu_ras_block block) {
 switch (block) {
 case AMDGPU_RAS_BLOCK__UMC:
  return TA_RAS_BLOCK__UMC;
 case AMDGPU_RAS_BLOCK__SDMA:
  return TA_RAS_BLOCK__SDMA;
 case AMDGPU_RAS_BLOCK__GFX:
  return TA_RAS_BLOCK__GFX;
 case AMDGPU_RAS_BLOCK__MMHUB:
  return TA_RAS_BLOCK__MMHUB;
 case AMDGPU_RAS_BLOCK__ATHUB:
  return TA_RAS_BLOCK__ATHUB;
 case AMDGPU_RAS_BLOCK__PCIE_BIF:
  return TA_RAS_BLOCK__PCIE_BIF;
 case AMDGPU_RAS_BLOCK__HDP:
  return TA_RAS_BLOCK__HDP;
 case AMDGPU_RAS_BLOCK__XGMI_WAFL:
  return TA_RAS_BLOCK__XGMI_WAFL;
 case AMDGPU_RAS_BLOCK__DF:
  return TA_RAS_BLOCK__DF;
 case AMDGPU_RAS_BLOCK__SMN:
  return TA_RAS_BLOCK__SMN;
 case AMDGPU_RAS_BLOCK__SEM:
  return TA_RAS_BLOCK__SEM;
 case AMDGPU_RAS_BLOCK__MP0:
  return TA_RAS_BLOCK__MP0;
 case AMDGPU_RAS_BLOCK__MP1:
  return TA_RAS_BLOCK__MP1;
 case AMDGPU_RAS_BLOCK__FUSE:
  return TA_RAS_BLOCK__FUSE;
 default:
  ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __warn_printk("RAS ERROR: unexpected block id %d\n", block); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras.h\"; .popsection; .long 14472b - 14470b; .short 541; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
  return TA_RAS_BLOCK__UMC;
 }
}

static inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__unused__)) __attribute__((__no_instrument_function__)) enum ta_ras_error_type
amdgpu_ras_error_to_ta(enum amdgpu_ras_error_type error) {
 switch (error) {
 case AMDGPU_RAS_ERROR__NONE:
  return TA_RAS_ERROR__NONE;
 case AMDGPU_RAS_ERROR__PARITY:
  return TA_RAS_ERROR__PARITY;
 case AMDGPU_RAS_ERROR__SINGLE_CORRECTABLE:
  return TA_RAS_ERROR__SINGLE_CORRECTABLE;
 case AMDGPU_RAS_ERROR__MULTI_UNCORRECTABLE:
  return TA_RAS_ERROR__MULTI_UNCORRECTABLE;
 case AMDGPU_RAS_ERROR__POISON:
  return TA_RAS_ERROR__POISON;
 default:
  ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __warn_printk("RAS ERROR: unexpected error type %d\n", error); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/../amdgpu/amdgpu_ras.h\"; .popsection; .long 14472b - 14470b; .short 560; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });
  return TA_RAS_ERROR__NONE;
 }
}


int amdgpu_ras_init(struct amdgpu_device *adev);
int amdgpu_ras_fini(struct amdgpu_device *adev);
int amdgpu_ras_pre_fini(struct amdgpu_device *adev);

int amdgpu_ras_feature_enable(struct amdgpu_device *adev,
  struct ras_common_if *head, bool enable);

int amdgpu_ras_feature_enable_on_boot(struct amdgpu_device *adev,
  struct ras_common_if *head, bool enable);

int amdgpu_ras_sysfs_create(struct amdgpu_device *adev,
  struct ras_fs_if *head);

int amdgpu_ras_sysfs_remove(struct amdgpu_device *adev,
  struct ras_common_if *head);

void amdgpu_ras_debugfs_create(struct amdgpu_device *adev,
  struct ras_fs_if *head);

void amdgpu_ras_debugfs_remove(struct amdgpu_device *adev,
  struct ras_common_if *head);

int amdgpu_ras_error_query(struct amdgpu_device *adev,
  struct ras_query_if *info);

int amdgpu_ras_error_inject(struct amdgpu_device *adev,
  struct ras_inject_if *info);

int amdgpu_ras_interrupt_add_handler(struct amdgpu_device *adev,
  struct ras_ih_if *info);

int amdgpu_ras_interrupt_remove_handler(struct amdgpu_device *adev,
  struct ras_ih_if *info);

int amdgpu_ras_interrupt_dispatch(struct amdgpu_device *adev,
  struct ras_dispatch_if *info);
# 60 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c" 2

static const char __UNIQUE_ID_firmware16[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/vega10_sdma.bin";
static const char __UNIQUE_ID_firmware17[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/vega10_sdma1.bin";
static const char __UNIQUE_ID_firmware18[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/vega12_sdma.bin";
static const char __UNIQUE_ID_firmware19[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/vega12_sdma1.bin";
static const char __UNIQUE_ID_firmware20[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/vega20_sdma.bin";
static const char __UNIQUE_ID_firmware21[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/vega20_sdma1.bin";
static const char __UNIQUE_ID_firmware22[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/raven_sdma.bin";
static const char __UNIQUE_ID_firmware23[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/picasso_sdma.bin";
static const char __UNIQUE_ID_firmware24[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/raven2_sdma.bin";
static const char __UNIQUE_ID_firmware25[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/arcturus_sdma.bin";
static const char __UNIQUE_ID_firmware26[] __attribute__((__used__)) __attribute__((section(".modinfo"), unused, aligned(1))) = "firmware" "=" "amdgpu/renoir_sdma.bin";
# 81 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_set_ring_funcs(struct amdgpu_device *adev);
static void sdma_v4_0_set_buffer_funcs(struct amdgpu_device *adev);
static void sdma_v4_0_set_vm_pte_funcs(struct amdgpu_device *adev);
static void sdma_v4_0_set_irq_funcs(struct amdgpu_device *adev);

static const struct soc15_reg_golden golden_settings_sdma_4[] = {
 { SDMA0_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831d07 },
 { SDMA0_HWIP, 0, 0, 0x001b, 0xff000ff0, 0x3f000100 },
 { SDMA0_HWIP, 0, 0, 0x008a, 0x800f0100, 0x00000100 },
 { SDMA0_HWIP, 0, 0, 0x0087, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x00ea, 0x800f0100, 0x00000100 },
 { SDMA0_HWIP, 0, 0, 0x00e7, 0x0000fff0, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x001a, 0x003ff006, 0x0003c000 },
 { SDMA0_HWIP, 0, 0, 0x014a, 0x800f0100, 0x00000100 },
 { SDMA0_HWIP, 0, 0, 0x0147, 0x0000fff0, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x01aa, 0x800f0100, 0x00000100 },
 { SDMA0_HWIP, 0, 0, 0x01a7, 0x0000fff0, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0048, 0x000003ff, 0x000003c0 },
 { SDMA0_HWIP, 0, 0, 0x003d, 0xfc000000, 0x00000000 },
 { SDMA1_HWIP, 0, 0, 0x001b, 0xffffffff, 0x3f000100 },
 { SDMA1_HWIP, 0, 0, 0x008a, 0x800f0100, 0x00000100 },
 { SDMA1_HWIP, 0, 0, 0x0087, 0x0000fff0, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x00ea, 0x800f0100, 0x00000100 },
 { SDMA1_HWIP, 0, 0, 0x00e7, 0x0000fff0, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x001a, 0x003ff000, 0x0003c000 },
 { SDMA1_HWIP, 0, 0, 0x014a, 0x800f0100, 0x00000100 },
 { SDMA1_HWIP, 0, 0, 0x0147, 0x0000fff0, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x01aa, 0x800f0100, 0x00000100 },
 { SDMA1_HWIP, 0, 0, 0x01a7, 0x0000fff0, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x0048, 0x000003ff, 0x000003c0 },
 { SDMA1_HWIP, 0, 0, 0x003d, 0xfc000000, 0x00000000 }
};

static const struct soc15_reg_golden golden_settings_sdma_vg10[] = {
 { SDMA0_HWIP, 0, 0, 0x001e, 0x0018773f, 0x00104002 },
 { SDMA0_HWIP, 0, 0, 0x001f, 0x0018773f, 0x00104002 },
 { SDMA1_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831d07 },
 { SDMA1_HWIP, 0, 0, 0x001e, 0x0018773f, 0x00104002 },
 { SDMA1_HWIP, 0, 0, 0x001f, 0x0018773f, 0x00104002 }
};

static const struct soc15_reg_golden golden_settings_sdma_vg12[] = {
 { SDMA0_HWIP, 0, 0, 0x001e, 0x0018773f, 0x00104001 },
 { SDMA0_HWIP, 0, 0, 0x001f, 0x0018773f, 0x00104001 },
 { SDMA1_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831d07 },
 { SDMA1_HWIP, 0, 0, 0x001e, 0x0018773f, 0x00104001 },
 { SDMA1_HWIP, 0, 0, 0x001f, 0x0018773f, 0x00104001 }
};

static const struct soc15_reg_golden golden_settings_sdma_4_1[] = {
 { SDMA0_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831d07 },
 { SDMA0_HWIP, 0, 0, 0x001b, 0xffffffff, 0x3f000100 },
 { SDMA0_HWIP, 0, 0, 0x008a, 0x800f0111, 0x00000100 },
 { SDMA0_HWIP, 0, 0, 0x0087, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x001a, 0xfc3fffff, 0x40000051 },
 { SDMA0_HWIP, 0, 0, 0x014a, 0x800f0111, 0x00000100 },
 { SDMA0_HWIP, 0, 0, 0x0147, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x01aa, 0x800f0111, 0x00000100 },
 { SDMA0_HWIP, 0, 0, 0x01a7, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0048, 0x000003ff, 0x000003c0 },
 { SDMA0_HWIP, 0, 0, 0x003d, 0xfc000000, 0x00000000 }
};

static const struct soc15_reg_golden golden_settings_sdma0_4_2_init[] = {
 { SDMA0_HWIP, 0, 0, 0x0147, 0xfffffff0, 0x00403000 },
};

static const struct soc15_reg_golden golden_settings_sdma0_4_2[] =
{
 { SDMA0_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA0_HWIP, 0, 0, 0x001b, 0xffffffff, 0x3f000100 },
 { SDMA0_HWIP, 0, 0, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA0_HWIP, 0, 0, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA0_HWIP, 0, 0, 0x0089, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x0087, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x00e9, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x00e7, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0027, 0x0000000f, 0x00000003 },
 { SDMA0_HWIP, 0, 0, 0x0149, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x0147, 0xfffffff0, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x01a9, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x01a7, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0209, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x0207, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0269, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x0267, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x02c9, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x02c7, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0329, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x0327, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0389, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x0387, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x03e9, 0xfffffffd, 0x00000001 },
 { SDMA0_HWIP, 0, 0, 0x03e7, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0048, 0x000003ff, 0x000003c0 },
};

static const struct soc15_reg_golden golden_settings_sdma1_4_2[] = {
 { SDMA1_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA1_HWIP, 0, 0, 0x001b, 0xffffffff, 0x3f000100 },
 { SDMA1_HWIP, 0, 0, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA1_HWIP, 0, 0, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA1_HWIP, 0, 0, 0x0089, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x0087, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x00e9, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x00e7, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x0027, 0x0000000f, 0x00000003 },
 { SDMA1_HWIP, 0, 0, 0x0149, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x0147, 0xfffffff0, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x01a9, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x01a7, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x0209, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x0207, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x0269, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x0267, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x02c9, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x02c7, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x0329, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x0327, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x0389, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x0387, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x03e9, 0xfffffffd, 0x00000001 },
 { SDMA1_HWIP, 0, 0, 0x03e7, 0xfffffff7, 0x00403000 },
 { SDMA1_HWIP, 0, 0, 0x0048, 0x000003ff, 0x000003c0 },
};

static const struct soc15_reg_golden golden_settings_sdma_rv1[] =
{
 { SDMA0_HWIP, 0, 0, 0x001e, 0x0018773f, 0x00000002 },
 { SDMA0_HWIP, 0, 0, 0x001f, 0x0018773f, 0x00000002 }
};

static const struct soc15_reg_golden golden_settings_sdma_rv2[] =
{
 { SDMA0_HWIP, 0, 0, 0x001e, 0x0018773f, 0x00003001 },
 { SDMA0_HWIP, 0, 0, 0x001f, 0x0018773f, 0x00003001 }
};

static const struct soc15_reg_golden golden_settings_sdma_arct[] =
{
 { SDMA0_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA0_HWIP, 0, 0, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA0_HWIP, 0, 0, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA1_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA1_HWIP, 0, 0, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA1_HWIP, 0, 0, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA2_HWIP, 0, 1, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA2_HWIP, 0, 1, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA2_HWIP, 0, 1, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA3_HWIP, 0, 1, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA3_HWIP, 0, 1, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA3_HWIP, 0, 1, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA4_HWIP, 0, 1, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA4_HWIP, 0, 1, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA4_HWIP, 0, 1, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA5_HWIP, 0, 1, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA5_HWIP, 0, 1, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA5_HWIP, 0, 1, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA6_HWIP, 0, 1, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA6_HWIP, 0, 1, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA6_HWIP, 0, 1, 0x001f, 0x0000773f, 0x00004002 },
 { SDMA7_HWIP, 0, 1, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA7_HWIP, 0, 1, 0x001e, 0x0000773f, 0x00004002 },
 { SDMA7_HWIP, 0, 1, 0x001f, 0x0000773f, 0x00004002 }
};

static const struct soc15_reg_golden golden_settings_sdma_4_3[] = {
 { SDMA0_HWIP, 0, 0, 0x001d, 0xfe931f07, 0x02831f07 },
 { SDMA0_HWIP, 0, 0, 0x001b, 0xffffffff, 0x3f000100 },
 { SDMA0_HWIP, 0, 0, 0x001e, 0x0018773f, 0x00000002 },
 { SDMA0_HWIP, 0, 0, 0x001f, 0x0018773f, 0x00000002 },
 { SDMA0_HWIP, 0, 0, 0x0087, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x001a, 0x003fff07, 0x40000051 },
 { SDMA0_HWIP, 0, 0, 0x0147, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x01a7, 0xfffffff7, 0x00403000 },
 { SDMA0_HWIP, 0, 0, 0x0048, 0x000003ff, 0x000003c0 },
};

static u32 sdma_v4_0_get_reg_offset(struct amdgpu_device *adev,
  u32 instance, u32 offset)
{
 switch (instance) {
 case 0:
  return (adev->reg_offset[SDMA0_HWIP][0][0] + offset);
 case 1:
  return (adev->reg_offset[SDMA1_HWIP][0][0] + offset);
 case 2:
  return (adev->reg_offset[SDMA2_HWIP][0][1] + offset);
 case 3:
  return (adev->reg_offset[SDMA3_HWIP][0][1] + offset);
 case 4:
  return (adev->reg_offset[SDMA4_HWIP][0][1] + offset);
 case 5:
  return (adev->reg_offset[SDMA5_HWIP][0][1] + offset);
 case 6:
  return (adev->reg_offset[SDMA6_HWIP][0][1] + offset);
 case 7:
  return (adev->reg_offset[SDMA7_HWIP][0][1] + offset);
 default:
  break;
 }
 return 0;
}

static unsigned sdma_v4_0_seq_to_irq_id(int seq_num)
{
 switch (seq_num) {
 case 0:
  return SOC15_IH_CLIENTID_SDMA0;
 case 1:
  return SOC15_IH_CLIENTID_SDMA1;
 case 2:
  return SOC15_IH_CLIENTID_SDMA2;
 case 3:
  return SOC15_IH_CLIENTID_SDMA3;
 case 4:
  return SOC15_IH_CLIENTID_SDMA4;
 case 5:
  return SOC15_IH_CLIENTID_SDMA5;
 case 6:
  return SOC15_IH_CLIENTID_SDMA6;
 case 7:
  return SOC15_IH_CLIENTID_SDMA7;
 default:
  break;
 }
 return -22;
}

static int sdma_v4_0_irq_id_to_seq(unsigned client_id)
{
 switch (client_id) {
 case SOC15_IH_CLIENTID_SDMA0:
  return 0;
 case SOC15_IH_CLIENTID_SDMA1:
  return 1;
 case SOC15_IH_CLIENTID_SDMA2:
  return 2;
 case SOC15_IH_CLIENTID_SDMA3:
  return 3;
 case SOC15_IH_CLIENTID_SDMA4:
  return 4;
 case SOC15_IH_CLIENTID_SDMA5:
  return 5;
 case SOC15_IH_CLIENTID_SDMA6:
  return 6;
 case SOC15_IH_CLIENTID_SDMA7:
  return 7;
 default:
  break;
 }
 return -22;
}

static void sdma_v4_0_init_golden_registers(struct amdgpu_device *adev)
{
 switch (adev->asic_type) {
 case CHIP_VEGA10:
  soc15_program_register_sequence(adev,
      golden_settings_sdma_4,
      (sizeof(golden_settings_sdma_4) / sizeof((golden_settings_sdma_4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_4)), typeof(&(golden_settings_sdma_4)[0])))); }))));
  soc15_program_register_sequence(adev,
      golden_settings_sdma_vg10,
      (sizeof(golden_settings_sdma_vg10) / sizeof((golden_settings_sdma_vg10)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_vg10)), typeof(&(golden_settings_sdma_vg10)[0])))); }))));
  break;
 case CHIP_VEGA12:
  soc15_program_register_sequence(adev,
      golden_settings_sdma_4,
      (sizeof(golden_settings_sdma_4) / sizeof((golden_settings_sdma_4)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_4)), typeof(&(golden_settings_sdma_4)[0])))); }))));
  soc15_program_register_sequence(adev,
      golden_settings_sdma_vg12,
      (sizeof(golden_settings_sdma_vg12) / sizeof((golden_settings_sdma_vg12)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_vg12)), typeof(&(golden_settings_sdma_vg12)[0])))); }))));
  break;
 case CHIP_VEGA20:
  soc15_program_register_sequence(adev,
      golden_settings_sdma0_4_2_init,
      (sizeof(golden_settings_sdma0_4_2_init) / sizeof((golden_settings_sdma0_4_2_init)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma0_4_2_init)), typeof(&(golden_settings_sdma0_4_2_init)[0])))); }))));
  soc15_program_register_sequence(adev,
      golden_settings_sdma0_4_2,
      (sizeof(golden_settings_sdma0_4_2) / sizeof((golden_settings_sdma0_4_2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma0_4_2)), typeof(&(golden_settings_sdma0_4_2)[0])))); }))));
  soc15_program_register_sequence(adev,
      golden_settings_sdma1_4_2,
      (sizeof(golden_settings_sdma1_4_2) / sizeof((golden_settings_sdma1_4_2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma1_4_2)), typeof(&(golden_settings_sdma1_4_2)[0])))); }))));
  break;
 case CHIP_ARCTURUS:
  soc15_program_register_sequence(adev,
      golden_settings_sdma_arct,
      (sizeof(golden_settings_sdma_arct) / sizeof((golden_settings_sdma_arct)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_arct)), typeof(&(golden_settings_sdma_arct)[0])))); }))));
  break;
 case CHIP_RAVEN:
  soc15_program_register_sequence(adev,
      golden_settings_sdma_4_1,
      (sizeof(golden_settings_sdma_4_1) / sizeof((golden_settings_sdma_4_1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_4_1)), typeof(&(golden_settings_sdma_4_1)[0])))); }))));
  if (adev->rev_id >= 8)
   soc15_program_register_sequence(adev,
       golden_settings_sdma_rv2,
       (sizeof(golden_settings_sdma_rv2) / sizeof((golden_settings_sdma_rv2)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_rv2)), typeof(&(golden_settings_sdma_rv2)[0])))); }))));
  else
   soc15_program_register_sequence(adev,
       golden_settings_sdma_rv1,
       (sizeof(golden_settings_sdma_rv1) / sizeof((golden_settings_sdma_rv1)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_rv1)), typeof(&(golden_settings_sdma_rv1)[0])))); }))));
  break;
 case CHIP_RENOIR:
  soc15_program_register_sequence(adev,
      golden_settings_sdma_4_3,
      (sizeof(golden_settings_sdma_4_3) / sizeof((golden_settings_sdma_4_3)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((golden_settings_sdma_4_3)), typeof(&(golden_settings_sdma_4_3)[0])))); }))));
  break;
 default:
  break;
 }
}

static int sdma_v4_0_init_inst_ctx(struct amdgpu_sdma_instance *sdma_inst)
{
 int err = 0;
 const struct sdma_firmware_header_v1_0 *hdr;

 err = amdgpu_ucode_validate(sdma_inst->fw);
 if (err)
  return err;

 hdr = (const struct sdma_firmware_header_v1_0 *)sdma_inst->fw->data;
 sdma_inst->fw_version = (( __u32)(__le32)(hdr->header.ucode_version));
 sdma_inst->feature_version = (( __u32)(__le32)(hdr->ucode_feature_version));

 if (sdma_inst->feature_version >= 20)
  sdma_inst->burst_nop = true;

 return 0;
}

static void sdma_v4_0_destroy_inst_ctx(struct amdgpu_device *adev)
{
 int i;

 for (i = 0; i < adev->sdma.num_instances; i++) {
  if (adev->sdma.instance[i].fw != ((void *)0))
   release_firmware(adev->sdma.instance[i].fw);



  if (adev->asic_type == CHIP_ARCTURUS)
   break;
 }

 memset((void*)adev->sdma.instance, 0,
  sizeof(struct amdgpu_sdma_instance) * 8);
}
# 442 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static int sdma_v4_0_init_microcode(struct amdgpu_device *adev)
{
 const char *chip_name;
 char fw_name[30];
 int err = 0, i;
 struct amdgpu_firmware_info *info = ((void *)0);
 const struct common_firmware_header *header = ((void *)0);

 drm_dbg(0x01, "\n");

 switch (adev->asic_type) {
 case CHIP_VEGA10:
  chip_name = "vega10";
  break;
 case CHIP_VEGA12:
  chip_name = "vega12";
  break;
 case CHIP_VEGA20:
  chip_name = "vega20";
  break;
 case CHIP_RAVEN:
  if (adev->rev_id >= 8)
   chip_name = "raven2";
  else if (adev->pdev->device == 0x15d8)
   chip_name = "picasso";
  else
   chip_name = "raven";
  break;
 case CHIP_ARCTURUS:
  chip_name = "arcturus";
  break;
 case CHIP_RENOIR:
  chip_name = "renoir";
  break;
 default:
  do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c\"; .popsection; .long 14472b - 14470b; .short 477; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0);
 }

 snprintf(fw_name, sizeof(fw_name), "amdgpu/%s_sdma.bin", chip_name);

 err = request_firmware(&adev->sdma.instance[0].fw, fw_name, adev->dev);
 if (err)
  goto out;

 err = sdma_v4_0_init_inst_ctx(&adev->sdma.instance[0]);
 if (err)
  goto out;

 for (i = 1; i < adev->sdma.num_instances; i++) {
  if (adev->asic_type == CHIP_ARCTURUS) {


   memcpy((void*)&adev->sdma.instance[i],
          (void*)&adev->sdma.instance[0],
          sizeof(struct amdgpu_sdma_instance));
  }
  else {
   snprintf(fw_name, sizeof(fw_name), "amdgpu/%s_sdma%d.bin", chip_name, i);

   err = request_firmware(&adev->sdma.instance[i].fw, fw_name, adev->dev);
   if (err)
    goto out;

   err = sdma_v4_0_init_inst_ctx(&adev->sdma.instance[i]);
   if (err)
    goto out;
  }
 }

 drm_dbg(0x01, "psp_load == '%s'\n", adev->firmware.load_type == AMDGPU_FW_LOAD_PSP ? "true" : "false");


 if (adev->firmware.load_type == AMDGPU_FW_LOAD_PSP) {
  for (i = 0; i < adev->sdma.num_instances; i++) {
   info = &adev->firmware.ucode[AMDGPU_UCODE_ID_SDMA0 + i];
   info->ucode_id = AMDGPU_UCODE_ID_SDMA0 + i;
   info->fw = adev->sdma.instance[i].fw;
   header = (const struct common_firmware_header *)info->fw->data;
   adev->firmware.fw_size +=
    (((((( __u32)(__le32)(header->ucode_size_bytes)))) + ((typeof(((( __u32)(__le32)(header->ucode_size_bytes)))))((((1UL) << 16))) - 1)) & ~((typeof(((( __u32)(__le32)(header->ucode_size_bytes)))))((((1UL) << 16))) - 1));
  }
 }

out:
 if (err) {
  drm_err("sdma_v4_0: Failed to load firmware \"%s\"\n", fw_name);
  sdma_v4_0_destroy_inst_ctx(adev);
 }
 return err;
}
# 540 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static uint64_t sdma_v4_0_ring_get_rptr(struct amdgpu_ring *ring)
{
 u64 *rptr;


 rptr = ((u64 *)&ring->adev->wb.wb[ring->rptr_offs]);

 drm_dbg(0x01, "rptr before shift == 0x%016llx\n", *rptr);
 return ((*rptr) >> 2);
}
# 558 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static uint64_t sdma_v4_0_ring_get_wptr(struct amdgpu_ring *ring)
{
 struct amdgpu_device *adev = ring->adev;
 u64 wptr;

 if (ring->use_doorbell) {

  wptr = ({ union { typeof(*((u64 *)&adev->wb.wb[ring->wptr_offs])) __val; char __c[1]; } __u; if (1) __read_once_size(&(*((u64 *)&adev->wb.wb[ring->wptr_offs])), __u.__c, sizeof(*((u64 *)&adev->wb.wb[ring->wptr_offs]))); else __read_once_size_nocheck(&(*((u64 *)&adev->wb.wb[ring->wptr_offs])), __u.__c, sizeof(*((u64 *)&adev->wb.wb[ring->wptr_offs]))); do { } while (0); __u.__val; });
  drm_dbg(0x01, "wptr/doorbell before shift == 0x%016llx\n", wptr);
 } else {
  wptr = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x0086))), 0);
  wptr = wptr << 32;
  wptr |= amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x0085))), 0);
  drm_dbg(0x01, "wptr before shift [%i] wptr == 0x%016llx\n", ring->me, wptr);

 }

 return wptr >> 2;
}
# 585 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_ring_set_wptr(struct amdgpu_ring *ring)
{
 struct amdgpu_device *adev = ring->adev;

 drm_dbg(0x01, "Setting write pointer\n");
 if (ring->use_doorbell) {
  u64 *wb = (u64 *)&adev->wb.wb[ring->wptr_offs];

  drm_dbg(0x01, "Using doorbell -- " "wptr_offs == 0x%08x " "lower_32_bits(ring->wptr) << 2 == 0x%08x " "upper_32_bits(ring->wptr) << 2 == 0x%08x\n", ring->wptr_offs, ((u32)(ring->wptr << 2)), ((u32)(((ring->wptr << 2) >> 16) >> 16)));







  ({ union { typeof(*wb) __val; char __c[1]; } __u = { .__val = ( typeof(*wb)) ((ring->wptr << 2)) }; __write_once_size(&(*wb), __u.__c, sizeof(*wb)); __u.__val; });
  drm_dbg(0x01, "calling WDOORBELL64(0x%08x, 0x%016llx)\n", ring->doorbell_index, ring->wptr << 2);

  amdgpu_mm_wdoorbell64(adev, (ring->doorbell_index), (ring->wptr << 2));
 } else {
  drm_dbg(0x01, "Not using doorbell -- " "mmSDMA%i_GFX_RB_WPTR == 0x%08x " "mmSDMA%i_GFX_RB_WPTR_HI == 0x%08x\n", ring->me, ((u32)(ring->wptr << 2)), ring->me, ((u32)(((ring->wptr << 2) >> 16) >> 16)));






  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x0085))), (((u32)(ring->wptr << 2))), 0);

  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x0086))), (((u32)(((ring->wptr << 2) >> 16) >> 16))), 0);

 }
}
# 627 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static uint64_t sdma_v4_0_page_ring_get_wptr(struct amdgpu_ring *ring)
{
 struct amdgpu_device *adev = ring->adev;
 u64 wptr;

 if (ring->use_doorbell) {

  wptr = ({ union { typeof(*((u64 *)&adev->wb.wb[ring->wptr_offs])) __val; char __c[1]; } __u; if (1) __read_once_size(&(*((u64 *)&adev->wb.wb[ring->wptr_offs])), __u.__c, sizeof(*((u64 *)&adev->wb.wb[ring->wptr_offs]))); else __read_once_size_nocheck(&(*((u64 *)&adev->wb.wb[ring->wptr_offs])), __u.__c, sizeof(*((u64 *)&adev->wb.wb[ring->wptr_offs]))); do { } while (0); __u.__val; });
 } else {
  wptr = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x00e6))), 0);
  wptr = wptr << 32;
  wptr |= amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x00e5))), 0);
 }

 return wptr >> 2;
}
# 651 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_page_ring_set_wptr(struct amdgpu_ring *ring)
{
 struct amdgpu_device *adev = ring->adev;

 if (ring->use_doorbell) {
  u64 *wb = (u64 *)&adev->wb.wb[ring->wptr_offs];


  ({ union { typeof(*wb) __val; char __c[1]; } __u = { .__val = ( typeof(*wb)) ((ring->wptr << 2)) }; __write_once_size(&(*wb), __u.__c, sizeof(*wb)); __u.__val; });
  amdgpu_mm_wdoorbell64(adev, (ring->doorbell_index), (ring->wptr << 2));
 } else {
  uint64_t wptr = ring->wptr << 2;

  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x00e5))), (((u32)(wptr))), 0);

  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (ring->me), (0x00e6))), (((u32)(((wptr) >> 16) >> 16))), 0);

 }
}

static void sdma_v4_0_ring_insert_nop(struct amdgpu_ring *ring, uint32_t count)
{
 struct amdgpu_sdma_instance *sdma = amdgpu_sdma_get_instance_from_ring(ring);
 int i;

 for (i = 0; i < count; i++)
  if (sdma && sdma->burst_nop && (i == 0))
   amdgpu_ring_write(ring, ring->funcs->nop |
    (((count - 1) & 0x00003FFF) << 16));
  else
   amdgpu_ring_write(ring, ring->funcs->nop);
}
# 692 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_ring_emit_ib(struct amdgpu_ring *ring,
       struct amdgpu_job *job,
       struct amdgpu_ib *ib,
       uint32_t flags)
{
 unsigned vmid = ((job) ? (job)->vmid : 0);


 sdma_v4_0_ring_insert_nop(ring, (10 - (((u32)(ring->wptr)) & 7)) % 8);

 amdgpu_ring_write(ring, (((4) & 0x000000FF) << 0) |
     (((vmid & 0xf) & 0x0000000F) << 16));

 amdgpu_ring_write(ring, ((u32)(ib->gpu_addr)) & 0xffffffe0);
 amdgpu_ring_write(ring, ((u32)(((ib->gpu_addr) >> 16) >> 16)));
 amdgpu_ring_write(ring, ib->length_dw);
 amdgpu_ring_write(ring, 0);
 amdgpu_ring_write(ring, 0);

}

static void sdma_v4_0_wait_reg_mem(struct amdgpu_ring *ring,
       int mem_space, int hdp,
       uint32_t addr0, uint32_t addr1,
       uint32_t ref, uint32_t mask,
       uint32_t inv)
{
 amdgpu_ring_write(ring, (((8) & 0x000000FF) << 0) |
     (((hdp) & 0x00000001) << 26) |
     (((mem_space) & 0x00000001) << 31) |
     (((3) & 0x00000007) << 28));
 if (mem_space) {

  amdgpu_ring_write(ring, addr0);
  amdgpu_ring_write(ring, addr1);
 } else {

  amdgpu_ring_write(ring, addr0 << 2);
  amdgpu_ring_write(ring, addr1 << 2);
 }
 amdgpu_ring_write(ring, ref);
 amdgpu_ring_write(ring, mask);
 amdgpu_ring_write(ring, (((0xfff) & 0x00000FFF) << 16) |
     (((inv) & 0x0000FFFF) << 0));
}
# 745 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_ring_emit_hdp_flush(struct amdgpu_ring *ring)
{
 struct amdgpu_device *adev = ring->adev;
 u32 ref_and_mask = 0;
 const struct nbio_hdp_flush_reg *nbio_hf_reg = adev->nbio_funcs->hdp_flush_reg;

 ref_and_mask = nbio_hf_reg->ref_and_mask_sdma0 << ring->me;

 sdma_v4_0_wait_reg_mem(ring, 0, 1,
          adev->nbio_funcs->get_hdp_flush_done_offset(adev),
          adev->nbio_funcs->get_hdp_flush_req_offset(adev),
          ref_and_mask, ref_and_mask, 10);
}
# 769 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_ring_emit_fence(struct amdgpu_ring *ring, u64 addr, u64 seq,
          unsigned flags)
{
 bool write64bit = flags & (1 << 0);

 amdgpu_ring_write(ring, (((5) & 0x000000FF) << 0));

 do { if (__builtin_expect(!!(addr & 0x3), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c\"; .popsection; .long 14472b - 14470b; .short 776; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
 amdgpu_ring_write(ring, ((u32)(addr)));
 amdgpu_ring_write(ring, ((u32)(((addr) >> 16) >> 16)));
 amdgpu_ring_write(ring, ((u32)(seq)));


 if (write64bit) {
  addr += 4;
  amdgpu_ring_write(ring, (((5) & 0x000000FF) << 0));

  do { if (__builtin_expect(!!(addr & 0x3), 0)) do { asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c\"; .popsection; .long 14472b - 14470b; .short 786; .short 0; .popsection; 14471: brk 0x800");; do { ; __builtin_unreachable(); } while (0); } while (0); } while (0);
  amdgpu_ring_write(ring, ((u32)(addr)));
  amdgpu_ring_write(ring, ((u32)(((addr) >> 16) >> 16)));
  amdgpu_ring_write(ring, ((u32)(((seq) >> 16) >> 16)));
 }


 amdgpu_ring_write(ring, (((6) & 0x000000FF) << 0));
 amdgpu_ring_write(ring, (((0) & 0x0FFFFFFF) << 0));
}
# 805 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_gfx_stop(struct amdgpu_device *adev)
{
 struct amdgpu_ring *sdma[8];
 u32 rb_cntl, ib_cntl;
 int i, unset = 0;

 for (i = 0; i < adev->sdma.num_instances; i++) {
  sdma[i] = &adev->sdma.instance[i].ring;

  if ((adev->mman.buffer_funcs_ring == sdma[i]) && unset != 1) {
   amdgpu_ttm_set_buffer_funcs_status(adev, false);
   unset = 1;
  }

  rb_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0080))), 0);
  rb_cntl = (((rb_cntl) & ~0x00000001L) | (0x00000001L & ((0) << 0x0)));
  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0080))), (rb_cntl), 0);
  ib_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x008a))), 0);
  ib_cntl = (((ib_cntl) & ~0x00000001L) | (0x00000001L & ((0) << 0x0)));
  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x008a))), (ib_cntl), 0);

  sdma[i]->sched.ready = false;
 }
}
# 837 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_rlc_stop(struct amdgpu_device *adev)
{

}
# 849 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_page_stop(struct amdgpu_device *adev)
{
 struct amdgpu_ring *sdma[8];
 u32 rb_cntl, ib_cntl;
 int i;
 bool unset = false;

 for (i = 0; i < adev->sdma.num_instances; i++) {
  sdma[i] = &adev->sdma.instance[i].page;

  if ((adev->mman.buffer_funcs_ring == sdma[i]) &&
   (unset == false)) {
   amdgpu_ttm_set_buffer_funcs_status(adev, false);
   unset = true;
  }

  rb_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e0))), 0);
  rb_cntl = (((rb_cntl) & ~0x00000001L) | (0x00000001L & ((0) << 0x0)));

  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e0))), (rb_cntl), 0);
  ib_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00ea))), 0);
  ib_cntl = (((ib_cntl) & ~0x00000001L) | (0x00000001L & ((0) << 0x0)));

  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00ea))), (ib_cntl), 0);

  sdma[i]->sched.ready = false;
 }
}
# 886 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_ctx_switch_enable(struct amdgpu_device *adev, bool enable)
{
 u32 f32_cntl, phase_quantum = 0;
 int i;

 if (amdgpu_sdma_phase_quantum) {
  unsigned value = amdgpu_sdma_phase_quantum;
  unsigned unit = 0;

  while (value > (0x00FFFF00L >>
    0x8)) {
   value = (value + 1) >> 1;
   unit++;
  }
  if (unit > (0x0000000FL >>
       0x0)) {
   value = (0x00FFFF00L >>
     0x8);
   unit = (0x0000000FL >>
    0x0);
   ({ static bool __attribute__((__section__(".data.once"))) __warned; int __ret_warn_once = !!(1); if (__builtin_expect(!!(__ret_warn_once && !__warned), 0)) { __warned = true; ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { __warn_printk("clamping sdma_phase_quantum to %uK clock cycles\n", value << unit); asm volatile (".pushsection __bug_table,\"aw\"; .align 2; 14470: .long 14471f - 14470b; .pushsection .rodata.str,\"aMS\",@progbits,1; 14472: .string \"../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c\"; .popsection; .long 14472b - 14470b; .short 908; .short (1 << 0)|(((9) << 8)); .popsection; 14471: brk 0x800");; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }); } __builtin_expect(!!(__ret_warn_once), 0); });


  }
  phase_quantum =
   value << 0x8 |
   unit << 0x0;
 }

 for (i = 0; i < adev->sdma.num_instances; i++) {
  f32_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001c))), 0);
  f32_cntl = (((f32_cntl) & ~0x00040000L) | (0x00040000L & ((enable ? 1 : 0) << 0x12)));

  if (enable && amdgpu_sdma_phase_quantum) {
   amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x002c))), (phase_quantum), 0);
   amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x002d))), (phase_quantum), 0);
   amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x004f))), (phase_quantum), 0);
  }
  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001c))), (f32_cntl), 0);
 }

}
# 937 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_enable(struct amdgpu_device *adev, bool enable)
{
 u32 f32_cntl;
 int i;

 if (enable == false) {
  sdma_v4_0_gfx_stop(adev);
  sdma_v4_0_rlc_stop(adev);
  if (adev->sdma.has_page_queue)
   sdma_v4_0_page_stop(adev);
 }

 for (i = 0; i < adev->sdma.num_instances; i++) {
  f32_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x002a))), 0);
  f32_cntl = (((f32_cntl) & ~0x00000001L) | (0x00000001L & ((enable ? 0 : 1) << 0x0)));
  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x002a))), (f32_cntl), 0);
 }
}




static uint32_t sdma_v4_0_rb_cntl(struct amdgpu_ring *ring, uint32_t rb_cntl)
{

 uint32_t rb_bufsz = ( __builtin_constant_p(ring->ring_size / 4) ? ( ((ring->ring_size / 4) == 0 || (ring->ring_size / 4) == 1) ? 0 : ( __builtin_constant_p((ring->ring_size / 4) - 1) ? ( __builtin_constant_p((ring->ring_size / 4) - 1) ? ( ((ring->ring_size / 4) - 1) < 2 ? 0 : ((ring->ring_size / 4) - 1) & (1ULL << 63) ? 63 : ((ring->ring_size / 4) - 1) & (1ULL << 62) ? 62 : ((ring->ring_size / 4) - 1) & (1ULL << 61) ? 61 : ((ring->ring_size / 4) - 1) & (1ULL << 60) ? 60 : ((ring->ring_size / 4) - 1) & (1ULL << 59) ? 59 : ((ring->ring_size / 4) - 1) & (1ULL << 58) ? 58 : ((ring->ring_size / 4) - 1) & (1ULL << 57) ? 57 : ((ring->ring_size / 4) - 1) & (1ULL << 56) ? 56 : ((ring->ring_size / 4) - 1) & (1ULL << 55) ? 55 : ((ring->ring_size / 4) - 1) & (1ULL << 54) ? 54 : ((ring->ring_size / 4) - 1) & (1ULL << 53) ? 53 : ((ring->ring_size / 4) - 1) & (1ULL << 52) ? 52 : ((ring->ring_size / 4) - 1) & (1ULL << 51) ? 51 : ((ring->ring_size / 4) - 1) & (1ULL << 50) ? 50 : ((ring->ring_size / 4) - 1) & (1ULL << 49) ? 49 : ((ring->ring_size / 4) - 1) & (1ULL << 48) ? 48 : ((ring->ring_size / 4) - 1) & (1ULL << 47) ? 47 : ((ring->ring_size / 4) - 1) & (1ULL << 46) ? 46 : ((ring->ring_size / 4) - 1) & (1ULL << 45) ? 45 : ((ring->ring_size / 4) - 1) & (1ULL << 44) ? 44 : ((ring->ring_size / 4) - 1) & (1ULL << 43) ? 43 : ((ring->ring_size / 4) - 1) & (1ULL << 42) ? 42 : ((ring->ring_size / 4) - 1) & (1ULL << 41) ? 41 : ((ring->ring_size / 4) - 1) & (1ULL << 40) ? 40 : ((ring->ring_size / 4) - 1) & (1ULL << 39) ? 39 : ((ring->ring_size / 4) - 1) & (1ULL << 38) ? 38 : ((ring->ring_size / 4) - 1) & (1ULL << 37) ? 37 : ((ring->ring_size / 4) - 1) & (1ULL << 36) ? 36 : ((ring->ring_size / 4) - 1) & (1ULL << 35) ? 35 : ((ring->ring_size / 4) - 1) & (1ULL << 34) ? 34 : ((ring->ring_size / 4) - 1) & (1ULL << 33) ? 33 : ((ring->ring_size / 4) - 1) & (1ULL << 32) ? 32 : ((ring->ring_size / 4) - 1) & (1ULL << 31) ? 31 : ((ring->ring_size / 4) - 1) & (1ULL << 30) ? 30 : ((ring->ring_size / 4) - 1) & (1ULL << 29) ? 29 : ((ring->ring_size / 4) - 1) & (1ULL << 28) ? 28 : ((ring->ring_size / 4) - 1) & (1ULL << 27) ? 27 : ((ring->ring_size / 4) - 1) & (1ULL << 26) ? 26 : ((ring->ring_size / 4) - 1) & (1ULL << 25) ? 25 : ((ring->ring_size / 4) - 1) & (1ULL << 24) ? 24 : ((ring->ring_size / 4) - 1) & (1ULL << 23) ? 23 : ((ring->ring_size / 4) - 1) & (1ULL << 22) ? 22 : ((ring->ring_size / 4) - 1) & (1ULL << 21) ? 21 : ((ring->ring_size / 4) - 1) & (1ULL << 20) ? 20 : ((ring->ring_size / 4) - 1) & (1ULL << 19) ? 19 : ((ring->ring_size / 4) - 1) & (1ULL << 18) ? 18 : ((ring->ring_size / 4) - 1) & (1ULL << 17) ? 17 : ((ring->ring_size / 4) - 1) & (1ULL << 16) ? 16 : ((ring->ring_size / 4) - 1) & (1ULL << 15) ? 15 : ((ring->ring_size / 4) - 1) & (1ULL << 14) ? 14 : ((ring->ring_size / 4) - 1) & (1ULL << 13) ? 13 : ((ring->ring_size / 4) - 1) & (1ULL << 12) ? 12 : ((ring->ring_size / 4) - 1) & (1ULL << 11) ? 11 : ((ring->ring_size / 4) - 1) & (1ULL << 10) ? 10 : ((ring->ring_size / 4) - 1) & (1ULL << 9) ? 9 : ((ring->ring_size / 4) - 1) & (1ULL << 8) ? 8 : ((ring->ring_size / 4) - 1) & (1ULL << 7) ? 7 : ((ring->ring_size / 4) - 1) & (1ULL << 6) ? 6 : ((ring->ring_size / 4) - 1) & (1ULL << 5) ? 5 : ((ring->ring_size / 4) - 1) & (1ULL << 4) ? 4 : ((ring->ring_size / 4) - 1) & (1ULL << 3) ? 3 : ((ring->ring_size / 4) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((ring->ring_size / 4) - 1) <= 4) ? __ilog2_u32((ring->ring_size / 4) - 1) : __ilog2_u64((ring->ring_size / 4) - 1) ) + 1) : __order_base_2(ring->ring_size / 4) );

 rb_cntl = (((rb_cntl) & ~0x0000003EL) | (0x0000003EL & ((rb_bufsz) << 0x1)));





 return rb_cntl;
}
# 982 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_gfx_resume(struct amdgpu_device *adev, unsigned int i)
{
 struct amdgpu_ring *ring = &adev->sdma.instance[i].ring;
 u32 rb_cntl, ib_cntl, wptr_poll_cntl;
 u32 wb_offset;
 u32 doorbell;
 u32 doorbell_offset;
 u64 wptr_gpu_addr;

 wb_offset = (ring->rptr_offs * 4);

 rb_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0080))), 0);
 rb_cntl = sdma_v4_0_rb_cntl(ring, rb_cntl);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0080))), (rb_cntl), 0);


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0083))), (0), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0084))), (0), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0085))), (0), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0086))), (0), 0);


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0088))), (((u32)(((adev->wb.gpu_addr + wb_offset) >> 16) >> 16)) & 0xFFFFFFFF), 0);

 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0089))), (((u32)(adev->wb.gpu_addr + wb_offset)) & 0xFFFFFFFC), 0);


 rb_cntl = (((rb_cntl) & ~0x00001000L) | (0x00001000L & ((1) << 0xc)));


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0081))), (ring->gpu_addr >> 8), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0082))), (ring->gpu_addr >> 40), 0);

 ring->wptr = 0;


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00b5))), (1), 0);

 doorbell = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0092))), 0);
 doorbell_offset = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00ab))), 0);

 doorbell = (((doorbell) & ~0x10000000L) | (0x10000000L & ((ring->use_doorbell) << 0x1c)));

 doorbell_offset = (((doorbell_offset) & ~0x0FFFFFFCL) | (0x0FFFFFFCL & ((ring->doorbell_index) << 0x2)));


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0092))), (doorbell), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00ab))), (doorbell_offset), 0);

 sdma_v4_0_ring_set_wptr(ring);


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00b5))), (0), 0);


 wptr_gpu_addr = adev->wb.gpu_addr + (ring->wptr_offs * 4);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00b3))), (((u32)(wptr_gpu_addr))), 0);

 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00b2))), (((u32)(((wptr_gpu_addr) >> 16) >> 16))), 0);

 wptr_poll_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0087))), 0);
 wptr_poll_cntl = (((wptr_poll_cntl) & ~0x00000004L) | (0x00000004L & ((((adev)->virt.caps & (1 << 2))? 1 : 0) << 0x2)));


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0087))), (wptr_poll_cntl), 0);


 rb_cntl = (((rb_cntl) & ~0x00000001L) | (0x00000001L & ((1) << 0x0)));
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0080))), (rb_cntl), 0);

 ib_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x008a))), 0);
 ib_cntl = (((ib_cntl) & ~0x00000001L) | (0x00000001L & ((1) << 0x0)));




 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x008a))), (ib_cntl), 0);

 ring->sched.ready = true;
}
# 1072 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_page_resume(struct amdgpu_device *adev, unsigned int i)
{
 struct amdgpu_ring *ring = &adev->sdma.instance[i].page;
 u32 rb_cntl, ib_cntl, wptr_poll_cntl;
 u32 wb_offset;
 u32 doorbell;
 u32 doorbell_offset;
 u64 wptr_gpu_addr;

 wb_offset = (ring->rptr_offs * 4);

 rb_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e0))), 0);
 rb_cntl = sdma_v4_0_rb_cntl(ring, rb_cntl);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e0))), (rb_cntl), 0);


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e3))), (0), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e4))), (0), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e5))), (0), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e6))), (0), 0);


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e8))), (((u32)(((adev->wb.gpu_addr + wb_offset) >> 16) >> 16)) & 0xFFFFFFFF), 0);

 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e9))), (((u32)(adev->wb.gpu_addr + wb_offset)) & 0xFFFFFFFC), 0);


 rb_cntl = (((rb_cntl) & ~0x00001000L) | (0x00001000L & ((1) << 0xc)));


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e1))), (ring->gpu_addr >> 8), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e2))), (ring->gpu_addr >> 40), 0);

 ring->wptr = 0;


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0115))), (1), 0);

 doorbell = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00f2))), 0);
 doorbell_offset = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x010b))), 0);

 doorbell = (((doorbell) & ~0x10000000L) | (0x10000000L & ((ring->use_doorbell) << 0x1c)));

 doorbell_offset = (((doorbell_offset) & ~0x0FFFFFFCL) | (0x0FFFFFFCL & ((ring->doorbell_index) << 0x2)));


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00f2))), (doorbell), 0);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x010b))), (doorbell_offset), 0);


 sdma_v4_0_page_ring_set_wptr(ring);


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0115))), (0), 0);


 wptr_gpu_addr = adev->wb.gpu_addr + (ring->wptr_offs * 4);
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0113))), (((u32)(wptr_gpu_addr))), 0);

 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0112))), (((u32)(((wptr_gpu_addr) >> 16) >> 16))), 0);

 wptr_poll_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e7))), 0);
 wptr_poll_cntl = (((wptr_poll_cntl) & ~0x00000004L) | (0x00000004L & ((((adev)->virt.caps & (1 << 2))? 1 : 0) << 0x2)));


 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e7))), (wptr_poll_cntl), 0);


 rb_cntl = (((rb_cntl) & ~0x00000001L) | (0x00000001L & ((1) << 0x0)));
 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00e0))), (rb_cntl), 0);

 ib_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00ea))), 0);
 ib_cntl = (((ib_cntl) & ~0x00000001L) | (0x00000001L & ((1) << 0x0)));




 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x00ea))), (ib_cntl), 0);

 ring->sched.ready = true;
}

static void
sdma_v4_1_update_power_gating(struct amdgpu_device *adev, bool enable)
{
 uint32_t def, data;

 if (enable && (adev->pg_flags & (1 << 8))) {

  def = data = amdgpu_mm_rreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001c)), 0);
  data |= 0x10000000L;

  if (data != def)
   amdgpu_mm_wreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001c)), (data), 0);
 } else {

  def = data = amdgpu_mm_rreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001c)), 0);
  data &= ~0x10000000L;
  if (data != def)
   amdgpu_mm_wreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001c)), (data), 0);
 }
}

static void sdma_v4_1_init_power_gating(struct amdgpu_device *adev)
{
 uint32_t def, data;


 def = data = amdgpu_mm_rreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001a)), 0);
 data |= 0x00000001L;
 if (data != def)
  amdgpu_mm_wreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001a)), (data), 0);


 def = data = amdgpu_mm_rreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001c)), 0);
 data |= 0x10000000L;
 if (data != def)
  amdgpu_mm_wreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001c)), (data), 0);


 def = data = amdgpu_mm_rreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001a)), 0);
 data &= ~0x000000F8L;
 data |= (0x4003c050 & 0x000000F8L);

 data &= ~0xFC000000L;
 data |= (0x4003c050 & 0xFC000000L);
 if(data != def)
  amdgpu_mm_wreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001a)), (data), 0);
}

static void sdma_v4_0_init_pg(struct amdgpu_device *adev)
{
 if (!(adev->pg_flags & (1 << 8)))
  return;

 switch (adev->asic_type) {
 case CHIP_RAVEN:
 case CHIP_RENOIR:
  sdma_v4_1_init_power_gating(adev);
  sdma_v4_1_update_power_gating(adev, true);
  break;
 default:
  break;
 }
}
# 1226 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static int sdma_v4_0_rlc_resume(struct amdgpu_device *adev)
{
 sdma_v4_0_init_pg(adev);

 return 0;
}
# 1241 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static int sdma_v4_0_load_microcode(struct amdgpu_device *adev)
{
 const struct sdma_firmware_header_v1_0 *hdr;
 const __le32 *fw_data;
 u32 fw_size;
 int i, j;


 sdma_v4_0_enable(adev, false);

 for (i = 0; i < adev->sdma.num_instances; i++) {
  if (!adev->sdma.instance[i].fw)
   return -22;

  hdr = (const struct sdma_firmware_header_v1_0 *)adev->sdma.instance[i].fw->data;
  amdgpu_ucode_print_sdma_hdr(&hdr->header);
  fw_size = (( __u32)(__le32)(hdr->header.ucode_size_bytes)) / 4;

  fw_data = (const __le32 *)
   (adev->sdma.instance[i].fw->data +
    (( __u32)(__le32)(hdr->header.ucode_array_offset_bytes)));

  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0000))), (0), 0);

  for (j = 0; j < fw_size; j++)
   amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0001))), (__le32_to_cpup(fw_data++)), 0);


  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0000))), (adev->sdma.instance[i].fw_version), 0);

 }

 return 0;
}
# 1284 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static int sdma_v4_0_start(struct amdgpu_device *adev)
{
 struct amdgpu_ring *ring;
 int i, r = 0;

 if (((adev)->virt.caps & (1 << 2))) {
  sdma_v4_0_ctx_switch_enable(adev, false);
  sdma_v4_0_enable(adev, false);
 } else {

  if (adev->firmware.load_type != AMDGPU_FW_LOAD_PSP) {
   r = sdma_v4_0_load_microcode(adev);
   if (r)
    return r;
  }


  sdma_v4_0_enable(adev, true);

  sdma_v4_0_ctx_switch_enable(adev, true);
 }


 for (i = 0; i < adev->sdma.num_instances; i++) {
  uint32_t temp;

  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0021))), (0), 0);
  sdma_v4_0_gfx_resume(adev, i);
  if (adev->sdma.has_page_queue)
   sdma_v4_0_page_resume(adev, i);


  temp = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001c))), 0);
  temp = (((temp) & ~0x00000002L) | (0x00000002L & ((1) << 0x1)));
  amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001c))), (temp), 0);

  if (!((adev)->virt.caps & (1 << 2))) {

   temp = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x002a))), 0);
   temp = (((temp) & ~0x00000001L) | (0x00000001L & ((0) << 0x0)));
   amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x002a))), (temp), 0);
  }
 }

 if (((adev)->virt.caps & (1 << 2))) {
  sdma_v4_0_ctx_switch_enable(adev, true);
  sdma_v4_0_enable(adev, true);
 } else {
  r = sdma_v4_0_rlc_resume(adev);
  if (r)
   return r;
 }

 for (i = 0; i < adev->sdma.num_instances; i++) {
  ring = &adev->sdma.instance[i].ring;

  r = amdgpu_ring_test_helper(ring);
  if (r)
   return r;

  if (adev->sdma.has_page_queue) {
   struct amdgpu_ring *page = &adev->sdma.instance[i].page;

   r = amdgpu_ring_test_helper(page);
   if (r)
    return r;

   if (adev->mman.buffer_funcs_ring == page)
    amdgpu_ttm_set_buffer_funcs_status(adev, true);
  }

  if (adev->mman.buffer_funcs_ring == ring)
   amdgpu_ttm_set_buffer_funcs_status(adev, true);
 }

 return r;
}
# 1371 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static int sdma_v4_0_ring_test_ring(struct amdgpu_ring *ring)
{
 struct amdgpu_device *adev = ring->adev;
 unsigned i;
 unsigned index;
 int r;
 u32 tmp;
 u64 gpu_addr;

 r = amdgpu_device_wb_get(adev, &index);
 if (r)
  return r;

 gpu_addr = adev->wb.gpu_addr + (index * 4);
 tmp = 0xCAFEDEAD;
 adev->wb.wb[index] = (( __le32)(__u32)(tmp));

 r = amdgpu_ring_alloc(ring, 5);
 if (r)
  goto error_free_wb;

 amdgpu_ring_write(ring, (((2) & 0x000000FF) << 0) |
     (((0) & 0x000000FF) << 8));
 amdgpu_ring_write(ring, ((u32)(gpu_addr)));
 amdgpu_ring_write(ring, ((u32)(((gpu_addr) >> 16) >> 16)));
 amdgpu_ring_write(ring, (((0) & 0x000FFFFF) << 0));
 amdgpu_ring_write(ring, 0xDEADBEEF);
 amdgpu_ring_commit(ring);

 for (i = 0; i < adev->usec_timeout; i++) {
  tmp = (( __u32)(__le32)(adev->wb.wb[index]));
  if (tmp == 0xDEADBEEF)
   break;
  ({ if (__builtin_constant_p(1)) { if ((1) / 20000 >= 1) __bad_udelay(); else __const_udelay((1) * 0x10c7ul); } else { __udelay(1); } });
 }

 if (i >= adev->usec_timeout)
  r = -110;

error_free_wb:
 amdgpu_device_wb_free(adev, index);
 return r;
}
# 1423 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static int sdma_v4_0_ring_test_ib(struct amdgpu_ring *ring, long timeout)
{
 struct amdgpu_device *adev = ring->adev;
 struct amdgpu_ib ib;
 struct dma_fence *f = ((void *)0);
 unsigned index;
 long r;
 u32 tmp = 0;
 u64 gpu_addr;

 r = amdgpu_device_wb_get(adev, &index);
 if (r)
  return r;

 gpu_addr = adev->wb.gpu_addr + (index * 4);
 tmp = 0xCAFEDEAD;
 adev->wb.wb[index] = (( __le32)(__u32)(tmp));
 memset(&ib, 0, sizeof(ib));
 r = amdgpu_ib_get(adev, ((void *)0), 256, &ib);
 if (r)
  goto err0;

 ib.ptr[0] = (((2) & 0x000000FF) << 0) |
  (((0) & 0x000000FF) << 8);
 ib.ptr[1] = ((u32)(gpu_addr));
 ib.ptr[2] = ((u32)(((gpu_addr) >> 16) >> 16));
 ib.ptr[3] = (((0) & 0x000FFFFF) << 0);
 ib.ptr[4] = 0xDEADBEEF;
 ib.ptr[5] = (((0) & 0x000000FF) << 0);
 ib.ptr[6] = (((0) & 0x000000FF) << 0);
 ib.ptr[7] = (((0) & 0x000000FF) << 0);
 ib.length_dw = 8;

 r = amdgpu_ib_schedule(ring, 1, &ib, ((void *)0), &f);
 if (r)
  goto err1;

 r = dma_fence_wait_timeout(f, false, timeout);
 if (r == 0) {
  r = -110;
  goto err1;
 } else if (r < 0) {
  goto err1;
 }
 tmp = (( __u32)(__le32)(adev->wb.wb[index]));
 if (tmp == 0xDEADBEEF)
  r = 0;
 else
  r = -22;

err1:
 amdgpu_ib_free(adev, &ib, ((void *)0));
 dma_fence_put(f);
err0:
 amdgpu_device_wb_free(adev, index);
 return r;
}
# 1492 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_vm_copy_pte(struct amdgpu_ib *ib,
      uint64_t pe, uint64_t src,
      unsigned count)
{
 unsigned bytes = count * 8;

 ib->ptr[ib->length_dw++] = (((1) & 0x000000FF) << 0) |
  (((0) & 0x000000FF) << 8);
 ib->ptr[ib->length_dw++] = bytes - 1;
 ib->ptr[ib->length_dw++] = 0;
 ib->ptr[ib->length_dw++] = ((u32)(src));
 ib->ptr[ib->length_dw++] = ((u32)(((src) >> 16) >> 16));
 ib->ptr[ib->length_dw++] = ((u32)(pe));
 ib->ptr[ib->length_dw++] = ((u32)(((pe) >> 16) >> 16));

}
# 1521 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_vm_write_pte(struct amdgpu_ib *ib, uint64_t pe,
       uint64_t value, unsigned count,
       uint32_t incr)
{
 unsigned ndw = count * 2;

 ib->ptr[ib->length_dw++] = (((2) & 0x000000FF) << 0) |
  (((0) & 0x000000FF) << 8);
 ib->ptr[ib->length_dw++] = ((u32)(pe));
 ib->ptr[ib->length_dw++] = ((u32)(((pe) >> 16) >> 16));
 ib->ptr[ib->length_dw++] = ndw - 1;
 for (; ndw > 0; ndw -= 2) {
  ib->ptr[ib->length_dw++] = ((u32)(value));
  ib->ptr[ib->length_dw++] = ((u32)(((value) >> 16) >> 16));
  value += incr;
 }
}
# 1551 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_vm_set_pte_pde(struct amdgpu_ib *ib,
         uint64_t pe,
         uint64_t addr, unsigned count,
         uint32_t incr, uint64_t flags)
{

 ib->ptr[ib->length_dw++] = (((12) & 0x000000FF) << 0);
 ib->ptr[ib->length_dw++] = ((u32)(pe));
 ib->ptr[ib->length_dw++] = ((u32)(((pe) >> 16) >> 16));
 ib->ptr[ib->length_dw++] = ((u32)(flags));
 ib->ptr[ib->length_dw++] = ((u32)(((flags) >> 16) >> 16));
 ib->ptr[ib->length_dw++] = ((u32)(addr));
 ib->ptr[ib->length_dw++] = ((u32)(((addr) >> 16) >> 16));
 ib->ptr[ib->length_dw++] = incr;
 ib->ptr[ib->length_dw++] = 0;
 ib->ptr[ib->length_dw++] = count - 1;
}







static void sdma_v4_0_ring_pad_ib(struct amdgpu_ring *ring, struct amdgpu_ib *ib)
{
 struct amdgpu_sdma_instance *sdma = amdgpu_sdma_get_instance_from_ring(ring);
 u32 pad_count;
 int i;

 pad_count = (8 - (ib->length_dw & 0x7)) % 8;
 for (i = 0; i < pad_count; i++)
  if (sdma && sdma->burst_nop && (i == 0))
   ib->ptr[ib->length_dw++] =
    (((0) & 0x000000FF) << 0) |
    (((pad_count - 1) & 0x00003FFF) << 16);
  else
   ib->ptr[ib->length_dw++] =
    (((0) & 0x000000FF) << 0);
}
# 1600 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_ring_emit_pipeline_sync(struct amdgpu_ring *ring)
{
 uint32_t seq = ring->fence_drv.sync_seq;
 uint64_t addr = ring->fence_drv.gpu_addr;


 sdma_v4_0_wait_reg_mem(ring, 1, 0,
          addr & 0xfffffffc,
          ((u32)(((addr) >> 16) >> 16)) & 0xffffffff,
          seq, 0xffffffff, 4);
}
# 1622 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_ring_emit_vm_flush(struct amdgpu_ring *ring,
      unsigned vmid, uint64_t pd_addr)
{
 (ring)->adev->gmc.gmc_funcs->emit_flush_gpu_tlb((ring), (vmid), (pd_addr));
}

static void sdma_v4_0_ring_emit_wreg(struct amdgpu_ring *ring,
         uint32_t reg, uint32_t val)
{
 amdgpu_ring_write(ring, (((14) & 0x000000FF) << 0) |
     (((0xf) & 0x0000000F) << 28));
 amdgpu_ring_write(ring, reg);
 amdgpu_ring_write(ring, val);
}

static void sdma_v4_0_ring_emit_reg_wait(struct amdgpu_ring *ring, uint32_t reg,
      uint32_t val, uint32_t mask)
{
 sdma_v4_0_wait_reg_mem(ring, 0, 0, reg, 0, val, mask, 10);
}

static bool sdma_v4_0_fw_support_paging_queue(struct amdgpu_device *adev)
{
 uint fw_version = adev->sdma.instance[0].fw_version;

 switch (adev->asic_type) {
 case CHIP_VEGA10:
  return fw_version >= 430;
 case CHIP_VEGA12:

  return false;
 case CHIP_VEGA20:
  return fw_version >= 123;
 default:
  return false;
 }
}

static int sdma_v4_0_early_init(void *handle)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;
 int r;

 if (adev->asic_type == CHIP_RAVEN || adev->asic_type == CHIP_RENOIR)
  adev->sdma.num_instances = 1;
 else if (adev->asic_type == CHIP_ARCTURUS)
  adev->sdma.num_instances = 8;
 else
  adev->sdma.num_instances = 2;

 r = sdma_v4_0_init_microcode(adev);
 if (r) {
  drm_err("Failed to load sdma firmware!\n");
  return r;
 }


 if ((adev->asic_type == CHIP_VEGA10) && (((adev))->virt.caps & (1 << 2)))
  adev->sdma.has_page_queue = false;
 else if (sdma_v4_0_fw_support_paging_queue(adev))
  adev->sdma.has_page_queue = true;

 sdma_v4_0_set_ring_funcs(adev);
 sdma_v4_0_set_buffer_funcs(adev);
 sdma_v4_0_set_vm_pte_funcs(adev);
 sdma_v4_0_set_irq_funcs(adev);

 return 0;
}

static int sdma_v4_0_process_ras_data_cb(struct amdgpu_device *adev,
  struct ras_err_data *err_data,
  struct amdgpu_iv_entry *entry);

static int sdma_v4_0_late_init(void *handle)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;
 struct ras_common_if **ras_if = &adev->sdma.ras_if;
 struct ras_ih_if ih_info = {
  .cb = sdma_v4_0_process_ras_data_cb,
 };
 struct ras_fs_if fs_info = {
  .sysfs_name = "sdma_err_count",
  .debugfs_name = "sdma_err_inject",
 };
 struct ras_common_if ras_block = {
  .block = AMDGPU_RAS_BLOCK__SDMA,
  .type = AMDGPU_RAS_ERROR__MULTI_UNCORRECTABLE,
  .sub_block_index = 0,
  .name = "sdma",
 };
 int r, i;

 if (!amdgpu_ras_is_supported(adev, AMDGPU_RAS_BLOCK__SDMA)) {
  amdgpu_ras_feature_enable_on_boot(adev, &ras_block, 0);
  return 0;
 }


 if (*ras_if) {



  ih_info.head = **ras_if;
  r = amdgpu_ras_feature_enable_on_boot(adev, *ras_if, 1);
  if (r) {
   if (r == -11) {

    amdgpu_ras_request_reset_on_boot(adev,
      AMDGPU_RAS_BLOCK__SDMA);
    return 0;
   }

   goto irq;
  }

  goto resume;
 }

 *ras_if = kmalloc(sizeof(**ras_if), ((( gfp_t)(0x400u|0x800u)) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
 if (!*ras_if)
  return -12;

 **ras_if = ras_block;

 r = amdgpu_ras_feature_enable_on_boot(adev, *ras_if, 1);
 if (r) {
  if (r == -11) {
   amdgpu_ras_request_reset_on_boot(adev,
     AMDGPU_RAS_BLOCK__SDMA);
   r = 0;
  }
  goto feature;
 }

 ih_info.head = **ras_if;
 fs_info.head = **ras_if;

 r = amdgpu_ras_interrupt_add_handler(adev, &ih_info);
 if (r)
  goto interrupt;

 amdgpu_ras_debugfs_create(adev, &fs_info);

 r = amdgpu_ras_sysfs_create(adev, &fs_info);
 if (r)
  goto sysfs;
resume:
 for (i = 0; i < adev->sdma.num_instances; i++) {
  r = amdgpu_irq_get(adev, &adev->sdma.ecc_irq,
       AMDGPU_SDMA_IRQ_INSTANCE0 + i);
  if (r)
   goto irq;
 }

 return 0;
irq:
 amdgpu_ras_sysfs_remove(adev, *ras_if);
sysfs:
 amdgpu_ras_debugfs_remove(adev, *ras_if);
 amdgpu_ras_interrupt_remove_handler(adev, &ih_info);
interrupt:
 amdgpu_ras_feature_enable(adev, *ras_if, 0);
feature:
 kfree(*ras_if);
 *ras_if = ((void *)0);
 return r;
}

static int sdma_v4_0_sw_init(void *handle)
{
 struct amdgpu_ring *ring;
 int r, i;
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;


 for (i = 0; i < adev->sdma.num_instances; i++) {
  r = amdgpu_irq_add_id(adev, sdma_v4_0_seq_to_irq_id(i),
          224,
          &adev->sdma.trap_irq);
  if (r)
   return r;
 }


 for (i = 0; i < adev->sdma.num_instances; i++) {
  r = amdgpu_irq_add_id(adev, sdma_v4_0_seq_to_irq_id(i),
          228,
          &adev->sdma.ecc_irq);
  if (r)
   return r;
 }

 for (i = 0; i < adev->sdma.num_instances; i++) {
  ring = &adev->sdma.instance[i].ring;
  ring->ring_obj = ((void *)0);
  ring->use_doorbell = true;

  printk("\001" "6" "[" "drm" "] " "use_doorbell being set to: [%s]\n", ring->use_doorbell?"true":"false");



  ring->doorbell_index = adev->doorbell_index.sdma_engine[i] << 1;

  sprintf(ring->name, "sdma%d", i);
  r = amdgpu_ring_init(adev, ring, 1024, &adev->sdma.trap_irq,
         AMDGPU_SDMA_IRQ_INSTANCE0 + i);
  if (r)
   return r;

  if (adev->sdma.has_page_queue) {
   ring = &adev->sdma.instance[i].page;
   ring->ring_obj = ((void *)0);
   ring->use_doorbell = true;




   ring->doorbell_index = adev->doorbell_index.sdma_engine[i] << 1;
   ring->doorbell_index += 0x400;

   sprintf(ring->name, "page%d", i);
   r = amdgpu_ring_init(adev, ring, 1024,
          &adev->sdma.trap_irq,
          AMDGPU_SDMA_IRQ_INSTANCE0 + i);
   if (r)
    return r;
  }
 }

 return r;
}

static int sdma_v4_0_sw_fini(void *handle)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;
 int i;

 if (amdgpu_ras_is_supported(adev, AMDGPU_RAS_BLOCK__SDMA) &&
   adev->sdma.ras_if) {
  struct ras_common_if *ras_if = adev->sdma.ras_if;
  struct ras_ih_if ih_info = {
   .head = *ras_if,
  };


  amdgpu_ras_debugfs_remove(adev, ras_if);
  amdgpu_ras_sysfs_remove(adev, ras_if);

  amdgpu_ras_interrupt_remove_handler(adev, &ih_info);
  amdgpu_ras_feature_enable(adev, ras_if, 0);
  kfree(ras_if);
 }

 for (i = 0; i < adev->sdma.num_instances; i++) {
  amdgpu_ring_fini(&adev->sdma.instance[i].ring);
  if (adev->sdma.has_page_queue)
   amdgpu_ring_fini(&adev->sdma.instance[i].page);
 }

 sdma_v4_0_destroy_inst_ctx(adev);

 return 0;
}

static int sdma_v4_0_hw_init(void *handle)
{
 int r;
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;

 if (adev->asic_type == CHIP_RAVEN && adev->powerplay.pp_funcs &&
   adev->powerplay.pp_funcs->set_powergating_by_smu)
  amdgpu_dpm_set_powergating_by_smu(adev, AMD_IP_BLOCK_TYPE_SDMA, false);

 if (!((adev)->virt.caps & (1 << 2)))
  sdma_v4_0_init_golden_registers(adev);

 r = sdma_v4_0_start(adev);

 return r;
}

static int sdma_v4_0_hw_fini(void *handle)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;
 int i;

 if (((adev)->virt.caps & (1 << 2)))
  return 0;

 for (i = 0; i < adev->sdma.num_instances; i++) {
  amdgpu_irq_put(adev, &adev->sdma.ecc_irq,
          AMDGPU_SDMA_IRQ_INSTANCE0 + i);
 }

 sdma_v4_0_ctx_switch_enable(adev, false);
 sdma_v4_0_enable(adev, false);

 if (adev->asic_type == CHIP_RAVEN && adev->powerplay.pp_funcs
   && adev->powerplay.pp_funcs->set_powergating_by_smu)
  amdgpu_dpm_set_powergating_by_smu(adev, AMD_IP_BLOCK_TYPE_SDMA, true);

 return 0;
}

static int sdma_v4_0_suspend(void *handle)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;

 return sdma_v4_0_hw_fini(adev);
}

static int sdma_v4_0_resume(void *handle)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;

 return sdma_v4_0_hw_init(adev);
}

static bool sdma_v4_0_is_idle(void *handle)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;
 u32 i;

 for (i = 0; i < adev->sdma.num_instances; i++) {
  u32 tmp = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x0025))), 0);

  if (!(tmp & 0x00000001L))
   return false;
 }

 return true;
}

static int sdma_v4_0_wait_for_idle(void *handle)
{
 unsigned i, j;
 u32 sdma[8];
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;

 for (i = 0; i < adev->usec_timeout; i++) {
  for (j = 0; j < adev->sdma.num_instances; j++) {
   sdma[j] = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (j), (0x0025))), 0);
   if (!(sdma[j] & 0x00000001L))
    break;
  }
  if (j == adev->sdma.num_instances)
   return 0;
  ({ if (__builtin_constant_p(1)) { if ((1) / 20000 >= 1) __bad_udelay(); else __const_udelay((1) * 0x10c7ul); } else { __udelay(1); } });
 }
 return -110;
}

static int sdma_v4_0_soft_reset(void *handle)
{


 return 0;
}

static int sdma_v4_0_set_trap_irq_state(struct amdgpu_device *adev,
     struct amdgpu_irq_src *source,
     unsigned type,
     enum amdgpu_interrupt_state state)
{
 u32 sdma_cntl;

 sdma_cntl = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (type), (0x001c))), 0);
 sdma_cntl = (((sdma_cntl) & ~0x00000001L) | (0x00000001L & ((state == AMDGPU_IRQ_STATE_ENABLE ? 1 : 0) << 0x0)));

 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (type), (0x001c))), (sdma_cntl), 0);

 return 0;
}

static int sdma_v4_0_process_trap_irq(struct amdgpu_device *adev,
          struct amdgpu_irq_src *source,
          struct amdgpu_iv_entry *entry)
{
 uint32_t instance;

 drm_dbg(0x01, "IH: SDMA trap\n");
 instance = sdma_v4_0_irq_id_to_seq(entry->client_id);
 switch (entry->ring_id) {
 case 0:
  amdgpu_fence_process(&adev->sdma.instance[instance].ring);
  break;
 case 1:
  if (adev->asic_type == CHIP_VEGA20)
   amdgpu_fence_process(&adev->sdma.instance[instance].page);
  break;
 case 2:

  break;
 case 3:
  if (adev->asic_type != CHIP_VEGA20)
   amdgpu_fence_process(&adev->sdma.instance[instance].page);
  break;
 }
 return 0;
}

static int sdma_v4_0_process_ras_data_cb(struct amdgpu_device *adev,
  struct ras_err_data *err_data,
  struct amdgpu_iv_entry *entry)
{
 uint32_t err_source;
 int instance;

 instance = sdma_v4_0_irq_id_to_seq(entry->client_id);
 if (instance < 0)
  return 0;

 switch (entry->src_id) {
 case 228:
  err_source = 0;
  break;
 case 220:
  err_source = 1;
  break;
 default:
  return 0;
 }

 kgd2kfd_set_sram_ecc_flag(adev->kfd.dev);

 amdgpu_ras_reset_gpu(adev, 0);

 return AMDGPU_RAS_SUCCESS;
}

static int sdma_v4_0_process_ecc_irq(struct amdgpu_device *adev,
          struct amdgpu_irq_src *source,
          struct amdgpu_iv_entry *entry)
{
 struct ras_common_if *ras_if = adev->sdma.ras_if;
 struct ras_dispatch_if ih_data = {
  .entry = entry,
 };

 if (!ras_if)
  return 0;

 ih_data.head = *ras_if;

 amdgpu_ras_interrupt_dispatch(adev, &ih_data);
 return 0;
}

static int sdma_v4_0_process_illegal_inst_irq(struct amdgpu_device *adev,
           struct amdgpu_irq_src *source,
           struct amdgpu_iv_entry *entry)
{
 int instance;

 drm_err("Illegal instruction in SDMA command stream\n");

 instance = sdma_v4_0_irq_id_to_seq(entry->client_id);
 if (instance < 0)
  return 0;

 switch (entry->ring_id) {
 case 0:
  drm_sched_fault(&adev->sdma.instance[instance].ring.sched);
  break;
 }
 return 0;
}

static int sdma_v4_0_set_ecc_irq_state(struct amdgpu_device *adev,
     struct amdgpu_irq_src *source,
     unsigned type,
     enum amdgpu_interrupt_state state)
{
 u32 sdma_edc_config;

 sdma_edc_config = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (type), (0x0032))), 0);
 sdma_edc_config = (((sdma_edc_config) & ~0x00000004L) | (0x00000004L & ((state == AMDGPU_IRQ_STATE_ENABLE ? 1 : 0) << 0x2)));

 amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (type), (0x0032))), (sdma_edc_config), 0);

 return 0;
}

static void sdma_v4_0_update_medium_grain_clock_gating(
  struct amdgpu_device *adev,
  bool enable)
{
 uint32_t data, def;
 int i;

 if (enable && (adev->cg_flags & (1 << 11))) {
  for (i = 0; i < adev->sdma.num_instances; i++) {
   def = data = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001b))), 0);
   data &= ~(0x01000000L |
      0x02000000L |
      0x04000000L |
      0x08000000L |
      0x10000000L |
      0x20000000L |
      0x40000000L |
      0x80000000L);
   if (def != data)
    amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001b))), (data), 0);
  }
 } else {
  for (i = 0; i < adev->sdma.num_instances; i++) {
   def = data = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001b))), 0);
   data |= (0x01000000L |
     0x02000000L |
     0x04000000L |
     0x08000000L |
     0x10000000L |
     0x20000000L |
     0x40000000L |
     0x80000000L);
   if (def != data)
    amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (i), (0x001b))), (data), 0);
  }
 }
}


static void sdma_v4_0_update_medium_grain_light_sleep(
  struct amdgpu_device *adev,
  bool enable)
{
 uint32_t data, def;
 int i;

 if (enable && (adev->cg_flags & (1 << 10))) {
  for (i = 0; i < adev->sdma.num_instances; i++) {

   def = data = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (0), (0x001a))), 0);
   data |= 0x00000100L;
   if (def != data)
    amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (0), (0x001a))), (data), 0);
  }
 } else {
  for (i = 0; i < adev->sdma.num_instances; i++) {

   def = data = amdgpu_mm_rreg(adev, (sdma_v4_0_get_reg_offset(adev, (0), (0x001a))), 0);
   data &= ~0x00000100L;
   if (def != data)
    amdgpu_mm_wreg(adev, (sdma_v4_0_get_reg_offset(adev, (0), (0x001a))), (data), 0);
  }
 }
}

static int sdma_v4_0_set_clockgating_state(void *handle,
       enum amd_clockgating_state state)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;

 if (((adev)->virt.caps & (1 << 2)))
  return 0;

 switch (adev->asic_type) {
 case CHIP_VEGA10:
 case CHIP_VEGA12:
 case CHIP_VEGA20:
 case CHIP_RAVEN:
 case CHIP_ARCTURUS:
 case CHIP_RENOIR:
  sdma_v4_0_update_medium_grain_clock_gating(adev,
    state == AMD_CG_STATE_GATE ? true : false);
  sdma_v4_0_update_medium_grain_light_sleep(adev,
    state == AMD_CG_STATE_GATE ? true : false);
  break;
 default:
  break;
 }
 return 0;
}

static int sdma_v4_0_set_powergating_state(void *handle,
       enum amd_powergating_state state)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;

 switch (adev->asic_type) {
 case CHIP_RAVEN:
  sdma_v4_1_update_power_gating(adev,
    state == AMD_PG_STATE_GATE ? true : false);
  break;
 default:
  break;
 }

 return 0;
}

static void sdma_v4_0_get_clockgating_state(void *handle, u32 *flags)
{
 struct amdgpu_device *adev = (struct amdgpu_device *)handle;
 int data;

 if (((adev)->virt.caps & (1 << 2)))
  *flags = 0;


 data = amdgpu_mm_rreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001b)), 0);
 if (!(data & 0x01000000L))
  *flags |= (1 << 11);


 data = amdgpu_mm_rreg(adev, ((adev->reg_offset[SDMA0_HWIP][0][0] + 0x001a)), 0);
 if (data & 0x00000100L)
  *flags |= (1 << 10);
}

const struct amd_ip_funcs sdma_v4_0_ip_funcs = {
 .name = "sdma_v4_0",
 .early_init = sdma_v4_0_early_init,
 .late_init = sdma_v4_0_late_init,
 .sw_init = sdma_v4_0_sw_init,
 .sw_fini = sdma_v4_0_sw_fini,
 .hw_init = sdma_v4_0_hw_init,
 .hw_fini = sdma_v4_0_hw_fini,
 .suspend = sdma_v4_0_suspend,
 .resume = sdma_v4_0_resume,
 .is_idle = sdma_v4_0_is_idle,
 .wait_for_idle = sdma_v4_0_wait_for_idle,
 .soft_reset = sdma_v4_0_soft_reset,
 .set_clockgating_state = sdma_v4_0_set_clockgating_state,
 .set_powergating_state = sdma_v4_0_set_powergating_state,
 .get_clockgating_state = sdma_v4_0_get_clockgating_state,
};

static const struct amdgpu_ring_funcs sdma_v4_0_ring_funcs = {
 .type = AMDGPU_RING_TYPE_SDMA,
 .align_mask = 0xf,
 .nop = (((0) & 0x000000FF) << 0),
 .support_64bit_ptrs = true,
 .vmhub = 1,
 .get_rptr = sdma_v4_0_ring_get_rptr,
 .get_wptr = sdma_v4_0_ring_get_wptr,
 .set_wptr = sdma_v4_0_ring_set_wptr,
 .emit_frame_size =
  6 +
  3 +
  6 +

  4 * 3 +
  1 * 6 +
  10 + 10 + 10,
 .emit_ib_size = 7 + 6,
 .emit_ib = sdma_v4_0_ring_emit_ib,
 .emit_fence = sdma_v4_0_ring_emit_fence,
 .emit_pipeline_sync = sdma_v4_0_ring_emit_pipeline_sync,
 .emit_vm_flush = sdma_v4_0_ring_emit_vm_flush,
 .emit_hdp_flush = sdma_v4_0_ring_emit_hdp_flush,
 .test_ring = sdma_v4_0_ring_test_ring,
 .test_ib = sdma_v4_0_ring_test_ib,
 .insert_nop = sdma_v4_0_ring_insert_nop,
 .pad_ib = sdma_v4_0_ring_pad_ib,
 .emit_wreg = sdma_v4_0_ring_emit_wreg,
 .emit_reg_wait = sdma_v4_0_ring_emit_reg_wait,
 .emit_reg_write_reg_wait = amdgpu_ring_emit_reg_write_reg_wait_helper,
};





static const struct amdgpu_ring_funcs sdma_v4_0_ring_funcs_2nd_mmhub = {
 .type = AMDGPU_RING_TYPE_SDMA,
 .align_mask = 0xf,
 .nop = (((0) & 0x000000FF) << 0),
 .support_64bit_ptrs = true,
 .vmhub = 2,
 .get_rptr = sdma_v4_0_ring_get_rptr,
 .get_wptr = sdma_v4_0_ring_get_wptr,
 .set_wptr = sdma_v4_0_ring_set_wptr,
 .emit_frame_size =
  6 +
  3 +
  6 +

  4 * 3 +
  1 * 6 +
  10 + 10 + 10,
 .emit_ib_size = 7 + 6,
 .emit_ib = sdma_v4_0_ring_emit_ib,
 .emit_fence = sdma_v4_0_ring_emit_fence,
 .emit_pipeline_sync = sdma_v4_0_ring_emit_pipeline_sync,
 .emit_vm_flush = sdma_v4_0_ring_emit_vm_flush,
 .emit_hdp_flush = sdma_v4_0_ring_emit_hdp_flush,
 .test_ring = sdma_v4_0_ring_test_ring,
 .test_ib = sdma_v4_0_ring_test_ib,
 .insert_nop = sdma_v4_0_ring_insert_nop,
 .pad_ib = sdma_v4_0_ring_pad_ib,
 .emit_wreg = sdma_v4_0_ring_emit_wreg,
 .emit_reg_wait = sdma_v4_0_ring_emit_reg_wait,
 .emit_reg_write_reg_wait = amdgpu_ring_emit_reg_write_reg_wait_helper,
};

static const struct amdgpu_ring_funcs sdma_v4_0_page_ring_funcs = {
 .type = AMDGPU_RING_TYPE_SDMA,
 .align_mask = 0xf,
 .nop = (((0) & 0x000000FF) << 0),
 .support_64bit_ptrs = true,
 .vmhub = 1,
 .get_rptr = sdma_v4_0_ring_get_rptr,
 .get_wptr = sdma_v4_0_page_ring_get_wptr,
 .set_wptr = sdma_v4_0_page_ring_set_wptr,
 .emit_frame_size =
  6 +
  3 +
  6 +

  4 * 3 +
  1 * 6 +
  10 + 10 + 10,
 .emit_ib_size = 7 + 6,
 .emit_ib = sdma_v4_0_ring_emit_ib,
 .emit_fence = sdma_v4_0_ring_emit_fence,
 .emit_pipeline_sync = sdma_v4_0_ring_emit_pipeline_sync,
 .emit_vm_flush = sdma_v4_0_ring_emit_vm_flush,
 .emit_hdp_flush = sdma_v4_0_ring_emit_hdp_flush,
 .test_ring = sdma_v4_0_ring_test_ring,
 .test_ib = sdma_v4_0_ring_test_ib,
 .insert_nop = sdma_v4_0_ring_insert_nop,
 .pad_ib = sdma_v4_0_ring_pad_ib,
 .emit_wreg = sdma_v4_0_ring_emit_wreg,
 .emit_reg_wait = sdma_v4_0_ring_emit_reg_wait,
 .emit_reg_write_reg_wait = amdgpu_ring_emit_reg_write_reg_wait_helper,
};

static const struct amdgpu_ring_funcs sdma_v4_0_page_ring_funcs_2nd_mmhub = {
 .type = AMDGPU_RING_TYPE_SDMA,
 .align_mask = 0xf,
 .nop = (((0) & 0x000000FF) << 0),
 .support_64bit_ptrs = true,
 .vmhub = 2,
 .get_rptr = sdma_v4_0_ring_get_rptr,
 .get_wptr = sdma_v4_0_page_ring_get_wptr,
 .set_wptr = sdma_v4_0_page_ring_set_wptr,
 .emit_frame_size =
  6 +
  3 +
  6 +

  4 * 3 +
  1 * 6 +
  10 + 10 + 10,
 .emit_ib_size = 7 + 6,
 .emit_ib = sdma_v4_0_ring_emit_ib,
 .emit_fence = sdma_v4_0_ring_emit_fence,
 .emit_pipeline_sync = sdma_v4_0_ring_emit_pipeline_sync,
 .emit_vm_flush = sdma_v4_0_ring_emit_vm_flush,
 .emit_hdp_flush = sdma_v4_0_ring_emit_hdp_flush,
 .test_ring = sdma_v4_0_ring_test_ring,
 .test_ib = sdma_v4_0_ring_test_ib,
 .insert_nop = sdma_v4_0_ring_insert_nop,
 .pad_ib = sdma_v4_0_ring_pad_ib,
 .emit_wreg = sdma_v4_0_ring_emit_wreg,
 .emit_reg_wait = sdma_v4_0_ring_emit_reg_wait,
 .emit_reg_write_reg_wait = amdgpu_ring_emit_reg_write_reg_wait_helper,
};

static void sdma_v4_0_set_ring_funcs(struct amdgpu_device *adev)
{
 int i;

 for (i = 0; i < adev->sdma.num_instances; i++) {
  if (adev->asic_type == CHIP_ARCTURUS && i >= 5)
   adev->sdma.instance[i].ring.funcs =
     &sdma_v4_0_ring_funcs_2nd_mmhub;
  else
   adev->sdma.instance[i].ring.funcs =
     &sdma_v4_0_ring_funcs;
  adev->sdma.instance[i].ring.me = i;
  if (adev->sdma.has_page_queue) {
   if (adev->asic_type == CHIP_ARCTURUS && i >= 5)
    adev->sdma.instance[i].page.funcs =
     &sdma_v4_0_page_ring_funcs_2nd_mmhub;
   else
    adev->sdma.instance[i].page.funcs =
     &sdma_v4_0_page_ring_funcs;
   adev->sdma.instance[i].page.me = i;
  }
 }
}

static const struct amdgpu_irq_src_funcs sdma_v4_0_trap_irq_funcs = {
 .set = sdma_v4_0_set_trap_irq_state,
 .process = sdma_v4_0_process_trap_irq,
};

static const struct amdgpu_irq_src_funcs sdma_v4_0_illegal_inst_irq_funcs = {
 .process = sdma_v4_0_process_illegal_inst_irq,
};

static const struct amdgpu_irq_src_funcs sdma_v4_0_ecc_irq_funcs = {
 .set = sdma_v4_0_set_ecc_irq_state,
 .process = sdma_v4_0_process_ecc_irq,
};



static void sdma_v4_0_set_irq_funcs(struct amdgpu_device *adev)
{
 switch (adev->sdma.num_instances) {
 case 1:
  adev->sdma.trap_irq.num_types = AMDGPU_SDMA_IRQ_INSTANCE1;
  adev->sdma.ecc_irq.num_types = AMDGPU_SDMA_IRQ_INSTANCE1;
  break;
 case 8:
  adev->sdma.trap_irq.num_types = AMDGPU_SDMA_IRQ_LAST;
  adev->sdma.ecc_irq.num_types = AMDGPU_SDMA_IRQ_LAST;
  break;
 case 2:
 default:
  adev->sdma.trap_irq.num_types = AMDGPU_SDMA_IRQ_INSTANCE2;
  adev->sdma.ecc_irq.num_types = AMDGPU_SDMA_IRQ_INSTANCE2;
  break;
 }
 adev->sdma.trap_irq.funcs = &sdma_v4_0_trap_irq_funcs;
 adev->sdma.illegal_inst_irq.funcs = &sdma_v4_0_illegal_inst_irq_funcs;
 adev->sdma.ecc_irq.funcs = &sdma_v4_0_ecc_irq_funcs;
}
# 2457 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_emit_copy_buffer(struct amdgpu_ib *ib,
           uint64_t src_offset,
           uint64_t dst_offset,
           uint32_t byte_count)
{
 ib->ptr[ib->length_dw++] = (((1) & 0x000000FF) << 0) |
  (((0) & 0x000000FF) << 8);
 ib->ptr[ib->length_dw++] = byte_count - 1;
 ib->ptr[ib->length_dw++] = 0;
 ib->ptr[ib->length_dw++] = ((u32)(src_offset));
 ib->ptr[ib->length_dw++] = ((u32)(((src_offset) >> 16) >> 16));
 ib->ptr[ib->length_dw++] = ((u32)(dst_offset));
 ib->ptr[ib->length_dw++] = ((u32)(((dst_offset) >> 16) >> 16));
}
# 2482 "../drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c"
static void sdma_v4_0_emit_fill_buffer(struct amdgpu_ib *ib,
           uint32_t src_data,
           uint64_t dst_offset,
           uint32_t byte_count)
{
 ib->ptr[ib->length_dw++] = (((11) & 0x000000FF) << 0);
 ib->ptr[ib->length_dw++] = ((u32)(dst_offset));
 ib->ptr[ib->length_dw++] = ((u32)(((dst_offset) >> 16) >> 16));
 ib->ptr[ib->length_dw++] = src_data;
 ib->ptr[ib->length_dw++] = byte_count - 1;
}

static const struct amdgpu_buffer_funcs sdma_v4_0_buffer_funcs = {
 .copy_max_bytes = 0x400000,
 .copy_num_dw = 7,
 .emit_copy_buffer = sdma_v4_0_emit_copy_buffer,

 .fill_max_bytes = 0x400000,
 .fill_num_dw = 5,
 .emit_fill_buffer = sdma_v4_0_emit_fill_buffer,
};

static void sdma_v4_0_set_buffer_funcs(struct amdgpu_device *adev)
{
 adev->mman.buffer_funcs = &sdma_v4_0_buffer_funcs;
 if (adev->sdma.has_page_queue)
  adev->mman.buffer_funcs_ring = &adev->sdma.instance[0].page;
 else
  adev->mman.buffer_funcs_ring = &adev->sdma.instance[0].ring;
}

static const struct amdgpu_vm_pte_funcs sdma_v4_0_vm_pte_funcs = {
 .copy_pte_num_dw = 7,
 .copy_pte = sdma_v4_0_vm_copy_pte,

 .write_pte = sdma_v4_0_vm_write_pte,
 .set_pte_pde = sdma_v4_0_vm_set_pte_pde,
};

static void sdma_v4_0_set_vm_pte_funcs(struct amdgpu_device *adev)
{
 struct drm_gpu_scheduler *sched;
 unsigned i;

 adev->vm_manager.vm_pte_funcs = &sdma_v4_0_vm_pte_funcs;
 for (i = 0; i < adev->sdma.num_instances; i++) {
  if (adev->sdma.has_page_queue)
   sched = &adev->sdma.instance[i].page.sched;
  else
   sched = &adev->sdma.instance[i].ring.sched;
  adev->vm_manager.vm_pte_rqs[i] =
   &sched->sched_rq[DRM_SCHED_PRIORITY_KERNEL];
 }
 adev->vm_manager.vm_pte_num_rqs = adev->sdma.num_instances;
}

const struct amdgpu_ip_block_version sdma_v4_0_ip_block = {
 .type = AMD_IP_BLOCK_TYPE_SDMA,
 .major = 4,
 .minor = 0,
 .rev = 0,
 .funcs = &sdma_v4_0_ip_funcs,
};
