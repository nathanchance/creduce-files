# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 338 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kconfig.h" 1




# 1 "./include/generated/autoconf.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kconfig.h" 2
# 74 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kconfig.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler_types.h" 1
# 58 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler-gcc.h" 1
# 59 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler_types.h" 2
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler-clang.h" 1
# 79 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler_types.h" 2
# 99 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler_types.h"
struct ftrace_branch_data {
 const char *func;
 const char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  };
  struct {
   unsigned long miss;
   unsigned long hit;
  };
  unsigned long miss_hit[2];
 };
};

struct ftrace_likely_data {
 struct ftrace_branch_data data;
 unsigned long constant;
};
# 75 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kconfig.h" 2
# 2 "<built-in>" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/init.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h" 1
# 164 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/types.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/types.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/types.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/int-ll64.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/int-ll64.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/int-ll64.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/int-ll64.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bitsperlong.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bitsperlong.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitsperlong.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/bitsperlong.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitsperlong.h" 2
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bitsperlong.h" 2
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/int-ll64.h" 2







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/int-ll64.h" 2




typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/types.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/types.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/types.h" 2








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/posix_types.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stddef.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/stddef.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stddef.h" 2




enum {
 false = 0,
 true = 1
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/posix_types.h" 2
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/posix_types.h"
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/posix_types.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/posix_types_64.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/posix_types_64.h"
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/posix_types.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/posix_types_64.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/posix_types.h" 2
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/posix_types.h" 2
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/types.h" 2
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/types.h"
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 165 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h" 2
# 180 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
void __read_once_size(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("": : :"memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("": : :"memory"); } });
}
# 198 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
void __read_once_size_nocheck(const volatile void *p, void *res, int size)
{
 ({ switch (size) { case 1: *(__u8 *)res = *(volatile __u8 *)p; break; case 2: *(__u16 *)res = *(volatile __u16 *)p; break; case 4: *(__u32 *)res = *(volatile __u32 *)p; break; case 8: *(__u64 *)res = *(volatile __u64 *)p; break; default: __asm__ __volatile__("": : :"memory"); __builtin_memcpy((void *)res, (const void *)p, size); __asm__ __volatile__("": : :"memory"); } });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __write_once_size(volatile void *p, void *res, int size)
{
 switch (size) {
 case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
 case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
 case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
 case 8: *(volatile __u64 *)p = *(__u64 *)res; break;
 default:
  __asm__ __volatile__("": : :"memory");
  __builtin_memcpy((void *)p, (const void *)res, size);
  __asm__ __volatile__("": : :"memory");
 }
}
# 240 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/barrier.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/alternative.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/types.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/types.h"
typedef __u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef __u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;

typedef _Bool bool;

typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;



typedef __kernel_loff_t loff_t;
# 55 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/types.h"
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_time_t time_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef __u8 u_int8_t;
typedef __s8 int8_t;
typedef __u16 u_int16_t;
typedef __s16 int16_t;
typedef __u32 u_int32_t;
typedef __s32 int32_t;



typedef __u8 uint8_t;
typedef __u16 uint16_t;
typedef __u32 uint32_t;


typedef __u64 uint64_t;
typedef __u64 u_int64_t;
typedef __s64 int64_t;
# 134 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/types.h"
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
# 153 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/types.h"
typedef u64 dma_addr_t;




typedef unsigned gfp_t;
typedef unsigned fmode_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;

typedef struct {
 int counter;
} atomic_t;


typedef struct {
 long counter;
} atomic64_t;


struct list_head {
 struct list_head *next, *prev;
};

struct hlist_head {
 struct hlist_node *first;
};

struct hlist_node {
 struct hlist_node *next, **pprev;
};

struct ustat {
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 223 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/types.h"
struct callback_head {
 struct callback_head *next;
 void (*func)(struct callback_head *head);
} __attribute__((aligned(sizeof(void *))));


typedef void (*rcu_callback_t)(struct callback_head *head);
typedef void (*call_rcu_func_t)(struct callback_head *head, rcu_callback_t func);
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/alternative.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stringify.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/alternative.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/asm.h" 1
# 205 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/asm.h"
register unsigned long current_stack_pointer asm("rsp");
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/alternative.h" 2
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/alternative.h"
struct alt_instr {
 s32 instr_offset;
 s32 repl_offset;
 u16 cpuid;
 u8 instrlen;
 u8 replacementlen;
 u8 padlen;
} __attribute__((packed));





extern int alternatives_patched;

extern void alternative_instructions(void);
extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);

struct module;


extern void alternatives_smp_module_add(struct module *mod, char *name,
     void *locks, void *locks_end,
     void *text, void *text_end);
extern void alternatives_smp_module_del(struct module *mod);
extern void alternatives_enable_smp(void);
extern int alternatives_text_reserved(void *start, void *end);
extern bool skip_smp_alternatives;
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/barrier.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nops.h" 1
# 143 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nops.h"
extern const unsigned char * const *ideal_nops;
extern void arch_init_ideal_nops(void);
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/barrier.h" 2
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/barrier.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long array_index_mask_nospec(unsigned long index,
  unsigned long size)
{
 unsigned long mask;

 asm volatile ("cmp %1,%2; sbb %0,%0;"
   :"=r" (mask)
   :"g"(size),"r" (index)
   :"cc");
 return mask;
}
# 112 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/barrier.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/barrier.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/barrier.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/barrier.h" 2
# 113 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/barrier.h" 2
# 241 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kasan-checks.h" 1








static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_check_read(const volatile void *p, unsigned int size)
{ }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_check_write(const volatile void *p, unsigned int size)
{ }
# 242 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h" 2
# 261 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compiler.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
unsigned long read_word_at_a_time(const void *addr)
{
 kasan_check_read(addr, 1);
 return *(unsigned long *)addr;
}
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/init.h" 2
# 118 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/init.h"
typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);

extern initcall_t __con_initcall_start[], __con_initcall_end[];
extern initcall_t __security_initcall_start[], __security_initcall_end[];


typedef void (*ctor_fn_t)(void);


extern int do_one_initcall(initcall_t fn);
extern char __attribute__ ((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) load_default_modules(void);
int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) init_rootfs(void);


extern bool rodata_enabled;


void mark_rodata_ro(void);


extern void (*late_time_init)(void);

extern bool initcall_debug;
# 239 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/init.h"
struct obs_kernel_param {
 const char *str;
 int (*setup_func)(char *);
 int early;
};
# 288 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/init.h"
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) parse_early_param(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) parse_early_options(char *cmdline);
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/utsname.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sched.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/current.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/percpu.h" 1
# 45 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/percpu.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 1





# 1 "/home/nathan/cbl/toolchains/llvm-20200503-2013-14cb0bdf2b6ca0b7befbb07fe9f73dad5786f59b/lib/clang/11.0.0/include/stdarg.h" 1 3
# 14 "/home/nathan/cbl/toolchains/llvm-20200503-2013-14cb0bdf2b6ca0b7befbb07fe9f73dad5786f59b/lib/clang/11.0.0/include/stdarg.h" 3
typedef __builtin_va_list va_list;
# 32 "/home/nathan/cbl/toolchains/llvm-20200503-2013-14cb0bdf2b6ca0b7befbb07fe9f73dad5786f59b/lib/clang/11.0.0/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/linkage.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/export.h" 1
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/export.h"
struct kernel_symbol
{
 unsigned long value;
 const char *name;
};
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/linkage.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/linkage.h" 1
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/linkage.h" 2
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitops.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bits.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitops.h" 2




extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/rmwcc.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 2
# 72 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
set_bit(long nr, volatile unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "orb %1,%0"
   : "+m" (*(volatile long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)(1 << ((nr) & 7)))
   : "memory");
 } else {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "bts %1,%0"
   : "+m" (*(volatile long *) (addr)) : "Ir" (nr) : "memory");
 }
}
# 95 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __set_bit(long nr, volatile unsigned long *addr)
{
 asm volatile("bts %1,%0" : "+m" (*(volatile long *) (addr)) : "Ir" (nr) : "memory");
}
# 110 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
clear_bit(long nr, volatile unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "andb %1,%0"
   : "+m" (*(volatile long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)~(1 << ((nr) & 7))));
 } else {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btr %1,%0"
   : "+m" (*(volatile long *) (addr))
   : "Ir" (nr));
 }
}
# 132 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 clear_bit(nr, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __clear_bit(long nr, volatile unsigned long *addr)
{
 asm volatile("btr %1,%0" : "+m" (*(volatile long *) (addr)) : "Ir" (nr));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool clear_bit_unlock_is_negative_byte(long nr, volatile unsigned long *addr)
{
 bool negative;
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "andb %2,%1"
  "\n\t/* output condition code " "s" "*/\n"
  : "=@cc" "s" (negative), "+m" (*(volatile long *) (addr))
  : "ir" ((char) ~(1 << nr)) : "memory");
 return negative;
}
# 168 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __clear_bit_unlock(long nr, volatile unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 __clear_bit(nr, addr);
}
# 183 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __change_bit(long nr, volatile unsigned long *addr)
{
 asm volatile("btc %1,%0" : "+m" (*(volatile long *) (addr)) : "Ir" (nr));
}
# 197 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void change_bit(long nr, volatile unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xorb %1,%0"
   : "+m" (*(volatile long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)(1 << ((nr) & 7))));
 } else {
  asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btc %1,%0"
   : "+m" (*(volatile long *) (addr))
   : "Ir" (nr));
 }
}
# 218 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool test_and_set_bit(long nr, volatile unsigned long *addr)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "bts" " %2, " "%0" "\n\t/* output condition code " "c" "*/\n" : [counter] "+m" (*addr), "=@cc" "c" (c) : "Ir" (nr) : "memory"); return c; } while (0);
}
# 230 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool
test_and_set_bit_lock(long nr, volatile unsigned long *addr)
{
 return test_and_set_bit(nr, addr);
}
# 245 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool __test_and_set_bit(long nr, volatile unsigned long *addr)
{
 bool oldbit;

 asm("bts %2,%1"
     "\n\t/* output condition code " "c" "*/\n"
     : "=@cc" "c" (oldbit), "+m" (*(volatile long *) (addr))
     : "Ir" (nr));
 return oldbit;
}
# 264 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btr" " %2, " "%0" "\n\t/* output condition code " "c" "*/\n" : [counter] "+m" (*addr), "=@cc" "c" (c) : "Ir" (nr) : "memory"); return c; } while (0);
}
# 285 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool __test_and_clear_bit(long nr, volatile unsigned long *addr)
{
 bool oldbit;

 asm volatile("btr %2,%1"
       "\n\t/* output condition code " "c" "*/\n"
       : "=@cc" "c" (oldbit), "+m" (*(volatile long *) (addr))
       : "Ir" (nr));
 return oldbit;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool __test_and_change_bit(long nr, volatile unsigned long *addr)
{
 bool oldbit;

 asm volatile("btc %2,%1"
       "\n\t/* output condition code " "c" "*/\n"
       : "=@cc" "c" (oldbit), "+m" (*(volatile long *) (addr))
       : "Ir" (nr) : "memory");

 return oldbit;
}
# 317 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool test_and_change_bit(long nr, volatile unsigned long *addr)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btc" " %2, " "%0" "\n\t/* output condition code " "c" "*/\n" : [counter] "+m" (*addr), "=@cc" "c" (c) : "Ir" (nr) : "memory"); return c; } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool constant_test_bit(long nr, const volatile unsigned long *addr)
{
 return ((1UL << (nr & (64 -1))) &
  (addr[nr >> 6])) != 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool variable_test_bit(long nr, volatile const unsigned long *addr)
{
 bool oldbit;

 asm volatile("bt %2,%1"
       "\n\t/* output condition code " "c" "*/\n"
       : "=@cc" "c" (oldbit)
       : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}
# 360 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __ffs(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "rm" (word));
 return word;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long ffz(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "r" (~word));
 return word;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __fls(unsigned long word)
{
 asm("bsr %1,%0"
     : "=r" (word)
     : "rm" (word));
 return word;
}
# 410 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int ffs(int x)
{
 int r;
# 424 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
 asm("bsfl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
# 437 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
 return r + 1;
}
# 451 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int fls(int x)
{
 int r;
# 465 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
 asm("bsrl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
# 478 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
 return r + 1;
}
# 493 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int fls64(__u64 x)
{
 int bitpos = -1;





 asm("bsrq %1,%q0"
     : "+r" (bitpos)
     : "rm" (x));
 return bitpos + 1;
}





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/find.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/find.h"
extern unsigned long find_next_bit(const unsigned long *addr, unsigned long
  size, unsigned long offset);
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/find.h"
extern unsigned long find_next_zero_bit(const unsigned long *addr, unsigned
  long size, unsigned long offset);
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/find.h"
extern unsigned long find_first_bit(const unsigned long *addr,
        unsigned long size);
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/find.h"
extern unsigned long find_first_zero_bit(const unsigned long *addr,
      unsigned long size);
# 511 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/sched.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/sched.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int sched_find_first_bit(const unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/sched.h"
}
# 513 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/arch_hweight.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeatures.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/required-features.h" 1
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeatures.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/disabled-features.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeatures.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/arch_hweight.h" 2
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/arch_hweight.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned int __arch_hweight32(unsigned int w)
{
 unsigned int res;

 asm ("661:\n\t" "call __sw_hweight32" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0xf3,0x0f,0xb8,0xc7" "\n" "665""1" ":\n\t" ".popsection\n"
    : "=""a" (res)
    : "D" (w));

 return res;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int __arch_hweight16(unsigned int w)
{
 return __arch_hweight32(w & 0xffff);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int __arch_hweight8(unsigned int w)
{
 return __arch_hweight32(w & 0xff);
}
# 51 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/arch_hweight.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __arch_hweight64(__u64 w)
{
 unsigned long res;

 asm ("661:\n\t" "call __sw_hweight64" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 4*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0xf3,0x48,0x0f,0xb8,0xc7" "\n" "665""1" ":\n\t" ".popsection\n"
    : "=""a" (res)
    : "D" (w));

 return res;
}
# 515 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/const_hweight.h" 1
# 517 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/le.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/byteorder.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/byteorder/little_endian.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/byteorder/little_endian.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/byteorder/little_endian.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/swab.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/swab.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/swab.h" 1







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __arch_swab32(__u32 val)
{
 asm("bswapl %0" : "=r" (val) : "0" (val));
 return val;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __arch_swab64(__u64 val)
{
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/swab.h"
 asm("bswapq %0" : "=r" (val) : "0" (val));
 return val;

}
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/swab.h" 2
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/swab.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u16 __fswab16(__u16 val)
{



 return ((__u16)( (((__u16)(val) & (__u16)0x00ffU) << 8) | (((__u16)(val) & (__u16)0xff00U) >> 8)));

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswab32(__u32 val)
{

 return __arch_swab32(val);



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u64 __fswab64(__u64 val)
{

 return __arch_swab64(val);







}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
# 136 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/swab.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long __swab(const unsigned long y)
{

 return (__builtin_constant_p((__u64)(y)) ? ((__u64)( (((__u64)(y) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(y) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(y) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(y) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(y) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(y) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(y) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(y) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(y));



}
# 171 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/swab.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __swab16p(const __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __swab32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __swab64p(const __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u32 __swahw32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u32 __swahb32p(const __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/swab.h" 2
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/byteorder/little_endian.h" 2
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/byteorder/little_endian.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __le64 __cpu_to_le64p(const __u64 *p)
{
 return ( __le64)*p;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __le64_to_cpup(const __le64 *p)
{
 return ( __u64)*p;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __le32 __cpu_to_le32p(const __u32 *p)
{
 return ( __le32)*p;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __le32_to_cpup(const __le32 *p)
{
 return ( __u32)*p;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __le16 __cpu_to_le16p(const __u16 *p)
{
 return ( __le16)*p;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __le16_to_cpup(const __le16 *p)
{
 return ( __u16)*p;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __be64 __cpu_to_be64p(const __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u64 __be64_to_cpup(const __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __be32 __cpu_to_be32p(const __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u32 __be32_to_cpup(const __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __be16 __cpu_to_be16p(const __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __u16 __be16_to_cpup(const __be16 *p)
{
 return __swab16p((__u16 *)p);
}
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/byteorder/little_endian.h" 2





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/byteorder/generic.h" 1
# 144 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/byteorder/generic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))));
}
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/byteorder/little_endian.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/byteorder.h" 2
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/le.h" 2





static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long find_next_zero_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_zero_bit(addr, size, offset);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long find_next_bit_le(const void *addr,
  unsigned long size, unsigned long offset)
{
 return find_next_bit(addr, size, offset);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long find_first_zero_bit_le(const void *addr,
  unsigned long size)
{
 return find_first_zero_bit(addr, size);
}
# 53 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/le.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_bit_le(int nr, const void *addr)
{
 return (__builtin_constant_p((nr ^ 0)) ? constant_test_bit((nr ^ 0), (addr)) : variable_test_bit((nr ^ 0), (addr)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_bit_le(int nr, void *addr)
{
 set_bit(nr ^ 0, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_bit_le(int nr, void *addr)
{
 clear_bit(nr ^ 0, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __set_bit_le(int nr, void *addr)
{
 __set_bit(nr ^ 0, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __clear_bit_le(int nr, void *addr)
{
 __clear_bit(nr ^ 0, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_and_set_bit_le(int nr, void *addr)
{
 return test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_and_clear_bit_le(int nr, void *addr)
{
 return test_and_clear_bit(nr ^ 0, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __test_and_set_bit_le(int nr, void *addr)
{
 return __test_and_set_bit(nr ^ 0, addr);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __test_and_clear_bit_le(int nr, void *addr)
{
 return __test_and_clear_bit(nr ^ 0, addr);
}
# 519 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bitops/ext2-atomic-setbit.h" 1
# 521 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bitops.h" 2
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitops.h" 2
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) : __arch_hweight32(w)) : (__builtin_constant_p(w) ? (((((unsigned int) ((!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))))) + ((unsigned int) ((!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))))))) + ((((unsigned int) ((!!(((w) >> 32) & (1ULL << 0))) + (!!(((w) >> 32) & (1ULL << 1))) + (!!(((w) >> 32) & (1ULL << 2))) + (!!(((w) >> 32) & (1ULL << 3))) + (!!(((w) >> 32) & (1ULL << 4))) + (!!(((w) >> 32) & (1ULL << 5))) + (!!(((w) >> 32) & (1ULL << 6))) + (!!(((w) >> 32) & (1ULL << 7))))) + ((unsigned int) ((!!((((w) >> 32) >> 8) & (1ULL << 0))) + (!!((((w) >> 32) >> 8) & (1ULL << 1))) + (!!((((w) >> 32) >> 8) & (1ULL << 2))) + (!!((((w) >> 32) >> 8) & (1ULL << 3))) + (!!((((w) >> 32) >> 8) & (1ULL << 4))) + (!!((((w) >> 32) >> 8) & (1ULL << 5))) + (!!((((w) >> 32) >> 8) & (1ULL << 6))) + (!!((((w) >> 32) >> 8) & (1ULL << 7)))))) + (((unsigned int) ((!!((((w) >> 32) >> 16) & (1ULL << 0))) + (!!((((w) >> 32) >> 16) & (1ULL << 1))) + (!!((((w) >> 32) >> 16) & (1ULL << 2))) + (!!((((w) >> 32) >> 16) & (1ULL << 3))) + (!!((((w) >> 32) >> 16) & (1ULL << 4))) + (!!((((w) >> 32) >> 16) & (1ULL << 5))) + (!!((((w) >> 32) >> 16) & (1ULL << 6))) + (!!((((w) >> 32) >> 16) & (1ULL << 7))))) + ((unsigned int) ((!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 7)))))))) : __arch_hweight64(w));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << (shift & 63)) | (word >> ((-shift) & 63));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> (shift & 63)) | (word << ((-shift) & 63));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << (shift & 31)) | (word >> ((-shift) & 31));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> (shift & 31)) | (word << ((-shift) & 31));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << (shift & 15)) | (word >> ((-shift) & 15));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> (shift & 15)) | (word << ((-shift) & 15));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << (shift & 7)) | (word >> ((-shift) & 7));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> (shift & 7)) | (word << ((-shift) & 7));
}
# 143 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __s64 sign_extend64(__u64 value, int index)
{
 __u8 shift = 63 - index;
 return (__s64)(value << shift) >> shift;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int get_count_order(unsigned int count)
{
 int order;

 order = fls(count) - 1;
 if (count & (count - 1))
  order++;
 return order;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) int get_count_order_long(unsigned long l)
{
 if (l == 0UL)
  return -1;
 else if (l & (l - 1UL))
  return (int)fls_long(l);
 else
  return (int)fls_long(l) - 1;
}
# 201 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitops.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}
# 253 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitops.h"
extern unsigned long find_last_bit(const unsigned long *addr,
       unsigned long size);
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/log2.h" 1
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/log2.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((const))
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((const))
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((const))
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}
# 210 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/log2.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__))
int __order_base_2(unsigned long n)
{
 return n > 1 ? ( __builtin_constant_p(n - 1) ? ( __builtin_constant_p(n - 1) ? ( (n - 1) < 2 ? 0 : (n - 1) & (1ULL << 63) ? 63 : (n - 1) & (1ULL << 62) ? 62 : (n - 1) & (1ULL << 61) ? 61 : (n - 1) & (1ULL << 60) ? 60 : (n - 1) & (1ULL << 59) ? 59 : (n - 1) & (1ULL << 58) ? 58 : (n - 1) & (1ULL << 57) ? 57 : (n - 1) & (1ULL << 56) ? 56 : (n - 1) & (1ULL << 55) ? 55 : (n - 1) & (1ULL << 54) ? 54 : (n - 1) & (1ULL << 53) ? 53 : (n - 1) & (1ULL << 52) ? 52 : (n - 1) & (1ULL << 51) ? 51 : (n - 1) & (1ULL << 50) ? 50 : (n - 1) & (1ULL << 49) ? 49 : (n - 1) & (1ULL << 48) ? 48 : (n - 1) & (1ULL << 47) ? 47 : (n - 1) & (1ULL << 46) ? 46 : (n - 1) & (1ULL << 45) ? 45 : (n - 1) & (1ULL << 44) ? 44 : (n - 1) & (1ULL << 43) ? 43 : (n - 1) & (1ULL << 42) ? 42 : (n - 1) & (1ULL << 41) ? 41 : (n - 1) & (1ULL << 40) ? 40 : (n - 1) & (1ULL << 39) ? 39 : (n - 1) & (1ULL << 38) ? 38 : (n - 1) & (1ULL << 37) ? 37 : (n - 1) & (1ULL << 36) ? 36 : (n - 1) & (1ULL << 35) ? 35 : (n - 1) & (1ULL << 34) ? 34 : (n - 1) & (1ULL << 33) ? 33 : (n - 1) & (1ULL << 32) ? 32 : (n - 1) & (1ULL << 31) ? 31 : (n - 1) & (1ULL << 30) ? 30 : (n - 1) & (1ULL << 29) ? 29 : (n - 1) & (1ULL << 28) ? 28 : (n - 1) & (1ULL << 27) ? 27 : (n - 1) & (1ULL << 26) ? 26 : (n - 1) & (1ULL << 25) ? 25 : (n - 1) & (1ULL << 24) ? 24 : (n - 1) & (1ULL << 23) ? 23 : (n - 1) & (1ULL << 22) ? 22 : (n - 1) & (1ULL << 21) ? 21 : (n - 1) & (1ULL << 20) ? 20 : (n - 1) & (1ULL << 19) ? 19 : (n - 1) & (1ULL << 18) ? 18 : (n - 1) & (1ULL << 17) ? 17 : (n - 1) & (1ULL << 16) ? 16 : (n - 1) & (1ULL << 15) ? 15 : (n - 1) & (1ULL << 14) ? 14 : (n - 1) & (1ULL << 13) ? 13 : (n - 1) & (1ULL << 12) ? 12 : (n - 1) & (1ULL << 11) ? 11 : (n - 1) & (1ULL << 10) ? 10 : (n - 1) & (1ULL << 9) ? 9 : (n - 1) & (1ULL << 8) ? 8 : (n - 1) & (1ULL << 7) ? 7 : (n - 1) & (1ULL << 6) ? 6 : (n - 1) & (1ULL << 5) ? 5 : (n - 1) & (1ULL << 4) ? 4 : (n - 1) & (1ULL << 3) ? 3 : (n - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(n - 1) <= 4) ? __ilog2_u32(n - 1) : __ilog2_u64(n - 1) ) + 1 : 0;
}
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/typecheck.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kern_levels.h" 1
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cache.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kernel.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sysinfo.h" 1







struct sysinfo {
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kernel.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cache.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cache.h" 1
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cache.h" 2
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h" 2

extern const char linux_banner[];
extern const char linux_proc_banner[];



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int printk_get_level(const char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'd':
  case 'c':
   return buffer[1];
  }
 }
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *printk_skip_level(const char *buffer)
{
 if (printk_get_level(buffer))
  return buffer + 2;

 return buffer;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *printk_skip_headers(const char *buffer)
{
 while (printk_get_level(buffer))
  buffer = printk_skip_level(buffer);

 return buffer;
}
# 63 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h"
extern int console_printk[];






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}



extern char devkmsg_log_str[];
struct ctl_table;

struct va_format {
 const char *fmt;
 va_list *va;
};
# 143 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h"
extern __attribute__((format(printf, 1, 2)))
void early_printk(const char *fmt, ...);






extern void printk_nmi_enter(void);
extern void printk_nmi_exit(void);
extern void printk_nmi_direct_enter(void);
extern void printk_nmi_direct_exit(void);
# 163 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h"
           __attribute__((format(printf, 5, 0)))
int vprintk_emit(int facility, int level,
   const char *dict, size_t dictlen,
   const char *fmt, va_list args);

           __attribute__((format(printf, 1, 0)))
int vprintk(const char *fmt, va_list args);

           __attribute__((format(printf, 5, 6)))
int printk_emit(int facility, int level,
  const char *dict, size_t dictlen,
  const char *fmt, ...);

           __attribute__((format(printf, 1, 2)))
int printk(const char *fmt, ...);




__attribute__((format(printf, 1, 2))) int printk_deferred(const char *fmt, ...);






extern int __printk_ratelimit(const char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;
extern int kptr_restrict;

extern int
devkmsg_sysctl_set_loglvl(struct ctl_table *table, int write, void *buf,
     size_t *lenp, loff_t *ppos);

extern void wake_up_klogd(void);

char *log_buf_addr_get(void);
u32 log_buf_len_get(void);
void log_buf_vmcoreinfo_setup(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) setup_log_buf(int early);
__attribute__((format(printf, 1, 2))) void dump_stack_set_arch_desc(const char *fmt, ...);
void dump_stack_print_info(const char *log_lvl);
void show_regs_print_info(const char *log_lvl);
extern void printk_safe_init(void);
extern void printk_safe_flush(void);
extern void printk_safe_flush_on_panic(void);
# 287 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h"
extern void dump_stack(void) ;
# 479 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h"
extern const struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern int hex_dump_to_buffer(const void *buf, size_t len, int rowsize,
         int groupsize, char *linebuf, size_t linebuflen,
         bool ascii);

extern void print_hex_dump(const char *level, const char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      const void *buf, size_t len, bool ascii);




extern void print_hex_dump_bytes(const char *prefix_str, int prefix_type,
     const void *buf, size_t len);
# 524 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/printk.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void print_hex_dump_debug(const char *prefix_str, int prefix_type,
     int rowsize, int groupsize,
     const void *buf, size_t len, bool ascii)
{
}
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/build_bug.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h" 2
# 203 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
struct completion;
struct pt_regs;
struct user;
# 231 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
  static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ___might_sleep(const char *file, int line,
       int preempt_offset) { }
  static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __might_sleep(const char *file, int line,
       int preempt_offset) { }
# 278 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 reciprocal_scale(u32 val, u32 ep_ro)
{
 return (u32)(((u64) val * ep_ro) >> 32);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void might_fault(void) { }


extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(int state);
__attribute__((format(printf, 1, 2)))
void panic(const char *fmt, ...) __attribute__((noreturn)) ;
void nmi_panic(struct pt_regs *regs, const char *msg);
extern void oops_enter(void);
extern void oops_exit(void);
void print_oops_end_marker(void);
extern int oops_may_print(void);
void do_exit(long error_code) __attribute__((noreturn));
void complete_and_exit(struct completion *, long) __attribute__((noreturn));


void refcount_error_report(struct pt_regs *regs, const char *err);






int _kstrtoul(const char *s, unsigned int base, unsigned long *res);
int _kstrtol(const char *s, unsigned int base, long *res);

int kstrtoull(const char *s, unsigned int base, unsigned long long *res);
int kstrtoll(const char *s, unsigned int base, long long *res);
# 333 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtoul(const char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
# 362 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtol(const char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int kstrtouint(const char *s, unsigned int base, unsigned int *res);
int kstrtoint(const char *s, unsigned int base, int *res);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtou64(const char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtos64(const char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtou32(const char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtos32(const char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int kstrtou16(const char *s, unsigned int base, u16 *res);
int kstrtos16(const char *s, unsigned int base, s16 *res);
int kstrtou8(const char *s, unsigned int base, u8 *res);
int kstrtos8(const char *s, unsigned int base, s8 *res);
int kstrtobool(const char *s, bool *res);

int kstrtoull_from_user(const char *s, size_t count, unsigned int base, unsigned long long *res);
int kstrtoll_from_user(const char *s, size_t count, unsigned int base, long long *res);
int kstrtoul_from_user(const char *s, size_t count, unsigned int base, unsigned long *res);
int kstrtol_from_user(const char *s, size_t count, unsigned int base, long *res);
int kstrtouint_from_user(const char *s, size_t count, unsigned int base, unsigned int *res);
int kstrtoint_from_user(const char *s, size_t count, unsigned int base, int *res);
int kstrtou16_from_user(const char *s, size_t count, unsigned int base, u16 *res);
int kstrtos16_from_user(const char *s, size_t count, unsigned int base, s16 *res);
int kstrtou8_from_user(const char *s, size_t count, unsigned int base, u8 *res);
int kstrtos8_from_user(const char *s, size_t count, unsigned int base, s8 *res);
int kstrtobool_from_user(const char *s, size_t count, bool *res);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtou64_from_user(const char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtos64_from_user(const char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtou32_from_user(const char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstrtos32_from_user(const char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}



extern unsigned long simple_strtoul(const char *,char **,unsigned int);
extern long simple_strtol(const char *,char **,unsigned int);
extern unsigned long long simple_strtoull(const char *,char **,unsigned int);
extern long long simple_strtoll(const char *,char **,unsigned int);

extern int num_to_str(char *buf, int size, unsigned long long num);



extern __attribute__((format(printf, 2, 3))) int sprintf(char *buf, const char * fmt, ...);
extern __attribute__((format(printf, 2, 0))) int vsprintf(char *buf, const char *, va_list);
extern __attribute__((format(printf, 3, 4)))
int snprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int scnprintf(char *buf, size_t size, const char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, const char *fmt, va_list args);
extern __attribute__((format(printf, 2, 3))) __attribute__((__malloc__))
char *kasprintf(gfp_t gfp, const char *fmt, ...);
extern __attribute__((format(printf, 2, 0))) __attribute__((__malloc__))
char *kvasprintf(gfp_t gfp, const char *fmt, va_list args);
extern __attribute__((format(printf, 2, 0)))
const char *kvasprintf_const(gfp_t gfp, const char *fmt, va_list args);

extern __attribute__((format(scanf, 2, 3)))
int sscanf(const char *, const char *, ...);
extern __attribute__((format(scanf, 2, 0)))
int vsscanf(const char *, const char *, va_list);

extern int get_option(char **str, int *pint);
extern char *get_options(const char *str, int nints, int *ints);
extern unsigned long long memparse(const char *ptr, char **retptr);
extern bool parse_option_str(const char *str, const char *option);
extern char *next_arg(char *args, char **param, char **val);

extern int core_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

unsigned long int_sqrt(unsigned long);

extern void bust_spinlocks(int yes);
extern int oops_in_progress;
extern int panic_timeout;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int panic_on_warn;
extern int sysctl_panic_on_rcu_stall;
extern int sysctl_panic_on_stackoverflow;

extern bool crash_kexec_post_notifiers;






extern atomic_t panic_cpu;






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_arch_panic_timeout(int timeout, int arch_default_timeout)
{
 if (panic_timeout == arch_default_timeout)
  panic_timeout = timeout;
}
extern const char *print_tainted(void);
enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE
};
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
extern int root_mountflags;

extern bool early_boot_irqs_disabled;





extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_SCHEDULING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
} system_state;
# 555 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
struct taint_flag {
 char c_true;
 char c_false;
 bool module;
};

extern const struct taint_flag taint_flags[16];

extern const char hex_asc[];



static inline __attribute__((unused)) __attribute__((no_instrument_function)) char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern const char hex_asc_upper[];



static inline __attribute__((unused)) __attribute__((no_instrument_function)) char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

extern int hex_to_bin(char ch);
extern int hex2bin(u8 *dst, const char *src, size_t count);
extern char *bin2hex(char *dst, const void *src, size_t count);

bool mac_pton(const char *s, u8 *mac);
# 611 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((format(printf, 1, 2)))
void ____trace_printk_check_format(const char *fmt, ...)
{
}
# 690 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
extern __attribute__((format(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, const char *fmt, ...);

extern __attribute__((format(printf, 2, 3)))
int __trace_printk(unsigned long ip, const char *fmt, ...);
# 731 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
extern int __trace_bputs(unsigned long ip, const char *str);
extern int __trace_puts(unsigned long ip, const char *str, int size);

extern void trace_dump_stack(int skip);
# 753 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernel.h"
extern __attribute__((format(printf, 2, 0))) int
__ftrace_vbprintk(unsigned long ip, const char *fmt, va_list ap);

extern __attribute__((format(printf, 2, 0))) int
__ftrace_vprintk(unsigned long ip, const char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
# 46 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/percpu.h" 2
# 88 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/percpu.h"
extern void __bad_percpu_size(void);
# 511 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/percpu.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool x86_this_cpu_constant_test_bit(unsigned int nr,
                        const unsigned long *addr)
{
 unsigned long *a =
  (unsigned long *)addr + nr / 64;


 return ((1UL << (nr % 64)) & ({ typeof(*a) pfo_ret__; switch (sizeof(*a)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (*a)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (*a)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (*a)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (*a)); break; default: __bad_percpu_size(); } pfo_ret__; })) != 0;



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool x86_this_cpu_variable_test_bit(int nr,
                        const unsigned long *addr)
{
 bool oldbit;

 asm volatile("bt ""%%""gs"":" "%" "2"",%1"
   "\n\t/* output condition code " "c" "*/\n"
   : "=@cc" "c" (oldbit)
   : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/percpu.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/threads.h" 1
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/percpu.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-defs.h" 1
# 295 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-defs.h"
extern void __bad_size_call_parameter(void);


extern void __this_cpu_preempt_check(const char *op);
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/percpu.h" 2
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/percpu.h"
extern unsigned long __per_cpu_offset[8];
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/percpu.h"
extern void setup_per_cpu_areas(void);
# 544 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/percpu.h" 2


extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(unsigned long) this_cpu_off;
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/current.h" 2


struct task_struct;

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) current_task;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct task_struct *get_current(void)
{
 return ({ typeof(current_task) pfo_ret__; switch (sizeof(current_task)) { case 1: asm("mov" "b ""%%""gs"":" "%" "P1"",%0" : "=q" (pfo_ret__) : "p" (&(current_task))); break; case 2: asm("mov" "w ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(current_task))); break; case 4: asm("mov" "l ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(current_task))); break; case 8: asm("mov" "q ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(current_task))); break; default: __bad_percpu_size(); } pfo_ret__; });
}
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pid.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/poison.h" 1
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/const.h" 1
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h" 2
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 list->prev = list;
}


extern bool __list_add_valid(struct list_head *new,
         struct list_head *prev,
         struct list_head *next);
extern bool __list_del_entry_valid(struct list_head *entry);
# 56 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __list_add(struct list_head *new,
         struct list_head *prev,
         struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 next->prev = new;
 new->next = next;
 new->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (new) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}
# 77 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_add(struct list_head *new, struct list_head *head)
{
 __list_add(new, head, head->next);
}
# 91 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_add_tail(struct list_head *new, struct list_head *head)
{
 __list_add(new, head->prev, head);
}
# 103 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (next) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __list_del_entry(struct list_head *entry)
{
 if (!__list_del_entry_valid(entry))
  return;

 __list_del(entry->prev, entry->next);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_del(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->next = ((void *) 0x100 + (0xdead000000000000UL));
 entry->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 137 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_replace(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->next->prev = new;
 new->prev = old->prev;
 new->prev->next = new;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_replace_init(struct list_head *old,
     struct list_head *new)
{
 list_replace(old, new);
 INIT_LIST_HEAD(old);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int list_is_last(const struct list_head *list,
    const struct list_head *head)
{
 return list->next == head;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int list_empty(const struct list_head *head)
{
 return ({ union { typeof(head->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(head->next), __u.__c, sizeof(head->next)); else __read_once_size_nocheck(&(head->next), __u.__c, sizeof(head->next)); do { } while (0); __u.__val; }) == head;
}
# 219 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int list_empty_careful(const struct list_head *head)
{
 struct list_head *next = head->next;
 return (next == head) && (next == head->prev);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = head->next;
  list_move_tail(first, head);
 }
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int list_is_singular(const struct list_head *head)
{
 return !list_empty(head) && (head->next == head->prev);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = entry->next;
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}
# 274 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (head->next != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}
# 302 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_cut_before(struct list_head *list,
       struct list_head *head,
       struct list_head *entry)
{
 if (head->next == entry) {
  INIT_LIST_HEAD(list);
  return;
 }
 list->next = head->next;
 list->next->prev = list;
 list->prev = entry->prev;
 list->prev->next = list;
 head->next = entry;
 entry->prev = head;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __list_splice(const struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_splice(const struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, head->next);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head->prev, head);
}
# 363 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, head->next);
  INIT_LIST_HEAD(list);
 }
}
# 380 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head->prev, head);
  INIT_LIST_HEAD(list);
 }
}
# 658 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int hlist_unhashed(const struct hlist_node *h)
{
 return !h->pprev;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int hlist_empty(const struct hlist_head *h)
{
 return !({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = n->next;
 struct hlist_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (next)
  next->pprev = pprev;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = h->first;
 n->next = first;
 if (first)
  first->pprev = &n->next;
 ({ union { typeof(h->first) __val; char __c[1]; } __u = { .__val = ( typeof(h->first)) (n) }; __write_once_size(&(h->first), __u.__c, sizeof(h->first)); __u.__val; });
 n->pprev = &h->first;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 next->pprev = &n->next;
 ({ union { typeof(*(n->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof(*(n->pprev))) (n) }; __write_once_size(&(*(n->pprev)), __u.__c, sizeof(*(n->pprev))); __u.__val; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_behind(struct hlist_node *n,
        struct hlist_node *prev)
{
 n->next = prev->next;
 ({ union { typeof(prev->next) __val; char __c[1]; } __u = { .__val = ( typeof(prev->next)) (n) }; __write_once_size(&(prev->next), __u.__c, sizeof(prev->next)); __u.__val; });
 n->pprev = &prev->next;

 if (n->next)
  n->next->pprev = &n->next;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool hlist_fake(struct hlist_node *h)
{
 return h->pprev == &h->next;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool
hlist_is_singular_node(struct hlist_node *n, struct hlist_head *h)
{
 return !n->next && n->pprev == &h->first;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_move_list(struct hlist_head *old,
       struct hlist_head *new)
{
 new->first = old->first;
 if (new->first)
  new->first->pprev = &new->first;
 old->first = ((void *)0);
}
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h" 1
# 38 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cmpxchg.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cmpxchg.h"
extern void __xchg_wrong_size(void)
                                                  ;
extern void __cmpxchg_wrong_size(void)
                                                     ;
extern void __xadd_wrong_size(void)
                                                  ;
extern void __add_wrong_size(void)
                                                 ;
# 145 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cmpxchg.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cmpxchg_64.h" 1




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_64bit(volatile u64 *ptr, u64 val)
{
 *ptr = val;
}
# 146 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cmpxchg.h" 2
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h" 2
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int arch_atomic_read(const atomic_t *v)
{




 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });
}
# 41 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic_set(atomic_t *v, int i)
{
 ({ union { typeof(v->counter) __val; char __c[1]; } __u = { .__val = ( typeof(v->counter)) (i) }; __write_once_size(&(v->counter), __u.__c, sizeof(v->counter)); __u.__val; });
}
# 53 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic_add(int i, atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addl %1,%0"
       : "+m" (v->counter)
       : "ir" (i) : "memory");
}
# 67 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic_sub(int i, atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subl %1,%0"
       : "+m" (v->counter)
       : "ir" (i) : "memory");
}
# 83 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_atomic_sub_and_test(int i, atomic_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subl" " %2, " "%0" "\n\t/* output condition code " "e" "*/\n" : [counter] "+m" (v->counter), "=@cc" "e" (c) : "er" (i) : "memory"); return c; } while (0);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic_inc(atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incl %0"
       : "+m" (v->counter) :: "memory");
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic_dec(atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decl %0"
       : "+m" (v->counter) :: "memory");
}
# 120 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_atomic_dec_and_test(atomic_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decl" " " "%0" "\n\t/* output condition code " "e" "*/\n" : [counter] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); return c; } while (0);
}
# 133 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_atomic_inc_and_test(atomic_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incl" " " "%0" "\n\t/* output condition code " "e" "*/\n" : [counter] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); return c; } while (0);
}
# 147 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_atomic_add_negative(int i, atomic_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addl" " %2, " "%0" "\n\t/* output condition code " "s" "*/\n" : [counter] "+m" (v->counter), "=@cc" "s" (c) : "er" (i) : "memory"); return c; } while (0);
}
# 159 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int arch_atomic_add_return(int i, atomic_t *v)
{
 return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}
# 171 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int arch_atomic_sub_return(int i, atomic_t *v)
{
 return arch_atomic_add_return(-i, v);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int arch_atomic_fetch_add(int i, atomic_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int arch_atomic_fetch_sub(int i, atomic_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((-i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int arch_atomic_cmpxchg(atomic_t *v, int old, int new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 return ({ bool success; __typeof__(((&v->counter))) _old = (__typeof__(((&v->counter))))(((old))); __typeof__(*(((&v->counter)))) __old = *_old; __typeof__(*(((&v->counter)))) __new = (((new))); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "q" (__new) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } default: __cmpxchg_wrong_size(); } if (__builtin_expect(!!(!success), 0)) *_old = __old; __builtin_expect(!!(success), 1); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int arch_atomic_xchg(atomic_t *v, int new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic_and(int i, atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "andl %1,%0"
   : "+m" (v->counter)
   : "ir" (i)
   : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int arch_atomic_fetch_and(int i, atomic_t *v)
{
 int val = arch_atomic_read(v);

 do { } while (!arch_atomic_try_cmpxchg(v, &val, val & i));

 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic_or(int i, atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "orl %1,%0"
   : "+m" (v->counter)
   : "ir" (i)
   : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int arch_atomic_fetch_or(int i, atomic_t *v)
{
 int val = arch_atomic_read(v);

 do { } while (!arch_atomic_try_cmpxchg(v, &val, val | i));

 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic_xor(int i, atomic_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xorl %1,%0"
   : "+m" (v->counter)
   : "ir" (i)
   : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int arch_atomic_fetch_xor(int i, atomic_t *v)
{
 int val = arch_atomic_read(v);

 do { } while (!arch_atomic_try_cmpxchg(v, &val, val ^ i));

 return val;
}
# 265 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int __arch_atomic_add_unless(atomic_t *v, int a, int u)
{
 int c = arch_atomic_read(v);

 do {
  if (__builtin_expect(!!(c == u), 0))
   break;
 } while (!arch_atomic_try_cmpxchg(v, &c, c + a));

 return c;
}





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_read(const atomic64_t *v)
{
 return ({ union { typeof((v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&((v)->counter), __u.__c, sizeof((v)->counter)); else __read_once_size_nocheck(&((v)->counter), __u.__c, sizeof((v)->counter)); do { } while (0); __u.__val; });
}
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic64_set(atomic64_t *v, long i)
{
 ({ union { typeof(v->counter) __val; char __c[1]; } __u = { .__val = ( typeof(v->counter)) (i) }; __write_once_size(&(v->counter), __u.__c, sizeof(v->counter)); __u.__val; });
}
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic64_add(long i, atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter) : "memory");
}
# 58 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic64_sub(long i, atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter) : "memory");
}
# 74 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool arch_atomic64_sub_and_test(long i, atomic64_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subq" " %2, " "%0" "\n\t/* output condition code " "e" "*/\n" : [counter] "+m" (v->counter), "=@cc" "e" (c) : "er" (i) : "memory"); return c; } while (0);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic64_inc(atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incq %0"
       : "=m" (v->counter)
       : "m" (v->counter) : "memory");
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void arch_atomic64_dec(atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decq %0"
       : "=m" (v->counter)
       : "m" (v->counter) : "memory");
}
# 113 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool arch_atomic64_dec_and_test(atomic64_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decq" " " "%0" "\n\t/* output condition code " "e" "*/\n" : [counter] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); return c; } while (0);
}
# 126 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool arch_atomic64_inc_and_test(atomic64_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incq" " " "%0" "\n\t/* output condition code " "e" "*/\n" : [counter] "+m" (v->counter), "=@cc" "e" (c) : : "memory"); return c; } while (0);
}
# 140 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool arch_atomic64_add_negative(long i, atomic64_t *v)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addq" " %2, " "%0" "\n\t/* output condition code " "s" "*/\n" : [counter] "+m" (v->counter), "=@cc" "s" (c) : "er" (i) : "memory"); return c; } while (0);
}
# 152 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) long arch_atomic64_add_return(long i, atomic64_t *v)
{
 return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_sub_return(long i, atomic64_t *v)
{
 return arch_atomic64_add_return(-i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_fetch_add(long i, atomic64_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_fetch_sub(long i, atomic64_t *v)
{
 return ({ __typeof__ (*(((&v->counter)))) __ret = (((-i))); switch (sizeof(*(((&v->counter))))) { case 1: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_cmpxchg(atomic64_t *v, long old, long new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((new)); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)((&v->counter)); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_atomic64_try_cmpxchg(atomic64_t *v, s64 *old, long new)
{
 return ({ bool success; __typeof__(((&v->counter))) _old = (__typeof__(((&v->counter))))(((old))); __typeof__(*(((&v->counter)))) __old = *_old; __typeof__(*(((&v->counter)))) __new = (((new))); switch ((sizeof(*(&v->counter)))) { case 1: { volatile u8 *__ptr = (volatile u8 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "q" (__new) : "memory"); break; } case 2: { volatile u16 *__ptr = (volatile u16 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 4: { volatile u32 *__ptr = (volatile u32 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } case 8: { volatile u64 *__ptr = (volatile u64 *)(((&v->counter))); asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %[new], %[ptr]" "\n\t/* output condition code " "z" "*/\n" : "=@cc" "z" (success), [ptr] "+m" (*__ptr), [old] "+a" (__old) : [new] "r" (__new) : "memory"); break; } default: __cmpxchg_wrong_size(); } if (__builtin_expect(!!(!success), 0)) *_old = __old; __builtin_expect(!!(success), 1); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_xchg(atomic64_t *v, long new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((new)); switch (sizeof(*((&v->counter)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}
# 200 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool arch_atomic64_add_unless(atomic64_t *v, long a, long u)
{
 s64 c = arch_atomic64_read(v);
 do {
  if (__builtin_expect(!!(c == u), 0))
   return false;
 } while (!arch_atomic64_try_cmpxchg(v, &c, c + a));
 return true;
}
# 219 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic64_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_dec_if_positive(atomic64_t *v)
{
 s64 dec, c = arch_atomic64_read(v);
 do {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
 } while (!arch_atomic64_try_cmpxchg(v, &c, dec));
 return dec;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic64_and(long i, atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "andq %1,%0"
   : "+m" (v->counter)
   : "er" (i)
   : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_fetch_and(long i, atomic64_t *v)
{
 s64 val = arch_atomic64_read(v);

 do {
 } while (!arch_atomic64_try_cmpxchg(v, &val, val & i));
 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic64_or(long i, atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "orq %1,%0"
   : "+m" (v->counter)
   : "er" (i)
   : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_fetch_or(long i, atomic64_t *v)
{
 s64 val = arch_atomic64_read(v);

 do {
 } while (!arch_atomic64_try_cmpxchg(v, &val, val | i));
 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_atomic64_xor(long i, atomic64_t *v)
{
 asm volatile(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xorq %1,%0"
   : "+m" (v->counter)
   : "er" (i)
   : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long arch_atomic64_fetch_xor(long i, atomic64_t *v)
{
 s64 val = arch_atomic64_read(v);

 do {
 } while (!arch_atomic64_try_cmpxchg(v, &val, val ^ i));
 return val;
}
# 281 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-instrumented.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-instrumented.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_read(const atomic_t *v)
{
 kasan_check_read(v, sizeof(*v));
 return arch_atomic_read(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_read(const atomic64_t *v)
{
 kasan_check_read(v, sizeof(*v));
 return arch_atomic64_read(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_set(atomic_t *v, int i)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_set(v, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_set(atomic64_t *v, s64 i)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_set(v, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_xchg(atomic_t *v, int i)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_xchg(v, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_xchg(atomic64_t *v, s64 i)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_xchg(v, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_cmpxchg(atomic_t *v, int old, int new)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_cmpxchg(v, old, new);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_cmpxchg(atomic64_t *v, s64 old, s64 new)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_cmpxchg(v, old, new);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic_try_cmpxchg(atomic_t *v, int *old, int new)
{
 kasan_check_write(v, sizeof(*v));
 kasan_check_read(old, sizeof(*old));
 return arch_atomic_try_cmpxchg(v, old, new);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic64_try_cmpxchg(atomic64_t *v, s64 *old, s64 new)
{
 kasan_check_write(v, sizeof(*v));
 kasan_check_read(old, sizeof(*old));
 return arch_atomic64_try_cmpxchg(v, old, new);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int __atomic_add_unless(atomic_t *v, int a, int u)
{
 kasan_check_write(v, sizeof(*v));
 return __arch_atomic_add_unless(v, a, u);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic64_add_unless(atomic64_t *v, s64 a, s64 u)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_unless(v, a, u);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_inc(atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_inc(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_inc(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_inc(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_dec(atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_dec(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_dec(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_dec(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_add(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_add(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_add(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_add(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_sub(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_sub(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_sub(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_sub(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_and(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_and(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_and(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_and(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_or(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_or(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_or(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_or(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_xor(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic_xor(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic64_xor(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 arch_atomic64_xor(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_inc_return(atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return (arch_atomic_add_return(1, v));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_inc_return(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return (arch_atomic64_add_return(1, (v)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_dec_return(atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return (arch_atomic_sub_return(1, v));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_dec_return(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return (arch_atomic64_sub_return(1, (v)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_inc_not_zero(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_unless((v), 1, 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_dec_if_positive(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_dec_if_positive(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic_dec_and_test(atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_dec_and_test(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic64_dec_and_test(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_dec_and_test(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic_inc_and_test(atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_inc_and_test(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic64_inc_and_test(atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_inc_and_test(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_add_return(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_add_return(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_add_return(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_return(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_sub_return(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_sub_return(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_sub_return(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_sub_return(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_fetch_add(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_add(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_fetch_add(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_add(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_fetch_sub(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_sub(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_fetch_sub(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_sub(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_fetch_and(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_and(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_fetch_and(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_and(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_fetch_or(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_or(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_fetch_or(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_or(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int atomic_fetch_xor(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_fetch_xor(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) s64 atomic64_fetch_xor(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_fetch_xor(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic_sub_and_test(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_sub_and_test(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic64_sub_and_test(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_sub_and_test(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic_add_negative(int i, atomic_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic_add_negative(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool atomic64_add_negative(s64 i, atomic64_t *v)
{
 kasan_check_write(v, sizeof(*v));
 return arch_atomic64_add_negative(i, v);
}
# 284 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/atomic.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h" 2
# 531 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_add_unless(atomic_t *v, int a, int u)
{
 return __atomic_add_unless(v, a, u) != u;
}
# 548 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void atomic_andnot(int i, atomic_t *v)
{
 atomic_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot(int i, atomic_t *v)
{
 return atomic_fetch_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot_relaxed(int i, atomic_t *v)
{
 return atomic_fetch_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot_acquire(int i, atomic_t *v)
{
 return atomic_fetch_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_fetch_andnot_release(int i, atomic_t *v)
{
 return atomic_fetch_and(~i, v);
}
# 587 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_inc_not_zero_hint(atomic_t *v, int hint)
{
 int val, c = hint;


 if (!hint)
  return atomic_add_unless((v), 1, 0);

 do {
  val = atomic_cmpxchg(v, c, c + 1);
  if (val == c)
   return 1;
  c = val;
 } while (c);

 return 0;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_inc_unless_negative(atomic_t *p)
{
 int v, v1;
 for (v = 0; v >= 0; v = v1) {
  v1 = atomic_cmpxchg(p, v, v + 1);
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_dec_unless_positive(atomic_t *p)
{
 int v, v1;
 for (v = 0; v <= 0; v = v1) {
  v1 = atomic_cmpxchg(p, v, v - 1);
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}
# 640 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_dec_if_positive(atomic_t *v)
{
 int c, old, dec;
 c = atomic_read(v);
 for (;;) {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
  old = atomic_cmpxchg((v), c, dec);
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return dec;
}
# 1050 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void atomic64_andnot(long long i, atomic64_t *v)
{
 atomic64_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long long atomic64_fetch_andnot(long long i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long long atomic64_fetch_andnot_relaxed(long long i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long long atomic64_fetch_andnot_acquire(long long i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long long atomic64_fetch_andnot_release(long long i, atomic64_t *v)
{
 return atomic64_fetch_and(~i, v);
}



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;
# 45 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_read(const atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_read(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_read_acquire(const atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)({ typeof(*&(v)->counter) ___p1 = ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u; if (1) __read_once_size(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); else __read_once_size_nocheck(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); do { } while (0); __u.__val; }); do { bool __cond = !((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long))); extern void __compiletime_assert_0(void) ; if (__cond) __compiletime_assert_0(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ___p1; }); }
# 57 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void atomic_long_set(atomic_long_t *l, long i) { atomic64_t *v = (atomic64_t *)l; atomic64_set(v, i); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void atomic_long_set_release(atomic_long_t *l, long i) { atomic64_t *v = (atomic64_t *)l; do { do { bool __cond = !((sizeof(*&(v)->counter) == sizeof(char) || sizeof(*&(v)->counter) == sizeof(short) || sizeof(*&(v)->counter) == sizeof(int) || sizeof(*&(v)->counter) == sizeof(long))); extern void __compiletime_assert_1(void) ; if (__cond) __compiletime_assert_1(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(v)->counter) __val; char __c[1]; } __u = { .__val = ( typeof(*&(v)->counter)) ((i)) }; __write_once_size(&(*&(v)->counter), __u.__c, sizeof(*&(v)->counter)); __u.__val; }); } while (0); }
# 70 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_add_return(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_add_return_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_add_return_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_add_return_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_add_return(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_sub_return_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_sub_return(i, v); }
# 102 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_inc(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_inc(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_dec(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_dec(v);
}
# 125 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_add_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_sub_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_and_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_and(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot_relaxed(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot_acquire(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_andnot_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_andnot_release(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_or_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_or(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor_relaxed(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor_acquire(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_xor_release(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_xor(i, v); }
# 161 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(1, (v)); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(1, (v)); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(1, (v)); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_inc_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_add(1, (v)); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(1, (v)); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(1, (v)); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(1, (v)); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_fetch_dec_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_fetch_sub(1, (v)); }
# 181 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_add(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_add(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_sub(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_sub(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_and(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_and(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_andnot(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_andnot(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_or(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_or(i, v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void atomic_long_xor(long i, atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; atomic64_xor(i, v); }



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_long_sub_and_test(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_sub_and_test(i, v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_long_dec_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_dec_and_test(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_long_inc_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_inc_and_test(v);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int atomic_long_add_negative(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_add_negative(i, v);
}
# 226 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/atomic-long.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_inc_return(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_inc_return(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_inc_return(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_inc_return_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_inc_return(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_dec_return(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return_relaxed(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_dec_return(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return_acquire(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_dec_return(v); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_dec_return_release(atomic_long_t *l) { atomic64_t *v = (atomic64_t *)l; return (long)atomic64_dec_return(v); }



static inline __attribute__((unused)) __attribute__((no_instrument_function)) long atomic_long_add_unless(atomic_long_t *l, long a, long u)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)atomic64_add_unless(v, a, u);
}
# 1077 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/atomic.h" 2
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/irqflags.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/irqflags.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/irqflags.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor-flags.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/processor-flags.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor-flags.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mem_encrypt.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mem_encrypt.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mem_encrypt.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mem_encrypt.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h" 1
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/screen_info.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/screen_info.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/screen_info.h"
struct screen_info {
 __u8 orig_x;
 __u8 orig_y;
 __u16 ext_mem_k;
 __u16 orig_video_page;
 __u8 orig_video_mode;
 __u8 orig_video_cols;
 __u8 flags;
 __u8 unused2;
 __u16 orig_video_ega_bx;
 __u16 unused3;
 __u8 orig_video_lines;
 __u8 orig_video_isVGA;
 __u16 orig_video_points;


 __u16 lfb_width;
 __u16 lfb_height;
 __u16 lfb_depth;
 __u32 lfb_base;
 __u32 lfb_size;
 __u16 cl_magic, cl_offset;
 __u16 lfb_linelength;
 __u8 red_size;
 __u8 red_pos;
 __u8 green_size;
 __u8 green_pos;
 __u8 blue_size;
 __u8 blue_pos;
 __u8 rsvd_size;
 __u8 rsvd_pos;
 __u16 vesapm_seg;
 __u16 vesapm_off;
 __u16 pages;
 __u16 vesa_attributes;
 __u32 capabilities;
 __u32 ext_lfb_base;
 __u8 _reserved[2];
} __attribute__((packed));
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/screen_info.h" 2

extern struct screen_info screen_info;
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/apm_bios.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/apm_bios.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/apm_bios.h" 1
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/apm_bios.h"
typedef unsigned short apm_event_t;
typedef unsigned short apm_eventinfo_t;

struct apm_bios_info {
 __u16 version;
 __u16 cseg;
 __u32 offset;
 __u16 cseg_16;
 __u16 dseg;
 __u16 flags;
 __u16 cseg_len;
 __u16 cseg_16_len;
 __u16 dseg_len;
};
# 133 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/apm_bios.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/ioctl.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ioctl.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/ioctl.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/ioctl.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/ioctl.h" 2





extern unsigned int __invalid_size_argument_for_IOC;
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ioctl.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/ioctl.h" 2
# 134 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/apm_bios.h" 2
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/apm_bios.h" 2
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/apm_bios.h"
struct apm_info {
 struct apm_bios_info bios;
 unsigned short connection_version;
 int get_power_status_broken;
 int get_power_status_swabinminutes;
 int allow_ints;
 int forbid_idle;
 int realmode_power_off;
 int disabled;
};
# 94 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/apm_bios.h"
extern struct apm_info apm_info;
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/edd.h" 1
# 33 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/edd.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/edd.h" 1
# 72 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/edd.h"
struct edd_device_params {
 __u16 length;
 __u16 info_flags;
 __u32 num_default_cylinders;
 __u32 num_default_heads;
 __u32 sectors_per_track;
 __u64 number_of_sectors;
 __u16 bytes_per_sector;
 __u32 dpte_ptr;
 __u16 key;
 __u8 device_path_info_length;
 __u8 reserved2;
 __u16 reserved3;
 __u8 host_bus_type[4];
 __u8 interface_type[8];
 union {
  struct {
   __u16 base_address;
   __u16 reserved1;
   __u32 reserved2;
  } __attribute__ ((packed)) isa;
  struct {
   __u8 bus;
   __u8 slot;
   __u8 function;
   __u8 channel;
   __u32 reserved;
  } __attribute__ ((packed)) pci;

  struct {
   __u64 reserved;
  } __attribute__ ((packed)) ibnd;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) xprs;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) htpt;
  struct {
   __u64 reserved;
  } __attribute__ ((packed)) unknown;
 } interface_path;
 union {
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) ata;
  struct {
   __u8 device;
   __u8 lun;
   __u8 reserved1;
   __u8 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) atapi;
  struct {
   __u16 id;
   __u64 lun;
   __u16 reserved1;
   __u32 reserved2;
  } __attribute__ ((packed)) scsi;
  struct {
   __u64 serial_number;
   __u64 reserved;
  } __attribute__ ((packed)) usb;
  struct {
   __u64 eui;
   __u64 reserved;
  } __attribute__ ((packed)) i1394;
  struct {
   __u64 wwid;
   __u64 lun;
  } __attribute__ ((packed)) fibre;
  struct {
   __u64 identity_tag;
   __u64 reserved;
  } __attribute__ ((packed)) i2o;
  struct {
   __u32 array_number;
   __u32 reserved1;
   __u64 reserved2;
  } __attribute__ ((packed)) raid;
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  } __attribute__ ((packed)) sata;
  struct {
   __u64 reserved1;
   __u64 reserved2;
  } __attribute__ ((packed)) unknown;
 } device_path;
 __u8 reserved4;
 __u8 checksum;
} __attribute__ ((packed));

struct edd_info {
 __u8 device;
 __u8 version;
 __u16 interface_support;
 __u16 legacy_max_cylinder;
 __u8 legacy_max_head;
 __u8 legacy_sectors_per_track;
 struct edd_device_params params;
} __attribute__ ((packed));

struct edd {
 unsigned int mbr_signature[16];
 struct edd_info edd_info[6];
 unsigned char mbr_signature_nr;
 unsigned char edd_info_nr;
};
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/edd.h" 2


extern struct edd edd;
# 38 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ist.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ist.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ist.h" 1
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ist.h"
struct ist_info {
 __u32 signature;
 __u32 command;
 __u32 event;
 __u32 perf_level;
};
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ist.h" 2


extern struct ist_info ist_info;
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/video/edid.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/video/edid.h" 1




struct edid_info {
 unsigned char dummy[128];
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/video/edid.h" 2


extern struct edid_info edid_info;
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h" 2


struct setup_data {
 __u64 next;
 __u32 type;
 __u32 len;
 __u8 data[0];
};

struct setup_header {
 __u8 setup_sects;
 __u16 root_flags;
 __u32 syssize;
 __u16 ram_size;
 __u16 vid_mode;
 __u16 root_dev;
 __u16 boot_flag;
 __u16 jump;
 __u32 header;
 __u16 version;
 __u32 realmode_swtch;
 __u16 start_sys_seg;
 __u16 kernel_version;
 __u8 type_of_loader;
 __u8 loadflags;
 __u16 setup_move_size;
 __u32 code32_start;
 __u32 ramdisk_image;
 __u32 ramdisk_size;
 __u32 bootsect_kludge;
 __u16 heap_end_ptr;
 __u8 ext_loader_ver;
 __u8 ext_loader_type;
 __u32 cmd_line_ptr;
 __u32 initrd_addr_max;
 __u32 kernel_alignment;
 __u8 relocatable_kernel;
 __u8 min_alignment;
 __u16 xloadflags;
 __u32 cmdline_size;
 __u32 hardware_subarch;
 __u64 hardware_subarch_data;
 __u32 payload_offset;
 __u32 payload_length;
 __u64 setup_data;
 __u64 pref_address;
 __u32 init_size;
 __u32 handover_offset;
} __attribute__((packed));

struct sys_desc_table {
 __u16 length;
 __u8 table[14];
};


struct olpc_ofw_header {
 __u32 ofw_magic;
 __u32 ofw_version;
 __u32 cif_handler;
 __u32 irq_desc_table;
} __attribute__((packed));

struct efi_info {
 __u32 efi_loader_signature;
 __u32 efi_systab;
 __u32 efi_memdesc_size;
 __u32 efi_memdesc_version;
 __u32 efi_memmap;
 __u32 efi_memmap_size;
 __u32 efi_systab_hi;
 __u32 efi_memmap_hi;
};
# 123 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h"
struct boot_e820_entry {
 __u64 addr;
 __u64 size;
 __u32 type;
} __attribute__((packed));


struct boot_params {
 struct screen_info screen_info;
 struct apm_bios_info apm_bios_info;
 __u8 _pad2[4];
 __u64 tboot_addr;
 struct ist_info ist_info;
 __u8 _pad3[16];
 __u8 hd0_info[16];
 __u8 hd1_info[16];
 struct sys_desc_table sys_desc_table;
 struct olpc_ofw_header olpc_ofw_header;
 __u32 ext_ramdisk_image;
 __u32 ext_ramdisk_size;
 __u32 ext_cmd_line_ptr;
 __u8 _pad4[116];
 struct edid_info edid_info;
 struct efi_info efi_info;
 __u32 alt_mem_k;
 __u32 scratch;
 __u8 e820_entries;
 __u8 eddbuf_entries;
 __u8 edd_mbr_sig_buf_entries;
 __u8 kbd_status;
 __u8 secure_boot;
 __u8 _pad5[2];
# 166 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h"
 __u8 sentinel;
 __u8 _pad6[1];
 struct setup_header hdr;
 __u8 _pad7[0x290-0x1f1-sizeof(struct setup_header)];
 __u32 edd_mbr_sig_buffer[16];
 struct boot_e820_entry e820_table[128];
 __u8 _pad8[48];
 struct edd_info eddbuf[6];
 __u8 _pad9[276];
} __attribute__((packed));
# 216 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/bootparam.h"
enum x86_hardware_subarch {
 X86_SUBARCH_PC = 0,
 X86_SUBARCH_LGUEST,
 X86_SUBARCH_XEN,
 X86_SUBARCH_INTEL_MID,
 X86_SUBARCH_CE4100,
 X86_NR_SUBARCHS,
};
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mem_encrypt.h" 2
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mem_encrypt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) sme_early_encrypt(resource_size_t paddr,
         unsigned long size) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) sme_early_decrypt(resource_size_t paddr,
         unsigned long size) { }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) sme_map_bootdata(char *real_mode_data) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) sme_unmap_bootdata(char *real_mode_data) { }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) sme_early_init(void) { }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) sme_encrypt_kernel(struct boot_params *bp) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) sme_enable(struct boot_params *bp) { }
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mem_encrypt.h" 2







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool sme_active(void)
{
 return !!0ULL;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 sme_get_me_mask(void)
{
 return 0ULL;
}
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor-flags.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/irqflags.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/static_key.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h" 1
# 83 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h"
extern bool static_key_initialized;







struct static_key {
 atomic_t enabled;
# 106 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h"
 union {
  unsigned long type;
  struct jump_entry *entries;
  struct static_key_mod *next;
 };
};
# 121 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/jump_label.h" 1
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/jump_label.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_static_branch(struct static_key *key, bool branch)
{
 do { asm goto("1:" ".byte " "0x0f,0x1f,0x44,0x00,0" "\n\t" ".pushsection __jump_table,  \"aw\" \n\t" " " ".balign 8" " " "\n\t" " " ".quad" " " "1b, %l[l_yes], %c0 + %c1 \n\t" ".popsection \n\t" : : "i" (key), "i" (branch) : : l_yes); asm (""); } while (0);







 return false;
l_yes:
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool arch_static_branch_jump(struct static_key *key, bool branch)
{
 do { asm goto("1:" ".byte 0xe9\n\t .long %l[l_yes] - 2f\n\t" "2:\n\t" ".pushsection __jump_table,  \"aw\" \n\t" " " ".balign 8" " " "\n\t" " " ".quad" " " "1b, %l[l_yes], %c0 + %c1 \n\t" ".popsection \n\t" : : "i" (key), "i" (branch) : : l_yes); asm (""); } while (0);
# 60 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/jump_label.h"
 return false;
l_yes:
 return true;
}


typedef u64 jump_label_t;




struct jump_entry {
 jump_label_t code;
 jump_label_t target;
 jump_label_t key;
};
# 122 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h" 2




enum jump_label_type {
 JUMP_LABEL_NOP = 0,
 JUMP_LABEL_JMP,
};

struct module;
# 140 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool static_key_false(struct static_key *key)
{
 return arch_static_branch(key, false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool static_key_true(struct static_key *key)
{
 return !arch_static_branch(key, true);
}

extern struct jump_entry __start___jump_table[];
extern struct jump_entry __stop___jump_table[];

extern void jump_label_init(void);
extern void jump_label_lock(void);
extern void jump_label_unlock(void);
extern void arch_jump_label_transform(struct jump_entry *entry,
          enum jump_label_type type);
extern void arch_jump_label_transform_static(struct jump_entry *entry,
          enum jump_label_type type);
extern int jump_label_text_reserved(void *start, void *end);
extern void static_key_slow_inc(struct static_key *key);
extern void static_key_slow_dec(struct static_key *key);
extern void static_key_slow_inc_cpuslocked(struct static_key *key);
extern void static_key_slow_dec_cpuslocked(struct static_key *key);
extern void jump_label_apply_nops(struct module *mod);
extern int static_key_count(struct static_key *key);
extern void static_key_enable(struct static_key *key);
extern void static_key_disable(struct static_key *key);
extern void static_key_enable_cpuslocked(struct static_key *key);
extern void static_key_disable_cpuslocked(struct static_key *key);
# 285 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h"
struct static_key_true {
 struct static_key key;
};

struct static_key_false {
 struct static_key key;
};
# 318 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jump_label.h"
extern bool ____wrong_branch_error(void);
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/static_key.h" 2
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/alternative-asm.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr-index.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h" 2
# 224 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h"
enum spectre_v2_mitigation {
 SPECTRE_V2_NONE,
 SPECTRE_V2_RETPOLINE_GENERIC,
 SPECTRE_V2_RETPOLINE_AMD,
 SPECTRE_V2_IBRS_ENHANCED,
};


enum spectre_v2_user_mitigation {
 SPECTRE_V2_USER_NONE,
 SPECTRE_V2_USER_STRICT,
 SPECTRE_V2_USER_PRCTL,
 SPECTRE_V2_USER_SECCOMP,
};


enum ssb_mitigation {
 SPEC_STORE_BYPASS_NONE,
 SPEC_STORE_BYPASS_DISABLE,
 SPEC_STORE_BYPASS_PRCTL,
 SPEC_STORE_BYPASS_SECCOMP,
};

extern char __indirect_thunk_start[];
extern char __indirect_thunk_end[];







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void vmexit_fill_RSB(void)
{

 unsigned long loops;

 asm volatile ("999:\n\t" ".pushsection .discard.nospec\n\t" ".long 999b - .\n\t" ".popsection\n\t"
        "661:\n\t" "jmp 910f" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 7*32+12)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mov $(32/2), %0; 771: call 772f; 773: pause; lfence; jmp 773b; 772: call 774f; 775: pause; lfence; jmp 775b; 774: dec %0; jnz 771b; add $(64/8) * 32, %1;" "\n" "665""1" ":\n\t" ".popsection\n"


        "910:"
        : "=r" (loops), "+r" (current_stack_pointer)
        : : "memory" );

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
void alternative_msr_write(unsigned int msr, u64 val, unsigned int feature)
{
 asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "%c[feature]" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "wrmsr" "\n" "665""1" ":\n\t" ".popsection\n"
  : : "c" (msr),
      "a" ((u32)val),
      "d" ((u32)(val >> 32)),
      [feature] "i" (feature)
  : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void indirect_branch_prediction_barrier(void)
{
 u64 val = (1UL << (0));

 alternative_msr_write(0x00000049, val, ( 7*32+21));
}


extern u64 x86_spec_ctrl_base;
# 316 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h"
extern struct static_key_false switch_to_cond_stibp;
extern struct static_key_false switch_mm_cond_ibpb;
extern struct static_key_false switch_mm_always_ibpb;

extern struct static_key_false mds_user_clear;
extern struct static_key_false mds_idle_clear;


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/segment.h" 1
# 249 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/segment.h"
extern const char early_idt_handler_array[32][9];
extern void early_ignore_irq(void);
# 295 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/segment.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __loadsegment_fs(unsigned short value)
{
 asm volatile("						\n"
       "1:	movw %0, %%fs			\n"
       "2:					\n"

       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_clear_fs" ") - .\n" " .popsection\n"

       : : "rm" (value) : "memory");
}
# 324 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h" 2








static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mds_clear_cpu_buffers(void)
{
 static const u16 ds = (3*8);
# 345 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/nospec-branch.h"
 asm volatile("verw %[ds]" : : [ds] "m" (ds) : "cc");
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mds_user_clear_cpu_buffers(void)
{
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&mds_user_clear), struct static_key_true)) branch = !arch_static_branch(&(&mds_user_clear)->key, true); else if (__builtin_types_compatible_p(typeof(*&mds_user_clear), struct static_key_false)) branch = !arch_static_branch_jump(&(&mds_user_clear)->key, true); else branch = ____wrong_branch_error(); branch; }))
  mds_clear_cpu_buffers();
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mds_idle_clear_cpu_buffers(void)
{
 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&mds_idle_clear), struct static_key_true)) branch = !arch_static_branch(&(&mds_idle_clear)->key, true); else if (__builtin_types_compatible_p(typeof(*&mds_idle_clear), struct static_key_false)) branch = !arch_static_branch_jump(&(&mds_idle_clear)->key, true); else branch = ____wrong_branch_error(); branch; }))
  mds_clear_cpu_buffers();
}
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/irqflags.h" 2
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/irqflags.h"
extern inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long native_save_fl(void);
extern inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long native_save_fl(void)
{
 unsigned long flags;






 asm volatile("# __raw_save_flags\n\t"
       "pushf ; pop %0"
       : "=rm" (flags)
       :
       : "memory");

 return flags;
}

extern inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_restore_fl(unsigned long flags);
extern inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_restore_fl(unsigned long flags)
{
 asm volatile("push %0 ; popf"
       :
       :"g" (flags)
       :"memory", "cc");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_irq_disable(void)
{
 asm volatile("cli": : :"memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_irq_enable(void)
{
 asm volatile("sti": : :"memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void native_safe_halt(void)
{
 mds_idle_clear_cpu_buffers();
 asm volatile("sti; hlt": : :"memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__section__(".cpuidle.text"))) void native_halt(void)
{
 mds_idle_clear_cpu_buffers();
 asm volatile("hlt": : :"memory");
}





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_types.h" 1
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_64_types.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/kaslr.h" 1




unsigned long kaslr_get_random_long(const char *purpose);


extern unsigned long page_offset_base;
extern unsigned long vmalloc_base;
extern unsigned long vmemmap_base;

void kernel_randomize_memory(void);
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_64_types.h" 2
# 50 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_types.h" 2








extern int devmem_is_allowed(unsigned long pagenr);

extern unsigned long max_low_pfn_mapped;
extern unsigned long max_pfn_mapped;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) phys_addr_t get_max_mapped(void)
{
 return (phys_addr_t)max_pfn_mapped << 12;
}

bool pfn_range_is_mapped(unsigned long start_pfn, unsigned long end_pfn);

extern unsigned long init_memory_mapping(unsigned long start,
      unsigned long end);

extern void initmem_init(void);
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h" 2
# 139 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
enum page_cache_mode {
 _PAGE_CACHE_MODE_WB = 0,
 _PAGE_CACHE_MODE_WC = 1,
 _PAGE_CACHE_MODE_UC_MINUS = 2,
 _PAGE_CACHE_MODE_UC = 3,
 _PAGE_CACHE_MODE_WT = 4,
 _PAGE_CACHE_MODE_WP = 5,
 _PAGE_CACHE_MODE_NUM = 8
};
# 250 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64_types.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/sparsemem.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64_types.h" 2








typedef unsigned long pteval_t;
typedef unsigned long pmdval_t;
typedef unsigned long pudval_t;
typedef unsigned long p4dval_t;
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;

typedef struct { pteval_t pte; } pte_t;
# 251 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h" 2
# 266 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot { pgprotval_t pgprot; } pgprot_t;

typedef struct { pgdval_t pgd; } pgd_t;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgd_t native_make_pgd(pgdval_t val)
{
 return (pgd_t) { val };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgdval_t native_pgd_val(pgd_t pgd)
{
 return pgd.pgd;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgdval_t pgd_flags(pgd_t pgd)
{
 return native_pgd_val(pgd) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))));
}
# 298 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable-nop4d.h" 1








typedef struct { pgd_t pgd; } p4d_t;
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pgd_none(pgd_t pgd) { return 0; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pgd_bad(pgd_t pgd) { return 0; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pgd_present(pgd_t pgd) { return 1; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pgd_clear(pgd_t *pgd) { }
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable-nop4d.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4d_t *p4d_offset(pgd_t *pgd, unsigned long address)
{
 return (p4d_t *)pgd;
}
# 299 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h" 2

static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4d_t native_make_p4d(pudval_t val)
{
 return (p4d_t) { .pgd = native_make_pgd((pgdval_t)val) };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4dval_t native_p4d_val(p4d_t p4d)
{
 return native_pgd_val(p4d.pgd);
}



typedef struct { pudval_t pud; } pud_t;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t native_make_pud(pmdval_t val)
{
 return (pud_t) { val };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pudval_t native_pud_val(pud_t pud)
{
 return pud.pud;
}
# 338 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
typedef struct { pmdval_t pmd; } pmd_t;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t native_make_pmd(pmdval_t val)
{
 return (pmd_t) { val };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmdval_t native_pmd_val(pmd_t pmd)
{
 return pmd.pmd;
}
# 363 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4dval_t p4d_pfn_mask(p4d_t p4d)
{

 return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1)))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4dval_t p4d_flags_mask(p4d_t p4d)
{
 return ~p4d_pfn_mask(p4d);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4dval_t p4d_flags(p4d_t p4d)
{
 return native_p4d_val(p4d) & p4d_flags_mask(p4d);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pudval_t pud_pfn_mask(pud_t pud)
{
 if (native_pud_val(pud) & (((pteval_t)(1)) << 7))
  return (((signed long)(~(((1UL) << 30)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))));
 else
  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1)))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pudval_t pud_flags_mask(pud_t pud)
{
 return ~pud_pfn_mask(pud);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pudval_t pud_flags(pud_t pud)
{
 return native_pud_val(pud) & pud_flags_mask(pud);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmdval_t pmd_pfn_mask(pmd_t pmd)
{
 if (native_pmd_val(pmd) & (((pteval_t)(1)) << 7))
  return (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))));
 else
  return ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1)))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmdval_t pmd_flags_mask(pmd_t pmd)
{
 return ~pmd_pfn_mask(pmd);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmdval_t pmd_flags(pmd_t pmd)
{
 return native_pmd_val(pmd) & pmd_flags_mask(pmd);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t native_make_pte(pteval_t val)
{
 return (pte_t) { .pte = val };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pteval_t native_pte_val(pte_t pte)
{
 return pte.pte;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pteval_t pte_flags(pte_t pte)
{
 return native_pte_val(pte) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))));
}




extern uint16_t __cachemode2pte_tbl[_PAGE_CACHE_MODE_NUM];
extern uint8_t __pte2cachemode_tbl[8];
# 445 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long cachemode2protval(enum page_cache_mode pcm)
{
 if (__builtin_expect(!!(pcm == 0), 1))
  return 0;
 return __cachemode2pte_tbl[pcm];
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgprot_t cachemode2pgprot(enum page_cache_mode pcm)
{
 return ((pgprot_t) { (cachemode2protval(pcm)) } );
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) enum page_cache_mode pgprot2cachemode(pgprot_t pgprot)
{
 unsigned long masked;

 masked = ((pgprot).pgprot) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3));
 if (__builtin_expect(!!(masked == 0), 1))
  return 0;
 return __pte2cachemode_tbl[((((masked) >> (7 - 2)) & 4) | (((masked) >> (4 - 1)) & 2) | (((masked) >> 3) & 1))];
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgprot_t pgprot_4k_2_large(pgprot_t pgprot)
{
 pgprotval_t val = ((pgprot).pgprot);
 pgprot_t new;

 ((new).pgprot) = (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
  ((val & (((pteval_t)(1)) << 7)) << (12 - 7));
 return new;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgprot_t pgprot_large_2_4k(pgprot_t pgprot)
{
 pgprotval_t val = ((pgprot).pgprot);
 pgprot_t new;

 ((new).pgprot) = (val & ~((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 12))) |
     ((val & (((pteval_t)(1)) << 12)) >>
      (12 - 7));
 return new;
}


typedef struct page *pgtable_t;

extern pteval_t __supported_pte_mask;
extern void set_nx(void);
extern int nx_enabled;


extern pgprot_t pgprot_writecombine(pgprot_t prot);


extern pgprot_t pgprot_writethrough(pgprot_t prot);





struct file;
pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t vma_prot);


void set_pte_vaddr(unsigned long vaddr, pte_t pte);







struct seq_file;
extern void arch_report_meminfo(struct seq_file *m);

enum pg_level {
 PG_LEVEL_NONE,
 PG_LEVEL_4K,
 PG_LEVEL_2M,
 PG_LEVEL_1G,
 PG_LEVEL_512G,
 PG_LEVEL_NUM
};


extern void update_page_count(int level, unsigned long pages);
# 538 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_types.h"
extern pte_t *lookup_address(unsigned long address, unsigned int *level);
extern pte_t *lookup_address_in_pgd(pgd_t *pgd, unsigned long address,
        unsigned int *level);
extern pmd_t *lookup_pmd_address(unsigned long address);
extern phys_addr_t slow_virt_to_phys(void *__address);
extern int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
       unsigned numpages, unsigned long page_flags);
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h" 1
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/desc_defs.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
 u16 limit0;
 u16 base0;
 u16 base1: 8, type: 4, s: 1, dpl: 2, p: 1;
 u16 limit1: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8;
} __attribute__((packed));
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/desc_defs.h"
enum {
 GATE_INTERRUPT = 0xE,
 GATE_TRAP = 0xF,
 GATE_CALL = 0xC,
 GATE_TASK = 0x5,
};

enum {
 DESC_TSS = 0x9,
 DESC_LDT = 0x2,
 DESCTYPE_S = 0x10,
};


struct ldttss_desc {
 u16 limit0;
 u16 base0;

 u16 base1 : 8, type : 5, dpl : 2, p : 1;
 u16 limit1 : 4, zero0 : 3, g : 1, base2 : 8;

 u32 base3;
 u32 zero1;

} __attribute__((packed));

typedef struct ldttss_desc ldt_desc;
typedef struct ldttss_desc tss_desc;

struct idt_bits {
 u16 ist : 3,
   zero : 5,
   type : 5,
   dpl : 2,
   p : 1;
} __attribute__((packed));

struct gate_struct {
 u16 offset_low;
 u16 segment;
 struct idt_bits bits;
 u16 offset_middle;

 u32 offset_high;
 u32 reserved;

} __attribute__((packed));

typedef struct gate_struct gate_desc;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long gate_offset(const gate_desc *g)
{

 return g->offset_low | ((unsigned long)g->offset_middle << 16) |
  ((unsigned long) g->offset_high << 32);



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long gate_segment(const gate_desc *g)
{
 return g->segment;
}

struct desc_ptr {
 unsigned short size;
 unsigned long address;
} __attribute__((packed)) ;
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/kmap_types.h" 1








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/kmap_types.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/kmap_types.h" 2
# 45 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h" 2



struct page;
struct thread_struct;
struct desc_ptr;
struct tss_struct;
struct mm_struct;
struct desc_struct;
struct task_struct;
struct cpumask;
struct flush_tlb_info;





struct paravirt_callee_save {
 void *func;
};


struct pv_info {
 unsigned int kernel_rpl;
 int shared_kernel_pmd;


 u16 extra_user_64bit_cs;


 const char *name;
};

struct pv_init_ops {
# 87 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h"
 unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,
     unsigned long addr, unsigned len);
} ;


struct pv_lazy_ops {

 void (*enter)(void);
 void (*leave)(void);
 void (*flush)(void);
} ;

struct pv_time_ops {
 unsigned long long (*sched_clock)(void);
 unsigned long long (*steal_clock)(int cpu);
} ;

struct pv_cpu_ops {

 unsigned long (*get_debugreg)(int regno);
 void (*set_debugreg)(int regno, unsigned long value);

 unsigned long (*read_cr0)(void);
 void (*write_cr0)(unsigned long);

 void (*write_cr4)(unsigned long);


 unsigned long (*read_cr8)(void);
 void (*write_cr8)(unsigned long);



 void (*load_tr_desc)(void);
 void (*load_gdt)(const struct desc_ptr *);
 void (*load_idt)(const struct desc_ptr *);
 void (*set_ldt)(const void *desc, unsigned entries);
 unsigned long (*store_tr)(void);
 void (*load_tls)(struct thread_struct *t, unsigned int cpu);

 void (*load_gs_index)(unsigned int idx);

 void (*write_ldt_entry)(struct desc_struct *ldt, int entrynum,
    const void *desc);
 void (*write_gdt_entry)(struct desc_struct *,
    int entrynum, const void *desc, int size);
 void (*write_idt_entry)(gate_desc *,
    int entrynum, const gate_desc *gate);
 void (*alloc_ldt)(struct desc_struct *ldt, unsigned entries);
 void (*free_ldt)(struct desc_struct *ldt, unsigned entries);

 void (*load_sp0)(unsigned long sp0);

 void (*set_iopl_mask)(unsigned mask);

 void (*wbinvd)(void);
 void (*io_delay)(void);


 void (*cpuid)(unsigned int *eax, unsigned int *ebx,
        unsigned int *ecx, unsigned int *edx);


 u64 (*read_msr)(unsigned int msr);
 void (*write_msr)(unsigned int msr, unsigned low, unsigned high);





 u64 (*read_msr_safe)(unsigned int msr, int *err);
 int (*write_msr_safe)(unsigned int msr, unsigned low, unsigned high);

 u64 (*read_pmc)(int counter);







 void (*usergs_sysret64)(void);



 void (*iret)(void);

 void (*swapgs)(void);

 void (*start_context_switch)(struct task_struct *prev);
 void (*end_context_switch)(struct task_struct *next);
} ;

struct pv_irq_ops {
# 190 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h"
 struct paravirt_callee_save save_fl;
 struct paravirt_callee_save restore_fl;
 struct paravirt_callee_save irq_disable;
 struct paravirt_callee_save irq_enable;

 void (*safe_halt)(void);
 void (*halt)(void);

} ;

struct pv_mmu_ops {
 unsigned long (*read_cr2)(void);
 void (*write_cr2)(unsigned long);

 unsigned long (*read_cr3)(void);
 void (*write_cr3)(unsigned long);





 void (*activate_mm)(struct mm_struct *prev,
       struct mm_struct *next);
 void (*dup_mmap)(struct mm_struct *oldmm,
    struct mm_struct *mm);
 void (*exit_mmap)(struct mm_struct *mm);



 void (*flush_tlb_user)(void);
 void (*flush_tlb_kernel)(void);
 void (*flush_tlb_one_user)(unsigned long addr);
 void (*flush_tlb_others)(const struct cpumask *cpus,
     const struct flush_tlb_info *info);


 int (*pgd_alloc)(struct mm_struct *mm);
 void (*pgd_free)(struct mm_struct *mm, pgd_t *pgd);





 void (*alloc_pte)(struct mm_struct *mm, unsigned long pfn);
 void (*alloc_pmd)(struct mm_struct *mm, unsigned long pfn);
 void (*alloc_pud)(struct mm_struct *mm, unsigned long pfn);
 void (*alloc_p4d)(struct mm_struct *mm, unsigned long pfn);
 void (*release_pte)(unsigned long pfn);
 void (*release_pmd)(unsigned long pfn);
 void (*release_pud)(unsigned long pfn);
 void (*release_p4d)(unsigned long pfn);


 void (*set_pte)(pte_t *ptep, pte_t pteval);
 void (*set_pte_at)(struct mm_struct *mm, unsigned long addr,
      pte_t *ptep, pte_t pteval);
 void (*set_pmd)(pmd_t *pmdp, pmd_t pmdval);

 pte_t (*ptep_modify_prot_start)(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep);
 void (*ptep_modify_prot_commit)(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep, pte_t pte);

 struct paravirt_callee_save pte_val;
 struct paravirt_callee_save make_pte;

 struct paravirt_callee_save pgd_val;
 struct paravirt_callee_save make_pgd;
# 268 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h"
 void (*set_pud)(pud_t *pudp, pud_t pudval);

 struct paravirt_callee_save pmd_val;
 struct paravirt_callee_save make_pmd;


 struct paravirt_callee_save pud_val;
 struct paravirt_callee_save make_pud;

 void (*set_p4d)(p4d_t *p4dp, p4d_t p4dval);
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h"
 struct pv_lazy_ops lazy_mode;





 void (*set_fixmap)(unsigned idx,
      phys_addr_t phys, pgprot_t flags);
} ;

struct arch_spinlock;


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock_types.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock_types.h"
typedef u8 __ticket_t;
typedef u16 __ticketpair_t;
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qspinlock_types.h" 1
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock {
 union {
  atomic_t val;







  struct {
   u8 locked;
   u8 pending;
  };
  struct {
   u16 locked_pending;
   u16 tail;
  };
# 60 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qspinlock_types.h"
 };
} arch_spinlock_t;
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock_types.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qrwlock_types.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock_types.h" 1
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qrwlock_types.h" 2





typedef struct qrwlock {
 atomic_t cnts;
 arch_spinlock_t wait_lock;
} arch_rwlock_t;
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock_types.h" 2
# 303 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h" 2


struct qspinlock;

struct pv_lock_ops {
 void (*queued_spin_lock_slowpath)(struct qspinlock *lock, u32 val);
 struct paravirt_callee_save queued_spin_unlock;

 void (*wait)(u8 *ptr, u8 val);
 void (*kick)(int cpu);

 struct paravirt_callee_save vcpu_is_preempted;
} ;




struct paravirt_patch_template {
 struct pv_init_ops pv_init_ops;
 struct pv_time_ops pv_time_ops;
 struct pv_cpu_ops pv_cpu_ops;
 struct pv_irq_ops pv_irq_ops;
 struct pv_mmu_ops pv_mmu_ops;
 struct pv_lock_ops pv_lock_ops;
} ;

extern struct pv_info pv_info;
extern struct pv_init_ops pv_init_ops;
extern struct pv_time_ops pv_time_ops;
extern struct pv_cpu_ops pv_cpu_ops;
extern struct pv_irq_ops pv_irq_ops;
extern struct pv_mmu_ops pv_mmu_ops;
extern struct pv_lock_ops pv_lock_ops;
# 371 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h"
unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len);
unsigned paravirt_patch_ident_64(void *insnbuf, unsigned len);
unsigned paravirt_patch_call(void *insnbuf,
        const void *target, u16 tgt_clobbers,
        unsigned long addr, u16 site_clobbers,
        unsigned len);
unsigned paravirt_patch_jmp(void *insnbuf, const void *target,
       unsigned long addr, unsigned len);
unsigned paravirt_patch_default(u8 type, u16 clobbers, void *insnbuf,
    unsigned long addr, unsigned len);

unsigned paravirt_patch_insns(void *insnbuf, unsigned len,
         const char *start, const char *end);

unsigned native_patch(u8 type, u16 clobbers, void *ibuf,
        unsigned long addr, unsigned len);

int paravirt_disable_iospace(void);
# 663 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt_types.h"
enum paravirt_lazy_mode {
 PARAVIRT_LAZY_NONE,
 PARAVIRT_LAZY_MMU,
 PARAVIRT_LAZY_CPU,
};

enum paravirt_lazy_mode paravirt_get_lazy_mode(void);
void paravirt_start_context_switch(struct task_struct *prev);
void paravirt_end_context_switch(struct task_struct *next);

void paravirt_enter_lazy_mmu(void);
void paravirt_leave_lazy_mmu(void);
void paravirt_flush_lazy_mmu(void);

void _paravirt_nop(void);
u32 _paravirt_ident_32(u32);
u64 _paravirt_ident_64(u64);




struct paravirt_patch_site {
 u8 *instr;
 u8 instrtype;
 u8 len;
 u16 clobbers;
};

extern struct paravirt_patch_site __parainstructions[],
 __parainstructions_end[];
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bug.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bug.h" 1
# 83 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bug.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bug.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bug.h"
struct bug_entry {



 signed int bug_addr_disp;





 signed int file_disp;

 unsigned short line;

 unsigned short flags;
};
# 101 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/bug.h"
struct warn_args;
struct pt_regs;

void __warn(const char *file, int line, void *caller, unsigned taint,
     struct pt_regs *regs, struct warn_args *args);
# 84 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bug.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bug.h" 2



enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_warning_bug(const struct bug_entry *bug)
{
 return bug->flags & (1 << 0);
}

struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);
# 65 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool check_data_corruption(bool v) { return v; }
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitmap.h" 1








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/string.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h" 2

extern char *strndup_user(const char *, long);
extern void *memdup_user(const void *, size_t);
extern void *memdup_user_nul(const void *, size_t);





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/string.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/string_64.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/string_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *__inline_memcpy(void *to, const void *from, size_t n)
{
 unsigned long d0, d1, d2;
 asm volatile("rep ; movsl\n\t"
       "testb $2,%b4\n\t"
       "je 1f\n\t"
       "movsw\n"
       "1:\ttestb $1,%b4\n\t"
       "je 2f\n\t"
       "movsb\n"
       "2:"
       : "=&c" (d0), "=&D" (d1), "=&S" (d2)
       : "0" (n / 4), "q" (n), "1" ((long)to), "2" ((long)from)
       : "memory");
 return to;
}





extern void *memcpy(void *to, const void *from, size_t len);
extern void *__memcpy(void *to, const void *from, size_t len);
# 51 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/string_64.h"
void *memset(void *s, int c, size_t n);
void *__memset(void *s, int c, size_t n);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *memset16(uint16_t *s, uint16_t v, size_t n)
{
 long d0, d1;
 asm volatile("rep\n\t"
       "stosw"
       : "=&c" (d0), "=&D" (d1)
       : "a" (v), "1" (s), "0" (n)
       : "memory");
 return s;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *memset32(uint32_t *s, uint32_t v, size_t n)
{
 long d0, d1;
 asm volatile("rep\n\t"
       "stosl"
       : "=&c" (d0), "=&D" (d1)
       : "a" (v), "1" (s), "0" (n)
       : "memory");
 return s;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *memset64(uint64_t *s, uint64_t v, size_t n)
{
 long d0, d1;
 asm volatile("rep\n\t"
       "stosq"
       : "=&c" (d0), "=&D" (d1)
       : "a" (v), "1" (s), "0" (n)
       : "memory");
 return s;
}


void *memmove(void *dest, const void *src, size_t count);
void *__memmove(void *dest, const void *src, size_t count);

int memcmp(const void *cs, const void *ct, size_t count);
size_t strlen(const char *s);
char *strcpy(char *dest, const char *src);
char *strcat(char *dest, const char *src);
int strcmp(const char *cs, const char *ct);
# 119 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/string_64.h"
             int memcpy_mcsafe_unrolled(void *dst, const void *src, size_t cnt);
extern struct static_key_false mcsafe_key;
# 136 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/string_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int
memcpy_mcsafe(void *dst, const void *src, size_t cnt)
{

 if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&mcsafe_key), struct static_key_true)) branch = arch_static_branch_jump(&(&mcsafe_key)->key, false); else if (__builtin_types_compatible_p(typeof(*&mcsafe_key), struct static_key_false)) branch = arch_static_branch(&(&mcsafe_key)->key, false); else branch = ____wrong_branch_error(); branch; }))
  return memcpy_mcsafe_unrolled(dst, src, cnt);
 else

  ({ size_t __len = (cnt); void *__ret; if (__builtin_constant_p(cnt) && __len >= 64) __ret = __memcpy((dst), (src), __len); else __ret = __builtin_memcpy((dst), (src), __len); __ret; });
 return 0;
}



void memcpy_flushcache(void *dst, const void *src, size_t cnt);
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/string.h" 2
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h" 2


extern char * strcpy(char *,const char *);


extern char * strncpy(char *,const char *, __kernel_size_t);


size_t strlcpy(char *, const char *, size_t);


ssize_t strscpy(char *, const char *, size_t);


extern char * strcat(char *, const char *);


extern char * strncat(char *, const char *, __kernel_size_t);


extern size_t strlcat(char *, const char *, __kernel_size_t);


extern int strcmp(const char *,const char *);


extern int strncmp(const char *,const char *,__kernel_size_t);


extern int strcasecmp(const char *s1, const char *s2);


extern int strncasecmp(const char *s1, const char *s2, size_t n);


extern char * strchr(const char *,int);


extern char * strchrnul(const char *,int);


extern char * strnchr(const char *, size_t, int);


extern char * strrchr(const char *,int);

extern char * skip_spaces(const char *);

extern char *strim(char *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr(const char *, const char *);


extern char * strnstr(const char *, const char *, size_t);


extern __kernel_size_t strlen(const char *);


extern __kernel_size_t strnlen(const char *,__kernel_size_t);


extern char * strpbrk(const char *,const char *);


extern char * strsep(char **,const char *);


extern __kernel_size_t strspn(const char *,const char *);


extern __kernel_size_t strcspn(const char *,const char *);
# 116 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *memset_l(unsigned long *p, unsigned long v,
  __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, v, n);
 else
  return memset64((uint64_t *)p, v, n);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *memset_p(void **p, void *v, __kernel_size_t n)
{
 if (64 == 32)
  return memset32((uint32_t *)p, (uintptr_t)v, n);
 else
  return memset64((uint64_t *)p, (uintptr_t)v, n);
}
# 140 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h"
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp(const void *,const void *,__kernel_size_t);


extern int bcmp(const void *,const void *,__kernel_size_t);


extern void * memchr(const void *,int,__kernel_size_t);
# 165 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h"
void *memchr_inv(const void *s, int c, size_t n);
char *strreplace(char *s, char old, char new);

extern void kfree_const(const void *x);

extern char *kstrdup(const char *s, gfp_t gfp) __attribute__((__malloc__));
extern const char *kstrdup_const(const char *s, gfp_t gfp);
extern char *kstrndup(const char *s, size_t len, gfp_t gfp);
extern void *kmemdup(const void *src, size_t len, gfp_t gfp);
extern char *kmemdup_nul(const char *s, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, const char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq(const char *s1, const char *s2);
extern int kstrtobool(const char *s, bool *res);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int strtobool(const char *s, bool *res)
{
 return kstrtobool(s, res);
}

int match_string(const char * const *array, size_t n, const char *string);
int __sysfs_match_string(const char * const *array, size_t n, const char *s);
# 199 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h"
int vbin_printf(u32 *bin_buf, size_t size, const char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, const char *fmt, const u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, const char *fmt, ...) __attribute__((format(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
           const void *from, size_t available);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool strstarts(const char *str, const char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

size_t memweight(const void *ptr, size_t bytes);
void memzero_explicit(void *s, size_t count);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *kbasename(const char *path)
{
 const char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}




void fortify_panic(const char *name) __attribute__((noreturn)) ;
void __read_overflow(void) ;
void __read_overflow2(void) ;
void __read_overflow3(void) ;
void __write_overflow(void) ;
# 444 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/string.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void memcpy_and_pad(void *dest, size_t dest_len,
      const void *src, size_t count, int pad)
{
 if (dest_len > count) {
  ({ size_t __len = (count); void *__ret; if (__builtin_constant_p(count) && __len >= 64) __ret = __memcpy((dest), (src), __len); else __ret = __builtin_memcpy((dest), (src), __len); __ret; });
  memset(dest + count, pad, dest_len - count);
 } else
  ({ size_t __len = (dest_len); void *__ret; if (__builtin_constant_p(dest_len) && __len >= 64) __ret = __memcpy((dest), (src), __len); else __ret = __builtin_memcpy((dest), (src), __len); __ret; });
}
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitmap.h" 2
# 93 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitmap.h"
extern unsigned long *bitmap_alloc(unsigned int nbits, gfp_t flags);
extern unsigned long *bitmap_zalloc(unsigned int nbits, gfp_t flags);
extern void bitmap_free(const unsigned long *bitmap);





extern int __bitmap_empty(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_full(const unsigned long *bitmap, unsigned int nbits);
extern int __bitmap_equal(const unsigned long *bitmap1,
     const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits);
extern void __bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern void __bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits);
extern int __bitmap_and(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_or(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern void __bitmap_xor(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_andnot(unsigned long *dst, const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_intersects(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_subset(const unsigned long *bitmap1,
   const unsigned long *bitmap2, unsigned int nbits);
extern int __bitmap_weight(const unsigned long *bitmap, unsigned int nbits);
extern void __bitmap_set(unsigned long *map, unsigned int start, int len);
extern void __bitmap_clear(unsigned long *map, unsigned int start, int len);

extern unsigned long bitmap_find_next_zero_area_off(unsigned long *map,
          unsigned long size,
          unsigned long start,
          unsigned int nr,
          unsigned long align_mask,
          unsigned long align_offset);
# 146 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitmap.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long
bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask)
{
 return bitmap_find_next_zero_area_off(map, size, start, nr,
           align_mask, 0);
}

extern int __bitmap_parse(const char *buf, unsigned int buflen, int is_user,
   unsigned long *dst, int nbits);
extern int bitmap_parse_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern int bitmap_parselist(const char *buf, unsigned long *maskp,
   int nmaskbits);
extern int bitmap_parselist_user(const char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern void bitmap_remap(unsigned long *dst, const unsigned long *src,
  const unsigned long *old, const unsigned long *new, unsigned int nbits);
extern int bitmap_bitremap(int oldbit,
  const unsigned long *old, const unsigned long *new, int bits);
extern void bitmap_onto(unsigned long *dst, const unsigned long *orig,
  const unsigned long *relmap, unsigned int bits);
extern void bitmap_fold(unsigned long *dst, const unsigned long *orig,
  unsigned int sz, unsigned int nbits);
extern int bitmap_find_free_region(unsigned long *bitmap, unsigned int bits, int order);
extern void bitmap_release_region(unsigned long *bitmap, unsigned int pos, int order);
extern int bitmap_allocate_region(unsigned long *bitmap, unsigned int pos, int order);
extern unsigned int bitmap_from_u32array(unsigned long *bitmap,
      unsigned int nbits,
      const u32 *buf,
      unsigned int nwords);
extern unsigned int bitmap_to_u32array(u32 *buf,
           unsigned int nwords,
           const unsigned long *bitmap,
           unsigned int nbits);





extern unsigned int bitmap_ord_to_pos(const unsigned long *bitmap, unsigned int ord, unsigned int nbits);
extern int bitmap_print_to_pagebuf(bool list, char *buf,
       const unsigned long *maskp, int nmaskbits);
# 204 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitmap.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = 0UL;
 else {
  unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
  memset(dst, 0, len);
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
 unsigned int nlongs = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)));
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0)) {
  unsigned int len = (nlongs - 1) * sizeof(unsigned long);
  memset(dst, 0xff, len);
 }
 dst[nlongs - 1] = (~0UL >> (-(nbits) & (64 - 1)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_copy(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src;
 else {
  unsigned int len = (((nbits) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(unsigned long);
  ({ size_t __len = (len); void *__ret; if (__builtin_constant_p(len) && __len >= 64) __ret = __memcpy((dst), (src), __len); else __ret = __builtin_memcpy((dst), (src), __len); __ret; });
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_and(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & *src2 & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_or(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_xor(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_andnot(unsigned long *dst, const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return (*dst = *src1 & ~(*src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_complement(unsigned long *dst, const unsigned long *src,
   unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = ~(*src);
 else
  __bitmap_complement(dst, src, nbits);
}
# 285 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitmap.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_equal(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return !((*src1 ^ *src2) & (~0UL >> (-(nbits) & (64 - 1))));
 if (__builtin_constant_p(nbits & (8 - 1)) &&
     (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  return !memcmp(src1, src2, nbits / 8);
 return __bitmap_equal(src1, src2, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_intersects(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ((*src1 & *src2) & (~0UL >> (-(nbits) & (64 - 1)))) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_subset(const unsigned long *src1,
   const unsigned long *src2, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! ((*src1 & ~(*src2)) & (~0UL >> (-(nbits) & (64 - 1))));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_empty(const unsigned long *src, unsigned nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (*src & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_bit(src, nbits) == nbits;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_full(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return ! (~(*src) & (~0UL >> (-(nbits) & (64 - 1))));

 return find_first_zero_bit(src, nbits) == nbits;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int bitmap_weight(const unsigned long *src, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  return hweight_long(*src & (~0UL >> (-(nbits) & (64 - 1))));
 return __bitmap_weight(src, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void bitmap_set(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __set_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0xff, nbits / 8);
 else
  __bitmap_set(map, start, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void bitmap_clear(unsigned long *map, unsigned int start,
  unsigned int nbits)
{
 if (__builtin_constant_p(nbits) && nbits == 1)
  __clear_bit(start, map);
 else if (__builtin_constant_p(start & (8 - 1)) &&
   (((start) & ((typeof(start))(8) - 1)) == 0) &&
   __builtin_constant_p(nbits & (8 - 1)) &&
   (((nbits) & ((typeof(nbits))(8) - 1)) == 0))
  memset((char *)map + start / 8, 0, nbits / 8);
 else
  __bitmap_clear(map, start, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_shift_right(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src & (~0UL >> (-(nbits) & (64 - 1)))) >> shift;
 else
  __bitmap_shift_right(dst, src, shift, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_shift_left(unsigned long *dst, const unsigned long *src,
    unsigned int shift, unsigned int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64 && (nbits) > 0))
  *dst = (*src << shift) & (~0UL >> (-(nbits) & (64 - 1)));
 else
  __bitmap_shift_left(dst, src, shift, nbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bitmap_parse(const char *buf, unsigned int buflen,
   unsigned long *maskp, int nmaskbits)
{
 return __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
}
# 431 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bitmap.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bitmap_from_u64(unsigned long *dst, u64 mask)
{
 dst[0] = mask & (~0UL);

 if (sizeof(mask) > sizeof(unsigned long))
  dst[1] = mask >> 32;
}
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h" 2



typedef struct cpumask { unsigned long bits[(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } cpumask_t;
# 38 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
extern unsigned int nr_cpu_ids;
# 89 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
extern struct cpumask __cpu_possible_mask;
extern struct cpumask __cpu_online_mask;
extern struct cpumask __cpu_present_mask;
extern struct cpumask __cpu_active_mask;
# 119 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpumask_check(unsigned int cpu)
{



 return cpu;
}
# 179 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpumask_first(const struct cpumask *srcp)
{
 return find_first_bit(((srcp)->bits), ((unsigned int)8));
}

unsigned int cpumask_next(int n, const struct cpumask *srcp);
# 193 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpumask_next_zero(int n, const struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit(((srcp)->bits), ((unsigned int)8), n+1);
}

int cpumask_next_and(int n, const struct cpumask *, const struct cpumask *);
int cpumask_any_but(const struct cpumask *mask, unsigned int cpu);
unsigned int cpumask_local_spread(unsigned int i, int node);
# 229 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
extern int cpumask_next_wrap(int n, const struct cpumask *mask, int start, bool wrap);
# 281 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 __set_bit(cpumask_check(cpu), ((dstp)->bits));
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), ((dstp)->bits));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 __clear_bit(cpumask_check(cpu), ((dstp)->bits));
}
# 314 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_test_cpu(int cpu, const struct cpumask *cpumask)
{
 return (__builtin_constant_p((cpumask_check(cpu))) ? constant_test_bit((cpumask_check(cpu)), ((((cpumask))->bits))) : variable_test_bit((cpumask_check(cpu)), ((((cpumask))->bits))));
}
# 328 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), ((cpumask)->bits));
}
# 342 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), ((cpumask)->bits));
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill(((dstp)->bits), ((unsigned int)8));
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero(((dstp)->bits), ((unsigned int)8));
}
# 373 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_and(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 return bitmap_and(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)8));
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_or(struct cpumask *dstp, const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 bitmap_or(((dstp)->bits), ((src1p)->bits),
          ((src2p)->bits), ((unsigned int)8));
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_xor(struct cpumask *dstp,
          const struct cpumask *src1p,
          const struct cpumask *src2p)
{
 bitmap_xor(((dstp)->bits), ((src1p)->bits),
           ((src2p)->bits), ((unsigned int)8));
}
# 416 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_andnot(struct cpumask *dstp,
      const struct cpumask *src1p,
      const struct cpumask *src2p)
{
 return bitmap_andnot(((dstp)->bits), ((src1p)->bits),
       ((src2p)->bits), ((unsigned int)8));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_complement(struct cpumask *dstp,
          const struct cpumask *srcp)
{
 bitmap_complement(((dstp)->bits), ((srcp)->bits),
           ((unsigned int)8));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool cpumask_equal(const struct cpumask *src1p,
    const struct cpumask *src2p)
{
 return bitmap_equal(((src1p)->bits), ((src2p)->bits),
       ((unsigned int)8));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool cpumask_intersects(const struct cpumask *src1p,
         const struct cpumask *src2p)
{
 return bitmap_intersects(((src1p)->bits), ((src2p)->bits),
            ((unsigned int)8));
}
# 467 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_subset(const struct cpumask *src1p,
     const struct cpumask *src2p)
{
 return bitmap_subset(((src1p)->bits), ((src2p)->bits),
        ((unsigned int)8));
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool cpumask_empty(const struct cpumask *srcp)
{
 return bitmap_empty(((srcp)->bits), ((unsigned int)8));
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool cpumask_full(const struct cpumask *srcp)
{
 return bitmap_full(((srcp)->bits), ((unsigned int)8));
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpumask_weight(const struct cpumask *srcp)
{
 return bitmap_weight(((srcp)->bits), ((unsigned int)8));
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_shift_right(struct cpumask *dstp,
           const struct cpumask *srcp, int n)
{
 bitmap_shift_right(((dstp)->bits), ((srcp)->bits), n,
            ((unsigned int)8));
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_shift_left(struct cpumask *dstp,
          const struct cpumask *srcp, int n)
{
 bitmap_shift_left(((dstp)->bits), ((srcp)->bits), n,
           ((unsigned int)8));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpumask_copy(struct cpumask *dstp,
    const struct cpumask *srcp)
{
 bitmap_copy(((dstp)->bits), ((srcp)->bits), ((unsigned int)8));
}
# 578 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_parse_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, ((dstp)->bits), ((unsigned int)8));
}
# 592 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_parselist_user(const char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, ((dstp)->bits),
         ((unsigned int)8));
}
# 606 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpumask_parse(const char *buf, struct cpumask *dstp)
{
 char *nl = strchr(buf, '\n');
 unsigned int len = nl ? (unsigned int)(nl - buf) : strlen(buf);

 return bitmap_parse(buf, len, ((dstp)->bits), ((unsigned int)8));
}
# 621 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpulist_parse(const char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, ((dstp)->bits), ((unsigned int)8));
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) size_t cpumask_size(void)
{
 return (((((unsigned int)8)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8))) * sizeof(long);
}
# 694 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
typedef struct cpumask cpumask_var_t[1];




static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void free_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool cpumask_available(cpumask_var_t mask)
{
 return true;
}




extern const unsigned long cpu_all_bits[(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
# 754 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
void init_cpu_present(const struct cpumask *src);
void init_cpu_possible(const struct cpumask *src);
void init_cpu_online(const struct cpumask *src);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void reset_cpu_possible_mask(void)
{
 bitmap_zero(((&__cpu_possible_mask)->bits), 8);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
set_cpu_possible(unsigned int cpu, bool possible)
{
 if (possible)
  cpumask_set_cpu(cpu, &__cpu_possible_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_possible_mask);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
set_cpu_present(unsigned int cpu, bool present)
{
 if (present)
  cpumask_set_cpu(cpu, &__cpu_present_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_present_mask);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
set_cpu_online(unsigned int cpu, bool online)
{
 if (online)
  cpumask_set_cpu(cpu, &__cpu_online_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_online_mask);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
set_cpu_active(unsigned int cpu, bool active)
{
 if (active)
  cpumask_set_cpu(cpu, &__cpu_active_mask);
 else
  cpumask_clear_cpu(cpu, &__cpu_active_mask);
}
# 814 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __check_is_bitmap(const unsigned long *bitmap)
{
 return 1;
}
# 826 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
extern const unsigned long
 cpu_bit_bitmap[64 +1][(((8) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const struct cpumask *get_cpu_mask(unsigned int cpu)
{
 const unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
# 863 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpumask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) ssize_t
cpumap_print_to_pagebuf(bool list, char *buf, const struct cpumask *mask)
{
 return bitmap_print_to_pagebuf(list, buf, ((mask)->bits),
          nr_cpu_ids);
}
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/frame.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h" 2

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void load_sp0(unsigned long sp0)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.load_sp0); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.load_sp0) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.load_sp0)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(sp0)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __cpuid(unsigned int *eax, unsigned int *ebx,
      unsigned int *ecx, unsigned int *edx)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.cpuid); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.cpuid) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.cpuid)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(eax)), "S" ((unsigned long)(ebx)), "d" ((unsigned long)(ecx)), "c" ((unsigned long)(edx)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long paravirt_get_debugreg(int reg)
{
 return ({ unsigned long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.get_debugreg); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.get_debugreg) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.get_debugreg)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(reg)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.get_debugreg) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.get_debugreg)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(reg)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_debugreg(unsigned long val, int reg)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.set_debugreg); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.set_debugreg) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.set_debugreg)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(reg)), "S" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long read_cr0(void)
{
 return ({ unsigned long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.read_cr0); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_cr0) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_cr0)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_cr0) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_cr0)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_cr0(unsigned long x)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_cr0); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_cr0) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_cr0)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long read_cr2(void)
{
 return ({ unsigned long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.read_cr2); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.read_cr2) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.read_cr2)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.read_cr2) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.read_cr2)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_cr2(unsigned long x)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.write_cr2); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.write_cr2) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.write_cr2)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __read_cr3(void)
{
 return ({ unsigned long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.read_cr3); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.read_cr3) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.read_cr3)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.read_cr3) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.read_cr3)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_cr3(unsigned long x)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.write_cr3); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.write_cr3) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.write_cr3)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __write_cr4(unsigned long x)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_cr4); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_cr4) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_cr4)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long read_cr8(void)
{
 return ({ unsigned long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.read_cr8); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_cr8) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_cr8)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_cr8) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_cr8)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_cr8(unsigned long x)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_cr8); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_cr8) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_cr8)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_safe_halt(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_irq_ops.safe_halt); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_irq_ops.safe_halt) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_irq_ops.safe_halt)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void halt(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_irq_ops.halt); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_irq_ops.halt) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_irq_ops.halt)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void wbinvd(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.wbinvd); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.wbinvd) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.wbinvd)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 paravirt_read_msr(unsigned msr)
{
 return ({ u64 __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.read_msr); if (sizeof(u64) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_msr) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_msr)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(msr)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_msr) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_msr)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(msr)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(u64)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_write_msr(unsigned msr,
          unsigned low, unsigned high)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_msr); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_msr) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_msr)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(msr)), "S" ((unsigned long)(low)), "d" ((unsigned long)(high)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 paravirt_read_msr_safe(unsigned msr, int *err)
{
 return ({ u64 __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.read_msr_safe); if (sizeof(u64) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_msr_safe) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_msr_safe)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(msr)), "S" ((unsigned long)(err)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_msr_safe) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_msr_safe)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(msr)), "S" ((unsigned long)(err)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(u64)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int paravirt_write_msr_safe(unsigned msr,
       unsigned low, unsigned high)
{
 return ({ int __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_msr_safe); if (sizeof(int) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_msr_safe) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_msr_safe)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(msr)), "S" ((unsigned long)(low)), "d" ((unsigned long)(high)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_msr_safe) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_msr_safe)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(msr)), "S" ((unsigned long)(low)), "d" ((unsigned long)(high)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(int)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}
# 148 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void wrmsrl(unsigned msr, u64 val)
{
 do { paravirt_write_msr(msr, (u32)val, (u32)(val>>32)); } while (0);
}
# 165 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rdmsrl_safe(unsigned msr, unsigned long long *p)
{
 int err;

 *p = paravirt_read_msr_safe(msr, &err);
 return err;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long long paravirt_sched_clock(void)
{
 return ({ unsigned long long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_time_ops.sched_clock); if (sizeof(unsigned long long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_time_ops.sched_clock) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_time_ops.sched_clock)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_time_ops.sched_clock) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_time_ops.sched_clock)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

struct static_key;
extern struct static_key paravirt_steal_enabled;
extern struct static_key paravirt_steal_rq_enabled;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 paravirt_steal_clock(int cpu)
{
 return ({ u64 __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_time_ops.steal_clock); if (sizeof(u64) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_time_ops.steal_clock) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_time_ops.steal_clock)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(cpu)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_time_ops.steal_clock) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_time_ops.steal_clock)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(cpu)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(u64)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long long paravirt_read_pmc(int counter)
{
 return ({ u64 __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.read_pmc); if (sizeof(u64) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_pmc) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_pmc)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(counter)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.read_pmc) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.read_pmc)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(counter)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(u64)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}
# 201 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_alloc_ldt(struct desc_struct *ldt, unsigned entries)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.alloc_ldt); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.alloc_ldt) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.alloc_ldt)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(ldt)), "S" ((unsigned long)(entries)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_free_ldt(struct desc_struct *ldt, unsigned entries)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.free_ldt); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.free_ldt) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.free_ldt)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(ldt)), "S" ((unsigned long)(entries)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void load_TR_desc(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.load_tr_desc); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.load_tr_desc) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.load_tr_desc)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void load_gdt(const struct desc_ptr *dtr)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.load_gdt); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.load_gdt) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.load_gdt)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(dtr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void load_idt(const struct desc_ptr *dtr)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.load_idt); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.load_idt) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.load_idt)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(dtr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_ldt(const void *addr, unsigned entries)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.set_ldt); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.set_ldt) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.set_ldt)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(addr)), "S" ((unsigned long)(entries)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long paravirt_store_tr(void)
{
 return ({ unsigned long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.store_tr); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.store_tr) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.store_tr)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.store_tr) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.store_tr)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void load_TLS(struct thread_struct *t, unsigned cpu)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.load_tls); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.load_tls) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.load_tls)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(t)), "S" ((unsigned long)(cpu)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void load_gs_index(unsigned int gs)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.load_gs_index); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.load_gs_index) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.load_gs_index)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(gs)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_ldt_entry(struct desc_struct *dt, int entry,
       const void *desc)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_ldt_entry); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_ldt_entry) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_ldt_entry)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(dt)), "S" ((unsigned long)(entry)), "d" ((unsigned long)(desc)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_gdt_entry(struct desc_struct *dt, int entry,
       void *desc, int type)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_gdt_entry); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_gdt_entry) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_gdt_entry)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(dt)), "S" ((unsigned long)(entry)), "d" ((unsigned long)(desc)), "c" ((unsigned long)(type)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_idt_entry(gate_desc *dt, int entry, const gate_desc *g)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.write_idt_entry); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.write_idt_entry) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.write_idt_entry)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(dt)), "S" ((unsigned long)(entry)), "d" ((unsigned long)(g)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_iopl_mask(unsigned mask)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.set_iopl_mask); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.set_iopl_mask) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.set_iopl_mask)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mask)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void slow_down_io(void)
{
 pv_cpu_ops.io_delay();





}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_activate_mm(struct mm_struct *prev,
     struct mm_struct *next)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.activate_mm); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.activate_mm) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.activate_mm)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(prev)), "S" ((unsigned long)(next)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_arch_dup_mmap(struct mm_struct *oldmm,
       struct mm_struct *mm)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.dup_mmap); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.dup_mmap) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.dup_mmap)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(oldmm)), "S" ((unsigned long)(mm)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_arch_exit_mmap(struct mm_struct *mm)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.exit_mmap); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.exit_mmap) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.exit_mmap)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __flush_tlb(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.flush_tlb_user); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.flush_tlb_user) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.flush_tlb_user)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __flush_tlb_global(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.flush_tlb_kernel); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.flush_tlb_kernel) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.flush_tlb_kernel)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __flush_tlb_one_user(unsigned long addr)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.flush_tlb_one_user); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.flush_tlb_one_user) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.flush_tlb_one_user)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(addr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void flush_tlb_others(const struct cpumask *cpumask,
        const struct flush_tlb_info *info)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.flush_tlb_others); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.flush_tlb_others) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.flush_tlb_others)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(cpumask)), "S" ((unsigned long)(info)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int paravirt_pgd_alloc(struct mm_struct *mm)
{
 return ({ int __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pgd_alloc); if (sizeof(int) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pgd_alloc) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pgd_alloc)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pgd_alloc) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pgd_alloc)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(int)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_pgd_free(struct mm_struct *mm, pgd_t *pgd)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pgd_free); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pgd_free) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pgd_free)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(pgd)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_alloc_pte(struct mm_struct *mm, unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.alloc_pte); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.alloc_pte) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.alloc_pte)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_release_pte(unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.release_pte); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.release_pte) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.release_pte)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_alloc_pmd(struct mm_struct *mm, unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.alloc_pmd); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.alloc_pmd) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.alloc_pmd)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_release_pmd(unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.release_pmd); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.release_pmd) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.release_pmd)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_alloc_pud(struct mm_struct *mm, unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.alloc_pud); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.alloc_pud) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.alloc_pud)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_release_pud(unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.release_pud); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.release_pud) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.release_pud)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_alloc_p4d(struct mm_struct *mm, unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.alloc_p4d); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.alloc_p4d) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.alloc_p4d)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void paravirt_release_p4d(unsigned long pfn)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.release_p4d); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.release_p4d) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.release_p4d)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t __pte(pteval_t val)
{
 pteval_t ret;

 if (sizeof(pteval_t) > sizeof(long))
  ret = ({ pteval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pte.func); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pte.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pte.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pte.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pte.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pteval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pteval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 else
  ret = ({ pteval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pte.func); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pte.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pte.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pte.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pte.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pteval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pteval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });



 return (pte_t) { .pte = ret };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pteval_t pte_val(pte_t pte)
{
 pteval_t ret;

 if (sizeof(pteval_t) > sizeof(long))
  ret = ({ pteval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pte_val.func); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pte_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pte_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pte.pte)), "S" ((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" ); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pte_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pte_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pte.pte)), "S" ((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" ); __ret = (pteval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pteval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });

 else
  ret = ({ pteval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pte_val.func); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pte_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pte_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pte.pte)) : "memory", "cc" ); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pte_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pte_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pte.pte)) : "memory", "cc" ); __ret = (pteval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pteval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgd_t __pgd(pgdval_t val)
{
 pgdval_t ret;

 if (sizeof(pgdval_t) > sizeof(long))
  ret = ({ pgdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pgd.func); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pgd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pgd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pgd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pgd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pgdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pgdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });

 else
  ret = ({ pgdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pgd.func); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pgd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pgd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pgd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pgd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pgdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pgdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return (pgd_t) { ret };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgdval_t pgd_val(pgd_t pgd)
{
 pgdval_t ret;

 if (sizeof(pgdval_t) > sizeof(long))
  ret = ({ pgdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pgd_val.func); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pgd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pgd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pgd.pgd)), "S" ((unsigned long)((u64)pgd.pgd >> 32)) : "memory", "cc" ); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pgd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pgd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pgd.pgd)), "S" ((unsigned long)((u64)pgd.pgd >> 32)) : "memory", "cc" ); __ret = (pgdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pgdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });

 else
  ret = ({ pgdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pgd_val.func); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pgd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pgd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pgd.pgd)) : "memory", "cc" ); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pgd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pgd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pgd.pgd)) : "memory", "cc" ); __ret = (pgdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pgdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return ret;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t ptep_modify_prot_start(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 pteval_t ret;

 ret = ({ pteval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.ptep_modify_prot_start); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.ptep_modify_prot_start) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.ptep_modify_prot_start)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(addr)), "d" ((unsigned long)(ptep)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.ptep_modify_prot_start) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.ptep_modify_prot_start)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(addr)), "d" ((unsigned long)(ptep)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pteval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return (pte_t) { .pte = ret };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ptep_modify_prot_commit(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))

  pv_mmu_ops.ptep_modify_prot_commit(mm, addr, ptep, pte);
 else
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.ptep_modify_prot_commit); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.ptep_modify_prot_commit) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.ptep_modify_prot_commit)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(addr)), "d" ((unsigned long)(ptep)), "c" ((unsigned long)(pte.pte)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_pte(pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_pte); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_pte) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_pte)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(ptep)), "S" ((unsigned long)(pte.pte)), "d" ((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });

 else
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_pte); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_pte) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_pte)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(ptep)), "S" ((unsigned long)(pte.pte)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))

  pv_mmu_ops.set_pte_at(mm, addr, ptep, pte);
 else
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_pte_at); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_pte_at) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_pte_at)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(mm)), "S" ((unsigned long)(addr)), "d" ((unsigned long)(ptep)), "c" ((unsigned long)(pte.pte)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 pmdval_t val = native_pmd_val(pmd);

 if (sizeof(pmdval_t) > sizeof(long))
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_pmd); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_pmd) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_pmd)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pmdp)), "S" ((unsigned long)(val)), "d" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
 else
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_pmd); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_pmd) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_pmd)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pmdp)), "S" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t __pmd(pmdval_t val)
{
 pmdval_t ret;

 if (sizeof(pmdval_t) > sizeof(long))
  ret = ({ pmdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pmd.func); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pmd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pmd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pmd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pmd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pmdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pmdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });

 else
  ret = ({ pmdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pmd.func); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pmd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pmd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pmd.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pmd.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pmdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pmdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return (pmd_t) { ret };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmdval_t pmd_val(pmd_t pmd)
{
 pmdval_t ret;

 if (sizeof(pmdval_t) > sizeof(long))
  ret = ({ pmdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pmd_val.func); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pmd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pmd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pmd.pmd)), "S" ((unsigned long)((u64)pmd.pmd >> 32)) : "memory", "cc" ); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pmd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pmd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pmd.pmd)), "S" ((unsigned long)((u64)pmd.pmd >> 32)) : "memory", "cc" ); __ret = (pmdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pmdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });

 else
  ret = ({ pmdval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pmd_val.func); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pmd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pmd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pmd.pmd)) : "memory", "cc" ); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pmd_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pmd_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pmd.pmd)) : "memory", "cc" ); __ret = (pmdval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pmdval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_pud(pud_t *pudp, pud_t pud)
{
 pudval_t val = native_pud_val(pud);

 if (sizeof(pudval_t) > sizeof(long))
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_pud); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_pud) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_pud)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pudp)), "S" ((unsigned long)(val)), "d" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });

 else
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_pud); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_pud) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_pud)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(pudp)), "S" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t __pud(pudval_t val)
{
 pudval_t ret;

 if (sizeof(pudval_t) > sizeof(long))
  ret = ({ pudval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pud.func); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pud.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pud.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pud.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pud.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)), "S" ((unsigned long)((u64)val >> 32)) : "memory", "cc" ); __ret = (pudval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pudval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });

 else
  ret = ({ pudval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.make_pud.func); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pud.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pud.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.make_pud.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.make_pud.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(val)) : "memory", "cc" ); __ret = (pudval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pudval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return (pud_t) { ret };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pudval_t pud_val(pud_t pud)
{
 pudval_t ret;

 if (sizeof(pudval_t) > sizeof(long))
  ret = ({ pudval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pud_val.func); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pud_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pud_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pud.pud)), "S" ((unsigned long)((u64)pud.pud >> 32)) : "memory", "cc" ); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pud_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pud_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pud.pud)), "S" ((unsigned long)((u64)pud.pud >> 32)) : "memory", "cc" ); __ret = (pudval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pudval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });

 else
  ret = ({ pudval_t __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.pud_val.func); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pud_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pud_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pud.pud)) : "memory", "cc" ); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.pud_val.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.pud_val.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(pud.pud)) : "memory", "cc" ); __ret = (pudval_t)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(pudval_t)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });


 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pud_clear(pud_t *pudp)
{
 set_pud(pudp, __pud(0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_p4d(p4d_t *p4dp, p4d_t p4d)
{
 p4dval_t val = native_p4d_val(p4d);

 if (sizeof(p4dval_t) > sizeof(long))
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_p4d); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_p4d) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_p4d)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(p4dp)), "S" ((unsigned long)(val)), "d" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });

 else
  ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.set_p4d); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.set_p4d) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.set_p4d)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(p4dp)), "S" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });

}
# 585 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void p4d_clear(p4d_t *p4dp)
{
 set_p4d(p4dp, ((p4d_t) { __pgd(0) }));
}
# 614 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_pte_atomic(pte_t *ptep, pte_t pte)
{
 set_pte(ptep, pte);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 set_pte_at(mm, addr, ptep, __pte(0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, __pmd(0));
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_start_context_switch(struct task_struct *prev)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.start_context_switch); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.start_context_switch) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.start_context_switch)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(prev)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_end_context_switch(struct task_struct *next)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_cpu_ops.end_context_switch); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_cpu_ops.end_context_switch) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_cpu_ops.end_context_switch)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(next)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_enter_lazy_mmu_mode(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.lazy_mode.enter); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.lazy_mode.enter) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.lazy_mode.enter)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_leave_lazy_mmu_mode(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.lazy_mode.leave); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.lazy_mode.leave) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.lazy_mode.leave)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_flush_lazy_mmu_mode(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_mmu_ops.lazy_mode.flush); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_mmu_ops.lazy_mode.flush) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_mmu_ops.lazy_mode.flush)), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __set_fixmap(unsigned idx,
    phys_addr_t phys, pgprot_t flags)
{
 pv_mmu_ops.set_fixmap(idx, phys, flags);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pv_queued_spin_lock_slowpath(struct qspinlock *lock,
       u32 val)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_lock_ops.queued_spin_lock_slowpath); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_lock_ops.queued_spin_lock_slowpath) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_lock_ops.queued_spin_lock_slowpath)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(lock)), "S" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pv_queued_spin_unlock(struct qspinlock *lock)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_lock_ops.queued_spin_unlock.func); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_lock_ops.queued_spin_unlock.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_lock_ops.queued_spin_unlock.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(lock)) : "memory", "cc" ); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pv_wait(u8 *ptr, u8 val)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_lock_ops.wait); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_lock_ops.wait) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_lock_ops.wait)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(ptr)), "S" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pv_kick(int cpu)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_lock_ops.kick); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_lock_ops.kick) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_lock_ops.kick)), [paravirt_clobber] "i" (((1 << 9) - 1)), "D" ((unsigned long)(cpu)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool pv_vcpu_is_preempted(long cpu)
{
 return ({ bool __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_lock_ops.vcpu_is_preempted.func); if (sizeof(bool) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_lock_ops.vcpu_is_preempted.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_lock_ops.vcpu_is_preempted.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(cpu)) : "memory", "cc" ); __ret = (bool)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_lock_ops.vcpu_is_preempted.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_lock_ops.vcpu_is_preempted.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(cpu)) : "memory", "cc" ); __ret = (bool)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(bool)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}
# 772 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) unsigned long arch_local_save_flags(void)
{
 return ({ unsigned long __ret; unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_irq_ops.save_fl.func); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_irq_ops.save_fl.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_irq_ops.save_fl.func)), [paravirt_clobber] "i" (((1 << 0))) : "memory", "cc" ); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_irq_ops.save_fl.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_irq_ops.save_fl.func)), [paravirt_clobber] "i" (((1 << 0))) : "memory", "cc" ); __ret = (unsigned long)(__eax & ({ unsigned long __mask = ~0UL; switch (sizeof(unsigned long)) { case 1: __mask = 0xffUL; break; case 2: __mask = 0xffffUL; break; case 4: __mask = 0xffffffffUL; break; default: break; } __mask; })); } __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void arch_local_irq_restore(unsigned long f)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_irq_ops.restore_fl.func); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_irq_ops.restore_fl.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_irq_ops.restore_fl.func)), [paravirt_clobber] "i" (((1 << 0))), "D" ((unsigned long)(f)) : "memory", "cc" ); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void arch_local_irq_disable(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_irq_ops.irq_disable.func); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_irq_ops.irq_disable.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_irq_ops.irq_disable.func)), [paravirt_clobber] "i" (((1 << 0))) : "memory", "cc" ); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void arch_local_irq_enable(void)
{
 ({ unsigned long __edi = __edi, __esi = __esi, __edx = __edx, __ecx = __ecx, __eax = __eax;; ((void)pv_irq_ops.irq_enable.func); asm volatile("" "771:\n\t" "999:\n\t" ".pushsection .discard.retpoline_safe\n\t" " " ".quad" " " " 999b\n\t" ".popsection\n\t" "call *%c[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=a" (__eax), "+r" (current_stack_pointer) : [paravirt_typenum] "i" ((__builtin_offsetof(struct paravirt_patch_template, pv_irq_ops.irq_enable.func) / sizeof(void *))), [paravirt_opptr] "i" (&(pv_irq_ops.irq_enable.func)), [paravirt_clobber] "i" (((1 << 0))) : "memory", "cc" ); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) unsigned long arch_local_irq_save(void)
{
 unsigned long f;

 f = arch_local_save_flags();
 arch_local_irq_disable();
 return f;
}
# 817 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/paravirt.h"
extern void default_banner(void);
# 73 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/irqflags.h" 2
# 166 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/irqflags.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int arch_irqs_disabled_flags(unsigned long flags)
{
 return !(flags & ((1UL) << (9)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int arch_irqs_disabled(void)
{
 unsigned long flags = arch_local_save_flags();

 return arch_irqs_disabled_flags(flags);
}
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/irqflags.h" 2
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/preempt.h" 1
# 81 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/preempt.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/preempt.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/thread_info.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/thread_info.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/restart_block.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/restart_block.h"
struct timespec;
struct compat_timespec;
struct pollfd;

enum timespec_type {
 TT_NONE = 0,
 TT_NATIVE = 1,

 TT_COMPAT = 2,

};




struct restart_block {
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  } futex;

  struct {
   clockid_t clockid;
   enum timespec_type type;
   union {
    struct timespec *rmtp;

    struct compat_timespec *compat_rmtp;

   };
   u64 expires;
  } nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  } poll;
 };
};

extern long do_no_restart_syscall(struct restart_block *parm);
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/thread_info.h" 2
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/thread_info.h"
enum {
 BAD_STACK = -1,
 NOT_STACK = 0,
 GOOD_FRAME,
 GOOD_STACK,
};


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/thread_info.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/thread_info.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_64.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_64.h"
extern unsigned long max_pfn;
extern unsigned long phys_base;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __phys_addr_nodebug(unsigned long x)
{
 unsigned long y = x - (0xffffffff80000000UL);


 x = y + ((x > y) ? phys_base : ((0xffffffff80000000UL) - ((unsigned long)page_offset_base)));

 return x;
}
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page_64.h"
void clear_page_orig(void *page);
void clear_page_rep(void *page);
void clear_page_erms(void *page);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_page(void *page)
{
 asm volatile ("661:\n\t" "call %P[old]" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+ 9)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "call %P[new1]" "\n" "665""1" ":\n\t" "664""2"":\n\t" "call %P[new2]" "\n" "665""2" ":\n\t" ".popsection\n" : "=D" (page), "+r" (current_stack_pointer) : [old] "i" (clear_page_orig), [new1] "i" (clear_page_rep), [new2] "i" (clear_page_erms), "0" (page) : "memory", "rax", "rcx");





}

void copy_page(void *to, void *from);
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page.h" 2






struct page;


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/range.h" 1




struct range {
 u64 start;
 u64 end;
};

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page.h" 2
extern struct range pfn_mapped[];
extern int nr_pfn_mapped;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_user_page(void *page, unsigned long vaddr,
       struct page *pg)
{
 clear_page(page);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_user_page(void *to, void *from, unsigned long vaddr,
      struct page *topage)
{
 copy_page(to, from);
}
# 71 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page.h"
extern bool __virt_addr_valid(unsigned long kaddr);





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/memory_model.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pfn.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pfn.h"
typedef struct {
 u64 val;
} pfn_t;
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/memory_model.h" 2
# 77 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/getorder.h" 1
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/getorder.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((__const__)) int get_order(unsigned long size)
{
 if (__builtin_constant_p(size)) {
  if (!size)
   return 64 - 12;

  if (size < (1UL << 12))
   return 0;

  return ( __builtin_constant_p((size) - 1) ? ( __builtin_constant_p((size) - 1) ? ( ((size) - 1) < 2 ? 0 : ((size) - 1) & (1ULL << 63) ? 63 : ((size) - 1) & (1ULL << 62) ? 62 : ((size) - 1) & (1ULL << 61) ? 61 : ((size) - 1) & (1ULL << 60) ? 60 : ((size) - 1) & (1ULL << 59) ? 59 : ((size) - 1) & (1ULL << 58) ? 58 : ((size) - 1) & (1ULL << 57) ? 57 : ((size) - 1) & (1ULL << 56) ? 56 : ((size) - 1) & (1ULL << 55) ? 55 : ((size) - 1) & (1ULL << 54) ? 54 : ((size) - 1) & (1ULL << 53) ? 53 : ((size) - 1) & (1ULL << 52) ? 52 : ((size) - 1) & (1ULL << 51) ? 51 : ((size) - 1) & (1ULL << 50) ? 50 : ((size) - 1) & (1ULL << 49) ? 49 : ((size) - 1) & (1ULL << 48) ? 48 : ((size) - 1) & (1ULL << 47) ? 47 : ((size) - 1) & (1ULL << 46) ? 46 : ((size) - 1) & (1ULL << 45) ? 45 : ((size) - 1) & (1ULL << 44) ? 44 : ((size) - 1) & (1ULL << 43) ? 43 : ((size) - 1) & (1ULL << 42) ? 42 : ((size) - 1) & (1ULL << 41) ? 41 : ((size) - 1) & (1ULL << 40) ? 40 : ((size) - 1) & (1ULL << 39) ? 39 : ((size) - 1) & (1ULL << 38) ? 38 : ((size) - 1) & (1ULL << 37) ? 37 : ((size) - 1) & (1ULL << 36) ? 36 : ((size) - 1) & (1ULL << 35) ? 35 : ((size) - 1) & (1ULL << 34) ? 34 : ((size) - 1) & (1ULL << 33) ? 33 : ((size) - 1) & (1ULL << 32) ? 32 : ((size) - 1) & (1ULL << 31) ? 31 : ((size) - 1) & (1ULL << 30) ? 30 : ((size) - 1) & (1ULL << 29) ? 29 : ((size) - 1) & (1ULL << 28) ? 28 : ((size) - 1) & (1ULL << 27) ? 27 : ((size) - 1) & (1ULL << 26) ? 26 : ((size) - 1) & (1ULL << 25) ? 25 : ((size) - 1) & (1ULL << 24) ? 24 : ((size) - 1) & (1ULL << 23) ? 23 : ((size) - 1) & (1ULL << 22) ? 22 : ((size) - 1) & (1ULL << 21) ? 21 : ((size) - 1) & (1ULL << 20) ? 20 : ((size) - 1) & (1ULL << 19) ? 19 : ((size) - 1) & (1ULL << 18) ? 18 : ((size) - 1) & (1ULL << 17) ? 17 : ((size) - 1) & (1ULL << 16) ? 16 : ((size) - 1) & (1ULL << 15) ? 15 : ((size) - 1) & (1ULL << 14) ? 14 : ((size) - 1) & (1ULL << 13) ? 13 : ((size) - 1) & (1ULL << 12) ? 12 : ((size) - 1) & (1ULL << 11) ? 11 : ((size) - 1) & (1ULL << 10) ? 10 : ((size) - 1) & (1ULL << 9) ? 9 : ((size) - 1) & (1ULL << 8) ? 8 : ((size) - 1) & (1ULL << 7) ? 7 : ((size) - 1) & (1ULL << 6) ? 6 : ((size) - 1) & (1ULL << 5) ? 5 : ((size) - 1) & (1ULL << 4) ? 4 : ((size) - 1) & (1ULL << 3) ? 3 : ((size) - 1) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1;
 }

 size--;
 size >>= 12;



 return fls64(size);

}
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/page.h" 2
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/thread_info.h" 2
# 52 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/thread_info.h"
struct task_struct;

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeature.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 1







struct task_struct;
struct mm_struct;
struct vm86;


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/math_emu.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ptrace.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ptrace-abi.h" 1
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ptrace.h" 2
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h" 2
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
struct pt_regs {




 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;

 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;




 unsigned long orig_ax;

 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;

};







struct cpuinfo_x86;
struct task_struct;

extern unsigned long profile_pc(struct pt_regs *regs);


extern unsigned long
convert_ip_to_linear(struct task_struct *child, struct pt_regs *regs);
extern void send_sigtrap(struct task_struct *tsk, struct pt_regs *regs,
    int error_code, int si_code);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long regs_return_value(struct pt_regs *regs)
{
 return regs->ax;
}
# 121 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int user_mode(struct pt_regs *regs)
{



 return !!(regs->cs & 3);

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int v8086_mode(struct pt_regs *regs)
{



 return 0;

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool user_64bit_mode(struct pt_regs *regs)
{
# 150 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
 return regs->cs == (6*8 + 3) || regs->cs == pv_info.extra_user_64bit_cs;




}
# 165 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return regs->sp;
}







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/ptrace.h" 1
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long instruction_pointer(struct pt_regs *regs)
{
 return ((regs)->ip);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void instruction_pointer_set(struct pt_regs *regs,
                                           unsigned long val)
{
 (((regs)->ip) = (val));
}
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return ((regs)->sp);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void user_stack_pointer_set(struct pt_regs *regs,
                                          unsigned long val)
{
 (((regs)->sp) = (val));
}
# 62 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long frame_pointer(struct pt_regs *regs)
{
 return ((regs)->bp);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void frame_pointer_set(struct pt_regs *regs,
                                     unsigned long val)
{
 (((regs)->bp) = (val));
}
# 176 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h" 2


extern int regs_query_register_offset(const char *name);
extern const char *regs_query_register_name(unsigned int offset);
# 191 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long regs_get_register(struct pt_regs *regs,
           unsigned int offset)
{
 if (__builtin_expect(!!(offset > (__builtin_offsetof(struct pt_regs, ss))), 0))
  return 0;
# 216 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
 return *(unsigned long *)((unsigned long)regs + offset);
}
# 227 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int regs_within_kernel_stack(struct pt_regs *regs,
        unsigned long addr)
{
 return ((addr & ~((((1UL) << 12) << (2 + 0)) - 1)) ==
  (kernel_stack_pointer(regs) & ~((((1UL) << 12) << (2 + 0)) - 1)));
}
# 243 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long *regs_get_kernel_stack_nth_addr(struct pt_regs *regs, unsigned int n)
{
 unsigned long *addr = (unsigned long *)kernel_stack_pointer(regs);

 addr += n;
 if (regs_within_kernel_stack(regs, (unsigned long)addr))
  return addr;
 else
  return ((void *)0);
}


extern long probe_kernel_read(void *dst, const void *src, size_t size);
# 266 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n)
{
 unsigned long *addr;
 unsigned long val;
 long ret;

 addr = regs_get_kernel_stack_nth_addr(regs, n);
 if (addr) {
  ret = probe_kernel_read(&val, addr, sizeof(val));
  if (!ret)
   return val;
 }
 return 0;
}
# 307 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ptrace.h"
struct user_desc;
extern int do_get_thread_area(struct task_struct *p, int idx,
         struct user_desc *info);
extern int do_set_thread_area(struct task_struct *p, int idx,
         struct user_desc *info, int can_allocate);
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/math_emu.h" 2





struct math_emu_info {
 long ___orig_eip;
 struct pt_regs *regs;
};
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h" 1
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h"
struct _fpx_sw_bytes {




 __u32 magic1;
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h"
 __u32 extended_size;





 __u64 xfeatures;





 __u32 xstate_size;


 __u32 padding[7];
};
# 85 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h"
struct _fpreg {
 __u16 significand[4];
 __u16 exponent;
};


struct _fpxreg {
 __u16 significand[4];
 __u16 exponent;
 __u16 padding[3];
};


struct _xmmreg {
 __u32 element[4];
};






struct _fpstate_32 {

 __u32 cw;
 __u32 sw;
 __u32 tag;
 __u32 ipoff;
 __u32 cssel;
 __u32 dataoff;
 __u32 datasel;
 struct _fpreg _st[8];
 __u16 status;
 __u16 magic;



 __u32 _fxsr_env[6];
 __u32 mxcsr;
 __u32 reserved;
 struct _fpxreg _fxsr_st[8];
 struct _xmmreg _xmm[8];
 union {
  __u32 padding1[44];
  __u32 padding[44];
 };

 union {
  __u32 padding2[12];
  struct _fpx_sw_bytes sw_reserved;
 };
};
# 149 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h"
struct _fpstate_64 {
 __u16 cwd;
 __u16 swd;

 __u16 twd;
 __u16 fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 reserved2[12];
 union {
  __u32 reserved3[12];
  struct _fpx_sw_bytes sw_reserved;
 };
};







struct _header {
 __u64 xfeatures;
 __u64 reserved1[2];
 __u64 reserved2[5];
};

struct _ymmh_state {

 __u32 ymmh_space[64];
};
# 192 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h"
struct _xstate {
 struct _fpstate_64 fpstate;
 struct _header xstate_hdr;
 struct _ymmh_state ymmh;

};




struct sigcontext_32 {
 __u16 gs, __gsh;
 __u16 fs, __fsh;
 __u16 es, __esh;
 __u16 ds, __dsh;
 __u32 di;
 __u32 si;
 __u32 bp;
 __u32 sp;
 __u32 bx;
 __u32 dx;
 __u32 cx;
 __u32 ax;
 __u32 trapno;
 __u32 err;
 __u32 ip;
 __u16 cs, __csh;
 __u32 flags;
 __u32 sp_at_signal;
 __u16 ss, __ssh;
# 230 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h"
 __u32 fpstate;
 __u32 oldmask;
 __u32 cr2;
};




struct sigcontext_64 {
 __u64 r8;
 __u64 r9;
 __u64 r10;
 __u64 r11;
 __u64 r12;
 __u64 r13;
 __u64 r14;
 __u64 r15;
 __u64 di;
 __u64 si;
 __u64 bp;
 __u64 bx;
 __u64 dx;
 __u64 ax;
 __u64 cx;
 __u64 sp;
 __u64 ip;
 __u64 flags;
 __u16 cs;
 __u16 gs;
 __u16 fs;
 __u16 ss;
 __u64 err;
 __u64 trapno;
 __u64 oldmask;
 __u64 cr2;
# 273 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sigcontext.h"
 __u64 fpstate;
 __u64 reserved1[8];
};
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/errno.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/errno.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/errno-base.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/errno.h" 2
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/errno.h" 2
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpumask.h" 1






extern cpumask_var_t cpu_callin_mask;
extern cpumask_var_t cpu_callout_mask;
extern cpumask_var_t cpu_initialized_mask;
extern cpumask_var_t cpu_sibling_setup_mask;

extern void setup_cpu_local_masks(void);
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/msr.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h" 2

struct msr {
 union {
  struct {
   u32 l;
   u32 h;
  };
  u64 q;
 };
};

struct msr_info {
 u32 msr_no;
 struct msr reg;
 struct msr *msrs;
 int err;
};

struct msr_regs_info {
 u32 *regs;
 int err;
};

struct saved_msr {
 bool valid;
 struct msr_info info;
};

struct saved_msrs {
 unsigned int num;
 struct saved_msr *array;
};
# 68 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/tracepoint-defs.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/tracepoint-defs.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/static_key.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/tracepoint-defs.h" 2

struct trace_print_flags {
 unsigned long mask;
 const char *name;
};

struct trace_print_flags_u64 {
 unsigned long long mask;
 const char *name;
};

struct tracepoint_func {
 void *func;
 void *data;
 int prio;
};

struct tracepoint {
 const char *name;
 struct static_key key;
 int (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;
};
# 69 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h" 2

extern struct tracepoint __tracepoint_read_msr;
extern struct tracepoint __tracepoint_write_msr;
extern struct tracepoint __tracepoint_rdpmc;

extern void do_trace_write_msr(unsigned int msr, u64 val, int failed);
extern void do_trace_read_msr(unsigned int msr, u64 val, int failed);
extern void do_trace_rdpmc(unsigned int msr, u64 val, int failed);
# 91 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long long __attribute__((no_instrument_function)) __rdmsr(unsigned int msr)
{
 unsigned long low, high;

 asm volatile("1: rdmsr\n"
       "2:\n"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_rdmsr_unsafe" ") - .\n" " .popsection\n"
       : "=a" (low), "=d" (high) : "c" (msr));

 return ((low) | (high) << 32);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__((no_instrument_function)) __wrmsr(unsigned int msr, u32 low, u32 high)
{
 asm volatile("1: wrmsr\n"
       "2:\n"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_wrmsr_unsafe" ") - .\n" " .popsection\n"
       : : "c" (msr), "a"(low), "d" (high) : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long long native_read_msr(unsigned int msr)
{
 unsigned long long val;

 val = __rdmsr(msr);

 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_read_msr(msr, val, 0);

 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long long native_read_msr_safe(unsigned int msr,
            int *err)
{
 unsigned long low, high;

 asm volatile("2: rdmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3: mov %[fault],%[err]\n\t"
       "xorl %%eax, %%eax\n\t"
       "xorl %%edx, %%edx\n\t"
       "jmp 1b\n\t"
       ".previous\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n"
       : [err] "=r" (*err), "=a" (low), "=d" (high)
       : "c" (msr), [fault] "i" (-5));
 if (static_key_false(&(__tracepoint_read_msr).key))
  do_trace_read_msr(msr, ((low) | (high) << 32), *err);
 return ((low) | (high) << 32);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__((no_instrument_function))
native_write_msr(unsigned int msr, u32 low, u32 high)
{
 __wrmsr(msr, low, high);

 if (static_key_false(&(__tracepoint_write_msr).key))
  do_trace_write_msr(msr, ((u64)high << 32 | low), 0);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __attribute__((no_instrument_function))
native_write_msr_safe(unsigned int msr, u32 low, u32 high)
{
 int err;

 asm volatile("2: wrmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3:  mov %[fault],%[err] ; jmp 1b\n\t"
       ".previous\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n"
       : [err] "=a" (err)
       : "c" (msr), "0" (low), "d" (high),
         [fault] "i" (-5)
       : "memory");
 if (static_key_false(&(__tracepoint_write_msr).key))
  do_trace_write_msr(msr, ((u64)high << 32 | low), err);
 return err;
}

extern int rdmsr_safe_regs(u32 regs[8]);
extern int wrmsr_safe_regs(u32 regs[8]);
# 187 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long long rdtsc(void)
{
 unsigned long low, high;

 asm volatile("rdtsc" : "=a" (low), "=d" (high));

 return ((low) | (high) << 32);
}
# 204 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long long rdtsc_ordered(void)
{
# 217 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h"
 asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection\n" ::: "memory");
 return rdtsc();
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long long native_read_pmc(int counter)
{
 unsigned long low, high;

 asm volatile("rdpmc" : "=a" (low), "=d" (high) : "c" (counter));
 if (static_key_false(&(__tracepoint_rdpmc).key))
  do_trace_rdpmc(counter, ((low) | (high) << 32), 0);
 return ((low) | (high) << 32);
}
# 302 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/msr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int wrmsrl_safe(u32 msr, u64 val)
{
 return paravirt_write_msr_safe(msr, (u32)val, (u32)(val >> 32));
}





struct msr *msrs_alloc(void);
void msrs_free(struct msr *msrs);
int msr_set_bit(u32 msr, u8 bit);
int msr_clear_bit(u32 msr, u8 bit);


int rdmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);
int rdmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 *q);
int wrmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 q);
void rdmsr_on_cpus(const struct cpumask *mask, u32 msr_no, struct msr *msrs);
void wrmsr_on_cpus(const struct cpumask *mask, u32 msr_no, struct msr *msrs);
int rdmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);
int rdmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 *q);
int wrmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 q);
int rdmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8]);
int wrmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8]);
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/special_insns.h" 1
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/special_insns.h"
extern unsigned long __force_order;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long native_read_cr0(void)
{
 unsigned long val;
 asm volatile("mov %%cr0,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_write_cr0(unsigned long val)
{
 asm volatile("mov %0,%%cr0": : "r" (val), "m" (__force_order));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long native_read_cr2(void)
{
 unsigned long val;
 asm volatile("mov %%cr2,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_write_cr2(unsigned long val)
{
 asm volatile("mov %0,%%cr2": : "r" (val), "m" (__force_order));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __native_read_cr3(void)
{
 unsigned long val;
 asm volatile("mov %%cr3,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_write_cr3(unsigned long val)
{
 asm volatile("mov %0,%%cr3": : "r" (val), "m" (__force_order));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long native_read_cr4(void)
{
 unsigned long val;
# 70 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/special_insns.h"
 asm volatile("mov %%cr4,%0\n\t" : "=r" (val), "=m" (__force_order));

 return val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_write_cr4(unsigned long val)
{
 asm volatile("mov %0,%%cr4": : "r" (val), "m" (__force_order));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long native_read_cr8(void)
{
 unsigned long cr8;
 asm volatile("movq %%cr8,%0" : "=r" (cr8));
 return cr8;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_write_cr8(unsigned long val)
{
 asm volatile("movq %0,%%cr8" :: "r" (val) : "memory");
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 __read_pkru(void)
{
 u32 ecx = 0;
 u32 edx, pkru;





 asm volatile(".byte 0x0f,0x01,0xee\n\t"
       : "=a" (pkru), "=d" (edx)
       : "c" (ecx));
 return pkru;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __write_pkru(u32 pkru)
{
 u32 ecx = 0, edx = 0;





 asm volatile(".byte 0x0f,0x01,0xef\n\t"
       : : "a" (pkru), "c"(ecx), "d"(edx));
}
# 132 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/special_insns.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_wbinvd(void)
{
 asm volatile("wbinvd": : :"memory");
}

extern void native_load_gs_index(unsigned);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __read_cr4(void)
{
 return native_read_cr4();
}
# 213 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/special_insns.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clflush(volatile void *__p)
{
 asm volatile("clflush %0" : "+m" (*(volatile char *)__p));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clflushopt(volatile void *__p)
{
 asm volatile ("661:\n\t" ".byte " "0x3e" "; clflush %P0" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x66; clflush %P0" "\n" "665""1" ":\n\t" ".popsection\n" : "+m" (*(volatile char *)__p) : "i" (0));



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clwb(volatile void *__p)
{
 volatile struct { char x[64]; } *p = __p;

 asm volatile("661:\n\t" ".byte " "0x3e" "; clflush (%[pax])" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+23)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+24)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x66; clflush (%[pax])" "\n" "665""1" ":\n\t" "664""2"":\n\t" ".byte 0x66, 0x0f, 0xae, 0x30" "\n" "665""2" ":\n\t" ".popsection\n"





  : [p] "+m" (*p)
  : [pax] "a" (p));
}
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;


 u32 st_space[20];


 u32 status;
};







struct fxregs_state {
 u16 cwd;
 u16 swd;
 u16 twd;
 u16 fop;
 union {
  struct {
   u64 rip;
   u64 rdp;
  };
  struct {
   u32 fip;
   u32 fcs;
   u32 foo;
   u32 fos;
  };
 };
 u32 mxcsr;
 u32 mxcsr_mask;


 u32 st_space[32];


 u32 xmm_space[64];

 u32 padding[12];

 union {
  u32 padding1[12];
  u32 sw_reserved[12];
 };

} __attribute__((aligned(16)));
# 79 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;

 u32 st_space[20];
 u8 ftop;
 u8 changed;
 u8 lookahead;
 u8 no_update;
 u8 rm;
 u8 alimit;
 struct math_emu_info *info;
 u32 entry_eip;
};




enum xfeature {
 XFEATURE_FP,
 XFEATURE_SSE,




 XFEATURE_YMM,
 XFEATURE_BNDREGS,
 XFEATURE_BNDCSR,
 XFEATURE_OPMASK,
 XFEATURE_ZMM_Hi256,
 XFEATURE_Hi16_ZMM,
 XFEATURE_PT_UNIMPLEMENTED_SO_FAR,
 XFEATURE_PKRU,

 XFEATURE_MAX,
};
# 139 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
struct reg_128_bit {
 u8 regbytes[128/8];
};
struct reg_256_bit {
 u8 regbytes[256/8];
};
struct reg_512_bit {
 u8 regbytes[512/8];
};
# 159 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
struct ymmh_struct {
 struct reg_128_bit hi_ymm[16];
} __attribute__((packed));



struct mpx_bndreg {
 u64 lower_bound;
 u64 upper_bound;
} __attribute__((packed));



struct mpx_bndreg_state {
 struct mpx_bndreg bndreg[4];
} __attribute__((packed));






struct mpx_bndcsr {
 u64 bndcfgu;
 u64 bndstatus;
} __attribute__((packed));




struct mpx_bndcsr_state {
 union {
  struct mpx_bndcsr bndcsr;
  u8 pad_to_64_bytes[64];
 };
} __attribute__((packed));







struct avx_512_opmask_state {
 u64 opmask_reg[8];
} __attribute__((packed));






struct avx_512_zmm_uppers_state {
 struct reg_256_bit zmm_upper[16];
} __attribute__((packed));





struct avx_512_hi16_state {
 struct reg_512_bit hi16_zmm[16];
} __attribute__((packed));





struct pkru_state {
 u32 pkru;
 u32 pad;
} __attribute__((packed));

struct xstate_header {
 u64 xfeatures;
 u64 xcomp_bv;
 u64 reserved[6];
} __attribute__((packed));
# 253 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
 struct fxregs_state i387;
 struct xstate_header header;
 u8 extended_state_area[0];
} __attribute__ ((packed, aligned (64)));
# 268 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
 struct fregs_state fsave;
 struct fxregs_state fxsave;
 struct swregs_state soft;
 struct xregs_state xsave;
 u8 __padding[((1UL) << 12)];
};






struct fpu {
# 294 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
 unsigned int last_cpu;
# 303 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
 unsigned char initialized;
# 314 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/types.h"
 union fpregs_state state;




};
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/unwind_hints.h" 1



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/orc_types.h" 1
# 85 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/orc_types.h"
struct orc_entry {
 s16 sp_offset;
 s16 bp_offset;
 unsigned sp_reg:4;
 unsigned bp_reg:4;
 unsigned type:2;
} __attribute__((packed));







struct unwind_hint {
 u32 ip;
 s16 sp_offset;
 u8 sp_reg;
 u8 type;
};
# 5 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/unwind_hints.h" 2
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/personality.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/personality.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/personality.h"
enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
# 42 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/personality.h"
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/personality.h" 2
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/math64.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/div64.h" 1
# 75 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/div64.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/div64.h" 1
# 76 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/div64.h" 2
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/math64.h" 2
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/math64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
# 98 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/math64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 mul_u32_u32(u32 a, u32 b)
{
 return (u64)a * b;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 mul_u64_u64_shr(u64 a, u64 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}
# 229 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/math64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 mul_u64_u32_div(u64 a, u32 mul, u32 divisor)
{
 union {
  u64 ll;
  struct {



   u32 low, high;

  } l;
 } u, rl, rh;

 u.ll = a;
 rl.ll = mul_u32_u32(u.l.low, mul);
 rh.ll = mul_u32_u32(u.l.high, mul) + rl.l.high;


 rl.l.high = ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rh.ll)) % __base; (rh.ll) = ((uint64_t)(rh.ll)) / __base; __rem; });


 ({ uint32_t __base = (divisor); uint32_t __rem; __rem = ((uint64_t)(rl.ll)) % __base; (rl.ll) = ((uint64_t)(rl.ll)) / __base; __rem; });

 rl.l.high = rh.l.low;
 return rl.ll;
}
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/err.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/errno.h" 1
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/err.h" 2
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/err.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void * ERR_PTR(long error)
{
 return (void *) error;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long PTR_ERR( const void *ptr)
{
 return (long) ptr;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool IS_ERR( const void *ptr)
{
 return __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool IS_ERR_OR_NULL( const void *ptr)
{
 return __builtin_expect(!!(!ptr), 0) || __builtin_expect(!!((unsigned long)(void *)((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
# 51 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/err.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void * ERR_CAST( const void *ptr)
{

 return (void *) ptr;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int PTR_ERR_OR_ZERO( const void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
# 33 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h" 2
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *current_text_addr(void)
{
 void *pc;

 asm volatile("mov $1f, %0; 1:":"=r" (pc));

 return pc;
}
# 71 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
enum tlb_infos {
 ENTRIES,
 NR_INFO
};

extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_1g[NR_INFO];







struct cpuinfo_x86 {
 __u8 x86;
 __u8 x86_vendor;
 __u8 x86_model;
 __u8 x86_stepping;


 int x86_tlbsize;

 __u8 x86_virt_bits;
 __u8 x86_phys_bits;

 __u8 x86_coreid_bits;
 __u8 cu_id;

 __u32 extended_cpuid_level;

 int cpuid_level;
 __u32 x86_capability[19 + 1];
 char x86_vendor_id[16];
 char x86_model_id[64];

 unsigned int x86_cache_size;
 int x86_cache_alignment;

 int x86_cache_max_rmid;
 int x86_cache_occ_scale;
 int x86_power;
 unsigned long loops_per_jiffy;

 u16 x86_max_cores;
 u16 apicid;
 u16 initial_apicid;
 u16 x86_clflush_size;

 u16 booted_cores;

 u16 phys_proc_id;

 u16 logical_proc_id;

 u16 cpu_core_id;

 u16 cpu_index;
 u32 microcode;

 u8 x86_cache_bits;
} ;

struct cpuid_regs {
 u32 eax, ebx, ecx, edx;
};

enum cpuid_regs_idx {
 CPUID_EAX = 0,
 CPUID_EBX,
 CPUID_ECX,
 CPUID_EDX,
};
# 164 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
extern struct cpuinfo_x86 boot_cpu_data;
extern struct cpuinfo_x86 new_cpu_data;

extern struct x86_hw_tss doublefault_tss;
extern __u32 cpu_caps_cleared[19 + 1];
extern __u32 cpu_caps_set[19 + 1];


extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(struct cpuinfo_x86) cpu_info;






extern const struct seq_operations cpuinfo_op;



extern void cpu_detect(struct cpuinfo_x86 *c);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long long l1tf_pfn_limit(void)
{
 return (1ULL << (boot_cpu_data.x86_cache_bits - 1 - 12));
}

extern void early_cpu_init(void);
extern void identify_boot_cpu(void);
extern void identify_secondary_cpu(struct cpuinfo_x86 *);
extern void print_cpu_info(struct cpuinfo_x86 *);
void print_cpu_msr(struct cpuinfo_x86 *);
extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
extern u32 get_scattered_cpuid_leaf(unsigned int level,
        unsigned int sub_leaf,
        enum cpuid_regs_idx reg);
extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
extern void init_amd_cacheinfo(struct cpuinfo_x86 *c);

extern void detect_extended_topology(struct cpuinfo_x86 *c);
extern void detect_ht(struct cpuinfo_x86 *c);




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int have_cpuid_p(void)
{
 return 1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_cpuid(unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{

 asm volatile("cpuid"
     : "=a" (*eax),
       "=b" (*ebx),
       "=c" (*ecx),
       "=d" (*edx)
     : "0" (*eax), "2" (*ecx)
     : "memory");
}
# 239 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int native_cpuid_eax(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return eax; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int native_cpuid_ebx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return ebx; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int native_cpuid_ecx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return ecx; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int native_cpuid_edx(unsigned int op) { unsigned int eax = op, ebx, ecx = 0, edx; native_cpuid(&eax, &ebx, &ecx, &edx); return edx; }




static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long read_cr3_pa(void)
{
 return __read_cr3() & (0x7FFFFFFFFFFFF000ull);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long native_read_cr3_pa(void)
{
 return __native_read_cr3() & (0x7FFFFFFFFFFFF000ull);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void load_cr3(pgd_t *pgdir)
{
 write_cr3((__phys_addr_nodebug((unsigned long)(pgdir)) | 0ULL));
}
# 316 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
struct x86_hw_tss {
 u32 reserved1;
 u64 sp0;





 u64 sp1;

 u64 sp2;
 u64 reserved2;
 u64 ist[7];
 u32 reserved3;
 u32 reserved4;
 u16 reserved5;
 u16 io_bitmap_base;

} __attribute__((packed));
# 346 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
struct entry_stack {
 unsigned long words[64];
};

struct entry_stack_page {
 struct entry_stack stack;
} __attribute__((aligned(((1UL) << 12))));

struct tss_struct {





 struct x86_hw_tss x86_tss;







 unsigned long io_bitmap[((65536/8)/sizeof(long)) + 1];
} __attribute__((aligned(((1UL) << 12))));

extern __attribute__((section(".data..percpu" "..page_aligned"))) __typeof__(struct tss_struct) cpu_tss_rw __attribute__((aligned(((1UL) << 12))));
# 393 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
struct orig_ist {
 unsigned long ist[7];
};


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct orig_ist) orig_ist;

union irq_stack_union {
 char irq_stack[(((1UL) << 12) << (2 + 0))];





 struct {
  char gs_base[40];
  unsigned long stack_canary;
 };
};

extern __attribute__((section(".data..percpu" "..first"))) __typeof__(union irq_stack_union) irq_stack_union ;
extern typeof(irq_stack_union) init_per_cpu__irq_stack_union;

extern __attribute__((section(".data..percpu" ""))) __typeof__(char *) irq_stack_ptr;
extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned int) irq_count;
extern void ignore_sysret(void);
# 444 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
extern unsigned int fpu_kernel_xstate_size;
extern unsigned int fpu_user_xstate_size;

struct perf_event;

typedef struct {
 unsigned long seg;
} mm_segment_t;

struct thread_struct {

 struct desc_struct tls_array[3];



 unsigned long sp;



 unsigned short es;
 unsigned short ds;
 unsigned short fsindex;
 unsigned short gsindex;



 unsigned long fsbase;
 unsigned long gsbase;
# 482 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
 struct perf_event *ptrace_bps[4];

 unsigned long debugreg6;

 unsigned long ptrace_dr7;

 unsigned long cr2;
 unsigned long trap_nr;
 unsigned long error_code;





 unsigned long *io_bitmap_ptr;
 unsigned long iopl;

 unsigned io_bitmap_max;

 mm_segment_t addr_limit;

 unsigned int sig_on_uaccess_err:1;
 unsigned int uaccess_err:1;


 struct fpu fpu;




};
# 526 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_iopl_mask(unsigned mask)
{
# 540 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
native_load_sp0(unsigned long sp0)
{
 do { do { const void *__vpp_verify = (typeof((&(cpu_tss_rw.x86_tss.sp0)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_tss_rw.x86_tss.sp0)) { case 1: do { typedef typeof((cpu_tss_rw.x86_tss.sp0)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } switch (sizeof((cpu_tss_rw.x86_tss.sp0))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "qi" ((pto_T__)(sp0))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "re" ((pto_T__)(sp0))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((cpu_tss_rw.x86_tss.sp0)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } switch (sizeof((cpu_tss_rw.x86_tss.sp0))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "qi" ((pto_T__)(sp0))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "re" ((pto_T__)(sp0))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((cpu_tss_rw.x86_tss.sp0)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } switch (sizeof((cpu_tss_rw.x86_tss.sp0))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "qi" ((pto_T__)(sp0))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "re" ((pto_T__)(sp0))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((cpu_tss_rw.x86_tss.sp0)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (sp0); (void)pto_tmp__; } switch (sizeof((cpu_tss_rw.x86_tss.sp0))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "qi" ((pto_T__)(sp0))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "ri" ((pto_T__)(sp0))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((cpu_tss_rw.x86_tss.sp0)) : "re" ((pto_T__)(sp0))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_swapgs(void)
{

 asm volatile("swapgs" ::: "memory");

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long current_top_of_stack(void)
{





 return ({ typeof(cpu_tss_rw.x86_tss.sp1) pfo_ret__; switch (sizeof(cpu_tss_rw.x86_tss.sp1)) { case 1: asm("mov" "b ""%%""gs"":" "%" "P1"",%0" : "=q" (pfo_ret__) : "p" (&(cpu_tss_rw.x86_tss.sp1))); break; case 2: asm("mov" "w ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(cpu_tss_rw.x86_tss.sp1))); break; case 4: asm("mov" "l ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(cpu_tss_rw.x86_tss.sp1))); break; case 8: asm("mov" "q ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(cpu_tss_rw.x86_tss.sp1))); break; default: __bad_percpu_size(); } pfo_ret__; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool on_thread_stack(void)
{
 return (unsigned long)(current_top_of_stack() -
          current_stack_pointer) < (((1UL) << 12) << (2 + 0));
}
# 585 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpuid(unsigned int op,
    unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = 0;
 __cpuid(eax, ebx, ecx, edx);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpuid_count(unsigned int op, int count,
          unsigned int *eax, unsigned int *ebx,
          unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = count;
 __cpuid(eax, ebx, ecx, edx);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpuid_eax(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return eax;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpuid_ebx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ebx;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpuid_ecx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ecx;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int cpuid_edx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return edx;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void rep_nop(void)
{
 asm volatile("rep; nop" ::: "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void cpu_relax(void)
{
 rep_nop();
}
# 677 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sync_core(void)
{
# 710 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
 unsigned int tmp;

 asm volatile (
  "987: \n\t" ".pushsection .discard.unwind_hints\n\t" ".long 987b - .\n\t" ".short " "0" "\n\t" ".byte " "0" "\n\t" ".byte " "3" "\n\t" ".popsection\n\t"
  "mov %%ss, %0\n\t"
  "pushq %q0\n\t"
  "pushq %%rsp\n\t"
  "addq $8, (%%rsp)\n\t"
  "pushfq\n\t"
  "mov %%cs, %0\n\t"
  "pushq %q0\n\t"
  "pushq $1f\n\t"
  "iretq\n\t"
  "987: \n\t" ".pushsection .discard.unwind_hints\n\t" ".long 987b - .\n\t" ".short " "0" "\n\t" ".byte " "0" "\n\t" ".byte " "4" "\n\t" ".popsection\n\t"
  "1:"
  : "=&r" (tmp), "+r" (current_stack_pointer) : : "cc", "memory");

}

extern void select_idle_routine(const struct cpuinfo_x86 *c);
extern void amd_e400_c1e_apic_setup(void);

extern unsigned long boot_option_idle_override;

enum idle_boot_override {IDLE_NO_OVERRIDE=0, IDLE_HALT, IDLE_NOMWAIT,
    IDLE_POLL};

extern void enable_sep_cpu(void);
extern int sysenter_setup(void);

extern void early_trap_init(void);
void early_trap_pf_init(void);


extern struct desc_ptr early_gdt_descr;

extern void cpu_set_gdt(int);
extern void switch_to_new_gdt(int);
extern void load_direct_gdt(int);
extern void load_fixmap_gdt(int);
extern void load_percpu_segment(int);
extern void cpu_init(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long get_debugctlmsr(void)
{
 unsigned long debugctlmsr = 0;





 do { debugctlmsr = paravirt_read_msr(0x000001d9); } while (0);

 return debugctlmsr;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void update_debugctlmsr(unsigned long debugctlmsr)
{




 wrmsrl(0x000001d9, debugctlmsr);
}

extern void set_task_blockstep(struct task_struct *task, bool on);


extern int bootloader_type;
extern int bootloader_version;

extern char ignore_fpu_irq;
# 800 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void prefetch(const void *x)
{
 asm volatile ("661:\n\t" "prefetcht0 %P1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 0*32+25)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "prefetchnta %P1" "\n" "665""1" ":\n\t" ".popsection\n" : : "i" (0), "m" (*(const char *)x));


}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void prefetchw(const void *x)
{
 asm volatile ("661:\n\t" "prefetcht0 %P1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 6*32+ 8)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "prefetchw %P1" "\n" "665""1" ":\n\t" ".popsection\n" : : "i" (0), "m" (*(const char *)x));


}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void spin_lock_prefetch(const void *x)
{
 prefetchw(x);
}
# 900 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
extern unsigned long KSTK_ESP(struct task_struct *task);



extern void start_thread(struct pt_regs *regs, unsigned long new_ip,
            unsigned long new_sp);
# 920 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
extern int get_tsc_mode(unsigned long adr);
extern int set_tsc_mode(unsigned int val);

extern __attribute__((section(".data..percpu" ""))) __typeof__(u64) msr_misc_features_shadow;
# 933 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/processor.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mpx_enable_management(void)
{
 return -22;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mpx_disable_management(void)
{
 return -22;
}



extern u16 amd_get_nb_id(int cpu);
extern u32 amd_get_nodes_per_socket(void);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) uint32_t hypervisor_cpuid_base(const char *sig, uint32_t leaves)
{
 uint32_t base, eax, signature[3];

 for (base = 0x40000000; base < 0x40010000; base += 0x100) {
  cpuid(base, &eax, &signature[0], &signature[1], &signature[2]);

  if (!memcmp(sig, signature, 12) &&
      (leaves == 0 || ((eax - base) >= leaves)))
   return base;
 }

 return 0;
}

extern unsigned long arch_align_stack(unsigned long sp);
extern void free_init_pages(char *what, unsigned long begin, unsigned long end);

void default_idle(void);






void stop_this_cpu(void *dummy);
void df_debug(struct pt_regs *regs, long error_code);
void microcode_check(void);

enum l1tf_mitigations {
 L1TF_MITIGATION_OFF,
 L1TF_MITIGATION_FLUSH_NOWARN,
 L1TF_MITIGATION_FLUSH,
 L1TF_MITIGATION_FLUSH_NOSMT,
 L1TF_MITIGATION_FULL,
 L1TF_MITIGATION_FULL_FORCE
};

extern enum l1tf_mitigations l1tf_mitigation;

enum mds_mitigations {
 MDS_MITIGATION_OFF,
 MDS_MITIGATION_FULL,
 MDS_MITIGATION_VMWERV,
};

enum taa_mitigations {
 TAA_MITIGATION_OFF,
 TAA_MITIGATION_UCODE_NEEDED,
 TAA_MITIGATION_VERW,
 TAA_MITIGATION_TSX_DISABLED,
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeature.h" 2






enum cpuid_leafs
{
 CPUID_1_EDX = 0,
 CPUID_8000_0001_EDX,
 CPUID_8086_0001_EDX,
 CPUID_LNX_1,
 CPUID_1_ECX,
 CPUID_C000_0001_EDX,
 CPUID_8000_0001_ECX,
 CPUID_LNX_2,
 CPUID_LNX_3,
 CPUID_7_0_EBX,
 CPUID_D_1_EAX,
 CPUID_LNX_4,
 CPUID_DUMMY,
 CPUID_8000_0008_EBX,
 CPUID_6_EAX,
 CPUID_8000_000A_EDX,
 CPUID_7_ECX,
 CPUID_8000_0007_EBX,
 CPUID_7_EDX,
};


extern const char * const x86_cap_flags[19*32];
extern const char * const x86_power_flags[32];
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeature.h"
extern const char * const x86_bug_flags[1*32];
# 133 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeature.h"
extern void setup_clear_cpu_cap(unsigned int bit);
extern void clear_cpu_cap(struct cpuinfo_x86 *c, unsigned int bit);
# 149 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeature.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((pure)) bool _static_cpu_has(u16 bit)
{
  do { asm goto("1: jmp 6f\n" "2:\n" ".skip -(((5f-4f) - (2b-1b)) > 0) * " "((5f-4f) - (2b-1b)),0x90\n" "3:\n" ".section .altinstructions,\"a\"\n" " .long 1b - .\n" " .long 4f - .\n" " .word %P1\n" " .byte 3b - 1b\n" " .byte 5f - 4f\n" " .byte 3b - 2b\n" ".previous\n" ".section .altinstr_replacement,\"ax\"\n" "4: jmp %l[t_no]\n" "5:\n" ".previous\n" ".section .altinstructions,\"a\"\n" " .long 1b - .\n" " .long 0\n" " .word %P0\n" " .byte 3b - 1b\n" " .byte 0\n" " .byte 0\n" ".previous\n" ".section .altinstr_aux,\"ax\"\n" "6:\n" " testb %[bitnum],%[cap_byte]\n" " jnz %l[t_yes]\n" " jmp %l[t_no]\n" ".previous\n" : : "i" (bit), "i" (( 3*32+21)), [bitnum] "i" (1 << (bit & 7)), [cap_byte] "m" (((const char *)boot_cpu_data.x86_capability)[bit >> 3]) : : t_yes, t_no); asm (""); } while (0);
# 186 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cpufeature.h"
 t_yes:
  return true;
 t_no:
  return false;
}
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/thread_info.h" 2


struct thread_info {
 unsigned long flags;
 u32 status;
};
# 188 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/thread_info.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int arch_within_stack_frames(const void * const stack,
        const void * const stackend,
        const void *obj, unsigned long len)
{

 const void *frame = ((void *)0);
 const void *oldframe;

 oldframe = __builtin_frame_address(1);
 if (oldframe)
  frame = __builtin_frame_address(2);






 while (stack <= frame && frame < stackend) {






  if (obj + len <= frame)
   return obj >= oldframe + 2 * sizeof(void *) ?
    GOOD_FRAME : BAD_STACK;
  oldframe = frame;
  frame = *(const void * const *)frame;
 }
 return BAD_STACK;



}
# 253 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/thread_info.h"
extern void arch_task_cache_init(void);
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
extern void arch_release_task_struct(struct task_struct *tsk);
extern void arch_setup_new_exec(void);
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/thread_info.h" 2
# 53 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/thread_info.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void update_ti_thread_flag(struct thread_info *ti, int flag,
      bool value)
{
 if (value)
  set_ti_thread_flag(ti, flag);
 else
  clear_ti_thread_flag(ti, flag);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return (__builtin_constant_p((flag)) ? constant_test_bit((flag), ((unsigned long *)&ti->flags)) : variable_test_bit((flag), ((unsigned long *)&ti->flags)));
}
# 112 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/thread_info.h"
extern void __check_object_size(const void *ptr, unsigned long n,
     bool to_user);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void check_object_size(const void *ptr, unsigned long n,
           bool to_user)
{
 if (!__builtin_constant_p(n))
  __check_object_size(ptr, n, to_user);
}






extern void
__bad_copy_from(void);
extern void
__bad_copy_to(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_overflow(int size, unsigned long count)
{
 ({ int __ret_warn_on = !!(1); if (__builtin_expect(!!(__ret_warn_on), 0)) do { printk("Buffer overflow detected (%d < %lu)!\n", size, count); do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/thread_info.h"), "i" (134), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool
check_copy_size(const void *addr, size_t bytes, bool is_source)
{
 int sz = __builtin_object_size(addr, 0);
 if (__builtin_expect(!!(sz >= 0 && sz < bytes), 0)) {
  if (!__builtin_constant_p(bytes))
   copy_overflow(sz, bytes);
  else if (is_source)
   __bad_copy_from();
  else
   __bad_copy_to();
  return false;
 }
 check_object_size(addr, bytes, is_source);
 return true;
}
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/preempt.h" 2

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) __preempt_count;
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/preempt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int preempt_count(void)
{
 return ({ typeof(__preempt_count) pfo_ret__; switch (sizeof(__preempt_count)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (__preempt_count)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) & ~0x80000000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void preempt_count_set(int pc)
{
 int old, new;

 do {
  old = ({ typeof(__preempt_count) pfo_ret__; switch (sizeof(__preempt_count)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (__preempt_count)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; });
  new = (old & 0x80000000) |
   (pc & ~0x80000000);
 } while (({ typeof(__preempt_count) pco_ret__; typeof(__preempt_count) pco_old__ = (old); typeof(__preempt_count) pco_new__ = (new); switch (sizeof(__preempt_count)) { case 1: asm("cmpxchgb %2, ""%%""gs"":" "%" "1" : "=a" (pco_ret__), "+m" (__preempt_count) : "q" (pco_new__), "0" (pco_old__) : "memory"); break; case 2: asm("cmpxchgw %2, ""%%""gs"":" "%" "1" : "=a" (pco_ret__), "+m" (__preempt_count) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 4: asm("cmpxchgl %2, ""%%""gs"":" "%" "1" : "=a" (pco_ret__), "+m" (__preempt_count) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; case 8: asm("cmpxchgq %2, ""%%""gs"":" "%" "1" : "=a" (pco_ret__), "+m" (__preempt_count) : "r" (pco_new__), "0" (pco_old__) : "memory"); break; default: __bad_percpu_size(); } pco_ret__; }) != old);
}
# 55 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/preempt.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void set_preempt_need_resched(void)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (~0x80000000); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("and" "b %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(~0x80000000))); break; case 2: asm("and" "w %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(~0x80000000))); break; case 4: asm("and" "l %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(~0x80000000))); break; case 8: asm("and" "q %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(~0x80000000))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void clear_preempt_need_resched(void)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (0x80000000); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("or" "b %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(0x80000000))); break; case 2: asm("or" "w %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(0x80000000))); break; case 4: asm("or" "l %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(0x80000000))); break; case 8: asm("or" "q %1,""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(0x80000000))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool test_preempt_need_resched(void)
{
 return !(({ typeof(__preempt_count) pfo_ret__; switch (sizeof(__preempt_count)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (__preempt_count)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) & 0x80000000);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __preempt_count_add(int val)
{
 do { typedef typeof((__preempt_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (int)(val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } switch (sizeof((__preempt_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pao_T__)(val))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(val))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(val))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pao_T__)(val))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __preempt_count_sub(int val)
{
 do { typedef typeof((__preempt_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-val) && ((-val) == 1 || (-val) == -1)) ? (int)(-val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-val); (void)pao_tmp__; } switch (sizeof((__preempt_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "qi" ((pao_T__)(-val))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(-val))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(-val))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((__preempt_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((__preempt_count)) : "re" ((pao_T__)(-val))); break; default: __bad_percpu_size(); } } while (0);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool __preempt_count_dec_and_test(void)
{
 do { bool c; asm volatile ("decl" " " "%%""gs"":" "%" "0" "\n\t/* output condition code " "e" "*/\n" : [counter] "+m" (__preempt_count), "=@cc" "e" (c) : : "memory"); return c; } while (0);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool should_resched(int preempt_offset)
{
 return __builtin_expect(!!(({ typeof(__preempt_count) pfo_ret__; switch (sizeof(__preempt_count)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (__preempt_count)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) == preempt_offset), 0);
}


  extern void ___preempt_schedule(void);



  extern void preempt_schedule(void);
  extern void ___preempt_schedule_notrace(void);



  extern void preempt_schedule_notrace(void);
# 82 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/preempt.h" 2
# 154 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/preempt.h"
extern void preempt_count_add(int val);
extern void preempt_count_sub(int val);
# 41 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bottom_half.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bottom_half.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
{
 preempt_count_add(cnt);
 __asm__ __volatile__("": : :"memory");
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void local_bh_disable(void)
{
 __local_bh_disable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}

extern void _local_bh_enable(void);
extern void __local_bh_enable_ip(unsigned long ip, unsigned int cnt);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void local_bh_enable_ip(unsigned long ip)
{
 __local_bh_enable_ip(ip, (2 * (1UL << (0 + 8))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void local_bh_enable(void)
{
 __local_bh_enable_ip(({ __label__ __here; __here: (unsigned long)&&__here; }), (2 * (1UL << (0 + 8))));
}
# 42 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
struct task_struct;
struct lockdep_map;


extern int prove_locking;
extern int lock_stat;
# 491 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void lockdep_off(void)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void lockdep_on(void)
{
}
# 529 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
struct lock_class_key { };
# 542 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
struct pin_cookie { };
# 552 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
enum xhlock_context_t {
 XHLOCK_HARD,
 XHLOCK_SOFT,
 XHLOCK_CTX_NR,
};
# 597 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void crossrelease_hist_start(enum xhlock_context_t c) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void crossrelease_hist_end(enum xhlock_context_t c) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void lockdep_invariant_state(bool force) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void lockdep_init_task(struct task_struct *task) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void lockdep_free_task(struct task_struct *task) {}
# 663 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void print_irqtrace_events(struct task_struct *curr)
{
}
# 731 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockdep.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
lockdep_rcu_suspicious(const char *file, const int line, const char *s)
{
}
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h" 2
# 53 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
void call_rcu(struct callback_head *head, rcu_callback_t func);




void call_rcu_bh(struct callback_head *head, rcu_callback_t func);
void call_rcu_sched(struct callback_head *head, rcu_callback_t func);
void synchronize_sched(void);
void rcu_barrier_tasks(void);



void __rcu_read_lock(void);
void __rcu_read_unlock(void);
void rcu_read_unlock_special(struct task_struct *t);
void synchronize_rcu(void);
# 103 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
void rcu_init(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_sched_qs(void);
void rcu_bh_qs(void);
void rcu_check_callbacks(int user);
void rcu_report_dead(unsigned int cpu);
void rcu_cpu_starting(unsigned int cpu);
void rcutree_migrate_callbacks(int cpu);


void rcu_sysrq_start(void);
void rcu_sysrq_end(void);
# 124 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_user_enter(void) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_user_exit(void) { }





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_init_nohz(void) { }
# 175 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
void call_rcu_tasks(struct callback_head *head, rcu_callback_t func);
void synchronize_rcu_tasks(void);
void exit_tasks_rcu_start(void);
void exit_tasks_rcu_finish(void);
# 207 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcutree.h" 1
# 33 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcutree.h"
void rcu_note_context_switch(bool preempt);
int rcu_needs_cpu(u64 basem, u64 *nextevt);
void rcu_cpu_stall_reset(void);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_virt_note_context_switch(int cpu)
{
 rcu_note_context_switch(false);
}

void synchronize_rcu_bh(void);
void synchronize_sched_expedited(void);
void synchronize_rcu_expedited(void);

void kfree_call_rcu(struct callback_head *head, rcu_callback_t func);
# 69 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcutree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void synchronize_rcu_bh_expedited(void)
{
 synchronize_sched_expedited();
}

void rcu_barrier(void);
void rcu_barrier_bh(void);
void rcu_barrier_sched(void);
unsigned long get_state_synchronize_rcu(void);
void cond_synchronize_rcu(unsigned long oldstate);
unsigned long get_state_synchronize_sched(void);
void cond_synchronize_sched(unsigned long oldstate);

void rcu_idle_enter(void);
void rcu_idle_exit(void);
void rcu_irq_enter(void);
void rcu_irq_exit(void);
void rcu_irq_enter_irqson(void);
void rcu_irq_exit_irqson(void);
bool rcu_irq_enter_disabled(void);

void exit_rcu(void);

void rcu_scheduler_starting(void);
extern int rcu_scheduler_active __attribute__((__section__(".data..read_mostly")));
void rcu_end_inkernel_boot(void);
bool rcu_is_watching(void);
void rcu_all_qs(void);


int rcutree_prepare_cpu(unsigned int cpu);
int rcutree_online_cpu(unsigned int cpu);
int rcutree_offline_cpu(unsigned int cpu);
int rcutree_dead_cpu(unsigned int cpu);
int rcutree_dying_cpu(unsigned int cpu);
# 208 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h" 2
# 226 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_rcu_head(struct callback_head *head) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void destroy_rcu_head(struct callback_head *head) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_rcu_head_on_stack(struct callback_head *head) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void destroy_rcu_head_on_stack(struct callback_head *head) { }





static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool rcu_lockdep_current_cpu_online(void) { return true; }
# 264 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rcu_read_lock_held(void)
{
 return 1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rcu_read_lock_bh_held(void)
{
 return 1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rcu_read_lock_sched_held(void)
{
 return !(preempt_count() == 0 && !({ unsigned long _flags; do { ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _flags = arch_local_save_flags(); } while (0); ({ ({ unsigned long __dummy; typeof(_flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_irqs_disabled_flags(_flags); }); }));
}
# 625 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void rcu_read_lock(void)
{
 __rcu_read_lock();
 (void)0;
 do { } while (0);
 do { } while (0);

}
# 679 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_read_unlock(void)
{
 do { } while (0);

 (void)0;
 __rcu_read_unlock();
 do { } while (0);
}
# 705 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_read_lock_bh(void)
{
 local_bh_disable();
 (void)0;
 do { } while (0);
 do { } while (0);

}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_read_unlock_bh(void)
{
 do { } while (0);

 do { } while (0);
 (void)0;
 local_bh_enable();
}
# 741 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcupdate.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_read_lock_sched(void)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
 do { } while (0);
 do { } while (0);

}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_lock_sched_notrace(void)
{
 do { __preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 (void)0;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched(void)
{
 do { } while (0);

 do { } while (0);
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((no_instrument_function)) void rcu_read_unlock_sched_notrace(void)
{
 (void)0;
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(__preempt_count_dec_and_test()), 0)) asm volatile ("call ___preempt_schedule_notrace" : "+r" (current_stack_pointer)); } while (0);
}
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h" 2
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) (list) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; });
 ({ union { typeof(list->prev) __val; char __c[1]; } __u = { .__val = ( typeof(list->prev)) (list) }; __write_once_size(&(list->prev), __u.__c, sizeof(list->prev)); __u.__val; });
}
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __list_add_rcu(struct list_head *new,
  struct list_head *prev, struct list_head *next)
{
 if (!__list_add_valid(new, prev, next))
  return;

 new->next = next;
 new->prev = prev;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(new); if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_2(void) ; if (__cond) __compiletime_assert_2(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct list_head **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(prev)->next))))); __u.__val; }); } while (0); _r_a_p__v; });
 next->prev = new;
}
# 77 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_add_rcu(struct list_head *new, struct list_head *head)
{
 __list_add_rcu(new, head, head->next);
}
# 98 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_add_tail_rcu(struct list_head *new,
     struct list_head *head)
{
 __list_add_rcu(new, head->prev, head);
}
# 128 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 154 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  n->pprev = ((void *)0);
 }
}
# 170 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_replace_rcu(struct list_head *old,
    struct list_head *new)
{
 new->next = old->next;
 new->prev = old->prev;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(new); if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(new->prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(new->prev)->next)))))) ((typeof((*((struct list_head **)(&(new->prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(new->prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(new->prev)->next)))))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(new->prev)->next)))) == sizeof(long))); extern void __compiletime_assert_3(void) ; if (__cond) __compiletime_assert_3(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct list_head **)(&(new->prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(new->prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(new->prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct list_head **)(&(new->prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(new->prev)->next))))); __u.__val; }); } while (0); _r_a_p__v; });
 new->next->prev = new;
 old->prev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 199 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __list_splice_init_rcu(struct list_head *list,
       struct list_head *prev,
       struct list_head *next,
       void (*sync)(void))
{
 struct list_head *first = list->next;
 struct list_head *last = list->prev;







 INIT_LIST_HEAD_RCU(list);
# 222 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
 sync();
# 232 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
 last->next = next;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(first); if (__builtin_constant_p(first) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct list_head **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct list_head **)(&(prev)->next)))))) ((typeof((*((struct list_head **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct list_head **)(&(prev)->next))))), __u.__c, sizeof(((*((struct list_head **)(&(prev)->next)))))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct list_head **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_4(void) ; if (__cond) __compiletime_assert_4(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct list_head **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct list_head **)(&(prev)->next))))) ((typeof(*((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct list_head **)(&(prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct list_head **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct list_head **)(&(prev)->next))))); __u.__val; }); } while (0); _r_a_p__v; });
 first->prev = prev;
 next->prev = last;
}
# 245 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head, head->next, sync);
}
# 260 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void list_splice_tail_init_rcu(struct list_head *list,
          struct list_head *head,
          void (*sync)(void))
{
 if (!list_empty(list))
  __list_splice_init_rcu(list, head->prev, head, sync);
}
# 425 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 438 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *new)
{
 struct hlist_node *next = old->next;

 new->next = next;
 new->pprev = old->pprev;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(new); if (__builtin_constant_p(new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*(struct hlist_node **)new->pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*(struct hlist_node **)new->pprev))) ((typeof(*(struct hlist_node **)new->pprev))(_r_a_p__v)) }; __write_once_size(&((*(struct hlist_node **)new->pprev)), __u.__c, sizeof((*(struct hlist_node **)new->pprev))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(char) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(short) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(int) || sizeof(*&*(struct hlist_node **)new->pprev) == sizeof(long))); extern void __compiletime_assert_5(void) ; if (__cond) __compiletime_assert_5(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*(struct hlist_node **)new->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*(struct hlist_node **)new->pprev)) ((typeof(*((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) *)((typeof(*(struct hlist_node **)new->pprev))_r_a_p__v)) }; __write_once_size(&(*&*(struct hlist_node **)new->pprev), __u.__c, sizeof(*&*(struct hlist_node **)new->pprev)); __u.__val; }); } while (0); _r_a_p__v; });
 if (next)
  new->next->pprev = &new->next;
 old->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 477 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = h->first;

 n->next = first;
 n->pprev = &h->first;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(h)->first))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(h)->first)))))) ((typeof((*((struct hlist_node **)(&(h)->first)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(h)->first))))), __u.__c, sizeof(((*((struct hlist_node **)(&(h)->first)))))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(h)->first)))) == sizeof(long))); extern void __compiletime_assert_6(void) ; if (__cond) __compiletime_assert_6(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(h)->first)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(h)->first))))) ((typeof(*((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(h)->first)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(h)->first)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(h)->first))))); __u.__val; }); } while (0); _r_a_p__v; });
 if (first)
  first->pprev = &n->next;
}
# 508 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_tail_rcu(struct hlist_node *n,
          struct hlist_head *h)
{
 struct hlist_node *i, *last = ((void *)0);


 for (i = h->first; i; i = i->next)
  last = i;

 if (last) {
  n->next = last->next;
  n->pprev = &last->next;
  ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(last)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(last)->next)))))) ((typeof((*((struct hlist_node **)(&(last)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(last)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(last)->next)))))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(last)->next)))) == sizeof(long))); extern void __compiletime_assert_7(void) ; if (__cond) __compiletime_assert_7(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(last)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(last)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(last)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(last)->next)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(last)->next))))); __u.__val; }); } while (0); _r_a_p__v; });
 } else {
  hlist_add_head_rcu(n, h);
 }
}
# 544 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = next->pprev;
 n->next = next;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)((n)->pprev))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)((n)->pprev)))))) ((typeof((*((struct hlist_node **)((n)->pprev)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)((n)->pprev))))), __u.__c, sizeof(((*((struct hlist_node **)((n)->pprev)))))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)((n)->pprev)))) == sizeof(long))); extern void __compiletime_assert_8(void) ; if (__cond) __compiletime_assert_8(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)((n)->pprev)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)((n)->pprev))))) ((typeof(*((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)((n)->pprev)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)((n)->pprev)))), __u.__c, sizeof(*&(*((struct hlist_node **)((n)->pprev))))); __u.__val; }); } while (0); _r_a_p__v; });
 next->pprev = &n->next;
}
# 571 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_add_behind_rcu(struct hlist_node *n,
     struct hlist_node *prev)
{
 n->next = prev->next;
 n->pprev = &prev->next;
 ({ uintptr_t _r_a_p__v = (uintptr_t)(n); if (__builtin_constant_p(n) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof(((*((struct hlist_node **)(&(prev)->next))))) __val; char __c[1]; } __u = { .__val = ( typeof(((*((struct hlist_node **)(&(prev)->next)))))) ((typeof((*((struct hlist_node **)(&(prev)->next)))))(_r_a_p__v)) }; __write_once_size(&(((*((struct hlist_node **)(&(prev)->next))))), __u.__c, sizeof(((*((struct hlist_node **)(&(prev)->next)))))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(char) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(short) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(int) || sizeof(*&(*((struct hlist_node **)(&(prev)->next)))) == sizeof(long))); extern void __compiletime_assert_9(void) ; if (__cond) __compiletime_assert_9(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&(*((struct hlist_node **)(&(prev)->next)))) __val; char __c[1]; } __u = { .__val = ( typeof(*&(*((struct hlist_node **)(&(prev)->next))))) ((typeof(*((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) *)((typeof((*((struct hlist_node **)(&(prev)->next)))))_r_a_p__v)) }; __write_once_size(&(*&(*((struct hlist_node **)(&(prev)->next)))), __u.__c, sizeof(*&(*((struct hlist_node **)(&(prev)->next))))); __u.__val; }); } while (0); _r_a_p__v; });
 if (n->next)
  n->next->pprev = &n->next;
}
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pid.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h" 1








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h" 1
# 82 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_types.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_types.h"
typedef struct raw_spinlock {
 arch_spinlock_t raw_lock;
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_types.h"
} raw_spinlock_t;
# 64 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_types.h"
typedef struct spinlock {
 union {
  struct raw_spinlock rlock;
# 75 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_types.h"
 };
} spinlock_t;
# 86 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock_types.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock_types.h"
typedef struct {
 arch_rwlock_t raw_lock;
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock_types.h"
} rwlock_t;
# 87 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_types.h" 2
# 83 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h" 2





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock.h" 1
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/qspinlock.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/qspinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool __queued_RMW_btsl(struct qspinlock *lock)
{
 do { bool c; asm volatile (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btsl" " %2, " "%0" "\n\t/* output condition code " "c" "*/\n" : [counter] "+m" (lock->val.counter), "=@cc" "c" (c) : "I" ((0 + 8)) : "memory"); return c; } while (0);

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 queued_fetch_set_pending_acquire(struct qspinlock *lock)
{
 u32 val = 0;

 if (__queued_RMW_btsl(lock))
  val |= (1U << (0 + 8));

 val |= atomic_read(&lock->val) & ~(((1U << 8) - 1) << (0 + 8));

 return val;
}
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/qspinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_queued_spin_unlock(struct qspinlock *lock)
{
 do { do { bool __cond = !((sizeof(*&lock->locked) == sizeof(char) || sizeof(*&lock->locked) == sizeof(short) || sizeof(*&lock->locked) == sizeof(int) || sizeof(*&lock->locked) == sizeof(long))); extern void __compiletime_assert_10(void) ; if (__cond) __compiletime_assert_10(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&lock->locked) __val; char __c[1]; } __u = { .__val = ( typeof(*&lock->locked)) (0) }; __write_once_size(&(*&lock->locked), __u.__c, sizeof(*&lock->locked)); __u.__val; }); } while (0);
}


extern void native_queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);
extern void __pv_init_lock_hash(void);
extern void __pv_queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);
extern void __raw_callee_save___pv_queued_spin_unlock(struct qspinlock *lock);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val)
{
 pv_queued_spin_lock_slowpath(lock, val);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void queued_spin_unlock(struct qspinlock *lock)
{
 pv_queued_spin_unlock(lock);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool vcpu_is_preempted(long cpu)
{
 return pv_vcpu_is_preempted(cpu);
}
# 74 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/qspinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool virt_spin_lock(struct qspinlock *lock)
{
 if (!( __builtin_constant_p((__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+31))) ? constant_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+31))) ? constant_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 4*32+31)) ))
  return false;







 do {
  while (atomic_read(&lock->val) != 0)
   cpu_relax();
 } while (atomic_cmpxchg(&lock->val, 0, (1U << 0)) != 0);

 return true;
}



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qspinlock.h" 1
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qspinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_is_locked(struct qspinlock *lock)
{




 return atomic_read(&lock->val);
}
# 50 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qspinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_value_unlocked(struct qspinlock lock)
{
 return !atomic_read(&lock.val);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_is_contended(struct qspinlock *lock)
{
 return atomic_read(&lock->val) & ~(((1U << 8) - 1) << 0);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int queued_spin_trylock(struct qspinlock *lock)
{
 if (!atomic_read(&lock->val) &&
    (atomic_cmpxchg(&lock->val, 0, (1U << 0)) == 0))
  return 1;
 return 0;
}

extern void queued_spin_lock_slowpath(struct qspinlock *lock, u32 val);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void queued_spin_lock(struct qspinlock *lock)
{
 u32 val;

 val = atomic_cmpxchg(&lock->val, 0, (1U << 0));
 if (__builtin_expect(!!(val == 0), 1))
  return;
 queued_spin_lock_slowpath(lock, val);
}
# 95 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/qspinlock.h" 2
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock.h" 2
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/qrwlock.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qrwlock.h" 1
# 52 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/qrwlock.h"
extern void queued_read_lock_slowpath(struct qrwlock *lock, u32 cnts);
extern void queued_write_lock_slowpath(struct qrwlock *lock);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int queued_read_can_lock(struct qrwlock *lock)
{
 return !(atomic_read(&lock->cnts) & 0xff);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int queued_write_can_lock(struct qrwlock *lock)
{
 return !atomic_read(&lock->cnts);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int queued_read_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0xff)), 1)) {
  cnts = (u32)atomic_add_return((1U << 8), &lock->cnts);
  if (__builtin_expect(!!(!(cnts & 0xff)), 1))
   return 1;
  atomic_sub((1U << 8), &lock->cnts);
 }
 return 0;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int queued_write_trylock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_read(&lock->cnts);
 if (__builtin_expect(!!(cnts), 0))
  return 0;

 return __builtin_expect(!!(atomic_cmpxchg(&lock->cnts, cnts, cnts | 0xff) == cnts), 1);

}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void queued_read_lock(struct qrwlock *lock)
{
 u32 cnts;

 cnts = atomic_add_return((1U << 8), &lock->cnts);
 if (__builtin_expect(!!(!(cnts & 0xff)), 1))
  return;


 queued_read_lock_slowpath(lock, cnts);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void queued_write_lock(struct qrwlock *lock)
{

 if (atomic_cmpxchg(&lock->cnts, 0, 0xff) == 0)
  return;

 queued_write_lock_slowpath(lock);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void queued_read_unlock(struct qrwlock *lock)
{



 (void)atomic_sub_return((1U << 8), &lock->cnts);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) u8 *__qrwlock_write_byte(struct qrwlock *lock)
{
 return (u8 *)lock + 3 * 0;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void queued_write_unlock(struct qrwlock *lock)
{
 do { do { bool __cond = !((sizeof(*__qrwlock_write_byte(lock)) == sizeof(char) || sizeof(*__qrwlock_write_byte(lock)) == sizeof(short) || sizeof(*__qrwlock_write_byte(lock)) == sizeof(int) || sizeof(*__qrwlock_write_byte(lock)) == sizeof(long))); extern void __compiletime_assert_11(void) ; if (__cond) __compiletime_assert_11(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*__qrwlock_write_byte(lock)) __val; char __c[1]; } __u = { .__val = ( typeof(*__qrwlock_write_byte(lock))) (0) }; __write_once_size(&(*__qrwlock_write_byte(lock)), __u.__c, sizeof(*__qrwlock_write_byte(lock))); __u.__val; }); } while (0);
}
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/qrwlock.h" 2
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spinlock.h" 2
# 89 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h" 2
# 163 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void do_raw_spin_lock(raw_spinlock_t *lock)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
do_raw_spin_lock_flags(raw_spinlock_t *lock, unsigned long *flags)
{
 (void)0;
 queued_spin_lock(&lock->raw_lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int do_raw_spin_trylock(raw_spinlock_t *lock)
{
 return queued_spin_trylock(&(lock)->raw_lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void do_raw_spin_unlock(raw_spinlock_t *lock)
{
 queued_spin_unlock(&lock->raw_lock);
 (void)0;
}
# 289 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock.h" 1
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h" 2





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_api_smp.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_api_smp.h"
int in_lock_functions(unsigned long addr);



void __attribute__((section(".spinlock.text"))) _raw_spin_lock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_nested(raw_spinlock_t *lock, int subclass)
                        ;
void __attribute__((section(".spinlock.text")))
_raw_spin_lock_nest_lock(raw_spinlock_t *lock, struct lockdep_map *map)
                        ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_lock_irq(raw_spinlock_t *lock)
                        ;

unsigned long __attribute__((section(".spinlock.text"))) _raw_spin_lock_irqsave(raw_spinlock_t *lock)
                        ;
unsigned long __attribute__((section(".spinlock.text")))
_raw_spin_lock_irqsave_nested(raw_spinlock_t *lock, int subclass)
                        ;
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock(raw_spinlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_spin_trylock_bh(raw_spinlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_bh(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_spin_unlock_irq(raw_spinlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_spin_unlock_irqrestore(raw_spinlock_t *lock, unsigned long flags)
                        ;
# 86 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_api_smp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __raw_spin_trylock(raw_spinlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
 return 0;
}
# 104 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_api_smp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __raw_spin_lock_irqsave(raw_spinlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
# 119 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_api_smp.h"
 do_raw_spin_lock_flags(lock, &flags);

 return flags;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_spin_lock_irq(raw_spinlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_spin_lock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do_raw_spin_lock(lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_spin_lock(raw_spinlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do_raw_spin_lock(lock);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irqrestore(raw_spinlock_t *lock,
         unsigned long flags)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock_irq(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_spin_unlock_bh(raw_spinlock_t *lock)
{
 do { } while (0);
 do_raw_spin_unlock(lock);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __raw_spin_trylock_bh(raw_spinlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 if (do_raw_spin_trylock(lock)) {
  do { } while (0);
  return 1;
 }
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 return 0;
}


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock_api_smp.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock_api_smp.h"
void __attribute__((section(".spinlock.text"))) _raw_read_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_lock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_read_lock_irqsave(rwlock_t *lock)
                       ;
unsigned long __attribute__((section(".spinlock.text"))) _raw_write_lock_irqsave(rwlock_t *lock)
                       ;
int __attribute__((section(".spinlock.text"))) _raw_read_trylock(rwlock_t *lock);
int __attribute__((section(".spinlock.text"))) _raw_write_trylock(rwlock_t *lock);
void __attribute__((section(".spinlock.text"))) _raw_read_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_read_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _raw_write_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text")))
_raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
void __attribute__((section(".spinlock.text")))
_raw_write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
                       ;
# 117 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock_api_smp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __raw_read_trylock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_read_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __raw_write_trylock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 if (queued_write_trylock(&(lock)->raw_lock)) {
  do { } while (0);
  return 1;
 }
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
 return 0;
}
# 146 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwlock_api_smp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_read_lock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __raw_read_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_read_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_read_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_read_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do {(void)0; queued_read_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __raw_write_lock_irqsave(rwlock_t *lock)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = arch_local_irq_save(); } while (0); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&((lock))->raw_lock); } while (0);

 return flags;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_write_lock_irq(rwlock_t *lock)
{
 do { arch_local_irq_disable(); } while (0);
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_write_lock_bh(rwlock_t *lock)
{
 __local_bh_disable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_write_lock(rwlock_t *lock)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 do { } while (0);
 do {(void)0; queued_write_lock(&(lock)->raw_lock); } while (0);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_write_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_read_unlock(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
__raw_read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_read_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_read_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_read_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_write_unlock_irqrestore(rwlock_t *lock,
          unsigned long flags)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); arch_local_irq_restore(flags); } while (0); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_write_unlock_irq(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 do { arch_local_irq_enable(); } while (0);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __raw_write_unlock_bh(rwlock_t *lock)
{
 do { } while (0);
 do {queued_write_unlock(&(lock)->raw_lock); (void)0; } while (0);
 __local_bh_enable_ip((unsigned long)__builtin_return_address(0), ((2 * (1UL << (0 + 8))) + (1UL << 0)));
}
# 191 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock_api_smp.h" 2
# 296 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h" 2








static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
 return &lock->rlock;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock(spinlock_t *lock)
{
 _raw_spin_lock(&lock->rlock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock_bh(spinlock_t *lock)
{
 _raw_spin_lock_bh(&lock->rlock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock(spinlock_t *lock)
{
 return (_raw_spin_trylock(&lock->rlock));
}
# 340 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_lock_irq(spinlock_t *lock)
{
 _raw_spin_lock_irq(&lock->rlock);
}
# 355 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock(spinlock_t *lock)
{
 _raw_spin_unlock(&lock->rlock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_bh(spinlock_t *lock)
{
 _raw_spin_unlock_bh(&lock->rlock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_irq(spinlock_t *lock)
{
 _raw_spin_unlock_irq(&lock->rlock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); _raw_spin_unlock_irqrestore(&lock->rlock, flags); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock_bh(spinlock_t *lock)
{
 return (_raw_spin_trylock_bh(&lock->rlock));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_trylock_irq(spinlock_t *lock)
{
 return ({ do { arch_local_irq_disable(); } while (0); (_raw_spin_trylock(&lock->rlock)) ? 1 : ({ do { arch_local_irq_enable(); } while (0); 0; }); });
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_is_locked(spinlock_t *lock)
{
 return queued_spin_is_locked(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_is_contended(spinlock_t *lock)
{
 return queued_spin_is_contended(&(&lock->rlock)->raw_lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int spin_can_lock(spinlock_t *lock)
{
 return (!queued_spin_is_locked(&(&lock->rlock)->raw_lock));
}
# 420 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/spinlock.h"
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);



extern int _atomic_dec_and_lock_irqsave(atomic_t *atomic, spinlock_t *lock,
     unsigned long *flags);
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/wait.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h" 2

typedef struct wait_queue_entry wait_queue_entry_t;

typedef int (*wait_queue_func_t)(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
int default_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int flags, void *key);
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
struct wait_queue_entry {
 unsigned int flags;
 void *private;
 wait_queue_func_t func;
 struct list_head entry;
};

struct wait_queue_head {
 spinlock_t lock;
 struct list_head head;
};
typedef struct wait_queue_head wait_queue_head_t;

struct task_struct;
# 61 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
extern void __init_waitqueue_head(struct wait_queue_head *wq_head, const char *name, struct lock_class_key *);
# 79 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_waitqueue_entry(struct wait_queue_entry *wq_entry, struct task_struct *p)
{
 wq_entry->flags = 0;
 wq_entry->private = p;
 wq_entry->func = default_wake_function;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
init_waitqueue_func_entry(struct wait_queue_entry *wq_entry, wait_queue_func_t func)
{
 wq_entry->flags = 0;
 wq_entry->private = ((void *)0);
 wq_entry->func = func;
}
# 124 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int waitqueue_active(struct wait_queue_head *wq_head)
{
 return !list_empty(&wq_head->head);
}
# 137 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool wq_has_sleeper(struct wait_queue_head *wq_head)
{







 asm volatile("mfence":::"memory");
 return waitqueue_active(wq_head);
}

extern void add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
extern void remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __add_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add(&wq_entry->entry, &wq_head->head);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
__add_wait_queue_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue(wq_head, wq_entry);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __add_wait_queue_entry_tail(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_add_tail(&wq_entry->entry, &wq_head->head);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
__add_wait_queue_entry_tail_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 wq_entry->flags |= 0x01;
 __add_wait_queue_entry_tail(wq_head, wq_entry);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
__remove_wait_queue(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry)
{
 list_del(&wq_entry->entry);
}

void __wake_up(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(struct wait_queue_head *wq_head, unsigned int mode, void *key);
void __wake_up_locked_key_bookmark(struct wait_queue_head *wq_head,
  unsigned int mode, void *key, wait_queue_entry_t *bookmark);
void __wake_up_sync_key(struct wait_queue_head *wq_head, unsigned int mode, int nr, void *key);
void __wake_up_locked(struct wait_queue_head *wq_head, unsigned int mode, int nr);
void __wake_up_sync(struct wait_queue_head *wq_head, unsigned int mode, int nr);
# 230 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
extern void init_wait_entry(struct wait_queue_entry *wq_entry, int flags);
# 600 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
extern int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
extern int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
# 984 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait.h"
void prepare_to_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void prepare_to_wait_exclusive(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
long prepare_to_wait_event(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry, int state);
void finish_wait(struct wait_queue_head *wq_head, struct wait_queue_entry *wq_entry);
long wait_woken(struct wait_queue_entry *wq_entry, unsigned mode, long timeout);
int woken_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
int autoremove_wake_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pid.h" 2

enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX,

 __PIDTYPE_TGID
};
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pid.h"
struct upid {

 int nr;
 struct pid_namespace *ns;
 struct hlist_node pid_chain;
};

struct pid
{
 atomic_t count;
 unsigned int level;

 struct hlist_head tasks[PIDTYPE_MAX];

 wait_queue_head_t wait_pidfd;
 struct callback_head rcu;
 struct upid numbers[1];
};

extern struct pid init_struct_pid;

struct pid_link
{
 struct hlist_node node;
 struct pid *pid;
};

extern const struct file_operations pidfd_fops;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pid *get_pid(struct pid *pid)
{
 if (pid)
  atomic_inc(&pid->count);
 return pid;
}

extern void put_pid(struct pid *pid);
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void transfer_pid(struct task_struct *old, struct task_struct *new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
# 118 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pid.h"
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);
int next_pidmap(struct pid_namespace *pid_ns, unsigned int last);

extern struct pid *alloc_pid(struct pid_namespace *ns);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);
# 142 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pid.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = ((void *)0);
 if (pid)
  ns = pid->numbers[pid->level].ns;
 return ns;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_child_reaper(struct pid *pid)
{
 return pid->numbers[pid->level].nr == 1;
}
# 172 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pid.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = pid->numbers[0].nr;
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sem.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time64.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/time.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/time.h"
struct timespec {
 __kernel_time_t tv_sec;
 long tv_nsec;
};


struct timeval {
 __kernel_time_t tv_sec;
 __kernel_suseconds_t tv_usec;
};

struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/time.h"
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};

struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time64.h" 2


typedef __s64 time64_t;
typedef __u64 timeu64_t;
# 47 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct timespec timespec64_to_timespec(const struct timespec ts64)
{
 return ts64;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct timespec timespec_to_timespec64(const struct timespec ts)
{
 return ts;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct itimerspec itimerspec64_to_itimerspec(struct itimerspec *its64)
{
 return *its64;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct itimerspec itimerspec_to_itimerspec64(struct itimerspec *its)
{
 return *its;
}
# 223 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time64.h"
extern struct timespec timespec64_add_safe(const struct timespec lhs,
      const struct timespec rhs);
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sem.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sem.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ipc.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uidgid.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uidgid.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/highuid.h" 1
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/highuid.h"
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
# 82 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/highuid.h"
extern int fs_overflowuid;
extern int fs_overflowgid;
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uidgid.h" 2

struct user_namespace;
extern struct user_namespace init_user_ns;

typedef struct {
 uid_t val;
} kuid_t;


typedef struct {
 gid_t val;
} kgid_t;





static inline __attribute__((unused)) __attribute__((no_instrument_function)) uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
# 61 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uidgid.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uid_valid(kuid_t uid)
{
 return __kuid_val(uid) != (uid_t) -1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gid_valid(kgid_t gid)
{
 return __kgid_val(gid) != (gid_t) -1;
}
# 143 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uidgid.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) kuid_t make_kuid(struct user_namespace *from, uid_t uid)
{
 return (kuid_t){ uid };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) kgid_t make_kgid(struct user_namespace *from, gid_t gid)
{
 return (kgid_t){ gid };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) uid_t from_kuid(struct user_namespace *to, kuid_t kuid)
{
 return __kuid_val(kuid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) gid_t from_kgid(struct user_namespace *to, kgid_t kgid)
{
 return __kgid_val(kgid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) uid_t from_kuid_munged(struct user_namespace *to, kuid_t kuid)
{
 uid_t uid = from_kuid(to, kuid);
 if (uid == (uid_t)-1)
  uid = overflowuid;
 return uid;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) gid_t from_kgid_munged(struct user_namespace *to, kgid_t kgid)
{
 gid_t gid = from_kgid(to, kgid);
 if (gid == (gid_t)-1)
  gid = overflowgid;
 return gid;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return uid_valid(uid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return gid_valid(gid);
}
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ipc.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h" 1
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/errno.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/errno.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/errno.h" 1
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/errno.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/errno.h" 2
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jhash.h" 1
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jhash.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/unaligned/packed_struct.h" 1





struct __una_u16 { u16 x; } __attribute__((packed));
struct __una_u32 { u32 x; } __attribute__((packed));
struct __una_u64 { u64 x; } __attribute__((packed));

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u16 __get_unaligned_cpu16(const void *p)
{
 const struct __una_u16 *ptr = (const struct __una_u16 *)p;
 return ptr->x;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 __get_unaligned_cpu32(const void *p)
{
 const struct __una_u32 *ptr = (const struct __una_u32 *)p;
 return ptr->x;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 __get_unaligned_cpu64(const void *p)
{
 const struct __una_u64 *ptr = (const struct __una_u64 *)p;
 return ptr->x;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __put_unaligned_cpu16(u16 val, void *p)
{
 struct __una_u16 *ptr = (struct __una_u16 *)p;
 ptr->x = val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __put_unaligned_cpu32(u32 val, void *p)
{
 struct __una_u32 *ptr = (struct __una_u32 *)p;
 ptr->x = val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __put_unaligned_cpu64(u64 val, void *p)
{
 struct __una_u64 *ptr = (struct __una_u64 *)p;
 ptr->x = val;
}
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jhash.h" 2
# 70 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jhash.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 jhash(const void *key, u32 length, u32 initval)
{
 u32 a, b, c;
 const u8 *k = key;


 a = b = c = 0xdeadbeef + length + initval;


 while (length > 12) {
  a += __get_unaligned_cpu32(k);
  b += __get_unaligned_cpu32(k + 4);
  c += __get_unaligned_cpu32(k + 8);
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 12;
  k += 12;
 }

 switch (length) {
 case 12: c += (u32)k[11]<<24;
 case 11: c += (u32)k[10]<<16;
 case 10: c += (u32)k[9]<<8;
 case 9: c += k[8];
 case 8: b += (u32)k[7]<<24;
 case 7: b += (u32)k[6]<<16;
 case 6: b += (u32)k[5]<<8;
 case 5: b += k[4];
 case 4: a += (u32)k[3]<<24;
 case 3: a += (u32)k[2]<<16;
 case 2: a += (u32)k[1]<<8;
 case 1: a += k[0];
   { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
 case 0:
  break;
 }

 return c;
}
# 116 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jhash.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 jhash2(const u32 *k, u32 length, u32 initval)
{
 u32 a, b, c;


 a = b = c = 0xdeadbeef + (length<<2) + initval;


 while (length > 3) {
  a += k[0];
  b += k[1];
  c += k[2];
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 3;
  k += 3;
 }


 switch (length) {
 case 3: c += k[2];
 case 2: b += k[1];
 case 1: a += k[0];
  { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
 case 0:
  break;
 }

 return c;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 __jhash_nwords(u32 a, u32 b, u32 c, u32 initval)
{
 a += initval;
 b += initval;
 c += initval;

 { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };

 return c;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 jhash_3words(u32 a, u32 b, u32 c, u32 initval)
{
 return __jhash_nwords(a, b, c, initval + 0xdeadbeef + (3 << 2));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 jhash_2words(u32 a, u32 b, u32 initval)
{
 return __jhash_nwords(a, b, 0, initval + 0xdeadbeef + (2 << 2));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 jhash_1word(u32 a, u32 initval)
{
 return __jhash_nwords(a, 0, 0, initval + 0xdeadbeef + (1 << 2));
}
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_nulls.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_nulls.h"
struct hlist_nulls_head {
 struct hlist_nulls_node *first;
};

struct hlist_nulls_node {
 struct hlist_nulls_node *next, **pprev;
};
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_nulls.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_a_nulls(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr & 1);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long get_nulls_value(const struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr) >> 1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int hlist_nulls_unhashed(const struct hlist_nulls_node *h)
{
 return !h->pprev;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int hlist_nulls_empty(const struct hlist_nulls_head *h)
{
 return is_a_nulls(({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; }));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_nulls_add_head(struct hlist_nulls_node *n,
     struct hlist_nulls_head *h)
{
 struct hlist_nulls_node *first = h->first;

 n->next = first;
 ({ union { typeof(n->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(n->pprev)) (&h->first) }; __write_once_size(&(n->pprev), __u.__c, sizeof(n->pprev)); __u.__val; });
 h->first = n;
 if (!is_a_nulls(first))
  ({ union { typeof(first->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(first->pprev)) (&n->next) }; __write_once_size(&(first->pprev), __u.__c, sizeof(first->pprev)); __u.__val; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __hlist_nulls_del(struct hlist_nulls_node *n)
{
 struct hlist_nulls_node *next = n->next;
 struct hlist_nulls_node **pprev = n->pprev;

 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) (next) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });
 if (!is_a_nulls(next))
  ({ union { typeof(next->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(next->pprev)) (pprev) }; __write_once_size(&(next->pprev), __u.__c, sizeof(next->pprev)); __u.__val; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_nulls_del(struct hlist_nulls_node *n)
{
 __hlist_nulls_del(n);
 ({ union { typeof(n->pprev) __val; char __c[1]; } __u = { .__val = ( typeof(n->pprev)) (((void *) 0x200 + (0xdead000000000000UL))) }; __write_once_size(&(n->pprev), __u.__c, sizeof(n->pprev)); __u.__val; });
}
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h" 1








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timer.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h" 1
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
typedef struct seqcount {
 unsigned sequence;



} seqcount_t;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __seqcount_init(seqcount_t *s, const char *name,
       struct lock_class_key *key)
{



 do { (void)(name); (void)(key); } while (0);
 s->sequence = 0;
}
# 108 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned __read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret;

repeat:
 ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 if (__builtin_expect(!!(ret & 1), 0)) {
  cpu_relax();
  goto repeat;
 }
 return ret;
}
# 130 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned raw_read_seqcount(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 __asm__ __volatile__("": : :"memory");
 return ret;
}
# 146 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned raw_read_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = __read_seqcount_begin(s);
 __asm__ __volatile__("": : :"memory");
 return ret;
}
# 162 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned read_seqcount_begin(const seqcount_t *s)
{
                                  ;
 return raw_read_seqcount_begin(s);
}
# 182 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned raw_seqcount_begin(const seqcount_t *s)
{
 unsigned ret = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });
 __asm__ __volatile__("": : :"memory");
 return ret & ~1;
}
# 203 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 return __builtin_expect(!!(s->sequence != start), 0);
}
# 218 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int read_seqcount_retry(const seqcount_t *s, unsigned start)
{
 __asm__ __volatile__("": : :"memory");
 return __read_seqcount_retry(s, start);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_begin(seqcount_t *s)
{
 s->sequence++;
 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_end(seqcount_t *s)
{
 __asm__ __volatile__("": : :"memory");
 s->sequence++;
}
# 272 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_barrier(seqcount_t *s)
{
 s->sequence++;
 __asm__ __volatile__("": : :"memory");
 s->sequence++;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int raw_read_seqcount_latch(seqcount_t *s)
{
 int seq = ({ union { typeof(s->sequence) __val; char __c[1]; } __u; if (1) __read_once_size(&(s->sequence), __u.__c, sizeof(s->sequence)); else __read_once_size_nocheck(&(s->sequence), __u.__c, sizeof(s->sequence)); do { } while (0); __u.__val; });

 do { } while (0);
 return seq;
}
# 364 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void raw_write_seqcount_latch(seqcount_t *s)
{
       __asm__ __volatile__("": : :"memory");
       s->sequence++;
       __asm__ __volatile__("": : :"memory");
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_seqcount_begin_nested(seqcount_t *s, int subclass)
{
 raw_write_seqcount_begin(s);
 do { } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_seqcount_begin(seqcount_t *s)
{
 write_seqcount_begin_nested(s, 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_seqcount_end(seqcount_t *s)
{
 do { } while (0);
 raw_write_seqcount_end(s);
}
# 399 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_seqcount_invalidate(seqcount_t *s)
{
 __asm__ __volatile__("": : :"memory");
 s->sequence+=2;
}

typedef struct {
 struct seqcount seqcount;
 spinlock_t lock;
} seqlock_t;
# 432 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned read_seqbegin(const seqlock_t *sl)
{
 return read_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned read_seqretry(const seqlock_t *sl, unsigned start)
{
 return read_seqcount_retry(&sl->seqcount, start);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_seqlock(seqlock_t *sl)
{
 spin_lock(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_sequnlock(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_seqlock_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_sequnlock_bh(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_seqlock_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
 write_seqcount_begin(&sl->seqcount);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_sequnlock_irq(seqlock_t *sl)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __write_seqlock_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 write_seqcount_begin(&sl->seqcount);
 return flags;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
write_sequnlock_irqrestore(seqlock_t *sl, unsigned long flags)
{
 write_seqcount_end(&sl->seqcount);
 spin_unlock_irqrestore(&sl->lock, flags);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void read_seqlock_excl(seqlock_t *sl)
{
 spin_lock(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void read_sequnlock_excl(seqlock_t *sl)
{
 spin_unlock(&sl->lock);
}
# 527 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seqlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void read_seqbegin_or_lock(seqlock_t *lock, int *seq)
{
 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  read_seqlock_excl(lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int need_seqretry(seqlock_t *lock, int seq)
{
 return !(seq & 1) && read_seqretry(lock, seq);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void done_seqretry(seqlock_t *lock, int seq)
{
 if (seq & 1)
  read_sequnlock_excl(lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void read_seqlock_excl_bh(seqlock_t *sl)
{
 spin_lock_bh(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void read_sequnlock_excl_bh(seqlock_t *sl)
{
 spin_unlock_bh(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void read_seqlock_excl_irq(seqlock_t *sl)
{
 spin_lock_irq(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void read_sequnlock_excl_irq(seqlock_t *sl)
{
 spin_unlock_irq(&sl->lock);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __read_seqlock_excl_irqsave(seqlock_t *sl)
{
 unsigned long flags;

 do { do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); flags = _raw_spin_lock_irqsave(spinlock_check(&sl->lock)); } while (0); } while (0);
 return flags;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
read_sequnlock_excl_irqrestore(seqlock_t *sl, unsigned long flags)
{
 spin_unlock_irqrestore(&sl->lock, flags);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long
read_seqbegin_or_lock_irqsave(seqlock_t *lock, int *seq)
{
 unsigned long flags = 0;

 if (!(*seq & 1))
  *seq = read_seqbegin(lock);
 else
  do { flags = __read_seqlock_excl_irqsave(lock); } while (0);

 return flags;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
done_seqretry_irqrestore(seqlock_t *lock, int seq, unsigned long flags)
{
 if (seq & 1)
  read_sequnlock_excl_irqrestore(lock, flags);
}
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time.h" 2



extern struct timezone sys_tz;

int get_timespec64(struct timespec *ts,
  const struct timespec *uts);
int put_timespec64(const struct timespec *ts,
  struct timespec *uts);
int get_itimerspec64(struct itimerspec *it,
   const struct itimerspec *uit);
int put_itimerspec64(const struct itimerspec *it,
   struct itimerspec *uit);



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int timespec_equal(const struct timespec *a,
                                 const struct timespec *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int timespec_compare(const struct timespec *lhs, const struct timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int timeval_compare(const struct timeval *lhs, const struct timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

extern time64_t mktime64(const unsigned int year, const unsigned int mon,
   const unsigned int day, const unsigned int hour,
   const unsigned int min, const unsigned int sec);




static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long mktime(const unsigned int year,
   const unsigned int mon, const unsigned int day,
   const unsigned int hour, const unsigned int min,
   const unsigned int sec)
{
 return mktime64(year, mon, day, hour, min, sec);
}

extern void set_normalized_timespec(struct timespec *ts, time_t sec, s64 nsec);






extern struct timespec timespec_add_safe(const struct timespec lhs,
      const struct timespec rhs);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct timespec timespec_add(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct timespec timespec_sub(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool timespec_valid(const struct timespec *ts)
{

 if (ts->tv_sec < 0)
  return false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool timespec_valid_strict(const struct timespec *ts)
{
 if (!timespec_valid(ts))
  return false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return false;
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool timeval_valid(const struct timeval *tv)
{

 if (tv->tv_sec < 0)
  return false;


 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;

 return true;
}

extern struct timespec timespec_trunc(struct timespec t, unsigned gran);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool timeval_inject_offset_valid(const struct timeval *tv)
{



 if (tv->tv_usec < 0 || tv->tv_usec >= 1000000L)
  return false;
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool timespec_inject_offset_valid(const struct timespec *ts)
{



 if (ts->tv_nsec < 0 || ts->tv_nsec >= 1000000000L)
  return false;
 return true;
}
# 177 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time.h"
struct itimerval;
extern int do_setitimer(int which, struct itimerval *value,
   struct itimerval *ovalue);
extern int do_getitimer(int which, struct itimerval *value);

extern long do_utimes(int dfd, const char *filename, struct timespec *times, int flags);





struct tm {




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;
};

void time64_to_tm(time64_t totalsecs, int offset, struct tm *result);
# 220 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void time_to_tm(time_t totalsecs, int offset, struct tm *result)
{
 time64_to_tm(totalsecs, offset, result);
}
# 232 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 timespec_to_ns(const struct timespec *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}
# 244 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 timeval_to_ns(const struct timeval *tv)
{
 return ((s64) tv->tv_sec * 1000000000L) +
  tv->tv_usec * 1000L;
}







extern struct timespec ns_to_timespec(const s64 nsec);







extern struct timeval ns_to_timeval(const s64 nsec);
# 274 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/time.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void timespec_add_ns(struct timespec *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool itimerspec64_valid(const struct itimerspec *its)
{
 if (!timespec_valid(&(its->it_interval)) ||
  !timespec_valid(&(its->it_value)))
  return false;

 return true;
}
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timex.h" 1
# 56 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timex.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/timex.h" 1
# 64 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/timex.h"
struct timex {
 unsigned int modes;
 __kernel_long_t offset;
 __kernel_long_t freq;
 __kernel_long_t maxerror;
 __kernel_long_t esterror;
 int status;
 __kernel_long_t constant;
 __kernel_long_t precision;
 __kernel_long_t tolerance;


 struct timeval time;
 __kernel_long_t tick;

 __kernel_long_t ppsfreq;
 __kernel_long_t jitter;
 int shift;
 __kernel_long_t stabil;
 __kernel_long_t jitcnt;
 __kernel_long_t calcnt;
 __kernel_long_t errcnt;
 __kernel_long_t stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;
};
# 57 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timex.h" 2






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/param.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/param.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/param.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/param.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/param.h" 2
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/param.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/param.h" 2
# 64 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timex.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/timex.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/tsc.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/tsc.h"
typedef unsigned long long cycles_t;

extern unsigned int cpu_khz;
extern unsigned int tsc_khz;

extern void disable_TSC(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) cycles_t get_cycles(void)
{





 return rdtsc();
}

extern struct system_counterval_t convert_art_to_tsc(u64 art);

extern void tsc_init(void);
extern void mark_tsc_unstable(char *reason);
extern int unsynchronized_tsc(void);
extern int check_tsc_unstable(void);
extern unsigned long native_calibrate_cpu(void);
extern unsigned long native_calibrate_tsc(void);
extern unsigned long long native_sched_clock_from_tsc(u64 tsc);

extern int tsc_clocksource_reliable;






extern bool tsc_store_and_check_tsc_adjust(bool bootcpu);
extern void tsc_verify_tsc_adjust(bool resume);
extern void check_tsc_sync_source(int cpu);
extern void check_tsc_sync_target(void);







extern int notsc_setup(char *);
extern void tsc_save_sched_clock_state(void);
extern void tsc_restore_sched_clock_state(void);

unsigned long cpu_khz_from_msr(void);
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/timex.h" 2
# 66 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timex.h" 2
# 139 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timex.h"
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
# 154 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timex.h"
extern int do_adjtimex(struct timex *);
extern void hardpps(const struct timespec *, const struct timespec *);

int read_current_timer(unsigned long *timer_val);
void ntp_notify_cmos_timer(void);
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/param.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h" 2
# 1 "./include/generated/timeconst.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h" 2
# 60 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h"
extern int register_refined_jiffies(long clock_tick_rate);
# 80 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h"
extern u64 __attribute__((__aligned__((1 << (6))), __section__(".data..cacheline_aligned"))) jiffies_64;
extern unsigned long volatile __attribute__((__aligned__((1 << (6))), __section__(".data..cacheline_aligned"))) jiffies;




static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 get_jiffies_64(void)
{
 return (u64)jiffies;
}
# 190 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h"
extern unsigned long preset_lpj;
# 291 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h"
extern unsigned int jiffies_to_msecs(const unsigned long j);
extern unsigned int jiffies_to_usecs(const unsigned long j);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 jiffies_to_nsecs(const unsigned long j)
{
 return (u64)jiffies_to_usecs(j) * 1000L;
}

extern u64 jiffies64_to_nsecs(u64 j);

extern unsigned long __msecs_to_jiffies(const unsigned int m);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long _msecs_to_jiffies(const unsigned int m)
{
 return (m + (1000L / 100) - 1) / (1000L / 100);
}
# 363 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long msecs_to_jiffies(const unsigned int m)
{
 if (__builtin_constant_p(m)) {
  if ((int)m < 0)
   return ((((long)(~0UL>>1)) >> 1)-1);
  return _msecs_to_jiffies(m);
 } else {
  return __msecs_to_jiffies(m);
 }
}

extern unsigned long __usecs_to_jiffies(const unsigned int u);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long _usecs_to_jiffies(const unsigned int u)
{
 return (u + (1000000L / 100) - 1) / (1000000L / 100);
}
# 410 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/jiffies.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long usecs_to_jiffies(const unsigned int u)
{
 if (__builtin_constant_p(u)) {
  if (u > jiffies_to_usecs(((((long)(~0UL>>1)) >> 1)-1)))
   return ((((long)(~0UL>>1)) >> 1)-1);
  return _usecs_to_jiffies(u);
 } else {
  return __usecs_to_jiffies(u);
 }
}

extern unsigned long timespec64_to_jiffies(const struct timespec *value);
extern void jiffies_to_timespec64(const unsigned long jiffies,
      struct timespec *value);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long timespec_to_jiffies(const struct timespec *value)
{
 struct timespec ts = timespec_to_timespec64(*value);

 return timespec64_to_jiffies(&ts);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void jiffies_to_timespec(const unsigned long jiffies,
           struct timespec *value)
{
 struct timespec ts;

 jiffies_to_timespec64(jiffies, &ts);
 *value = timespec64_to_timespec(ts);
}

extern unsigned long timeval_to_jiffies(const struct timeval *value);
extern void jiffies_to_timeval(const unsigned long jiffies,
          struct timeval *value);

extern clock_t jiffies_to_clock_t(unsigned long x);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(({ typeof(0L) __UNIQUE_ID_max1_12 = (0L); typeof(delta) __UNIQUE_ID_max2_13 = (delta); (void) (&__UNIQUE_ID_max1_12 == &__UNIQUE_ID_max2_13); __UNIQUE_ID_max1_12 > __UNIQUE_ID_max2_13 ? __UNIQUE_ID_max1_12 : __UNIQUE_ID_max2_13; }));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h" 2


typedef s64 ktime_t;
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_set(const s64 secs, const unsigned long nsecs)
{
 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))
  return ((s64)~((u64)1 << 63));

 return secs * 1000000000L + (s64)nsecs;
}
# 70 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t timespec_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t timespec64_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t timeval_to_ktime(struct timeval tv)
{
 return ktime_set(tv.tv_sec, tv.tv_usec * 1000L);
}
# 109 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int ktime_compare(const ktime_t cmp1, const ktime_t cmp2)
{
 if (cmp1 < cmp2)
  return -1;
 if (cmp1 > cmp2)
  return 1;
 return 0;
}
# 125 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool ktime_after(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) > 0;
}
# 137 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool ktime_before(const ktime_t cmp1, const ktime_t cmp2)
{
 return ktime_compare(cmp1, cmp2) < 0;
}
# 162 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 ktime_divns(const ktime_t kt, s64 div)
{




 ({ int __ret_warn_on = !!(div < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/ktime.h"), "i" (168), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 return kt / div;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 ktime_to_us(const ktime_t kt)
{
 return ktime_divns(kt, 1000L);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 ktime_to_ms(const ktime_t kt)
{
 return ktime_divns(kt, 1000000L);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 ktime_us_delta(const ktime_t later, const ktime_t earlier)
{
       return ktime_to_us(((later) - (earlier)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 ktime_ms_delta(const ktime_t later, const ktime_t earlier)
{
 return ktime_to_ms(((later) - (earlier)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_add_us(const ktime_t kt, const u64 usec)
{
 return ((kt) + (usec * 1000L));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_add_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) + (msec * 1000000L));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_sub_us(const ktime_t kt, const u64 usec)
{
 return ((kt) - (usec * 1000L));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_sub_ms(const ktime_t kt, const u64 msec)
{
 return ((kt) - (msec * 1000000L));
}

extern ktime_t ktime_add_safe(const ktime_t lhs, const ktime_t rhs);
# 223 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool ktime_to_timespec_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt) {
  *ts = ns_to_timespec((kt));
  return true;
 } else {
  return false;
 }
}
# 242 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool ktime_to_timespec64_cond(const ktime_t kt,
             struct timespec *ts)
{
 if (kt) {
  *ts = ns_to_timespec((kt));
  return true;
 } else {
  return false;
 }
}
# 262 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ns_to_ktime(u64 ns)
{
 return ns;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ms_to_ktime(u64 ms)
{
 return ms * 1000000L;
}


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timekeeping.h" 1








void timekeeping_init(void);
extern int timekeeping_suspended;


extern void update_process_times(int user);
extern void xtime_update(unsigned long ticks);




extern void do_gettimeofday(struct timeval *tv);
extern int do_settimeofday64(const struct timespec *ts);
extern int do_sys_settimeofday64(const struct timespec *tv,
     const struct timezone *tz);



unsigned long get_seconds(void);
struct timespec current_kernel_time64(void);

struct timespec __current_kernel_time(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct timespec current_kernel_time(void)
{
 struct timespec now = current_kernel_time64();

 return timespec64_to_timespec(now);
}




struct timespec get_monotonic_coarse64(void);
extern void getrawmonotonic64(struct timespec *ts);
extern void ktime_get_ts64(struct timespec *ts);
extern time64_t ktime_get_seconds(void);
extern time64_t ktime_get_real_seconds(void);

extern int __getnstimeofday64(struct timespec *tv);
extern void getnstimeofday64(struct timespec *tv);
extern void getboottime64(struct timespec *ts);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int do_settimeofday(const struct timespec *ts)
{
 return do_settimeofday64(ts);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __getnstimeofday(struct timespec *ts)
{
 return __getnstimeofday64(ts);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void getnstimeofday(struct timespec *ts)
{
 getnstimeofday64(ts);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ktime_get_ts(struct timespec *ts)
{
 ktime_get_ts64(ts);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ktime_get_real_ts(struct timespec *ts)
{
 getnstimeofday64(ts);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void getrawmonotonic(struct timespec *ts)
{
 getrawmonotonic64(ts);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct timespec get_monotonic_coarse(void)
{
 return get_monotonic_coarse64();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void getboottime(struct timespec *ts)
{
 return getboottime64(ts);
}
# 167 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timekeeping.h"
enum tk_offsets {
 TK_OFFS_REAL,
 TK_OFFS_BOOT,
 TK_OFFS_TAI,
 TK_OFFS_MAX,
};

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
extern ktime_t ktime_get_raw(void);
extern u32 ktime_get_resolution_ns(void);




static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_get_real(void)
{
 return ktime_get_with_offset(TK_OFFS_REAL);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_get_boottime(void)
{
 return ktime_get_with_offset(TK_OFFS_BOOT);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_get_clocktai(void)
{
 return ktime_get_with_offset(TK_OFFS_TAI);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t ktime_mono_to_real(ktime_t mono)
{
 return ktime_mono_to_any(mono, TK_OFFS_REAL);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 ktime_get_ns(void)
{
 return (ktime_get());
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 ktime_get_real_ns(void)
{
 return (ktime_get_real());
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 ktime_get_boot_ns(void)
{
 return (ktime_get_boottime());
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 ktime_get_tai_ns(void)
{
 return (ktime_get_clocktai());
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 ktime_get_raw_ns(void)
{
 return (ktime_get_raw());
}

extern u64 ktime_get_mono_fast_ns(void);
extern u64 ktime_get_raw_fast_ns(void);
extern u64 ktime_get_boot_fast_ns(void);




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void get_monotonic_boottime(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_boottime()));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void get_monotonic_boottime64(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_boottime()));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void timekeeping_clocktai(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_clocktai()));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void timekeeping_clocktai64(struct timespec *ts)
{
 *ts = ns_to_timespec((ktime_get_clocktai()));
}




extern bool timekeeping_rtc_skipsuspend(void);
extern bool timekeeping_rtc_skipresume(void);

extern void timekeeping_inject_sleeptime64(struct timespec *delta);




extern void ktime_get_raw_and_real_ts64(struct timespec *ts_raw,
            struct timespec *ts_real);
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timekeeping.h"
struct system_time_snapshot {
 u64 cycles;
 ktime_t real;
 ktime_t raw;
 unsigned int clock_was_set_seq;
 u8 cs_was_changed_seq;
};
# 305 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timekeeping.h"
struct system_device_crosststamp {
 ktime_t device;
 ktime_t sys_realtime;
 ktime_t sys_monoraw;
};
# 318 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timekeeping.h"
struct system_counterval_t {
 u64 cycles;
 struct clocksource *cs;
};




extern int get_device_system_crosststamp(
   int (*get_time_fn)(ktime_t *device_time,
    struct system_counterval_t *system_counterval,
    void *ctx),
   void *ctx,
   struct system_time_snapshot *history,
   struct system_device_crosststamp *xtstamp);




extern void ktime_get_snapshot(struct system_time_snapshot *systime_snapshot);




extern int persistent_clock_is_local;

extern void read_persistent_clock(struct timespec *ts);
extern void read_persistent_clock64(struct timespec *ts);
extern void read_boot_clock64(struct timespec *ts);
extern int update_persistent_clock(struct timespec now);
extern int update_persistent_clock64(struct timespec now);
# 273 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ktime.h" 2
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timer.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/debugobjects.h" 1







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/debugobjects.h"
struct debug_obj {
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 struct debug_obj_descr *descr;
};
# 55 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/debugobjects.h"
struct debug_obj_descr {
 const char *name;
 void *(*debug_hint)(void *addr);
 bool (*is_static_object)(void *addr);
 bool (*fixup_init)(void *addr, enum debug_obj_state state);
 bool (*fixup_activate)(void *addr, enum debug_obj_state state);
 bool (*fixup_destroy)(void *addr, enum debug_obj_state state);
 bool (*fixup_free)(void *addr, enum debug_obj_state state);
 bool (*fixup_assert_init)(void *addr, enum debug_obj_state state);
};
# 88 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/debugobjects.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_object_init (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_object_init_on_stack(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
debug_object_activate (void *addr, struct debug_obj_descr *descr) { return 0; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_object_deactivate(void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_object_destroy (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_object_free (void *addr, struct debug_obj_descr *descr) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_object_assert_init(void *addr, struct debug_obj_descr *descr) { }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void debug_objects_early_init(void) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void debug_objects_mem_init(void) { }





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_check_no_obj_freed(const void *address, unsigned long size) { }
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timer.h" 2


struct tvec_base;

struct timer_list {




 struct hlist_node entry;
 unsigned long expires;
 void (*function)(unsigned long);
 unsigned long data;
 u32 flags;




};
# 93 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timer.h"
void init_timer_key(struct timer_list *timer, unsigned int flags,
      const char *name, struct lock_class_key *key);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void destroy_timer_on_stack(struct timer_list *timer) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_timer_on_stack_key(struct timer_list *timer,
        unsigned int flags, const char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, flags, name, key);
}
# 175 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timer.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void timer_setup(struct timer_list *timer,
          void (*callback)(struct timer_list *),
          unsigned int flags)
{
 do { init_timer_key(((timer)), ((flags)), ((void *)0), ((void *)0)); (timer)->function = ((void (*)(unsigned long))callback); (timer)->data = ((unsigned long)timer); } while (0);

}
# 196 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timer.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int timer_pending(const struct timer_list * timer)
{
 return timer->entry.pprev != ((void *)0);
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);







extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
extern void run_local_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);


struct ctl_table;

extern unsigned int sysctl_timer_migration;
int timer_migration_handler(struct ctl_table *table, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos);


unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);


int timers_prepare_cpu(unsigned int cpu);
int timers_dead_cpu(unsigned int cpu);
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h" 2







struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(unsigned long __data);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_DELAYED_BIT = 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,






 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
 WORK_NO_COLOR = WORK_NR_COLORS,


 WORK_CPU_UNBOUND = 8,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 __WORK_OFFQ_CANCELING = WORK_OFFQ_FLAG_BASE,
 WORK_OFFQ_CANCELING = (1 << __WORK_OFFQ_CANCELING),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;



};





struct delayed_work {
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;
};






struct workqueue_attrs {



 int nice;




 cpumask_var_t cpumask;
# 146 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
 bool no_numa;
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ void *__mptr = (void *)(work); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(work)), typeof(((struct delayed_work *)0)->work)) && !__builtin_types_compatible_p(typeof(*(work)), typeof(void)))); extern void __compiletime_assert_14(void) ; if (__cond) __compiletime_assert_14(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct delayed_work *)(__mptr - __builtin_offsetof(struct delayed_work, work))); });
}

struct execute_work {
 struct work_struct work;
};
# 202 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __init_work(struct work_struct *work, int onstack) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void destroy_work_on_stack(struct work_struct *work) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void destroy_delayed_work_on_stack(struct delayed_work *work) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int work_static(struct work_struct *work) { return 0; }
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
enum {
 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
# 323 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,
 __WQ_LEGACY = 1 << 18,
 __WQ_ORDERED_EXPLICIT = 1 << 19,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
# 367 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_highpri_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;

extern struct workqueue_struct *
__alloc_workqueue_key(const char *fmt, unsigned int flags, int max_active,
 struct lock_class_key *key, const char *lock_name, ...) __attribute__((format(printf, 1, 6)));
# 438 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(gfp_t gfp_mask);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     const struct workqueue_attrs *attrs);
int workqueue_set_unbound_cpumask(cpumask_var_t cpumask);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern struct work_struct *current_work(void);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((format(printf, 1, 2))) void set_worker_desc(const char *fmt, ...);
extern void print_worker_info(const char *log_lvl, struct task_struct *task);
extern void show_workqueue_state(void);
# 488 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
# 502 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 517 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
# 531 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
# 547 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
# 576 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void flush_scheduled_work(void)
{
 flush_workqueue(system_wq);
}
# 590 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
# 604 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}
# 620 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
long work_on_cpu(int cpu, long (*fn)(void *), void *arg);
long work_on_cpu_safe(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);
# 640 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/workqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void wq_watchdog_touch(int cpu) { }



int workqueue_prepare_cpu(unsigned int cpu);
int workqueue_online_cpu(unsigned int cpu);
int workqueue_offline_cpu(unsigned int cpu);


int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) workqueue_init_early(void);
int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) workqueue_init(void);
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/osq_lock.h" 1








struct optimistic_spin_node {
 struct optimistic_spin_node *next, *prev;
 int locked;
 int cpu;
};

struct optimistic_spin_queue {




 atomic_t tail;
};






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void osq_lock_init(struct optimistic_spin_queue *lock)
{
 atomic_set(&lock->tail, (0));
}

extern bool osq_lock(struct optimistic_spin_queue *lock);
extern void osq_unlock(struct optimistic_spin_queue *lock);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool osq_is_locked(struct optimistic_spin_queue *lock)
{
 return atomic_read(&lock->tail) != (0);
}
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/debug_locks.h" 1








struct task_struct;

extern int debug_locks;
extern int debug_locks_silent;


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __debug_locks_off(void)
{
 return ({ typeof(&debug_locks) __ai_ptr = (&debug_locks); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = (((0))); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
}




extern int debug_locks_off(void);
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/debug_locks.h"
struct task_struct;







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void debug_show_all_locks(void)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void debug_show_held_locks(struct task_struct *task)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_check_no_locks_freed(const void *from, unsigned long len)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
debug_check_no_locks_held(void)
{
}
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h" 2

struct ww_acquire_ctx;
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h"
struct mutex {
 atomic_long_t owner;
 spinlock_t wait_lock;

 struct optimistic_spin_queue osq;

 struct list_head wait_list;






};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct task_struct *__mutex_owner(struct mutex *lock)
{
 return (struct task_struct *)(atomic_long_read(&lock->owner) & ~0x07);
}





struct mutex_waiter {
 struct list_head list;
 struct task_struct *task;
 struct ww_acquire_ctx *ww_ctx;



};
# 98 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mutex_destroy(struct mutex *lock) {}
# 134 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h"
extern void __mutex_init(struct mutex *lock, const char *name,
    struct lock_class_key *key);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mutex_is_locked(struct mutex *lock)
{



 return __mutex_owner(lock) != ((void *)0);
}
# 177 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h"
extern void mutex_lock(struct mutex *lock);
extern int mutex_lock_interruptible(struct mutex *lock);
extern int mutex_lock_killable(struct mutex *lock);
extern void mutex_lock_io(struct mutex *lock);
# 195 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h"
extern int mutex_trylock(struct mutex *lock);
extern void mutex_unlock(struct mutex *lock);

extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);





enum mutex_trylock_recursive_enum {
 MUTEX_TRYLOCK_FAILED = 0,
 MUTEX_TRYLOCK_SUCCESS = 1,
 MUTEX_TRYLOCK_RECURSIVE,
};
# 222 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mutex.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) enum mutex_trylock_recursive_enum
mutex_trylock_recursive(struct mutex *lock)
{
 if (__builtin_expect(!!(__mutex_owner(lock) == get_current()), 0))
  return MUTEX_TRYLOCK_RECURSIVE;

 return mutex_trylock(lock);
}
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h" 2
# 67 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
struct rhash_head {
 struct rhash_head *next;
};

struct rhlist_head {
 struct rhash_head rhead;
 struct rhlist_head *next;
};
# 90 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
struct bucket_table {
 unsigned int size;
 unsigned int nest;
 unsigned int rehash;
 u32 hash_rnd;
 unsigned int locks_mask;
 spinlock_t *locks;
 struct list_head walkers;
 struct callback_head rcu;

 struct bucket_table *future_tbl;

 struct rhash_head *buckets[] __attribute__((__aligned__((1 << (6)))));
};






struct rhashtable_compare_arg {
 struct rhashtable *ht;
 const void *key;
};

typedef u32 (*rht_hashfn_t)(const void *data, u32 len, u32 seed);
typedef u32 (*rht_obj_hashfn_t)(const void *data, u32 len, u32 seed);
typedef int (*rht_obj_cmpfn_t)(struct rhashtable_compare_arg *arg,
          const void *obj);

struct rhashtable;
# 137 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
struct rhashtable_params {
 u16 nelem_hint;
 u16 key_len;
 u16 key_offset;
 u16 head_offset;
 unsigned int max_size;
 u16 min_size;
 bool automatic_shrinking;
 u8 locks_mul;
 u32 nulls_base;
 rht_hashfn_t hashfn;
 rht_obj_hashfn_t obj_hashfn;
 rht_obj_cmpfn_t obj_cmpfn;
};
# 164 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
struct rhashtable {
 struct bucket_table *tbl;
 unsigned int key_len;
 unsigned int max_elems;
 struct rhashtable_params p;
 bool rhlist;
 struct work_struct run_work;
 struct mutex mutex;
 spinlock_t lock;
 atomic_t nelems;
};





struct rhltable {
 struct rhashtable ht;
};






struct rhashtable_walker {
 struct list_head list;
 struct bucket_table *tbl;
};
# 203 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
struct rhashtable_iter {
 struct rhashtable *ht;
 struct rhash_head *p;
 struct rhlist_head *list;
 struct rhashtable_walker walker;
 unsigned int slot;
 unsigned int skip;
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long rht_marker(const struct rhashtable *ht, u32 hash)
{
 return (1UL | (((long)ht->p.nulls_base + hash) << 1));
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool rht_is_a_nulls(const struct rhash_head *ptr)
{
 return ((unsigned long) ptr & 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long rht_get_nulls_value(const struct rhash_head *ptr)
{
 return ((unsigned long) ptr) >> 1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *rht_obj(const struct rhashtable *ht,
       const struct rhash_head *he)
{
 return (char *)he - ht->p.head_offset;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int rht_bucket_index(const struct bucket_table *tbl,
         unsigned int hash)
{
 return (hash >> (4 + 1)) & (tbl->size - 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int rht_key_hashfn(
 struct rhashtable *ht, const struct bucket_table *tbl,
 const void *key, const struct rhashtable_params params)
{
 unsigned int hash;


 if (!__builtin_constant_p(params.key_len))
  hash = ht->p.hashfn(key, ht->key_len, tbl->hash_rnd);
 else if (params.key_len) {
  unsigned int key_len = params.key_len;

  if (params.hashfn)
   hash = params.hashfn(key, key_len, tbl->hash_rnd);
  else if (key_len & (sizeof(u32) - 1))
   hash = jhash(key, key_len, tbl->hash_rnd);
  else
   hash = jhash2(key, key_len / sizeof(u32),
          tbl->hash_rnd);
 } else {
  unsigned int key_len = ht->p.key_len;

  if (params.hashfn)
   hash = params.hashfn(key, key_len, tbl->hash_rnd);
  else
   hash = jhash(key, key_len, tbl->hash_rnd);
 }

 return rht_bucket_index(tbl, hash);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int rht_head_hashfn(
 struct rhashtable *ht, const struct bucket_table *tbl,
 const struct rhash_head *he, const struct rhashtable_params params)
{
 const char *ptr = rht_obj(ht, he);

 return __builtin_expect(!!(params.obj_hashfn), 1) ?
        rht_bucket_index(tbl, params.obj_hashfn(ptr, params.key_len ?:
           ht->p.key_len,
             tbl->hash_rnd)) :
        rht_key_hashfn(ht, tbl, ptr + params.key_offset, params);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool rht_grow_above_75(const struct rhashtable *ht,
         const struct bucket_table *tbl)
{

 return atomic_read(&ht->nelems) > (tbl->size / 4 * 3) &&
        (!ht->p.max_size || tbl->size < ht->p.max_size);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool rht_shrink_below_30(const struct rhashtable *ht,
           const struct bucket_table *tbl)
{

 return atomic_read(&ht->nelems) < (tbl->size * 3 / 10) &&
        tbl->size > ht->p.min_size;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool rht_grow_above_100(const struct rhashtable *ht,
          const struct bucket_table *tbl)
{
 return atomic_read(&ht->nelems) > tbl->size &&
  (!ht->p.max_size || tbl->size < ht->p.max_size);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool rht_grow_above_max(const struct rhashtable *ht,
          const struct bucket_table *tbl)
{
 return atomic_read(&ht->nelems) >= ht->max_elems;
}
# 348 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) spinlock_t *rht_bucket_lock(const struct bucket_table *tbl,
       unsigned int hash)
{
 return &tbl->locks[hash & tbl->locks_mask];
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int lockdep_rht_mutex_is_held(struct rhashtable *ht)
{
 return 1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int lockdep_rht_bucket_is_held(const struct bucket_table *tbl,
          u32 hash)
{
 return 1;
}


int rhashtable_init(struct rhashtable *ht,
      const struct rhashtable_params *params);
int rhltable_init(struct rhltable *hlt,
    const struct rhashtable_params *params);

void *rhashtable_insert_slow(struct rhashtable *ht, const void *key,
        struct rhash_head *obj);

void rhashtable_walk_enter(struct rhashtable *ht,
      struct rhashtable_iter *iter);
void rhashtable_walk_exit(struct rhashtable_iter *iter);
int rhashtable_walk_start(struct rhashtable_iter *iter) ;
void *rhashtable_walk_next(struct rhashtable_iter *iter);
void rhashtable_walk_stop(struct rhashtable_iter *iter) ;

void rhashtable_free_and_destroy(struct rhashtable *ht,
     void (*free_fn)(void *ptr, void *arg),
     void *arg);
void rhashtable_destroy(struct rhashtable *ht);

struct rhash_head **rht_bucket_nested(const struct bucket_table *tbl,
         unsigned int hash);
struct rhash_head **rht_bucket_nested_insert(struct rhashtable *ht,
         struct bucket_table *tbl,
         unsigned int hash);
# 411 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct rhash_head *const *rht_bucket(
 const struct bucket_table *tbl, unsigned int hash)
{
 return __builtin_expect(!!(tbl->nest), 0) ? rht_bucket_nested(tbl, hash) :
         &tbl->buckets[hash];
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct rhash_head **rht_bucket_var(
 struct bucket_table *tbl, unsigned int hash)
{
 return __builtin_expect(!!(tbl->nest), 0) ? rht_bucket_nested(tbl, hash) :
         &tbl->buckets[hash];
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct rhash_head **rht_bucket_insert(
 struct rhashtable *ht, struct bucket_table *tbl, unsigned int hash)
{
 return __builtin_expect(!!(tbl->nest), 0) ? rht_bucket_nested_insert(ht, tbl, hash) :
         &tbl->buckets[hash];
}
# 590 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhashtable_compare(struct rhashtable_compare_arg *arg,
         const void *obj)
{
 struct rhashtable *ht = arg->ht;
 const char *ptr = obj;

 return memcmp(ptr + ht->p.key_offset, arg->key, ht->p.key_len);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct rhash_head *__rhashtable_lookup(
 struct rhashtable *ht, const void *key,
 const struct rhashtable_params params)
{
 struct rhashtable_compare_arg arg = {
  .ht = ht,
  .key = key,
 };
 struct bucket_table *tbl;
 struct rhash_head *he;
 unsigned int hash;

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });
restart:
 hash = rht_key_hashfn(ht, tbl, key, params);
 for (({__asm__ __volatile__("": : :"memory"); }), he = ({ typeof(*(*rht_bucket(tbl, hash))) *________p1 = (typeof(*(*rht_bucket(tbl, hash))) *)({ union { typeof((*rht_bucket(tbl, hash))) __val; char __c[1]; } __u; if (1) __read_once_size(&((*rht_bucket(tbl, hash))), __u.__c, sizeof((*rht_bucket(tbl, hash)))); else __read_once_size_nocheck(&((*rht_bucket(tbl, hash))), __u.__c, sizeof((*rht_bucket(tbl, hash)))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(*rht_bucket(tbl, hash))) *)(________p1)); }); !rht_is_a_nulls(he); he = ({ typeof(he->next) ________p1 = ({ union { typeof(he->next) __val; char __c[1]; } __u; if (1) __read_once_size(&(he->next), __u.__c, sizeof(he->next)); else __read_once_size_nocheck(&(he->next), __u.__c, sizeof(he->next)); do { } while (0); __u.__val; }); ((typeof(*he->next) *)(________p1)); })) {
  if (params.obj_cmpfn ?
      params.obj_cmpfn(&arg, rht_obj(ht, he)) :
      rhashtable_compare(&arg, rht_obj(ht, he)))
   continue;
  return he;
 }


 __asm__ __volatile__("": : :"memory");

 tbl = ({ typeof(*(tbl->future_tbl)) *________p1 = (typeof(*(tbl->future_tbl)) *)({ union { typeof((tbl->future_tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); else __read_once_size_nocheck(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)(________p1)); });
 if (__builtin_expect(!!(tbl), 0))
  goto restart;

 return ((void *)0);
}
# 646 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup(
 struct rhashtable *ht, const void *key,
 const struct rhashtable_params params)
{
 struct rhash_head *he = __rhashtable_lookup(ht, key, params);

 return he ? rht_obj(ht, he) : ((void *)0);
}
# 669 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup_fast(
 struct rhashtable *ht, const void *key,
 const struct rhashtable_params params)
{
 void *obj;

 rcu_read_lock();
 obj = rhashtable_lookup(ht, key, params);
 rcu_read_unlock();

 return obj;
}
# 696 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct rhlist_head *rhltable_lookup(
 struct rhltable *hlt, const void *key,
 const struct rhashtable_params params)
{
 struct rhash_head *he = __rhashtable_lookup(&hlt->ht, key, params);

 return he ? ({ void *__mptr = (void *)(he); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(he)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(he)), typeof(void)))); extern void __compiletime_assert_15(void) ; if (__cond) __compiletime_assert_15(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); }) : ((void *)0);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *__rhashtable_insert_fast(
 struct rhashtable *ht, const void *key, struct rhash_head *obj,
 const struct rhashtable_params params, bool rhlist)
{
 struct rhashtable_compare_arg arg = {
  .ht = ht,
  .key = key,
 };
 struct rhash_head **pprev;
 struct bucket_table *tbl;
 struct rhash_head *head;
 spinlock_t *lock;
 unsigned int hash;
 int elasticity;
 void *data;

 rcu_read_lock();

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });
 hash = rht_head_hashfn(ht, tbl, obj, params);
 lock = rht_bucket_lock(tbl, hash);
 spin_lock_bh(lock);

 if (__builtin_expect(!!(({ do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)((tbl->future_tbl))); })), 0)) {
slow_path:
  spin_unlock_bh(lock);
  rcu_read_unlock();
  return rhashtable_insert_slow(ht, key, obj);
 }

 elasticity = 16u;
 pprev = rht_bucket_insert(ht, tbl, hash);
 data = ERR_PTR(-12);
 if (!pprev)
  goto out;

 for (head = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); }); !rht_is_a_nulls(head); head = ({ do { } while (0); ; ((typeof(*((head)->next)) *)(((head)->next))); })) {
  struct rhlist_head *plist;
  struct rhlist_head *list;

  elasticity--;
  if (!key ||
      (params.obj_cmpfn ?
       params.obj_cmpfn(&arg, rht_obj(ht, head)) :
       rhashtable_compare(&arg, rht_obj(ht, head)))) {
   pprev = &head->next;
   continue;
  }

  data = rht_obj(ht, head);

  if (!rhlist)
   goto out;


  list = ({ void *__mptr = (void *)(obj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(obj)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(obj)), typeof(void)))); extern void __compiletime_assert_16(void) ; if (__cond) __compiletime_assert_16(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });
  plist = ({ void *__mptr = (void *)(head); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(head)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(head)), typeof(void)))); extern void __compiletime_assert_17(void) ; if (__cond) __compiletime_assert_17(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });

  do { ; ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) ((typeof(*(plist)) *)(plist)) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; }); } while (0);
  head = ({ do { } while (0); ; ((typeof(*(head->next)) *)((head->next))); });
  do { ; ({ union { typeof(list->rhead.next) __val; char __c[1]; } __u = { .__val = ( typeof(list->rhead.next)) ((typeof(*(head)) *)(head)) }; __write_once_size(&(list->rhead.next), __u.__c, sizeof(list->rhead.next)); __u.__val; }); } while (0);
  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj); if (__builtin_constant_p(obj) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_18(void) ; if (__cond) __compiletime_assert_18(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; __write_once_size(&(*&*pprev), __u.__c, sizeof(*&*pprev)); __u.__val; }); } while (0); _r_a_p__v; });

  goto good;
 }

 if (elasticity <= 0)
  goto slow_path;

 data = ERR_PTR(-7);
 if (__builtin_expect(!!(rht_grow_above_max(ht, tbl)), 0))
  goto out;

 if (__builtin_expect(!!(rht_grow_above_100(ht, tbl)), 0))
  goto slow_path;

 head = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); });

 do { ; ({ union { typeof(obj->next) __val; char __c[1]; } __u = { .__val = ( typeof(obj->next)) ((typeof(*(head)) *)(head)) }; __write_once_size(&(obj->next), __u.__c, sizeof(obj->next)); __u.__val; }); } while (0);
 if (rhlist) {
  struct rhlist_head *list;

  list = ({ void *__mptr = (void *)(obj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(obj)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(obj)), typeof(void)))); extern void __compiletime_assert_19(void) ; if (__cond) __compiletime_assert_19(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });
  do { ; ({ union { typeof(list->next) __val; char __c[1]; } __u = { .__val = ( typeof(list->next)) ((typeof(*(((void *)0))) *)(((void *)0))) }; __write_once_size(&(list->next), __u.__c, sizeof(list->next)); __u.__val; }); } while (0);
 }

 ({ uintptr_t _r_a_p__v = (uintptr_t)(obj); if (__builtin_constant_p(obj) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_20(void) ; if (__cond) __compiletime_assert_20(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; __write_once_size(&(*&*pprev), __u.__c, sizeof(*&*pprev)); __u.__val; }); } while (0); _r_a_p__v; });

 atomic_inc(&ht->nelems);
 if (rht_grow_above_75(ht, tbl))
  schedule_work(&ht->run_work);

good:
 data = ((void *)0);

out:
 spin_unlock_bh(lock);
 rcu_read_unlock();

 return data;
}
# 827 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhashtable_insert_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 void *ret;

 ret = __rhashtable_insert_fast(ht, ((void *)0), obj, params, false);
 if (IS_ERR(ret))
  return PTR_ERR(ret);

 return ret == ((void *)0) ? 0 : -17;
}
# 857 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhltable_insert_key(
 struct rhltable *hlt, const void *key, struct rhlist_head *list,
 const struct rhashtable_params params)
{
 return PTR_ERR(__rhashtable_insert_fast(&hlt->ht, key, &list->rhead,
      params, true));
}
# 881 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhltable_insert(
 struct rhltable *hlt, struct rhlist_head *list,
 const struct rhashtable_params params)
{
 const char *key = rht_obj(&hlt->ht, &list->rhead);

 key += params.key_offset;

 return rhltable_insert_key(hlt, key, list, params);
}
# 913 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhashtable_lookup_insert_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 const char *key = rht_obj(ht, obj);
 void *ret;

 do { if (__builtin_expect(!!(ht->p.obj_hashfn), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rhashtable.h"), "i" (920), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);

 ret = __rhashtable_insert_fast(ht, key + ht->p.key_offset, obj, params,
           false);
 if (IS_ERR(ret))
  return PTR_ERR(ret);

 return ret == ((void *)0) ? 0 : -17;
}
# 940 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup_get_insert_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 const char *key = rht_obj(ht, obj);

 do { if (__builtin_expect(!!(ht->p.obj_hashfn), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rhashtable.h"), "i" (946), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);

 return __rhashtable_insert_fast(ht, key + ht->p.key_offset, obj, params,
     false);
}
# 974 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhashtable_lookup_insert_key(
 struct rhashtable *ht, const void *key, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 void *ret;

 do { if (__builtin_expect(!!(!ht->p.obj_hashfn || !key), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rhashtable.h"), "i" (980), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);

 ret = __rhashtable_insert_fast(ht, key, obj, params, false);
 if (IS_ERR(ret))
  return PTR_ERR(ret);

 return ret == ((void *)0) ? 0 : -17;
}
# 1000 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *rhashtable_lookup_get_insert_key(
 struct rhashtable *ht, const void *key, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 do { if (__builtin_expect(!!(!ht->p.obj_hashfn || !key), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rhashtable.h"), "i" (1004), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);

 return __rhashtable_insert_fast(ht, key, obj, params, false);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __rhashtable_remove_fast_one(
 struct rhashtable *ht, struct bucket_table *tbl,
 struct rhash_head *obj, const struct rhashtable_params params,
 bool rhlist)
{
 struct rhash_head **pprev;
 struct rhash_head *he;
 spinlock_t * lock;
 unsigned int hash;
 int err = -2;

 hash = rht_head_hashfn(ht, tbl, obj, params);
 lock = rht_bucket_lock(tbl, hash);

 spin_lock_bh(lock);

 pprev = rht_bucket_var(tbl, hash);
 for (he = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); }); !rht_is_a_nulls(he); he = ({ do { } while (0); ; ((typeof(*((he)->next)) *)(((he)->next))); })) {
  struct rhlist_head *list;

  list = ({ void *__mptr = (void *)(he); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(he)), typeof(((struct rhlist_head *)0)->rhead)) && !__builtin_types_compatible_p(typeof(*(he)), typeof(void)))); extern void __compiletime_assert_21(void) ; if (__cond) __compiletime_assert_21(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct rhlist_head *)(__mptr - __builtin_offsetof(struct rhlist_head, rhead))); });

  if (he != obj) {
   struct rhlist_head **lpprev;

   pprev = &he->next;

   if (!rhlist)
    continue;

   do {
    lpprev = &list->next;
    list = ({ do { } while (0); ; ((typeof(*(list->next)) *)((list->next))); });

   } while (list && obj != &list->rhead);

   if (!list)
    continue;

   list = ({ do { } while (0); ; ((typeof(*(list->next)) *)((list->next))); });
   do { ; ({ union { typeof(*lpprev) __val; char __c[1]; } __u = { .__val = ( typeof(*lpprev)) ((typeof(*(list)) *)(list)) }; __write_once_size(&(*lpprev), __u.__c, sizeof(*lpprev)); __u.__val; }); } while (0);
   err = 0;
   break;
  }

  obj = ({ do { } while (0); ; ((typeof(*(obj->next)) *)((obj->next))); });
  err = 1;

  if (rhlist) {
   list = ({ do { } while (0); ; ((typeof(*(list->next)) *)((list->next))); });
   if (list) {
    do { ; ({ union { typeof(list->rhead.next) __val; char __c[1]; } __u = { .__val = ( typeof(list->rhead.next)) ((typeof(*(obj)) *)(obj)) }; __write_once_size(&(list->rhead.next), __u.__c, sizeof(list->rhead.next)); __u.__val; }); } while (0);
    obj = &list->rhead;
    err = 0;
   }
  }

  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj); if (__builtin_constant_p(obj) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_22(void) ; if (__cond) __compiletime_assert_22(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; __write_once_size(&(*&*pprev), __u.__c, sizeof(*&*pprev)); __u.__val; }); } while (0); _r_a_p__v; });
  break;
 }

 spin_unlock_bh(lock);

 if (err > 0) {
  atomic_dec(&ht->nelems);
  if (__builtin_expect(!!(ht->p.automatic_shrinking && rht_shrink_below_30(ht, tbl)), 0))

   schedule_work(&ht->run_work);
  err = 0;
 }

 return err;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __rhashtable_remove_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params, bool rhlist)
{
 struct bucket_table *tbl;
 int err;

 rcu_read_lock();

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });






 while ((err = __rhashtable_remove_fast_one(ht, tbl, obj, params,
         rhlist)) &&
        (tbl = ({ typeof(*(tbl->future_tbl)) *________p1 = (typeof(*(tbl->future_tbl)) *)({ union { typeof((tbl->future_tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); else __read_once_size_nocheck(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)(________p1)); })))
  ;

 rcu_read_unlock();

 return err;
}
# 1126 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhashtable_remove_fast(
 struct rhashtable *ht, struct rhash_head *obj,
 const struct rhashtable_params params)
{
 return __rhashtable_remove_fast(ht, obj, params, false);
}
# 1148 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhltable_remove(
 struct rhltable *hlt, struct rhlist_head *list,
 const struct rhashtable_params params)
{
 return __rhashtable_remove_fast(&hlt->ht, &list->rhead, params, true);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __rhashtable_replace_fast(
 struct rhashtable *ht, struct bucket_table *tbl,
 struct rhash_head *obj_old, struct rhash_head *obj_new,
 const struct rhashtable_params params)
{
 struct rhash_head **pprev;
 struct rhash_head *he;
 spinlock_t *lock;
 unsigned int hash;
 int err = -2;




 hash = rht_head_hashfn(ht, tbl, obj_old, params);
 if (hash != rht_head_hashfn(ht, tbl, obj_new, params))
  return -22;

 lock = rht_bucket_lock(tbl, hash);

 spin_lock_bh(lock);

 pprev = rht_bucket_var(tbl, hash);
 for (he = ({ do { } while (0); ; ((typeof(*(*pprev)) *)((*pprev))); }); !rht_is_a_nulls(he); he = ({ do { } while (0); ; ((typeof(*((he)->next)) *)(((he)->next))); })) {
  if (he != obj_old) {
   pprev = &he->next;
   continue;
  }

  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj_old->next); if (__builtin_constant_p(obj_old->next) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((obj_new->next)) __val; char __c[1]; } __u = { .__val = ( typeof((obj_new->next))) ((typeof(obj_new->next))(_r_a_p__v)) }; __write_once_size(&((obj_new->next)), __u.__c, sizeof((obj_new->next))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&obj_new->next) == sizeof(char) || sizeof(*&obj_new->next) == sizeof(short) || sizeof(*&obj_new->next) == sizeof(int) || sizeof(*&obj_new->next) == sizeof(long))); extern void __compiletime_assert_23(void) ; if (__cond) __compiletime_assert_23(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&obj_new->next) __val; char __c[1]; } __u = { .__val = ( typeof(*&obj_new->next)) ((typeof(*((typeof(obj_new->next))_r_a_p__v)) *)((typeof(obj_new->next))_r_a_p__v)) }; __write_once_size(&(*&obj_new->next), __u.__c, sizeof(*&obj_new->next)); __u.__val; }); } while (0); _r_a_p__v; });
  ({ uintptr_t _r_a_p__v = (uintptr_t)(obj_new); if (__builtin_constant_p(obj_new) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*pprev)) __val; char __c[1]; } __u = { .__val = ( typeof((*pprev))) ((typeof(*pprev))(_r_a_p__v)) }; __write_once_size(&((*pprev)), __u.__c, sizeof((*pprev))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&*pprev) == sizeof(char) || sizeof(*&*pprev) == sizeof(short) || sizeof(*&*pprev) == sizeof(int) || sizeof(*&*pprev) == sizeof(long))); extern void __compiletime_assert_24(void) ; if (__cond) __compiletime_assert_24(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*&*pprev)) ((typeof(*((typeof(*pprev))_r_a_p__v)) *)((typeof(*pprev))_r_a_p__v)) }; __write_once_size(&(*&*pprev), __u.__c, sizeof(*&*pprev)); __u.__val; }); } while (0); _r_a_p__v; });
  err = 0;
  break;
 }

 spin_unlock_bh(lock);

 return err;
}
# 1210 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhashtable_replace_fast(
 struct rhashtable *ht, struct rhash_head *obj_old,
 struct rhash_head *obj_new,
 const struct rhashtable_params params)
{
 struct bucket_table *tbl;
 int err;

 rcu_read_lock();

 tbl = ({ typeof(*(ht->tbl)) *________p1 = (typeof(*(ht->tbl)) *)({ union { typeof((ht->tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); else __read_once_size_nocheck(&((ht->tbl)), __u.__c, sizeof((ht->tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(ht->tbl)) *)(________p1)); });






 while ((err = __rhashtable_replace_fast(ht, tbl, obj_old,
      obj_new, params)) &&
        (tbl = ({ typeof(*(tbl->future_tbl)) *________p1 = (typeof(*(tbl->future_tbl)) *)({ union { typeof((tbl->future_tbl)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); else __read_once_size_nocheck(&((tbl->future_tbl)), __u.__c, sizeof((tbl->future_tbl))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tbl->future_tbl)) *)(________p1)); })))
  ;

 rcu_read_unlock();

 return err;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rhashtable_walk_init(struct rhashtable *ht,
           struct rhashtable_iter *iter, gfp_t gfp)
{
 rhashtable_walk_enter(ht, iter);
 return 0;
}
# 1265 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rhltable_walk_enter(struct rhltable *hlt,
           struct rhashtable_iter *iter)
{
 return rhashtable_walk_enter(&hlt->ht, iter);
}
# 1279 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rhashtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rhltable_free_and_destroy(struct rhltable *hlt,
          void (*free_fn)(void *ptr,
            void *arg),
          void *arg)
{
 return rhashtable_free_and_destroy(&hlt->ht, free_fn, arg);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rhltable_destroy(struct rhltable *hlt)
{
 return rhltable_free_and_destroy(hlt, ((void *)0), ((void *)0));
}
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ipc.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/ipc.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/ipc.h"
struct ipc_perm
{
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;
};



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ipcbuf.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/ipcbuf.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/ipcbuf.h"
struct ipc64_perm {
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
};
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/ipcbuf.h" 2
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/ipc.h" 2
# 58 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/ipc.h"
struct ipc_kludge {
 struct msgbuf *msgp;
 long msgtyp;
};
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ipc.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/refcount.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/refcount.h"
typedef struct refcount_struct {
 atomic_t refs;
} refcount_t;
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/refcount.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void refcount_set(refcount_t *r, unsigned int n)
{
 atomic_set(&r->refs, n);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int refcount_read(const refcount_t *r)
{
 return atomic_read(&r->refs);
}


extern bool refcount_add_not_zero(unsigned int i, refcount_t *r);
extern void refcount_add(unsigned int i, refcount_t *r);

extern bool refcount_inc_not_zero(refcount_t *r);
extern void refcount_inc(refcount_t *r);

extern bool refcount_sub_and_test(unsigned int i, refcount_t *r);

extern bool refcount_dec_and_test(refcount_t *r);
extern void refcount_dec(refcount_t *r);
# 97 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/refcount.h"
extern bool refcount_dec_if_one(refcount_t *r);
extern bool refcount_dec_not_one(refcount_t *r);
extern bool refcount_dec_and_mutex_lock(refcount_t *r, struct mutex *lock);
extern bool refcount_dec_and_lock(refcount_t *r, spinlock_t *lock);
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ipc.h" 2




struct kern_ipc_perm {
 spinlock_t lock;
 bool deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

 struct rhash_head khtnode;

 struct callback_head rcu;
 refcount_t refcount;
} __attribute__((__aligned__((1 << (6))))) ;
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sem.h" 2
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sem.h"
struct semid_ds {
 struct ipc_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;
};



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sembuf.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sembuf.h"
struct semid64_ds {
 struct ipc64_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_ulong_t __unused1;
 __kernel_time_t sem_ctime;
 __kernel_ulong_t __unused2;
 __kernel_ulong_t sem_nsems;
 __kernel_ulong_t __unused3;
 __kernel_ulong_t __unused4;
};
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sem.h" 2


struct sembuf {
 unsigned short sem_num;
 short sem_op;
 short sem_flg;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;
};
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sem.h" 2

struct task_struct;


struct sem {
 int semval;







 int sempid;
 spinlock_t lock;
 struct list_head pending_alter;

 struct list_head pending_const;

 time_t sem_otime;
} __attribute__((__aligned__((1 << (6)))));


struct sem_array {
 struct kern_ipc_perm sem_perm;
 time64_t sem_ctime;
 struct list_head pending_alter;

 struct list_head pending_const;

 struct list_head list_id;
 int sem_nsems;
 int complex_count;
 unsigned int use_global_lock;

 struct sem sems[];
} ;
# 59 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sem.h"
struct sysv_sem {

};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_semundo(unsigned long clone_flags, struct task_struct *tsk)
{
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void exit_sem(struct task_struct *tsk)
{
 return;
}
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/shm.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/shm.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/hugetlb_encode.h" 1
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/shm.h" 2
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/shm.h"
struct shmid_ds {
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_time_t shm_atime;
 __kernel_time_t shm_dtime;
 __kernel_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;
};



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/shmbuf.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/shmbuf.h" 1
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/shmbuf.h"
struct shmid64_ds {
 struct ipc64_perm shm_perm;
 size_t shm_segsz;
 __kernel_time_t shm_atime;



 __kernel_time_t shm_dtime;



 __kernel_time_t shm_ctime;



 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 __kernel_ulong_t shm_nattch;
 __kernel_ulong_t __unused4;
 __kernel_ulong_t __unused5;
};

struct shminfo64 {
 __kernel_ulong_t shmmax;
 __kernel_ulong_t shmmin;
 __kernel_ulong_t shmmni;
 __kernel_ulong_t shmseg;
 __kernel_ulong_t shmall;
 __kernel_ulong_t __unused1;
 __kernel_ulong_t __unused2;
 __kernel_ulong_t __unused3;
 __kernel_ulong_t __unused4;
};
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/shmbuf.h" 2
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/shm.h" 2
# 90 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/shm.h"
struct shminfo {
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;
};

struct shm_info {
 int used_ids;
 __kernel_ulong_t shm_tot;
 __kernel_ulong_t shm_rss;
 __kernel_ulong_t shm_swp;
 __kernel_ulong_t swap_attempts;
 __kernel_ulong_t swap_successes;
};
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/shm.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/shmparam.h" 1
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/shm.h" 2

struct shmid_kernel
{
 struct kern_ipc_perm shm_perm;
 struct file *shm_file;
 unsigned long shm_nattch;
 unsigned long shm_segsz;
 time64_t shm_atim;
 time64_t shm_dtim;
 time64_t shm_ctim;
 pid_t shm_cprid;
 pid_t shm_lprid;
 struct user_struct *mlock_user;


 struct task_struct *shm_creator;
 struct list_head shm_clist;
} ;
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/shm.h"
struct sysv_shm {

};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long do_shmat(int shmid, char *shmaddr,
       int shmflg, unsigned long *addr,
       unsigned long shmlba)
{
 return -38;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_file_shm_hugepages(struct file *file)
{
 return false;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void exit_shm(struct task_struct *task)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void shm_init_task(struct task_struct *task)
{
}
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kcov.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kcov.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kcov.h"
struct kcov_remote_arg {
 __u32 trace_mode;
 __u32 area_size;
 __u32 num_handles;
 __u64 __attribute__((aligned(8))) common_handle;
 __u64 __attribute__((aligned(8))) handles[0];
};
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kcov.h"
enum {
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kcov.h"
 KCOV_TRACE_PC = 0,

 KCOV_TRACE_CMP = 1,
};
# 56 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kcov.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __u64 kcov_remote_handle(__u64 subsys, __u64 inst)
{
 if (subsys & ~(0xffull << 56) || inst & ~(0xffffffffull))
  return 0;
 return subsys | inst;
}
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kcov.h" 2

struct task_struct;
# 57 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kcov.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_task_init(struct task_struct *t) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_task_exit(struct task_struct *t) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_prepare_switch(struct task_struct *t) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_finish_switch(struct task_struct *t) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_remote_start(u64 handle) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_remote_stop(void) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 kcov_common_handle(void)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_remote_start_common(u64 id) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kcov_remote_start_usb(u64 id) {}
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/plist.h" 1
# 81 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/plist.h"
struct plist_head {
 struct list_head node_list;
};

struct plist_node {
 int prio;
 struct list_head prio_list;
 struct list_head node_list;
};
# 123 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/plist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);

extern void plist_requeue(struct plist_node *node, struct plist_head *head);
# 212 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/plist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int plist_head_empty(const struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int plist_node_empty(const struct plist_node *node)
{
 return list_empty(&node->node_list);
}
# 282 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/plist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct plist_node *plist_first(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.next); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.next)), typeof(void)))); extern void __compiletime_assert_25(void) ; if (__cond) __compiletime_assert_25(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct plist_node *plist_last(const struct plist_head *head)
{
 return ({ void *__mptr = (void *)(head->node_list.prev); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(((struct plist_node *)0)->node_list)) && !__builtin_types_compatible_p(typeof(*(head->node_list.prev)), typeof(void)))); extern void __compiletime_assert_26(void) ; if (__cond) __compiletime_assert_26(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct plist_node *)(__mptr - __builtin_offsetof(struct plist_node, node_list))); });

}
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree.h" 1
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree.h"
struct rb_node {
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
 struct rb_node *rb_node;
};
# 57 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree.h"
struct rb_root_cached {
 struct rb_root rb_root;
 struct rb_node *rb_leftmost;
};
# 77 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree.h"
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next(const struct rb_node *);
extern struct rb_node *rb_prev(const struct rb_node *);
extern struct rb_node *rb_first(const struct rb_root *);
extern struct rb_node *rb_last(const struct rb_root *);

extern void rb_insert_color_cached(struct rb_node *,
       struct rb_root_cached *, bool);
extern void rb_erase_cached(struct rb_node *node, struct rb_root_cached *);




extern struct rb_node *rb_first_postorder(const struct rb_root *);
extern struct rb_node *rb_next_postorder(const struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *new,
       struct rb_root *root);
extern void rb_replace_node_rcu(struct rb_node *victim, struct rb_node *new,
    struct rb_root *root);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rb_link_node(struct rb_node *node, struct rb_node *parent,
    struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 *rb_link = node;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rb_link_node_rcu(struct rb_node *node, struct rb_node *parent,
        struct rb_node **rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = ((void *)0);

 ({ uintptr_t _r_a_p__v = (uintptr_t)(node); if (__builtin_constant_p(node) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((*rb_link)) __val; char __c[1]; } __u = { .__val = ( typeof((*rb_link))) ((typeof(*rb_link))(_r_a_p__v)) }; __write_once_size(&((*rb_link)), __u.__c, sizeof((*rb_link))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&*rb_link) == sizeof(char) || sizeof(*&*rb_link) == sizeof(short) || sizeof(*&*rb_link) == sizeof(int) || sizeof(*&*rb_link) == sizeof(long))); extern void __compiletime_assert_27(void) ; if (__cond) __compiletime_assert_27(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&*rb_link) __val; char __c[1]; } __u = { .__val = ( typeof(*&*rb_link)) ((typeof(*((typeof(*rb_link))_r_a_p__v)) *)((typeof(*rb_link))_r_a_p__v)) }; __write_once_size(&(*&*rb_link), __u.__c, sizeof(*&*rb_link)); __u.__val; }); } while (0); _r_a_p__v; });
}
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmdebug.h" 1







struct page;
struct vm_area_struct;
struct mm_struct;

extern void dump_page(struct page *page, const char *reason);
extern void __dump_page(struct page *page, const char *reason);
void dump_vma(const struct vm_area_struct *vma);
void dump_mm(const struct mm_struct *mm);
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/smp.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/smp.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/llist.h" 1
# 66 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/llist.h"
struct llist_head {
 struct llist_node *first;
};

struct llist_node {
 struct llist_node *next;
};
# 81 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/llist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_llist_head(struct llist_head *list)
{
 list->first = ((void *)0);
}
# 199 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/llist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool llist_empty(const struct llist_head *head)
{
 return (*({ __attribute__((unused)) typeof(head->first) __var = ( typeof(head->first)) 0; (volatile typeof(head->first) *)&(head->first); })) == ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool llist_add(struct llist_node *new, struct llist_head *head)
{
 return llist_add_batch(new, new, head);
}
# 232 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/llist.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ typeof(&head->first) __ai_ptr = (&head->first); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = (((((void *)0)))); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); });
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/smp.h" 2

typedef void (*smp_call_func_t)(void *info);
struct __call_single_data {
 struct llist_node llist;
 smp_call_func_t func;
 void *info;
 unsigned int flags;
};


typedef struct __call_single_data call_single_data_t
 __attribute__((aligned(sizeof(struct __call_single_data))));


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);




int on_each_cpu(smp_call_func_t func, void *info, int wait);





void on_each_cpu_mask(const struct cpumask *mask, smp_call_func_t func,
  void *info, bool wait);






void on_each_cpu_cond(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags);

int smp_call_function_single_async(int cpu, call_single_data_t *csd);








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smp.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smp.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec_def.h" 1
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec_def.h"
struct mpf_intel {
 char signature[4];
 unsigned int physptr;
 unsigned char length;
 unsigned char specification;
 unsigned char checksum;
 unsigned char feature1;
 unsigned char feature2;
 unsigned char feature3;
 unsigned char feature4;
 unsigned char feature5;
};



struct mpc_table {
 char signature[4];
 unsigned short length;
 char spec;
 char checksum;
 char oem[8];
 char productid[12];
 unsigned int oemptr;
 unsigned short oemsize;
 unsigned short oemcount;
 unsigned int lapic;
 unsigned int reserved;
};
# 68 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec_def.h"
struct mpc_cpu {
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char cpuflag;
 unsigned int cpufeature;
 unsigned int featureflag;
 unsigned int reserved[2];
};

struct mpc_bus {
 unsigned char type;
 unsigned char busid;
 unsigned char bustype[6];
};
# 106 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec_def.h"
struct mpc_ioapic {
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char flags;
 unsigned int apicaddr;
};

struct mpc_intsrc {
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbus;
 unsigned char srcbusirq;
 unsigned char dstapic;
 unsigned char dstirq;
};

enum mp_irq_source_types {
 mp_INT = 0,
 mp_NMI = 1,
 mp_SMI = 2,
 mp_ExtINT = 3
};







struct mpc_lintsrc {
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbusid;
 unsigned char srcbusirq;
 unsigned char destapic;
 unsigned char destapiclint;
};



struct mpc_oemtable {
 char signature[4];
 unsigned short length;
 char rev;
 char checksum;
 char mpc[8];
};
# 169 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec_def.h"
enum mp_bustype {
 MP_BUS_ISA = 1,
 MP_BUS_EISA,
 MP_BUS_PCI,
};
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h" 1






struct mpc_bus;
struct mpc_cpu;
struct mpc_table;
struct cpuinfo_x86;
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_init_mpparse {
 void (*mpc_record)(unsigned int mode);
 void (*setup_ioapic_ids)(void);
 int (*mpc_apic_id)(struct mpc_cpu *m);
 void (*smp_read_mpc_oem)(struct mpc_table *mpc);
 void (*mpc_oem_pci_bus)(struct mpc_bus *m);
 void (*mpc_oem_bus_info)(struct mpc_bus *m, char *name);
 void (*find_smp_config)(void);
 void (*get_smp_config)(unsigned int early);
};
# 42 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_init_resources {
 void (*probe_roms)(void);
 void (*reserve_resources)(void);
 char *(*memory_setup)(void);
};
# 55 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_init_irqs {
 void (*pre_vector_init)(void);
 void (*intr_init)(void);
 void (*trap_init)(void);
};






struct x86_init_oem {
 void (*arch_setup)(void);
 void (*banner)(void);
};
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_init_paging {
 void (*pagetable_init)(void);
};
# 89 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_init_timers {
 void (*setup_percpu_clockev)(void);
 void (*timer_init)(void);
 void (*wallclock_init)(void);
};





struct x86_init_iommu {
 int (*iommu_init)(void);
};
# 110 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_init_pci {
 int (*arch_init)(void);
 int (*init)(void);
 void (*init_irq)(void);
 void (*fixup_irqs)(void);
};







struct x86_hyper_init {
 void (*init_platform)(void);
 bool (*x2apic_available)(void);
 void (*init_mem_mapping)(void);
};





struct x86_init_ops {
 struct x86_init_resources resources;
 struct x86_init_mpparse mpparse;
 struct x86_init_irqs irqs;
 struct x86_init_oem oem;
 struct x86_init_paging paging;
 struct x86_init_timers timers;
 struct x86_init_iommu iommu;
 struct x86_init_pci pci;
 struct x86_hyper_init hyper;
};






struct x86_cpuinit_ops {
 void (*setup_percpu_clockev)(void);
 void (*early_percpu_clock_init)(void);
 void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node);
};

struct timespec;
# 177 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_legacy_devices {
 int pnpbios;
};
# 190 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
enum x86_legacy_i8042_state {
 X86_LEGACY_I8042_PLATFORM_ABSENT,
 X86_LEGACY_I8042_FIRMWARE_ABSENT,
 X86_LEGACY_I8042_EXPECTED_PRESENT,
};
# 208 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_legacy_features {
 enum x86_legacy_i8042_state i8042;
 int rtc;
 int reserve_bios_regions;
 struct x86_legacy_devices devices;
};






struct x86_hyper_runtime {
 void (*pin_vcpu)(int cpu);
};
# 245 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/x86_init.h"
struct x86_platform_ops {
 unsigned long (*calibrate_cpu)(void);
 unsigned long (*calibrate_tsc)(void);
 void (*get_wallclock)(struct timespec *ts);
 int (*set_wallclock)(const struct timespec *ts);
 void (*iommu_shutdown)(void);
 bool (*is_untracked_pat_range)(u64 start, u64 end);
 void (*nmi_init)(void);
 unsigned char (*get_nmi_reason)(void);
 void (*save_sched_clock_state)(void);
 void (*restore_sched_clock_state)(void);
 void (*apic_post_init)(void);
 struct x86_legacy_features legacy;
 void (*set_legacy_features)(void);
 struct x86_hyper_runtime hyper;
};

struct pci_dev;

struct x86_msi_ops {
 int (*setup_msi_irqs)(struct pci_dev *dev, int nvec, int type);
 void (*teardown_msi_irq)(unsigned int irq);
 void (*teardown_msi_irqs)(struct pci_dev *dev);
 void (*restore_msi_irqs)(struct pci_dev *dev);
};

struct x86_io_apic_ops {
 unsigned int (*read) (unsigned int apic, unsigned int reg);
 void (*disable)(void);
};

extern struct x86_init_ops x86_init;
extern struct x86_cpuinit_ops x86_cpuinit;
extern struct x86_platform_ops x86_platform;
extern struct x86_msi_ops x86_msi;
extern struct x86_io_apic_ops x86_io_apic_ops;

extern void x86_early_init_platform_quirks(void);
extern void x86_init_noop(void);
extern void x86_init_uint_noop(unsigned int unused);
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apicdef.h" 1
# 179 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apicdef.h"
struct local_apic {

        struct { unsigned int __reserved[4]; } __reserved_01;

        struct { unsigned int __reserved[4]; } __reserved_02;

        struct {
  unsigned int __reserved_1 : 24,
   phys_apic_id : 4,
   __reserved_2 : 4;
  unsigned int __reserved[3];
 } id;

        const
 struct {
  unsigned int version : 8,
   __reserved_1 : 8,
   max_lvt : 8,
   __reserved_2 : 8;
  unsigned int __reserved[3];
 } version;

        struct { unsigned int __reserved[4]; } __reserved_03;

        struct { unsigned int __reserved[4]; } __reserved_04;

        struct { unsigned int __reserved[4]; } __reserved_05;

        struct { unsigned int __reserved[4]; } __reserved_06;

        struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } tpr;

        const
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } apr;

        const
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 } ppr;

        struct {
  unsigned int eoi;
  unsigned int __reserved[3];
 } eoi;

        struct { unsigned int __reserved[4]; } __reserved_07;

        struct {
  unsigned int __reserved_1 : 24,
   logical_dest : 8;
  unsigned int __reserved_2[3];
 } ldr;

        struct {
  unsigned int __reserved_1 : 28,
   model : 4;
  unsigned int __reserved_2[3];
 } dfr;

        struct {
  unsigned int spurious_vector : 8,
   apic_enabled : 1,
   focus_cpu : 1,
   __reserved_2 : 22;
  unsigned int __reserved_3[3];
 } svr;

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } isr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } tmr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 } irr [8];

        union {
  struct {
   unsigned int send_cs_error : 1,
    receive_cs_error : 1,
    send_accept_error : 1,
    receive_accept_error : 1,
    __reserved_1 : 1,
    send_illegal_vector : 1,
    receive_illegal_vector : 1,
    illegal_register_address : 1,
    __reserved_2 : 24;
   unsigned int __reserved_3[3];
  } error_bits;
  struct {
   unsigned int errors;
   unsigned int __reserved_3[3];
  } all_errors;
 } esr;

        struct { unsigned int __reserved[4]; } __reserved_08;

        struct { unsigned int __reserved[4]; } __reserved_09;

        struct { unsigned int __reserved[4]; } __reserved_10;

        struct { unsigned int __reserved[4]; } __reserved_11;

        struct { unsigned int __reserved[4]; } __reserved_12;

        struct { unsigned int __reserved[4]; } __reserved_13;

        struct { unsigned int __reserved[4]; } __reserved_14;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   destination_mode : 1,
   delivery_status : 1,
   __reserved_1 : 1,
   level : 1,
   trigger : 1,
   __reserved_2 : 2,
   shorthand : 2,
   __reserved_3 : 12;
  unsigned int __reserved_4[3];
 } icr1;

        struct {
  union {
   unsigned int __reserved_1 : 24,
    phys_dest : 4,
    __reserved_2 : 4;
   unsigned int __reserved_3 : 24,
    logical_dest : 8;
  } dest;
  unsigned int __reserved_4[3];
 } icr2;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   timer_mode : 1,
   __reserved_3 : 14;
  unsigned int __reserved_4[3];
 } lvt_timer;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_thermal;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_pc;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 } lvt_lint0;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 } lvt_lint1;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 } lvt_error;

        struct {
  unsigned int initial_count;
  unsigned int __reserved_2[3];
 } timer_icr;

        const
 struct {
  unsigned int curr_count;
  unsigned int __reserved_2[3];
 } timer_ccr;

        struct { unsigned int __reserved[4]; } __reserved_16;

        struct { unsigned int __reserved[4]; } __reserved_17;

        struct { unsigned int __reserved[4]; } __reserved_18;

        struct { unsigned int __reserved[4]; } __reserved_19;

        struct {
  unsigned int divisor : 4,
   __reserved_1 : 28;
  unsigned int __reserved_2[3];
 } timer_dcr;

        struct { unsigned int __reserved[4]; } __reserved_20;

} __attribute__ ((packed));
# 435 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apicdef.h"
enum ioapic_irq_destination_types {
 dest_Fixed = 0,
 dest_LowestPrio = 1,
 dest_SMI = 2,
 dest__reserved_1 = 3,
 dest_NMI = 4,
 dest_INIT = 5,
 dest__reserved_2 = 6,
 dest_ExtINT = 7
};
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec.h" 2

extern int pic_mode;
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec.h"
extern unsigned long mp_bus_not_pci[(((256) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];

extern unsigned int boot_cpu_physical_apicid;
extern u8 boot_cpu_apic_version;
extern unsigned long mp_lapic_addr;


extern int smp_found_config;




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void early_get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void find_smp_config(void)
{
 x86_init.mpparse.find_smp_config();
}


extern void e820__memblock_alloc_reserved_mpc_new(void);
extern int enable_update_mptable;
extern int default_mpc_apic_id(struct mpc_cpu *m);
extern void default_smp_read_mpc_oem(struct mpc_table *mpc);

extern void default_mpc_oem_bus_info(struct mpc_bus *m, char *str);



extern void default_find_smp_config(void);
extern void default_get_smp_config(unsigned int early);
# 89 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec.h"
int generic_processor_info(int apicid, int version);



struct physid_mask {
 unsigned long mask[(((32768) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))];
};

typedef struct physid_mask physid_mask_t;
# 132 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mpspec.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long physids_coerce(physid_mask_t *map)
{
 return map->mask[0];
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void physids_promote(unsigned long physids, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 map->mask[0] = physids;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void physid_set_mask_of_physid(int physid, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 set_bit(physid, (*map).mask);
}




extern physid_mask_t phys_cpu_present_map;
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smp.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h" 1
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/acpi.h" 1
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/acpi.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/acpi/pdc_intel.h" 1
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/acpi.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/numa.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h" 1
# 96 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/numa.h" 1
# 97 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h" 2

typedef struct { unsigned long bits[((((1 << 0)) + ((sizeof(long) * 8)) - 1) / ((sizeof(long) * 8)))]; } nodemask_t;
extern nodemask_t _unused_nodemask_arg_;
# 119 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void __node_set(int node, volatile nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __node_clear(int node, volatile nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_setall(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_clear(nodemask_t *dstp, unsigned int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_and(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_or(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_xor(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_andnot(nodemask_t *dstp, const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_complement(nodemask_t *dstp,
     const nodemask_t *srcp, unsigned int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodes_equal(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodes_intersects(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodes_subset(const nodemask_t *src1p,
     const nodemask_t *src2p, unsigned int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodes_empty(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodes_full(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodes_weight(const nodemask_t *srcp, unsigned int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_shift_right(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_shift_left(nodemask_t *dstp,
     const nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __first_node(const nodemask_t *srcp)
{
 return ({ int __UNIQUE_ID_min1_28 = ((1 << 0)); int __UNIQUE_ID_min2_29 = (find_first_bit(srcp->bits, (1 << 0))); (void) (&__UNIQUE_ID_min1_28 == &__UNIQUE_ID_min2_29); __UNIQUE_ID_min1_28 < __UNIQUE_ID_min2_29 ? __UNIQUE_ID_min1_28 : __UNIQUE_ID_min2_29; });
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __next_node(int n, const nodemask_t *srcp)
{
 return ({ int __UNIQUE_ID_min1_30 = ((1 << 0)); int __UNIQUE_ID_min2_31 = (find_next_bit(srcp->bits, (1 << 0), n+1)); (void) (&__UNIQUE_ID_min1_30 == &__UNIQUE_ID_min2_31); __UNIQUE_ID_min1_30 < __UNIQUE_ID_min2_31 ? __UNIQUE_ID_min1_30 : __UNIQUE_ID_min2_31; });
}






int __next_node_in(int node, const nodemask_t *srcp);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 0));
 __node_set((node), &(*mask));
}
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __first_unset_node(const nodemask_t *maskp)
{
 return ({ int __UNIQUE_ID_min1_32 = ((1 << 0)); int __UNIQUE_ID_min2_33 = (find_first_zero_bit(maskp->bits, (1 << 0))); (void) (&__UNIQUE_ID_min1_32 == &__UNIQUE_ID_min2_33); __UNIQUE_ID_min1_32 < __UNIQUE_ID_min2_33 ? __UNIQUE_ID_min1_32 : __UNIQUE_ID_min2_33; });

}
# 324 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodemask_parse_user(const char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __nodelist_parse(const char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __node_remap(int oldbit,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_remap(nodemask_t *dstp, const nodemask_t *srcp,
  const nodemask_t *oldp, const nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_onto(nodemask_t *dstp, const nodemask_t *origp,
  const nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __nodes_fold(nodemask_t *dstp, const nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
# 382 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_MEMORY,
 N_CPU,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];
# 455 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int node_state(int node, enum node_states state)
{
 return node == 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void node_set_state(int node, enum node_states state)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void node_clear_state(int node, enum node_states state)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int num_node_state(enum node_states state)
{
 return 1;
}
# 490 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int node_random(const nodemask_t *mask)
{
 return 0;
}
# 522 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nodemask.h"
struct nodemask_scratch {
 nodemask_t mask1;
 nodemask_t mask2;
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/numa.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/topology.h" 1
# 85 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/topology.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int numa_node_id(void)
{
 return 0;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int early_cpu_to_node(int cpu)
{
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void setup_node_to_cpumask_map(void) { }




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/topology.h" 1
# 104 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/topology.h" 2

extern const struct cpumask *cpu_coregroup_mask(int cpu);
# 115 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/topology.h"
extern unsigned int __max_logical_packages;


extern int __max_smt_threads;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int topology_max_smt_threads(void)
{
 return __max_smt_threads;
}

int topology_update_package_map(unsigned int apicid, unsigned int cpu);
int topology_phys_to_logical_pkg(unsigned int pkg);
bool topology_is_primary_thread(unsigned int cpu);
bool topology_smt_supported(void);
# 139 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/topology.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_fix_phys_package_id(int num, u32 slot)
{
}

struct pci_bus;
int x86_pci_root_bus_node(int bus);
void x86_pci_root_bus_resources(int bus, struct list_head *resources);

extern bool x86_topology_update;




extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) sched_core_priority;
extern unsigned int __attribute__((__section__(".data..read_mostly"))) sysctl_sched_itmt_enabled;


void sched_set_itmt_core_prio(int prio, int core_cpu);


int sched_set_itmt_support(void);


void sched_clear_itmt_support(void);
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/numa.h" 2
# 45 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/numa.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_apicid_to_node(int apicid, s16 node)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int numa_cpu_node(int cpu)
{
 return (-1);
}
# 66 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/numa.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void numa_set_node(int cpu, int node) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void numa_clear_node(int cpu) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_cpu_to_node(void) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void numa_add_cpu(int cpu) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void numa_remove_cpu(int cpu) { }
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/acpi.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h" 1
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/acpi.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mmu.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwsem.h" 1
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwsem.h"
struct rw_semaphore;






struct rw_semaphore {
 atomic_long_t count;
 struct list_head wait_list;
 raw_spinlock_t wait_lock;

 struct optimistic_spin_queue osq;




 struct task_struct *owner;




};







extern struct rw_semaphore *rwsem_down_read_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_read_failed_killable(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_write_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_write_failed_killable(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_wake(struct rw_semaphore *);
extern struct rw_semaphore *rwsem_downgrade_wake(struct rw_semaphore *sem);



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/rwsem.h" 1
# 64 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/rwsem.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __down_read(struct rw_semaphore *sem)
{
 asm volatile("# beginning down_read\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "incq" " " "(%1)\n\t"

       "  jns        1f\n"
       "  call call_rwsem_down_read_failed\n"
       "1:\n\t"
       "# ending down_read\n\t"
       : "+m" (sem->count)
       : "a" (sem)
       : "memory", "cc");
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __down_read_trylock(struct rw_semaphore *sem)
{
 long result, tmp;
 asm volatile("# beginning __down_read_trylock\n\t"
       "  mov          %0,%1\n\t"
       "1:\n\t"
       "  mov          %1,%2\n\t"
       "  add          %3,%2\n\t"
       "  jle	     2f\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  cmpxchg  %2,%0\n\t"
       "  jnz	     1b\n\t"
       "2:\n\t"
       "# ending __down_read_trylock\n\t"
       : "+m" (sem->count), "=&a" (result), "=&r" (tmp)
       : "i" (0x00000001L)
       : "memory", "cc");
 return result >= 0;
}
# 124 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/rwsem.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __down_write(struct rw_semaphore *sem)
{
 ({ long tmp; struct rw_semaphore* ret; asm volatile("# beginning down_write\n\t" ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%4)\n\t" "  test " " " "%k1" " " "," " " "%k1" " " "\n\t" "  jz        1f\n" "  call " "call_rwsem_down_write_failed" "\n" "1:\n" "# ending down_write" : "+m" (sem->count), "=d" (tmp), "=a" (ret), "+r" (current_stack_pointer) : "a" (sem), "1" (((-0xffffffffL -1) + 0x00000001L)) : "memory", "cc"); ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __down_write_killable(struct rw_semaphore *sem)
{
 if (IS_ERR(({ long tmp; struct rw_semaphore* ret; asm volatile("# beginning down_write\n\t" ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%4)\n\t" "  test " " " "%k1" " " "," " " "%k1" " " "\n\t" "  jz        1f\n" "  call " "call_rwsem_down_write_failed_killable" "\n" "1:\n" "# ending down_write" : "+m" (sem->count), "=d" (tmp), "=a" (ret), "+r" (current_stack_pointer) : "a" (sem), "1" (((-0xffffffffL -1) + 0x00000001L)) : "memory", "cc"); ret; })))
  return -4;

 return 0;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __down_write_trylock(struct rw_semaphore *sem)
{
 bool result;
 long tmp0, tmp1;
 asm volatile("# beginning __down_write_trylock\n\t"
       "  mov          %0,%1\n\t"
       "1:\n\t"
       "  test " " " "%k1" " " "," " " "%k1" " " "\n\t"

       "  jnz          2f\n\t"
       "  mov          %1,%2\n\t"
       "  add          %4,%2\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  cmpxchg  %2,%0\n\t"
       "  jnz	     1b\n\t"
       "2:\n\t"
       "\n\t/* output condition code " "e" "*/\n"
       "# ending __down_write_trylock\n\t"
       : "+m" (sem->count), "=&a" (tmp0), "=&r" (tmp1),
         "=@cc" "e" (result)
       : "er" (((-0xffffffffL -1) + 0x00000001L))
       : "memory");
 return result;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __up_read(struct rw_semaphore *sem)
{
 long tmp;
 asm volatile("# beginning __up_read\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%2)\n\t"

       "  jns        1f\n\t"
       "  call call_rwsem_wake\n"
       "1:\n"
       "# ending __up_read\n"
       : "+m" (sem->count), "=d" (tmp)
       : "a" (sem), "1" (-0x00000001L)
       : "memory", "cc");
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __up_write(struct rw_semaphore *sem)
{
 long tmp;
 asm volatile("# beginning __up_write\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%2)\n\t"

       "  jns        1f\n\t"
       "  call call_rwsem_wake\n"
       "1:\n\t"
       "# ending __up_write\n"
       : "+m" (sem->count), "=d" (tmp)
       : "a" (sem), "1" (-((-0xffffffffL -1) + 0x00000001L))
       : "memory", "cc");
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __downgrade_write(struct rw_semaphore *sem)
{
 asm volatile("# beginning __downgrade_write\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "addq" " " "%2,(%1)\n\t"




       "  jns       1f\n\t"
       "  call call_rwsem_downgrade_wake\n"
       "1:\n\t"
       "# ending __downgrade_write\n"
       : "+m" (sem->count)
       : "a" (sem), "er" (-(-0xffffffffL -1))
       : "memory", "cc");
}
# 62 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwsem.h" 2


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rwsem_is_locked(struct rw_semaphore *sem)
{
 return atomic_long_read(&sem->count) != 0;
}
# 96 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwsem.h"
extern void __init_rwsem(struct rw_semaphore *sem, const char *name,
    struct lock_class_key *key);
# 112 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rwsem.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int rwsem_is_contended(struct rw_semaphore *sem)
{
 return !list_empty(&sem->wait_list);
}




extern void down_read(struct rw_semaphore *sem);




extern int down_read_trylock(struct rw_semaphore *sem);




extern void down_write(struct rw_semaphore *sem);
extern int down_write_killable(struct rw_semaphore *sem);




extern int down_write_trylock(struct rw_semaphore *sem);




extern void up_read(struct rw_semaphore *sem);




extern void up_write(struct rw_semaphore *sem);




extern void downgrade_write(struct rw_semaphore *sem);
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mmu.h" 2






typedef struct {




 u64 ctx_id;
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/mmu.h"
 atomic64_t tlb_gen;


 struct rw_semaphore ldt_usr_sem;
 struct ldt_struct *ldt;




 unsigned short ia32_compat;


 struct mutex lock;
 void *vdso;
 const struct vdso_image *vdso_image;

 atomic_t perf_rdpmc_allowed;





 u16 pkey_allocation_map;
 s16 execute_only_pkey;





} mm_context_t;






void leave_mm(int cpu);
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/acpi.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/realmode.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/realmode.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h" 1
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
# 1 "./arch/x86/include/generated/asm/early_ioremap.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/early_ioremap.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/early_ioremap.h"
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap_ro(resource_size_t phys_addr,
          unsigned long size);
extern void *early_memremap_prot(resource_size_t phys_addr,
     unsigned long size, unsigned long prot_val);
extern void early_iounmap(void *addr, unsigned long size);
extern void early_memunmap(void *addr, unsigned long size);





extern void early_ioremap_shutdown(void);



extern void early_ioremap_init(void);


extern void early_ioremap_setup(void);





extern void early_ioremap_reset(void);




extern void copy_from_early_mem(void *dest, phys_addr_t src,
    unsigned long size);
# 2 "./arch/x86/include/generated/asm/early_ioremap.h" 2
# 45 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h" 2
# 57 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned char readb(const volatile void *addr) { unsigned char ret; asm volatile("mov" "b" " %1,%0":"=q" (ret) :"m" (*(volatile unsigned char *)addr) :"memory"); return ret; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned short readw(const volatile void *addr) { unsigned short ret; asm volatile("mov" "w" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned short *)addr) :"memory"); return ret; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int readl(const volatile void *addr) { unsigned int ret; asm volatile("mov" "l" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned int *)addr) :"memory"); return ret; }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned char __readb(const volatile void *addr) { unsigned char ret; asm volatile("mov" "b" " %1,%0":"=q" (ret) :"m" (*(volatile unsigned char *)addr) ); return ret; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned short __readw(const volatile void *addr) { unsigned short ret; asm volatile("mov" "w" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned short *)addr) ); return ret; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int __readl(const volatile void *addr) { unsigned int ret; asm volatile("mov" "l" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned int *)addr) ); return ret; }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writeb(unsigned char val, volatile void *addr) { asm volatile("mov" "b" " %0,%1": :"q" (val), "m" (*(volatile unsigned char *)addr) :"memory"); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writew(unsigned short val, volatile void *addr) { asm volatile("mov" "w" " %0,%1": :"r" (val), "m" (*(volatile unsigned short *)addr) :"memory"); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writel(unsigned int val, volatile void *addr) { asm volatile("mov" "l" " %0,%1": :"r" (val), "m" (*(volatile unsigned int *)addr) :"memory"); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __writeb(unsigned char val, volatile void *addr) { asm volatile("mov" "b" " %0,%1": :"q" (val), "m" (*(volatile unsigned char *)addr) ); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __writew(unsigned short val, volatile void *addr) { asm volatile("mov" "w" " %0,%1": :"r" (val), "m" (*(volatile unsigned short *)addr) ); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __writel(unsigned int val, volatile void *addr) { asm volatile("mov" "l" " %0,%1": :"r" (val), "m" (*(volatile unsigned int *)addr) ); }
# 97 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long readq(const volatile void *addr) { unsigned long ret; asm volatile("mov" "q" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned long *)addr) :"memory"); return ret; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long __readq(const volatile void *addr) { unsigned long ret; asm volatile("mov" "q" " %1,%0":"=r" (ret) :"m" (*(volatile unsigned long *)addr) ); return ret; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writeq(unsigned long val, volatile void *addr) { asm volatile("mov" "q" " %0,%1": :"r" (val), "m" (*(volatile unsigned long *)addr) :"memory"); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __writeq(unsigned long val, volatile void *addr) { asm volatile("mov" "q" " %0,%1": :"r" (val), "m" (*(volatile unsigned long *)addr) ); }
# 127 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) phys_addr_t virt_to_phys(volatile void *address)
{
 return __phys_addr_nodebug((unsigned long)(address));
}
# 146 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *phys_to_virt(phys_addr_t address)
{
 return ((void *)((unsigned long)(address)+((unsigned long)page_offset_base)));
}
# 162 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int isa_virt_to_bus(volatile void *address)
{
 return (unsigned int)virt_to_phys(address);
}
# 182 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
extern void *ioremap_nocache(resource_size_t offset, unsigned long size);

extern void *ioremap_uc(resource_size_t offset, unsigned long size);


extern void *ioremap_cache(resource_size_t offset, unsigned long size);

extern void *ioremap_prot(resource_size_t offset, unsigned long size, unsigned long prot_val);
# 206 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *ioremap(resource_size_t offset, unsigned long size)
{
 return ioremap_nocache(offset, size);
}


extern void iounmap(volatile void *addr);


extern void set_iounmap_nonlazy(void);




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/iomap.h" 1
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/iomap.h"
extern unsigned int ioread8(void *);
extern unsigned int ioread16(void *);
extern unsigned int ioread16be(void *);
extern unsigned int ioread32(void *);
extern unsigned int ioread32be(void *);

extern u64 ioread64(void *);
extern u64 ioread64be(void *);


extern void iowrite8(u8, void *);
extern void iowrite16(u16, void *);
extern void iowrite16be(u16, void *);
extern void iowrite32(u32, void *);
extern void iowrite32be(u32, void *);

extern void iowrite64(u64, void *);
extern void iowrite64be(u64, void *);
# 60 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/iomap.h"
extern void ioread8_rep(void *port, void *buf, unsigned long count);
extern void ioread16_rep(void *port, void *buf, unsigned long count);
extern void ioread32_rep(void *port, void *buf, unsigned long count);

extern void iowrite8_rep(void *port, const void *buf, unsigned long count);
extern void iowrite16_rep(void *port, const void *buf, unsigned long count);
extern void iowrite32_rep(void *port, const void *buf, unsigned long count);



extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *);
# 84 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/iomap.h"
struct pci_dev;
extern void pci_iounmap(struct pci_dev *dev, void *);







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pci_iomap.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pci_iomap.h"
struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_wc(struct pci_dev *dev, int bar, unsigned long max);
extern void *pci_iomap_range(struct pci_dev *dev, int bar,
         unsigned long offset,
         unsigned long maxlen);
extern void *pci_iomap_wc_range(struct pci_dev *dev, int bar,
     unsigned long offset,
     unsigned long maxlen);
# 93 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/iomap.h" 2
# 220 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h" 2
# 239 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void flush_write_buffers(void)
{



}



extern void native_io_delay(void);

extern int io_delay_type;
extern void io_delay_init(void);
# 309 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outb(unsigned char value, int port) { asm volatile("out" "b" " %" "b" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned char inb(int port) { unsigned char value; asm volatile("in" "b" " %w1, %" "b" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outb_p(unsigned char value, int port) { outb(value, port); slow_down_io(); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned char inb_p(int port) { unsigned char value = inb(port); slow_down_io(); return value; } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outsb(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" "b" : "+S"(addr), "+c"(count) : "d"(port) : "memory"); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void insb(int port, void *addr, unsigned long count) { asm volatile("rep; ins" "b" : "+D"(addr), "+c"(count) : "d"(port) : "memory"); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outw(unsigned short value, int port) { asm volatile("out" "w" " %" "w" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned short inw(int port) { unsigned short value; asm volatile("in" "w" " %w1, %" "w" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outw_p(unsigned short value, int port) { outw(value, port); slow_down_io(); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned short inw_p(int port) { unsigned short value = inw(port); slow_down_io(); return value; } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outsw(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" "w" : "+S"(addr), "+c"(count) : "d"(port) : "memory"); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void insw(int port, void *addr, unsigned long count) { asm volatile("rep; ins" "w" : "+D"(addr), "+c"(count) : "d"(port) : "memory"); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outl(unsigned int value, int port) { asm volatile("out" "l" " %" "" "0, %w1" : : "a"(value), "Nd"(port)); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int inl(int port) { unsigned int value; asm volatile("in" "l" " %w1, %" "" "0" : "=a"(value) : "Nd"(port)); return value; } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outl_p(unsigned int value, int port) { outl(value, port); slow_down_io(); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int inl_p(int port) { unsigned int value = inl(port); slow_down_io(); return value; } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outsl(int port, const void *addr, unsigned long count) { asm volatile("rep; outs" "l" : "+S"(addr), "+c"(count) : "d"(port) : "memory"); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void insl(int port, void *addr, unsigned long count) { asm volatile("rep; ins" "l" : "+D"(addr), "+c"(count) : "d"(port) : "memory"); }
# 333 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
extern void *xlate_dev_mem_ptr(phys_addr_t phys);
extern void unxlate_dev_mem_ptr(phys_addr_t phys, void *addr);




extern int ioremap_change_attr(unsigned long vaddr, unsigned long size,
    enum page_cache_mode pcm);
extern void *ioremap_wc(resource_size_t offset, unsigned long size);

extern void *ioremap_wt(resource_size_t offset, unsigned long size);


extern bool is_early_ioremap_ptep(pte_t *ptep);
# 362 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h" 1
# 220 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void readsb(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u8 *buf = buffer;

  do {
   u8 x = __readb(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void readsw(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u16 *buf = buffer;

  do {
   u16 x = __readw(addr);
   *buf++ = x;
  } while (--count);
 }
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void readsl(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u32 *buf = buffer;

  do {
   u32 x = __readl(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void readsq(const volatile void *addr, void *buffer,
     unsigned int count)
{
 if (count) {
  u64 *buf = buffer;

  do {
   u64 x = __readq(addr);
   *buf++ = x;
  } while (--count);
 }
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writesb(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u8 *buf = buffer;

  do {
   __writeb(*buf++, addr);
  } while (--count);
 }
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writesw(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u16 *buf = buffer;

  do {
   __writew(*buf++, addr);
  } while (--count);
 }
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writesl(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u32 *buf = buffer;

  do {
   __writel(*buf++, addr);
  } while (--count);
 }
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void writesq(volatile void *addr, const void *buffer,
      unsigned int count)
{
 if (count) {
  const u64 *buf = buffer;

  do {
   __writeq(*buf++, addr);
  } while (--count);
 }
}
# 514 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void insb_p(unsigned long addr, void *buffer, unsigned int count)
{
 insb(addr, buffer, count);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void insw_p(unsigned long addr, void *buffer, unsigned int count)
{
 insw(addr, buffer, count);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void insl_p(unsigned long addr, void *buffer, unsigned int count)
{
 insl(addr, buffer, count);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outsb_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsb(addr, buffer, count);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outsw_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsw(addr, buffer, count);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void outsl_p(unsigned long addr, const void *buffer,
      unsigned int count)
{
 outsl(addr, buffer, count);
}
# 767 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/vmalloc.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/vmalloc.h"
struct vm_area_struct;
struct notifier_block;
# 33 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/vmalloc.h"
struct vm_struct {
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;
 unsigned int nr_pages;
 phys_addr_t phys_addr;
 const void *caller;
};

struct vmap_area {
 unsigned long va_start;
 unsigned long va_end;
 unsigned long flags;
 struct rb_node rb_node;
 struct list_head list;
 struct llist_node purge_list;
 struct vm_struct *vm;
 struct callback_head callback_head;
};




extern void vm_unmap_ram(const void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count,
    int node, pgprot_t prot);
extern void vm_unmap_aliases(void);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) vmalloc_init(void);
extern unsigned long vmalloc_nr_pages(void);







extern void *vmalloc(unsigned long size);
extern void *vzalloc(unsigned long size);
extern void *vmalloc_user(unsigned long size);
extern void *vmalloc_node(unsigned long size, int node);
extern void *vzalloc_node(unsigned long size, int node);
extern void *vmalloc_exec(unsigned long size);
extern void *vmalloc_32(unsigned long size);
extern void *vmalloc_32_user(unsigned long size);
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot);
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, unsigned long vm_flags, int node,
   const void *caller);
# 94 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/vmalloc.h"
extern void *__vmalloc_node_flags_caller(unsigned long size,
      int node, gfp_t flags, void *caller);


extern void vfree(const void *addr);
extern void vfree_atomic(const void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
extern void vunmap(const void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long pgoff, unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
void vmalloc_sync_mappings(void);
void vmalloc_sync_unmappings(void);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) size_t get_vm_area_size(const struct vm_struct *area)
{
 if (!(area->flags & 0x00000040))

  return area->size - ((1UL) << 12);
 else
  return area->size;

}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, const void *caller);
extern struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,
     unsigned long start, unsigned long end);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     const void *caller);
extern struct vm_struct *remove_vm_area(const void *addr);
extern struct vm_struct *find_vm_area(const void *addr);

extern int map_vm_area(struct vm_struct *area, pgprot_t prot,
   struct page **pages);

extern int map_kernel_range_noflush(unsigned long start, unsigned long size,
        pgprot_t prot, struct page **pages);
extern void unmap_kernel_range_noflush(unsigned long addr, unsigned long size);
extern void unmap_kernel_range(unsigned long addr, unsigned long size);
# 165 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/vmalloc.h"
extern struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes);
extern void free_vm_area(struct vm_struct *area);


extern long vread(char *buf, char *addr, unsigned long count);
extern long vwrite(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,
         const size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
# 208 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/vmalloc.h"
int register_vmap_purge_notifier(struct notifier_block *nb);
int unregister_vmap_purge_notifier(struct notifier_block *nb);
# 768 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h" 2
# 913 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *p);
# 923 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *xlate_dev_kmem_ptr(void *addr)
{
 return addr;
}
# 968 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void memset_io(volatile void *addr, int value,
        size_t size)
{
 memset(((void *)(addr)), value, size);
}
# 985 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void memcpy_fromio(void *buffer,
     const volatile void *addr,
     size_t size)
{
 ({ size_t __len = (size); void *__ret; if (__builtin_constant_p(size) && __len >= 64) __ret = __memcpy((buffer), (((void *)(addr))), __len); else __ret = __builtin_memcpy((buffer), (((void *)(addr))), __len); __ret; });
}
# 1003 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/io.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void memcpy_toio(volatile void *addr, const void *buffer,
          size_t size)
{
 ({ size_t __len = (size); void *__ret; if (__builtin_constant_p(size) && __len >= 64) __ret = __memcpy((((void *)(addr))), (buffer), __len); else __ret = __builtin_memcpy((((void *)(addr))), (buffer), __len); __ret; });
}
# 363 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h" 2
# 381 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io.h"
extern bool arch_memremap_can_ram_remap(resource_size_t offset,
     unsigned long size,
     unsigned long flags);


extern bool phys_mem_access_encrypted(unsigned long phys_addr,
          unsigned long size);
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/realmode.h" 2


struct real_mode_header {
 u32 text_start;
 u32 ro_end;

 u32 trampoline_start;
 u32 trampoline_status;
 u32 trampoline_header;

 u32 trampoline_pgd;



 u32 wakeup_start;
 u32 wakeup_header;


 u32 machine_real_restart_asm;

 u32 machine_real_restart_seg;

};


struct trampoline_header {






 u64 start;
 u64 efer;
 u32 cr4;
 u32 flags;

};

extern struct real_mode_header *real_mode_header;
extern unsigned char real_mode_blob_end[];

extern unsigned long initial_code;
extern unsigned long initial_gs;
extern unsigned long initial_stack;

extern unsigned char real_mode_blob[];
extern unsigned char real_mode_relocs[];





extern unsigned char secondary_startup_64[];


static inline __attribute__((unused)) __attribute__((no_instrument_function)) size_t real_mode_size_needed(void)
{
 if (real_mode_header)
  return 0;

 return ((((real_mode_blob_end - real_mode_blob)) + ((typeof((real_mode_blob_end - real_mode_blob)))((((1UL) << 12))) - 1)) & ~((typeof((real_mode_blob_end - real_mode_blob)))((((1UL) << 12))) - 1));
}

void set_real_mode_mem(phys_addr_t mem, size_t size);
void reserve_real_mode(void);
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/acpi.h" 2






extern int acpi_lapic;
extern int acpi_ioapic;
extern int acpi_noirq;
extern int acpi_strict;
extern int acpi_disabled;
extern int acpi_pci_disabled;
extern int acpi_skip_timer_override;
extern int acpi_use_timer_override;
extern int acpi_fix_pin2_polarity;
extern int acpi_disable_cmcff;

extern u8 acpi_sci_flags;
extern int acpi_sci_override_gsi;
void acpi_pic_sci_set_trigger(unsigned int, u16);

struct device;

extern int (*__acpi_register_gsi)(struct device *dev, u32 gsi,
      int trigger, int polarity);
extern void (*__acpi_unregister_gsi)(u32 gsi);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void disable_acpi(void)
{
 acpi_disabled = 1;
 acpi_pci_disabled = 1;
 acpi_noirq = 1;
}

extern int acpi_gsi_to_irq(u32 gsi, unsigned int *irq);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void acpi_noirq_set(void) { acpi_noirq = 1; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void acpi_disable_pci(void)
{
 acpi_pci_disabled = 1;
 acpi_noirq_set();
}


extern int (*acpi_suspend_lowlevel)(void);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int acpi_processor_cstate_check(unsigned int max_cstate)
{






 if (boot_cpu_data.x86 == 0x0F &&
     boot_cpu_data.x86_vendor == 2 &&
     boot_cpu_data.x86_model <= 0x05 &&
     boot_cpu_data.x86_stepping < 0x0A)
  return 1;
 else if ((__builtin_constant_p((19*32 + (4))) && ( ((((19*32 + (4)))>>5)==(0) && (1UL<<(((19*32 + (4)))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((19*32 + (4)))>>5)==(1) && (1UL<<(((19*32 + (4)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((19*32 + (4)))>>5)==(2) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(3) && (1UL<<(((19*32 + (4)))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((19*32 + (4)))>>5)==(4) && (1UL<<(((19*32 + (4)))&31) & (0) )) || ((((19*32 + (4)))>>5)==(5) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(6) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(7) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(8) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(9) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(10) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(11) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(12) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(13) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(14) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(15) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(16) && (1UL<<(((19*32 + (4)))&31) & (0) )) || ((((19*32 + (4)))>>5)==(17) && (1UL<<(((19*32 + (4)))&31) & 0 )) || ((((19*32 + (4)))>>5)==(18) && (1UL<<(((19*32 + (4)))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((19*32 + (4)))) ? constant_test_bit(((19*32 + (4))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((19*32 + (4))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return 1;
 else
  return max_cstate;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool arch_has_acpi_pdc(void)
{
 struct cpuinfo_x86 *c = &(*({ do { const void *__vpp_verify = (typeof((&(cpu_info)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_info)))) *)((&(cpu_info))))); (typeof((typeof(*((&(cpu_info)))) *)((&(cpu_info))))) (__ptr + (((__per_cpu_offset[(0)])))); }); }));
 return (c->x86_vendor == 0 ||
  c->x86_vendor == 5);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_acpi_set_pdc_bits(u32 *buf)
{
 struct cpuinfo_x86 *c = &(*({ do { const void *__vpp_verify = (typeof((&(cpu_info)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_info)))) *)((&(cpu_info))))); (typeof((typeof(*((&(cpu_info)))) *)((&(cpu_info))))) (__ptr + (((__per_cpu_offset[(0)])))); }); }));

 buf[2] |= ((0x0010) | (0x0008) | (0x0002) | (0x0100) | (0x0200));

 if ((__builtin_constant_p(( 4*32+ 7)) && ( (((( 4*32+ 7))>>5)==(0) && (1UL<<((( 4*32+ 7))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+ 7))>>5)==(1) && (1UL<<((( 4*32+ 7))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+ 7))>>5)==(2) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(3) && (1UL<<((( 4*32+ 7))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+ 7))>>5)==(4) && (1UL<<((( 4*32+ 7))&31) & (0) )) || (((( 4*32+ 7))>>5)==(5) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(6) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(7) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(8) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(9) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(10) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(11) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(12) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(13) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(14) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(15) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(16) && (1UL<<((( 4*32+ 7))&31) & (0) )) || (((( 4*32+ 7))>>5)==(17) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (((( 4*32+ 7))>>5)==(18) && (1UL<<((( 4*32+ 7))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+ 7))) ? constant_test_bit((( 4*32+ 7)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit((( 4*32+ 7)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] |= ((0x0008) | (0x0002) | (0x0020) | (0x0800) | (0x0001));

 if ((__builtin_constant_p(( 0*32+22)) && ( (((( 0*32+22))>>5)==(0) && (1UL<<((( 0*32+22))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+22))>>5)==(1) && (1UL<<((( 0*32+22))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+22))>>5)==(2) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(3) && (1UL<<((( 0*32+22))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+22))>>5)==(4) && (1UL<<((( 0*32+22))&31) & (0) )) || (((( 0*32+22))>>5)==(5) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(6) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(7) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(8) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(9) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(10) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(11) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(12) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(13) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(14) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(15) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(16) && (1UL<<((( 0*32+22))&31) & (0) )) || (((( 0*32+22))>>5)==(17) && (1UL<<((( 0*32+22))&31) & 0 )) || (((( 0*32+22))>>5)==(18) && (1UL<<((( 0*32+22))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 0*32+22))) ? constant_test_bit((( 0*32+22)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit((( 0*32+22)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] |= (0x0004);




 if (!(__builtin_constant_p(( 4*32+ 3)) && ( (((( 4*32+ 3))>>5)==(0) && (1UL<<((( 4*32+ 3))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+ 3))>>5)==(1) && (1UL<<((( 4*32+ 3))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+ 3))>>5)==(2) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(3) && (1UL<<((( 4*32+ 3))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+ 3))>>5)==(4) && (1UL<<((( 4*32+ 3))&31) & (0) )) || (((( 4*32+ 3))>>5)==(5) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(6) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(7) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(8) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(9) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(10) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(11) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(12) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(13) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(14) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(15) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(16) && (1UL<<((( 4*32+ 3))&31) & (0) )) || (((( 4*32+ 3))>>5)==(17) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (((( 4*32+ 3))>>5)==(18) && (1UL<<((( 4*32+ 3))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+ 3))) ? constant_test_bit((( 4*32+ 3)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit((( 4*32+ 3)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] &= ~((0x0200));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool acpi_has_cpu_in_madt(void)
{
 return !!acpi_lapic;
}
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h" 2






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/vsyscall.h" 1




enum vsyscall_num {
 __NR_vgettimeofday,
 __NR_vtime,
 __NR_vgetcpu,
};
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h" 2
# 76 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h"
enum fixed_addresses {




 VSYSCALL_PAGE = (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (-10UL << 20)) >> 12,


 FIX_DBGP_BASE,
 FIX_EARLYCON_MEM_BASE,




 FIX_APIC_BASE,


 FIX_IO_APIC_BASE_0,
 FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + 128 - 1,
# 104 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h"
 FIX_PARAVIRT_BOOTMAP,

 FIX_TEXT_POKE1,
 FIX_TEXT_POKE0,
# 118 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h"
 __end_of_permanent_fixed_addresses,
# 130 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h"
 FIX_BTMAP_END =
  (__end_of_permanent_fixed_addresses ^
   (__end_of_permanent_fixed_addresses + (64 * 8) - 1)) &
  -512
  ? __end_of_permanent_fixed_addresses + (64 * 8) -
    (__end_of_permanent_fixed_addresses & ((64 * 8) - 1))
  : __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + (64 * 8) - 1,






 __end_of_fixed_addresses
};


extern void reserve_top_address(unsigned long reserve);






extern int fixmaps_set;

extern pte_t *kmap_pte;

extern pte_t *pkmap_page_table;

void __native_set_fixmap(enum fixed_addresses idx, pte_t pte);
void native_set_fixmap(unsigned idx,
         phys_addr_t phys, pgprot_t flags);
# 184 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h"
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) *early_memremap_encrypted(resource_size_t phys_addr,
          unsigned long size);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) *early_memremap_encrypted_wp(resource_size_t phys_addr,
      unsigned long size);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) *early_memremap_decrypted(resource_size_t phys_addr,
          unsigned long size);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) *early_memremap_decrypted_wp(resource_size_t phys_addr,
      unsigned long size);


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/fixmap.h" 1
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/fixmap.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long fix_to_virt(const unsigned int idx)
{
 do { bool __cond = !(!(idx >= __end_of_fixed_addresses)); extern void __compiletime_assert_34(void) ; if (__cond) __compiletime_assert_34(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((idx) << 12));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long virt_to_fix(const unsigned long vaddr)
{
 do { if (__builtin_expect(!!(vaddr >= ((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) || vaddr < (((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - (__end_of_permanent_fixed_addresses << 12))), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/asm-generic/fixmap.h"), "i" (37), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);
 return ((((((((-10UL << 20) + ((1UL) << 12))-1) | ((__typeof__((-10UL << 20) + ((1UL) << 12)))((1<<21)-1)))+1) - ((1UL) << 12)) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}
# 194 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fixmap.h" 2




void __early_set_fixmap(enum fixed_addresses idx,
   phys_addr_t phys, pgprot_t flags);
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/hardirq.h" 1






typedef struct {
 u16 __softirq_pending;



 unsigned int __nmi_count;

 unsigned int apic_timer_irqs;
 unsigned int irq_spurious_count;
 unsigned int icr_read_retry_count;


 unsigned int kvm_posted_intr_ipis;
 unsigned int kvm_posted_intr_wakeup_ipis;
 unsigned int kvm_posted_intr_nested_ipis;

 unsigned int x86_platform_ipis;
 unsigned int apic_perf_irqs;
 unsigned int apic_irq_work_irqs;

 unsigned int irq_resched_count;
 unsigned int irq_call_count;

 unsigned int irq_tlb_count;

 unsigned int irq_thermal_count;


 unsigned int irq_threshold_count;


 unsigned int irq_deferred_error_count;




} __attribute__((__aligned__((1 << (6))))) irq_cpustat_t;

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << (6)))));
# 59 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/hardirq.h"
extern void ack_bad_irq(unsigned int irq);

extern u64 arch_irq_stat_cpu(unsigned int cpu);


extern u64 arch_irq_stat(void);
# 84 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/hardirq.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kvm_set_cpu_l1tf_flush_l1d(void) { }
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h" 2
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void generic_apic_probe(void)
{
}




extern int apic_verbosity;
extern int local_apic_timer_c2_ok;

extern int disable_apic;
extern unsigned int lapic_timer_frequency;


extern void __inquire_remote_apic(int apicid);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void default_inquire_remote_apic(int apicid)
{
 if (apic_verbosity >= 2)
  __inquire_remote_apic(apicid);
}
# 79 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool apic_from_smp_config(void)
{
 return smp_found_config && !disable_apic;
}
# 91 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
extern int setup_profiling_timer(unsigned int);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_apic_mem_write(u32 reg, u32 v)
{
 volatile u32 *addr = (volatile u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg);

 asm volatile ("661:\n\t" "movl %0, %P1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(19*32 + (5))" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "xchgl %0, %P1" "\n" "665""1" ":\n\t" ".popsection\n" : "=r" (v), "=m" (*addr) : "i" (0), "0" (v), "m" (*addr));


}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 native_apic_mem_read(u32 reg)
{
 return *((volatile u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg));
}

extern void native_apic_wait_icr_idle(void);
extern u32 native_safe_apic_wait_icr_idle(void);
extern void native_apic_icr_write(u32 low, u32 id);
extern u64 native_apic_icr_read(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool apic_is_x2apic_enabled(void)
{
 u64 msr;

 if (rdmsrl_safe(0x0000001b, &msr))
  return false;
 return msr & (1UL << 10);
}

extern void enable_IR_x2apic(void);

extern int get_physical_broadcast(void);

extern int lapic_get_maxlvt(void);
extern void clear_local_APIC(void);
extern void disconnect_bsp_APIC(int virt_wire_setup);
extern void disable_local_APIC(void);
extern void lapic_shutdown(void);
extern void sync_Arb_IDs(void);
extern void init_bsp_APIC(void);
extern void setup_local_APIC(void);
extern void init_apic_mappings(void);
void register_lapic_address(unsigned long address);
extern void setup_boot_APIC_clock(void);
extern void setup_secondary_APIC_clock(void);
extern void lapic_update_tsc_freq(void);
extern int APIC_init_uniprocessor(void);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int apic_force_enable(unsigned long addr)
{
 return -1;
}




extern int apic_bsp_setup(bool upmode);
extern void apic_ap_setup(void);





extern int apic_is_clustered_box(void);







extern int setup_APIC_eilvt(u8 lvt_off, u8 vector, u8 msg_type, u8 mask);
# 248 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_x2apic(void) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void x2apic_setup(void) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int x2apic_enabled(void) { return 0; }





struct irq_data;
# 268 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
struct apic {
 char *name;

 int (*probe)(void);
 int (*acpi_madt_oem_check)(char *oem_id, char *oem_table_id);
 int (*apic_id_valid)(int apicid);
 int (*apic_id_registered)(void);

 u32 irq_delivery_mode;
 u32 irq_dest_mode;

 const struct cpumask *(*target_cpus)(void);

 int disable_esr;

 int dest_logical;
 unsigned long (*check_apicid_used)(physid_mask_t *map, int apicid);

 void (*vector_allocation_domain)(int cpu, struct cpumask *retmask,
      const struct cpumask *mask);
 void (*init_apic_ldr)(void);

 void (*ioapic_phys_id_map)(physid_mask_t *phys_map, physid_mask_t *retmap);

 void (*setup_apic_routing)(void);
 int (*cpu_present_to_apicid)(int mps_cpu);
 void (*apicid_to_cpu_present)(int phys_apicid, physid_mask_t *retmap);
 int (*check_phys_apicid_present)(int phys_apicid);
 int (*phys_pkg_id)(int cpuid_apic, int index_msb);

 unsigned int (*get_apic_id)(unsigned long x);

 unsigned long (*set_apic_id)(unsigned int id);

 int (*cpu_mask_to_apicid)(const struct cpumask *cpumask,
      struct irq_data *irqdata,
      unsigned int *apicid);


 void (*send_IPI)(int cpu, int vector);
 void (*send_IPI_mask)(const struct cpumask *mask, int vector);
 void (*send_IPI_mask_allbutself)(const struct cpumask *mask,
      int vector);
 void (*send_IPI_allbutself)(int vector);
 void (*send_IPI_all)(int vector);
 void (*send_IPI_self)(int vector);


 int (*wakeup_secondary_cpu)(int apicid, unsigned long start_eip);

 void (*inquire_remote_apic)(int apicid);


 u32 (*read)(u32 reg);
 void (*write)(u32 reg, u32 v);







 void (*eoi_write)(u32 reg, u32 v);
 void (*native_eoi_write)(u32 reg, u32 v);
 u64 (*icr_read)(void);
 void (*icr_write)(u32 low, u32 high);
 void (*wait_icr_idle)(void);
 u32 (*safe_wait_icr_idle)(void);
# 350 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
};






extern struct apic *apic;
# 377 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
extern struct apic *__apicdrivers[], *__apicdrivers_end[];





extern int wakeup_secondary_cpu_via_nmi(int apicid, unsigned long start_eip);




static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 apic_read(u32 reg)
{
 return apic->read(reg);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void apic_write(u32 reg, u32 val)
{
 apic->write(reg, val);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void apic_eoi(void)
{
 apic->eoi_write(0xB0, 0x0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 apic_icr_read(void)
{
 return apic->icr_read();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void apic_icr_write(u32 low, u32 high)
{
 apic->icr_write(low, high);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void apic_wait_icr_idle(void)
{
 apic->wait_icr_idle();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 safe_apic_wait_icr_idle(void)
{
 return apic->safe_wait_icr_idle();
}

extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) apic_set_eoi_write(void (*eoi_write)(u32 reg, u32 v));
# 438 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ack_APIC_irq(void)
{




 apic_eoi();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned default_get_apic_id(unsigned long x)
{
 unsigned int ver = ((apic_read(0x30)) & 0xFFu);

 if (((ver) >= 0x14) || (__builtin_constant_p(( 3*32+26)) && ( (((( 3*32+26))>>5)==(0) && (1UL<<((( 3*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 3*32+26))>>5)==(1) && (1UL<<((( 3*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 3*32+26))>>5)==(2) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(3) && (1UL<<((( 3*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 3*32+26))>>5)==(4) && (1UL<<((( 3*32+26))&31) & (0) )) || (((( 3*32+26))>>5)==(5) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(6) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(7) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(8) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(9) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(10) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(11) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(12) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(13) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(14) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(15) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(16) && (1UL<<((( 3*32+26))&31) & (0) )) || (((( 3*32+26))>>5)==(17) && (1UL<<((( 3*32+26))&31) & 0 )) || (((( 3*32+26))>>5)==(18) && (1UL<<((( 3*32+26))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 3*32+26))) ? constant_test_bit((( 3*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 3*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return (x >> 24) & 0xFF;
 else
  return (x >> 24) & 0x0F;
}
# 464 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
extern void apic_send_IPI_self(int vector);

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) x2apic_extra_bits;

extern int default_cpu_present_to_apicid(int mps_cpu);
extern int default_check_phys_apicid_present(int phys_apicid);


extern void generic_bigsmp_probe(void);





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smp.h" 1
# 478 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h" 2



static inline __attribute__((unused)) __attribute__((no_instrument_function)) const struct cpumask *default_target_cpus(void)
{

 return ((const struct cpumask *)&__cpu_online_mask);



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const struct cpumask *online_target_cpus(void)
{
 return ((const struct cpumask *)&__cpu_online_mask);
}

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) x86_bios_cpu_apicid; extern __typeof__(u16) *x86_bios_cpu_apicid_early_ptr; extern __typeof__(u16) x86_bios_cpu_apicid_early_map[];


static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int read_apic_id(void)
{
 unsigned int reg;

 reg = apic_read(0x20);

 return apic->get_apic_id(reg);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int default_apic_id_valid(int apicid)
{
 return (apicid < 255);
}

extern int default_acpi_madt_oem_check(char *, char *);

extern void default_setup_apic_routing(void);

extern struct apic apic_noop;
# 546 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
extern int flat_cpu_mask_to_apicid(const struct cpumask *cpumask,
       struct irq_data *irqdata,
       unsigned int *apicid);
extern int default_cpu_mask_to_apicid(const struct cpumask *cpumask,
          struct irq_data *irqdata,
          unsigned int *apicid);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
flat_vector_allocation_domain(int cpu, struct cpumask *retmask,
         const struct cpumask *mask)
{
# 565 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
 cpumask_clear(retmask);
 ((retmask)->bits)[0] = 0xFFu;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
default_vector_allocation_domain(int cpu, struct cpumask *retmask,
     const struct cpumask *mask)
{
 cpumask_copy(retmask, (get_cpu_mask(cpu)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long default_check_apicid_used(physid_mask_t *map, int apicid)
{
 return (__builtin_constant_p((apicid)) ? constant_test_bit((apicid), ((*map).mask)) : variable_test_bit((apicid), ((*map).mask)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void default_ioapic_phys_id_map(physid_mask_t *phys_map, physid_mask_t *retmap)
{
 *retmap = *phys_map;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __default_cpu_present_to_apicid(int mps_cpu)
{
 if (mps_cpu < nr_cpu_ids && cpumask_test_cpu((mps_cpu), ((const struct cpumask *)&__cpu_present_mask)))
  return (int)(*({ do { const void *__vpp_verify = (typeof((&(x86_bios_cpu_apicid)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(x86_bios_cpu_apicid)))) *)((&(x86_bios_cpu_apicid))))); (typeof((typeof(*((&(x86_bios_cpu_apicid)))) *)((&(x86_bios_cpu_apicid))))) (__ptr + (((__per_cpu_offset[(mps_cpu)])))); }); }));
 else
  return 0xFFFFu;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
__default_check_phys_apicid_present(int phys_apicid)
{
 return (__builtin_constant_p((phys_apicid)) ? constant_test_bit((phys_apicid), ((phys_cpu_present_map).mask)) : variable_test_bit((phys_apicid), ((phys_cpu_present_map).mask)));
}
# 612 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/apic.h"
extern int default_cpu_present_to_apicid(int mps_cpu);
extern int default_check_phys_apicid_present(int phys_apicid);





bool apic_id_is_primary_thread(unsigned int id);




extern void irq_enter(void);
extern void irq_exit(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void entering_irq(void)
{
 irq_enter();
 kvm_set_cpu_l1tf_flush_l1d();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void entering_ack_irq(void)
{
 entering_irq();
 ack_APIC_irq();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ipi_entering_ack_irq(void)
{
 irq_enter();
 ack_APIC_irq();
 kvm_set_cpu_l1tf_flush_l1d();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void exiting_irq(void)
{
 irq_exit();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void exiting_ack_irq(void)
{
 ack_APIC_irq();
 irq_exit();
}

extern void ioapic_zap_locks(void);
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smp.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io_apic.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/irq_vectors.h" 1
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io_apic.h" 2
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io_apic.h"
union IO_APIC_reg_00 {
 u32 raw;
 struct {
  u32 __reserved_2 : 14,
   LTS : 1,
   delivery_type : 1,
   __reserved_1 : 8,
   ID : 8;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_01 {
 u32 raw;
 struct {
  u32 version : 8,
   __reserved_2 : 7,
   PRQ : 1,
   entries : 8,
   __reserved_1 : 8;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_02 {
 u32 raw;
 struct {
  u32 __reserved_2 : 24,
   arbitration : 4,
   __reserved_1 : 4;
 } __attribute__ ((packed)) bits;
};

union IO_APIC_reg_03 {
 u32 raw;
 struct {
  u32 boot_DT : 1,
   __reserved_1 : 31;
 } __attribute__ ((packed)) bits;
};

struct IO_APIC_route_entry {
 __u32 vector : 8,
  delivery_mode : 3,



  dest_mode : 1,
  delivery_status : 1,
  polarity : 1,
  irr : 1,
  trigger : 1,
  mask : 1,
  __reserved_2 : 15;

 __u32 __reserved_3 : 24,
  dest : 8;
} __attribute__ ((packed));

struct IR_IO_APIC_route_entry {
 __u64 vector : 8,
  zero : 3,
  index2 : 1,
  delivery_status : 1,
  polarity : 1,
  irr : 1,
  trigger : 1,
  mask : 1,
  reserved : 31,
  format : 1,
  index : 15;
} __attribute__ ((packed));

struct irq_alloc_info;
struct ioapic_domain_cfg;
# 123 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io_apic.h"
extern int nr_ioapics;

extern int mpc_ioapic_id(int ioapic);
extern unsigned int mpc_ioapic_addr(int ioapic);


extern int mp_irq_entries;


extern struct mpc_intsrc mp_irqs[(256 * 4)];


extern int skip_ioapic_setup;


extern int noioapicquirk;


extern int noioapicreroute;

extern u32 gsi_top;

extern unsigned long io_apic_irqs;
# 156 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/io_apic.h"
struct irq_cfg;
extern void ioapic_insert_resources(void);
extern int arch_early_ioapic_init(void);

extern int save_ioapic_entries(void);
extern void mask_ioapic_entries(void);
extern int restore_ioapic_entries(void);

extern void setup_ioapic_ids_from_mpc(void);
extern void setup_ioapic_ids_from_mpc_nocheck(void);

extern int mp_find_ioapic(u32 gsi);
extern int mp_find_ioapic_pin(int ioapic, u32 gsi);
extern int mp_map_gsi_to_irq(u32 gsi, unsigned int flags,
        struct irq_alloc_info *info);
extern void mp_unmap_irq(int irq);
extern int mp_register_ioapic(int id, u32 address, u32 gsi_base,
         struct ioapic_domain_cfg *cfg);
extern int mp_unregister_ioapic(u32 gsi_base);
extern int mp_ioapic_registered(u32 gsi_base);

extern void ioapic_set_alloc_attr(struct irq_alloc_info *info,
      int node, int trigger, int polarity);

extern void mp_save_irq(struct mpc_intsrc *m);

extern void disable_ioapic_support(void);

extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) io_apic_init_mappings(void);
extern unsigned int native_io_apic_read(unsigned int apic, unsigned int reg);
extern void native_disable_io_apic(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int io_apic_read(unsigned int apic, unsigned int reg)
{
 return x86_io_apic_ops.read(apic, reg);
}

extern void setup_IO_APIC(void);
extern void enable_IO_APIC(void);
extern void disable_IO_APIC(void);
extern void setup_ioapic_dest(void);
extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin);
extern void print_IO_APICs(void);
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smp.h" 2





extern int smp_num_siblings;
extern unsigned int num_processors;

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_sibling_map;
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_core_map;

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(cpumask_var_t) cpu_llc_shared_map;
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) cpu_llc_id;
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(int) cpu_number;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct cpumask *cpu_llc_shared_mask(int cpu)
{
 return (*({ do { const void *__vpp_verify = (typeof((&(cpu_llc_shared_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_llc_shared_map)))) *)((&(cpu_llc_shared_map))))); (typeof((typeof(*((&(cpu_llc_shared_map)))) *)((&(cpu_llc_shared_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); }));
}

extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) x86_cpu_to_apicid; extern __typeof__(u16) *x86_cpu_to_apicid_early_ptr; extern __typeof__(u16) x86_cpu_to_apicid_early_map[];
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u32) x86_cpu_to_acpiid; extern __typeof__(u32) *x86_cpu_to_acpiid_early_ptr; extern __typeof__(u32) x86_cpu_to_acpiid_early_map[];
extern __attribute__((section(".data..percpu" "..read_mostly"))) __typeof__(u16) x86_bios_cpu_apicid; extern __typeof__(u16) *x86_bios_cpu_apicid_early_ptr; extern __typeof__(u16) x86_bios_cpu_apicid_early_map[];




struct task_struct;

struct smp_ops {
 void (*smp_prepare_boot_cpu)(void);
 void (*smp_prepare_cpus)(unsigned max_cpus);
 void (*smp_cpus_done)(unsigned max_cpus);

 void (*stop_other_cpus)(int wait);
 void (*crash_stop_other_cpus)(void);
 void (*smp_send_reschedule)(int cpu);

 int (*cpu_up)(unsigned cpu, struct task_struct *tidle);
 int (*cpu_disable)(void);
 void (*cpu_die)(unsigned int cpu);
 void (*play_dead)(void);

 void (*send_call_func_ipi)(const struct cpumask *mask);
 void (*send_call_func_single_ipi)(int cpu);
};


extern void set_cpu_sibling_map(int cpu);


extern struct smp_ops smp_ops;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void smp_send_stop(void)
{
 smp_ops.stop_other_cpus(0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void stop_other_cpus(void)
{
 smp_ops.stop_other_cpus(1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void smp_prepare_boot_cpu(void)
{
 smp_ops.smp_prepare_boot_cpu();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void smp_prepare_cpus(unsigned int max_cpus)
{
 smp_ops.smp_prepare_cpus(max_cpus);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void smp_cpus_done(unsigned int max_cpus)
{
 smp_ops.smp_cpus_done(max_cpus);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __cpu_up(unsigned int cpu, struct task_struct *tidle)
{
 return smp_ops.cpu_up(cpu, tidle);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __cpu_disable(void)
{
 return smp_ops.cpu_disable();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __cpu_die(unsigned int cpu)
{
 smp_ops.cpu_die(cpu);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void play_dead(void)
{
 smp_ops.play_dead();
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void smp_send_reschedule(int cpu)
{
 smp_ops.smp_send_reschedule(cpu);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_send_call_function_single_ipi(int cpu)
{
 smp_ops.send_call_func_single_ipi(cpu);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_send_call_function_ipi_mask(const struct cpumask *mask)
{
 smp_ops.send_call_func_ipi(mask);
}

void cpu_disable_common(void);
void native_smp_prepare_boot_cpu(void);
void native_smp_prepare_cpus(unsigned int max_cpus);
void native_smp_cpus_done(unsigned int max_cpus);
void common_cpu_up(unsigned int cpunum, struct task_struct *tidle);
int native_cpu_up(unsigned int cpunum, struct task_struct *tidle);
int native_cpu_disable(void);
int common_cpu_die(unsigned int cpu);
void native_cpu_die(unsigned int cpu);
void hlt_play_dead(void);
void native_play_dead(void);
void play_dead_common(void);
void wbinvd_on_cpu(int cpu);
int wbinvd_on_all_cpus(void);

void native_send_call_func_ipi(const struct cpumask *mask);
void native_send_call_func_single_ipi(int cpu);
void x86_idle_thread_init(unsigned int cpu, struct task_struct *idle);

void smp_store_boot_cpu_info(void);
void smp_store_cpu_info(int id);
# 175 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smp.h"
extern unsigned disabled_cpus;


extern int hard_smp_processor_id(void);
# 65 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/smp.h" 2
# 74 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/smp.h"
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




int smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many(const struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any(const struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);
void wake_up_all_idle_cpus(void);




void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) setup_nr_cpu_ids(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) smp_init(void);

extern int __boot_cpu_id;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int get_boot_cpu_id(void)
{
 return __boot_cpu_id;
}
# 196 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/smp.h"
  extern unsigned int debug_smp_processor_id(void);
# 209 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/smp.h"
extern void arch_disable_smp_support(void);

extern void arch_enable_nonboot_cpus_begin(void);
extern void arch_enable_nonboot_cpus_end(void);

void smp_setup_processor_id(void);

int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par,
      bool phys);


int smpcfd_prepare_cpu(unsigned int cpu);
int smpcfd_dead_cpu(unsigned int cpu);
int smpcfd_dying_cpu(unsigned int cpu);
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu.h" 2
# 71 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu.h"
extern void *pcpu_base_addr;
extern const unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;

};

struct pcpu_alloc_info {
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern const char * const pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);



extern int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) pcpu_page_first_chunk(size_t reserved_size,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn,
    pcpu_fc_populate_pte_fn_t populate_pte_fn);


extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr);
extern bool is_kernel_percpu_address(unsigned long addr);





extern void *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp);
extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timerqueue.h" 1








struct timerqueue_node {
 struct rb_node node;
 ktime_t expires;
};

struct timerqueue_head {
 struct rb_root head;
 struct timerqueue_node *next;
};


extern bool timerqueue_add(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern bool timerqueue_del(struct timerqueue_head *head,
      struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/timerqueue.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function))
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 return head->next;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void timerqueue_init_head(struct timerqueue_head *head)
{
 head->head = (struct rb_root) { ((void *)0), };
 head->next = ((void *)0);
}
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h" 2

struct hrtimer_clock_base;
struct hrtimer_cpu_base;




enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x0,
 HRTIMER_MODE_REL = 0x1,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_ABS_PINNED = 0x02,
 HRTIMER_MODE_REL_PINNED = 0x03,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
# 93 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
struct hrtimer {
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 u8 state;
 u8 is_rel;
};
# 109 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
struct hrtimer_sleeper {
 struct hrtimer timer;
 struct task_struct *task;
};
# 130 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
struct hrtimer_clock_base {
 struct hrtimer_cpu_base *cpu_base;
 int index;
 clockid_t clockid;
 struct timerqueue_head active;
 ktime_t (*get_time)(void);
 ktime_t offset;
} __attribute__((__aligned__(64)));

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_MAX_CLOCK_BASES,
};
# 174 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
 raw_spinlock_t lock;
 seqcount_t seq;
 struct hrtimer *running;
 unsigned int cpu;
 unsigned int active_bases;
 unsigned int clock_was_set_seq;
 bool migration_enabled;
 bool nohz_active;

 unsigned int in_hrtirq : 1,
     hres_active : 1,
     hang_detected : 1;
 ktime_t expires_next;
 struct hrtimer *next_timer;
 unsigned int nr_events;
 unsigned int nr_retries;
 unsigned int nr_hangs;
 unsigned int max_hang_time;

 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];
} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 do { bool __cond = !(!(sizeof(struct hrtimer_clock_base) > 64)); extern void __compiletime_assert_35(void) ; if (__cond) __compiletime_assert_35(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, u64 delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires = tv64;
 timer->_softexpires = tv64;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ((timer->node.expires) + (ns));
 timer->_softexpires = ((timer->_softexpires) + (ns));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_expires(const struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_softexpires(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_tv64(const struct hrtimer *timer)
{
 return timer->node.expires;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 hrtimer_get_softexpires_tv64(const struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 hrtimer_get_expires_ns(const struct hrtimer *timer)
{
 return (timer->node.expires);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_expires_remaining(const struct hrtimer *timer)
{
 return ((timer->node.expires) - (timer->base->get_time()));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return timer->base->cpu_base->hres_active;
}
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
extern void clock_was_set_delayed(void);

extern unsigned int hrtimer_resolution;
# 310 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t
__hrtimer_expires_remaining_adjusted(const struct hrtimer *timer, ktime_t now)
{
 ktime_t rem = ((timer->node.expires) - (now));





 if (0 && timer->is_rel)
  rem -= hrtimer_resolution;
 return rem;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t
hrtimer_expires_remaining_adjusted(const struct hrtimer *timer)
{
 return __hrtimer_expires_remaining_adjusted(timer,
          timer->base->get_time());
}

extern void clock_was_set(void);

extern void timerfd_clock_was_set(void);



extern void hrtimers_resume(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern void hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
       u64 range_ns, const enum hrtimer_mode mode);
# 374 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_start(struct hrtimer *timer, ktime_t tim,
     const enum hrtimer_mode mode)
{
 hrtimer_start_range_ns(timer, tim, 0, mode);
}

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 u64 delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = (((hard) - (soft)));
 hrtimer_start_range_ns(timer, soft, delta, mode);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hrtimer_restart(struct hrtimer *timer)
{
 hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t __hrtimer_get_remaining(const struct hrtimer *timer, bool adjust);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ktime_t hrtimer_get_remaining(const struct hrtimer *timer)
{
 return __hrtimer_get_remaining(timer, false);
}

extern u64 hrtimer_get_next_event(void);
extern u64 hrtimer_next_event_without(const struct hrtimer *exclude);

extern bool hrtimer_active(const struct hrtimer *timer);
# 420 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool hrtimer_is_queued(struct hrtimer *timer)
{

 return !!(({ union { typeof(timer->state) __val; char __c[1]; } __u; if (1) __read_once_size(&(timer->state), __u.__c, sizeof(timer->state)); else __read_once_size_nocheck(&(timer->state), __u.__c, sizeof(timer->state)); do { } while (0); __u.__val; }) & 0x01);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->base->cpu_base->running == timer;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);
# 455 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hrtimer.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}



extern int nanosleep_copyout(struct restart_block *, struct timespec *);
extern long hrtimer_nanosleep(const struct timespec *rqtp,
         const enum hrtimer_mode mode,
         const clockid_t clockid);

extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,
     struct task_struct *tsk);

extern int schedule_hrtimeout_range(ktime_t *expires, u64 delta,
      const enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
       u64 delta,
       const enum hrtimer_mode mode,
       int clock);
extern int schedule_hrtimeout(ktime_t *expires, const enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) hrtimers_init(void);


extern void sysrq_timer_list_show(void);

int hrtimers_prepare_cpu(unsigned int cpu);

int hrtimers_dead_cpu(unsigned int cpu);
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seccomp.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/seccomp.h" 1
# 56 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/seccomp.h"
struct seccomp_data {
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seccomp.h" 2








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/seccomp.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/unistd.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/unistd.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/unistd.h" 2
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/unistd.h"
# 1 "./arch/x86/include/generated/uapi/asm/unistd_64.h" 1
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/unistd.h" 2
# 1 "./arch/x86/include/generated/asm/unistd_64_x32.h" 1
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/unistd.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/seccomp.h" 2






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ia32_unistd.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ia32_unistd.h"
# 1 "./arch/x86/include/generated/asm/unistd_32_ia32.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/ia32_unistd.h" 2
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/seccomp.h" 2






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/seccomp.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/seccomp.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/unistd.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/seccomp.h" 2
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/seccomp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) const int *get_compat_mode1_syscalls(void)
{
 static const int mode1_syscalls_32[] = {
  3, 4,
  1, 119,
  0,
 };
 return mode1_syscalls_32;
}
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/seccomp.h" 2
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seccomp.h" 2

struct seccomp_filter;
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seccomp.h"
struct seccomp {
 int mode;
 struct seccomp_filter *filter;
};


extern int __secure_computing(const struct seccomp_data *sd);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int secure_computing(const struct seccomp_data *sd)
{
 if (__builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 8)), 0))
  return __secure_computing(sd);
 return 0;
}




extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, char *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
# 83 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seccomp.h"
extern void put_seccomp_filter(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
# 100 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/seccomp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long seccomp_get_filter(struct task_struct *task,
          unsigned long n, void *data)
{
 return -22;
}
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/resource.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/resource.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/resource.h"
struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
 __kernel_long_t ru_maxrss;
 __kernel_long_t ru_ixrss;
 __kernel_long_t ru_idrss;
 __kernel_long_t ru_isrss;
 __kernel_long_t ru_minflt;
 __kernel_long_t ru_majflt;
 __kernel_long_t ru_nswap;
 __kernel_long_t ru_inblock;
 __kernel_long_t ru_oublock;
 __kernel_long_t ru_msgsnd;
 __kernel_long_t ru_msgrcv;
 __kernel_long_t ru_nsignals;
 __kernel_long_t ru_nvcsw;
 __kernel_long_t ru_nivcsw;
};

struct rlimit {
 __kernel_ulong_t rlim_cur;
 __kernel_ulong_t rlim_max;
};



struct rlimit64 {
 __u64 rlim_cur;
 __u64 rlim_max;
};
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/resource.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/resource.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/resource.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/resource.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/resource.h" 2
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/resource.h" 2
# 79 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/resource.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/resource.h" 2


struct task_struct;

void getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/latencytop.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/latencytop.h"
struct task_struct;
# 46 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/latencytop.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_all_latency_tracing(struct task_struct *p)
{
}
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/prio.h" 1
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/prio.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long nice_to_rlimit(long nice)
{
 return (19 - nice + 1);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) long rlimit_to_nice(long prio)
{
 return (19 - prio + 1);
}
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/signal_types.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/signal_types.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/signal.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/signal.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/signal.h"
typedef unsigned long old_sigset_t;

typedef struct {
 unsigned long sig[(64 / 64)];
} sigset_t;
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/signal.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/signal.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/signal.h"
struct siginfo;
# 94 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/signal.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/signal-defs.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 95 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/signal.h" 2
# 128 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/signal.h"
typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;
} stack_t;
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/signal.h" 2

extern void do_signal(struct pt_regs *regs);
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/signal.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/siginfo.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/siginfo.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/siginfo.h" 1







typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[((128 - (4 * sizeof(int))) / sizeof(int))];


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
  } _kill;


  struct {
   __kernel_timer_t _tid;
   int _overrun;
   char _pad[sizeof( __kernel_uid32_t) - sizeof(int)];
   sigval_t _sigval;
   int _sys_private;
  } _timer;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   sigval_t _sigval;
  } _rt;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   int _status;
   __kernel_clock_t _utime;
   __kernel_clock_t _stime;
  } _sigchld;


  struct {
   void *_addr;



   short _addr_lsb;
   union {

    struct {
     void *_lower;
     void *_upper;
    } _addr_bnd;

    __u32 _pkey;
   };
  } _sigfault;


  struct {
   long _band;
   int _fd;
  } _sigpoll;


  struct {
   void *_call_addr;
   int _syscall;
   unsigned int _arch;
  } _sigsys;
 } _sifields;
} siginfo_t;
# 281 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/siginfo.h"
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/siginfo.h" 2
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/signal.h" 2
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/signal_types.h" 2





struct sigqueue {
 struct list_head list;
 int flags;
 siginfo_t info;
 struct user_struct *user;
};




struct sigpending {
 struct list_head list;
 sigset_t signal;
};

struct sigaction {

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

struct k_sigaction {
 struct sigaction sa;



};
# 61 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/signal_types.h"
struct ksignal {
 struct k_sigaction ka;
 siginfo_t info;
 int sig;
};
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types_task.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types_task.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/tlbbatch.h" 1






struct arch_tlbflush_unmap_batch {




 struct cpumask cpumask;
};
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types_task.h" 2
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types_task.h"
struct vmacache {
 u64 seqnum;
 struct vm_area_struct *vmas[(1U << 2)];
};

enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 MM_SHMEMPAGES,
 NR_MM_COUNTERS
};




struct task_rss_stat {
 int events;
 int count[NR_MM_COUNTERS];
};


struct mm_rss_stat {
 atomic_long_t count[NR_MM_COUNTERS];
};

struct page_frag {
 struct page *page;

 __u32 offset;
 __u32 size;




};


struct tlbflush_unmap_batch {
# 81 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types_task.h"
 struct arch_tlbflush_unmap_batch arch;


 bool flush_required;






 bool writable;

};
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/task_io_accounting.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/task_io_accounting.h"
struct task_io_accounting {


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;

 u64 syscfs;







 u64 read_bytes;





 u64 write_bytes;
# 46 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/task_io_accounting.h"
 u64 cancelled_write_bytes;

};
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h" 2


struct audit_context;
struct backing_dev_info;
struct bio_list;
struct blk_plug;
struct cfs_rq;
struct fs_struct;
struct futex_pi_state;
struct io_context;
struct mempolicy;
struct nameidata;
struct nsproxy;
struct perf_event_context;
struct pid_namespace;
struct pipe_inode_info;
struct rcu_node;
struct reclaim_state;
struct robust_list_head;
struct sched_attr;
struct sched_param;
struct seq_file;
struct sighand_struct;
struct signal_struct;
struct task_delay_info;
struct task_group;
# 209 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
enum task_event {
 PUT_PREV_TASK = 0,
 PICK_NEXT_TASK = 1,
 TASK_WAKE = 2,
 TASK_MIGRATE = 3,
 TASK_UPDATE = 4,
 IRQ_UPDATE = 5,
};

extern cpumask_var_t cpu_isolated_map;

extern void scheduler_tick(void);



extern long schedule_timeout(long timeout);
extern long schedule_timeout_interruptible(long timeout);
extern long schedule_timeout_killable(long timeout);
extern long schedule_timeout_uninterruptible(long timeout);
extern long schedule_timeout_idle(long timeout);
           void schedule(void);
extern void schedule_preempt_disabled(void);

extern int io_schedule_prepare(void);
extern void io_schedule_finish(int token);
extern long io_schedule_timeout(long timeout);
extern void io_schedule(void);
# 246 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
struct prev_cputime {

 u64 utime;
 u64 stime;
 raw_spinlock_t lock;

};
# 264 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
struct task_cputime {
 u64 utime;
 u64 stime;
 unsigned long long sum_exec_runtime;
};






enum vtime_state {

 VTIME_INACTIVE = 0,

 VTIME_USER,

 VTIME_SYS,
};

struct vtime {
 seqcount_t seqcount;
 unsigned long long starttime;
 enum vtime_state state;
 u64 utime;
 u64 stime;
 u64 gtime;
};

struct sched_info {




 unsigned long pcount;


 unsigned long long run_delay;




 unsigned long long last_arrival;


 unsigned long long last_queued;


};
# 324 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
struct load_weight {
 unsigned long weight;
 u32 inv_weight;
};
# 351 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
struct util_est {
 unsigned int enqueued;
 unsigned int ewma;

};
# 409 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
struct sched_avg {
 u64 last_update_time;
 u64 load_sum;
 u32 util_sum;
 u32 period_contrib;
 unsigned long load_avg;
 unsigned long util_avg;
 struct util_est util_est;
};

struct sched_statistics {

 u64 wait_start;
 u64 wait_max;
 u64 wait_count;
 u64 wait_sum;
 u64 iowait_count;
 u64 iowait_sum;

 u64 sleep_start;
 u64 sleep_max;
 s64 sum_sleep_runtime;

 u64 block_start;
 u64 block_max;
 u64 exec_max;
 u64 slice_max;

 u64 nr_migrations_cold;
 u64 nr_failed_migrations_affine;
 u64 nr_failed_migrations_running;
 u64 nr_failed_migrations_hot;
 u64 nr_forced_migrations;

 u64 nr_wakeups;
 u64 nr_wakeups_sync;
 u64 nr_wakeups_migrate;
 u64 nr_wakeups_local;
 u64 nr_wakeups_remote;
 u64 nr_wakeups_affine;
 u64 nr_wakeups_affine_attempts;
 u64 nr_wakeups_passive;
 u64 nr_wakeups_idle;

};

struct sched_entity {

 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;

 struct sched_statistics statistics;


 int depth;
 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;
# 487 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 struct sched_avg avg __attribute__((__aligned__((1 << (6)))));

};
# 526 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
struct sched_rt_entity {
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;
 unsigned short on_rq;
 unsigned short on_list;

 struct sched_rt_entity *back;







} ;

struct sched_dl_entity {
 struct rb_node rb_node;






 u64 dl_runtime;
 u64 dl_deadline;
 u64 dl_period;
 u64 dl_bw;
 u64 dl_density;






 s64 runtime;
 u64 deadline;
 unsigned int flags;
# 588 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 int dl_throttled;
 int dl_boosted;
 int dl_yielded;
 int dl_non_contending;





 struct hrtimer dl_timer;
# 606 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 struct hrtimer inactive_timer;
};

union rcu_special {
 struct {
  u8 blocked;
  u8 need_qs;
  u8 exp_need_qs;


  u8 pad;
 } b;
 u32 s;
};

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};

struct wake_q_node {
 struct wake_q_node *next;
};

struct task_struct {





 struct thread_info thread_info;


 volatile long state;







 void *stack;
 atomic_t usage;

 unsigned int flags;
 unsigned int ptrace;


 struct llist_node wake_entry;
 int on_cpu;


 unsigned int cpu;

 unsigned int wakee_flips;
 unsigned long wakee_flip_decay_ts;
 struct task_struct *last_wakee;

 int wake_cpu;

 int on_rq;

 int prio;
 int static_prio;
 int normal_prio;
 unsigned int rt_priority;

 const struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;
# 689 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 struct task_group *sched_task_group;

 struct sched_dl_entity dl;
# 702 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 unsigned int policy;
 int nr_cpus_allowed;
 cpumask_t cpus_allowed;


 int rcu_read_lock_nesting;
 union rcu_special rcu_read_unlock_special;
 struct list_head rcu_node_entry;
 struct rcu_node *rcu_blocked_node;



 unsigned long rcu_tasks_nvcsw;
 u8 rcu_tasks_holdout;
 u8 rcu_tasks_idx;
 int rcu_tasks_idle_cpu;
 struct list_head rcu_tasks_holdout_list;


 struct sched_info sched_info;

 struct list_head tasks;

 struct plist_node pushable_tasks;
 struct rb_node pushable_dl_tasks;


 struct mm_struct *mm;
 struct mm_struct *active_mm;


 struct vmacache vmacache;


 struct task_rss_stat rss_stat;

 int exit_state;
 int exit_code;
 int exit_signal;

 int pdeath_signal;

 unsigned long jobctl;


 unsigned int personality;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;
 unsigned sched_migrated:1;
 unsigned sched_remote_wakeup:1;

 unsigned sched_psi_wake_requeue:1;



 unsigned :0;




 unsigned in_execve:1;
 unsigned in_iowait:1;

 unsigned restore_sigmask:1;


 unsigned memcg_may_oom:1;

 unsigned memcg_kmem_skip_account:1;







 unsigned no_cgroup_migration:1;


 unsigned long atomic_flags;

 struct restart_block restart_block;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;
# 801 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 struct task_struct *real_parent;


 struct task_struct *parent;




 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;







 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid_link pids[PIDTYPE_MAX];
 struct list_head thread_group;
 struct list_head thread_node;

 struct completion *vfork_done;


 int *set_child_tid;


 int *clear_child_tid;

 u64 utime;
 u64 stime;




 u64 gtime;

 u64 *time_in_state;
 unsigned int max_state;

 struct prev_cputime prev_cputime;
# 855 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 unsigned long nvcsw;
 unsigned long nivcsw;


 u64 start_time;


 u64 real_start_time;


 unsigned long min_flt;
 unsigned long maj_flt;


 struct task_cputime cputime_expires;
 struct list_head cpu_timers[3];





 const struct cred *ptracer_cred;


 const struct cred *real_cred;


 const struct cred *cred;
# 891 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 char comm[16];

 struct nameidata *nameidata;






 unsigned long last_switch_count;


 struct fs_struct *fs;


 struct files_struct *files;


 struct nsproxy *nsproxy;


 struct signal_struct *signal;
 struct sighand_struct *sighand;
 sigset_t blocked;
 sigset_t real_blocked;

 sigset_t saved_sigmask;
 struct sigpending pending;
 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 unsigned int sas_ss_flags;

 struct callback_head *task_works;

 struct audit_context *audit_context;

 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;


 u64 parent_exec_id;
 u64 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;

 struct wake_q_node wake_q;



 struct rb_root_cached pi_waiters;

 struct task_struct *pi_top_task;

 struct rt_mutex_waiter *pi_blocked_on;
# 998 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;


 unsigned long ptrace_message;
 siginfo_t *last_siginfo;

 struct task_io_accounting ioac;


 unsigned int psi_flags;



 u64 acct_rss_mem1;

 u64 acct_vm_mem1;

 u64 acct_timexpd;



 nodemask_t mems_allowed;

 seqcount_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;






 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;
 struct mutex futex_exit_mutex;
 unsigned int futex_state;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;


 unsigned long preempt_disable_ip;
# 1117 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 struct tlbflush_unmap_batch tlb_ubc;

 struct callback_head rcu;


 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;
# 1138 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 int nr_dirtied;
 int nr_dirtied_pause;

 unsigned long dirty_paused_when;
# 1151 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 u64 timer_slack_ns;
 u64 default_timer_slack_ns;
# 1180 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 unsigned long trace;


 unsigned long trace_recursion;
# 1209 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 struct mem_cgroup *memcg_in_oom;
 gfp_t memcg_oom_gfp_mask;
 int memcg_oom_order;


 unsigned int memcg_nr_pages_over_high;



 struct uprobe_task *utask;
# 1227 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 int pagefault_disabled;

 struct task_struct *oom_reaper_list;


 struct vm_struct *stack_vm_area;



 atomic_t stack_refcount;






 void *security;
# 1253 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
 struct thread_struct thread;







};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pid *task_pid(struct task_struct *task)
{
 return task->pids[PIDTYPE_PID].pid;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pid *task_tgid(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_PID].pid;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pid *task_pgrp(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_PGID].pid;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pid *task_session(struct task_struct *task)
{
 return task->group_leader->pids[PIDTYPE_SID].pid;
}
# 1299 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type, struct pid_namespace *ns);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_pid_nr(struct task_struct *tsk)
{
 return tsk->pid;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ((void *)0));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_tgid_nr(struct task_struct *tsk)
{
 return tsk->tgid;
}
# 1332 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pid_alive(const struct task_struct *p)
{
 return p->pids[PIDTYPE_PID].pid != ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ((void *)0));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, __PIDTYPE_TGID, ns);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, __PIDTYPE_TGID, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_ppid_nr_ns(const struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 rcu_read_lock();
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns(({ typeof(*(tsk->real_parent)) *________p1 = (typeof(*(tsk->real_parent)) *)({ union { typeof((tsk->real_parent)) __val; char __c[1]; } __u; if (1) __read_once_size(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); else __read_once_size_nocheck(&((tsk->real_parent)), __u.__c, sizeof((tsk->real_parent))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(tsk->real_parent)) *)(________p1)); }), ns);
 rcu_read_unlock();

 return pid;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_ppid_nr(const struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int __get_task_state(struct task_struct *tsk)
{
 unsigned int tsk_state = ({ union { typeof(tsk->state) __val; char __c[1]; } __u; if (1) __read_once_size(&(tsk->state), __u.__c, sizeof(tsk->state)); else __read_once_size_nocheck(&(tsk->state), __u.__c, sizeof(tsk->state)); do { } while (0); __u.__val; });
 unsigned int state = (tsk_state | tsk->exit_state) & (0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040);

 do { bool __cond = !(!(((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) == 0 || ((((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) - 1)) != 0))); extern void __compiletime_assert_36(void) ; if (__cond) __compiletime_assert_36(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 if (tsk_state == (0x0002 | 0x0400))
  state = ((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1);

 return fls(state);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) char __task_state_to_char(unsigned int state)
{
 static const char state_char[] = "RSDTtXZPI";

 do { bool __cond = !(!(1 + ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( __builtin_constant_p((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ? ( ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) < 2 ? 0 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 63) ? 63 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 62) ? 62 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 61) ? 61 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 60) ? 60 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 59) ? 59 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 58) ? 58 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 57) ? 57 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 56) ? 56 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 55) ? 55 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 54) ? 54 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 53) ? 53 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 52) ? 52 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 51) ? 51 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 50) ? 50 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 49) ? 49 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 48) ? 48 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 47) ? 47 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 46) ? 46 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 45) ? 45 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 44) ? 44 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 43) ? 43 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 42) ? 42 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 41) ? 41 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 40) ? 40 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 39) ? 39 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 38) ? 38 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 37) ? 37 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 36) ? 36 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 35) ? 35 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 34) ? 34 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 33) ? 33 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 32) ? 32 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 31) ? 31 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 30) ? 30 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 29) ? 29 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 28) ? 28 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 27) ? 27 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 26) ? 26 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 25) ? 25 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 24) ? 24 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 23) ? 23 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 22) ? 22 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 21) ? 21 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 20) ? 20 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 19) ? 19 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 18) ? 18 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 17) ? 17 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 16) ? 16 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 15) ? 15 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 14) ? 14 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 13) ? 13 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 12) ? 12 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 11) ? 11 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 10) ? 10 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 9) ? 9 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 8) ? 8 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 7) ? 7 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 6) ? 6 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 5) ? 5 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 4) ? 4 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 3) ? 3 : ((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) <= 4) ? __ilog2_u32((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) : __ilog2_u64((((0x0000 | 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040) + 1) << 1)) ) != sizeof(state_char) - 1)); extern void __compiletime_assert_37(void) ; if (__cond) __compiletime_assert_37(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 return state_char[state];
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) char task_state_to_char(struct task_struct *tsk)
{
 return __task_state_to_char(__get_task_state(tsk));
}
# 1430 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_global_init(struct task_struct *tsk)
{
 return task_tgid_nr(tsk) == 1;
}

extern struct pid *cad_pid;
# 1497 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_percpu_thread(void)
{

 return (get_current()->flags & 0x04000000) &&
  (get_current()->nr_cpus_allowed == 1);



}
# 1528 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool task_no_new_privs(struct task_struct *p) { return (__builtin_constant_p((0)) ? constant_test_bit((0), (&p->atomic_flags)) : variable_test_bit((0), (&p->atomic_flags))); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_set_no_new_privs(struct task_struct *p) { set_bit(0, &p->atomic_flags); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool task_spread_page(struct task_struct *p) { return (__builtin_constant_p((1)) ? constant_test_bit((1), (&p->atomic_flags)) : variable_test_bit((1), (&p->atomic_flags))); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_set_spread_page(struct task_struct *p) { set_bit(1, &p->atomic_flags); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_clear_spread_page(struct task_struct *p) { clear_bit(1, &p->atomic_flags); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool task_spread_slab(struct task_struct *p) { return (__builtin_constant_p((2)) ? constant_test_bit((2), (&p->atomic_flags)) : variable_test_bit((2), (&p->atomic_flags))); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_set_spread_slab(struct task_struct *p) { set_bit(2, &p->atomic_flags); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_clear_spread_slab(struct task_struct *p) { clear_bit(2, &p->atomic_flags); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool task_spec_ssb_disable(struct task_struct *p) { return (__builtin_constant_p((3)) ? constant_test_bit((3), (&p->atomic_flags)) : variable_test_bit((3), (&p->atomic_flags))); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_set_spec_ssb_disable(struct task_struct *p) { set_bit(3, &p->atomic_flags); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_clear_spec_ssb_disable(struct task_struct *p) { clear_bit(3, &p->atomic_flags); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool task_spec_ssb_force_disable(struct task_struct *p) { return (__builtin_constant_p((4)) ? constant_test_bit((4), (&p->atomic_flags)) : variable_test_bit((4), (&p->atomic_flags))); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_set_spec_ssb_force_disable(struct task_struct *p) { set_bit(4, &p->atomic_flags); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool task_spec_ib_disable(struct task_struct *p) { return (__builtin_constant_p((5)) ? constant_test_bit((5), (&p->atomic_flags)) : variable_test_bit((5), (&p->atomic_flags))); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_set_spec_ib_disable(struct task_struct *p) { set_bit(5, &p->atomic_flags); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_clear_spec_ib_disable(struct task_struct *p) { clear_bit(5, &p->atomic_flags); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool task_spec_ib_force_disable(struct task_struct *p) { return (__builtin_constant_p((6)) ? constant_test_bit((6), (&p->atomic_flags)) : variable_test_bit((6), (&p->atomic_flags))); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void task_set_spec_ib_force_disable(struct task_struct *p) { set_bit(6, &p->atomic_flags); }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
current_restore_flags(unsigned long orig_flags, unsigned long flags)
{
 get_current()->flags &= ~flags;
 get_current()->flags |= orig_flags & flags;
}

extern int cpuset_cpumask_can_shrink(const struct cpumask *cur, const struct cpumask *trial);
extern int task_can_attach(struct task_struct *p, const struct cpumask *cs_cpus_allowed);

extern void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask);
extern int set_cpus_allowed_ptr(struct task_struct *p, const struct cpumask *new_mask);
# 1581 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
extern int yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio(const struct task_struct *p);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) int task_nice(const struct task_struct *p)
{
 return (((p)->static_prio) - (100 + (19 - -20 + 1) / 2));
}

extern int can_nice(const struct task_struct *p, const int nice);
extern int task_curr(const struct task_struct *p);
extern int idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
extern int sched_setattr(struct task_struct *, const struct sched_attr *);
extern struct task_struct *idle_task(int cpu);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_idle_task(const struct task_struct *p)
{
 return !!(p->flags & 0x00000002);
}

extern struct task_struct *curr_task(int cpu);
extern void ia64_set_curr_task(int cpu, struct task_struct *p);

void yield(void);

union thread_union {



 unsigned long stack[(((1UL) << 12) << (2 + 0))/sizeof(long)];
};


static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct thread_info *task_thread_info(struct task_struct *task)
{
 return &task->thread_info;
}
# 1647 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr, struct pid_namespace *ns);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);


extern void kick_process(struct task_struct *tsk);




extern void __set_task_comm(struct task_struct *tsk, const char *from, bool exec);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_task_comm(struct task_struct *tsk, const char *from)
{
 __set_task_comm(tsk, from, false);
}

extern char *__get_task_comm(char *to, size_t len, struct task_struct *tsk);






void scheduler_ipi(void);
extern unsigned long wait_task_inactive(struct task_struct *, long match_state);
# 1688 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void update_tsk_thread_flag(struct task_struct *tsk, int flag,
       bool value)
{
 update_ti_thread_flag(task_thread_info(tsk), flag, value);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(task_thread_info(tsk), flag);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,3);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,3);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,3)), 0);
}
# 1744 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int _cond_resched(void) { return 0; }







extern int __cond_resched_lock(spinlock_t *lock);






extern int __cond_resched_softirq(void);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cond_resched_rcu(void)
{





}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int spin_needbreak(spinlock_t *lock)
{

 return spin_is_contended(lock);



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(((struct thread_info *)get_current()), 3)), 0);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int task_cpu(const struct task_struct *p)
{

 return p->cpu;



}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
# 1835 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched.h"
extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/utsname.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kref.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kref.h"
struct kref {
 refcount_t refcount;
};







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kref_init(struct kref *kref)
{
 refcount_set(&kref->refcount, 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int kref_read(const struct kref *kref)
{
 return refcount_read(&kref->refcount);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kref_get(struct kref *kref)
{
 refcount_inc(&kref->refcount);
}
# 67 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kref.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 if (refcount_dec_and_test(&kref->refcount)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 if (refcount_dec_and_mutex_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kref_put_lock(struct kref *kref,
    void (*release)(struct kref *kref),
    spinlock_t *lock)
{
 if (refcount_dec_and_lock(&kref->refcount, lock)) {
  release(kref);
  return 1;
 }
 return 0;
}
# 114 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kref.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kref_get_unless_zero(struct kref *kref)
{
 return refcount_inc_not_zero(&kref->refcount);
}
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/utsname.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nsproxy.h" 1







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct cgroup_namespace;
struct fs_struct;
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nsproxy.h"
struct nsproxy {
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;
 struct cgroup_namespace *cgroup_ns;
};
extern struct nsproxy init_nsproxy;
# 68 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nsproxy.h"
int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) nsproxy_cache_init(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void put_nsproxy(struct nsproxy *ns)
{
 if (atomic_dec_and_test(&ns->count)) {
  free_nsproxy(ns);
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void get_nsproxy(struct nsproxy *ns)
{
 atomic_inc(&ns->count);
}
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/utsname.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ns_common.h" 1




struct proc_ns_operations;

struct ns_common {
 atomic_long_t stashed;
 const struct proc_ns_operations *ops;
 unsigned int inum;
};
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/utsname.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/utsname.h" 1






struct oldold_utsname {
 char sysname[9];
 char nodename[9];
 char release[9];
 char version[9];
 char machine[9];
};



struct old_utsname {
 char sysname[65];
 char nodename[65];
 char release[65];
 char version[65];
 char machine[65];
};

struct new_utsname {
 char sysname[64 + 1];
 char nodename[64 + 1];
 char release[64 + 1];
 char version[64 + 1];
 char machine[64 + 1];
 char domainname[64 + 1];
};
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/utsname.h" 2

enum uts_proc {
 UTS_PROC_OSTYPE,
 UTS_PROC_OSRELEASE,
 UTS_PROC_VERSION,
 UTS_PROC_HOSTNAME,
 UTS_PROC_DOMAINNAME,
};

struct user_namespace;
extern struct user_namespace init_user_ns;

struct uts_namespace {
 struct kref kref;
 struct new_utsname name;
 struct user_namespace *user_ns;
 struct ucounts *ucounts;
 struct ns_common ns;
} ;
extern struct uts_namespace init_uts_ns;
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/utsname.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void get_uts_ns(struct uts_namespace *ns)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void put_uts_ns(struct uts_namespace *ns)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct uts_namespace *copy_utsname(unsigned long flags,
 struct user_namespace *user_ns, struct uts_namespace *old_ns)
{
 if (flags & 0x04000000)
  return ERR_PTR(-22);

 return old_ns;
}



extern void uts_proc_notify(enum uts_proc proc);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct new_utsname *utsname(void)
{
 return &get_current()->nsproxy->uts_ns->name;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct new_utsname *init_utsname(void)
{
 return &init_uts_ns.name;
}

extern struct rw_semaphore uts_sem;
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h" 1
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/node.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/node.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ioport.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ioport.h"
struct resource {
 resource_size_t start;
 resource_size_t end;
 const char *name;
 unsigned long flags;
 unsigned long desc;
 struct resource *parent, *sibling, *child;
};
# 127 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ioport.h"
enum {
 IORES_DESC_NONE = 0,
 IORES_DESC_CRASH_KERNEL = 1,
 IORES_DESC_ACPI_TABLES = 2,
 IORES_DESC_ACPI_NV_STORAGE = 3,
 IORES_DESC_PERSISTENT_MEMORY = 4,
 IORES_DESC_PERSISTENT_MEMORY_LEGACY = 5,
 IORES_DESC_DEVICE_PRIVATE_MEMORY = 6,
 IORES_DESC_DEVICE_PUBLIC_MEMORY = 7,
};
# 169 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ioport.h"
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *new);
extern int request_resource(struct resource *root, struct resource *new);
extern int release_resource(struct resource *new);
void release_child_resources(struct resource *new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        const char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *new);
extern int insert_resource(struct resource *parent, struct resource *new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *new);
extern int remove_resource(struct resource *old);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             const struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) resource_size_t resource_size(const struct resource *res)
{
 return res->end - res->start + 1;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long resource_type(const struct resource *res)
{
 return res->flags & 0x00001f00;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long resource_ext_type(const struct resource *res)
{
 return res->flags & 0x01000000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool resource_contains(struct resource *r1, struct resource *r2)
{
 if (resource_type(r1) != resource_type(r2))
  return false;
 if (r1->flags & 0x20000000 || r2->flags & 0x20000000)
  return false;
 return r1->start <= r2->start && r1->end >= r2->end;
}
# 228 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ioport.h"
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     const char *name, int flags);





extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);






struct device;

extern int devm_request_resource(struct device *dev, struct resource *root,
     struct resource *new);
extern void devm_release_resource(struct device *dev, struct resource *new);






extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, const char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern int iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));
extern int
walk_system_ram_res(u64 start, u64 end, void *arg,
      int (*func)(u64, u64, void *));
extern int
walk_iomem_res_desc(unsigned long desc, unsigned long flags, u64 start, u64 end,
      void *arg, int (*func)(u64, u64, void *));


static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return (r1->start <= r2->end && r1->end >= r2->start);
}
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h" 1
# 61 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool radix_tree_is_internal_node(void *ptr)
{
 return ((unsigned long)ptr & 3UL) ==
    1UL;
}
# 93 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
struct radix_tree_node {
 unsigned char shift;
 unsigned char offset;
 unsigned char count;
 unsigned char exceptional;
 struct radix_tree_node *parent;
 struct radix_tree_root *root;
 union {
  struct list_head private_list;
  struct callback_head callback_head;
 };
 void *slots[(1UL << (0 ? 4 : 6))];
 unsigned long tags[3][(((1UL << (0 ? 4 : 6)) + 64 - 1) / 64)];
};





struct radix_tree_root {
 gfp_t gfp_mask;
 struct radix_tree_node *rnode;
};
# 131 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool radix_tree_empty(const struct radix_tree_root *root)
{
 return root->rnode == ((void *)0);
}
# 152 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
struct radix_tree_iter {
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;
 struct radix_tree_node *node;



};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int iter_shift(const struct radix_tree_iter *iter)
{



 return 0;

}
# 236 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot(void **slot)
{
 return ({ typeof(*(*slot)) *________p1 = (typeof(*(*slot)) *)({ union { typeof((*slot)) __val; char __c[1]; } __u; if (1) __read_once_size(&((*slot)), __u.__c, sizeof((*slot))); else __read_once_size_nocheck(&((*slot)), __u.__c, sizeof((*slot))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(*slot)) *)(________p1)); });
}
# 250 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *radix_tree_deref_slot_protected(void **slot,
       spinlock_t *treelock)
{
 return ({ do { } while (0); ; ((typeof(*(*slot)) *)((*slot))); });
}
# 263 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!(radix_tree_is_internal_node(arg)), 0);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int radix_tree_exceptional_entry(void *arg)
{

 return (unsigned long)arg & 2;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 3UL), 0);
}

int __radix_tree_create(struct radix_tree_root *, unsigned long index,
   unsigned order, struct radix_tree_node **nodep,
   void ***slotp);
int __radix_tree_insert(struct radix_tree_root *, unsigned long index,
   unsigned order, void *);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int radix_tree_insert(struct radix_tree_root *root,
   unsigned long index, void *entry)
{
 return __radix_tree_insert(root, index, 0, entry);
}
void *__radix_tree_lookup(const struct radix_tree_root *, unsigned long index,
     struct radix_tree_node **nodep, void ***slotp);
void *radix_tree_lookup(const struct radix_tree_root *, unsigned long);
void **radix_tree_lookup_slot(const struct radix_tree_root *,
     unsigned long index);
typedef void (*radix_tree_update_node_t)(struct radix_tree_node *, void *);
void __radix_tree_replace(struct radix_tree_root *, struct radix_tree_node *,
     void **slot, void *entry,
     radix_tree_update_node_t update_node, void *private);
void radix_tree_iter_replace(struct radix_tree_root *,
  const struct radix_tree_iter *, void **slot, void *entry);
void radix_tree_replace_slot(struct radix_tree_root *,
        void **slot, void *entry);
void __radix_tree_delete_node(struct radix_tree_root *,
         struct radix_tree_node *,
         radix_tree_update_node_t update_node,
         void *private);
void radix_tree_iter_delete(struct radix_tree_root *,
   struct radix_tree_iter *iter, void **slot);
void *radix_tree_delete_item(struct radix_tree_root *, unsigned long, void *);
void *radix_tree_delete(struct radix_tree_root *, unsigned long);
void radix_tree_clear_tags(struct radix_tree_root *, struct radix_tree_node *,
      void **slot);
unsigned int radix_tree_gang_lookup(const struct radix_tree_root *,
   void **results, unsigned long first_index,
   unsigned int max_items);
unsigned int radix_tree_gang_lookup_slot(const struct radix_tree_root *,
   void ***results, unsigned long *indices,
   unsigned long first_index, unsigned int max_items);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload_order(gfp_t gfp_mask, int order);
void radix_tree_init(void);
void *radix_tree_tag_set(struct radix_tree_root *,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct radix_tree_root *,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(const struct radix_tree_root *,
   unsigned long index, unsigned int tag);
void radix_tree_iter_tag_set(struct radix_tree_root *,
  const struct radix_tree_iter *iter, unsigned int tag);
void radix_tree_iter_tag_clear(struct radix_tree_root *,
  const struct radix_tree_iter *iter, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag(const struct radix_tree_root *,
  void **results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
unsigned int radix_tree_gang_lookup_tag_slot(const struct radix_tree_root *,
  void ***results, unsigned long first_index,
  unsigned int max_items, unsigned int tag);
int radix_tree_tagged(const struct radix_tree_root *, unsigned int tag);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void radix_tree_preload_end(void)
{
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

int radix_tree_split_preload(unsigned old_order, unsigned new_order, gfp_t);
int radix_tree_split(struct radix_tree_root *, unsigned long index,
   unsigned new_order);
int radix_tree_join(struct radix_tree_root *, unsigned long index,
   unsigned new_order, void *);

void **idr_get_free_cmn(struct radix_tree_root *root,
         struct radix_tree_iter *iter, gfp_t gfp,
         unsigned long max);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void **idr_get_free(struct radix_tree_root *root,
     struct radix_tree_iter *iter,
     gfp_t gfp,
     int end)
{
 return idr_get_free_cmn(root, iter, gfp, end > 0 ? end - 1 : ((int)(~0U>>1)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void **idr_get_free_ext(struct radix_tree_root *root,
         struct radix_tree_iter *iter,
         gfp_t gfp,
         unsigned long end)
{
 return idr_get_free_cmn(root, iter, gfp, end - 1);
}

enum {
 RADIX_TREE_ITER_TAG_MASK = 0x0f,
 RADIX_TREE_ITER_TAGGED = 0x10,
 RADIX_TREE_ITER_CONTIG = 0x20,
};
# 393 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
# 404 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
 iter->index = 0;
 iter->next_index = start;
 return ((void *)0);
}
# 422 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
void **radix_tree_next_chunk(const struct radix_tree_root *,
        struct radix_tree_iter *iter, unsigned flags);
# 435 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void **
radix_tree_iter_lookup(const struct radix_tree_root *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, RADIX_TREE_ITER_CONTIG);
}
# 453 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void **
radix_tree_iter_find(const struct radix_tree_root *root,
   struct radix_tree_iter *iter, unsigned long index)
{
 radix_tree_iter_init(iter, index);
 return radix_tree_next_chunk(root, iter, 0);
}
# 470 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function))
void **radix_tree_iter_retry(struct radix_tree_iter *iter)
{
 iter->next_index = iter->index;
 iter->tags = 0;
 return ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long
__radix_tree_iter_add(struct radix_tree_iter *iter, unsigned long slots)
{
 return iter->index + (slots << iter_shift(iter));
}
# 494 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
void ** radix_tree_iter_resume(void **slot,
     struct radix_tree_iter *iter);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) long
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return (iter->next_index - iter->index) >> iter_shift(iter);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void **__radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 return slot;
}
# 540 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/radix-tree.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void **radix_tree_next_slot(void **slot,
    struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & RADIX_TREE_ITER_TAGGED) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(!iter->tags), 0))
   return ((void *)0);
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index = __radix_tree_iter_add(iter, 1);
   slot++;
   goto found;
  }
  if (!(flags & RADIX_TREE_ITER_CONTIG)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset++;
   iter->index = __radix_tree_iter_add(iter, offset);
   slot += offset;
   goto found;
  }
 } else {
  long count = radix_tree_chunk_size(iter);

  while (--count > 0) {
   slot++;
   iter->index = __radix_tree_iter_add(iter, 1);

   if (__builtin_expect(!!(*slot), 1))
    goto found;
   if (flags & RADIX_TREE_ITER_CONTIG) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return ((void *)0);

 found:
 if (__builtin_expect(!!(radix_tree_is_internal_node(({ typeof(*slot) ________p1 = ({ union { typeof(*slot) __val; char __c[1]; } __u; if (1) __read_once_size(&(*slot), __u.__c, sizeof(*slot)); else __read_once_size_nocheck(&(*slot), __u.__c, sizeof(*slot)); do { } while (0); __u.__val; }); ((typeof(**slot) *)(________p1)); }))), 0))
  return __radix_tree_next_slot(slot, iter, flags);
 return slot;
}
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pageblock-flags.h" 1
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pageblock-flags.h"
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 PB_migrate_skip,





 NR_PAGEBLOCK_BITS
};
# 66 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pageblock-flags.h"
struct page;

unsigned long get_pfnblock_flags_mask(struct page *page,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);

void set_pfnblock_flags_mask(struct page *page,
    unsigned long flags,
    unsigned long pfn,
    unsigned long end_bitidx,
    unsigned long mask);
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/page-flags-layout.h" 1





# 1 "./include/generated/bounds.h" 1
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/page-flags-layout.h" 2
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h" 2
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
enum migratetype {
 MIGRATE_UNMOVABLE,
 MIGRATE_MOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_HIGHATOMIC = MIGRATE_PCPTYPES,
# 64 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 MIGRATE_TYPES
};


extern char * const migratetype_names[MIGRATE_TYPES];
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_migrate_movable(int mt)
{
 return false || mt == MIGRATE_MOVABLE;
}





extern int page_group_by_mobility_disabled;
# 96 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
struct free_area {
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;
};

struct pglist_data;
# 110 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
struct zone_padding {
 char x[0];
} __attribute__((__aligned__(1 << (6))));
# 132 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ZONE_LRU_BASE,
 NR_ZONE_INACTIVE_ANON = NR_ZONE_LRU_BASE,
 NR_ZONE_ACTIVE_ANON,
 NR_ZONE_INACTIVE_FILE,
 NR_ZONE_ACTIVE_FILE,
 NR_ZONE_UNEVICTABLE,
 NR_ZONE_WRITE_PENDING,
 NR_MLOCK,
 NR_PAGETABLE,
 NR_KERNEL_STACK_KB,




 NR_BOUNCE,

 NR_ZSPAGES,

 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };

enum node_stat_item {
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_SLAB_RECLAIMABLE,
 NR_SLAB_UNRECLAIMABLE,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 WORKINGSET_REFAULT,
 WORKINGSET_ACTIVATE,
 WORKINGSET_RESTORE,
 WORKINGSET_NODERECLAIM,
 NR_ANON_MAPPED,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_WRITEBACK_TEMP,
 NR_SHMEM,
 NR_SHMEM_THPS,
 NR_SHMEM_PMDMAPPED,
 NR_ANON_THPS,
 NR_UNSTABLE_NFS,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_DIRTIED,
 NR_WRITTEN,
 NR_KERNEL_MISC_RECLAIMABLE,
 NR_VM_NODE_STAT_ITEMS
};
# 204 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}

struct zone_reclaim_stat {
# 236 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 unsigned long recent_rotated[2];
 unsigned long recent_scanned[2];
};

struct lruvec {
 struct list_head lists[NR_LRU_LISTS];
 struct zone_reclaim_stat reclaim_stat;

 atomic_long_t inactive_age;

 unsigned long refaults;

 struct pglist_data *pgdat;

};
# 265 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};





struct per_cpu_pages {
 int count;
 int high;
 int batch;


 struct list_head lists[MIGRATE_PCPTYPES];
};

struct per_cpu_pageset {
 struct per_cpu_pages pcp;





 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];

};

struct per_cpu_nodestat {
 s8 stat_threshold;
 s8 vm_node_stat_diff[NR_VM_NODE_STAT_ITEMS];
};



enum zone_type {
# 326 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 ZONE_DMA,







 ZONE_DMA32,






 ZONE_NORMAL,
# 353 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 ZONE_MOVABLE,



 __MAX_NR_ZONES

};



struct zone {



 unsigned long watermark[NR_WMARK];

 unsigned long nr_reserved_highatomic;
# 380 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 long lowmem_reserve[4];




 struct pglist_data *zone_pgdat;
 struct per_cpu_pageset *pageset;
# 397 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 unsigned long zone_start_pfn;
# 440 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 unsigned long managed_pages;
 unsigned long spanned_pages;
 unsigned long present_pages;

 const char *name;
# 460 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 int initialized;


 struct zone_padding _pad1_;


 struct free_area free_area[11];


 unsigned long flags;


 spinlock_t lock;


 struct zone_padding _pad2_;






 unsigned long percpu_drift_mark;



 unsigned long compact_cached_free_pfn;

 unsigned long compact_cached_migrate_pfn[2];
# 497 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;




 bool compact_blockskip_flush;


 bool contiguous;

 struct zone_padding _pad3_;

 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 atomic_long_t vm_numa_stat[0];
} __attribute__((__aligned__(1 << (6))));

enum pgdat_flags {
 PGDAT_CONGESTED,


 PGDAT_DIRTY,



 PGDAT_WRITEBACK,


 PGDAT_RECLAIM_LOCKED,
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long zone_end_pfn(const struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool zone_spans_pfn(const struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool zone_is_initialized(struct zone *zone)
{
 return zone->initialized;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool zone_intersects(struct zone *zone,
  unsigned long start_pfn, unsigned long nr_pages)
{
 if (zone_is_empty(zone))
  return false;
 if (start_pfn >= zone_end_pfn(zone) ||
     start_pfn + nr_pages <= zone->zone_start_pfn)
  return false;

 return true;
}
# 575 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
enum {
 ZONELIST_FALLBACK,







 MAX_ZONELISTS
};





struct zoneref {
 struct zone *zone;
 int zone_idx;
};
# 610 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
struct zonelist {
 struct zoneref _zonerefs[((1 << 0) * 4) + 1];
};



extern struct page *mem_map;
# 627 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
struct bootmem_data;
typedef struct pglist_data {
 struct zone node_zones[4];
 struct zonelist node_zonelists[MAX_ZONELISTS];
 int nr_zones;
# 654 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;

 int kswapd_order;
 enum zone_type kswapd_classzone_idx;

 int kswapd_failures;


 int kcompactd_max_order;
 enum zone_type kcompactd_classzone_idx;
 wait_queue_head_t kcompactd_wait;
 struct task_struct *kcompactd;
# 688 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 unsigned long totalreserve_pages;
# 699 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 struct zone_padding _pad1_;
 spinlock_t lru_lock;
# 719 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 struct lruvec lruvec;





 unsigned int inactive_ratio;

 unsigned long flags;

 struct zone_padding _pad2_;


 struct per_cpu_nodestat *per_cpu_nodestats;
 atomic_long_t vm_stat[NR_VM_NODE_STAT_ITEMS];
} pg_data_t;
# 747 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) spinlock_t *zone_lru_lock(struct zone *zone)
{
 return &zone->zone_pgdat->lru_lock;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct lruvec *node_lruvec(struct pglist_data *pgdat)
{
 return &pgdat->lruvec;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int zone_id(const struct zone *zone)
{
 struct pglist_data *pgdat = zone->zone_pgdat;

 return zone - pgdat->node_zones;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_dev_zone(const struct zone *zone)
{
 return false;
}



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/memory_hotplug.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/memory_hotplug.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h" 1
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcu_segcblist.h" 1
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcu_segcblist.h"
struct rcu_cblist {
 struct callback_head *head;
 struct callback_head **tail;
 long len;
 long len_lazy;
};
# 77 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
 struct callback_head *head;
 struct callback_head **tails[4];
 unsigned long gp_seq[4];
 long len;
 long len_lazy;
};
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h" 2

struct srcu_struct;
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h"
int init_srcu_struct(struct srcu_struct *sp);








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcutree.h" 1
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcutree.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcu_node_tree.h" 1
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcutree.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/completion.h" 1
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/completion.h"
struct completion {
 unsigned int done;
 wait_queue_head_t wait;



};
# 63 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/completion.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void complete_acquire(struct completion *x) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void complete_release(struct completion *x) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void complete_release_commit(struct completion *x) {}
# 117 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/completion.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_waitqueue_head((&x->wait), "&x->wait", &__key); } while (0);
}
# 130 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/completion.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcutree.h" 2

struct srcu_node;
struct srcu_struct;





struct srcu_data {

 unsigned long srcu_lock_count[2];
 unsigned long srcu_unlock_count[2];


 raw_spinlock_t lock __attribute__((__aligned__(1 << (6))));
 struct rcu_segcblist srcu_cblist;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 bool srcu_cblist_invoking;
 struct delayed_work work;
 struct callback_head srcu_barrier_head;
 struct srcu_node *mynode;
 unsigned long grpmask;

 int cpu;
 struct srcu_struct *sp;
};




struct srcu_node {
 raw_spinlock_t lock;
 unsigned long srcu_have_cbs[4];


 unsigned long srcu_data_have_cbs[4];

 unsigned long srcu_gp_seq_needed_exp;
 struct srcu_node *srcu_parent;
 int grplo;
 int grphi;
};




struct srcu_struct {
 struct srcu_node node[1];
 struct srcu_node *level[1 + 1];

 struct mutex srcu_cb_mutex;
 raw_spinlock_t lock;
 struct mutex srcu_gp_mutex;
 unsigned int srcu_idx;
 unsigned long srcu_gp_seq;
 unsigned long srcu_gp_seq_needed;
 unsigned long srcu_gp_seq_needed_exp;
 unsigned long srcu_last_gp_end;
 struct srcu_data *sda;
 unsigned long srcu_barrier_seq;
 struct mutex srcu_barrier_mutex;
 struct completion srcu_barrier_completion;

 atomic_t srcu_barrier_cpu_cnt;


 struct delayed_work work;



};
# 140 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcutree.h"
void synchronize_srcu_expedited(struct srcu_struct *sp);
void srcu_barrier(struct srcu_struct *sp);
void srcu_torture_stats_print(struct srcu_struct *sp, char *tt, char *tf);
# 63 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h" 2







void call_srcu(struct srcu_struct *sp, struct callback_head *head,
  void (*func)(struct callback_head *head));
void cleanup_srcu_struct(struct srcu_struct *sp);
int __srcu_read_lock(struct srcu_struct *sp) ;
void __srcu_read_unlock(struct srcu_struct *sp, int idx) ;
void synchronize_srcu(struct srcu_struct *sp);
# 104 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int srcu_read_lock_held(struct srcu_struct *sp)
{
 return 1;
}
# 155 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int srcu_read_lock(struct srcu_struct *sp)
{
 int retval;

 retval = __srcu_read_lock(sp);
 do { } while (0);
 return retval;
}
# 171 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void srcu_read_unlock(struct srcu_struct *sp, int idx)

{
 do { } while (0);
 __srcu_read_unlock(sp, idx);
}
# 187 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/srcu.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void smp_mb__after_srcu_read_unlock(void)
{

}
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h" 2
# 51 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h"
struct notifier_block;

typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;
};

struct atomic_notifier_head {
 spinlock_t lock;
 struct notifier_block *head;
};

struct blocking_notifier_head {
 struct rw_semaphore rwsem;
 struct notifier_block *head;
};

struct raw_notifier_head {
 struct notifier_block *head;
};

struct srcu_notifier_head {
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;
};
# 95 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h"
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
# 121 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h"
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int blocking_notifier_chain_cond_register(
  struct blocking_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);
extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
# 171 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
# 215 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/notifier.h"
extern struct blocking_notifier_head reboot_notifier_list;
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/memory_hotplug.h" 2


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;
struct resource;
# 249 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/memory_hotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pgdat_resize_init(struct pglist_data *pgdat) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void zone_span_writelock(struct zone *zone) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void zone_span_writeunlock(struct zone *zone) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void zone_seqlock_init(struct zone *zone) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mhp_notimplemented(const char *func)
{
 printk("\001" "4" "%s() called, with CONFIG_MEMORY_HOTPLUG disabled\n", func);
 dump_stack();
 return -38;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void register_page_bootmem_info_node(struct pglist_data *pgdat)
{
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int try_online_node(int nid)
{
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void get_online_mems(void) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void put_online_mems(void) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mem_hotplug_begin(void) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mem_hotplug_done(void) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool movable_node_is_enabled(void)
{
 return false;
}
# 301 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/memory_hotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_mem_section_removable(unsigned long pfn,
     unsigned long nr_pages)
{
 return false;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void try_offline_node(int nid) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int offline_pages(unsigned long start_pfn, unsigned long nr_pages)
{
 return -22;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void remove_memory(int nid, u64 start, u64 size) {}


extern int walk_memory_range(unsigned long start_pfn, unsigned long end_pfn,
  void *arg, int (*func)(struct memory_block *, void *));
extern int __add_memory(int nid, u64 start, u64 size);
extern int add_memory(int nid, u64 start, u64 size);
extern int add_memory_resource(int nid, struct resource *resource, bool online);
extern int arch_add_memory(int nid, u64 start, u64 size, bool want_memblock);
extern void move_pfn_range_to_zone(struct zone *zone, unsigned long start_pfn,
  unsigned long nr_pages);
extern int offline_pages(unsigned long start_pfn, unsigned long nr_pages);
extern bool is_memblock_offlined(struct memory_block *mem);
extern void remove_memory(int nid, u64 start, u64 size);
extern int sparse_add_one_section(struct pglist_data *pgdat, unsigned long start_pfn);
extern void sparse_remove_one_section(struct zone *zone, struct mem_section *ms,
  unsigned long map_offset);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);
extern bool allow_online_pfn_range(int nid, unsigned long pfn, unsigned long nr_pages,
  int online_type);
extern struct zone *zone_for_pfn_range(int online_type, int nid, unsigned start_pfn,
  unsigned long nr_pages);
# 787 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h" 2

void build_all_zonelists(pg_data_t *pgdat);
void wakeup_kswapd(struct zone *zone, int order, enum zone_type classzone_idx);
bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,
    int classzone_idx, unsigned int alloc_flags,
    long free_pages);
bool zone_watermark_ok(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx,
  unsigned int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, unsigned int order,
  unsigned long mark, int classzone_idx);
enum memmap_context {
 MEMMAP_EARLY,
 MEMMAP_HOTPLUG,
};
extern void init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size);

extern void lruvec_init(struct lruvec *lruvec);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pglist_data *lruvec_pgdat(struct lruvec *lruvec)
{

 return lruvec->pgdat;



}

extern unsigned long lruvec_lru_size(struct lruvec *lruvec, enum lru_list lru, int zone_idx);


void memory_present(int nid, unsigned long start, unsigned long end);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) int local_memory_node(int node_id) { return node_id; };
# 845 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool managed_zone(struct zone *zone)
{
 return zone->managed_pages;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool populated_zone(struct zone *zone)
{
 return zone->present_pages;
}

extern int movable_zone;
# 869 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_highmem_idx(enum zone_type idx)
{




 return 0;

}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_highmem(struct zone *zone)
{



 return 0;

}


struct ctl_table;
int min_free_kbytes_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int watermark_scale_factor_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[4 -1];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);

extern int numa_zonelist_order_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
extern char numa_zonelist_order[];




extern struct pglist_data contig_page_data;
# 927 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
# 959 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int zonelist_node_idx(struct zoneref *zoneref)
{




 return 0;

}

struct zoneref *__next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes);
# 995 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 if (__builtin_expect(!!(!nodes && zonelist_zone_idx(z) <= highest_zoneidx), 1))
  return z;
 return __next_zones_zonelist(z, highest_zoneidx, nodes);
}
# 1020 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes)
{
 return next_zones_zonelist(zonelist->_zonerefs,
       highest_zoneidx, nodes);
}
# 1104 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pfn_to_section_nr(unsigned long pfn)
{
 return pfn >> (27 - 12);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long section_nr_to_pfn(unsigned long sec)
{
 return sec << (27 - 12);
}




struct page;
struct page_ext;
struct mem_section {
# 1131 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
 unsigned long section_mem_map;


 unsigned long *pageblock_flags;
# 1147 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
};
# 1160 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
extern struct mem_section **mem_section;




static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct mem_section *__nr_to_section(unsigned long nr)
{

 if (!mem_section)
  return ((void *)0);

 if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
  return ((void *)0);
 return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
}
extern int __section_nr(struct mem_section* ms);
extern unsigned long usemap_size(void);
# 1190 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<3)-1));
 return (struct page *)map;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int online_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<2)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int online_section_nr(unsigned long nr)
{
 return online_section(__nr_to_section(nr));
}
# 1234 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(pfn_to_section_nr(pfn));
}

extern int __highest_present_section_nr;


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pfn_valid(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (46 - 27)))
  return 0;
 return valid_section(__nr_to_section(pfn_to_section_nr(pfn)));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pfn_present(unsigned long pfn)
{
 if (pfn_to_section_nr(pfn) >= (1UL << (46 - 27)))
  return 0;
 return present_section(__nr_to_section(pfn_to_section_nr(pfn)));
}
# 1273 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
void sparse_init(void);
# 1284 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
struct mminit_pfnnid_cache {
 unsigned long last_start;
 unsigned long last_end;
 int last_nid;
};





void memory_present(int nid, unsigned long start, unsigned long end);
unsigned long __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) node_memmap_size_bytes(int, unsigned long, unsigned long);
# 1333 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mmzone.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool memmap_valid_within(unsigned long pfn,
     struct page *page, struct zone *zone)
{
 return true;
}
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/topology.h" 1
# 45 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/topology.h"
int arch_update_cpu_topology(void);
# 162 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/topology.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int numa_mem_id(void)
{
 return numa_node_id();
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int node_to_mem_node(int node)
{
 return node;
}
# 198 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/topology.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) const struct cpumask *cpu_smt_mask(int cpu)
{
 return ((*({ do { const void *__vpp_verify = (typeof((&(cpu_sibling_map)) + 0))((void *)0); (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map))))); (typeof((typeof(*((&(cpu_sibling_map)))) *)((&(cpu_sibling_map))))) (__ptr + (((__per_cpu_offset[(cpu)])))); }); })));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) const struct cpumask *cpu_cpu_mask(int cpu)
{
 return ((void)((void)(cpu),0), ((const struct cpumask *)&__cpu_online_mask));
}
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h" 2

struct vm_area_struct;
# 296 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int gfpflags_to_migratetype(const gfp_t gfp_flags)
{
 ((void)(sizeof(( long)((gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) == ((( gfp_t)0x10u)|(( gfp_t)0x08u))))));
 do { bool __cond = !(!((1UL << 3) != 0x08u)); extern void __compiletime_assert_38(void) ; if (__cond) __compiletime_assert_38(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 do { bool __cond = !(!((0x08u >> 3) != MIGRATE_MOVABLE)); extern void __compiletime_assert_39(void) ; if (__cond) __compiletime_assert_39(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (gfp_flags & ((( gfp_t)0x10u)|(( gfp_t)0x08u))) >> 3;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gfpflags_allow_blocking(const gfp_t gfp_flags)
{
 return !!(gfp_flags & (( gfp_t)0x400000u));
}
# 333 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gfpflags_normal_context(const gfp_t gfp_flags)
{
 return (gfp_flags & ((( gfp_t)0x400000u) | (( gfp_t)0x2000u))) ==
  (( gfp_t)0x400000u);
}
# 429 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_DMA << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_DMA << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2)) >> (bit * 2)) &
      ((1 << 2) - 1);
 ((void)(sizeof(( long)((( 1 << (0x01u | 0x02u) | 1 << (0x01u | 0x04u) | 1 << (0x04u | 0x02u) | 1 << (0x01u | 0x04u | 0x02u) | 1 << (0x08u | 0x02u | 0x01u) | 1 << (0x08u | 0x04u | 0x01u) | 1 << (0x08u | 0x04u | 0x02u) | 1 << (0x08u | 0x04u | 0x01u | 0x02u) ) >> bit) & 1))));
 return z;
}
# 447 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int gfp_zonelist(gfp_t flags)
{




 return ZONELIST_FALLBACK;
}
# 465 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (&contig_page_data)->node_zonelists + gfp_zonelist(flags);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_free_page(struct page *page, int order) { }


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void arch_alloc_page(struct page *page, int order) { }


struct page *
__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,
       nodemask_t *nodemask);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
 return __alloc_pages_nodemask(gfp_mask, order, preferred_nid, ((void *)0));
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct page *
__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
 ((void)(sizeof(( long)(nid < 0 || nid >= (1 << 0)))));
 ((void)(sizeof(( long)(!node_state((nid), N_ONLINE)))));

 return __alloc_pages(gfp_mask, order, nid);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (nid == (-1))
  nid = numa_mem_id();

 return __alloc_pages_node(nid, gfp_mask, order);
}
# 541 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h"
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);
void * __attribute__ ((__section__(".meminit.text"))) __attribute__((no_instrument_function)) alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);
extern void free_hot_cold_page(struct page *page, bool cold);
extern void free_hot_cold_page_list(struct list_head *list, bool cold);

struct page_frag_cache;
extern void __page_frag_cache_drain(struct page *page, unsigned int count);
extern void *page_frag_alloc(struct page_frag_cache *nc,
        unsigned int fragsz, gfp_t gfp_mask);
extern void page_frag_free(void *addr);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(struct zone *zone);
void drain_local_pages(struct zone *zone);

void page_alloc_init_late(void);
# 582 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/gfp.h"
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);


extern bool pm_suspended_storage(void);
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h" 2


struct idr {
 struct radix_tree_root idr_rt;
 unsigned int idr_next;
};
# 47 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int idr_get_cursor(const struct idr *idr)
{
 return ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u; if (1) __read_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); else __read_once_size_nocheck(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); do { } while (0); __u.__val; });
}
# 60 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void idr_set_cursor(struct idr *idr, unsigned int val)
{
 ({ union { typeof(idr->idr_next) __val; char __c[1]; } __u = { .__val = ( typeof(idr->idr_next)) (val) }; __write_once_size(&(idr->idr_next), __u.__c, sizeof(idr->idr_next)); __u.__val; });
}
# 82 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
void idr_preload(gfp_t gfp_mask);

int idr_alloc_cmn(struct idr *idr, void *ptr, unsigned long *index,
    unsigned long start, unsigned long end, gfp_t gfp,
    bool ext);
# 107 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int idr_alloc(struct idr *idr, void *ptr,
       int start, int end, gfp_t gfp)
{
 unsigned long id;
 int ret;

 if (({ int __ret_warn_on = !!(start < 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/idr.h"), "i" (113), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); }))
  return -22;

 ret = idr_alloc_cmn(idr, ptr, &id, start, end, gfp, false);

 if (ret)
  return ret;

 return id;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int idr_alloc_ext(struct idr *idr, void *ptr,
    unsigned long *index,
    unsigned long start,
    unsigned long end,
    gfp_t gfp)
{
 return idr_alloc_cmn(idr, ptr, index, start, end, gfp, true);
}

int idr_alloc_cyclic(struct idr *, void *entry, int start, int end, gfp_t);
int idr_for_each(const struct idr *,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *, int *nextid);
void *idr_get_next_ext(struct idr *idr, unsigned long *nextid);
void *idr_replace(struct idr *, void *, int id);
void *idr_replace_ext(struct idr *idr, void *ptr, unsigned long id);
void idr_destroy(struct idr *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *idr_remove_ext(struct idr *idr, unsigned long id)
{
 return radix_tree_delete_item(&idr->idr_rt, id, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *idr_remove(struct idr *idr, int id)
{
 return idr_remove_ext(idr, id);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void idr_init(struct idr *idr)
{
 do { (&idr->idr_rt)->gfp_mask = ((( gfp_t)(3 << (25 + 0)))); (&idr->idr_rt)->rnode = ((void *)0); } while (0);
 idr->idr_next = 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool idr_is_empty(const struct idr *idr)
{
 return radix_tree_empty(&idr->idr_rt) &&
  radix_tree_tagged(&idr->idr_rt, 0);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void idr_preload_end(void)
{
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}
# 187 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *idr_find_ext(const struct idr *idr, unsigned long id)
{
 return radix_tree_lookup(&idr->idr_rt, id);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *idr_find(const struct idr *idr, int id)
{
 return idr_find_ext(idr, id);
}
# 234 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
struct ida_bitmap {
 unsigned long bitmap[(128 / sizeof(long))];
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct ida_bitmap *) ida_bitmap;

struct ida {
 struct radix_tree_root ida_rt;
};






int ida_pre_get(struct ida *ida, gfp_t gfp_mask);
int ida_get_new_above(struct ida *ida, int starting_id, int *p_id);
void ida_remove(struct ida *ida, int id);
void ida_destroy(struct ida *ida);

int ida_simple_get(struct ida *ida, unsigned int start, unsigned int end,
     gfp_t gfp_mask);
void ida_simple_remove(struct ida *ida, unsigned int id);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ida_init(struct ida *ida)
{
 do { (&ida->ida_rt)->gfp_mask = ((( gfp_t)(3 << (25 + 0))) | ((( gfp_t)0x1000000u))); (&ida->ida_rt)->rnode = ((void *)0); } while (0);
}
# 270 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/idr.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int ida_get_new(struct ida *ida, int *p_id)
{
 return ida_get_new_above(ida, 0, p_id);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool ida_is_empty(const struct ida *ida)
{
 return radix_tree_empty(&ida->ida_rt);
}
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h" 2





struct file;
struct dentry;
struct iattr;
struct seq_file;
struct vm_area_struct;
struct super_block;
struct file_system_type;
struct poll_table_struct;

struct kernfs_open_node;
struct kernfs_iattrs;

enum kernfs_node_type {
 KERNFS_DIR = 0x0001,
 KERNFS_FILE = 0x0002,
 KERNFS_LINK = 0x0004,
};




enum kernfs_node_flag {
 KERNFS_ACTIVATED = 0x0010,
 KERNFS_NS = 0x0020,
 KERNFS_HAS_SEQ_SHOW = 0x0040,
 KERNFS_HAS_MMAP = 0x0080,
 KERNFS_LOCKDEP = 0x0100,
 KERNFS_SUICIDAL = 0x0400,
 KERNFS_SUICIDED = 0x0800,
 KERNFS_EMPTY_DIR = 0x1000,
 KERNFS_HAS_RELEASE = 0x2000,
};


enum kernfs_root_flag {






 KERNFS_ROOT_CREATE_DEACTIVATED = 0x0001,
# 72 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
 KERNFS_ROOT_EXTRA_OPEN_PERM_CHECK = 0x0002,





 KERNFS_ROOT_SUPPORT_EXPORTOP = 0x0004,
};


struct kernfs_elem_dir {
 unsigned long subdirs;

 struct rb_root children;





 struct kernfs_root *root;
};

struct kernfs_elem_symlink {
 struct kernfs_node *target_kn;
};

struct kernfs_elem_attr {
 const struct kernfs_ops *ops;
 struct kernfs_open_node *open;
 loff_t size;
 struct kernfs_node *notify_next;
};


union kernfs_node_id {
 struct {






  u32 ino;
  u32 generation;
 };
 u64 id;
};
# 129 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
struct kernfs_node {
 atomic_t count;
 atomic_t active;
# 141 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
 struct kernfs_node *parent;
 const char *name;

 struct rb_node rb;

 const void *ns;
 unsigned int hash;
 union {
  struct kernfs_elem_dir dir;
  struct kernfs_elem_symlink symlink;
  struct kernfs_elem_attr attr;
 };

 void *priv;

 union kernfs_node_id id;
 unsigned short flags;
 umode_t mode;
 struct kernfs_iattrs *iattr;
};
# 169 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
struct kernfs_syscall_ops {
 int (*remount_fs)(struct kernfs_root *root, int *flags, char *data);
 int (*show_options)(struct seq_file *sf, struct kernfs_root *root);

 int (*mkdir)(struct kernfs_node *parent, const char *name,
       umode_t mode);
 int (*rmdir)(struct kernfs_node *kn);
 int (*rename)(struct kernfs_node *kn, struct kernfs_node *new_parent,
        const char *new_name);
 int (*show_path)(struct seq_file *sf, struct kernfs_node *kn,
    struct kernfs_root *root);
};

struct kernfs_root {

 struct kernfs_node *kn;
 unsigned int flags;


 struct idr ino_idr;
 u32 last_ino;
 u32 next_generation;
 struct kernfs_syscall_ops *syscall_ops;


 struct list_head supers;

 wait_queue_head_t deactivate_waitq;
};

struct kernfs_open_file {

 struct kernfs_node *kn;
 struct file *file;
 struct seq_file *seq_file;
 void *priv;


 struct mutex mutex;
 struct mutex prealloc_mutex;
 int event;
 struct list_head list;
 char *prealloc_buf;

 size_t atomic_write_len;
 bool mmapped:1;
 bool released:1;
 const struct vm_operations_struct *vm_ops;
};

struct kernfs_ops {




 int (*open)(struct kernfs_open_file *of);
 void (*release)(struct kernfs_open_file *of);
# 238 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
 int (*seq_show)(struct seq_file *sf, void *v);

 void *(*seq_start)(struct seq_file *sf, loff_t *ppos);
 void *(*seq_next)(struct seq_file *sf, void *v, loff_t *ppos);
 void (*seq_stop)(struct seq_file *sf, void *v);

 ssize_t (*read)(struct kernfs_open_file *of, char *buf, size_t bytes,
   loff_t off);
# 254 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
 size_t atomic_write_len;






 bool prealloc;
 ssize_t (*write)(struct kernfs_open_file *of, char *buf, size_t bytes,
    loff_t off);

 unsigned int (*poll)(struct kernfs_open_file *of,
        struct poll_table_struct *pt);

 int (*mmap)(struct kernfs_open_file *of, struct vm_area_struct *vma);




};



static inline __attribute__((unused)) __attribute__((no_instrument_function)) enum kernfs_node_type kernfs_type(struct kernfs_node *kn)
{
 return kn->flags & 0x000f;
}
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kernfs_enable_ns(struct kernfs_node *kn)
{
 ({ int __ret_warn_on = !!(kernfs_type(kn) != KERNFS_DIR); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/kernfs.h"), "i" (292), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 ({ int __ret_warn_on = !!(!(({ union { typeof((&kn->dir.children)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); else __read_once_size_nocheck(&((&kn->dir.children)->rb_node), __u.__c, sizeof((&kn->dir.children)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0))); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/kernfs.h"), "i" (293), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
 kn->flags |= KERNFS_NS;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool kernfs_ns_enabled(struct kernfs_node *kn)
{
 return kn->flags & KERNFS_NS;
}

int kernfs_name(struct kernfs_node *kn, char *buf, size_t buflen);
int kernfs_path_from_node(struct kernfs_node *root_kn, struct kernfs_node *kn,
     char *buf, size_t buflen);
void pr_cont_kernfs_name(struct kernfs_node *kn);
void pr_cont_kernfs_path(struct kernfs_node *kn);
struct kernfs_node *kernfs_get_parent(struct kernfs_node *kn);
struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *parent,
        const char *name, const void *ns);
struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *parent,
        const char *path, const void *ns);
void kernfs_get(struct kernfs_node *kn);
void kernfs_put(struct kernfs_node *kn);

struct kernfs_node *kernfs_node_from_dentry(struct dentry *dentry);
struct kernfs_root *kernfs_root_from_sb(struct super_block *sb);
struct inode *kernfs_get_inode(struct super_block *sb, struct kernfs_node *kn);

struct dentry *kernfs_node_dentry(struct kernfs_node *kn,
      struct super_block *sb);
struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *scops,
           unsigned int flags, void *priv);
void kernfs_destroy_root(struct kernfs_root *root);

struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *parent,
      const char *name, umode_t mode,
      void *priv, const void *ns);
struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *parent,
         const char *name);
struct kernfs_node *__kernfs_create_file(struct kernfs_node *parent,
      const char *name,
      umode_t mode, loff_t size,
      const struct kernfs_ops *ops,
      void *priv, const void *ns,
      struct lock_class_key *key);
struct kernfs_node *kernfs_create_link(struct kernfs_node *parent,
           const char *name,
           struct kernfs_node *target);
void kernfs_activate(struct kernfs_node *kn);
void kernfs_remove(struct kernfs_node *kn);
void kernfs_break_active_protection(struct kernfs_node *kn);
void kernfs_unbreak_active_protection(struct kernfs_node *kn);
bool kernfs_remove_self(struct kernfs_node *kn);
int kernfs_remove_by_name_ns(struct kernfs_node *parent, const char *name,
        const void *ns);
int kernfs_rename_ns(struct kernfs_node *kn, struct kernfs_node *new_parent,
       const char *new_name, const void *new_ns);
int kernfs_setattr(struct kernfs_node *kn, const struct iattr *iattr);
unsigned int kernfs_generic_poll(struct kernfs_open_file *of,
     struct poll_table_struct *pt);
void kernfs_notify(struct kernfs_node *kn);

const void *kernfs_super_ns(struct super_block *sb);
struct dentry *kernfs_mount_ns(struct file_system_type *fs_type, int flags,
          struct kernfs_root *root, unsigned long magic,
          bool *new_sb_created, const void *ns);
void kernfs_kill_sb(struct super_block *sb);
struct super_block *kernfs_pin_sb(struct kernfs_root *root, const void *ns);

void kernfs_init(void);

struct kernfs_node *kernfs_get_node_by_id(struct kernfs_root *root,
 const union kernfs_node_id *id);
# 487 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kernfs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kernfs_path(struct kernfs_node *kn, char *buf, size_t buflen)
{
 return kernfs_path_from_node(kn, ((void *)0), buf, buflen);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_find_and_get(struct kernfs_node *kn, const char *name)
{
 return kernfs_find_and_get_ns(kn, name, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_walk_and_get(struct kernfs_node *kn, const char *path)
{
 return kernfs_walk_and_get_ns(kn, path, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_dir(struct kernfs_node *parent, const char *name, umode_t mode,
    void *priv)
{
 return kernfs_create_dir_ns(parent, name, mode, priv, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_file_ns(struct kernfs_node *parent, const char *name,
        umode_t mode, loff_t size, const struct kernfs_ops *ops,
        void *priv, const void *ns)
{
 struct lock_class_key *key = ((void *)0);




 return __kernfs_create_file(parent, name, mode, size, ops, priv, ns,
        key);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kernfs_node *
kernfs_create_file(struct kernfs_node *parent, const char *name, umode_t mode,
     loff_t size, const struct kernfs_ops *ops, void *priv)
{
 return kernfs_create_file_ns(parent, name, mode, size, ops, priv, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kernfs_remove_by_name(struct kernfs_node *parent,
     const char *name)
{
 return kernfs_remove_by_name_ns(parent, name, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kernfs_rename(struct kernfs_node *kn,
    struct kernfs_node *new_parent,
    const char *new_name)
{
 return kernfs_rename_ns(kn, new_parent, new_name, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct dentry *
kernfs_mount(struct file_system_type *fs_type, int flags,
  struct kernfs_root *root, unsigned long magic,
  bool *new_sb_created)
{
 return kernfs_mount_ns(fs_type, flags, root,
    magic, new_sb_created, ((void *)0));
}
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h" 2




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject_ns.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject_ns.h"
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 const void *(*netlink_ns)(struct sock *sk);
 const void *(*initial_ns)(void);
 void (*drop_ns)(void *);
};

int kobj_ns_type_register(const struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
const struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
const struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
const void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
const void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stat.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/stat.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/posix_types.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/stat.h" 2
# 83 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/stat.h"
struct stat {
 __kernel_ulong_t st_dev;
 __kernel_ulong_t st_ino;
 __kernel_ulong_t st_nlink;

 unsigned int st_mode;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned int __pad0;
 __kernel_ulong_t st_rdev;
 __kernel_long_t st_size;
 __kernel_long_t st_blksize;
 __kernel_long_t st_blocks;

 __kernel_ulong_t st_atime;
 __kernel_ulong_t st_atime_nsec;
 __kernel_ulong_t st_mtime;
 __kernel_ulong_t st_mtime_nsec;
 __kernel_ulong_t st_ctime;
 __kernel_ulong_t st_ctime_nsec;
 __kernel_long_t __unused[3];
};
# 117 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/stat.h"
struct __old_kernel_stat {
 unsigned short st_dev;
 unsigned short st_ino;
 unsigned short st_mode;
 unsigned short st_nlink;
 unsigned short st_uid;
 unsigned short st_gid;
 unsigned short st_rdev;






 unsigned int st_size;
 unsigned int st_atime;
 unsigned int st_mtime;
 unsigned int st_ctime;

};
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stat.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/stat.h" 1
# 56 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/stat.h"
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/stat.h"
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stat.h" 2
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stat.h"
struct kstat {
 u32 result_mask;
 umode_t mode;
 unsigned int nlink;
 uint32_t blksize;
 u64 attributes;
 u64 attributes_mask;
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stat.h"
 u64 ino;
 dev_t dev;
 dev_t rdev;
 kuid_t uid;
 kgid_t gid;
 loff_t size;
 struct timespec atime;
 struct timespec mtime;
 struct timespec ctime;
 struct timespec btime;
 u64 blocks;
};
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h" 2


struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
 const char *name;
 umode_t mode;





};
# 84 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h"
struct attribute_group {
 const char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 umode_t (*is_bin_visible)(struct kobject *,
        struct bin_attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;
};
# 159 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h"
struct file;
struct vm_area_struct;

struct bin_attribute {
 struct attribute attr;
 size_t size;
 void *private;
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);
};
# 216 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h"
struct sysfs_ops {
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, const char *, size_t);
};



int sysfs_create_dir_ns(struct kobject *kobj, const void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,
         const void *new_ns);
int sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       const void *new_ns);
int sysfs_create_mount_point(struct kobject *parent_kobj,
       const char *name);
void sysfs_remove_mount_point(struct kobject *parent_kobj,
         const char *name);

int sysfs_create_file_ns(struct kobject *kobj,
          const struct attribute *attr,
          const void *ns);
int sysfs_create_files(struct kobject *kobj,
       const struct attribute **attr);
int sysfs_chmod_file(struct kobject *kobj,
      const struct attribute *attr, umode_t mode);
struct kernfs_node *sysfs_break_active_protection(struct kobject *kobj,
        const struct attribute *attr);
void sysfs_unbreak_active_protection(struct kernfs_node *kn);
void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,
     const void *ns);
bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);
void sysfs_remove_files(struct kobject *kobj, const struct attribute **attr);

int sysfs_create_bin_file(struct kobject *kobj,
           const struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      const struct bin_attribute *attr);

int sysfs_create_link(struct kobject *kobj, struct kobject *target,
       const char *name);
int sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       const char *name);
void sysfs_remove_link(struct kobject *kobj, const char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    const char *old_name, const char *new_name,
    const void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   const char *name);

int sysfs_create_group(struct kobject *kobj,
        const struct attribute_group *grp);
int sysfs_create_groups(struct kobject *kobj,
         const struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   const struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    const struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   const struct attribute *attr, const char *group);
int sysfs_merge_group(struct kobject *kobj,
         const struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         const struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,
       struct kobject *target, const char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,
      const char *link_name);
int __compat_only_sysfs_link_entry_to_kobj(struct kobject *kobj,
          struct kobject *target_kobj,
          const char *target_name);

void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);

int sysfs_init(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sysfs_enable_ns(struct kernfs_node *kn)
{
 return kernfs_enable_ns(kn);
}
# 512 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysfs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int sysfs_create_file(struct kobject *kobj,
       const struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sysfs_remove_file(struct kobject *kobj,
         const struct attribute *attr)
{
 sysfs_remove_file_ns(kobj, attr, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        const char *old_name, const char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sysfs_notify_dirent(struct kernfs_node *kn)
{
 kernfs_notify(kn);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,
         const char *name)
{
 return kernfs_find_and_get(parent, name);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kernfs_node *sysfs_get(struct kernfs_node *kn)
{
 kernfs_get(kn);
 return kn;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sysfs_put(struct kernfs_node *kn)
{
 kernfs_put(kn);
}
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject.h" 2
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject.h"
extern char uevent_helper[];



extern u64 uevent_seqnum;
# 53 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject.h"
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_BIND,
 KOBJ_UNBIND,
 KOBJ_MAX
};

struct kobject {
 const char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct kernfs_node *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;
};

extern __attribute__((format(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, const char *name, ...);
extern __attribute__((format(printf, 2, 0)))
int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,
      va_list vargs);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *kobject_name(const struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((format(printf, 3, 4)))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  const char *fmt, ...);
extern __attribute__((format(printf, 4, 5)))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    const char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * kobject_create(void);
extern struct kobject * kobject_create_and_add(const char *name,
      struct kobject *parent);

extern int kobject_rename(struct kobject *, const char *new_name);
extern int kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern struct kobject * kobject_get_unless_zero(
      struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern const void *kobject_namespace(struct kobject *kobj);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);
# 130 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool kobject_has_children(struct kobject *kobj)
{
 ({ int __ret_warn_on = !!(kref_read(&kobj->kref) == 0); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/kobject.h"), "i" (132), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 return kobj->sd && kobj->sd->dir.subdirs;
}

struct kobj_type {
 void (*release)(struct kobject *kobj);
 const struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 const void *(*namespace)(struct kobject *kobj);
};

struct kobj_uevent_env {
 char *argv[3];
 char *envp[32];
 int envp_idx;
 char buf[2048];
 int buflen;
};

struct kset_uevent_ops {
 int (* const filter)(struct kset *kset, struct kobject *kobj);
 const char *(* const name)(struct kset *kset, struct kobject *kobj);
 int (* const uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);
};

struct kobj_attribute {
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    const char *buf, size_t count);
};

extern const struct sysfs_ops kobj_sysfs_ops;

struct sock;
# 189 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kobject.h"
struct kset {
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 const struct kset_uevent_ops *uevent_ops;
} ;

extern void kset_init(struct kset *kset);
extern int kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * kset_create_and_add(const char *name,
      const struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ void *__mptr = (void *)(kobj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct kset *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void)))); extern void __compiletime_assert_40(void) ; if (__cond) __compiletime_assert_40(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct kset *)(__mptr - __builtin_offsetof(struct kset, kobj))); }) : ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, const char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);
int kobject_synth_uevent(struct kobject *kobj, const char *buf, size_t count);

__attribute__((format(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/klist.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/klist.h"
struct klist_node;
struct klist {
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);
} __attribute__ ((aligned (sizeof(void *))));
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/klist.h"
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_behind(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
 struct klist *i_klist;
 struct klist_node *i_cur;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_prev(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pinctrl/devinfo.h" 1
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pinctrl/devinfo.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pinctrl_bind_pins(struct device *dev)
{
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pinctrl_init_done(struct device *dev)
{
 return 0;
}
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h" 1
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h"
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pm_vt_switch_required(struct device *dev, bool required)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pm_vt_switch_unregister(struct device *dev)
{
}






struct device;


extern const char power_group_name[];




typedef struct pm_message {
 int event;
} pm_message_t;
# 290 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h"
struct dev_pm_ops {
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);
};
# 508 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h"
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
# 530 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h"
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;
struct wake_irq;
struct pm_domain_data;

struct pm_subsys_data {
 spinlock_t lock;
 unsigned int refcount;

 struct list_head clock_list;




};

struct dev_pm_info {
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool in_dpm_list:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool is_noirq_suspended:1;
 bool is_late_suspended:1;
 bool no_pm:1;
 bool early_init:1;
 bool direct_complete:1;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;
 bool no_pm_callbacks:1;




 struct timer_list suspend_timer;
 unsigned long timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 struct wake_irq *wakeirq;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int runtime_auto:1;
 bool ignore_children:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 unsigned int links_count;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 unsigned long last_busy;
 unsigned long active_jiffies;
 unsigned long suspended_jiffies;
 unsigned long accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 void (*set_latency_tolerance)(struct device *, s32);
 struct dev_pm_qos *qos;
};

extern void update_pm_runtime_accounting(struct device *dev);
extern int dev_pm_get_subsys_data(struct device *dev);
extern void dev_pm_put_subsys_data(struct device *dev);
# 627 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h"
struct dev_pm_domain {
 struct dev_pm_ops ops;
 void (*detach)(struct device *dev, bool power_off);
 int (*activate)(struct device *dev);
 void (*sync)(struct device *dev);
 void (*dismiss)(struct device *dev);
};
# 690 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h"
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_noirq_resume_devices(pm_message_t state);
extern void dpm_noirq_end(void);
extern void dpm_resume_noirq(pm_message_t state);
extern void dpm_resume_early(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern void dpm_noirq_begin(void);
extern int dpm_noirq_suspend_devices(pm_message_t state);
extern int dpm_suspend_noirq(pm_message_t state);
extern int dpm_suspend_late(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result(const char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);
extern void pm_complete_with_resume_check(struct device *dev);
# 786 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm.h"
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ratelimit.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ratelimit.h"
struct ratelimit_state {
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;
 unsigned long flags;
};
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/ratelimit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 memset(rs, 0, sizeof(*rs));

 do { *(&rs->lock) = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }; } while (0);
 rs->interval = interval;
 rs->burst = burst;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ratelimit_default_init(struct ratelimit_state *rs)
{
 return ratelimit_state_init(rs, (5 * 100),
     10);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ratelimit_state_exit(struct ratelimit_state *rs)
{
 if (!(rs->flags & (1UL << (0))))
  return;

 if (rs->missed) {
  printk("\001" "4" "%s: %d output lines suppressed due to ratelimiting\n", get_current()->comm, rs->missed);

  rs->missed = 0;
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
ratelimit_set_flags(struct ratelimit_state *rs, unsigned long flags)
{
 rs->flags = flags;
}

extern struct ratelimit_state printk_ratelimit_state;

extern int ___ratelimit(struct ratelimit_state *rs, const char *func);
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/device.h" 1




struct dev_archdata {



};


struct dma_domain {
 struct list_head node;
 const struct dma_map_ops *dma_ops;
 int domain_nr;
};
void add_dma_domain(struct dma_domain *domain);
void del_dma_domain(struct dma_domain *domain);


struct pdev_archdata {
};
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct class;
struct subsys_private;
struct bus_type;
struct device_node;
struct fwnode_handle;
struct iommu_ops;
struct iommu_group;
struct iommu_fwspec;

struct bus_attribute {
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, const char *buf, size_t count);
};
# 59 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
extern int bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);
# 110 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct bus_type {
 const char *name;
 const char *dev_name;
 struct device *dev_root;
 const struct attribute_group **bus_groups;
 const struct attribute_group **dev_groups;
 const struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 int (*num_vf)(struct device *dev);

 const struct dev_pm_ops *pm;

 const struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;
};

extern int bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int bus_rescan_devices(struct bus_type *bus);


struct subsys_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    const struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          void *data,
          int (*match)(struct device *dev, void *data));
struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           const char *name);
struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)(const struct device *a,
       const struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
# 202 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
# 227 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
enum probe_type {
 PROBE_DEFAULT_STRATEGY,
 PROBE_PREFER_ASYNCHRONOUS,
 PROBE_FORCE_SYNCHRONOUS,
};
# 266 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct device_driver {
 const char *name;
 struct bus_type *bus;

 struct module *owner;
 const char *mod_name;

 bool suppress_bind_attrs;
 enum probe_type probe_type;

 const struct of_device_id *of_match_table;
 const struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 const struct attribute_group **groups;

 const struct dev_pm_ops *pm;

 struct driver_private *p;
};


extern int driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find(const char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);




struct driver_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, const char *buf,
    size_t count);
};
# 317 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
extern int driver_create_file(struct device_driver *driver,
     const struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          const struct driver_attribute *attr);

extern int driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, void *data,
      int (*match)(struct device *dev, void *data));
# 344 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct subsys_interface {
 const char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 void (*remove_dev)(struct device *dev, struct subsys_interface *sif);
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      const struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       const struct attribute_group **groups);
# 389 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct class {
 const char *name;
 struct module *owner;

 const struct attribute_group **class_groups;
 const struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct class *class);
 void (*dev_release)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);
 int (*shutdown_pre)(struct device *dev);

 const struct kobj_ns_type_operations *ns_type;
 const void *(*namespace)(struct device *dev);

 const struct dev_pm_ops *pm;

 struct subsys_private *p;
};

struct class_dev_iter {
 struct klist_iter ki;
 const struct device_type *type;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __class_register(struct class *class,
      struct lock_class_key *key);
extern void class_unregister(struct class *class);
# 434 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct class_compat;
struct class_compat *class_compat_register(const char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct class *class,
    struct device *start,
    const struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct class *class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct class *class,
     struct device *start, const void *data,
     int (*match)(struct device *, const void *));

struct class_attribute {
 struct attribute attr;
 ssize_t (*show)(struct class *class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct class *class, struct class_attribute *attr,
   const char *buf, size_t count);
};
# 471 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
extern int class_create_file_ns(struct class *class,
          const struct class_attribute *attr,
          const void *ns);
extern void class_remove_file_ns(struct class *class,
     const struct class_attribute *attr,
     const void *ns);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int class_create_file(struct class *class,
     const struct class_attribute *attr)
{
 return class_create_file_ns(class, attr, ((void *)0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void class_remove_file(struct class *class,
         const struct class_attribute *attr)
{
 return class_remove_file_ns(class, attr, ((void *)0));
}


struct class_attribute_string {
 struct class_attribute attr;
 char *str;
};
# 503 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
extern ssize_t show_class_attr_string(struct class *class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
 struct list_head node;
 struct class *class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);
};

extern int class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct class * __class_create(struct module *owner,
        const char *name,
        struct lock_class_key *key);
extern void class_destroy(struct class *cls);
# 539 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct device_type {
 const char *name;
 const struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 const struct dev_pm_ops *pm;
};


struct device_attribute {
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
};

struct dev_ext_attribute {
 struct device_attribute attr;
 void *var;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      const char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    const char *buf, size_t count);
# 598 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
extern int device_create_file(struct device *device,
         const struct device_attribute *entry);
extern void device_remove_file(struct device *dev,
          const struct device_attribute *attr);
extern bool device_remove_file_self(struct device *dev,
        const struct device_attribute *attr);
extern int device_create_bin_file(struct device *dev,
     const struct bin_attribute *attr);
extern void device_remove_bin_file(struct device *dev,
       const struct bin_attribute *attr);


typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);


extern void *__devres_alloc_node(dr_release_t release, size_t size, gfp_t gfp,
     int nid, const char *name) __attribute__((__malloc__));
# 629 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
extern void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
extern void devres_free(void *res);
extern void devres_add(struct device *dev, void *res);
extern void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
extern void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
extern void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
extern int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
extern int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


extern void * devres_open_group(struct device *dev, void *id,
          gfp_t gfp);
extern void devres_close_group(struct device *dev, void *id);
extern void devres_remove_group(struct device *dev, void *id);
extern int devres_release_group(struct device *dev, void *id);


extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp) __attribute__((__malloc__));
extern __attribute__((format(printf, 3, 0)))
char *devm_kvasprintf(struct device *dev, gfp_t gfp, const char *fmt,
        va_list ap) __attribute__((__malloc__));
extern __attribute__((format(printf, 3, 4)))
char *devm_kasprintf(struct device *dev, gfp_t gfp, const char *fmt, ...) __attribute__((__malloc__));
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x8000u));
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return ((void *)0);
 return devm_kmalloc(dev, n * size, flags);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x8000u));
}
extern void devm_kfree(struct device *dev, void *p);
extern char *devm_kstrdup(struct device *dev, const char *s, gfp_t gfp) __attribute__((__malloc__));
extern void *devm_kmemdup(struct device *dev, const void *src, size_t len,
     gfp_t gfp);

extern unsigned long devm_get_free_pages(struct device *dev,
      gfp_t gfp_mask, unsigned int order);
extern void devm_free_pages(struct device *dev, unsigned long addr);

void *devm_ioremap_resource(struct device *dev,
        const struct resource *res);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int devm_add_action_or_reset(struct device *dev,
        void (*action)(void *), void *data)
{
 int ret;

 ret = devm_add_action(dev, action, data);
 if (ret)
  action(data);

 return ret;
}
# 719 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
void *__devm_alloc_percpu(struct device *dev, size_t size,
       size_t align);
void devm_free_percpu(struct device *dev, void *pdata);

struct device_dma_parameters {




 unsigned int max_segment_size;
 unsigned long segment_boundary_mask;
};
# 741 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
enum device_link_state {
 DL_STATE_NONE = -1,
 DL_STATE_DORMANT = 0,
 DL_STATE_AVAILABLE,
 DL_STATE_CONSUMER_PROBE,
 DL_STATE_ACTIVE,
 DL_STATE_SUPPLIER_UNBIND,
};
# 774 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct device_link {
 struct device *supplier;
 struct list_head s_node;
 struct device *consumer;
 struct list_head c_node;
 enum device_link_state status;
 u32 flags;
 bool rpm_active;

 struct callback_head callback_head;

};
# 794 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
enum dl_dev_state {
 DL_DEV_NO_DRIVER = 0,
 DL_DEV_PROBING,
 DL_DEV_DRIVER_BOUND,
 DL_DEV_UNBINDING,
};







struct dev_links_info {
 struct list_head suppliers;
 struct list_head consumers;
 enum dl_dev_state status;
};
# 889 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
struct device {
 struct device *parent;

 struct device_private *p;

 struct kobject kobj;
 const char *init_name;
 const struct device_type *type;

 struct mutex mutex;



 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 void *driver_data;

 struct dev_links_info links;
 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct irq_domain *msi_domain;





 struct list_head msi_list;





 const struct dma_map_ops *dma_ops;
 u64 *dma_mask;
 u64 coherent_dma_mask;




 unsigned long dma_pfn_offset;

 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;

 struct dma_coherent_mem *dma_mem;






 struct dev_archdata archdata;

 struct device_node *of_node;
 struct fwnode_handle *fwnode;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct klist_node knode_class;
 struct class *class;
 const struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;
 struct iommu_fwspec *iommu_fwspec;

 bool offline_disabled:1;
 bool offline:1;
 bool of_node_reused:1;
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ void *__mptr = (void *)(kobj); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(kobj)), typeof(((struct device *)0)->kobj)) && !__builtin_types_compatible_p(typeof(*(kobj)), typeof(void)))); extern void __compiletime_assert_41(void) ; if (__cond) __compiletime_assert_41(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct device *)(__mptr - __builtin_offsetof(struct device, kobj))); });
}



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm_wakeup.h" 1
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm_wakeup.h"
struct wake_irq;
# 56 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm_wakeup.h"
struct wakeup_source {
 const char *name;
 int id;
 struct list_head entry;
 spinlock_t lock;
 struct wake_irq *wakeirq;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 struct device *dev;
 bool active:1;
 bool autosleep_enabled:1;
};







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}


extern void wakeup_source_prepare(struct wakeup_source *ws, const char *name);
extern struct wakeup_source *wakeup_source_create(const char *name);
extern void wakeup_source_drop(struct wakeup_source *ws);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register(struct device *dev,
          const char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void pm_wakeup_ws_event(struct wakeup_source *ws, unsigned int msec, bool hard);
extern void pm_wakeup_dev_event(struct device *dev, unsigned int msec, bool hard);
# 199 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/pm_wakeup.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void wakeup_source_init(struct wakeup_source *ws,
          const char *name)
{
 wakeup_source_prepare(ws, name);
 wakeup_source_add(ws);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void wakeup_source_trash(struct wakeup_source *ws)
{
 wakeup_source_remove(ws);
 wakeup_source_drop(ws);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec)
{
 return pm_wakeup_ws_event(ws, msec, false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pm_wakeup_event(struct device *dev, unsigned int msec)
{
 return pm_wakeup_dev_event(dev, msec, false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pm_wakeup_hard_event(struct device *dev)
{
 return pm_wakeup_dev_event(dev, 0, true);
}
# 977 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h" 2

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *dev_name(const struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}

extern __attribute__((format(printf, 2, 3)))
int dev_set_name(struct device *dev, const char *name, ...);
# 1000 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/device.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int dev_to_node(struct device *dev)
{
 return -1;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_dev_node(struct device *dev, int node)
{
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct irq_domain *dev_get_msi_domain(const struct device *dev)
{

 return dev->msi_domain;



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dev_set_msi_domain(struct device *dev, struct irq_domain *d)
{

 dev->msi_domain = d;

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *dev_get_drvdata(const struct device *dev)
{
 return dev->driver_data;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int dev_get_uevent_suppress(const struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = false;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool device_pm_not_required(struct device *dev)
{
 return dev->power.no_pm;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void device_set_pm_not_required(struct device *dev)
{
 dev->power.no_pm = true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void device_lock(struct device *dev)
{
 mutex_lock(&dev->mutex);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int device_lock_interruptible(struct device *dev)
{
 return mutex_lock_interruptible(&dev->mutex);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int device_trylock(struct device *dev)
{
 return mutex_trylock(&dev->mutex);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void device_unlock(struct device *dev)
{
 mutex_unlock(&dev->mutex);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void device_lock_assert(struct device *dev)
{
 do { (void)(&dev->mutex); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct device_node *dev_of_node(struct device *dev)
{
 if (!1)
  return ((void *)0);
 return dev->of_node;
}

void driver_init(void);




extern int device_register(struct device *dev);
extern void device_unregister(struct device *dev);
extern void device_initialize(struct device *dev);
extern int device_add(struct device *dev);
extern void device_del(struct device *dev);
extern int device_for_each_child(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern int device_for_each_child_reverse(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern struct device *device_find_child(struct device *dev, void *data,
    int (*match)(struct device *dev, void *data));
extern int device_rename(struct device *dev, const char *new_name);
extern int device_move(struct device *dev, struct device *new_parent,
         enum dpm_order dpm_order);
extern const char *device_get_devnode(struct device *dev,
          umode_t *mode, kuid_t *uid, kgid_t *gid,
          const char **tmp);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

extern void lock_device_hotplug(void);
extern void unlock_device_hotplug(void);
extern int lock_device_hotplug_sysfs(void);
extern int device_offline(struct device *dev);
extern int device_online(struct device *dev);
extern void set_primary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
extern void set_secondary_fwnode(struct device *dev, struct fwnode_handle *fwnode);
void device_set_of_node_from_dev(struct device *dev, const struct device *dev2);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int dev_num_vf(struct device *dev)
{
 if (dev->bus && dev->bus->num_vf)
  return dev->bus->num_vf(dev);
 return 0;
}




extern struct device *__root_device_register(const char *name,
          struct module *owner);





extern void root_device_unregister(struct device *root);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *dev_get_platdata(const struct device *dev)
{
 return dev->platform_data;
}





extern int device_bind_driver(struct device *dev);
extern void device_release_driver(struct device *dev);
extern int device_attach(struct device *dev);
extern int driver_attach(struct device_driver *drv);
extern void device_initial_probe(struct device *dev);
extern int device_reprobe(struct device *dev);

extern bool device_is_bound(struct device *dev);




extern __attribute__((format(printf, 5, 0)))
struct device *device_create_vargs(struct class *cls, struct device *parent,
       dev_t devt, void *drvdata,
       const char *fmt, va_list vargs);
extern __attribute__((format(printf, 5, 6)))
struct device *device_create(struct class *cls, struct device *parent,
        dev_t devt, void *drvdata,
        const char *fmt, ...);
extern __attribute__((format(printf, 6, 7)))
struct device *device_create_with_groups(struct class *cls,
        struct device *parent, dev_t devt, void *drvdata,
        const struct attribute_group **groups,
        const char *fmt, ...);
extern void device_destroy(struct class *cls, dev_t devt);

extern int device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void device_remove_groups(struct device *dev,
     const struct attribute_group **groups);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int device_add_group(struct device *dev,
     const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_add_groups(dev, groups);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void device_remove_group(struct device *dev,
           const struct attribute_group *grp)
{
 const struct attribute_group *groups[] = { grp, ((void *)0) };

 return device_remove_groups(dev, groups);
}

extern int devm_device_add_groups(struct device *dev,
     const struct attribute_group **groups);
extern void devm_device_remove_groups(struct device *dev,
          const struct attribute_group **groups);
extern int devm_device_add_group(struct device *dev,
     const struct attribute_group *grp);
extern void devm_device_remove_group(struct device *dev,
         const struct attribute_group *grp);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






extern struct device *get_device(struct device *dev);
extern void put_device(struct device *dev);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int devtmpfs_create_node(struct device *dev) { return 0; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int devtmpfs_delete_node(struct device *dev) { return 0; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int devtmpfs_mount(const char *mountpoint) { return 0; }



extern void device_shutdown(void);


extern const char *dev_driver_string(const struct device *dev);


struct device_link *device_link_add(struct device *consumer,
        struct device *supplier, u32 flags);
void device_link_del(struct device_link *link);



extern __attribute__((format(printf, 3, 0)))
int dev_vprintk_emit(int level, const struct device *dev,
       const char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int dev_printk_emit(int level, const struct device *dev, const char *fmt, ...);

extern __attribute__((format(printf, 3, 4)))
void dev_printk(const char *level, const struct device *dev,
  const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_emerg(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_alert(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_crit(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_err(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_warn(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void dev_notice(const struct device *dev, const char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
void _dev_info(const struct device *dev, const char *fmt, ...);
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/node.h" 2



struct node {
 struct device dev;




};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int link_mem_sections(int nid, unsigned long start_pfn, unsigned long nr_pages)
{
 return 0;
}


extern void unregister_node(struct node *node);
# 79 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/node.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __register_one_node(int nid)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_one_node(int nid)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_one_node(int nid)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_cpu_under_node(unsigned int cpu, unsigned int nid)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_cpu_under_node(unsigned int cpu, unsigned int nid)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_mem_sect_under_node(struct memory_block *mem_blk,
       int nid)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,
        unsigned long phys_index)
{
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void register_hugetlbfs_with_node(node_registration_func_t reg,
      node_registration_func_t unreg)
{
}
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h" 1
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
enum cpuhp_state {
 CPUHP_INVALID = -1,
 CPUHP_OFFLINE = 0,
 CPUHP_CREATE_THREADS,
 CPUHP_PERF_PREPARE,
 CPUHP_PERF_X86_PREPARE,
 CPUHP_PERF_X86_AMD_UNCORE_PREP,
 CPUHP_PERF_BFIN,
 CPUHP_PERF_POWER,
 CPUHP_PERF_SUPERH,
 CPUHP_X86_HPET_DEAD,
 CPUHP_X86_APB_DEAD,
 CPUHP_X86_MCE_DEAD,
 CPUHP_VIRT_NET_DEAD,
 CPUHP_SLUB_DEAD,
 CPUHP_MM_WRITEBACK_DEAD,
 CPUHP_MM_VMSTAT_DEAD,
 CPUHP_SOFTIRQ_DEAD,
 CPUHP_NET_MVNETA_DEAD,
 CPUHP_CPUIDLE_DEAD,
 CPUHP_ARM64_FPSIMD_DEAD,
 CPUHP_ARM_OMAP_WAKE_DEAD,
 CPUHP_IRQ_POLL_DEAD,
 CPUHP_BLOCK_SOFTIRQ_DEAD,
 CPUHP_ACPI_CPUDRV_DEAD,
 CPUHP_S390_PFAULT_DEAD,
 CPUHP_BLK_MQ_DEAD,
 CPUHP_FS_BUFF_DEAD,
 CPUHP_PRINTK_DEAD,
 CPUHP_MM_MEMCQ_DEAD,
 CPUHP_PERCPU_CNT_DEAD,
 CPUHP_RADIX_DEAD,
 CPUHP_PAGE_ALLOC_DEAD,
 CPUHP_NET_DEV_DEAD,
 CPUHP_PCI_XGENE_DEAD,
 CPUHP_IOMMU_INTEL_DEAD,
 CPUHP_LUSTRE_CFS_DEAD,
 CPUHP_WORKQUEUE_PREP,
 CPUHP_POWER_NUMA_PREPARE,
 CPUHP_HRTIMERS_PREPARE,
 CPUHP_PROFILE_PREPARE,
 CPUHP_X2APIC_PREPARE,
 CPUHP_SMPCFD_PREPARE,
 CPUHP_RELAY_PREPARE,
 CPUHP_SLAB_PREPARE,
 CPUHP_MD_RAID5_PREPARE,
 CPUHP_RCUTREE_PREP,
 CPUHP_CPUIDLE_COUPLED_PREPARE,
 CPUHP_POWERPC_PMAC_PREPARE,
 CPUHP_POWERPC_MMU_CTX_PREPARE,
 CPUHP_XEN_PREPARE,
 CPUHP_XEN_EVTCHN_PREPARE,
 CPUHP_ARM_SHMOBILE_SCU_PREPARE,
 CPUHP_SH_SH3X_PREPARE,
 CPUHP_NET_FLOW_PREPARE,
 CPUHP_TOPOLOGY_PREPARE,
 CPUHP_NET_IUCV_PREPARE,
 CPUHP_ARM_BL_PREPARE,
 CPUHP_TRACE_RB_PREPARE,
 CPUHP_MM_ZS_PREPARE,
 CPUHP_MM_ZSWP_MEM_PREPARE,
 CPUHP_MM_ZSWP_POOL_PREPARE,
 CPUHP_KVM_PPC_BOOK3S_PREPARE,
 CPUHP_ZCOMP_PREPARE,
 CPUHP_TIMERS_PREPARE,
 CPUHP_MIPS_SOC_PREPARE,
 CPUHP_BP_PREPARE_DYN,
 CPUHP_BP_PREPARE_DYN_END = CPUHP_BP_PREPARE_DYN + 20,
 CPUHP_BRINGUP_CPU,
 CPUHP_AP_IDLE_DEAD,
 CPUHP_AP_OFFLINE,
 CPUHP_AP_SCHED_STARTING,
 CPUHP_AP_RCUTREE_DYING,
 CPUHP_AP_IRQ_GIC_STARTING,
 CPUHP_AP_IRQ_HIP04_STARTING,
 CPUHP_AP_IRQ_ARMADA_XP_STARTING,
 CPUHP_AP_IRQ_BCM2836_STARTING,
 CPUHP_AP_ARM_MVEBU_COHERENCY,
 CPUHP_AP_MICROCODE_LOADER,
 CPUHP_AP_PERF_X86_AMD_UNCORE_STARTING,
 CPUHP_AP_PERF_X86_STARTING,
 CPUHP_AP_PERF_X86_AMD_IBS_STARTING,
 CPUHP_AP_PERF_X86_CQM_STARTING,
 CPUHP_AP_PERF_X86_CSTATE_STARTING,
 CPUHP_AP_PERF_XTENSA_STARTING,
 CPUHP_AP_PERF_METAG_STARTING,
 CPUHP_AP_MIPS_OP_LOONGSON3_STARTING,
 CPUHP_AP_ARM_VFP_STARTING,
 CPUHP_AP_ARM64_DEBUG_MONITORS_STARTING,
 CPUHP_AP_PERF_ARM_HW_BREAKPOINT_STARTING,
 CPUHP_AP_PERF_ARM_ACPI_STARTING,
 CPUHP_AP_PERF_ARM_STARTING,
 CPUHP_AP_ARM_L2X0_STARTING,
 CPUHP_AP_EXYNOS4_MCT_TIMER_STARTING,
 CPUHP_AP_ARM_ARCH_TIMER_STARTING,
 CPUHP_AP_ARM_GLOBAL_TIMER_STARTING,
 CPUHP_AP_JCORE_TIMER_STARTING,
 CPUHP_AP_ARM_TWD_STARTING,
 CPUHP_AP_METAG_TIMER_STARTING,
 CPUHP_AP_QCOM_TIMER_STARTING,
 CPUHP_AP_ARMADA_TIMER_STARTING,
 CPUHP_AP_MARCO_TIMER_STARTING,
 CPUHP_AP_MIPS_GIC_TIMER_STARTING,
 CPUHP_AP_ARC_TIMER_STARTING,
 CPUHP_AP_KVM_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING,
 CPUHP_AP_KVM_ARM_VGIC_STARTING,
 CPUHP_AP_KVM_ARM_TIMER_STARTING,

 CPUHP_AP_DUMMY_TIMER_STARTING,
 CPUHP_AP_ARM_XEN_STARTING,
 CPUHP_AP_ARM_CORESIGHT_STARTING,
 CPUHP_AP_ARM64_ISNDEP_STARTING,
 CPUHP_AP_SMPCFD_DYING,
 CPUHP_AP_X86_TBOOT_DYING,
 CPUHP_AP_ONLINE,
 CPUHP_TEARDOWN_CPU,
 CPUHP_AP_ONLINE_IDLE,
 CPUHP_AP_SMPBOOT_THREADS,
 CPUHP_AP_X86_VDSO_VMA_ONLINE,
 CPUHP_AP_IRQ_AFFINITY_ONLINE,
 CPUHP_AP_PERF_ONLINE,
 CPUHP_AP_PERF_X86_ONLINE,
 CPUHP_AP_PERF_X86_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_UNCORE_ONLINE,
 CPUHP_AP_PERF_X86_AMD_POWER_ONLINE,
 CPUHP_AP_PERF_X86_RAPL_ONLINE,
 CPUHP_AP_PERF_X86_CQM_ONLINE,
 CPUHP_AP_PERF_X86_CSTATE_ONLINE,
 CPUHP_AP_PERF_S390_CF_ONLINE,
 CPUHP_AP_PERF_S390_SF_ONLINE,
 CPUHP_AP_PERF_ARM_CCI_ONLINE,
 CPUHP_AP_PERF_ARM_CCN_ONLINE,
 CPUHP_AP_PERF_ARM_L2X0_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L2_ONLINE,
 CPUHP_AP_PERF_ARM_QCOM_L3_ONLINE,
 CPUHP_AP_PERF_POWERPC_NEST_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_CORE_IMC_ONLINE,
 CPUHP_AP_PERF_POWERPC_THREAD_IMC_ONLINE,
 CPUHP_AP_WORKQUEUE_ONLINE,
 CPUHP_AP_RCUTREE_ONLINE,
 CPUHP_AP_BASE_CACHEINFO_ONLINE,
 CPUHP_AP_ONLINE_DYN,
 CPUHP_AP_ONLINE_DYN_END = CPUHP_AP_ONLINE_DYN + 30,
 CPUHP_AP_X86_HPET_ONLINE,
 CPUHP_AP_X86_KVM_CLK_ONLINE,
 CPUHP_AP_ACTIVE,
 CPUHP_ONLINE,
};

int __cpuhp_setup_state(enum cpuhp_state state, const char *name, bool invoke,
   int (*startup)(unsigned int cpu),
   int (*teardown)(unsigned int cpu), bool multi_instance);

int __cpuhp_setup_state_cpuslocked(enum cpuhp_state state, const char *name,
       bool invoke,
       int (*startup)(unsigned int cpu),
       int (*teardown)(unsigned int cpu),
       bool multi_instance);
# 194 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_setup_state(enum cpuhp_state state,
        const char *name,
        int (*startup)(unsigned int cpu),
        int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, true, startup, teardown, false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_setup_state_cpuslocked(enum cpuhp_state state,
            const char *name,
            int (*startup)(unsigned int cpu),
            int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, true, startup,
           teardown, false);
}
# 222 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_setup_state_nocalls(enum cpuhp_state state,
         const char *name,
         int (*startup)(unsigned int cpu),
         int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state(state, name, false, startup, teardown,
       false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_setup_state_nocalls_cpuslocked(enum cpuhp_state state,
           const char *name,
           int (*startup)(unsigned int cpu),
           int (*teardown)(unsigned int cpu))
{
 return __cpuhp_setup_state_cpuslocked(state, name, false, startup,
         teardown, false);
}
# 252 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_setup_state_multi(enum cpuhp_state state,
       const char *name,
       int (*startup)(unsigned int cpu,
        struct hlist_node *node),
       int (*teardown)(unsigned int cpu,
         struct hlist_node *node))
{
 return __cpuhp_setup_state(state, name, false,
       (void *) startup,
       (void *) teardown, true);
}

int __cpuhp_state_add_instance(enum cpuhp_state state, struct hlist_node *node,
          bool invoke);
int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state state,
       struct hlist_node *node, bool invoke);
# 279 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_state_add_instance(enum cpuhp_state state,
        struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, true);
}
# 294 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_state_add_instance_nocalls(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance(state, node, false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
cpuhp_state_add_instance_nocalls_cpuslocked(enum cpuhp_state state,
         struct hlist_node *node)
{
 return __cpuhp_state_add_instance_cpuslocked(state, node, false);
}

void __cpuhp_remove_state(enum cpuhp_state state, bool invoke);
void __cpuhp_remove_state_cpuslocked(enum cpuhp_state state, bool invoke);
# 317 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpuhp_remove_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, true);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpuhp_remove_state_nocalls(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpuhp_remove_state_nocalls_cpuslocked(enum cpuhp_state state)
{
 __cpuhp_remove_state_cpuslocked(state, false);
}
# 345 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpuhp_remove_multi_state(enum cpuhp_state state)
{
 __cpuhp_remove_state(state, false);
}

int __cpuhp_state_remove_instance(enum cpuhp_state state,
      struct hlist_node *node, bool invoke);
# 362 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_state_remove_instance(enum cpuhp_state state,
           struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, true);
}
# 376 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpuhotplug.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cpuhp_state_remove_instance_nocalls(enum cpuhp_state state,
            struct hlist_node *node)
{
 return __cpuhp_state_remove_instance(state, node, false);
}


void cpuhp_online_idle(enum cpuhp_state state);
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h" 2

struct device;
struct device_node;
struct attribute_group;

struct cpu {
 int node_id;
 int hotpluggable;
 struct device dev;
};

extern void boot_cpu_init(void);
extern void boot_cpu_hotplug_init(void);
extern void cpu_init(void);
extern void trap_init(void);

extern int register_cpu(struct cpu *cpu, int num);
extern struct device *get_cpu_device(unsigned cpu);
extern bool cpu_is_hotpluggable(unsigned cpu);
extern bool arch_match_cpu_phys_id(int cpu, u64 phys_id);
extern bool arch_find_n_match_cpu_physical_id(struct device_node *cpun,
           int cpu, unsigned int *thread);

extern int cpu_add_dev_attr(struct device_attribute *attr);
extern void cpu_remove_dev_attr(struct device_attribute *attr);

extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);

extern ssize_t cpu_show_meltdown(struct device *dev,
     struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v1(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spectre_v2(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_spec_store_bypass(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_l1tf(struct device *dev,
        struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_mds(struct device *dev,
       struct device_attribute *attr, char *buf);
extern ssize_t cpu_show_tsx_async_abort(struct device *dev,
     struct device_attribute *attr,
     char *buf);
extern ssize_t cpu_show_itlb_multihit(struct device *dev,
          struct device_attribute *attr, char *buf);

extern __attribute__((format(printf, 4, 5)))
struct device *cpu_device_create(struct device *parent, void *drvdata,
     const struct attribute_group **groups,
     const char *fmt, ...);

extern void unregister_cpu(struct cpu *cpu);
extern ssize_t arch_cpu_probe(const char *, size_t);
extern ssize_t arch_cpu_release(const char *, size_t);

struct notifier_block;
# 100 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h"
extern bool cpuhp_tasks_frozen;
int cpu_up(unsigned int cpu);
void notify_cpu_starting(unsigned int cpu);
extern void cpu_maps_update_begin(void);
extern void cpu_maps_update_done(void);
# 118 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h"
extern struct bus_type cpu_subsys;


extern void cpus_write_lock(void);
extern void cpus_write_unlock(void);
extern void cpus_read_lock(void);
extern void cpus_read_unlock(void);
extern void lockdep_assert_cpus_held(void);
extern void cpu_hotplug_disable(void);
extern void cpu_hotplug_enable(void);
void clear_tasks_mm_cpumask(int cpu);
int cpu_down(unsigned int cpu);
# 143 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpu_hotplug_begin(void) { cpus_write_lock(); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void cpu_hotplug_done(void) { cpus_write_unlock(); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void get_online_cpus(void) { cpus_read_lock(); }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void put_online_cpus(void) { cpus_read_unlock(); }


extern int freeze_secondary_cpus(int primary);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int disable_nonboot_cpus(void)
{
 return freeze_secondary_cpus(0);
}
extern void enable_nonboot_cpus(void);





void cpu_startup_entry(enum cpuhp_state state);

void cpu_idle_poll_ctrl(bool enable);




bool cpu_in_idle(unsigned long pc);

void arch_cpu_idle(void);
void arch_cpu_idle_prepare(void);
void arch_cpu_idle_enter(void);
void arch_cpu_idle_exit(void);
void arch_cpu_idle_dead(void);

int cpu_report_state(int cpu);
int cpu_check_up_prepare(int cpu);
void cpu_set_state_online(int cpu);
void play_idle(unsigned long duration_ms);


bool cpu_wait_death(unsigned int cpu, int seconds);
bool cpu_report_death(void);
void cpuhp_report_idle_dead(void);




enum cpuhp_smt_control {
 CPU_SMT_ENABLED,
 CPU_SMT_DISABLED,
 CPU_SMT_FORCE_DISABLED,
 CPU_SMT_NOT_SUPPORTED,
};


extern enum cpuhp_smt_control cpu_smt_control;
extern void cpu_smt_disable(bool force);
extern void cpu_smt_check_topology(void);
extern int cpuhp_smt_enable(void);
extern int cpuhp_smt_disable(enum cpuhp_smt_control ctrlval);
# 209 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cpu.h"
extern bool cpu_mitigations_off(void);
extern bool cpu_mitigations_auto_nosmt(void);
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmod.h" 1
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmod.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/umh.h" 1








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysctl.h" 1
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysctl.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sysctl.h" 1
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sysctl.h"
struct __sysctl_args {
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
 KERN_PANIC_ON_WARN=77,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 NET_IPV6_ACCEPT_RA_FROM_LOCAL=26,
 NET_IPV6_ACCEPT_RA_RT_INFO_MIN_PLEN=27,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT=1
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};


enum {
 NET_IRDA_DISCOVERY=1,
 NET_IRDA_DEVNAME=2,
 NET_IRDA_DEBUG=3,
 NET_IRDA_FAST_POLL=4,
 NET_IRDA_DISCOVERY_SLOTS=5,
 NET_IRDA_DISCOVERY_TIMEOUT=6,
 NET_IRDA_SLOT_TIMEOUT=7,
 NET_IRDA_MAX_BAUD_RATE=8,
 NET_IRDA_MIN_TX_TURN_TIME=9,
 NET_IRDA_MAX_TX_DATA_SIZE=10,
 NET_IRDA_MAX_TX_WINDOW=11,
 NET_IRDA_MAX_NOREPLY_TIME=12,
 NET_IRDA_WARN_NOREPLY_TIME=13,
 NET_IRDA_LAP_KEEPALIVE_TIME=14,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysctl.h" 2


struct completion;
struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;

typedef int proc_handler (struct ctl_table *ctl, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

extern int proc_dostring(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_minmax(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_douintvec_minmax(struct ctl_table *table, int write,
     void *buffer, size_t *lenp,
     loff_t *ppos);
extern int proc_dointvec_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_ms_jiffies(struct ctl_table *, int,
        void *, size_t *, loff_t *);
extern int proc_doulongvec_minmax(struct ctl_table *, int,
      void *, size_t *, loff_t *);
extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int,
          void *, size_t *, loff_t *);
extern int proc_do_large_bitmap(struct ctl_table *, int,
    void *, size_t *, loff_t *);
# 95 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysctl.h"
struct ctl_table_poll {
 atomic_t event;
 wait_queue_head_t wait;
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
# 113 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysctl.h"
struct ctl_table
{
 const char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;
} ;

struct ctl_node {
 struct rb_node node;
 struct ctl_table_header *header;
};



struct ctl_table_header
{
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  };
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;
 struct hlist_head inodes;
};

struct ctl_dir {

 struct ctl_table_header header;
 struct rb_root root;
};

struct ctl_table_set {
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;
};

struct ctl_table_root {
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root);
 void (*set_ownership)(struct ctl_table_header *head,
         struct ctl_table *table,
         kuid_t *uid, kgid_t *gid);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);
};


struct ctl_path {
 const char *procname;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 const char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 const struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl(const char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths(const struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);

extern struct ctl_table sysctl_mount_point[];
# 233 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sysctl.h"
int sysctl_max_threads(struct ctl_table *table, int write,
         void *buffer, size_t *lenp, loff_t *ppos);
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/umh.h" 2

struct cred;
struct file;






struct subprocess_info {
 struct work_struct work;
 struct completion *complete;
 const char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;
} ;

extern int
call_usermodehelper(const char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(const char *path, char **argv, char **envp,
     gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmod.h" 2
# 33 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmod.h"
extern char modprobe_path[];


extern __attribute__((format(printf, 2, 3)))
int __request_module(bool wait, const char *name, ...);
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/elf.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/user.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/user_64.h" 1
# 51 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/user_64.h"
struct user_i387_struct {
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;

 unsigned short fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 padding[24];
};




struct user_regs_struct {
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;
 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;
 unsigned long orig_ax;
 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;
 unsigned long fs_base;
 unsigned long gs_base;
 unsigned long ds;
 unsigned long es;
 unsigned long fs;
 unsigned long gs;
};





struct user {


  struct user_regs_struct regs;

  int u_fpvalid;

  int pad0;
  struct user_i387_struct i387;

  unsigned long int u_tsize;
  unsigned long int u_dsize;
  unsigned long int u_ssize;
  unsigned long start_code;
  unsigned long start_stack;



  long int signal;
  int reserved;
  int pad1;
  unsigned long u_ar0;

  struct user_i387_struct *u_fpstate;
  unsigned long magic;
  char u_comm[32];
  unsigned long u_debugreg[8];
  unsigned long error_code;
  unsigned long fault_address;
};
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/user.h" 2




struct user_ymmh_regs {

 __u32 ymmh_space[64];
};

struct user_xstate_header {
 __u64 xfeatures;
 __u64 reserved1[2];
 __u64 reserved2[5];
};
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/user.h"
struct user_xstateregs {
 struct {
  __u64 fpx_space[58];
  __u64 xstate_fx_sw[6];
 } i387;
 struct user_xstate_header header;
 struct user_ymmh_regs ymmh;

};
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/auxvec.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h" 2

typedef unsigned long elf_greg_t;


typedef elf_greg_t elf_gregset_t[(sizeof(struct user_regs_struct) / sizeof(elf_greg_t))];

typedef struct user_i387_struct elf_fpregset_t;
# 77 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vdso.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vdso.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/auxvec.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/auxvec.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/auxvec.h" 2
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h" 2






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uprobes.h" 1
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uprobes.h"
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;
struct page;






enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;
};



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uprobes.h" 1
# 28 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uprobes.h"
typedef u8 uprobe_opcode_t;







struct uprobe_xol_ops;

struct arch_uprobe {
 union {
  u8 insn[16];
  u8 ixol[16];
 };

 const struct uprobe_xol_ops *ops;

 union {
  struct {
   s32 offs;
   u8 ilen;
   u8 opc1;
  } branch;
  struct {
   u8 fixups;
   u8 ilen;
  } defparam;
 };
};

struct arch_uprobe_task {

 unsigned long saved_scratch_register;

 unsigned int saved_trap_nr;
 unsigned int saved_tf;
};
# 63 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uprobes.h" 2

enum uprobe_task_state {
 UTASK_RUNNING,
 UTASK_SSTEP,
 UTASK_SSTEP_ACK,
 UTASK_SSTEP_TRAPPED,
};




struct uprobe_task {
 enum uprobe_task_state state;

 union {
  struct {
   struct arch_uprobe_task autask;
   unsigned long vaddr;
  };

  struct {
   struct callback_head dup_xol_work;
   unsigned long dup_xol_addr;
  };
 };

 struct uprobe *active_uprobe;
 unsigned long xol_vaddr;

 struct return_instance *return_instances;
 unsigned int depth;
};

struct return_instance {
 struct uprobe *uprobe;
 unsigned long func;
 unsigned long stack;
 unsigned long orig_ret_vaddr;
 bool chained;

 struct return_instance *next;
};

enum rp_check {
 RP_CHECK_CALL,
 RP_CHECK_CHAIN_CALL,
 RP_CHECK_RET,
};

struct xol_area;

struct uprobes_state {
 struct xol_area *xol_area;
};

extern int set_swbp(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern int set_orig_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern bool is_swbp_insn(uprobe_opcode_t *insn);
extern bool is_trap_insn(uprobe_opcode_t *insn);
extern unsigned long uprobe_get_swbp_addr(struct pt_regs *regs);
extern unsigned long uprobe_get_trap_addr(struct pt_regs *regs);
extern int uprobe_write_opcode(struct mm_struct *mm, unsigned long vaddr, uprobe_opcode_t);
extern int uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool);
extern void uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_mmap(struct vm_area_struct *vma);
extern void uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end);
extern void uprobe_start_dup_mmap(void);
extern void uprobe_end_dup_mmap(void);
extern void uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm);
extern void uprobe_free_utask(struct task_struct *t);
extern void uprobe_copy_process(struct task_struct *t, unsigned long flags);
extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
extern void uprobe_notify_resume(struct pt_regs *regs);
extern bool uprobe_deny_signal(void);
extern bool arch_uprobe_skip_sstep(struct arch_uprobe *aup, struct pt_regs *regs);
extern void uprobe_clear_state(struct mm_struct *mm);
extern int arch_uprobe_analyze_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr);
extern int arch_uprobe_pre_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern int arch_uprobe_post_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern bool arch_uprobe_xol_was_trapped(struct task_struct *tsk);
extern int arch_uprobe_exception_notify(struct notifier_block *self, unsigned long val, void *data);
extern void arch_uprobe_abort_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern unsigned long arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr, struct pt_regs *regs);
extern bool arch_uretprobe_is_alive(struct return_instance *ret, enum rp_check ctx, struct pt_regs *regs);
extern bool arch_uprobe_ignore(struct arch_uprobe *aup, struct pt_regs *regs);
extern void arch_uprobe_copy_ixol(struct page *page, unsigned long vaddr,
      void *src, unsigned long len);
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h" 2
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
struct address_space;
struct mem_cgroup;
struct hmm;
# 42 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
struct page {

 unsigned long flags;

 union {
  struct address_space *mapping;






  void *s_mem;
  atomic_t compound_mapcount;

 };


 union {
  unsigned long index;
  void *freelist;

 };

 union {



  unsigned long counters;
# 79 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
  struct {

   union {
# 91 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
    atomic_t _mapcount;

    unsigned int active;
    struct {
     unsigned inuse:16;
     unsigned objects:15;
     unsigned frozen:1;
    };
    int units;
   };




   atomic_t _refcount;
  };
 };
# 116 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 union {
  struct list_head lru;




  struct dev_pagemap *pgmap;




  struct {
   struct page *next;

   int pages;
   int pobjects;




  };

  struct callback_head callback_head;



  struct {
   unsigned long compound_head;
# 153 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
   unsigned int compound_dtor;
   unsigned int compound_order;




  };
# 170 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 };


 union {
  unsigned long private;
# 185 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
  spinlock_t ptl;


  struct kmem_cache *slab_cache;
 };


 struct mem_cgroup *mem_cgroup;
# 213 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
}





 __attribute__((aligned(2 * sizeof(unsigned long))))

;




struct page_frag_cache {
 void * va;

 __u16 offset;
 __u16 size;






 unsigned int pagecnt_bias;
 bool pfmemalloc;
};

typedef unsigned long vm_flags_t;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) atomic_t *compound_mapcount_ptr(struct page *page)
{
 return &page[1].compound_mapcount;
}






struct vm_region {
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;

 int vm_usage;
 bool vm_icache_flushed : 1;

};
# 274 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {};
# 283 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
struct vm_area_struct {


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;
 pgprot_t vm_page_prot;
 unsigned long vm_flags;
# 317 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 union {
  struct {
   struct rb_node rb;
   unsigned long rb_subtree_last;
  } shared;
  const char *anon_name;
 };







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 const struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;

 atomic_long_t swap_readahead_info;






 struct vm_userfaultfd_ctx vm_userfaultfd_ctx;
} ;

struct core_thread {
 struct task_struct *task;
 struct core_thread *next;
};

struct core_state {
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;
};

struct kioctx_table;
struct mm_struct {
 struct vm_area_struct *mmap;
 struct rb_root mm_rb;
 u64 vmacache_seqnum;

 unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

 unsigned long mmap_base;
 unsigned long mmap_legacy_base;


 unsigned long mmap_compat_base;
 unsigned long mmap_compat_legacy_base;

 unsigned long task_size;
 unsigned long highest_vm_end;
 pgd_t * pgd;
# 395 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 atomic_t mm_users;
# 404 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 atomic_t mm_count;

 atomic_long_t nr_ptes;

 atomic_long_t nr_pmds;

 int map_count;

 spinlock_t page_table_lock;
 struct rw_semaphore mmap_sem;

 struct list_head mmlist;





 unsigned long hiwater_rss;
 unsigned long hiwater_vm;

 unsigned long total_vm;
 unsigned long locked_vm;
 unsigned long pinned_vm;
 unsigned long data_vm;
 unsigned long exec_vm;
 unsigned long stack_vm;
 unsigned long def_flags;
 unsigned long start_code, end_code, start_data, end_data;
 unsigned long start_brk, brk, start_stack;
 unsigned long arg_start, arg_end, env_start, env_end;

 unsigned long saved_auxv[(2*(2 + 20 + 1))];





 struct mm_rss_stat rss_stat;

 struct linux_binfmt *binfmt;

 cpumask_var_t cpu_vm_mask_var;


 mm_context_t context;

 unsigned long flags;

 struct core_state *core_state;

 atomic_t membarrier_state;


 spinlock_t ioctx_lock;
 struct kioctx_table *ioctx_table;
# 471 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 struct task_struct *owner;

 struct user_namespace *user_ns;


 struct file *exe_file;
# 505 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 atomic_t tlb_flush_pending;


 bool tlb_flush_batched;

 struct uprobes_state uprobes_state;

 atomic_long_t hugetlb_usage;

 struct work_struct async_put_work;





} ;

extern struct mm_struct init_mm;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mm_init_cpumask(struct mm_struct *mm)
{



 cpumask_clear(mm->cpu_vm_mask_var);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return mm->cpu_vm_mask_var;
}

struct mmu_gather;
extern void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
    unsigned long start, unsigned long end);
extern void tlb_finish_mmu(struct mmu_gather *tlb,
    unsigned long start, unsigned long end);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_set(&mm->tlb_flush_pending, 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inc_tlb_flush_pending(struct mm_struct *mm)
{
 atomic_inc(&mm->tlb_flush_pending);
# 588 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dec_tlb_flush_pending(struct mm_struct *mm)
{
# 600 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 atomic_dec(&mm->tlb_flush_pending);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool mm_tlb_flush_pending(struct mm_struct *mm)
{
# 613 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/mm_types.h"
 return atomic_read(&mm->tlb_flush_pending);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool mm_tlb_flush_nested(struct mm_struct *mm)
{







 return atomic_read(&mm->tlb_flush_pending) > 1;
}

struct vm_fault;

struct vm_special_mapping {
 const char *name;







 struct page **pages;





 int (*fault)(const struct vm_special_mapping *sm,
       struct vm_area_struct *vma,
       struct vm_fault *vmf);

 int (*mremap)(const struct vm_special_mapping *sm,
       struct vm_area_struct *new_vma);
};

enum tlb_flush_reason {
 TLB_FLUSH_ON_TASK_SWITCH,
 TLB_REMOTE_SHOOTDOWN,
 TLB_LOCAL_SHOOTDOWN,
 TLB_LOCAL_MM_SHOOTDOWN,
 TLB_REMOTE_SEND_IPI,
 NR_TLB_FLUSH_REASONS,
};





typedef struct {
 unsigned long val;
} swp_entry_t;


static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *vma_get_anon_name(struct vm_area_struct *vma)
{
 if (vma->vm_file)
  return ((void *)0);

 return vma->anon_name;
}
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vdso.h" 2

struct vdso_image {
 void *data;
 unsigned long size;

 unsigned long alt, alt_len;

 long sym_vvar_start;

 long sym_vvar_page;
 long sym_hpet_page;
 long sym_pvclock_page;
 long sym_hvclock_page;
 long sym_VDSO32_NOTE_MASK;
 long sym___kernel_sigreturn;
 long sym___kernel_rt_sigreturn;
 long sym___kernel_vsyscall;
 long sym_int80_landing_pad;
};


extern const struct vdso_image vdso_image_64;







extern const struct vdso_image vdso_image_32;


extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) init_vdso_image(const struct vdso_image *image);

extern int map_vdso_once(const struct vdso_image *image, unsigned long addr);
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h" 2


extern unsigned int vdso64_enabled;


extern unsigned int vdso32_enabled;
# 172 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void elf_common_init(struct thread_struct *t,
       struct pt_regs *regs, const u16 ds)
{

                 regs->bx = regs->cx = regs->dx = 0;
 regs->si = regs->di = regs->bp = 0;
 regs->r8 = regs->r9 = regs->r10 = regs->r11 = 0;
 regs->r12 = regs->r13 = regs->r14 = regs->r15 = 0;
 t->fsbase = t->gsbase = 0;
 t->fsindex = t->gsindex = 0;
 t->ds = t->es = ds;
}







void compat_start_thread(struct pt_regs *regs, u32 new_ip, u32 new_sp);


void set_personality_ia32(bool);
# 241 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
extern void set_personality_64bit(void);
extern unsigned int sysctl_vsyscall32;
extern int force_personality32;
# 264 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
extern u32 elf_hwcap2;
# 289 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
struct task_struct;
# 302 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mmap_is_ia32(void)
{
 return 0 ||
        (1 &&
  test_ti_thread_flag(((struct thread_info *)get_current()), 29));
}

extern unsigned long task_size_32bit(void);
extern unsigned long task_size_64bit(int full_addr_space);
extern unsigned long get_mmap_base(int is_legacy);
# 361 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/elf.h"
struct linux_binprm;


extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
extern int compat_arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);



enum align_flags {
 ALIGN_VA_32 = (1UL << (0)),
 ALIGN_VA_64 = (1UL << (1)),
};

struct va_alignment {
 int flags;
 unsigned long mask;
 unsigned long bits;
} __attribute__((__aligned__((1 << (6)))));

extern struct va_alignment va_align;
extern unsigned long align_vdso_addr(unsigned long);
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/elf.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/elf.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/elf-em.h" 1
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/elf.h" 2


typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
# 138 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/elf.h"
typedef struct dynamic{
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
# 161 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/elf.h"
typedef struct elf32_rel {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;

typedef struct elf64_rel {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;

typedef struct elf32_rela{
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;

typedef struct elf64_rela {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;

typedef struct elf32_sym{
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;
} Elf32_Sym;

typedef struct elf64_sym {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;




typedef struct elf32_hdr{
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;

typedef struct elf64_phdr {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
# 303 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/elf.h"
typedef struct elf32_shdr {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;

typedef struct elf64_shdr {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
# 426 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/elf.h"
typedef struct elf32_note {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;


typedef struct elf64_note {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/elf.h" 2
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/elf.h"
extern Elf64_Dyn _DYNAMIC [];
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/elf.h"
struct file;
struct coredump_params;


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_size(void) { return 0; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h" 1
# 38 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h"
struct kernel_param;






enum {
 KERNEL_PARAM_OPS_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {

 unsigned int flags;

 int (*set)(const char *val, const struct kernel_param *kp);

 int (*get)(char *buffer, const struct kernel_param *kp);

 void (*free)(void *arg);
};







enum {
 KERNEL_PARAM_FL_UNSAFE = (1 << 0),
 KERNEL_PARAM_FL_HWPARAM = (1 << 1),
};

struct kernel_param {
 const char *name;
 struct module *mod;
 const struct kernel_param_ops *ops;
 const u16 perm;
 s8 level;
 u8 flags;
 union {
  void *arg;
  const struct kparam_string *str;
  const struct kparam_array *arr;
 };
};

extern const struct kernel_param __start___param[], __stop___param[];


struct kparam_string {
 unsigned int maxlen;
 char *string;
};


struct kparam_array
{
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 const struct kernel_param_ops *ops;
 void *elem;
};
# 238 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h"
extern void kernel_param_lock(struct module *mod);
extern void kernel_param_unlock(struct module *mod);
# 302 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h"
extern bool parameq(const char *name1, const char *name2);
# 312 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h"
extern bool parameqn(const char *name1, const char *name2, size_t n);


extern char *parse_args(const char *name,
        char *args,
        const struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        void *arg,
        int (*unknown)(char *param, char *val,
         const char *doing, void *arg));



extern void destroy_params(const struct kernel_param *params, unsigned num);
# 341 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h"
extern const struct kernel_param_ops param_ops_byte;
extern int param_set_byte(const char *val, const struct kernel_param *kp);
extern int param_get_byte(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_short;
extern int param_set_short(const char *val, const struct kernel_param *kp);
extern int param_get_short(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort(const char *val, const struct kernel_param *kp);
extern int param_get_ushort(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_int;
extern int param_set_int(const char *val, const struct kernel_param *kp);
extern int param_get_int(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_uint;
extern int param_set_uint(const char *val, const struct kernel_param *kp);
extern int param_get_uint(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_long;
extern int param_set_long(const char *val, const struct kernel_param *kp);
extern int param_get_long(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong(const char *val, const struct kernel_param *kp);
extern int param_get_ulong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_ullong;
extern int param_set_ullong(const char *val, const struct kernel_param *kp);
extern int param_get_ullong(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_charp;
extern int param_set_charp(const char *val, const struct kernel_param *kp);
extern int param_get_charp(char *buffer, const struct kernel_param *kp);
extern void param_free_charp(void *arg);



extern const struct kernel_param_ops param_ops_bool;
extern int param_set_bool(const char *val, const struct kernel_param *kp);
extern int param_get_bool(char *buffer, const struct kernel_param *kp);


extern const struct kernel_param_ops param_ops_bool_enable_only;
extern int param_set_bool_enable_only(const char *val,
          const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool(const char *val, const struct kernel_param *kp);
extern int param_get_invbool(char *buffer, const struct kernel_param *kp);



extern const struct kernel_param_ops param_ops_bint;
extern int param_set_bint(const char *val, const struct kernel_param *kp);
# 449 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h"
enum hwparam_type {
 hwparam_ioport,
 hwparam_iomem,
 hwparam_ioport_or_iomem,
 hwparam_irq,
 hwparam_dma,
 hwparam_dma_addr,
 hwparam_other,
};
# 510 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/moduleparam.h"
extern const struct kernel_param_ops param_array_ops;

extern const struct kernel_param_ops param_ops_string;
extern int param_set_copystring(const char *val, const struct kernel_param *);
extern int param_get_string(char *buffer, const struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        const struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree_latch.h" 1
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree_latch.h"
struct latch_tree_node {
 struct rb_node node[2];
};

struct latch_tree_root {
 seqcount_t seq;
 struct rb_root tree[2];
};
# 63 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree_latch.h"
struct latch_tree_ops {
 bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b);
 int (*comp)(void *key, struct latch_tree_node *b);
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
__lt_from_rb(struct rb_node *node, int idx)
{
 return ({ void *__mptr = (void *)(node); do { bool __cond = !(!(!__builtin_types_compatible_p(typeof(*(node)), typeof(((struct latch_tree_node *)0)->node[idx])) && !__builtin_types_compatible_p(typeof(*(node)), typeof(void)))); extern void __compiletime_assert_42(void) ; if (__cond) __compiletime_assert_42(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); ((struct latch_tree_node *)(__mptr - __builtin_offsetof(struct latch_tree_node, node[idx]))); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__lt_insert(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx,
     bool (*less)(struct latch_tree_node *a, struct latch_tree_node *b))
{
 struct rb_root *root = &ltr->tree[idx];
 struct rb_node **link = &root->rb_node;
 struct rb_node *node = &ltn->node[idx];
 struct rb_node *parent = ((void *)0);
 struct latch_tree_node *ltp;

 while (*link) {
  parent = *link;
  ltp = __lt_from_rb(parent, idx);

  if (less(ltn, ltp))
   link = &parent->rb_left;
  else
   link = &parent->rb_right;
 }

 rb_link_node_rcu(node, parent, link);
 rb_insert_color(node, root);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
__lt_erase(struct latch_tree_node *ltn, struct latch_tree_root *ltr, int idx)
{
 rb_erase(&ltn->node[idx], &ltr->tree[idx]);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
__lt_find(void *key, struct latch_tree_root *ltr, int idx,
   int (*comp)(void *key, struct latch_tree_node *node))
{
 struct rb_node *node = ({ typeof(ltr->tree[idx].rb_node) ________p1 = ({ union { typeof(ltr->tree[idx].rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&(ltr->tree[idx].rb_node), __u.__c, sizeof(ltr->tree[idx].rb_node)); else __read_once_size_nocheck(&(ltr->tree[idx].rb_node), __u.__c, sizeof(ltr->tree[idx].rb_node)); do { } while (0); __u.__val; }); ((typeof(*ltr->tree[idx].rb_node) *)(________p1)); });
 struct latch_tree_node *ltn;
 int c;

 while (node) {
  ltn = __lt_from_rb(node, idx);
  c = comp(key, ltn);

  if (c < 0)
   node = ({ typeof(node->rb_left) ________p1 = ({ union { typeof(node->rb_left) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->rb_left), __u.__c, sizeof(node->rb_left)); else __read_once_size_nocheck(&(node->rb_left), __u.__c, sizeof(node->rb_left)); do { } while (0); __u.__val; }); ((typeof(*node->rb_left) *)(________p1)); });
  else if (c > 0)
   node = ({ typeof(node->rb_right) ________p1 = ({ union { typeof(node->rb_right) __val; char __c[1]; } __u; if (1) __read_once_size(&(node->rb_right), __u.__c, sizeof(node->rb_right)); else __read_once_size_nocheck(&(node->rb_right), __u.__c, sizeof(node->rb_right)); do { } while (0); __u.__val; }); ((typeof(*node->rb_right) *)(________p1)); });
  else
   return ltn;
 }

 return ((void *)0);
}
# 142 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree_latch.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
latch_tree_insert(struct latch_tree_node *node,
    struct latch_tree_root *root,
    const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 0, ops->less);
 raw_write_seqcount_latch(&root->seq);
 __lt_insert(node, root, 1, ops->less);
}
# 169 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree_latch.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void
latch_tree_erase(struct latch_tree_node *node,
   struct latch_tree_root *root,
   const struct latch_tree_ops *ops)
{
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 0);
 raw_write_seqcount_latch(&root->seq);
 __lt_erase(node, root, 1);
}
# 198 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rbtree_latch.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) struct latch_tree_node *
latch_tree_find(void *key, struct latch_tree_root *root,
  const struct latch_tree_ops *ops)
{
 struct latch_tree_node *node;
 unsigned int seq;

 do {
  seq = raw_read_seqcount_latch(&root->seq);
  node = __lt_find(key, root, seq & 1, ops->comp);
 } while (read_seqcount_retry(&root->seq, seq));

 return node;
}
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/cfi.h" 1








typedef void (*cfi_check_fn)(uint64_t, void *, void *);





extern void __cfi_check(uint64_t, void *, void *);


extern void cfi_module_add(struct module *mod, unsigned long min_addr,
 unsigned long max_addr);

extern void cfi_module_remove(struct module *mod, unsigned long min_addr,
 unsigned long max_addr);
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/module.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/module.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/module.h" 2


struct mod_arch_specific {





};
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h" 2
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
struct modversion_info {
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];
};

struct module;
struct exception_table_entry;

struct module_kobject {
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;
} ;

struct module_attribute {
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    const char *, size_t count);
 void (*setup)(struct module *, const char *);
 int (*test)(struct module *);
 void (*free)(struct module *);
};

struct module_version_attribute {
 struct module_attribute mattr;
 const char *module_name;
 const char *version;
} __attribute__ ((__aligned__(sizeof(void *))));

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);
# 261 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
struct notifier_block;



extern int modules_disabled;

void *__symbol_get(const char *symbol);
void *__symbol_get_gpl(const char *symbol);



struct module_use {
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};

struct mod_tree_node {
 struct module *mod;
 struct latch_tree_node node;
};

struct module_layout {

 void *base;

 unsigned int size;

 unsigned int text_size;

 unsigned int ro_size;

 unsigned int ro_after_init_size;


 struct mod_tree_node mtn;

};
# 314 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
struct mod_kallsyms {
 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;
};
# 329 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
struct module {
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];


 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 const char *version;
 const char *srcversion;
 struct kobject *holders_dir;


 const struct kernel_symbol *syms;
 const s32 *crcs;
 unsigned int num_syms;


 cfi_check_fn cfi_check;




 struct mutex param_lock;

 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 const struct kernel_symbol *gpl_syms;
 const s32 *gpl_crcs;
# 383 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
 bool async_probe_requested;


 const struct kernel_symbol *gpl_future_syms;
 const s32 *gpl_future_crcs;
 unsigned int num_gpl_future_syms;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 struct module_layout core_layout __attribute__((__aligned__((1 << (6)))));
 struct module_layout init_layout;


 struct mod_arch_specific arch;

 unsigned long taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 struct mod_kallsyms *kallsyms;
 struct mod_kallsyms core_kallsyms;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;



 unsigned int num_tracepoints;
 struct tracepoint * const *tracepoints_ptrs;


 struct jump_entry *jump_entries;
 unsigned int num_jump_entries;


 unsigned int num_trace_bprintk_fmt;
 const char **trace_bprintk_fmt_start;


 struct trace_event_call **trace_events;
 unsigned int num_trace_events;
 struct trace_eval_map **trace_evals;
 unsigned int num_trace_evals;
# 468 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 atomic_t refcnt;







} __attribute__((__aligned__((1 << (6))))) ;




extern struct mutex module_mutex;




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int module_is_live(struct module *mod)
{
 return mod->state != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool __is_module_percpu_address(unsigned long addr, unsigned long *can_addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool within_module_core(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->core_layout.base <= addr &&
        addr < (unsigned long)mod->core_layout.base + mod->core_layout.size;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool within_module_init(unsigned long addr,
          const struct module *mod)
{
 return (unsigned long)mod->init_layout.base <= addr &&
        addr < (unsigned long)mod->init_layout.base + mod->init_layout.size;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool within_module(unsigned long addr, const struct module *mod)
{
 return within_module_init(addr, mod) || within_module_core(addr, mod);
}


struct module *find_module(const char *name);

struct symsearch {
 const struct kernel_symbol *start, *stop;
 const s32 *crcs;
 enum {
  NOT_GPL_ONLY,
  GPL_ONLY,
  WILL_BE_GPL_ONLY,
 } licence;
 bool unused;
};






const struct kernel_symbol *find_symbol(const char *name,
     struct module **owner,
     const s32 **crc,
     bool gplok,
     bool warn);






bool each_symbol_section(bool (*fn)(const struct symsearch *arr,
        struct module *owner,
        void *data), void *data);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name(const char *name);

int module_kallsyms_on_each_symbol(int (*fn)(void *, const char *,
          struct module *, unsigned long),
       void *data);

extern void __attribute__((noreturn)) __module_put_and_exit(struct module *mod,
   long code);



int module_refcount(struct module *mod);
void __symbol_put(const char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
# 605 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
int ref_module(struct module *a, struct module *b);
# 617 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
const char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);

int register_module_notifier(struct notifier_block *nb);
int unregister_module_notifier(struct notifier_block *nb);

extern void print_modules(void);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool module_requested_async_probing(struct module *module)
{
 return module && module->async_probe_requested;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_livepatch_module(struct module *mod)
{
 return false;
}
# 781 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
# 793 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
extern void set_all_modules_text_rw(void);
extern void set_all_modules_text_ro(void);
extern void module_enable_ro(const struct module *mod, bool after_init);
extern void module_disable_ro(const struct module *mod);
# 805 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
void module_bug_finalize(const Elf64_Ehdr *, const Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);
# 820 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
extern bool retpoline_module_ok(bool has_retpoline);
# 834 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/module.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool module_sig_ok(struct module *module)
{
 return true;
}
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nospec.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nospec.h"
struct task_struct;
# 62 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nospec.h"
int arch_prctl_spec_ctrl_get(struct task_struct *task, unsigned long which);
int arch_prctl_spec_ctrl_set(struct task_struct *task, unsigned long which,
        unsigned long ctrl);

void arch_seccomp_spec_mitigate(struct task_struct *task);
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/prctl.h" 1
# 134 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/prctl.h"
struct prctl_mm_map {
 __u64 start_code;
 __u64 end_code;
 __u64 start_data;
 __u64 end_data;
 __u64 start_brk;
 __u64 brk;
 __u64 start_stack;
 __u64 arg_start;
 __u64 arg_end;
 __u64 env_start;
 __u64 env_end;
 __u64 *auxv;
 __u32 auxv_size;
 __u32 exe_fd;
};
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/smt.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/static_key.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/smt.h" 2


extern struct static_key_false sched_smt_present;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) bool sched_smt_active(void)
{
 return ({ bool branch; if (__builtin_types_compatible_p(typeof(*&sched_smt_present), struct static_key_true)) branch = !arch_static_branch(&(&sched_smt_present)->key, true); else if (__builtin_types_compatible_p(typeof(*&sched_smt_present), struct static_key_false)) branch = !arch_static_branch_jump(&(&sched_smt_present)->key, true); else branch = ____wrong_branch_error(); branch; });
}




void arch_smt_update(void);
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spec-ctrl.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spec-ctrl.h"
extern void x86_virt_spec_ctrl(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl, bool guest);
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spec-ctrl.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function))
void x86_spec_ctrl_set_guest(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl)
{
 x86_virt_spec_ctrl(guest_spec_ctrl, guest_virt_spec_ctrl, true);
}
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/spec-ctrl.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function))
void x86_spec_ctrl_restore_host(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl)
{
 x86_virt_spec_ctrl(guest_spec_ctrl, guest_virt_spec_ctrl, false);
}


extern u64 x86_amd_ls_cfg_base;
extern u64 x86_amd_ls_cfg_ssbd_mask;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 ssbd_tif_to_spec_ctrl(u64 tifn)
{
 do { bool __cond = !(!(5 < 2)); extern void __compiletime_assert_43(void) ; if (__cond) __compiletime_assert_43(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (tifn & (1 << 5)) >> (5 - 2);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 stibp_tif_to_spec_ctrl(u64 tifn)
{
 do { bool __cond = !(!(9 < 1)); extern void __compiletime_assert_44(void) ; if (__cond) __compiletime_assert_44(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (tifn & (1 << 9)) >> (9 - 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long ssbd_spec_ctrl_to_tif(u64 spec_ctrl)
{
 do { bool __cond = !(!(5 < 2)); extern void __compiletime_assert_45(void) ; if (__cond) __compiletime_assert_45(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (spec_ctrl & (1UL << (2))) << (5 - 2);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long stibp_spec_ctrl_to_tif(u64 spec_ctrl)
{
 do { bool __cond = !(!(9 < 1)); extern void __compiletime_assert_46(void) ; if (__cond) __compiletime_assert_46(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (spec_ctrl & (1UL << (1))) << (9 - 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 ssbd_tif_to_amd_ls_cfg(u64 tifn)
{
 return (tifn & (1 << 5)) ? x86_amd_ls_cfg_ssbd_mask : 0ULL;
}


extern void speculative_store_bypass_ht_init(void);




extern void speculation_ctrl_update(unsigned long tif);
extern void speculation_ctrl_update_current(void);
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/cmdline.h" 1




int cmdline_find_option_bool(const char *cmdline_ptr, const char *option);
int cmdline_find_option(const char *cmdline_ptr, const char *option,
   char *buffer, int bufsize);
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/bugs.h" 1






extern void check_bugs(void);


void check_mpx_erratum(struct cpuinfo_x86 *c);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) int ppro_with_ram_bug(void) { return 0; }
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/socket.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/socket.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sockios.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/sockios.h" 1
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sockios.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/socket.h" 2
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/socket.h" 2
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sockios.h" 1
# 22 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sockios.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/sockios.h" 1
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/sockios.h" 2
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uio.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uio.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/uio.h" 1
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/uio.h"
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;
};
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uio.h" 2

struct page;
struct pipe_inode_info;

struct kvec {
 void *iov_base;
 size_t iov_len;
};

enum {
 ITER_IOVEC = 0,
 ITER_KVEC = 2,
 ITER_BVEC = 4,
 ITER_PIPE = 8,
};

struct iov_iter {
 int type;
 size_t iov_offset;
 size_t count;
 union {
  const struct iovec *iov;
  const struct kvec *kvec;
  const struct bio_vec *bvec;
  struct pipe_inode_info *pipe;
 };
 union {
  unsigned long nr_segs;
  struct {
   int idx;
   int start_idx;
  };
 };
};
# 57 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uio.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) size_t iov_length(const struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct iovec iov_iter_iovec(const struct iov_iter *iter)
{
 return (struct iovec) {
  .iov_base = iter->iov->iov_base + iter->iov_offset,
  .iov_len = ({ typeof(iter->count) __UNIQUE_ID_min1_47 = (iter->count); typeof(iter->iov->iov_len - iter->iov_offset) __UNIQUE_ID_min2_48 = (iter->iov->iov_len - iter->iov_offset); (void) (&__UNIQUE_ID_min1_47 == &__UNIQUE_ID_min2_48); __UNIQUE_ID_min1_47 < __UNIQUE_ID_min2_48 ? __UNIQUE_ID_min1_47 : __UNIQUE_ID_min2_48; }),

 };
}
# 83 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uio.h"
unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to);

size_t iov_iter_copy_from_user_atomic(struct page *page,
  struct iov_iter *i, unsigned long offset, size_t bytes);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
void iov_iter_revert(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(const struct iov_iter *i);
size_t copy_page_to_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);
size_t copy_page_from_iter(struct page *page, size_t offset, size_t bytes,
    struct iov_iter *i);

size_t _copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter(void *addr, size_t bytes, struct iov_iter *i);
bool _copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i);
size_t _copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i);
bool _copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
size_t copy_to_iter(const void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, true)), 0))
  return 0;
 else
  return _copy_to_iter(addr, bytes, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
size_t copy_from_iter(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter(addr, bytes, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
bool copy_from_iter_full(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return false;
 else
  return _copy_from_iter_full(addr, bytes, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
size_t copy_from_iter_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_nocache(addr, bytes, i);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
bool copy_from_iter_full_nocache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return false;
 else
  return _copy_from_iter_full_nocache(addr, bytes, i);
}
# 154 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uio.h"
size_t _copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i);




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
size_t copy_from_iter_flushcache(void *addr, size_t bytes, struct iov_iter *i)
{
 if (__builtin_expect(!!(!check_copy_size(addr, bytes, false)), 0))
  return 0;
 else
  return _copy_from_iter_flushcache(addr, bytes, i);
}

size_t iov_iter_zero(size_t bytes, struct iov_iter *);
unsigned long iov_iter_alignment(const struct iov_iter *i);
unsigned long iov_iter_gap_alignment(const struct iov_iter *i);
void iov_iter_init(struct iov_iter *i, int direction, const struct iovec *iov,
   unsigned long nr_segs, size_t count);
void iov_iter_kvec(struct iov_iter *i, int direction, const struct kvec *kvec,
   unsigned long nr_segs, size_t count);
void iov_iter_bvec(struct iov_iter *i, int direction, const struct bio_vec *bvec,
   unsigned long nr_segs, size_t count);
void iov_iter_pipe(struct iov_iter *i, int direction, struct pipe_inode_info *pipe,
   size_t count);
ssize_t iov_iter_get_pages(struct iov_iter *i, struct page **pages,
   size_t maxsize, unsigned maxpages, size_t *start);
ssize_t iov_iter_get_pages_alloc(struct iov_iter *i, struct page ***pages,
   size_t maxsize, size_t *start);
int iov_iter_npages(const struct iov_iter *i, int maxpages);

const void *dup_iter(struct iov_iter *new, struct iov_iter *old, gfp_t flags);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) size_t iov_iter_count(const struct iov_iter *i)
{
 return i->count;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool iter_is_iovec(const struct iov_iter *i)
{
 return !(i->type & (ITER_BVEC | ITER_KVEC | ITER_PIPE));
}
# 211 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uio.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void iov_iter_truncate(struct iov_iter *i, u64 count)
{






 if (i->count > count)
  i->count = count;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void iov_iter_reexpand(struct iov_iter *i, size_t count)
{
 i->count = count;
}
size_t csum_and_copy_to_iter(const void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
size_t csum_and_copy_from_iter(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);
bool csum_and_copy_from_iter_full(void *addr, size_t bytes, __wsum *csum, struct iov_iter *i);

int import_iovec(int type, const struct iovec * uvector,
   unsigned nr_segs, unsigned fast_segs,
   struct iovec **iov, struct iov_iter *i);


struct compat_iovec;
int compat_import_iovec(int type, const struct compat_iovec * uvector,
   unsigned nr_segs, unsigned fast_segs,
   struct iovec **iov, struct iov_iter *i);


int import_single_range(int type, void *buf, size_t len,
   struct iovec *iov, struct iov_iter *i);
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/socket.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

struct __kernel_sockaddr_storage {
 __kernel_sa_family_t ss_family;

 char __data[128 - sizeof(unsigned short)];


} __attribute__ ((aligned((__alignof__ (struct sockaddr *)))));
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h" 2

struct pid;
struct cred;





struct seq_file;
extern void socket_seq_show(struct seq_file *seq);


typedef __kernel_sa_family_t sa_family_t;





struct sockaddr {
 sa_family_t sa_family;
 char sa_data[14];
};

struct linger {
 int l_onoff;
 int l_linger;
};
# 48 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h"
struct msghdr {
 void *msg_name;
 int msg_namelen;
 struct iov_iter msg_iter;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
 struct kiocb *msg_iocb;
};

struct user_msghdr {
 void *msg_name;
 int msg_namelen;
 struct iovec *msg_iov;
 __kernel_size_t msg_iovlen;
 void *msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;
};


struct mmsghdr {
 struct user_msghdr msg_hdr;
 unsigned int msg_len;
};







struct cmsghdr {
 __kernel_size_t cmsg_len;
        int cmsg_level;
        int cmsg_type;
};
# 126 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
            struct cmsghdr *__cmsg)
{
 struct cmsghdr * __ptr;

 __ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) + ( ((__cmsg->cmsg_len)+sizeof(long)-1) & ~(sizeof(long)-1) ));
 if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
  return (struct cmsghdr *)0;

 return __ptr;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
 return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) size_t msg_data_left(struct msghdr *msg)
{
 return iov_iter_count(&msg->msg_iter);
}







struct ucred {
 __u32 pid;
 __u32 uid;
 __u32 gid;
};
# 344 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/socket.h"
extern int move_addr_to_kernel(void *uaddr, int ulen, struct __kernel_sockaddr_storage *kaddr);
extern int put_cmsg(struct msghdr*, int level, int type, int len, void *data);

struct timespec;


extern long __sys_recvmsg(int fd, struct user_msghdr *msg, unsigned flags);
extern long __sys_sendmsg(int fd, struct user_msghdr *msg, unsigned flags);
extern int __sys_recvmmsg(int fd, struct mmsghdr *mmsg, unsigned int vlen,
     unsigned int flags, struct timespec *timeout);
extern int __sys_sendmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags);
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h" 1
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/libc-compat.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h" 2
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/hdlc/ioctl.h" 1
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/hdlc/ioctl.h"
typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
} sync_serial_settings;

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
 unsigned int slot_map;
} te1_settings;

typedef struct {
 unsigned short encoding;
 unsigned short parity;
} raw_hdlc_proto;

typedef struct {
 unsigned int t391;
 unsigned int t392;
 unsigned int n391;
 unsigned int n392;
 unsigned int n393;
 unsigned short lmi;
 unsigned short dce;
} fr_proto;

typedef struct {
 unsigned int dlci;
} fr_proto_pvc;

typedef struct {
 unsigned int dlci;
 char master[16];
}fr_proto_pvc_info;

typedef struct {
    unsigned int interval;
    unsigned int timeout;
} cisco_proto;
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h" 2
# 81 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h"
enum net_device_flags {


 IFF_UP = 1<<0,
 IFF_BROADCAST = 1<<1,
 IFF_DEBUG = 1<<2,
 IFF_LOOPBACK = 1<<3,
 IFF_POINTOPOINT = 1<<4,
 IFF_NOTRAILERS = 1<<5,
 IFF_RUNNING = 1<<6,
 IFF_NOARP = 1<<7,
 IFF_PROMISC = 1<<8,
 IFF_ALLMULTI = 1<<9,
 IFF_MASTER = 1<<10,
 IFF_SLAVE = 1<<11,
 IFF_MULTICAST = 1<<12,
 IFF_PORTSEL = 1<<13,
 IFF_AUTOMEDIA = 1<<14,
 IFF_DYNAMIC = 1<<15,


 IFF_LOWER_UP = 1<<16,
 IFF_DORMANT = 1<<17,
 IFF_ECHO = 1<<18,

};
# 166 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h"
enum {
 IF_OPER_UNKNOWN,
 IF_OPER_NOTPRESENT,
 IF_OPER_DOWN,
 IF_OPER_LOWERLAYERDOWN,
 IF_OPER_TESTING,
 IF_OPER_DORMANT,
 IF_OPER_UP,
};


enum {
 IF_LINK_MODE_DEFAULT,
 IF_LINK_MODE_DORMANT,
};
# 194 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h"
struct ifmap {
 unsigned long mem_start;
 unsigned long mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;

};


struct if_settings {
 unsigned int type;
 unsigned int size;
 union {

  raw_hdlc_proto *raw_hdlc;
  cisco_proto *cisco;
  fr_proto *fr;
  fr_proto_pvc *fr_pvc;
  fr_proto_pvc_info *fr_pvc_info;


  sync_serial_settings *sync;
  te1_settings *te1;
 } ifs_ifsu;
};
# 231 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h"
struct ifreq {

 union
 {
  char ifrn_name[16];
 } ifr_ifrn;

 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  int ifru_ivalue;
  int ifru_mtu;
  struct ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  void * ifru_data;
  struct if_settings ifru_settings;
 } ifr_ifru;
};
# 283 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/if.h"
struct ifconf {
 int ifc_len;
 union {
  char *ifcu_buf;
  struct ifreq *ifcu_req;
 } ifc_ifcu;
};
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
struct wait_bit_key {
 void *flags;
 int bit_nr;

 unsigned long timeout;
};

struct wait_bit_queue_entry {
 struct wait_bit_key key;
 struct wait_queue_entry wq_entry;
};







typedef int wait_bit_action_f(struct wait_bit_key *key, int mode);
void __wake_up_bit(struct wait_queue_head *wq_head, void *word, int bit);
int __wait_on_bit(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
int __wait_on_bit_lock(struct wait_queue_head *wq_head, struct wait_bit_queue_entry *wbq_entry, wait_bit_action_f *action, unsigned int mode);
void wake_up_bit(void *word, int bit);
void wake_up_atomic_t(atomic_t *p);
int out_of_line_wait_on_bit(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_bit_timeout(void *word, int, wait_bit_action_f *action, unsigned int mode, unsigned long timeout);
int out_of_line_wait_on_bit_lock(void *word, int, wait_bit_action_f *action, unsigned int mode);
int out_of_line_wait_on_atomic_t(atomic_t *p, int (*)(atomic_t *), unsigned int mode);
struct wait_queue_head *bit_waitqueue(void *word, int bit);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) wait_bit_init(void);

int wake_bit_function(struct wait_queue_entry *wq_entry, unsigned mode, int sync, void *key);
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
extern int bit_wait(struct wait_bit_key *key, int bit);
extern int bit_wait_io(struct wait_bit_key *key, int bit);
extern int bit_wait_timeout(struct wait_bit_key *key, int bit);
extern int bit_wait_io_timeout(struct wait_bit_key *key, int bit);
# 75 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
wait_on_bit(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait,
           mode);
}
# 100 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
wait_on_bit_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit(word, bit,
           bit_wait_io,
           mode);
}
# 126 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
wait_on_bit_timeout(unsigned long *word, int bit, unsigned mode,
      unsigned long timeout)
{
 do { do { } while (0); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit_timeout(word, bit,
            bit_wait_timeout,
            mode, timeout);
}
# 154 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
wait_on_bit_action(unsigned long *word, int bit, wait_bit_action_f *action,
     unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), (word)) : variable_test_bit((bit), (word))))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
# 183 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
wait_on_bit_lock(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait, mode);
}
# 207 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
wait_on_bit_lock_io(unsigned long *word, int bit, unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, bit_wait_io, mode);
}
# 233 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
wait_on_bit_lock_action(unsigned long *word, int bit, wait_bit_action_f *action,
   unsigned mode)
{
 do { do { } while (0); } while (0);
 if (!test_and_set_bit(bit, word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}
# 253 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function))
int wait_on_atomic_t(atomic_t *val, int (*action)(atomic_t *), unsigned mode)
{
 do { do { } while (0); } while (0);
 if (atomic_read(val) == 0)
  return 0;
 return out_of_line_wait_on_atomic_t(val, action, mode);
}
# 271 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/wait_bit.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_and_wake_up_bit(int bit, void *word)
{
 clear_bit_unlock(bit, word);

 do { } while (0);
 wake_up_bit(word, bit);
}
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kdev_t.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/kdev_t.h" 1
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kdev_t.h" 2
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kdev_t.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist_bl.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_bl.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bit_spinlock.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/bit_spinlock.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bit_spin_lock(int bitnum, unsigned long *addr)
{







 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
  do {
   cpu_relax();
  } while ((__builtin_constant_p((bitnum)) ? constant_test_bit((bitnum), (addr)) : variable_test_bit((bitnum), (addr))));
  do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 }

 (void)0;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
  return 0;
 }

 (void)0;
 return 1;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
 (void)0;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 __clear_bit_unlock(bitnum, addr);

 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
 (void)0;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return (__builtin_constant_p((bitnum)) ? constant_test_bit((bitnum), (addr)) : variable_test_bit((bitnum), (addr)));





}
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_bl.h" 2
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_bl.h"
struct hlist_bl_head {
 struct hlist_bl_node *first;
};

struct hlist_bl_node {
 struct hlist_bl_node *next, **pprev;
};



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = ((void *)0);
 h->pprev = ((void *)0);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool hlist_bl_unhashed(const struct hlist_bl_node *h)
{
 return !h->pprev;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)h->first & ~1UL);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (66), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (68), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);

 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool hlist_bl_empty(const struct hlist_bl_head *h)
{
 return !((unsigned long)({ union { typeof(h->first) __val; char __c[1]; } __u; if (1) __read_once_size(&(h->first), __u.__c, sizeof(h->first)); else __read_once_size_nocheck(&(h->first), __u.__c, sizeof(h->first)); do { } while (0); __u.__val; }) & ~1UL);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = n->next;
 struct hlist_bl_node **pprev = n->pprev;

 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/list_bl.h"), "i" (94), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);


 ({ union { typeof(*pprev) __val; char __c[1]; } __u = { .__val = ( typeof(*pprev)) ((struct hlist_bl_node *) ((unsigned long)next | ((unsigned long)*pprev & 1UL))) }; __write_once_size(&(*pprev), __u.__c, sizeof(*pprev)); __u.__val; });



 if (next)
  next->pprev = pprev;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist_bl.h" 2


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 do { if (__builtin_expect(!!((unsigned long)n & 1UL), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rculist_bl.h"), "i" (14), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);
 do { if (__builtin_expect(!!(((unsigned long)h->first & 1UL) != 1UL), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/rculist_bl.h"), "i" (16), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0); } while (0);

 ({ uintptr_t _r_a_p__v = (uintptr_t)((struct hlist_bl_node *)((unsigned long)n | 1UL)); if (__builtin_constant_p((struct hlist_bl_node *)((unsigned long)n | 1UL)) && (_r_a_p__v) == (uintptr_t)((void *)0)) ({ union { typeof((h->first)) __val; char __c[1]; } __u = { .__val = ( typeof((h->first))) ((typeof(h->first))(_r_a_p__v)) }; __write_once_size(&((h->first)), __u.__c, sizeof((h->first))); __u.__val; }); else do { do { bool __cond = !((sizeof(*&h->first) == sizeof(char) || sizeof(*&h->first) == sizeof(short) || sizeof(*&h->first) == sizeof(int) || sizeof(*&h->first) == sizeof(long))); extern void __compiletime_assert_49(void) ; if (__cond) __compiletime_assert_49(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0); __asm__ __volatile__("": : :"memory"); ({ union { typeof(*&h->first) __val; char __c[1]; } __u = { .__val = ( typeof(*&h->first)) ((typeof(*((typeof(h->first))_r_a_p__v)) *)((typeof(h->first))_r_a_p__v)) }; __write_once_size(&(*&h->first), __u.__c, sizeof(*&h->first)); __u.__val; }); } while (0); _r_a_p__v; });

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)({ typeof(*(h->first)) *________p1 = (typeof(*(h->first)) *)({ union { typeof((h->first)) __val; char __c[1]; } __u; if (1) __read_once_size(&((h->first)), __u.__c, sizeof((h->first))); else __read_once_size_nocheck(&((h->first)), __u.__c, sizeof((h->first))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(h->first)) *)(________p1)); }) & ~1UL);
}
# 47 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist_bl.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_del_init_rcu(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  n->pprev = ((void *)0);
 }
}
# 74 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist_bl.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x200 + (0xdead000000000000UL));
}
# 99 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rculist_bl.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h" 2




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockref.h" 1
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/lockref.h"
struct lockref {
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   int count;
  };
 };
};

extern void lockref_get(struct lockref *);
extern int lockref_put_return(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __lockref_is_dead(const struct lockref *l)
{
 return ((int)l->count < 0);
}
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stringhash.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hash.h" 1
# 60 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/hash.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 __hash_32_generic(u32 val)
{
 return val * 0x61C88647;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 hash_32_generic(u32 val, unsigned int bits)
{

 return __hash_32_generic(val) >> (32 - bits);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) u32 hash_64_generic(u64 val, unsigned int bits)
{


 return val * 0x61C8864680B583EBull >> (64 - bits);




}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 hash_ptr(const void *ptr, unsigned int bits)
{
 return hash_64_generic((unsigned long)ptr, bits);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 hash32_ptr(const void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stringhash.h" 2
# 42 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stringhash.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int end_name_hash(unsigned long hash)
{
 return hash_64_generic(hash, 32);
}
# 66 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stringhash.h"
extern unsigned int __attribute__((pure)) full_name_hash(const void *salt, const char *, unsigned int);
# 77 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/stringhash.h"
extern u64 __attribute__((pure)) hashlen_string(const void *salt, const char *name);
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h" 2


struct path;
struct vfsmount;
# 47 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
struct qstr {
 union {
  struct {
   u32 hash; u32 len;
  };
  u64 hash_len;
 };
 const unsigned char *name;
};



extern const char empty_string[];
extern const struct qstr empty_name;
extern const char slash_string[];
extern const struct qstr slash_name;

struct dentry_stat_t {
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long dummy[2];
};
extern struct dentry_stat_t dentry_stat;
# 90 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
struct dentry {

 unsigned int d_flags;
 seqcount_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 const struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 union {
  struct list_head d_lru;
  wait_queue_head_t *d_wait;
 };
 struct list_head d_child;
 struct list_head d_subdirs;



 union {
  struct hlist_node d_alias;
  struct hlist_bl_node d_in_lookup_hash;
   struct callback_head d_rcu;
 } d_u;
} ;







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)(const struct dentry *, struct qstr *);
 int (*d_compare)(const struct dentry *,
   unsigned int, const char *, const struct qstr *);
 int (*d_delete)(const struct dentry *);
 int (*d_init)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(const struct path *, bool);
 struct dentry *(*d_real)(struct dentry *, const struct inode *,
     unsigned int, unsigned int);
 void (*d_canonical_path)(const struct path *, struct path *);
} __attribute__((__aligned__((1 << (6)))));
# 224 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
extern seqlock_t rename_lock;




extern void d_instantiate(struct dentry *, struct inode *);
extern void d_instantiate_new(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern int d_instantiate_no_diralias(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, const struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, const struct qstr *);
extern struct dentry * d_alloc_pseudo(struct super_block *, const struct qstr *);
extern struct dentry * d_alloc_parallel(struct dentry *, const struct qstr *,
     wait_queue_head_t *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry * d_exact_alias(struct dentry *, struct inode *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern struct dentry * d_obtain_root(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern void d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);


extern int path_has_submounts(const struct path *);




extern void d_rehash(struct dentry *);

extern void d_add(struct dentry *, struct inode *);

extern void dentry_update_name_case(struct dentry *, const struct qstr *);


extern void d_move(struct dentry *, struct dentry *);
extern void d_exchange(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
extern struct dentry *__d_lookup_rcu(const struct dentry *parent,
    const struct qstr *name, unsigned *seq);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned d_count(const struct dentry *dentry)
{
 return dentry->d_lockref.count;
}




extern __attribute__((format(printf, 4, 5)))
char *dynamic_dname(struct dentry *, char *, int, const char *, ...);
extern char *simple_dname(struct dentry *, char *, int);

extern char *__d_path(const struct path *, const struct path *, char *, int);
extern char *d_absolute_path(const struct path *, char *, int);
extern char *d_path(const struct path *, char *, int);
extern char *dentry_path_raw(struct dentry *, char *, int);
extern char *dentry_path(struct dentry *, char *, int);
# 317 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
# 340 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int d_unhashed(const struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int d_unlinked(const struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == (dentry)->d_parent);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int cant_mount(const struct dentry *dentry)
{
 return (dentry->d_flags & 0x00000100);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dont_mount(struct dentry *dentry)
{
 spin_lock(&dentry->d_lockref.lock);
 dentry->d_flags |= 0x00000100;
 spin_unlock(&dentry->d_lockref.lock);
}

extern void __d_lookup_done(struct dentry *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int d_in_lookup(struct dentry *dentry)
{
 return dentry->d_flags & 0x10000000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void d_lookup_done(struct dentry *dentry)
{
 if (__builtin_expect(!!(d_in_lookup(dentry)), 0)) {
  spin_lock(&dentry->d_lockref.lock);
  __d_lookup_done(dentry);
  spin_unlock(&dentry->d_lockref.lock);
 }
}

extern void dput(struct dentry *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_managed(const struct dentry *dentry)
{
 return dentry->d_flags & (0x00010000|0x00020000|0x00040000);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_mountpoint(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00010000;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned __d_entry_type(const struct dentry *dentry)
{
 return dentry->d_flags & 0x00700000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_miss(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_whiteout(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_can_lookup(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_autodir(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_dir(const struct dentry *dentry)
{
 return d_can_lookup(dentry) || d_is_autodir(dentry);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_symlink(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00600000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_reg(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_special(const struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00500000;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_file(const struct dentry *dentry)
{
 return d_is_reg(dentry) || d_is_special(dentry);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_negative(const struct dentry *dentry)
{

 return d_is_miss(dentry);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_positive(const struct dentry *dentry)
{
 return !d_is_negative(dentry);
}
# 469 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_really_is_negative(const struct dentry *dentry)
{
 return dentry->d_inode == ((void *)0);
}
# 487 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_really_is_positive(const struct dentry *dentry)
{
 return dentry->d_inode != ((void *)0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int simple_positive(struct dentry *dentry)
{
 return d_really_is_positive(dentry) && !d_unhashed(dentry);
}

extern void d_set_fallthru(struct dentry *dentry);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool d_is_fallthru(const struct dentry *dentry)
{
 return dentry->d_flags & 0x01000000;
}


extern int sysctl_vfs_cache_pressure;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
# 519 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct inode *d_inode(const struct dentry *dentry)
{
 return dentry->d_inode;
}
# 531 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct inode *d_inode_rcu(const struct dentry *dentry)
{
 return (*({ __attribute__((unused)) typeof(dentry->d_inode) __var = ( typeof(dentry->d_inode)) 0; (volatile typeof(dentry->d_inode) *)&(dentry->d_inode); }));
}
# 546 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct inode *d_backing_inode(const struct dentry *upper)
{
 struct inode *inode = upper->d_inode;

 return inode;
}
# 563 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct dentry *d_backing_dentry(struct dentry *upper)
{
 return upper;
}
# 583 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct dentry *d_real(struct dentry *dentry,
        const struct inode *inode,
        unsigned int open_flags, unsigned int flags)
{
 if (__builtin_expect(!!(dentry->d_flags & 0x04000000), 0))
  return dentry->d_op->d_real(dentry, inode, open_flags, flags);
 else
  return dentry;
}
# 600 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dcache.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct inode *d_real_inode(const struct dentry *dentry)
{

 return d_backing_inode(d_real((struct dentry *) dentry, ((void *)0), 0, 0));
}

struct name_snapshot {
 const unsigned char *name;
 unsigned char inline_name[32];
};
void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
void release_dentry_name_snapshot(struct name_snapshot *);
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/path.h" 1




struct dentry;
struct vfsmount;

struct path {
 struct vfsmount *mnt;
 struct dentry *dentry;
} ;

extern void path_get(const struct path *);
extern void path_put(const struct path *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int path_equal(const struct path *path1, const struct path *path2)
{
 return path1->mnt == path2->mnt && path1->dentry == path2->dentry;
}
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_lru.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_lru.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/shrinker.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/shrinker.h"
struct shrink_control {
 gfp_t gfp_mask;






 unsigned long nr_to_scan;






 unsigned long nr_scanned;


 int nid;


 struct mem_cgroup *memcg;
};
# 57 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/shrinker.h"
struct shrinker {
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 int seeks;
 long batch;
 unsigned long flags;


 struct list_head list;

 atomic_long_t *nr_deferred;
};






extern int register_shrinker(struct shrinker *);
extern void unregister_shrinker(struct shrinker *);
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_lru.h" 2

struct mem_cgroup;


enum lru_status {
 LRU_REMOVED,
 LRU_REMOVED_RETRY,

 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_one {
 struct list_head list;

 long nr_items;
};

struct list_lru_memcg {

 struct list_lru_one *lru[0];
};

struct list_lru_node {

 spinlock_t lock;

 struct list_lru_one lru;


 struct list_lru_memcg *memcg_lrus;

 long nr_items;
} __attribute__((__aligned__((1 << (6)))));

struct list_lru {
 struct list_lru_node *node;

 struct list_head list;
 bool memcg_aware;

};

void list_lru_destroy(struct list_lru *lru);
int __list_lru_init(struct list_lru *lru, bool memcg_aware,
      struct lock_class_key *key);





int memcg_update_all_list_lrus(int num_memcgs);
void memcg_drain_all_list_lrus(int src_idx, int dst_idx);
# 86 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_lru.h"
bool list_lru_add(struct list_lru *lru, struct list_head *item);
# 99 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_lru.h"
bool list_lru_del(struct list_lru *lru, struct list_head *item);
# 111 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_lru.h"
unsigned long list_lru_count_one(struct list_lru *lru,
     int nid, struct mem_cgroup *memcg);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long list_lru_shrink_count(struct list_lru *lru,
        struct shrink_control *sc)
{
 return list_lru_count_one(lru, sc->nid, sc->memcg);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1)
  count += list_lru_count_node(lru, nid);

 return count;
}

void list_lru_isolate(struct list_lru_one *list, struct list_head *item);
void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,
      struct list_head *head);

typedef enum lru_status (*list_lru_walk_cb)(struct list_head *item,
  struct list_lru_one *list, spinlock_t *lock, void *cb_arg);
# 161 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/list_lru.h"
unsigned long list_lru_walk_one(struct list_lru *lru,
    int nid, struct mem_cgroup *memcg,
    list_lru_walk_cb isolate, void *cb_arg,
    unsigned long *nr_to_walk);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long
list_lru_shrink_walk(struct list_lru *lru, struct shrink_control *sc,
       list_lru_walk_cb isolate, void *cb_arg)
{
 return list_lru_walk_one(lru, sc->nid, sc->memcg, isolate, cb_arg,
     &sc->nr_to_scan);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for ( (nid) = 0; (nid) == 0; (nid) = 1) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/capability.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/capability.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/capability.h" 1
# 39 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/capability.h"
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;
} *cap_user_data_t;
# 72 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/capability.h"
struct vfs_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
};




struct vfs_ns_cap_data {
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 } data[2];
 __le32 rootid;
};
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/capability.h" 2





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
 __u32 cap[2];
} kernel_cap_t;


struct cpu_vfs_cap_data {
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;
};





struct file;
struct inode;
struct dentry;
struct task_struct;
struct user_namespace;

extern const kernel_cap_t __cap_empty_set;
extern const kernel_cap_t __cap_init_eff_set;
# 117 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/capability.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_combine(const kernel_cap_t a,
           const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] | b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_intersect(const kernel_cap_t a,
      const kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] & b.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop(const kernel_cap_t a,
        const kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = a.cap[__capi] &~ drop.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_invert(const kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ c.cap[__capi]; } } while (0);
 return dest;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool cap_isclear(const kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (a.cap[__capi] != 0)
   return false;
 }
 return true;
}
# 165 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/capability.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool cap_issubset(const kernel_cap_t a, const kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_fs_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_fs_set(const kernel_cap_t a,
         const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_drop_nfsd_set(const kernel_cap_t a)
{
 const kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) kernel_cap_t cap_raise_nfsd_set(const kernel_cap_t a,
           const kernel_cap_t permitted)
{
 const kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}


extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool ns_capable_noaudit(struct user_namespace *ns, int cap);
# 244 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/capability.h"
extern bool privileged_wrt_inode_uidgid(struct user_namespace *ns, const struct inode *inode);
extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);
extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);
extern bool ptracer_capable(struct task_struct *tsk, struct user_namespace *ns);


extern int get_vfs_caps_from_disk(const struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps);

extern int cap_convert_nscap(struct dentry *dentry, void **ivalue, size_t size);
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/semaphore.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/semaphore.h"
struct semaphore {
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;
};
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/semaphore.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sema_init(struct semaphore *sem, int val)
{
 static struct lock_class_key __key;
 *sem = (struct semaphore) { .lock = (raw_spinlock_t) { .raw_lock = { { .val = { (0) } } }, }, .count = val, .wait_list = { &((*sem).wait_list), &((*sem).wait_list) }, };
 do { (void)("semaphore->lock"); (void)(&__key); } while (0);
}

extern void down(struct semaphore *sem);
extern int down_interruptible(struct semaphore *sem);
extern int down_killable(struct semaphore *sem);
extern int down_trylock(struct semaphore *sem);
extern int down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fcntl.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fcntl.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/fcntl.h" 1
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/fcntl.h" 1
# 156 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/fcntl.h"
struct f_owner_ex {
 int type;
 __kernel_pid_t pid;
};
# 196 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/asm-generic/fcntl.h"
struct flock {
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;

};







struct flock64 {
 short l_type;
 short l_whence;
 __kernel_loff_t l_start;
 __kernel_loff_t l_len;
 __kernel_pid_t l_pid;

};
# 2 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/fcntl.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fcntl.h" 2
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fcntl.h" 2
# 26 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fiemap.h" 1
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fiemap.h"
struct fiemap_extent {
 __u64 fe_logical;

 __u64 fe_physical;

 __u64 fe_length;
 __u64 fe_reserved64[2];
 __u32 fe_flags;
 __u32 fe_reserved[3];
};

struct fiemap {
 __u64 fm_start;

 __u64 fm_length;

 __u32 fm_flags;
 __u32 fm_mapped_extents;
 __u32 fm_extent_count;
 __u32 fm_reserved;
 struct fiemap_extent fm_extents[0];
};
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/migrate_mode.h" 1
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/migrate_mode.h"
enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
 MIGRATE_SYNC_NO_COPY,
};
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-rwsem.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcuwait.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcuwait.h"
struct rcuwait {
 struct task_struct *task;
};




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void rcuwait_init(struct rcuwait *w)
{
 w->task = ((void *)0);
}

extern void rcuwait_wake_up(struct rcuwait *w);
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-rwsem.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcu_sync.h" 1
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcu_sync.h"
enum rcu_sync_type { RCU_SYNC, RCU_SCHED_SYNC, RCU_BH_SYNC };


struct rcu_sync {
 int gp_state;
 int gp_count;
 wait_queue_head_t gp_wait;

 int cb_state;
 struct callback_head cb_head;

 enum rcu_sync_type gp_type;
};

extern void rcu_sync_lockdep_assert(struct rcu_sync *);
# 53 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/rcu_sync.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool rcu_sync_is_idle(struct rcu_sync *rsp)
{



 return !rsp->gp_state;
}

extern void rcu_sync_init(struct rcu_sync *, enum rcu_sync_type);
extern void rcu_sync_enter_start(struct rcu_sync *);
extern void rcu_sync_enter(struct rcu_sync *);
extern void rcu_sync_exit(struct rcu_sync *);
extern void rcu_sync_dtor(struct rcu_sync *);
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-rwsem.h" 2


struct percpu_rw_semaphore {
 struct rcu_sync rss;
 unsigned int *read_count;
 struct rw_semaphore rw_sem;
 struct rcuwait writer;
 int readers_block;
};
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-rwsem.h"
extern int __percpu_down_read(struct percpu_rw_semaphore *, int);
extern void __percpu_up_read(struct percpu_rw_semaphore *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_down_read_preempt_disable(struct percpu_rw_semaphore *sem)
{
 do { do { } while (0); } while (0);

 do { } while (0);

 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
# 47 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-rwsem.h"
 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  __percpu_down_read(sem, false);
 __asm__ __volatile__("": : :"memory");




}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_down_read(struct percpu_rw_semaphore *sem)
{
 percpu_down_read_preempt_disable(sem);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int percpu_down_read_trylock(struct percpu_rw_semaphore *sem)
{
 int ret = 1;

 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);



 ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(1) && ((1) == 1 || (1) == -1)) ? (int)(1) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (1); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(1))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(1))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(1))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 if (__builtin_expect(!!(!rcu_sync_is_idle(&sem->rss)), 0))
  ret = __percpu_down_read(sem, true);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);





 if (ret)
  do { } while (0);

 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_up_read_preempt_enable(struct percpu_rw_semaphore *sem)
{




 __asm__ __volatile__("": : :"memory");



 if (__builtin_expect(!!(rcu_sync_is_idle(&sem->rss)), 1))
  ({ __this_cpu_preempt_check("add"); do { do { const void *__vpp_verify = (typeof((&(*sem->read_count)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(*sem->read_count)) { case 1: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((*sem->read_count)) pao_T__; const int pao_ID__ = (__builtin_constant_p(-(typeof(*sem->read_count))(1)) && ((-(typeof(*sem->read_count))(1)) == 1 || (-(typeof(*sem->read_count))(1)) == -1)) ? (int)(-(typeof(*sem->read_count))(1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-(typeof(*sem->read_count))(1)); (void)pao_tmp__; } switch (sizeof((*sem->read_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addb %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "qi" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addw %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addl %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "ri" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count))); else asm("addq %1, ""%%""gs"":" "%" "0" : "+m" ((*sem->read_count)) : "re" ((pao_T__)(-(typeof(*sem->read_count))(1)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
 else
  __percpu_up_read(sem);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);

 do { } while (0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_up_read(struct percpu_rw_semaphore *sem)
{
 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 percpu_up_read_preempt_enable(sem);
}

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    const char *, struct lock_class_key *);

extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
# 130 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu-rwsem.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_rwsem_release(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);

 if (!read)
  sem->rw_sem.owner = ((struct task_struct *)-1L);

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_rwsem_acquire(struct percpu_rw_semaphore *sem,
     bool read, unsigned long ip)
{
 do { } while (0);

 if (!read)
  sem->rw_sem.owner = get_current();

}
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/delayed_call.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/delayed_call.h"
struct delayed_call {
 void (*fn)(void *);
 void *arg;
};




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_delayed_call(struct delayed_call *call,
  void (*fn)(void *), void *arg)
{
 call->fn = fn;
 call->arg = arg;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void do_delayed_call(struct delayed_call *call)
{
 if (call->fn)
  call->fn(call->arg);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clear_delayed_call(struct delayed_call *call)
{
 call->fn = ((void *)0);
}
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uuid.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uuid.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/uuid.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/uuid.h"
typedef struct {
 __u8 b[16];
} guid_t;
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/uuid.h"
typedef guid_t uuid_le;
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uuid.h" 2



typedef struct {
 __u8 b[16];
} uuid_t;
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uuid.h"
extern const guid_t guid_null;
extern const uuid_t uuid_null;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool guid_equal(const guid_t *u1, const guid_t *u2)
{
 return memcmp(u1, u2, sizeof(guid_t)) == 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void guid_copy(guid_t *dst, const guid_t *src)
{
 ({ size_t __len = (sizeof(guid_t)); void *__ret; if (__builtin_constant_p(sizeof(guid_t)) && __len >= 64) __ret = __memcpy((dst), (src), __len); else __ret = __builtin_memcpy((dst), (src), __len); __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool guid_is_null(const guid_t *guid)
{
 return guid_equal(guid, &guid_null);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uuid_equal(const uuid_t *u1, const uuid_t *u2)
{
 return memcmp(u1, u2, sizeof(uuid_t)) == 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void uuid_copy(uuid_t *dst, const uuid_t *src)
{
 ({ size_t __len = (sizeof(uuid_t)); void *__ret; if (__builtin_constant_p(sizeof(uuid_t)) && __len >= 64) __ret = __memcpy((dst), (src), __len); else __ret = __builtin_memcpy((dst), (src), __len); __ret; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool uuid_is_null(const uuid_t *uuid)
{
 return uuid_equal(uuid, &uuid_null);
}

void generate_random_uuid(unsigned char uuid[16]);

extern void guid_gen(guid_t *u);
extern void uuid_gen(uuid_t *u);

bool uuid_is_valid(const char *uuid);

extern const u8 guid_index[16];
extern const u8 uuid_index[16];

int guid_parse(const char *uuid, guid_t *u);
int uuid_parse(const char *uuid, uuid_t *u);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int uuid_le_cmp(const guid_t u1, const guid_t u2)
{
 return memcmp(&u1, &u2, sizeof(guid_t));
}
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/errseq.h" 1







typedef u32 errseq_t;

errseq_t errseq_set(errseq_t *eseq, int err);
errseq_t errseq_sample(errseq_t *eseq);
int errseq_check(errseq_t *eseq, errseq_t since);
int errseq_check_and_advance(errseq_t *eseq, errseq_t *since);
# 38 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fs.h" 1
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fs.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/limits.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fs.h" 2
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fs.h"
struct file_clone_range {
 __s64 src_fd;
 __u64 src_offset;
 __u64 src_length;
 __u64 dest_offset;
};

struct fstrim_range {
 __u64 start;
 __u64 len;
 __u64 minlen;
};






struct file_dedupe_range_info {
 __s64 dest_fd;
 __u64 dest_offset;
 __u64 bytes_deduped;






 __s32 status;
 __u32 reserved;
};


struct file_dedupe_range {
 __u64 src_offset;
 __u64 src_length;
 __u16 dest_count;
 __u16 reserved1;
 __u32 reserved2;
 struct file_dedupe_range_info info[0];
};


struct files_stat_struct {
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;
};

struct inodes_stat_t {
 long nr_inodes;
 long nr_unused;
 long dummy[5];
};
# 161 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fs.h"
struct fsxattr {
 __u32 fsx_xflags;
 __u32 fsx_extsize;
 __u32 fsx_nextents;
 __u32 fsx_projid;
 __u32 fsx_cowextsize;
 unsigned char fsx_pad[8];
};
# 324 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/fs.h"
typedef int __kernel_rwf_t;
# 41 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2

struct backing_dev_info;
struct bdi_writeback;
struct bio;
struct export_operations;
struct hd_geometry;
struct iovec;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;
struct iov_iter;
struct fscrypt_info;
struct fscrypt_operations;
struct fsverity_info;
struct fsverity_operations;

extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) inode_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) inode_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) files_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) files_maxfiles_init(void);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern unsigned int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;
extern int sysctl_protected_fifos;
extern int sysctl_protected_regular;

typedef __kernel_rwf_t rwf_t;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef int (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *private);
# 209 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct iattr {
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec ia_atime;
 struct timespec ia_mtime;
 struct timespec ia_ctime;






 struct file *ia_file;
};





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h" 1
# 40 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu_counter.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu_counter.h"
struct percpu_counter {
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount, gfp_t gfp,
     struct lock_class_key *key);
# 41 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu_counter.h"
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void percpu_counter_add_batch(struct percpu_counter *fbc, s64 amount,
         s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int __percpu_counter_compare(struct percpu_counter *fbc, s64 rhs, s32 batch);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs)
{
 return __percpu_counter_compare(fbc, rhs, percpu_counter_batch);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add_batch(fbc, amount, percpu_counter_batch);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return fbc->count;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{

 s64 ret = ({ union { typeof(fbc->count) __val; char __c[1]; } __u; if (1) __read_once_size(&(fbc->count), __u.__c, sizeof(fbc->count)); else __read_once_size_nocheck(&(fbc->count), __u.__c, sizeof(fbc->count)); do { } while (0); __u.__val; });

 if (ret >= 0)
  return ret;
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (fbc->counters != ((void *)0));
}
# 177 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/percpu_counter.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}
# 41 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/dqblk_xfs.h" 1
# 53 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_disk_quota {
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;

 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s32 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];
} fs_disk_quota_t;
# 149 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/dqblk_xfs.h"
typedef struct fs_qfilestat {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
} fs_quota_stat_t;
# 192 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/dqblk_xfs.h"
struct fs_qfilestatv {
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;
};

struct fs_quota_statv {
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u64 qs_pad2[8];
};
# 43 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dqblk_v1.h" 1
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dqblk_v2.h" 1








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dqblk_qtree.h" 1
# 18 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dqblk_qtree.h"
struct dquot;
struct kqid;


struct qtree_fmt_operations {
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);
};


struct qtree_mem_dqinfo {
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 const struct qtree_fmt_operations *dqi_ops;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}
int qtree_get_next_id(struct qtree_mem_dqinfo *info, struct kqid *qid);
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/dqblk_v2.h" 2
# 45 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h" 2



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/projid.h" 1
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/projid.h"
struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;

typedef struct {
 projid_t val;
} kprojid_t;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}
# 65 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/projid.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) kprojid_t make_kprojid(struct user_namespace *from, projid_t projid)
{
 return (kprojid_t){ projid };
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) projid_t from_kprojid(struct user_namespace *to, kprojid_t kprojid)
{
 return __kprojid_val(kprojid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t kprojid)
{
 projid_t projid = from_kprojid(to, kprojid);
 if (projid == (projid_t)-1)
  projid = 65534;
 return projid;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return true;
}
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/quota.h" 1
# 90 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/quota.h"
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
# 110 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/quota.h"
struct if_dqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
};

struct if_nextdqblk {
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;
 __u32 dqb_id;
};
# 144 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/quota.h"
enum {
 DQF_ROOT_SQUASH_B = 0,
 DQF_SYS_FILE_B = 16,

 DQF_PRIVATE
};






struct if_dqinfo {
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;
};
# 178 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/quota.h"
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 QUOTA_NL_A_PAD,
 __QUOTA_NL_A_MAX,
};
# 50 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h" 2




enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};






typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
# 97 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/quota.h"), "i" (114), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0);
 }
 return kqid;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/quota.h"), "i" (141), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0);
 }
 return kqid;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool qid_has_mapping(struct user_namespace *ns, struct kqid qid)
{
 return from_kqid(ns, qid) != (qid_t) -1;
}


extern spinlock_t dq_data_lock;
# 205 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
struct mem_dqblk {
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time64_t dqb_btime;
 time64_t dqb_itime;
};




struct quota_format_type;

struct mem_dqinfo {
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_max_spc_limit;
 qsize_t dqi_max_ino_limit;
 void *dqi_priv;
};

struct super_block;






enum {
 DQF_INFO_DIRTY_B = DQF_PRIVATE,
};


extern void mark_info_dirty(struct super_block *sb, int type);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int info_dirty(struct mem_dqinfo *info)
{
 return (__builtin_constant_p((DQF_INFO_DIRTY_B)) ? constant_test_bit((DQF_INFO_DIRTY_B), (&info->dqi_flags)) : variable_test_bit((DQF_INFO_DIRTY_B), (&info->dqi_flags)));
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
 unsigned long stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];
};

extern struct dqstats *dqstats_pcpu;
extern struct dqstats dqstats;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
# 295 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
struct dquot {
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 spinlock_t dq_dqb_lock;
 atomic_t dq_count;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;
};


struct quota_format_ops {
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);
 int (*get_next_id)(struct super_block *sb, struct kqid *qid);
};


struct dquot_operations {
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);
 int (*get_projid) (struct inode *, kprojid_t *);

 int (*get_inode_usage) (struct inode *, qsize_t *);

 int (*get_next_id) (struct super_block *sb, struct kqid *qid);
};

struct path;


struct qc_dqblk {
 int d_fieldmask;
 u64 d_spc_hardlimit;
 u64 d_spc_softlimit;
 u64 d_ino_hardlimit;
 u64 d_ino_softlimit;
 u64 d_space;
 u64 d_ino_count;
 s64 d_ino_timer;

 s64 d_spc_timer;
 int d_ino_warns;
 int d_spc_warns;
 u64 d_rt_spc_hardlimit;
 u64 d_rt_spc_softlimit;
 u64 d_rt_space;
 s64 d_rt_spc_timer;
 int d_rt_spc_warns;
};
# 396 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
struct qc_type_state {
 unsigned int flags;
 unsigned int spc_timelimit;

 unsigned int ino_timelimit;
 unsigned int rt_spc_timelimit;
 unsigned int spc_warnlimit;
 unsigned int ino_warnlimit;
 unsigned int rt_spc_warnlimit;
 unsigned long long ino;
 blkcnt_t blocks;
 blkcnt_t nextents;
};

struct qc_state {
 unsigned int s_incoredqs;






 struct qc_type_state s_state[3];
};


struct qc_info {
 int i_fieldmask;
 unsigned int i_flags;
 unsigned int i_spc_timelimit;

 unsigned int i_ino_timelimit;
 unsigned int i_rt_spc_timelimit;
 unsigned int i_spc_warnlimit;
 unsigned int i_ino_warnlimit;
 unsigned int i_rt_spc_warnlimit;
};


struct quotactl_ops {
 int (*quota_on)(struct super_block *, int, int, const struct path *);
 int (*quota_off)(struct super_block *, int);
 int (*quota_enable)(struct super_block *, unsigned int);
 int (*quota_disable)(struct super_block *, unsigned int);
 int (*quota_sync)(struct super_block *, int);
 int (*set_info)(struct super_block *, int, struct qc_info *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_nextdqblk)(struct super_block *, struct kqid *,
        struct qc_dqblk *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct qc_dqblk *);
 int (*get_state)(struct super_block *, struct qc_state *);
 int (*rm_xquota)(struct super_block *, unsigned int);
};

struct quota_format_type {
 int qf_fmt_id;
 const struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;
};
# 470 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
# 497 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << type;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> type) & ((1 << _DQUOT_USAGE_ENABLED * 3) | (1 << _DQUOT_LIMITS_ENABLED * 3) | (1 << _DQUOT_SUSPENDED * 3));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned dquot_state_types(unsigned flags, unsigned flag)
{
 do { bool __cond = !(!((flag) == 0 || (((flag) & ((flag) - 1)) != 0))); extern void __compiletime_assert_50(void) ; if (__cond) __compiletime_assert_50(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return (flags / flag) & ((1 << 3) - 1);
}


extern void quota_send_warning(struct kqid qid, dev_t dev,
          const char warntype);
# 525 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/quota.h"
struct quota_info {
 unsigned int flags;
 struct rw_semaphore dqio_sem;
 struct inode *files[3];
 struct mem_dqinfo info[3];
 const struct quota_format_ops *ops[3];
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
 int qm_fmt_id;
 char *qm_mod_name;
};
# 231 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 264 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
# 277 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct page;
struct address_space;
struct writeback_control;




enum rw_hint {
 WRITE_LIFE_NOT_SET = 0,
 WRITE_LIFE_NONE = 1,
 WRITE_LIFE_SHORT = 2,
 WRITE_LIFE_MEDIUM = 3,
 WRITE_LIFE_LONG = 4,
 WRITE_LIFE_EXTREME = 5,
};
# 302 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct kiocb {
 struct file *ki_filp;
 loff_t ki_pos;
 void (*ki_complete)(struct kiocb *iocb, long ret, long ret2);
 void *private;
 int ki_flags;
 enum rw_hint ki_hint;
} ;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_complete == ((void *)0);
}
# 325 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);

 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *iter);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 bool (*isolate_page)(struct page *, isolate_mode_t);
 void (*putback_page)(struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, unsigned long,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);
};

extern const struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);

struct address_space {
 struct inode *host;
 struct radix_tree_root page_tree;
 spinlock_t tree_lock;
 atomic_t i_mmap_writable;
 struct rb_root_cached i_mmap;
 struct rw_semaphore i_mmap_rwsem;

 unsigned long nrpages;

 unsigned long nrexceptional;
 unsigned long writeback_index;
 const struct address_space_operations *a_ops;
 unsigned long flags;
 spinlock_t private_lock;
 gfp_t gfp_mask;
 struct list_head private_list;
 void *private_data;
 errseq_t wb_err;
} __attribute__((aligned(sizeof(long)))) ;





struct request_queue;

struct block_device {
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 struct mutex bd_mutex;
 void * bd_claiming;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;

 struct list_head bd_holder_disks;

 struct block_device * bd_contains;
 unsigned bd_block_size;
 u8 bd_partno;
 struct hd_struct * bd_part;

 unsigned bd_part_count;
 int bd_invalidated;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;
 struct backing_dev_info *bd_bdi;
 struct list_head bd_list;






 unsigned long bd_private;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;
} ;
# 471 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
int mapping_tagged(struct address_space *mapping, int tag);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_mmap_lock_write(struct address_space *mapping)
{
 down_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_mmap_unlock_write(struct address_space *mapping)
{
 up_write(&mapping->i_mmap_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_mmap_lock_read(struct address_space *mapping)
{
 down_read(&mapping->i_mmap_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_mmap_unlock_read(struct address_space *mapping)
{
 up_read(&mapping->i_mmap_rwsem);
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mapping_mapped(struct address_space *mapping)
{
 return !(({ union { typeof((&mapping->i_mmap.rb_root)->rb_node) __val; char __c[1]; } __u; if (1) __read_once_size(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); else __read_once_size_nocheck(&((&mapping->i_mmap.rb_root)->rb_node), __u.__c, sizeof((&mapping->i_mmap.rb_root)->rb_node)); do { } while (0); __u.__val; }) == ((void *)0));
}
# 510 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mapping_writably_mapped(struct address_space *mapping)
{
 return atomic_read(&mapping->i_mmap_writable) > 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mapping_map_writable(struct address_space *mapping)
{
 return atomic_inc_unless_negative(&mapping->i_mmap_writable) ?
  0 : -1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mapping_unmap_writable(struct address_space *mapping)
{
 atomic_dec(&mapping->i_mmap_writable);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mapping_deny_writable(struct address_space *mapping)
{
 return atomic_dec_unless_positive(&mapping->i_mmap_writable) ?
  0 : -16;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mapping_allow_writable(struct address_space *mapping)
{
 atomic_inc(&mapping->i_mmap_writable);
}
# 548 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct posix_acl;



static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct posix_acl *
uncached_acl_sentinel(struct task_struct *task)
{
 return (void *)task + 1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool
is_uncached_acl(struct posix_acl *acl)
{
 return (long)acl & 1;
}







struct fsnotify_mark_connector;






struct inode {
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 const struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  const unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec i_atime;
 struct timespec i_mtime;
 struct timespec i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 unsigned int i_blkbits;
 enum rw_hint i_write_hint;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct rw_semaphore i_rwsem;

 unsigned long dirtied_when;
 unsigned long dirtied_time_when;

 struct hlist_node i_hash;
 struct list_head i_io_list;
# 642 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
 struct list_head i_lru;
 struct list_head i_sb_list;
 struct list_head i_wb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 u64 i_version;
 atomic64_t i_sequence;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;



 const struct file_operations *i_fop;
 struct file_lock_context *i_flctx;
 struct address_space i_data;
 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct block_device *i_bdev;
  struct cdev *i_cdev;
  char *i_link;
  unsigned i_dir_seq;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct fsnotify_mark_connector *i_fsnotify_marks;



 struct fscrypt_info *i_crypt_info;



 struct fsverity_info *i_verity_info;


 void *i_private;
} ;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned int i_blocksize(const struct inode *node)
{
 return (1 << node->i_blkbits);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}
# 713 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2,
 I_MUTEX_PARENT2,
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_lock(struct inode *inode)
{
 down_write(&inode->i_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_unlock(struct inode *inode)
{
 up_write(&inode->i_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_lock_shared(struct inode *inode)
{
 down_read(&inode->i_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_unlock_shared(struct inode *inode)
{
 up_read(&inode->i_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int inode_trylock(struct inode *inode)
{
 return down_write_trylock(&inode->i_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int inode_trylock_shared(struct inode *inode)
{
 return down_read_trylock(&inode->i_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int inode_is_locked(struct inode *inode)
{
 return rwsem_is_locked(&inode->i_rwsem);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_lock_nested(struct inode *inode, unsigned subclass)
{
 down_write(&inode->i_rwsem);
}

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);
# 776 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) loff_t i_size_read(const struct inode *inode)
{
# 795 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
 return inode->i_size;

}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_size_write(struct inode *inode, loff_t i_size)
{
# 817 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
 inode->i_size = i_size;

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned iminor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) & ((1U << 20) - 1)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned imajor(const struct inode *inode)
{
 return ((unsigned int) ((inode->i_rdev) >> 20));
}

extern struct block_device *I_BDEV(struct inode *inode);

struct fown_struct {
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;
};




struct file_ra_state {
 unsigned long start;
 unsigned int size;
 unsigned int async_size;


 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;
};




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}

struct file {
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;
 struct inode *f_inode;
 const struct file_operations *f_op;





 spinlock_t f_lock;
 enum rw_hint f_write_hint;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 struct mutex f_pos_lock;
 loff_t f_pos;
 struct fown_struct f_owner;
 const struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct list_head f_ep_links;
 struct list_head f_tfile_llink;

 struct address_space *f_mapping;
 errseq_t f_wb_err;
}
  __attribute__((aligned(4)));

struct file_handle {
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[0];
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct file *get_file(struct file *f)
{
 atomic_long_inc(&f->f_count);
 return f;
}
# 953 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
typedef void *fl_owner_t;

struct file_lock;

struct file_lock_operations {
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
};

struct lock_manager_operations {
 int (*lm_compare_owner)(struct file_lock *, struct file_lock *);
 unsigned long (*lm_owner_key)(struct file_lock *);
 fl_owner_t (*lm_get_owner)(fl_owner_t);
 void (*lm_put_owner)(fl_owner_t);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, int);
 bool (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock *, int, struct list_head *);
 void (*lm_setup)(struct file_lock *, void **);
};

struct lock_manager {
 struct list_head list;




 bool block_opens;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
int locks_in_grace(struct net *);
int opens_in_grace(struct net *);



# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/nfs_fs_i.h" 1




struct nlm_lockowner;




struct nfs_lock_info {
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
 struct nfs4_lock_state *owner;
};
# 991 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h" 2
# 1009 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct file_lock {
 struct file_lock *fl_next;
 struct list_head fl_list;
 struct hlist_node fl_link;
 struct list_head fl_block;
 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 const struct file_lock_operations *fl_ops;
 const struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
  } afs;
 } fl_u;
} ;

struct file_lock_context {
 spinlock_t flc_lock;
 struct list_head flc_flock;
 struct list_head flc_posix;
 struct list_head flc_lease;
};
# 1055 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
extern void send_sigio(struct fown_struct *fown, int fd, int band);
# 1064 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct inode *locks_inode(const struct file *f)
{
 return f->f_path.dentry->d_inode;
}


extern int fcntl_getlk(struct file *, unsigned int, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock_context(struct inode *inode);
void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_copy_conflock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_file(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int posix_unblock_lock(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int locks_lock_inode_wait(struct inode *inode, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec *time);
extern int generic_setlease(struct file *, long, struct file_lock **, void **priv);
extern int vfs_setlease(struct file *, long, struct file_lock **, void **);
extern int lease_modify(struct file_lock *, int, struct list_head *);
struct files_struct;
extern void show_fd_locks(struct seq_file *f,
    struct file *filp, struct files_struct *files);
# 1244 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct inode *file_inode(const struct file *f)
{
 return f->f_inode;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct dentry *file_dentry(const struct file *file)
{
 return d_real(file->f_path.dentry, file_inode(file), 0, 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int locks_lock_file_wait(struct file *filp, struct file_lock *fl)
{
 return locks_lock_inode_wait(locks_inode(filp), fl);
}

struct fasync_struct {
 spinlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern void __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
# 1339 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
 int frozen;
 wait_queue_head_t wait_unfrozen;
 struct percpu_rw_semaphore rw_sem[(SB_FREEZE_COMPLETE - 1)];
};

struct super_block {
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 const struct super_operations *s_op;
 const struct dquot_operations *dq_op;
 const struct quotactl_ops *s_qcop;
 const struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_iflags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 const struct xattr_handler **s_xattr;

 const struct fscrypt_operations *s_cop;
 struct key *s_master_keys;


 const struct fsverity_operations *s_vop;


 struct hlist_bl_head s_anon;

 struct unicode_map *s_encoding;
 __u16 s_encoding_flags;

 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 unsigned int s_quota_types;
 struct quota_info s_dquot;

 struct sb_writers s_writers;

 char s_id[32];
 uuid_t s_uuid;

 void *s_fs_info;
 unsigned int s_max_links;
 fmode_t s_mode;



 u32 s_time_gran;





 struct mutex s_vfs_rename_mutex;





 char *s_subtype;

 const struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;


 int s_readonly_remount;


 struct workqueue_struct *s_dio_done_wq;
 struct hlist_head s_pins;






 struct user_namespace *s_user_ns;





 struct list_lru s_dentry_lru __attribute__((__aligned__((1 << (6)))));
 struct list_lru s_inode_lru __attribute__((__aligned__((1 << (6)))));
 struct callback_head rcu;
 struct work_struct destroy_work;

 struct mutex s_sync_lock;




 int s_stack_depth;


 spinlock_t s_inode_list_lock __attribute__((__aligned__((1 << (6)))));
 struct list_head s_inodes;

 spinlock_t s_inode_wblist_lock;
 struct list_head s_inodes_wb;
} ;






static inline __attribute__((unused)) __attribute__((no_instrument_function)) uid_t i_uid_read(const struct inode *inode)
{
 return from_kuid(inode->i_sb->s_user_ns, inode->i_uid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) gid_t i_gid_read(const struct inode *inode)
{
 return from_kgid(inode->i_sb->s_user_ns, inode->i_gid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(inode->i_sb->s_user_ns, uid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(inode->i_sb->s_user_ns, gid);
}

extern struct timespec current_time(struct inode *inode);





void __sb_end_write(struct super_block *sb, int level);
int __sb_start_write(struct super_block *sb, int level, bool wait);
# 1520 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
# 1532 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
# 1544 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
# 1568 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_WRITE, false);
}
# 1597 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT, true);
}
# 1615 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS, true);
}


extern bool inode_owner_or_capable(const struct inode *inode);




extern int vfs_create(struct inode *, struct dentry *, umode_t, bool);
extern int vfs_create2(struct vfsmount *, struct inode *, struct dentry *, umode_t, bool);
extern int vfs_mkdir(struct inode *, struct dentry *, umode_t);
extern int vfs_mkdir2(struct vfsmount *, struct inode *, struct dentry *, umode_t);
extern int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_mknod2(struct vfsmount *, struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_symlink(struct inode *, struct dentry *, const char *);
extern int vfs_symlink2(struct vfsmount *, struct inode *, struct dentry *, const char *);
extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_link2(struct vfsmount *, struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rmdir(struct inode *, struct dentry *);
extern int vfs_rmdir2(struct vfsmount *, struct inode *, struct dentry *);
extern int vfs_unlink(struct inode *, struct dentry *, struct inode **);
extern int vfs_unlink2(struct vfsmount *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
extern int vfs_rename2(struct vfsmount *, struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **, unsigned int);
extern int vfs_whiteout(struct inode *, struct dentry *);

extern struct dentry *vfs_tmpfile(struct dentry *dentry, umode_t mode,
      int open_flag);




extern void inode_init_owner(struct inode *inode, const struct inode *dir,
   umode_t mode);
extern bool may_open_dev(const struct path *path);



struct fiemap_extent_info {
 unsigned int fi_flags;
 unsigned int fi_extents_mapped;
 unsigned int fi_extents_max;
 struct fiemap_extent *fi_extents_start;

};
int fiemap_fill_next_extent(struct fiemap_extent_info *info, u64 logical,
       u64 phys, u64 len, u32 flags);
int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags);
# 1689 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct dir_context;
typedef int (*filldir_t)(struct dir_context *, const char *, int, loff_t, u64,
    unsigned);

struct dir_context {
 const filldir_t actor;
 loff_t pos;
};

struct block_device_operations;
# 1726 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct iov_iter;

struct file_operations {
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, const char *, size_t, loff_t *);
 ssize_t (*read_iter) (struct kiocb *, struct iov_iter *);
 ssize_t (*write_iter) (struct kiocb *, struct iov_iter *);
 int (*iterate) (struct file *, struct dir_context *);
 int (*iterate_shared) (struct file *, struct dir_context *);
 unsigned int (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **, void **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 void (*show_fdinfo)(struct seq_file *m, struct file *f);



 ssize_t (*copy_file_range)(struct file *, loff_t, struct file *,
   loff_t, size_t, unsigned int);
 int (*clone_file_range)(struct file *, loff_t, struct file *, loff_t,
   u64);
 ssize_t (*dedupe_file_range)(struct file *, u64, u64, struct file *,
   u64);
} ;

struct inode_operations {
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 const char * (*get_link) (struct dentry *, struct inode *, struct delayed_call *);
 int (*permission) (struct inode *, int);
 int (*permission2) (struct vfsmount *, struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int);

 int (*readlink) (struct dentry *, char *,int);

 int (*create) (struct inode *,struct dentry *, umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct inode *,struct dentry *,const char *);
 int (*mkdir) (struct inode *,struct dentry *,umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
 int (*rename) (struct inode *, struct dentry *,
   struct inode *, struct dentry *, unsigned int);
 int (*setattr) (struct dentry *, struct iattr *);
 int (*setattr2) (struct vfsmount *, struct dentry *, struct iattr *);
        int (*getattr) (const struct path *, struct kstat *, u32, unsigned int);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode, int *opened);
 int (*tmpfile) (struct inode *, struct dentry *, umode_t);
 int (*set_acl)(struct inode *, struct posix_acl *, int);
} __attribute__((__aligned__((1 << (6)))));

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ssize_t call_read_iter(struct file *file, struct kiocb *kio,
         struct iov_iter *iter)
{
 return file->f_op->read_iter(kio, iter);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ssize_t call_write_iter(struct file *file, struct kiocb *kio,
          struct iov_iter *iter)
{
 return file->f_op->write_iter(kio, iter);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int call_mmap(struct file *file, struct vm_area_struct *vma)
{
 return file->f_op->mmap(file, vma);
}

ssize_t rw_copy_check_uvector(int type, const struct iovec * uvector,
         unsigned long nr_segs, unsigned long fast_segs,
         struct iovec *fast_pointer,
         struct iovec **ret_pointer);

extern ssize_t __vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
extern ssize_t vfs_readv(struct file *, const struct iovec *,
  unsigned long, loff_t *, rwf_t);
extern ssize_t vfs_copy_file_range(struct file *, loff_t , struct file *,
       loff_t, size_t, unsigned int);
extern int vfs_clone_file_prep_inodes(struct inode *inode_in, loff_t pos_in,
          struct inode *inode_out, loff_t pos_out,
          u64 *len, bool is_dedupe);
extern int do_clone_file_range(struct file *file_in, loff_t pos_in,
          struct file *file_out, loff_t pos_out, u64 len);
extern int vfs_clone_file_range(struct file *file_in, loff_t pos_in,
    struct file *file_out, loff_t pos_out, u64 len);
extern int vfs_dedupe_file_range_compare(struct inode *src, loff_t srcoff,
      struct inode *dest, loff_t destoff,
      loff_t len, bool *is_same);
extern int vfs_dedupe_file_range(struct file *file,
     struct file_dedupe_range *same);

struct super_operations {
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_super) (struct super_block *);
 int (*freeze_fs) (struct super_block *);
 int (*thaw_super) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 int (*remount_fs2) (struct vfsmount *, struct super_block *, int *, char *);
 void *(*clone_mnt_data) (void *);
 void (*copy_mnt_data) (void *, void *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_options2)(struct vfsmount *,struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, const char *, size_t, loff_t);
 struct dquot **(*get_dquots)(struct inode *);

 int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 long (*nr_cached_objects)(struct super_block *,
      struct shrink_control *);
 long (*free_cached_objects)(struct super_block *,
        struct shrink_control *);
};
# 1920 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool sb_rdonly(const struct super_block *sb) { return sb->s_flags & 1; }
# 1950 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool HAS_UNMAPPED_ID(struct inode *inode)
{
 return !uid_valid(inode->i_uid) || !gid_valid(inode->i_gid);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) enum rw_hint file_write_hint(struct file *file)
{
 if (file->f_write_hint != WRITE_LIFE_NOT_SET)
  return file->f_write_hint;

 return file_inode(file)->i_write_hint;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void init_sync_kiocb(struct kiocb *kiocb, struct file *filp)
{
 *kiocb = (struct kiocb) {
  .ki_filp = filp,
  .ki_flags = iocb_flags(filp),
  .ki_hint = file_write_hint(filp),
 };
}
# 2058 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
extern void __mark_inode_dirty(struct inode *, int);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, ((1 << 0) | (1 << 1) | (1 << 2)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}
# 2094 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_inc_iversion(struct inode *inode)
{
       spin_lock(&inode->i_lock);
       inode->i_version++;
       spin_unlock(&inode->i_lock);
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern void touch_atime(const struct path *);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(&file->f_path);
}

int sync_inode(struct inode *inode, struct writeback_control *wbc);
int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
 const char *name;
 int fs_flags;





 struct dentry *(*mount) (struct file_system_type *, int,
         const char *, void *);
 struct dentry *(*mount2) (struct vfsmount *, struct file_system_type *, int,
          const char *, void *);
 void *(*alloc_mnt_data) (void);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;
};



extern struct dentry *mount_ns(struct file_system_type *fs_type,
 int flags, void *data, void *ns, struct user_namespace *user_ns,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, const char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, const char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget_userns(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, struct user_namespace *user_ns,
   void *data);
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
extern struct dentry *mount_pseudo_xattr(struct file_system_type *, char *,
      const struct super_operations *ops,
      const struct xattr_handler **xattr,
      const struct dentry_operations *dops,
      unsigned long);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct dentry *
mount_pseudo(struct file_system_type *fs_type, char *name,
      const struct super_operations *ops,
      const struct dentry_operations *dops, unsigned long magic)
{
 return mount_pseudo_xattr(fs_type, name, ops, ((void *)0), dops, magic);
}
# 2210 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount_data(struct file_system_type *, void *data);

extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(const char *, const char *,
       const char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(const struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(const struct path *, struct kstatfs *);
extern int user_statfs(const char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int vfs_ustat(dev_t, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern __attribute__((format(printf, 2, 3)))
int super_setup_bdi_name(struct super_block *sb, char *fmt, ...);
extern int super_setup_bdi(struct super_block *sb);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);
extern int generic_update_time(struct inode *, struct timespec *, int);


extern struct kobject *fs_kobj;




extern int locks_mandatory_locked(struct file *);
extern int locks_mandatory_area(struct inode *, struct file *, loff_t, loff_t, unsigned char);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int __mandatory_lock(struct inode *ino)
{
 return (ino->i_mode & (0002000 | 00010)) == 0002000;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int mandatory_lock(struct inode *ino)
{
 return ((ino)->i_sb->s_flags & (64)) && __mandatory_lock(ino);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int locks_verify_locked(struct file *file)
{
 if (mandatory_lock(locks_inode(file)))
  return locks_mandatory_locked(file);
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int locks_verify_truncate(struct inode *inode,
        struct file *f,
        loff_t size)
{
 if (!inode->i_flctx || !mandatory_lock(inode))
  return 0;

 if (size < inode->i_size) {
  return locks_mandatory_area(inode, f, size, inode->i_size - 1,
    1);
 } else {
  return locks_mandatory_area(inode, f, inode->i_size, size - 1,
    1);
 }
}
# 2330 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int break_lease(struct inode *inode, unsigned int mode)
{






 asm volatile("mfence":::"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 32);
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int break_deleg(struct inode *inode, unsigned int mode)
{






 asm volatile("mfence":::"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = ((void *)0);
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int break_layout(struct inode *inode, bool wait)
{
 asm volatile("mfence":::"memory");
 if (inode->i_flctx && !list_empty_careful(&inode->i_flctx->flc_lease))
  return __break_lease(inode,
    wait ? 00000001 : 00000001 | 00004000,
    2048);
 return 0;
}
# 2420 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
struct audit_names;
struct filename {
 const char *name;
 const char *uptr;
 struct audit_names *aname;
 int refcnt;
 const char iname[];
};

extern long vfs_truncate(const struct path *, loff_t);
extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
         struct file *filp);
extern int do_truncate2(struct vfsmount *, struct dentry *, loff_t start,
   unsigned int time_attrs, struct file *filp);
extern int vfs_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, const char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open(const char *, int, umode_t);
extern struct file *file_open_root(struct dentry *, struct vfsmount *,
       const char *, int, umode_t);
extern struct file * dentry_open(const struct path *, int, const struct cred *);
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname_flags(const char *, int, int *);
extern struct filename *getname(const char *);
extern struct filename *getname_kernel(const char *);
extern void putname(struct filename *name);

enum {
 FILE_CREATED = 1,
 FILE_OPENED = 2
};
extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *),
   int *opened);
extern int finish_no_open(struct file *file, struct dentry *dentry);



extern int ioctl_preallocate(struct file *filp, void *argp);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) vfs_caches_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) vfs_caches_init(void);

extern struct kmem_cache *names_cachep;





extern int register_blkdev(unsigned int, const char *);
extern void unregister_blkdev(unsigned int, const char *);
extern void bdev_unhash_inode(dev_t dev);
extern struct block_device *bdget(dev_t);
extern struct block_device *bdgrab(struct block_device *bdev);
extern void bd_set_size(struct block_device *, loff_t size);
extern void bd_forget(struct inode *inode);
extern void bdput(struct block_device *);
extern void invalidate_bdev(struct block_device *);
extern void iterate_bdevs(void (*)(struct block_device *, void *), void *);
extern int sync_blockdev(struct block_device *bdev);
extern void kill_bdev(struct block_device *);
extern struct super_block *freeze_bdev(struct block_device *);
extern void emergency_thaw_all(void);
extern int thaw_bdev(struct block_device *bdev, struct super_block *sb);
extern int fsync_bdev(struct block_device *);

extern struct super_block *blockdev_superblock;

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool sb_is_blkdev_sb(struct super_block *sb)
{
 return sb == blockdev_superblock;
}
# 2521 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
extern int sync_filesystem(struct super_block *);
extern const struct file_operations def_blk_fops;
extern const struct file_operations def_chr_fops;

extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
extern int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
extern int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
extern struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
            void *holder);
extern struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode,
           void *holder);
extern void blkdev_put(struct block_device *bdev, fmode_t mode);
extern int __blkdev_reread_part(struct block_device *bdev);
extern int blkdev_reread_part(struct block_device *bdev);


extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
extern void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk);
# 2562 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, const char *);
extern int register_chrdev_region(dev_t, unsigned, const char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, const char *name,
        const struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, const char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_chrdev(unsigned int major, const char *name,
      const struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void unregister_chrdev(unsigned int major, const char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}







extern const char *__bdevname(dev_t, char *buffer);
extern const char *bdevname(struct block_device *bdev, char *buffer);
extern struct block_device *lookup_bdev(const char *);
extern void blkdev_show(struct seq_file *,off_t);





extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern bool is_bad_inode(struct inode *);


extern void check_disk_size_change(struct gendisk *disk,
       struct block_device *bdev);
extern int revalidate_disk(struct gendisk *);
extern int check_disk_change(struct block_device *);
extern int __invalidate_device(struct block_device *, bool);
extern int invalidate_partition(struct gendisk *, int);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void invalidate_remote_inode(struct inode *inode)
{
 if ((((inode->i_mode) & 00170000) == 0100000) || (((inode->i_mode) & 00170000) == 0040000) ||
     (((inode->i_mode) & 00170000) == 0120000))
  invalidate_mapping_pages(inode->i_mapping, 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait_keep_errors(struct address_space *mapping);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_fdatawait_range_keep_errors(struct address_space *mapping,
  loff_t start_byte, loff_t end_byte);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int filemap_fdatawait(struct address_space *mapping)
{
 return filemap_fdatawait_range(mapping, 0, ((long long)(~0ULL>>1)));
}

extern bool filemap_range_has_page(struct address_space *, loff_t lstart,
      loff_t lend);
extern int file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int filemap_write_and_wait(struct address_space *mapping);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);
extern int filemap_check_errors(struct address_space *mapping);
extern void __filemap_set_wb_err(struct address_space *mapping, int err);

extern int file_fdatawait_range(struct file *file, loff_t lstart,
      loff_t lend);
extern int file_check_and_advance_wb_err(struct file *file);
extern int file_write_and_wait_range(struct file *file,
      loff_t start, loff_t end);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int file_write_and_wait(struct file *file)
{
 return file_write_and_wait_range(file, 0, ((long long)(~0ULL>>1)));
}
# 2677 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void filemap_set_wb_err(struct address_space *mapping, int err)
{

 if (__builtin_expect(!!(err), 0))
  __filemap_set_wb_err(mapping, err);
}
# 2694 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int filemap_check_wb_err(struct address_space *mapping,
     errseq_t since)
{
 return errseq_check(&mapping->wb_err, since);
}
# 2707 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) errseq_t filemap_sample_wb_err(struct address_space *mapping)
{
 return errseq_sample(&mapping->wb_err);
}

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) ssize_t generic_write_sync(struct kiocb *iocb, ssize_t count)
{
 if (iocb->ki_flags & (1 << 4)) {
  int ret = vfs_fsync_range(iocb->ki_filp,
    iocb->ki_pos - count, iocb->ki_pos - 1,
    (iocb->ki_flags & (1 << 5)) ? 0 : 1);
  if (ret)
   return ret;
 }

 return count;
}

extern void emergency_sync(void);
extern void emergency_remount(void);

extern sector_t bmap(struct inode *, sector_t);

extern int notify_change(struct dentry *, struct iattr *, struct inode **);
extern int notify_change2(struct vfsmount *, struct dentry *, struct iattr *, struct inode **);
extern int inode_permission(struct inode *, int);
extern int inode_permission2(struct vfsmount *, struct inode *, int);
extern int __inode_permission(struct inode *, int);
extern int __inode_permission2(struct vfsmount *, struct inode *, int);
extern int generic_permission(struct inode *, int);
extern int __check_sticky(struct inode *dir, struct inode *inode);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool execute_ok(struct inode *inode)
{
 return (inode->i_mode & (00100|00010|00001)) || (((inode->i_mode) & 00170000) == 0040000);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void file_start_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, true);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool file_start_write_trylock(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return true;
 return __sb_start_write(file_inode(file)->i_sb, SB_FREEZE_WRITE, false);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void file_end_write(struct file *file)
{
 if (!(((file_inode(file)->i_mode) & 00170000) == 0100000))
  return;
 __sb_end_write(file_inode(file)->i_sb, SB_FREEZE_WRITE);
}
# 2790 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void put_write_access(struct inode * inode)
{
 atomic_dec(&inode->i_writecount);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void allow_write_access(struct file *file)
{
 if (file)
  atomic_inc(&file_inode(file)->i_writecount);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool inode_is_open_for_write(const struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}
# 2824 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_readcount_dec(struct inode *inode)
{
 return;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void i_readcount_inc(struct inode *inode)
{
 return;
}

extern int do_pipe_flags(int *, int);
# 2848 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
enum kernel_read_file_id {
 READING_UNKNOWN, READING_FIRMWARE, READING_FIRMWARE_PREALLOC_BUFFER, READING_MODULE, READING_KEXEC_IMAGE, READING_KEXEC_INITRAMFS, READING_POLICY, READING_MAX_ID,
};

static const char * const kernel_read_file_str[] = {
 "unknown", "firmware", "firmware", "kernel-module", "kexec-image", "kexec-initramfs", "security-policy", "",
};

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *kernel_read_file_id_str(enum kernel_read_file_id id)
{
 if ((unsigned)id >= READING_MAX_ID)
  return kernel_read_file_str[READING_UNKNOWN];

 return kernel_read_file_str[id];
}

extern int kernel_read_file(struct file *, void **, loff_t *, loff_t,
       enum kernel_read_file_id);
extern int kernel_read_file_from_path(const char *, void **, loff_t *, loff_t,
          enum kernel_read_file_id);
extern int kernel_read_file_from_fd(int, void **, loff_t *, loff_t,
        enum kernel_read_file_id);
extern ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
extern ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
extern ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
extern struct file * open_exec(const char *);


extern bool is_subdir(struct dentry *, struct dentry *);
extern bool path_is_under(const struct path *, const struct path *);

extern char *file_path(struct file *, char *, int);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern struct inode *find_inode_nowait(struct super_block *,
           unsigned long,
           int (*match)(struct inode *,
          unsigned long, void *),
           void *data);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern unsigned int get_next_ino(void);
extern void evict_inodes(struct super_block *sb);

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_privs(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, inode->i_ino);
}

extern void __remove_inode_hash(struct inode *);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode) && !hlist_fake(&inode->i_hash))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);


extern int bdev_read_only(struct block_device *);

extern int set_blocksize(struct block_device *, int);
extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
extern ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
extern ssize_t generic_perform_write(struct file *, struct iov_iter *, loff_t);

ssize_t vfs_iter_read(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);
ssize_t vfs_iter_write(struct file *file, struct iov_iter *iter, loff_t *ppos,
  rwf_t flags);


extern ssize_t blkdev_read_iter(struct kiocb *iocb, struct iov_iter *to);
extern ssize_t blkdev_write_iter(struct kiocb *iocb, struct iov_iter *from);
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
   int datasync);
extern void block_sync_page(struct page *page);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t iter_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
extern loff_t no_seek_end_llseek(struct file *, loff_t, int);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
extern int stream_open(struct inode * inode, struct file * filp);


typedef void (dio_submit_t)(struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,


 DIO_ASYNC_EXTEND = 0x04,


 DIO_SKIP_DIO_COUNT = 0x08,
};

void dio_end_io(struct bio *bio);
void dio_warn_stale_pagecache(struct file *filp);

ssize_t __blockdev_direct_IO(struct kiocb *iocb, struct inode *inode,
        struct block_device *bdev, struct iov_iter *iter,
        get_block_t get_block,
        dio_iodone_t end_io, dio_submit_t submit_io,
        int flags);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ssize_t blockdev_direct_IO(struct kiocb *iocb,
      struct inode *inode,
      struct iov_iter *iter,
      get_block_t get_block)
{
 return __blockdev_direct_IO(iocb, inode, inode->i_sb->s_bdev, iter,
   get_block, ((void *)0), ((void *)0), DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
# 3051 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_dio_begin(struct inode *inode)
{
 atomic_inc(&inode->i_dio_count);
}
# 3063 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_dio_end(struct inode *inode)
{
 if (atomic_dec_and_test(&inode->i_dio_count))
  wake_up_bit(&inode->i_state, 9);
}

extern void inode_set_flags(struct inode *inode, unsigned int flags,
       unsigned int mask);

extern const struct file_operations generic_ro_fops;



extern int readlink_copy(char *, int, const char *);
extern int page_readlink(struct dentry *, char *, int);
extern const char *page_get_link(struct dentry *, struct inode *,
     struct delayed_call *);
extern void page_put_link(void *);
extern int __page_symlink(struct inode *inode, const char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, const char *symname, int len);
extern const struct inode_operations page_symlink_inode_operations;
extern void kfree_link(void *);
extern void generic_fillattr(struct inode *, struct kstat *);
extern int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
extern int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) loff_t __inode_get_bytes(struct inode *inode)
{
 return (((loff_t)inode->i_blocks) << 9) + inode->i_bytes;
}
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);
const char *simple_get_link(struct dentry *, struct inode *,
       struct delayed_call *);
extern const struct inode_operations simple_symlink_inode_operations;

extern int iterate_dir(struct file *, struct dir_context *);

extern int vfs_statx(int, const char *, int, struct kstat *, u32);
extern int vfs_statx_fd(unsigned int, struct kstat *, u32, unsigned int);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vfs_stat(const char *filename, struct kstat *stat)
{
 return vfs_statx(-100, filename, 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vfs_lstat(const char *name, struct kstat *stat)
{
 return vfs_statx(-100, name, 0x100 | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vfs_fstatat(int dfd, const char *filename,
         struct kstat *stat, int flags)
{
 return vfs_statx(dfd, filename, flags | 0x800,
    stat, 0x000007ffU);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vfs_fstat(int fd, struct kstat *stat)
{
 return vfs_statx_fd(fd, stat, 0x000007ffU, 0);
}


extern const char *vfs_get_link(struct dentry *, struct delayed_call *);
extern int vfs_readlink(struct dentry *, char *, int);

extern int __generic_block_fiemap(struct inode *inode,
      struct fiemap_extent_info *fieinfo,
      loff_t start, loff_t len,
      get_block_t *get_block);
extern int generic_block_fiemap(struct inode *inode,
    struct fiemap_extent_info *fieinfo, u64 start,
    u64 len, get_block_t *get_block);

extern struct file_system_type *get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type(const char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_super_thawed(struct block_device *);
extern struct super_block *get_super_exclusive_thawed(struct block_device *bdev);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void drop_super_exclusive(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct dentry *, struct iattr *);
extern int simple_getattr(const struct path *, struct kstat *, u32, unsigned int);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct inode *, struct dentry *,
    struct inode *, struct dentry *, unsigned int);
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);
extern int always_delete_dentry(const struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern int simple_nosetlease(struct file *, long, struct file_lock **, void **);
extern const struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern const struct file_operations simple_dir_operations;
extern const struct inode_operations simple_dir_inode_operations;
extern void make_empty_dir_inode(struct inode *inode);
extern bool is_empty_dir_inode(struct inode *inode);
struct tree_descr { const char *name; const struct file_operations *ops; int mode; };
struct dentry *d_alloc_name(struct dentry *, const char *);
extern int simple_fill_super(struct super_block *, unsigned long,
        const struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, const void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  const void *from, size_t count);

extern int __generic_file_fsync(struct file *, loff_t, loff_t, int);
extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);


extern int generic_ci_d_hash(const struct dentry *dentry, struct qstr *str);
extern int generic_ci_d_compare(const struct dentry *dentry, unsigned int len,
    const char *str, const struct qstr *name);
extern bool needs_casefold(const struct inode *dir);






extern void generic_set_encrypted_ci_d_ops(struct inode *dir,
        struct dentry *dentry);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);




extern int setattr_prepare(struct dentry *, struct iattr *);
extern int inode_newsize_ok(const struct inode *, loff_t offset);
extern void setattr_copy(struct inode *inode, const struct iattr *attr);

extern int file_update_time(struct file *file);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool io_is_direct(struct file *filp)
{
 return (filp->f_flags & 00040000) || ((filp->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool vma_is_dax(struct vm_area_struct *vma)
{
 return vma->vm_file && ((vma->vm_file->f_mapping->host)->i_flags & 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool vma_is_fsdax(struct vm_area_struct *vma)
{
 struct inode *inode;

 if (!vma->vm_file)
  return false;
 if (!vma_is_dax(vma))
  return false;
 inode = file_inode(vma->vm_file);
 if ((((inode->i_mode) & 00170000) == 0020000))
  return false;
 return true;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int iocb_flags(struct file *file)
{
 int res = 0;
 if (file->f_flags & 00002000)
  res |= (1 << 1);
 if (io_is_direct(file))
  res |= (1 << 2);
 if ((file->f_flags & 00010000) || (((file->f_mapping->host)->i_sb->s_flags & (16)) || ((file->f_mapping->host)->i_flags & 1)))
  res |= (1 << 4);
 if (file->f_flags & 04000000)
  res |= (1 << 5);
 return res;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kiocb_set_rw_flags(struct kiocb *ki, rwf_t flags)
{
 if (__builtin_expect(!!(flags & ~((( __kernel_rwf_t)0x00000001) | (( __kernel_rwf_t)0x00000002) | (( __kernel_rwf_t)0x00000004) | (( __kernel_rwf_t)0x00000008))), 0))
  return -95;

 if (flags & (( __kernel_rwf_t)0x00000008)) {
  if (!(ki->ki_filp->f_mode & (( fmode_t)0x8000000)))
   return -95;
  ki->ki_flags |= (1 << 7);
 }
 if (flags & (( __kernel_rwf_t)0x00000001))
  ki->ki_flags |= (1 << 3);
 if (flags & (( __kernel_rwf_t)0x00000002))
  ki->ki_flags |= (1 << 4);
 if (flags & (( __kernel_rwf_t)0x00000004))
  ki->ki_flags |= ((1 << 4) | (1 << 5));
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 spin_lock(&dentry->d_lockref.lock);
 res = dentry->d_parent->d_inode->i_ino;
 spin_unlock(&dentry->d_lockref.lock);
 return res;
}







struct simple_transaction_argresp {
 ssize_t size;
 char data[0];
};



char *simple_transaction_get(struct file *file, const char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
# 3355 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((format(printf, 1, 2)))
void __simple_attr_check_format(const char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       const char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, const char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) get_filesystem_list(char *buf);
# 3386 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/fs.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int check_sticky(struct inode *dir, struct inode *inode)
{
 if (!(dir->i_mode & 0001000))
  return 0;

 return __check_sticky(dir, inode);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(inode->i_mode) && (inode->i_sb->s_flags & (1<<28)))
  inode->i_flags |= 4096;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_root_inode(struct inode *inode)
{
 return inode == inode->i_sb->s_root->d_inode;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool dir_emit(struct dir_context *ctx,
       const char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     file->f_path.dentry->d_inode->i_ino, 4) == 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(file->f_path.dentry), 4) == 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return false;
  ctx->pos = 2;
 }
 return true;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool dir_relax(struct inode *inode)
{
 inode_unlock(inode);
 inode_lock(inode);
 return !((inode)->i_flags & 16);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool dir_relax_shared(struct inode *inode)
{
 inode_unlock_shared(inode);
 inode_lock_shared(inode);
 return !((inode)->i_flags & 16);
}

extern bool path_noexec(const struct path *path);
extern void inode_nohighmem(struct inode *inode);

int vfs_ioc_setflags_prepare(struct inode *inode, unsigned int oldflags,
        unsigned int flags);

int vfs_ioc_fssetxattr_check(struct inode *inode, const struct fsxattr *old_fa,
        struct fsxattr *fa);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void simple_fill_fsxattr(struct fsxattr *fa, __u32 xflags)
{
 memset(fa, 0, sizeof(*fa));
 fa->fsx_xflags = xflags;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) int inode_drain_writes(struct inode *inode)
{
 inode_dio_wait(inode);
 return filemap_write_and_wait(inode->i_mapping);
}
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/aio_abi.h" 1
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/aio_abi.h"
typedef __kernel_ulong_t aio_context_t;

enum {
 IOCB_CMD_PREAD = 0,
 IOCB_CMD_PWRITE = 1,
 IOCB_CMD_FSYNC = 2,
 IOCB_CMD_FDSYNC = 3,




 IOCB_CMD_NOOP = 6,
 IOCB_CMD_PREADV = 7,
 IOCB_CMD_PWRITEV = 8,
};
# 59 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/aio_abi.h"
struct io_event {
 __u64 data;
 __u64 obj;
 __s64 res;
 __s64 res2;
};







struct iocb {

 __u64 aio_data;


 __u32 aio_key;
 __kernel_rwf_t aio_rw_flags;
# 87 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/aio_abi.h"
 __u16 aio_lio_opcode;
 __s16 aio_reqprio;
 __u32 aio_fildes;

 __u64 aio_buf;
 __u64 aio_nbytes;
 __s64 aio_offset;


 __u64 aio_reserved2;


 __u32 aio_flags;





 __u32 aio_resfd;
};
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/compat.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/compat.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/task_stack.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/task_stack.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/uapi/linux/magic.h" 1
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/task_stack.h" 2








static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *task_stack_page(const struct task_struct *task)
{
 return task->stack;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long *end_of_stack(const struct task_struct *task)
{
 return task->stack;
}
# 62 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/task_stack.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *try_get_task_stack(struct task_struct *tsk)
{
 return atomic_add_unless((&tsk->stack_refcount), 1, 0) ?
  task_stack_page(tsk) : ((void *)0);
}

extern void put_task_stack(struct task_struct *tsk);
# 81 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/sched/task_stack.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int object_is_on_stack(void *obj)
{
 void *stack = task_stack_page(get_current());

 return (obj >= stack) && (obj < (stack + (((1UL) << 12) << (2 + 0))));
}

extern void thread_stack_cache_init(void);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long stack_not_used(struct task_struct *p)
{
 unsigned long *n = end_of_stack(p);

 do {



  n++;

 } while (!*n);




 return (unsigned long)n - (unsigned long)end_of_stack(p);

}

extern void set_task_stack_end_magic(struct task_struct *tsk);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & ((((1UL) << 12) << (2 + 0))-sizeof(void*)));
}
# 11 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/compat.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/user32.h" 1







struct user_i387_ia32_struct {
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;
 u32 st_space[20];
};


struct user32_fxsr_struct {
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;
 unsigned short fop;
 int fip;
 int fcs;
 int foo;
 int fos;
 int mxcsr;
 int reserved;
 int st_space[32];
 int xmm_space[32];
 int padding[56];
};

struct user_regs_struct32 {
 __u32 ebx, ecx, edx, esi, edi, ebp, eax;
 unsigned short ds, __ds, es, __es;
 unsigned short fs, __fs, gs, __gs;
 __u32 orig_eax, eip;
 unsigned short cs, __cs;
 __u32 eflags, esp;
 unsigned short ss, __ss;
};

struct user32 {
  struct user_regs_struct32 regs;
  int u_fpvalid;

  struct user_i387_ia32_struct i387;

  __u32 u_tsize;
  __u32 u_dsize;
  __u32 u_ssize;
  __u32 start_code;
  __u32 start_stack;



  __u32 signal;
  int reserved;
  __u32 u_ar0;

  __u32 u_fpstate;
  __u32 magic;
  char u_comm[32];
  int u_debugreg[8];
};
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/compat.h" 2





typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_time_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
typedef u16 compat_mode_t;
typedef u32 compat_ino_t;
typedef u16 compat_dev_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef u16 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef s32 compat_daddr_t;
typedef u32 compat_caddr_t;
typedef __kernel_fsid_t compat_fsid_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;

typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef s64 __attribute__((aligned(4))) compat_s64;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u32 compat_u32;
typedef u64 __attribute__((aligned(4))) compat_u64;
typedef u32 compat_uptr_t;

struct compat_timespec {
 compat_time_t tv_sec;
 s32 tv_nsec;
};

struct compat_timeval {
 compat_time_t tv_sec;
 s32 tv_usec;
};

struct compat_stat {
 compat_dev_t st_dev;
 u16 __pad1;
 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_nlink_t st_nlink;
 __compat_uid_t st_uid;
 __compat_gid_t st_gid;
 compat_dev_t st_rdev;
 u16 __pad2;
 u32 st_size;
 u32 st_blksize;
 u32 st_blocks;
 u32 st_atime;
 u32 st_atime_nsec;
 u32 st_mtime;
 u32 st_mtime_nsec;
 u32 st_ctime;
 u32 st_ctime_nsec;
 u32 __unused4;
 u32 __unused5;
};

struct compat_flock {
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;
};
# 98 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/compat.h"
struct compat_flock64 {
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;
} __attribute__((packed));

struct compat_statfs {
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];
};



typedef u32 compat_old_sigset_t;




typedef u32 compat_sigset_word;

typedef union compat_sigval {
 compat_int_t sival_int;
 compat_uptr_t sival_ptr;
} compat_sigval_t;

typedef struct compat_siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[128/sizeof(int) - 3];


  struct {
   unsigned int _pid;
   unsigned int _uid;
  } _kill;


  struct {
   compat_timer_t _tid;
   int _overrun;
   compat_sigval_t _sigval;
   int _sys_private;
   int _overrun_incr;
  } _timer;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   compat_sigval_t _sigval;
  } _rt;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   int _status;
   compat_clock_t _utime;
   compat_clock_t _stime;
  } _sigchld;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   int _status;
   compat_s64 _utime;
   compat_s64 _stime;
  } _sigchld_x32;


  struct {
   unsigned int _addr;
   short int _addr_lsb;
   union {

    struct {
     compat_uptr_t _lower;
     compat_uptr_t _upper;
    } _addr_bnd;

    compat_u32 _pkey;
   };
  } _sigfault;


  struct {
   int _band;
   int _fd;
  } _sigpoll;

  struct {
   unsigned int _call_addr;
   int _syscall;
   unsigned int _arch;
  } _sigsys;
 } _sifields;
} compat_siginfo_t;



struct compat_ipc64_perm {
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;
};

struct compat_semid64_ds {
 struct compat_ipc64_perm sem_perm;
 compat_time_t sem_otime;
 compat_ulong_t __unused1;
 compat_time_t sem_ctime;
 compat_ulong_t __unused2;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;
};

struct compat_msqid64_ds {
 struct compat_ipc64_perm msg_perm;
 compat_time_t msg_stime;
 compat_ulong_t __unused1;
 compat_time_t msg_rtime;
 compat_ulong_t __unused2;
 compat_time_t msg_ctime;
 compat_ulong_t __unused3;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};

struct compat_shmid64_ds {
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_time_t shm_atime;
 compat_ulong_t __unused1;
 compat_time_t shm_dtime;
 compat_ulong_t __unused2;
 compat_time_t shm_ctime;
 compat_ulong_t __unused3;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;
};




typedef struct user_regs_struct compat_elf_gregset_t;
# 295 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/compat.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *compat_ptr(compat_uptr_t uptr)
{
 return (void *)(unsigned long)uptr;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) compat_uptr_t ptr_to_compat(void *uptr)
{
 return (u32)(unsigned long)uptr;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *arch_compat_alloc_user_space(long len)
{
 compat_uptr_t sp;

 if (test_ti_thread_flag(((struct thread_info *)get_current()), 17)) {
  sp = ({ unsigned long __ptr = (unsigned long)task_stack_page(get_current()); __ptr += (((1UL) << 12) << (2 + 0)) - 0; ((struct pt_regs *)__ptr) - 1; })->sp;
 } else {

  sp = ({ unsigned long __ptr = (unsigned long)task_stack_page(get_current()); __ptr += (((1UL) << 12) << (2 + 0)) - 0; ((struct pt_regs *)__ptr) - 1; })->sp - 128;
 }

 return (void *)((sp - len) & ~((__typeof__(sp - len))((16)-1)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool in_x32_syscall(void)
{




 return false;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool in_compat_syscall(void)
{
 return (1 && ((struct thread_info *)get_current())->status & 0x0002) || in_x32_syscall();
}
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h" 2
# 65 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h"
typedef struct compat_sigaltstack {
 compat_uptr_t ss_sp;
 int ss_flags;
 compat_size_t ss_size;
} compat_stack_t;
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h"
typedef __compat_uid32_t compat_uid_t;
typedef __compat_gid32_t compat_gid_t;

typedef compat_ulong_t compat_aio_context_t;

struct compat_sel_arg_struct;
struct rusage;

struct compat_itimerspec {
 struct compat_timespec it_interval;
 struct compat_timespec it_value;
};

struct compat_utimbuf {
 compat_time_t actime;
 compat_time_t modtime;
};

struct compat_itimerval {
 struct compat_timeval it_interval;
 struct compat_timeval it_value;
};

struct itimerval;
int get_compat_itimerval(struct itimerval *, const struct compat_itimerval *);
int put_compat_itimerval(struct compat_itimerval *, const struct itimerval *);

struct compat_tms {
 compat_clock_t tms_utime;
 compat_clock_t tms_stime;
 compat_clock_t tms_cutime;
 compat_clock_t tms_cstime;
};

struct compat_timex {
 compat_uint_t modes;
 compat_long_t offset;
 compat_long_t freq;
 compat_long_t maxerror;
 compat_long_t esterror;
 compat_int_t status;
 compat_long_t constant;
 compat_long_t precision;
 compat_long_t tolerance;
 struct compat_timeval time;
 compat_long_t tick;
 compat_long_t ppsfreq;
 compat_long_t jitter;
 compat_int_t shift;
 compat_long_t stabil;
 compat_long_t jitcnt;
 compat_long_t calcnt;
 compat_long_t errcnt;
 compat_long_t stbcnt;
 compat_int_t tai;

 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32;
};

struct timex;
int compat_get_timex(struct timex *, const struct compat_timex *);
int compat_put_timex(struct compat_timex *, const struct timex *);



typedef struct {
 compat_sigset_word sig[(64 / 32)];
} compat_sigset_t;

struct compat_sigaction {

 compat_uptr_t sa_handler;
 compat_ulong_t sa_flags;





 compat_uptr_t sa_restorer;

 compat_sigset_t sa_mask __attribute__((packed));
};





extern int compat_get_timespec(struct timespec *, const void *);
extern int compat_put_timespec(const struct timespec *, void *);
extern int compat_get_timeval(struct timeval *, const void *);
extern int compat_put_timeval(const struct timeval *, void *);
extern int compat_get_timespec64(struct timespec *, const void *);
extern int compat_put_timespec64(const struct timespec *, void *);
extern int get_compat_itimerspec64(struct itimerspec *its,
   const struct compat_itimerspec *uits);
extern int put_compat_itimerspec64(const struct itimerspec *its,
   struct compat_itimerspec *uits);

struct compat_iovec {
 compat_uptr_t iov_base;
 compat_size_t iov_len;
};

struct compat_rlimit {
 compat_ulong_t rlim_cur;
 compat_ulong_t rlim_max;
};

struct compat_rusage {
 struct compat_timeval ru_utime;
 struct compat_timeval ru_stime;
 compat_long_t ru_maxrss;
 compat_long_t ru_ixrss;
 compat_long_t ru_idrss;
 compat_long_t ru_isrss;
 compat_long_t ru_minflt;
 compat_long_t ru_majflt;
 compat_long_t ru_nswap;
 compat_long_t ru_inblock;
 compat_long_t ru_oublock;
 compat_long_t ru_msgsnd;
 compat_long_t ru_msgrcv;
 compat_long_t ru_nsignals;
 compat_long_t ru_nvcsw;
 compat_long_t ru_nivcsw;
};

extern int put_compat_rusage(const struct rusage *,
        struct compat_rusage *);

struct compat_siginfo;

extern long compat_sys_waitid(int, compat_pid_t,
  struct compat_siginfo *, int,
  struct compat_rusage *);

struct compat_dirent {
 u32 d_ino;
 compat_off_t d_off;
 u16 d_reclen;
 char d_name[256];
};

struct compat_ustat {
 compat_daddr_t f_tfree;
 compat_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};



typedef struct compat_sigevent {
 compat_sigval_t sigev_value;
 compat_int_t sigev_signo;
 compat_int_t sigev_notify;
 union {
  compat_int_t _pad[((64/sizeof(int)) - 3)];
  compat_int_t _tid;

  struct {
   compat_uptr_t _function;
   compat_uptr_t _attribute;
  } _sigev_thread;
 } _sigev_un;
} compat_sigevent_t;

struct compat_ifmap {
 compat_ulong_t mem_start;
 compat_ulong_t mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;
};

struct compat_if_settings {
 unsigned int type;
 unsigned int size;
 compat_uptr_t ifs_ifsu;
};

struct compat_ifreq {
 union {
  char ifrn_name[16];
 } ifr_ifrn;
 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  compat_int_t ifru_ivalue;
  compat_int_t ifru_mtu;
  struct compat_ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  compat_caddr_t ifru_data;
  struct compat_if_settings ifru_settings;
 } ifr_ifru;
};

struct compat_ifconf {
 compat_int_t ifc_len;
 compat_caddr_t ifcbuf;
};

struct compat_robust_list {
 compat_uptr_t next;
};

struct compat_robust_list_head {
 struct compat_robust_list list;
 compat_long_t futex_offset;
 compat_uptr_t list_op_pending;
};


struct compat_old_sigaction {
 compat_uptr_t sa_handler;
 compat_old_sigset_t sa_mask;
 compat_ulong_t sa_flags;
 compat_uptr_t sa_restorer;
};


struct compat_keyctl_kdf_params {
 compat_uptr_t hashname;
 compat_uptr_t otherinfo;
 __u32 otherinfolen;
 __u32 __spare[8];
};

struct compat_statfs;
struct compat_statfs64;
struct compat_old_linux_dirent;
struct compat_linux_dirent;
struct linux_dirent64;
struct compat_msghdr;
struct compat_mmsghdr;
struct compat_sysinfo;
struct compat_sysctl_args;
struct compat_kexec_segment;
struct compat_mq_attr;
struct compat_msgbuf;

           long
compat_sys_set_robust_list(struct compat_robust_list_head *head,
      compat_size_t len);
           long
compat_sys_get_robust_list(int pid, compat_uptr_t *head_ptr,
      compat_size_t *len_ptr);

           long compat_sys_ipc(u32, int, int, u32, compat_uptr_t, u32);
           long compat_sys_shmat(int shmid, compat_uptr_t shmaddr, int shmflg);
           long compat_sys_semctl(int semid, int semnum, int cmd, int arg);
           long compat_sys_msgsnd(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, int msgflg);
           long compat_sys_msgrcv(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, compat_long_t msgtyp, int msgflg);
long compat_sys_msgctl(int first, int second, void *uptr);
long compat_sys_shmctl(int first, int second, void *uptr);
long compat_sys_semtimedop(int semid, struct sembuf *tsems,
  unsigned nsems, const struct compat_timespec *timeout);
           long compat_sys_keyctl(u32 option,
         u32 arg2, u32 arg3, u32 arg4, u32 arg5);
           long compat_sys_ustat(unsigned dev, struct compat_ustat *u32);

           ssize_t compat_sys_readv(compat_ulong_t fd,
  const struct compat_iovec *vec, compat_ulong_t vlen);
           ssize_t compat_sys_writev(compat_ulong_t fd,
  const struct compat_iovec *vec, compat_ulong_t vlen);
           ssize_t compat_sys_preadv(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
           ssize_t compat_sys_pwritev(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
           ssize_t compat_sys_preadv2(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, rwf_t flags);
           ssize_t compat_sys_pwritev2(compat_ulong_t fd,
  const struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high, rwf_t flags);


           long compat_sys_preadv64(unsigned long fd,
  const struct compat_iovec *vec,
  unsigned long vlen, loff_t pos);



           long compat_sys_pwritev64(unsigned long fd,
  const struct compat_iovec *vec,
  unsigned long vlen, loff_t pos);



           long compat_sys_readv64v2(unsigned long fd,
  const struct compat_iovec *vec,
  unsigned long vlen, loff_t pos, rwf_t flags);



           long compat_sys_pwritev64v2(unsigned long fd,
  const struct compat_iovec *vec,
  unsigned long vlen, loff_t pos, rwf_t flags);


           long compat_sys_lseek(unsigned int, compat_off_t, unsigned int);

           long compat_sys_execve(const char *filename, const compat_uptr_t *argv,
       const compat_uptr_t *envp);
           long compat_sys_execveat(int dfd, const char *filename,
       const compat_uptr_t *argv,
       const compat_uptr_t *envp, int flags);

           long compat_sys_select(int n, compat_ulong_t *inp,
  compat_ulong_t *outp, compat_ulong_t *exp,
  struct compat_timeval *tvp);

           long compat_sys_old_select(struct compat_sel_arg_struct *arg);

           long compat_sys_wait4(compat_pid_t pid,
     compat_uint_t *stat_addr, int options,
     struct compat_rusage *ru);





long compat_get_bitmap(unsigned long *mask, const compat_ulong_t *umask,
         unsigned long bitmap_size);
long compat_put_bitmap(compat_ulong_t *umask, unsigned long *mask,
         unsigned long bitmap_size);
int copy_siginfo_from_user32(siginfo_t *to, struct compat_siginfo *from);
int copy_siginfo_to_user32(struct compat_siginfo *to, const siginfo_t *from);
int get_compat_sigevent(struct sigevent *event,
  const struct compat_sigevent *u_event);
long compat_sys_rt_tgsigqueueinfo(compat_pid_t tgid, compat_pid_t pid, int sig,
      struct compat_siginfo *uinfo);

           long compat_sys_sigaction(int sig,
                                   const struct compat_old_sigaction *act,
                                   struct compat_old_sigaction *oact);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int compat_timeval_compare(struct compat_timeval *lhs,
     struct compat_timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int compat_timespec_compare(struct compat_timespec *lhs,
     struct compat_timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern int get_compat_itimerspec(struct itimerspec *dst,
     const struct compat_itimerspec *src);
extern int put_compat_itimerspec(struct compat_itimerspec *dst,
     const struct itimerspec *src);

           long compat_sys_gettimeofday(struct compat_timeval *tv,
  struct timezone *tz);
           long compat_sys_settimeofday(struct compat_timeval *tv,
  struct timezone *tz);

           long compat_sys_adjtimex(struct compat_timex *utp);

extern void sigset_from_compat(sigset_t *set, const compat_sigset_t *compat);
extern void sigset_to_compat(compat_sigset_t *compat, const sigset_t *set);

           long compat_sys_migrate_pages(compat_pid_t pid,
  compat_ulong_t maxnode, const compat_ulong_t *old_nodes,
  const compat_ulong_t *new_nodes);

extern int compat_ptrace_request(struct task_struct *child,
     compat_long_t request,
     compat_ulong_t addr, compat_ulong_t data);

extern long compat_arch_ptrace(struct task_struct *child, compat_long_t request,
          compat_ulong_t addr, compat_ulong_t data);
           long compat_sys_ptrace(compat_long_t request, compat_long_t pid,
      compat_long_t addr, compat_long_t data);

           long compat_sys_lookup_dcookie(u32, u32, char *, compat_size_t);



struct epoll_event;
           long compat_sys_epoll_pwait(int epfd,
   struct epoll_event *events,
   int maxevents, int timeout,
   const compat_sigset_t *sigmask,
   compat_size_t sigsetsize);

           long compat_sys_utime(const char *filename,
     struct compat_utimbuf *t);
           long compat_sys_utimensat(unsigned int dfd,
         const char *filename,
         struct compat_timespec *t,
         int flags);

           long compat_sys_time(compat_time_t *tloc);
           long compat_sys_stime(compat_time_t *tptr);
           long compat_sys_signalfd(int ufd,
        const compat_sigset_t *sigmask,
        compat_size_t sigsetsize);
           long compat_sys_timerfd_settime(int ufd, int flags,
       const struct compat_itimerspec *utmr,
       struct compat_itimerspec *otmr);
           long compat_sys_timerfd_gettime(int ufd,
       struct compat_itimerspec *otmr);

           long compat_sys_move_pages(pid_t pid, compat_ulong_t nr_pages,
          __u32 *pages,
          const int *nodes,
          int *status,
          int flags);
           long compat_sys_futimesat(unsigned int dfd,
         const char *filename,
         struct compat_timeval *t);
           long compat_sys_utimes(const char *filename,
      struct compat_timeval *t);
           long compat_sys_newstat(const char *filename,
       struct compat_stat *statbuf);
           long compat_sys_newlstat(const char *filename,
        struct compat_stat *statbuf);
           long compat_sys_newfstatat(unsigned int dfd,
          const char *filename,
          struct compat_stat *statbuf,
          int flag);
           long compat_sys_newfstat(unsigned int fd,
        struct compat_stat *statbuf);
           long compat_sys_statfs(const char *pathname,
      struct compat_statfs *buf);
           long compat_sys_fstatfs(unsigned int fd,
       struct compat_statfs *buf);
           long compat_sys_statfs64(const char *pathname,
        compat_size_t sz,
        struct compat_statfs64 *buf);
           long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz,
         struct compat_statfs64 *buf);
           long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,
       compat_ulong_t arg);
           long compat_sys_fcntl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);
           long compat_sys_io_setup(unsigned nr_reqs, u32 *ctx32p);
           long compat_sys_io_getevents(compat_aio_context_t ctx_id,
     compat_long_t min_nr,
     compat_long_t nr,
     struct io_event *events,
     struct compat_timespec *timeout);
           long compat_sys_io_submit(compat_aio_context_t ctx_id, int nr,
         u32 *iocb);
           long compat_sys_mount(const char *dev_name,
     const char *dir_name,
     const char *type, compat_ulong_t flags,
     const void *data);
           long compat_sys_old_readdir(unsigned int fd,
           struct compat_old_linux_dirent *,
           unsigned int count);
           long compat_sys_getdents(unsigned int fd,
        struct compat_linux_dirent *dirent,
        unsigned int count);
           long compat_sys_vmsplice(int fd, const struct compat_iovec *,
        unsigned int nr_segs, unsigned int flags);
           long compat_sys_open(const char *filename, int flags,
    umode_t mode);
           long compat_sys_openat(int dfd, const char *filename,
      int flags, umode_t mode);
           long compat_sys_open_by_handle_at(int mountdirfd,
          struct file_handle *handle,
          int flags);
           long compat_sys_truncate(const char *, compat_off_t);
           long compat_sys_ftruncate(unsigned int, compat_ulong_t);
           long compat_sys_pselect6(int n, compat_ulong_t *inp,
        compat_ulong_t *outp,
        compat_ulong_t *exp,
        struct compat_timespec *tsp,
        void *sig);
           long compat_sys_ppoll(struct pollfd *ufds,
     unsigned int nfds,
     struct compat_timespec *tsp,
     const compat_sigset_t *sigmask,
     compat_size_t sigsetsize);
           long compat_sys_signalfd4(int ufd,
         const compat_sigset_t *sigmask,
         compat_size_t sigsetsize, int flags);
           long compat_sys_get_mempolicy(int *policy,
      compat_ulong_t *nmask,
      compat_ulong_t maxnode,
      compat_ulong_t addr,
      compat_ulong_t flags);
           long compat_sys_set_mempolicy(int mode, compat_ulong_t *nmask,
      compat_ulong_t maxnode);
           long compat_sys_mbind(compat_ulong_t start, compat_ulong_t len,
     compat_ulong_t mode,
     compat_ulong_t *nmask,
     compat_ulong_t maxnode, compat_ulong_t flags);

           long compat_sys_setsockopt(int fd, int level, int optname,
          char *optval, unsigned int optlen);
           long compat_sys_sendmsg(int fd, struct compat_msghdr *msg,
       unsigned flags);
           long compat_sys_sendmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags);
           long compat_sys_recvmsg(int fd, struct compat_msghdr *msg,
       unsigned int flags);
           long compat_sys_recv(int fd, void *buf, compat_size_t len,
    unsigned flags);
           long compat_sys_recvfrom(int fd, void *buf, compat_size_t len,
       unsigned flags, struct sockaddr *addr,
       int *addrlen);
           long compat_sys_recvmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags,
        struct compat_timespec *timeout);
           long compat_sys_nanosleep(struct compat_timespec *rqtp,
         struct compat_timespec *rmtp);
           long compat_sys_getitimer(int which,
         struct compat_itimerval *it);
           long compat_sys_setitimer(int which,
         struct compat_itimerval *in,
         struct compat_itimerval *out);
           long compat_sys_times(struct compat_tms *tbuf);
           long compat_sys_setrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
           long compat_sys_getrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
           long compat_sys_getrusage(int who, struct compat_rusage *ru);
           long compat_sys_sched_setaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
           long compat_sys_sched_getaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
           long compat_sys_timer_create(clockid_t which_clock,
   struct compat_sigevent *timer_event_spec,
   timer_t *created_timer_id);
           long compat_sys_timer_settime(timer_t timer_id, int flags,
      struct compat_itimerspec *new,
      struct compat_itimerspec *old);
           long compat_sys_timer_gettime(timer_t timer_id,
     struct compat_itimerspec *setting);
           long compat_sys_clock_settime(clockid_t which_clock,
      struct compat_timespec *tp);
           long compat_sys_clock_gettime(clockid_t which_clock,
      struct compat_timespec *tp);
           long compat_sys_clock_adjtime(clockid_t which_clock,
      struct compat_timex *tp);
           long compat_sys_clock_getres(clockid_t which_clock,
     struct compat_timespec *tp);
           long compat_sys_clock_nanosleep(clockid_t which_clock, int flags,
        struct compat_timespec *rqtp,
        struct compat_timespec *rmtp);
           long compat_sys_rt_sigtimedwait(compat_sigset_t *uthese,
  struct compat_siginfo *uinfo,
  struct compat_timespec *uts, compat_size_t sigsetsize);
           long compat_sys_rt_sigsuspend(compat_sigset_t *unewset,
      compat_size_t sigsetsize);
           long compat_sys_rt_sigprocmask(int how, compat_sigset_t *set,
       compat_sigset_t *oset,
       compat_size_t sigsetsize);
           long compat_sys_rt_sigpending(compat_sigset_t *uset,
      compat_size_t sigsetsize);

           long compat_sys_rt_sigaction(int,
     const struct compat_sigaction *,
     struct compat_sigaction *,
     compat_size_t);

           long compat_sys_rt_sigqueueinfo(compat_pid_t pid, int sig,
    struct compat_siginfo *uinfo);
           long compat_sys_sysinfo(struct compat_sysinfo *info);
           long compat_sys_ioctl(unsigned int fd, unsigned int cmd,
     compat_ulong_t arg);
           long compat_sys_futex(u32 *uaddr, int op, u32 val,
  struct compat_timespec *utime, u32 *uaddr2,
  u32 val3);
           long compat_sys_getsockopt(int fd, int level, int optname,
          char *optval, int *optlen);
           long compat_sys_kexec_load(compat_ulong_t entry,
          compat_ulong_t nr_segments,
          struct compat_kexec_segment *,
          compat_ulong_t flags);
           long compat_sys_mq_getsetattr(mqd_t mqdes,
   const struct compat_mq_attr *u_mqstat,
   struct compat_mq_attr *u_omqstat);
           long compat_sys_mq_notify(mqd_t mqdes,
   const struct compat_sigevent *u_notification);
           long compat_sys_mq_open(const char *u_name,
   int oflag, compat_mode_t mode,
   struct compat_mq_attr *u_attr);
           long compat_sys_mq_timedsend(mqd_t mqdes,
   const char *u_msg_ptr,
   compat_size_t msg_len, unsigned int msg_prio,
   const struct compat_timespec *u_abs_timeout);
           ssize_t compat_sys_mq_timedreceive(mqd_t mqdes,
   char *u_msg_ptr,
   compat_size_t msg_len, unsigned int *u_msg_prio,
   const struct compat_timespec *u_abs_timeout);
           long compat_sys_socketcall(int call, u32 *args);
           long compat_sys_sysctl(struct compat_sysctl_args *args);

extern ssize_t compat_rw_copy_check_uvector(int type,
  const struct compat_iovec *uvector,
  unsigned long nr_segs,
  unsigned long fast_segs, struct iovec *fast_pointer,
  struct iovec **ret_pointer);

extern void *compat_alloc_user_space(unsigned long len);

           ssize_t compat_sys_process_vm_readv(compat_pid_t pid,
  const struct compat_iovec *lvec,
  compat_ulong_t liovcnt, const struct compat_iovec *rvec,
  compat_ulong_t riovcnt, compat_ulong_t flags);
           ssize_t compat_sys_process_vm_writev(compat_pid_t pid,
  const struct compat_iovec *lvec,
  compat_ulong_t liovcnt, const struct compat_iovec *rvec,
  compat_ulong_t riovcnt, compat_ulong_t flags);

           long compat_sys_sendfile(int out_fd, int in_fd,
        compat_off_t *offset, compat_size_t count);
           long compat_sys_sendfile64(int out_fd, int in_fd,
        compat_loff_t *offset, compat_size_t count);
           long compat_sys_sigaltstack(const compat_stack_t *uss_ptr,
           compat_stack_t *uoss_ptr);


           long compat_sys_sigpending(compat_old_sigset_t *set);



           long compat_sys_sigprocmask(int how, compat_old_sigset_t *nset,
           compat_old_sigset_t *oset);


int compat_restore_altstack(const compat_stack_t *uss);
int __compat_save_altstack(compat_stack_t *, unsigned long);
# 740 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h"
           long compat_sys_sched_rr_get_interval(compat_pid_t pid,
       struct compat_timespec *interval);

           long compat_sys_fanotify_mark(int, unsigned int, __u32, __u32,
         int, const char *);

           long compat_sys_arch_prctl(int option, unsigned long arg2);
# 764 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/compat.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) struct compat_timeval ns_to_compat_timeval(s64 nsec)
{
 struct timeval tv;
 struct compat_timeval ctv;

 tv = ns_to_timeval(nsec);
 ctv.tv_sec = tv.tv_sec;
 ctv.tv_usec = tv.tv_usec;

 return ctv;
}
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h" 1
# 114 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmemleak.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmemleak.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h" 1
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmemleak.h" 2
# 71 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kmemleak.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_init(void)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_alloc(const void *ptr, size_t size, int min_count,
      gfp_t gfp)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_alloc_recursive(const void *ptr, size_t size,
         int min_count, unsigned long flags,
         gfp_t gfp)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_alloc_percpu(const void *ptr, size_t size,
      gfp_t gfp)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_vmalloc(const struct vm_struct *area, size_t size,
        gfp_t gfp)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_free(const void *ptr)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_free_part(const void *ptr, size_t size)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_free_recursive(const void *ptr, unsigned long flags)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_free_percpu(const void *ptr)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_update_trace(const void *ptr)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_not_leak(const void *ptr)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_ignore(const void *ptr)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_erase(void **ptr)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_no_scan(const void *ptr)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_alloc_phys(phys_addr_t phys, size_t size,
           int min_count, gfp_t gfp)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_free_part_phys(phys_addr_t phys, size_t size)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_not_leak_phys(phys_addr_t phys)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kmemleak_ignore_phys(phys_addr_t phys)
{
}
# 115 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kasan.h" 1






struct kmem_cache;
struct page;
struct vm_struct;
struct task_struct;
# 88 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kasan.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_unpoison_shadow(const void *address, size_t size) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_unpoison_task_stack(struct task_struct *task) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_unpoison_stack_above_sp_to(const void *watermark) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_enable_current(void) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_disable_current(void) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_alloc_pages(struct page *page, unsigned int order) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_free_pages(struct page *page, unsigned int order) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_cache_create(struct kmem_cache *cache,
          unsigned int *size,
          unsigned long *flags) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_poison_slab(struct page *page) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_unpoison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_poison_object_data(struct kmem_cache *cache,
     void *object) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kasan_init_slab_obj(struct kmem_cache *cache,
    const void *object)
{
 return (void *)object;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kasan_kmalloc_large(void *ptr, size_t size, gfp_t flags)
{
 return ptr;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_kfree_large(void *ptr, unsigned long ip) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_poison_kfree(void *ptr, unsigned long ip) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kasan_kmalloc(struct kmem_cache *s, const void *object,
    size_t size, gfp_t flags)
{
 return (void *)object;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kasan_krealloc(const void *object, size_t new_size,
     gfp_t flags)
{
 return (void *)object;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kasan_slab_alloc(struct kmem_cache *s, void *object,
       gfp_t flags)
{
 return object;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool kasan_slab_free(struct kmem_cache *s, void *object,
       unsigned long ip)
{
 return false;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kasan_module_alloc(void *addr, size_t size) { return 0; }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_free_shadow(const struct vm_struct *vm) {}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int kasan_add_zero_shadow(void *start, unsigned long size)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_remove_zero_shadow(void *start,
     unsigned long size)
{}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_unpoison_slab(const void *ptr) { }
static inline __attribute__((unused)) __attribute__((no_instrument_function)) size_t kasan_metadata_size(struct kmem_cache *cache) { return 0; }
# 167 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kasan.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_cache_shrink(struct kmem_cache *cache) {}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_cache_shutdown(struct kmem_cache *cache) {}
# 185 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/kasan.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void kasan_init_tags(void) { }

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kasan_reset_tag(const void *addr)
{
 return (void *)addr;
}
# 116 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h" 2

struct mem_cgroup;



void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) kmem_cache_init(void);
bool slab_is_available(void);

struct kmem_cache *kmem_cache_create(const char *, size_t, size_t,
   unsigned long,
   void (*)(void *));
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);

void memcg_create_kmem_cache(struct mem_cgroup *, struct kmem_cache *);
void memcg_deactivate_kmem_caches(struct mem_cgroup *);
void memcg_destroy_kmem_caches(struct mem_cgroup *);
# 149 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
void * __krealloc(const void *, size_t, gfp_t);
void * krealloc(const void *, size_t, gfp_t);
void kfree(const void *);
void kzfree(const void *);
size_t ksize(const void *);


const char *__check_heap_object(const void *ptr, unsigned long n,
    struct page *page);
# 274 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
enum kmalloc_cache_type {
 KMALLOC_NORMAL = 0,
 KMALLOC_RECLAIM,

 KMALLOC_DMA,

 NR_KMALLOC_TYPES
};


extern struct kmem_cache *
kmalloc_caches[NR_KMALLOC_TYPES][(12 + 1) + 1];

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) enum kmalloc_cache_type kmalloc_type(gfp_t flags)
{





 if (__builtin_expect(!!((flags & ((( gfp_t)0x01u) | (( gfp_t)0x10u))) == 0), 1))
  return KMALLOC_NORMAL;





 return flags & (( gfp_t)0x01u) ? KMALLOC_DMA : KMALLOC_RECLAIM;



}
# 315 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int kmalloc_index(size_t size)
{
 if (!size)
  return 0;

 if (size <= (1 << 3))
  return 3;

 if ((1 << 3) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((1 << 3) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;
 if (size <= 64 * 1024 * 1024) return 26;
 do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("include/linux/slab.h"), "i" (351), "i" (0), "i" (sizeof(struct bug_entry))); } while (0); do { ; do { } while (1); } while (0); } while (0);


 return -1;
}


void *__kmalloc(size_t size, gfp_t flags) __attribute__((__malloc__));
void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags) __attribute__((__malloc__));
void kmem_cache_free(struct kmem_cache *, void *);
# 369 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void kfree_bulk(size_t size, void **p)
{
 kmem_cache_free_bulk(((void *)0), size, p);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *__kmalloc_node(size_t size, gfp_t flags, int node)
{
 return __kmalloc(size, flags);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t flags, int node)
{
 return kmem_cache_alloc(s, flags);
}



extern void *kmem_cache_alloc_trace(struct kmem_cache *, gfp_t, size_t) __attribute__((__malloc__));






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *
kmem_cache_alloc_node_trace(struct kmem_cache *s,
         gfp_t gfpflags,
         int node, size_t size)
{
 return kmem_cache_alloc_trace(s, gfpflags, size);
}
# 435 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
extern void *kmalloc_order(size_t size, gfp_t flags, unsigned int order) __attribute__((__malloc__));


extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order) __attribute__((__malloc__));
# 447 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = get_order(size);
 return kmalloc_order_trace(size, flags, order);
}
# 507 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc(size_t size, gfp_t flags)
{
 if (__builtin_constant_p(size)) {

  unsigned int index;

  if (size > (1UL << (12 + 1)))
   return kmalloc_large(size, flags);

  index = kmalloc_index(size);

  if (!index)
   return ((void *)16);

  return kmem_cache_alloc_trace(
    kmalloc_caches[kmalloc_type(flags)][index],
    flags, size);

 }
 return __kmalloc(size, flags);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) int kmalloc_size(int n)
{

 if (n > 2)
  return 1 << n;

 if (n == 1 && (1 << 3) <= 32)
  return 96;

 if (n == 2 && (1 << 3) <= 64)
  return 192;

 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (12 + 1))) {
  int i = kmalloc_index(size);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(
    kmalloc_caches[kmalloc_type(flags)][i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}

struct memcg_cache_array {
 struct callback_head rcu;
 struct kmem_cache *entries[0];
};
# 605 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
struct memcg_cache_params {
 struct kmem_cache *root_cache;
 union {
  struct {
   struct memcg_cache_array *memcg_caches;
   struct list_head __root_caches_node;
   struct list_head children;
  };
  struct {
   struct mem_cgroup *memcg;
   struct list_head children_node;
   struct list_head kmem_caches_node;

   void (*deact_fn)(struct kmem_cache *);
   union {
    struct callback_head deact_rcu_head;
    struct work_struct deact_work;
   };
  };
 };
};

int memcg_update_all_caches(int num_memcgs);







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return ((void *)0);
 if (__builtin_constant_p(n) && __builtin_constant_p(size))
  return kmalloc(n * size, flags);
 return __kmalloc(n * size, flags);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x8000u));
}
# 663 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);
# 683 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/slab.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x8000u));
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x8000u));
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x8000u), node);
}

unsigned int kmem_cache_size(struct kmem_cache *s);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) kmem_cache_init_late(void);
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/api.h" 1
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/api.h"
extern void kernel_fpu_begin(void);
extern void kernel_fpu_end(void);
extern bool irq_fpu_usable(void);
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/api.h"
extern int cpu_has_xfeatures(u64 xfeatures_mask, const char **feature_name);
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/xstate.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h" 1
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h" 1
# 12 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smap.h" 1
# 49 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/smap.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void clac(void)
{

 asm volatile ("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" : : : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void stac(void)
{

 asm volatile ("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" : : : "memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long smap_save(void)
{
 unsigned long flags;

 asm volatile ("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "pushf; pop %0; " ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n"

        : "=rm" (flags) : : "memory", "cc");

 return flags;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void smap_restore(unsigned long flags)
{
 asm volatile ("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "push %0; popf" "\n" "665""1" ":\n\t" ".popsection\n"
        : : "g" (flags) : "memory", "cc");
}
# 13 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/extable.h" 1
# 17 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/extable.h"
struct exception_table_entry {
 int insn, fixup, handler;
};
struct pt_regs;
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/extable.h"
extern int fixup_exception(struct pt_regs *regs, int trapnr);
extern int fixup_bug(struct pt_regs *regs, int trapnr);
extern bool ex_has_fault_handler(unsigned long ip);
extern void early_fixup_exception(struct pt_regs *regs, int trapnr);
# 14 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h" 2
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_fs(mm_segment_t fs)
{
 get_current()->thread.addr_limit = fs;

 set_ti_thread_flag(((struct thread_info *)get_current()), 31);
}
# 47 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __chk_range_not_ok(unsigned long addr, unsigned long size, unsigned long limit)
{







 if (__builtin_constant_p(size))
  return __builtin_expect(!!(addr > limit - size), 0);


 addr += size;
 if (__builtin_expect(!!(addr < size), 0))
  return true;
 return __builtin_expect(!!(addr > limit), 0);
}
# 119 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
extern int __get_user_1(void);
extern int __get_user_2(void);
extern int __get_user_4(void);
extern int __get_user_8(void);
extern int __get_user_bad(void);
# 226 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
extern void __put_user_bad(void);





extern void __put_user_1(void);
extern void __put_user_2(void);
extern void __put_user_4(void);
extern void __put_user_8(void);
# 464 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
struct __large_struct { unsigned long buf[100]; };
# 578 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
extern unsigned long
copy_from_user_nmi(void *to, const void *from, unsigned long n);
extern long
strncpy_from_user(char *dst, const char *src, long count);

extern long strnlen_user(const char *str, long n);

unsigned long clear_user(void *mem, unsigned long len);
unsigned long __clear_user(void *mem, unsigned long len);

extern void __cmpxchg_wrong_size(void)
                                                     ;
# 686 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h"
extern struct movsl_mask {
 int mask;
} __attribute__((__aligned__((1 << (6))))) movsl_mask;








# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess_64.h" 1
# 20 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess_64.h"
             unsigned long
copy_user_enhanced_fast_string(void *to, const void *from, unsigned len);
             unsigned long
copy_user_generic_string(void *to, const void *from, unsigned len);
             unsigned long
copy_user_generic_unrolled(void *to, const void *from, unsigned len);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
copy_user_generic(void *to, const void *from, unsigned len)
{
 unsigned ret;






 asm volatile ("661:\n\t" "call %P[old]" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+16)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 9*32+ 9)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "call %P[new1]" "\n" "665""1" ":\n\t" "664""2"":\n\t" "call %P[new2]" "\n" "665""2" ":\n\t" ".popsection\n" : "=a" (ret), "=D" (to), "=S" (from), "=d" (len), "+r" (current_stack_pointer) : [old] "i" (copy_user_generic_unrolled), [new1] "i" (copy_user_generic_string), [new2] "i" (copy_user_enhanced_fast_string), "1" (to), "2" (from), "3" (len) : "memory", "rcx", "r8", "r9", "r10", "r11");
# 46 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess_64.h"
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
raw_copy_from_user(void *dst, const void *src, unsigned long size)
{
 int ret = 0;

 if (!__builtin_constant_p(size))
  return copy_user_generic(dst, ( void *)src, size);
 switch (size) {
 case 1:
  ({ stac(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection\n" ::: "memory"); });
  asm volatile("\n" "1:	mov""b"" %2,%""b""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=q"(*(u8 *)dst) : "m" ((*(struct __large_struct *)((u8 *)src))), "i" (1), "0" (ret));

  clac();
  return ret;
 case 2:
  ({ stac(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection\n" ::: "memory"); });
  asm volatile("\n" "1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u16 *)dst) : "m" ((*(struct __large_struct *)((u16 *)src))), "i" (2), "0" (ret));

  clac();
  return ret;
 case 4:
  ({ stac(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection\n" ::: "memory"); });
  asm volatile("\n" "1:	mov""l"" %2,%""k""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u32 *)dst) : "m" ((*(struct __large_struct *)((u32 *)src))), "i" (4), "0" (ret));

  clac();
  return ret;
 case 8:
  ({ stac(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection\n" ::: "memory"); });
  asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (8), "0" (ret));

  clac();
  return ret;
 case 10:
  ({ stac(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection\n" ::: "memory"); });
  asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (10), "0" (ret));

  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u16 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u16 *)(8 + (char *)src)))), "i" (2), "0" (ret));


  clac();
  return ret;
 case 16:
  ({ stac(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 3*32+17)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "( 3*32+18)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" "mfence" "\n" "665""1" ":\n\t" "664""2"":\n\t" "lfence" "\n" "665""2" ":\n\t" ".popsection\n" ::: "memory"); });
  asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (16), "0" (ret));

  if (__builtin_expect(!!(!ret), 1))
   asm volatile("\n" "1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u64 *)(8 + (char *)src)))), "i" (8), "0" (ret));


  clac();
  return ret;
 default:
  return copy_user_generic(dst, ( void *)src, size);
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
raw_copy_to_user(void *dst, const void *src, unsigned long size)
{
 int ret = 0;

 if (!__builtin_constant_p(size))
  return copy_user_generic(( void *)dst, src, size);
 switch (size) {
 case 1:
  stac();
  asm volatile("\n" "1:	mov""b"" %""b""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "iq"(*(u8 *)src), "m" ((*(struct __large_struct *)((u8 *)dst))), "i" (1), "0" (ret));

  clac();
  return ret;
 case 2:
  stac();
  asm volatile("\n" "1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(*(u16 *)src), "m" ((*(struct __large_struct *)((u16 *)dst))), "i" (2), "0" (ret));

  clac();
  return ret;
 case 4:
  stac();
  asm volatile("\n" "1:	mov""l"" %""k""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(*(u32 *)src), "m" ((*(struct __large_struct *)((u32 *)dst))), "i" (4), "0" (ret));

  clac();
  return ret;
 case 8:
  stac();
  asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (8), "0" (ret));

  clac();
  return ret;
 case 10:
  stac();
  asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (10), "0" (ret));

  if (__builtin_expect(!!(!ret), 1)) {
   asm("":::"memory");
   asm volatile("\n" "1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(4[(u16 *)src]), "m" ((*(struct __large_struct *)(4 + (u16 *)dst))), "i" (2), "0" (ret));

  }
  clac();
  return ret;
 case 16:
  stac();
  asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (16), "0" (ret));

  if (__builtin_expect(!!(!ret), 1)) {
   asm("":::"memory");
   asm volatile("\n" "1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(1[(u64 *)src]), "m" ((*(struct __large_struct *)(1 + (u64 *)dst))), "i" (8), "0" (ret));

  }
  clac();
  return ret;
 default:
  return copy_user_generic(( void *)dst, src, size);
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline))
unsigned long raw_copy_in_user(void *dst, const void *src, unsigned long size)
{
 return copy_user_generic(( void *)dst,
     ( void *)src, size);
}

extern long __copy_user_nocache(void *dst, const void *src,
    unsigned size, int zerorest);

extern long __copy_user_flushcache(void *dst, const void *src, unsigned size);
extern void memcpy_page_flushcache(char *to, struct page *page, size_t offset,
      size_t len);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
__copy_from_user_inatomic_nocache(void *dst, const void *src,
      unsigned size)
{
 kasan_check_write(dst, size);
 return __copy_user_nocache(dst, src, size, 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int
__copy_from_user_flushcache(void *dst, const void *src, unsigned size)
{
 kasan_check_write(dst, size);
 return __copy_user_flushcache(dst, src, size);
}

unsigned long
copy_user_handle_tail(char *to, char *from, unsigned len);
# 697 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/uaccess.h" 2
# 15 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h" 2
# 61 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_from_user_inatomic(void *to, const void *from, unsigned long n)
{
 kasan_check_write(to, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_from_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 kasan_check_write(to, n);
 check_object_size(to, n, false);
 return raw_copy_from_user(to, from, n);
}
# 91 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_to_user_inatomic(void *to, const void *from, unsigned long n)
{
 kasan_check_read(from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
__copy_to_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 kasan_check_read(from, n);
 check_object_size(from, n, true);
 return raw_copy_to_user(to, from, n);
}
# 123 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
extern unsigned long
_copy_from_user(void *, const void *, unsigned long);
# 139 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
extern unsigned long
_copy_to_user(void *, const void *, unsigned long);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
copy_from_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(to, n, false)), 1))
  n = _copy_from_user(to, from, n);
 return n;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
copy_to_user(void *to, const void *from, unsigned long n)
{
 if (__builtin_expect(!!(check_copy_size(from, n, true)), 1))
  n = _copy_to_user(to, from, n);
 return n;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) unsigned long
copy_in_user(void *to, const void *from, unsigned long n)
{
 might_fault();
 if (({ ; __builtin_expect(!!(!({ (void)0; __chk_range_not_ok((unsigned long )(to), n, (get_current()->thread.addr_limit.seg)); })), 1); }) && ({ ; __builtin_expect(!!(!({ (void)0; __chk_range_not_ok((unsigned long )(from), n, (get_current()->thread.addr_limit.seg)); })), 1); }))
  n = raw_copy_in_user(to, from, n);
 return n;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pagefault_disabled_inc(void)
{
 get_current()->pagefault_disabled++;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) void pagefault_disabled_dec(void)
{
 get_current()->pagefault_disabled--;
}
# 186 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pagefault_disable(void)
{
 pagefault_disabled_inc();




 __asm__ __volatile__("": : :"memory");
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pagefault_enable(void)
{




 __asm__ __volatile__("": : :"memory");
 pagefault_disabled_dec();
}
# 242 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
extern long probe_kernel_read(void *dst, const void *src, size_t size);
extern long __probe_kernel_read(void *dst, const void *src, size_t size);
# 254 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/uaccess.h"
extern long __attribute__((no_instrument_function)) probe_kernel_write(void *dst, const void *src, size_t size);
extern long __attribute__((no_instrument_function)) __probe_kernel_write(void *dst, const void *src, size_t size);

extern long strncpy_from_unsafe(char *dst, const void *unsafe_addr, long count);
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/xstate.h" 2
# 42 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/xstate.h"
extern u64 xfeatures_mask;
extern u64 xstate_fx_sw_bytes[6];

extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) update_regset_xstate_info(unsigned int size,
          u64 xstate_mask);

void fpu__xstate_clear_all_cpu_caps(void);
void *get_xsave_addr(struct xregs_state *xsave, int xstate);
const void *get_xsave_field_ptr(int xstate_field);
int using_compacted_format(void);
int copy_xstate_to_kernel(void *kbuf, struct xregs_state *xsave, unsigned int offset, unsigned int size);
int copy_xstate_to_user(void *ubuf, struct xregs_state *xsave, unsigned int offset, unsigned int size);
int copy_kernel_to_xstate(struct xregs_state *xsave, const void *kbuf);
int copy_user_to_xstate(struct xregs_state *xsave, const void *ubuf);


extern int validate_xstate_header(const struct xstate_header *hdr);
# 21 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/trace/fpu.h" 1







# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/tracepoint.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/tracepoint.h"
struct module;
struct tracepoint;
struct notifier_block;

struct trace_eval_map {
 const char *system;
 const char *eval_string;
 unsigned long eval_value;
};



extern int
tracepoint_probe_register(struct tracepoint *tp, void *probe, void *data);
extern int
tracepoint_probe_register_prio(struct tracepoint *tp, void *probe, void *data,
          int prio);
extern int
tracepoint_probe_unregister(struct tracepoint *tp, void *probe, void *data);
extern void
for_each_kernel_tracepoint(void (*fct)(struct tracepoint *tp, void *priv),
  void *priv);


struct tp_module {
 struct list_head list;
 struct module *mod;
};

bool trace_module_has_bad_taint(struct module *mod);
extern int register_tracepoint_module_notifier(struct notifier_block *nb);
extern int unregister_tracepoint_module_notifier(struct notifier_block *nb);
# 78 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/linux/tracepoint.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void tracepoint_synchronize_unregister(void)
{
 synchronize_sched();
}


extern int syscall_regfunc(void);
extern void syscall_unregfunc(void);
# 9 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/trace/fpu.h" 2
# 35 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/trace/fpu.h"
 ;

extern struct tracepoint __tracepoint_x86_fpu_before_save; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_before_save(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_before_save.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (40), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_before_save)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_before_save)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_before_save)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_before_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_save)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_before_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_save)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_before_save)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_before_save.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_before_save.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_before_save.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_before_save.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_before_save.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_before_save.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_before_save.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_before_save.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_before_save_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_before_save.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (40), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_before_save)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_before_save)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_before_save)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_before_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_save)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_before_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_save)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_before_save)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_before_save(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_before_save, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_before_save(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_before_save, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_before_save(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_before_save, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_before_save(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_before_save_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_before_save.key); };




extern struct tracepoint __tracepoint_x86_fpu_after_save; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_after_save(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_after_save.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (45), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_after_save)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_after_save)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_after_save)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_after_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_save)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_after_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_save)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_after_save)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_after_save.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_after_save.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_after_save.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_after_save.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_after_save.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_after_save.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_after_save.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_after_save.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_after_save_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_after_save.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (45), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_after_save)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_after_save)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_after_save)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_after_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_save)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_after_save)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_save)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_after_save)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_after_save(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_after_save, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_after_save(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_after_save, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_after_save(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_after_save, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_after_save(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_after_save_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_after_save.key); };




extern struct tracepoint __tracepoint_x86_fpu_before_restore; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_before_restore(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_before_restore.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (50), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_before_restore)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_before_restore)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_before_restore)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_before_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_restore)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_before_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_restore)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_before_restore)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_before_restore.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_before_restore.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_before_restore.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_before_restore.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_before_restore.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_before_restore.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_before_restore.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_before_restore.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_before_restore_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_before_restore.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (50), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_before_restore)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_before_restore)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_before_restore)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_before_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_restore)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_before_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_before_restore)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_before_restore)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_before_restore(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_before_restore, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_before_restore(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_before_restore, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_before_restore(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_before_restore, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_before_restore(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_before_restore_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_before_restore.key); };




extern struct tracepoint __tracepoint_x86_fpu_after_restore; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_after_restore(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_after_restore.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (55), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_after_restore)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_after_restore)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_after_restore)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_after_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_restore)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_after_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_restore)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_after_restore)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_after_restore.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_after_restore.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_after_restore.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_after_restore.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_after_restore.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_after_restore.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_after_restore.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_after_restore.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_after_restore_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_after_restore.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (55), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_after_restore)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_after_restore)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_after_restore)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_after_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_restore)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_after_restore)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_after_restore)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_after_restore)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_after_restore(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_after_restore, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_after_restore(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_after_restore, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_after_restore(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_after_restore, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_after_restore(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_after_restore_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_after_restore.key); };




extern struct tracepoint __tracepoint_x86_fpu_regs_activated; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_regs_activated(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_regs_activated.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (60), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_regs_activated)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_regs_activated)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_regs_activated)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_regs_activated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_activated)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_regs_activated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_activated)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_regs_activated)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_regs_activated.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_regs_activated.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_regs_activated.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_regs_activated.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_regs_activated.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_regs_activated.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_regs_activated.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_regs_activated.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_regs_activated_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_regs_activated.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (60), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_regs_activated)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_regs_activated)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_regs_activated)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_regs_activated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_activated)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_regs_activated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_activated)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_regs_activated)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_regs_activated(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_regs_activated, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_regs_activated(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_regs_activated, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_regs_activated(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_regs_activated, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_regs_activated(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_regs_activated_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_regs_activated.key); };




extern struct tracepoint __tracepoint_x86_fpu_regs_deactivated; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_regs_deactivated(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_regs_deactivated.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (65), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_regs_deactivated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_deactivated)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_regs_deactivated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_deactivated)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_regs_deactivated.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_regs_deactivated.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_regs_deactivated.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_regs_deactivated.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_regs_deactivated.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_regs_deactivated.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_regs_deactivated.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_regs_deactivated.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_regs_deactivated_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_regs_deactivated.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (65), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_regs_deactivated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_deactivated)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_regs_deactivated)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_regs_deactivated)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_regs_deactivated)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_regs_deactivated(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_regs_deactivated, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_regs_deactivated(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_regs_deactivated, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_regs_deactivated(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_regs_deactivated, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_regs_deactivated(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_regs_deactivated_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_regs_deactivated.key); };




extern struct tracepoint __tracepoint_x86_fpu_activate_state; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_activate_state(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_activate_state.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (70), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_activate_state)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_activate_state)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_activate_state)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_activate_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_activate_state)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_activate_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_activate_state)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_activate_state)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_activate_state.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_activate_state.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_activate_state.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_activate_state.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_activate_state.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_activate_state.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_activate_state.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_activate_state.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_activate_state_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_activate_state.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (70), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_activate_state)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_activate_state)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_activate_state)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_activate_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_activate_state)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_activate_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_activate_state)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_activate_state)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_activate_state(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_activate_state, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_activate_state(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_activate_state, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_activate_state(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_activate_state, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_activate_state(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_activate_state_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_activate_state.key); };




extern struct tracepoint __tracepoint_x86_fpu_init_state; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_init_state(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_init_state.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (75), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_init_state)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_init_state)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_init_state)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_init_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_init_state)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_init_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_init_state)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_init_state)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_init_state.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_init_state.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_init_state.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_init_state.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_init_state.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_init_state.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_init_state.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_init_state.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_init_state_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_init_state.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (75), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_init_state)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_init_state)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_init_state)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_init_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_init_state)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_init_state)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_init_state)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_init_state)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_init_state(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_init_state, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_init_state(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_init_state, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_init_state(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_init_state, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_init_state(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_init_state_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_init_state.key); };




extern struct tracepoint __tracepoint_x86_fpu_dropped; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_dropped(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_dropped.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (80), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_dropped)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_dropped)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_dropped)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_dropped)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_dropped)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_dropped)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_dropped)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_dropped)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_dropped.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_dropped.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_dropped.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_dropped.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_dropped.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_dropped.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_dropped.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_dropped.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_dropped_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_dropped.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (80), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_dropped)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_dropped)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_dropped)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_dropped)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_dropped)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_dropped)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_dropped)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_dropped)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_dropped(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_dropped, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_dropped(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_dropped, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_dropped(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_dropped, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_dropped(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_dropped_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_dropped.key); };




extern struct tracepoint __tracepoint_x86_fpu_copy_src; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_copy_src(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_copy_src.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (85), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_copy_src)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_copy_src)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_copy_src)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_copy_src)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_src)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_copy_src)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_src)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_copy_src)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_copy_src.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_copy_src.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_copy_src.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_copy_src.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_copy_src.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_copy_src.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_copy_src.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_copy_src.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_copy_src_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_copy_src.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (85), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_copy_src)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_copy_src)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_copy_src)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_copy_src)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_src)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_copy_src)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_src)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_copy_src)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_copy_src(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_copy_src, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_copy_src(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_copy_src, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_copy_src(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_copy_src, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_copy_src(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_copy_src_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_copy_src.key); };




extern struct tracepoint __tracepoint_x86_fpu_copy_dst; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_copy_dst(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_copy_dst.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (90), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_copy_dst)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_copy_dst)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_copy_dst)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_copy_dst)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_dst)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_copy_dst)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_dst)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_copy_dst)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_copy_dst.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_copy_dst.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_copy_dst.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_copy_dst.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_copy_dst.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_copy_dst.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_copy_dst.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_copy_dst.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_copy_dst_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_copy_dst.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (90), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_copy_dst)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_copy_dst)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_copy_dst)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_copy_dst)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_dst)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_copy_dst)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_copy_dst)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_copy_dst)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_copy_dst(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_copy_dst, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_copy_dst(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_copy_dst, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_copy_dst(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_copy_dst, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_copy_dst(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_copy_dst_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_copy_dst.key); };




extern struct tracepoint __tracepoint_x86_fpu_xstate_check_failed; static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_xstate_check_failed(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_xstate_check_failed.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (0) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (95), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (0) rcu_irq_exit_irqson(); } while (0); if (0 && (cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) { rcu_read_lock_sched_notrace(); ({ typeof(*(__tracepoint_x86_fpu_xstate_check_failed.funcs)) *________p1 = (typeof(*(__tracepoint_x86_fpu_xstate_check_failed.funcs)) *)({ union { typeof((__tracepoint_x86_fpu_xstate_check_failed.funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&((__tracepoint_x86_fpu_xstate_check_failed.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_xstate_check_failed.funcs))); else __read_once_size_nocheck(&((__tracepoint_x86_fpu_xstate_check_failed.funcs)), __u.__c, sizeof((__tracepoint_x86_fpu_xstate_check_failed.funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*(__tracepoint_x86_fpu_xstate_check_failed.funcs)) *)(________p1)); }); rcu_read_unlock_sched_notrace(); } } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void trace_x86_fpu_xstate_check_failed_rcuidle(struct fpu *fpu) { if (static_key_false(&__tracepoint_x86_fpu_xstate_check_failed.key)) do { struct tracepoint_func *it_func_ptr; void *it_func; void *__data; if (!(cpumask_test_cpu(((({ typeof(cpu_number) pscr_ret__; do { const void *__vpp_verify = (typeof((&(cpu_number)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(cpu_number)) { case 1: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 2: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 4: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; case 8: pscr_ret__ = ({ typeof(cpu_number) pfo_ret__; switch (sizeof(cpu_number)) { case 1: asm volatile("mov" "b ""%%""gs"":" "%" "1"",%0" : "=q" (pfo_ret__) : "m" (cpu_number)); break; case 2: asm volatile("mov" "w ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 4: asm volatile("mov" "l ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; case 8: asm volatile("mov" "q ""%%""gs"":" "%" "1"",%0" : "=r" (pfo_ret__) : "m" (cpu_number)); break; default: __bad_percpu_size(); } pfo_ret__; }); break; default: __bad_size_call_parameter(); break; } pscr_ret__; }))), ((const struct cpumask *)&__cpu_online_mask)))) return; if (1) { if (({ int __ret_warn_on = !!(rcu_irq_enter_disabled()); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/trace/fpu.h"), "i" (95), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); })) return; rcu_irq_enter_irqson(); } rcu_read_lock_sched_notrace(); it_func_ptr = ({ typeof(*((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) *________p1 = (typeof(*((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) *)({ union { typeof(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) __val; char __c[1]; } __u; if (1) __read_once_size(&(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs))); else __read_once_size_nocheck(&(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)), __u.__c, sizeof(((&__tracepoint_x86_fpu_xstate_check_failed)->funcs))); do { } while (0); __u.__val; }); do { } while (0); ; ((typeof(*((&__tracepoint_x86_fpu_xstate_check_failed)->funcs)) *)(________p1)); }); if (it_func_ptr) { do { it_func = (it_func_ptr)->func; __data = (it_func_ptr)->data; ((void(*)(void *__data, struct fpu *fpu))(it_func))(__data, fpu); } while ((++it_func_ptr)->func); } rcu_read_unlock_sched_notrace(); if (1) rcu_irq_exit_irqson(); } while (0); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_x86_fpu_xstate_check_failed(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_register(&__tracepoint_x86_fpu_xstate_check_failed, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int register_trace_prio_x86_fpu_xstate_check_failed(void (*probe)(void *__data, struct fpu *fpu), void *data, int prio) { return tracepoint_probe_register_prio(&__tracepoint_x86_fpu_xstate_check_failed, (void *)probe, data, prio); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) int unregister_trace_x86_fpu_xstate_check_failed(void (*probe)(void *__data, struct fpu *fpu), void *data) { return tracepoint_probe_unregister(&__tracepoint_x86_fpu_xstate_check_failed, (void *)probe, data); } static inline __attribute__((unused)) __attribute__((no_instrument_function)) void check_trace_callback_type_x86_fpu_xstate_check_failed(void (*cb)(void *__data, struct fpu *fpu)) { } static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool trace_x86_fpu_xstate_check_failed_enabled(void) { return static_key_false(&__tracepoint_x86_fpu_xstate_check_failed.key); };
# 104 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/trace/fpu.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/trace/define_trace.h" 1
# 105 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/trace/fpu.h" 2
# 23 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h" 2




extern void fpu__initialize(struct fpu *fpu);
extern void fpu__prepare_read(struct fpu *fpu);
extern void fpu__prepare_write(struct fpu *fpu);
extern void fpu__save(struct fpu *fpu);
extern void fpu__restore(struct fpu *fpu);
extern int fpu__restore_sig(void *buf, int ia32_frame);
extern void fpu__drop(struct fpu *fpu);
extern int fpu__copy(struct fpu *dst_fpu, struct fpu *src_fpu);
extern void fpu__clear(struct fpu *fpu);
extern int fpu__exception_code(struct fpu *fpu, int trap_nr);
extern int dump_fpu(struct pt_regs *ptregs, struct user_i387_struct *fpstate);




extern void fpu__init_cpu(void);
extern void fpu__init_system_xstate(void);
extern void fpu__init_cpu_xstate(void);
extern void fpu__init_system(struct cpuinfo_x86 *c);
extern void fpu__init_check_bugs(void);
extern void fpu__resume_cpu(void);
extern u64 fpu__get_supported_xfeatures_mask(void);
# 62 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((pure)) bool use_xsaveopt(void)
{
 return ( __builtin_constant_p((__builtin_constant_p((10*32+ 0)) && ( ((((10*32+ 0))>>5)==(0) && (1UL<<(((10*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((10*32+ 0))>>5)==(1) && (1UL<<(((10*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((10*32+ 0))>>5)==(2) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(3) && (1UL<<(((10*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((10*32+ 0))>>5)==(4) && (1UL<<(((10*32+ 0))&31) & (0) )) || ((((10*32+ 0))>>5)==(5) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(6) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(7) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(8) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(9) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(10) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(11) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(12) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(13) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(14) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(15) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(16) && (1UL<<(((10*32+ 0))&31) & (0) )) || ((((10*32+ 0))>>5)==(17) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(18) && (1UL<<(((10*32+ 0))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((10*32+ 0))) ? constant_test_bit(((10*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((10*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((10*32+ 0)) && ( ((((10*32+ 0))>>5)==(0) && (1UL<<(((10*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((10*32+ 0))>>5)==(1) && (1UL<<(((10*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((10*32+ 0))>>5)==(2) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(3) && (1UL<<(((10*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((10*32+ 0))>>5)==(4) && (1UL<<(((10*32+ 0))&31) & (0) )) || ((((10*32+ 0))>>5)==(5) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(6) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(7) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(8) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(9) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(10) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(11) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(12) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(13) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(14) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(15) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(16) && (1UL<<(((10*32+ 0))&31) & (0) )) || ((((10*32+ 0))>>5)==(17) && (1UL<<(((10*32+ 0))&31) & 0 )) || ((((10*32+ 0))>>5)==(18) && (1UL<<(((10*32+ 0))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((10*32+ 0))) ? constant_test_bit(((10*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((10*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((10*32+ 0)) );
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((pure)) bool use_xsave(void)
{
 return ( __builtin_constant_p((__builtin_constant_p(( 4*32+26)) && ( (((( 4*32+26))>>5)==(0) && (1UL<<((( 4*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+26))>>5)==(1) && (1UL<<((( 4*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+26))>>5)==(2) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(3) && (1UL<<((( 4*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+26))>>5)==(4) && (1UL<<((( 4*32+26))&31) & (0) )) || (((( 4*32+26))>>5)==(5) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(6) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(7) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(8) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(9) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(10) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(11) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(12) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(13) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(14) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(15) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(16) && (1UL<<((( 4*32+26))&31) & (0) )) || (((( 4*32+26))>>5)==(17) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(18) && (1UL<<((( 4*32+26))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+26))) ? constant_test_bit((( 4*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 4*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 4*32+26)) && ( (((( 4*32+26))>>5)==(0) && (1UL<<((( 4*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+26))>>5)==(1) && (1UL<<((( 4*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+26))>>5)==(2) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(3) && (1UL<<((( 4*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+26))>>5)==(4) && (1UL<<((( 4*32+26))&31) & (0) )) || (((( 4*32+26))>>5)==(5) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(6) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(7) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(8) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(9) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(10) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(11) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(12) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(13) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(14) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(15) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(16) && (1UL<<((( 4*32+26))&31) & (0) )) || (((( 4*32+26))>>5)==(17) && (1UL<<((( 4*32+26))&31) & 0 )) || (((( 4*32+26))>>5)==(18) && (1UL<<((( 4*32+26))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+26))) ? constant_test_bit((( 4*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 4*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 4*32+26)) );
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) __attribute__((always_inline)) __attribute__((pure)) bool use_fxsr(void)
{
 return ( __builtin_constant_p((__builtin_constant_p(( 0*32+24)) && ( (((( 0*32+24))>>5)==(0) && (1UL<<((( 0*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+24))>>5)==(1) && (1UL<<((( 0*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+24))>>5)==(2) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(3) && (1UL<<((( 0*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+24))>>5)==(4) && (1UL<<((( 0*32+24))&31) & (0) )) || (((( 0*32+24))>>5)==(5) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(6) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(7) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(8) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(9) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(10) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(11) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(12) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(13) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(14) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(15) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(16) && (1UL<<((( 0*32+24))&31) & (0) )) || (((( 0*32+24))>>5)==(17) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(18) && (1UL<<((( 0*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 0*32+24))) ? constant_test_bit((( 0*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 0*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 0*32+24)) && ( (((( 0*32+24))>>5)==(0) && (1UL<<((( 0*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+24))>>5)==(1) && (1UL<<((( 0*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+24))>>5)==(2) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(3) && (1UL<<((( 0*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+24))>>5)==(4) && (1UL<<((( 0*32+24))&31) & (0) )) || (((( 0*32+24))>>5)==(5) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(6) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(7) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(8) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(9) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(10) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(11) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(12) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(13) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(14) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(15) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(16) && (1UL<<((( 0*32+24))&31) & (0) )) || (((( 0*32+24))>>5)==(17) && (1UL<<((( 0*32+24))&31) & 0 )) || (((( 0*32+24))>>5)==(18) && (1UL<<((( 0*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 0*32+24))) ? constant_test_bit((( 0*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 0*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 0*32+24)) );
}





extern union fpregs_state init_fpstate;

extern void fpstate_init(union fpregs_state *state);



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void fpstate_init_soft(struct swregs_state *soft) {}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void fpstate_init_xstate(struct xregs_state *xsave)
{




 xsave->header.xcomp_bv = ((u64)1 << 63) | xfeatures_mask;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void fpstate_init_fxstate(struct fxregs_state *fx)
{
 fx->cwd = 0x37f;
 fx->mxcsr = 0x1f80;
}
extern void fpstate_sanitize_xstate(struct fpu *fpu);
# 131 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_fregs_to_user(struct fregs_state *fx)
{
 return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "fnsave %[fx]; fwait" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), [fx] "=m" (*fx) : "0"(0), "m" (*fx)); err; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_fxregs_to_user(struct fxregs_state *fx)
{
 if (0)
  return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "fxsave %[fx]" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), [fx] "=m" (*fx) : "0"(0), "m" (*fx)); err; });
 else if (1)
  return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "fxsaveq %[fx]" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), [fx] "=m" (*fx) : "0"(0), "m" (*fx)); err; });


 return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "rex64/fxsave (%[fx])" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), "=m" (*fx) : "0"(0), [fx] "R" (fx)); err; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_kernel_to_fxregs(struct fxregs_state *fx)
{
 if (0) {
  asm volatile("1:" "fxrstor %[fx]" "\n\t" "2:\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_fprestore" ") - .\n" " .popsection\n" : "=m" (*fx) : [fx] "m" (*fx));
 } else {
  if (1) {
   asm volatile("1:" "fxrstorq %[fx]" "\n\t" "2:\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_fprestore" ") - .\n" " .popsection\n" : "=m" (*fx) : [fx] "m" (*fx));
  } else {

   asm volatile("1:" "rex64/fxrstor (%[fx])" "\n\t" "2:\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_fprestore" ") - .\n" " .popsection\n" : "=m" (*fx) : [fx] "R" (fx), "m" (*fx));
  }
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_user_to_fxregs(struct fxregs_state *fx)
{
 if (0)
  return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "fxrstor %[fx]" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), "=m" (*fx) : "0"(0), [fx] "m" (*fx)); err; });
 else if (1)
  return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "fxrstorq %[fx]" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), "=m" (*fx) : "0"(0), [fx] "m" (*fx)); err; });


 return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "rex64/fxrstor (%[fx])" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), "=m" (*fx) : "0"(0), [fx] "R" (fx), "m" (*fx)); err; });

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_kernel_to_fregs(struct fregs_state *fx)
{
 asm volatile("1:" "frstor %[fx]" "\n\t" "2:\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "2b" ") - .\n" " .long (" "ex_handler_fprestore" ") - .\n" " .popsection\n" : "=m" (*fx) : [fx] "m" (*fx));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_user_to_fregs(struct fregs_state *fx)
{
 return ({ int err; might_fault(); asm volatile("661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "1:" "frstor %[fx]" "\n\t" "2: " "661:\n\t" "" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 9*32+20)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "665""1" ":\n\t" ".popsection\n" "\n" ".section .fixup,\"ax\"\n" "3:  movl $-1,%[err]\n" "    jmp  2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err), "=m" (*fx) : "0"(0), [fx] "m" (*fx)); err; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_fxregs_to_kernel(struct fpu *fpu)
{
 if (0)
  asm volatile( "fxsave %[fx]" : [fx] "=m" (fpu->state.fxsave));
 else if (1)
  asm volatile("fxsaveq %[fx]" : [fx] "=m" (fpu->state.fxsave));
 else {
# 211 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
  asm volatile( "rex64/fxsave (%[fx])"
        : "=m" (fpu->state.fxsave)
        : [fx] "R" (&fpu->state.fxsave));
 }
}
# 285 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_xregs_to_kernel_booting(struct xregs_state *xstate)
{
 u64 mask = -1;
 u32 lmask = mask;
 u32 hmask = mask >> 32;
 int err;

 ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/fpu/internal.h"), "i" (292), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (( __builtin_constant_p((__builtin_constant_p((10*32+ 3)) && ( ((((10*32+ 3))>>5)==(0) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((10*32+ 3))>>5)==(1) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((10*32+ 3))>>5)==(2) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(3) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((10*32+ 3))>>5)==(4) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(5) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(6) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(7) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(8) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(9) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(10) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(11) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(12) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(13) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(14) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(15) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(16) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(17) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(18) && (1UL<<(((10*32+ 3))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((10*32+ 3))) ? constant_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((10*32+ 3)) && ( ((((10*32+ 3))>>5)==(0) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((10*32+ 3))>>5)==(1) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((10*32+ 3))>>5)==(2) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(3) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((10*32+ 3))>>5)==(4) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(5) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(6) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(7) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(8) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(9) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(10) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(11) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(12) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(13) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(14) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(15) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(16) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(17) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(18) && (1UL<<(((10*32+ 3))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((10*32+ 3))) ? constant_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((10*32+ 3)) ))
  asm volatile("1:" ".byte " "0x48, " "0x0f,0xc7,0x2f" "\n\t" "xor %[err], %[err]\n" "2:\n\t" ".pushsection .fixup,\"ax\"\n\t" "3: movl $-2,%[err]\n\t" "jmp 2b\n\t" ".popsection\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err) : "D" (xstate), "m" (*xstate), "a" (lmask), "d" (hmask) : "memory");
 else
  asm volatile("1:" ".byte " "0x48, " "0x0f,0xae,0x27" "\n\t" "xor %[err], %[err]\n" "2:\n\t" ".pushsection .fixup,\"ax\"\n\t" "3: movl $-2,%[err]\n\t" "jmp 2b\n\t" ".popsection\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err) : "D" (xstate), "m" (*xstate), "a" (lmask), "d" (hmask) : "memory");


 ({ int __ret_warn_on = !!(err); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/fpu/internal.h"), "i" (300), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_kernel_to_xregs_booting(struct xregs_state *xstate)
{
 u64 mask = -1;
 u32 lmask = mask;
 u32 hmask = mask >> 32;
 int err;

 ({ int __ret_warn_on = !!(system_state != SYSTEM_BOOTING); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/fpu/internal.h"), "i" (314), "i" ((1 << 0)|(((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 if (( __builtin_constant_p((__builtin_constant_p((10*32+ 3)) && ( ((((10*32+ 3))>>5)==(0) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((10*32+ 3))>>5)==(1) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((10*32+ 3))>>5)==(2) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(3) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((10*32+ 3))>>5)==(4) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(5) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(6) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(7) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(8) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(9) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(10) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(11) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(12) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(13) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(14) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(15) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(16) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(17) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(18) && (1UL<<(((10*32+ 3))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((10*32+ 3))) ? constant_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((10*32+ 3)) && ( ((((10*32+ 3))>>5)==(0) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((10*32+ 3))>>5)==(1) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((10*32+ 3))>>5)==(2) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(3) && (1UL<<(((10*32+ 3))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((10*32+ 3))>>5)==(4) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(5) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(6) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(7) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(8) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(9) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(10) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(11) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(12) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(13) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(14) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(15) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(16) && (1UL<<(((10*32+ 3))&31) & (0) )) || ((((10*32+ 3))>>5)==(17) && (1UL<<(((10*32+ 3))&31) & 0 )) || ((((10*32+ 3))>>5)==(18) && (1UL<<(((10*32+ 3))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((10*32+ 3))) ? constant_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((10*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((10*32+ 3)) ))
  asm volatile("1:" ".byte " "0x48, " "0x0f,0xc7,0x1f" "\n\t" "xor %[err], %[err]\n" "2:\n\t" ".pushsection .fixup,\"ax\"\n\t" "3: movl $-2,%[err]\n\t" "jmp 2b\n\t" ".popsection\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err) : "D" (xstate), "m" (*xstate), "a" (lmask), "d" (hmask) : "memory");
 else
  asm volatile("1:" ".byte " "0x48, " "0x0f,0xae,0x2f" "\n\t" "xor %[err], %[err]\n" "2:\n\t" ".pushsection .fixup,\"ax\"\n\t" "3: movl $-2,%[err]\n\t" "jmp 2b\n\t" ".popsection\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err) : "D" (xstate), "m" (*xstate), "a" (lmask), "d" (hmask) : "memory");





 ({ int __ret_warn_on = !!(err); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/fpu/internal.h"), "i" (325), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_xregs_to_kernel(struct xregs_state *xstate)
{
 u64 mask = -1;
 u32 lmask = mask;
 u32 hmask = mask >> 32;
 int err;

 ({ int __ret_warn_on = !!(!alternatives_patched); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/fpu/internal.h"), "i" (338), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });

 asm volatile("661:\n\t" ".byte " "0x48, " "0x0f,0xae,0x27" "\n662:\n" ".skip -((" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")) > 0) * " "(" "((" "665""1""f-""664""1""f" ") ^ (((" "665""1""f-""664""1""f" ") ^ (" "665""2""f-""664""2""f" ")) & -(-((" "665""1""f-""664""1""f" ") < (" "665""2""f-""664""2""f" ")))))" " - (" "662b-661b" ")), 0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(10*32+ 0)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" " .long 661b - .\n" " .long " "664""2""f - .\n" " .word " "(10*32+ 3)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""2""f-""664""2""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte " "0x48, " "0x0f,0xae,0x37" "\n" "665""1" ":\n\t" "664""2"":\n\t" ".byte " "0x48, " "0x0f,0xc7,0x2f" "\n" "665""2" ":\n\t" ".popsection\n" "\n" "xor %[err], %[err]\n" "3:\n" ".pushsection .fixup,\"ax\"\n" "4: movl $-2, %[err]\n" "jmp 3b\n" ".popsection\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "661b" ") - .\n" " .long (" "4b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err) : "D" (xstate), "m" (*xstate), "a" (lmask), "d" (hmask) : "memory");


 ({ int __ret_warn_on = !!(err); if (__builtin_expect(!!(__ret_warn_on), 0)) do { do { asm volatile("1:\t" ".byte 0x0f, 0x0b" "\n" ".pushsection __bug_table,\"aw\"\n" "2:\t" ".long " "1b" " - 2b" "\t# bug_entry::bug_addr\n" "\t" ".long " "%c0" " - 2b" "\t# bug_entry::file\n" "\t.word %c1" "\t# bug_entry::line\n" "\t.word %c2" "\t# bug_entry::flags\n" "\t.org 2b+%c3\n" ".popsection" : : "i" ("arch/x86/include/asm/fpu/internal.h"), "i" (343), "i" ((1 << 0)|((1 << 1)|((9) << 8))), "i" (sizeof(struct bug_entry))); } while (0); ; } while (0); __builtin_expect(!!(__ret_warn_on), 0); });
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_kernel_to_xregs(struct xregs_state *xstate, u64 mask)
{
 u32 lmask = mask;
 u32 hmask = mask >> 32;

 asm volatile("661:\n\t" ".byte " "0x48, " "0x0f,0xae,0x2f" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "(10*32+ 3)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte " "0x48, " "0x0f,0xc7,0x1f" "\n" "665""1" ":\n\t" ".popsection\n" "\n" "3:\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "661b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_fprestore" ") - .\n" " .popsection\n" : : "D" (xstate), "m" (*xstate), "a" (lmask), "d" (hmask) : "memory");
}
# 367 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_xregs_to_user(struct xregs_state *buf)
{
 int err;





 err = __clear_user(&buf->header, sizeof(buf->header));
 if (__builtin_expect(!!(err), 0))
  return -14;

 stac();
 asm volatile("1:" ".byte " "0x48, " "0x0f,0xae,0x27" "\n\t" "xor %[err], %[err]\n" "2:\n\t" ".pushsection .fixup,\"ax\"\n\t" "3: movl $-2,%[err]\n\t" "jmp 2b\n\t" ".popsection\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err) : "D" (buf), "m" (*buf), "a" (-1), "d" (-1) : "memory");
 clac();

 return err;
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_user_to_xregs(struct xregs_state *buf, u64 mask)
{
 struct xregs_state *xstate = (( struct xregs_state *)buf);
 u32 lmask = mask;
 u32 hmask = mask >> 32;
 int err;

 stac();
 asm volatile("1:" ".byte " "0x48, " "0x0f,0xae,0x2f" "\n\t" "xor %[err], %[err]\n" "2:\n\t" ".pushsection .fixup,\"ax\"\n\t" "3: movl $-2,%[err]\n\t" "jmp 2b\n\t" ".popsection\n\t" " .pushsection \"__ex_table\",\"a\"\n" " .balign 4\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .long (" "ex_handler_default" ") - .\n" " .popsection\n" : [err] "=r" (err) : "D" (xstate), "m" (*xstate), "a" (lmask), "d" (hmask) : "memory");
 clac();

 return err;
}
# 413 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int copy_fpregs_to_fpstate(struct fpu *fpu)
{
 if (__builtin_expect(!!(use_xsave()), 1)) {
  copy_xregs_to_kernel(&fpu->state.xsave);
  return 1;
 }

 if (__builtin_expect(!!(use_fxsr()), 1)) {
  copy_fxregs_to_kernel(fpu);
  return 1;
 }





 asm volatile("fnsave %[fp]; fwait" : [fp] "=m" (fpu->state.fsave));

 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __copy_kernel_to_fpregs(union fpregs_state *fpstate, u64 mask)
{
 if (use_xsave()) {
  copy_kernel_to_xregs(&fpstate->xsave, mask);
 } else {
  if (use_fxsr())
   copy_kernel_to_fxregs(&fpstate->fxsave);
  else
   copy_kernel_to_fregs(&fpstate->fsave);
 }
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void copy_kernel_to_fpregs(union fpregs_state *fpstate)
{





 if (__builtin_expect(!!(( __builtin_constant_p((__builtin_constant_p(((19*32 + (6)))) && ( (((((19*32 + (6))))>>5)==(0) && (1UL<<((((19*32 + (6))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((((19*32 + (6))))>>5)==(1) && (1UL<<((((19*32 + (6))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((((19*32 + (6))))>>5)==(2) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(3) && (1UL<<((((19*32 + (6))))&31) & ((1<<(( 3*32+20) & 31))) )) || (((((19*32 + (6))))>>5)==(4) && (1UL<<((((19*32 + (6))))&31) & (0) )) || (((((19*32 + (6))))>>5)==(5) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(6) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(7) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(8) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(9) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(10) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(11) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(12) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(13) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(14) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(15) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(16) && (1UL<<((((19*32 + (6))))&31) & (0) )) || (((((19*32 + (6))))>>5)==(17) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(18) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((((19*32 + (6))))) ? constant_test_bit((((19*32 + (6)))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((((19*32 + (6)))), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(((19*32 + (6)))) && ( (((((19*32 + (6))))>>5)==(0) && (1UL<<((((19*32 + (6))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((((19*32 + (6))))>>5)==(1) && (1UL<<((((19*32 + (6))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((((19*32 + (6))))>>5)==(2) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(3) && (1UL<<((((19*32 + (6))))&31) & ((1<<(( 3*32+20) & 31))) )) || (((((19*32 + (6))))>>5)==(4) && (1UL<<((((19*32 + (6))))&31) & (0) )) || (((((19*32 + (6))))>>5)==(5) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(6) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(7) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(8) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(9) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(10) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(11) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(12) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(13) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(14) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(15) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(16) && (1UL<<((((19*32 + (6))))&31) & (0) )) || (((((19*32 + (6))))>>5)==(17) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (((((19*32 + (6))))>>5)==(18) && (1UL<<((((19*32 + (6))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((((19*32 + (6))))) ? constant_test_bit((((19*32 + (6)))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((((19*32 + (6)))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(((19*32 + (6)))) )), 0)) {
  asm volatile(
   "fnclex\n\t"
   "emms\n\t"
   "fildl %P[addr]"
   : : [addr] "m" (fpstate));
 }

 __copy_kernel_to_fpregs(fpstate, -1);
}

extern int copy_fpstate_to_sigframe(void *buf, void *fp, int size);





extern __attribute__((section(".data..percpu" ""))) __typeof__(struct fpu *) fpu_fpregs_owner_ctx;
# 489 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __cpu_invalidate_fpregs_state(void)
{
 ({ __this_cpu_preempt_check("write"); do { do { const void *__vpp_verify = (typeof((&(fpu_fpregs_owner_ctx)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(fpu_fpregs_owner_ctx)) { case 1: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0); });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __fpu_invalidate_fpregs_state(struct fpu *fpu)
{
 fpu->last_cpu = -1;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int fpregs_state_valid(struct fpu *fpu, unsigned int cpu)
{
 return fpu == ({ typeof(fpu_fpregs_owner_ctx) pfo_ret__; switch (sizeof(fpu_fpregs_owner_ctx)) { case 1: asm("mov" "b ""%%""gs"":" "%" "P1"",%0" : "=q" (pfo_ret__) : "p" (&(fpu_fpregs_owner_ctx))); break; case 2: asm("mov" "w ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(fpu_fpregs_owner_ctx))); break; case 4: asm("mov" "l ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(fpu_fpregs_owner_ctx))); break; case 8: asm("mov" "q ""%%""gs"":" "%" "P1"",%0" : "=r" (pfo_ret__) : "p" (&(fpu_fpregs_owner_ctx))); break; default: __bad_percpu_size(); } pfo_ret__; }) && cpu == fpu->last_cpu;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void fpregs_deactivate(struct fpu *fpu)
{
 do { do { const void *__vpp_verify = (typeof((&(fpu_fpregs_owner_ctx)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(fpu_fpregs_owner_ctx)) { case 1: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (((void *)0)); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(((void *)0)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(((void *)0)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(((void *)0)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 trace_x86_fpu_regs_deactivated(fpu);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void fpregs_activate(struct fpu *fpu)
{
 do { do { const void *__vpp_verify = (typeof((&(fpu_fpregs_owner_ctx)) + 0))((void *)0); (void)__vpp_verify; } while (0); switch(sizeof(fpu_fpregs_owner_ctx)) { case 1: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (fpu); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(fpu))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(fpu))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (fpu); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(fpu))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(fpu))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (fpu); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(fpu))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(fpu))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((fpu_fpregs_owner_ctx)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (fpu); (void)pto_tmp__; } switch (sizeof((fpu_fpregs_owner_ctx))) { case 1: asm("mov" "b %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "qi" ((pto_T__)(fpu))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "ri" ((pto_T__)(fpu))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%" "0" : "+m" ((fpu_fpregs_owner_ctx)) : "re" ((pto_T__)(fpu))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 trace_x86_fpu_regs_activated(fpu);
}
# 531 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void
switch_fpu_prepare(struct fpu *old_fpu, int cpu)
{
 if (( __builtin_constant_p((__builtin_constant_p(( 0*32+ 0)) && ( (((( 0*32+ 0))>>5)==(0) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+ 0))>>5)==(1) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+ 0))>>5)==(2) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(3) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+ 0))>>5)==(4) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(5) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(6) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(7) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(8) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(9) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(10) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(11) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(12) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(13) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(14) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(15) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(16) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(17) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(18) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 0*32+ 0))) ? constant_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 0*32+ 0)) && ( (((( 0*32+ 0))>>5)==(0) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+ 0))>>5)==(1) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+ 0))>>5)==(2) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(3) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+ 0))>>5)==(4) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(5) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(6) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(7) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(8) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(9) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(10) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(11) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(12) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(13) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(14) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(15) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(16) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(17) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(18) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 0*32+ 0))) ? constant_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 0*32+ 0)) ) && old_fpu->initialized) {
  if (!copy_fpregs_to_fpstate(old_fpu))
   old_fpu->last_cpu = -1;
  else
   old_fpu->last_cpu = cpu;


  trace_x86_fpu_regs_deactivated(old_fpu);
 } else
  old_fpu->last_cpu = -1;
}
# 554 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void switch_fpu_finish(struct fpu *new_fpu, int cpu)
{
 bool preload = ( __builtin_constant_p((__builtin_constant_p(( 0*32+ 0)) && ( (((( 0*32+ 0))>>5)==(0) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+ 0))>>5)==(1) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+ 0))>>5)==(2) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(3) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+ 0))>>5)==(4) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(5) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(6) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(7) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(8) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(9) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(10) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(11) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(12) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(13) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(14) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(15) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(16) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(17) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(18) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 0*32+ 0))) ? constant_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 0*32+ 0)) && ( (((( 0*32+ 0))>>5)==(0) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 0*32+ 0))>>5)==(1) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 0*32+ 0))>>5)==(2) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(3) && (1UL<<((( 0*32+ 0))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 0*32+ 0))>>5)==(4) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(5) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(6) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(7) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(8) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(9) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(10) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(11) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(12) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(13) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(14) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(15) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(16) && (1UL<<((( 0*32+ 0))&31) & (0) )) || (((( 0*32+ 0))>>5)==(17) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (((( 0*32+ 0))>>5)==(18) && (1UL<<((( 0*32+ 0))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 0*32+ 0))) ? constant_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 0*32+ 0)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 0*32+ 0)) ) &&
         new_fpu->initialized;

 if (preload) {
  if (!fpregs_state_valid(new_fpu, cpu))
   copy_kernel_to_fpregs(&new_fpu->state);
  fpregs_activate(new_fpu);
 }
}
# 574 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/fpu/internal.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void user_fpu_begin(void)
{
 struct fpu *fpu = &get_current()->thread.fpu;

 do { preempt_count_add(1); __asm__ __volatile__("": : :"memory"); } while (0);
 fpregs_activate(fpu);
 do { __asm__ __volatile__("": : :"memory"); if (__builtin_expect(!!(({ preempt_count_sub(1); should_resched(0); })), 0)) asm volatile ("call ___preempt_schedule" : "+r" (current_stack_pointer)); } while (0);
}





extern unsigned int mxcsr_feature_mask;



static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 xgetbv(u32 index)
{
 u32 eax, edx;

 asm volatile(".byte 0x0f,0x01,0xd0"
       : "=a" (eax), "=d" (edx)
       : "c" (index));
 return eax + ((u64)edx << 32);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void xsetbv(u32 index, u64 value)
{
 u32 eax = value;
 u32 edx = value >> 32;

 asm volatile(".byte 0x0f,0x01,0xd1"
       : : "a" (eax), "d" (edx), "c" (index));
}
# 25 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vmx.h" 1
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vmx.h"
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/vmx.h" 1
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vmx.h" 2
# 122 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vmx.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 vmx_basic_vmcs_revision_id(u64 vmx_basic)
{
 return vmx_basic & (((~0ULL) - (1ULL << (0)) + 1) & (~0ULL >> (64 - 1 - (30))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 vmx_basic_vmcs_size(u64 vmx_basic)
{
 return (vmx_basic & (((~0ULL) - (1ULL << (32)) + 1) & (~0ULL >> (64 - 1 - (44))))) >> 32;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vmx_misc_preemption_timer_rate(u64 vmx_misc)
{
 return vmx_misc & 0x0000001f;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vmx_misc_cr3_count(u64 vmx_misc)
{
 return (vmx_misc & (((~0ULL) - (1ULL << (16)) + 1) & (~0ULL >> (64 - 1 - (24))))) >> 16;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vmx_misc_max_msr(u64 vmx_misc)
{
 return (vmx_misc & (((~0ULL) - (1ULL << (25)) + 1) & (~0ULL >> (64 - 1 - (27))))) >> 25;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int vmx_misc_mseg_revid(u64 vmx_misc)
{
 return (vmx_misc & (((~0ULL) - (1ULL << (32)) + 1) & (~0ULL >> (64 - 1 - (63))))) >> 32;
}


enum vmcs_field {
 VIRTUAL_PROCESSOR_ID = 0x00000000,
 POSTED_INTR_NV = 0x00000002,
 GUEST_ES_SELECTOR = 0x00000800,
 GUEST_CS_SELECTOR = 0x00000802,
 GUEST_SS_SELECTOR = 0x00000804,
 GUEST_DS_SELECTOR = 0x00000806,
 GUEST_FS_SELECTOR = 0x00000808,
 GUEST_GS_SELECTOR = 0x0000080a,
 GUEST_LDTR_SELECTOR = 0x0000080c,
 GUEST_TR_SELECTOR = 0x0000080e,
 GUEST_INTR_STATUS = 0x00000810,
 GUEST_PML_INDEX = 0x00000812,
 HOST_ES_SELECTOR = 0x00000c00,
 HOST_CS_SELECTOR = 0x00000c02,
 HOST_SS_SELECTOR = 0x00000c04,
 HOST_DS_SELECTOR = 0x00000c06,
 HOST_FS_SELECTOR = 0x00000c08,
 HOST_GS_SELECTOR = 0x00000c0a,
 HOST_TR_SELECTOR = 0x00000c0c,
 IO_BITMAP_A = 0x00002000,
 IO_BITMAP_A_HIGH = 0x00002001,
 IO_BITMAP_B = 0x00002002,
 IO_BITMAP_B_HIGH = 0x00002003,
 MSR_BITMAP = 0x00002004,
 MSR_BITMAP_HIGH = 0x00002005,
 VM_EXIT_MSR_STORE_ADDR = 0x00002006,
 VM_EXIT_MSR_STORE_ADDR_HIGH = 0x00002007,
 VM_EXIT_MSR_LOAD_ADDR = 0x00002008,
 VM_EXIT_MSR_LOAD_ADDR_HIGH = 0x00002009,
 VM_ENTRY_MSR_LOAD_ADDR = 0x0000200a,
 VM_ENTRY_MSR_LOAD_ADDR_HIGH = 0x0000200b,
 PML_ADDRESS = 0x0000200e,
 PML_ADDRESS_HIGH = 0x0000200f,
 TSC_OFFSET = 0x00002010,
 TSC_OFFSET_HIGH = 0x00002011,
 VIRTUAL_APIC_PAGE_ADDR = 0x00002012,
 VIRTUAL_APIC_PAGE_ADDR_HIGH = 0x00002013,
 APIC_ACCESS_ADDR = 0x00002014,
 APIC_ACCESS_ADDR_HIGH = 0x00002015,
 POSTED_INTR_DESC_ADDR = 0x00002016,
 POSTED_INTR_DESC_ADDR_HIGH = 0x00002017,
 VM_FUNCTION_CONTROL = 0x00002018,
 VM_FUNCTION_CONTROL_HIGH = 0x00002019,
 EPT_POINTER = 0x0000201a,
 EPT_POINTER_HIGH = 0x0000201b,
 EOI_EXIT_BITMAP0 = 0x0000201c,
 EOI_EXIT_BITMAP0_HIGH = 0x0000201d,
 EOI_EXIT_BITMAP1 = 0x0000201e,
 EOI_EXIT_BITMAP1_HIGH = 0x0000201f,
 EOI_EXIT_BITMAP2 = 0x00002020,
 EOI_EXIT_BITMAP2_HIGH = 0x00002021,
 EOI_EXIT_BITMAP3 = 0x00002022,
 EOI_EXIT_BITMAP3_HIGH = 0x00002023,
 EPTP_LIST_ADDRESS = 0x00002024,
 EPTP_LIST_ADDRESS_HIGH = 0x00002025,
 VMREAD_BITMAP = 0x00002026,
 VMWRITE_BITMAP = 0x00002028,
 XSS_EXIT_BITMAP = 0x0000202C,
 XSS_EXIT_BITMAP_HIGH = 0x0000202D,
 TSC_MULTIPLIER = 0x00002032,
 TSC_MULTIPLIER_HIGH = 0x00002033,
 GUEST_PHYSICAL_ADDRESS = 0x00002400,
 GUEST_PHYSICAL_ADDRESS_HIGH = 0x00002401,
 VMCS_LINK_POINTER = 0x00002800,
 VMCS_LINK_POINTER_HIGH = 0x00002801,
 GUEST_IA32_DEBUGCTL = 0x00002802,
 GUEST_IA32_DEBUGCTL_HIGH = 0x00002803,
 GUEST_IA32_PAT = 0x00002804,
 GUEST_IA32_PAT_HIGH = 0x00002805,
 GUEST_IA32_EFER = 0x00002806,
 GUEST_IA32_EFER_HIGH = 0x00002807,
 GUEST_IA32_PERF_GLOBAL_CTRL = 0x00002808,
 GUEST_IA32_PERF_GLOBAL_CTRL_HIGH= 0x00002809,
 GUEST_PDPTR0 = 0x0000280a,
 GUEST_PDPTR0_HIGH = 0x0000280b,
 GUEST_PDPTR1 = 0x0000280c,
 GUEST_PDPTR1_HIGH = 0x0000280d,
 GUEST_PDPTR2 = 0x0000280e,
 GUEST_PDPTR2_HIGH = 0x0000280f,
 GUEST_PDPTR3 = 0x00002810,
 GUEST_PDPTR3_HIGH = 0x00002811,
 GUEST_BNDCFGS = 0x00002812,
 GUEST_BNDCFGS_HIGH = 0x00002813,
 HOST_IA32_PAT = 0x00002c00,
 HOST_IA32_PAT_HIGH = 0x00002c01,
 HOST_IA32_EFER = 0x00002c02,
 HOST_IA32_EFER_HIGH = 0x00002c03,
 HOST_IA32_PERF_GLOBAL_CTRL = 0x00002c04,
 HOST_IA32_PERF_GLOBAL_CTRL_HIGH = 0x00002c05,
 PIN_BASED_VM_EXEC_CONTROL = 0x00004000,
 CPU_BASED_VM_EXEC_CONTROL = 0x00004002,
 EXCEPTION_BITMAP = 0x00004004,
 PAGE_FAULT_ERROR_CODE_MASK = 0x00004006,
 PAGE_FAULT_ERROR_CODE_MATCH = 0x00004008,
 CR3_TARGET_COUNT = 0x0000400a,
 VM_EXIT_CONTROLS = 0x0000400c,
 VM_EXIT_MSR_STORE_COUNT = 0x0000400e,
 VM_EXIT_MSR_LOAD_COUNT = 0x00004010,
 VM_ENTRY_CONTROLS = 0x00004012,
 VM_ENTRY_MSR_LOAD_COUNT = 0x00004014,
 VM_ENTRY_INTR_INFO_FIELD = 0x00004016,
 VM_ENTRY_EXCEPTION_ERROR_CODE = 0x00004018,
 VM_ENTRY_INSTRUCTION_LEN = 0x0000401a,
 TPR_THRESHOLD = 0x0000401c,
 SECONDARY_VM_EXEC_CONTROL = 0x0000401e,
 PLE_GAP = 0x00004020,
 PLE_WINDOW = 0x00004022,
 VM_INSTRUCTION_ERROR = 0x00004400,
 VM_EXIT_REASON = 0x00004402,
 VM_EXIT_INTR_INFO = 0x00004404,
 VM_EXIT_INTR_ERROR_CODE = 0x00004406,
 IDT_VECTORING_INFO_FIELD = 0x00004408,
 IDT_VECTORING_ERROR_CODE = 0x0000440a,
 VM_EXIT_INSTRUCTION_LEN = 0x0000440c,
 VMX_INSTRUCTION_INFO = 0x0000440e,
 GUEST_ES_LIMIT = 0x00004800,
 GUEST_CS_LIMIT = 0x00004802,
 GUEST_SS_LIMIT = 0x00004804,
 GUEST_DS_LIMIT = 0x00004806,
 GUEST_FS_LIMIT = 0x00004808,
 GUEST_GS_LIMIT = 0x0000480a,
 GUEST_LDTR_LIMIT = 0x0000480c,
 GUEST_TR_LIMIT = 0x0000480e,
 GUEST_GDTR_LIMIT = 0x00004810,
 GUEST_IDTR_LIMIT = 0x00004812,
 GUEST_ES_AR_BYTES = 0x00004814,
 GUEST_CS_AR_BYTES = 0x00004816,
 GUEST_SS_AR_BYTES = 0x00004818,
 GUEST_DS_AR_BYTES = 0x0000481a,
 GUEST_FS_AR_BYTES = 0x0000481c,
 GUEST_GS_AR_BYTES = 0x0000481e,
 GUEST_LDTR_AR_BYTES = 0x00004820,
 GUEST_TR_AR_BYTES = 0x00004822,
 GUEST_INTERRUPTIBILITY_INFO = 0x00004824,
 GUEST_ACTIVITY_STATE = 0X00004826,
 GUEST_SYSENTER_CS = 0x0000482A,
 VMX_PREEMPTION_TIMER_VALUE = 0x0000482E,
 HOST_IA32_SYSENTER_CS = 0x00004c00,
 CR0_GUEST_HOST_MASK = 0x00006000,
 CR4_GUEST_HOST_MASK = 0x00006002,
 CR0_READ_SHADOW = 0x00006004,
 CR4_READ_SHADOW = 0x00006006,
 CR3_TARGET_VALUE0 = 0x00006008,
 CR3_TARGET_VALUE1 = 0x0000600a,
 CR3_TARGET_VALUE2 = 0x0000600c,
 CR3_TARGET_VALUE3 = 0x0000600e,
 EXIT_QUALIFICATION = 0x00006400,
 GUEST_LINEAR_ADDRESS = 0x0000640a,
 GUEST_CR0 = 0x00006800,
 GUEST_CR3 = 0x00006802,
 GUEST_CR4 = 0x00006804,
 GUEST_ES_BASE = 0x00006806,
 GUEST_CS_BASE = 0x00006808,
 GUEST_SS_BASE = 0x0000680a,
 GUEST_DS_BASE = 0x0000680c,
 GUEST_FS_BASE = 0x0000680e,
 GUEST_GS_BASE = 0x00006810,
 GUEST_LDTR_BASE = 0x00006812,
 GUEST_TR_BASE = 0x00006814,
 GUEST_GDTR_BASE = 0x00006816,
 GUEST_IDTR_BASE = 0x00006818,
 GUEST_DR7 = 0x0000681a,
 GUEST_RSP = 0x0000681c,
 GUEST_RIP = 0x0000681e,
 GUEST_RFLAGS = 0x00006820,
 GUEST_PENDING_DBG_EXCEPTIONS = 0x00006822,
 GUEST_SYSENTER_ESP = 0x00006824,
 GUEST_SYSENTER_EIP = 0x00006826,
 HOST_CR0 = 0x00006c00,
 HOST_CR3 = 0x00006c02,
 HOST_CR4 = 0x00006c04,
 HOST_FS_BASE = 0x00006c06,
 HOST_GS_BASE = 0x00006c08,
 HOST_TR_BASE = 0x00006c0a,
 HOST_GDTR_BASE = 0x00006c0c,
 HOST_IDTR_BASE = 0x00006c0e,
 HOST_IA32_SYSENTER_ESP = 0x00006c10,
 HOST_IA32_SYSENTER_EIP = 0x00006c12,
 HOST_RSP = 0x00006c14,
 HOST_RIP = 0x00006c16,
};
# 511 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vmx.h"
struct vmx_msr_entry {
 u32 index;
 u32 reserved;
 u64 value;
} __attribute__((aligned(16)));
# 546 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/vmx.h"
enum vm_instruction_error_number {
 VMXERR_VMCALL_IN_VMX_ROOT_OPERATION = 1,
 VMXERR_VMCLEAR_INVALID_ADDRESS = 2,
 VMXERR_VMCLEAR_VMXON_POINTER = 3,
 VMXERR_VMLAUNCH_NONCLEAR_VMCS = 4,
 VMXERR_VMRESUME_NONLAUNCHED_VMCS = 5,
 VMXERR_VMRESUME_AFTER_VMXOFF = 6,
 VMXERR_ENTRY_INVALID_CONTROL_FIELD = 7,
 VMXERR_ENTRY_INVALID_HOST_STATE_FIELD = 8,
 VMXERR_VMPTRLD_INVALID_ADDRESS = 9,
 VMXERR_VMPTRLD_VMXON_POINTER = 10,
 VMXERR_VMPTRLD_INCORRECT_VMCS_REVISION_ID = 11,
 VMXERR_UNSUPPORTED_VMCS_COMPONENT = 12,
 VMXERR_VMWRITE_READ_ONLY_VMCS_COMPONENT = 13,
 VMXERR_VMXON_IN_VMX_ROOT_OPERATION = 15,
 VMXERR_ENTRY_INVALID_EXECUTIVE_VMCS_POINTER = 16,
 VMXERR_ENTRY_NONLAUNCHED_EXECUTIVE_VMCS = 17,
 VMXERR_ENTRY_EXECUTIVE_VMCS_POINTER_NOT_VMXON_POINTER = 18,
 VMXERR_VMCALL_NONCLEAR_VMCS = 19,
 VMXERR_VMCALL_INVALID_VM_EXIT_CONTROL_FIELDS = 20,
 VMXERR_VMCALL_INCORRECT_MSEG_REVISION_ID = 22,
 VMXERR_VMXOFF_UNDER_DUAL_MONITOR_TREATMENT_OF_SMIS_AND_SMM = 23,
 VMXERR_VMCALL_INVALID_SMM_MONITOR_FEATURES = 24,
 VMXERR_ENTRY_INVALID_VM_EXECUTION_CONTROL_FIELDS_IN_EXECUTIVE_VMCS = 25,
 VMXERR_ENTRY_EVENTS_BLOCKED_BY_MOV_SS = 26,
 VMXERR_INVALID_OPERAND_TO_INVEPT_INVVPID = 28,
};

enum vmx_l1d_flush_state {
 VMENTER_L1D_FLUSH_AUTO,
 VMENTER_L1D_FLUSH_NEVER,
 VMENTER_L1D_FLUSH_COND,
 VMENTER_L1D_FLUSH_ALWAYS,
 VMENTER_L1D_FLUSH_EPT_DISABLED,
 VMENTER_L1D_FLUSH_NOT_REQUIRED,
};

extern enum vmx_l1d_flush_state l1tf_vmx_mitigation;
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/hypervisor.h" 1
# 24 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/hypervisor.h"
enum x86_hypervisor_type {
 X86_HYPER_NATIVE = 0,
 X86_HYPER_VMWARE,
 X86_HYPER_MS_HYPERV,
 X86_HYPER_XEN_PV,
 X86_HYPER_XEN_HVM,
 X86_HYPER_KVM,
};




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/kvm_para.h" 1






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/kvm_para.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/hyperv.h" 1
# 269 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/hyperv.h"
enum HV_GENERIC_SET_FORMAT {
 HV_GENERIC_SET_SPARCE_4K,
 HV_GENERIC_SET_ALL,
};
# 283 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/hyperv.h"
typedef struct _HV_REFERENCE_TSC_PAGE {
 __u32 tsc_sequence;
 __u32 res1;
 __u64 tsc_scale;
 __s64 tsc_offset;
} HV_REFERENCE_TSC_PAGE, *PHV_REFERENCE_TSC_PAGE;
# 310 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/hyperv.h"
enum hv_message_type {
 HVMSG_NONE = 0x00000000,


 HVMSG_UNMAPPED_GPA = 0x80000000,
 HVMSG_GPA_INTERCEPT = 0x80000001,


 HVMSG_TIMER_EXPIRED = 0x80000010,


 HVMSG_INVALID_VP_REGISTER_VALUE = 0x80000020,
 HVMSG_UNRECOVERABLE_EXCEPTION = 0x80000021,
 HVMSG_UNSUPPORTED_FEATURE = 0x80000022,


 HVMSG_EVENTLOG_BUFFERCOMPLETE = 0x80000040,


 HVMSG_X64_IOPORT_INTERCEPT = 0x80010000,
 HVMSG_X64_MSR_INTERCEPT = 0x80010001,
 HVMSG_X64_CPUID_INTERCEPT = 0x80010002,
 HVMSG_X64_EXCEPTION_INTERCEPT = 0x80010003,
 HVMSG_X64_APIC_EOI = 0x80010004,
 HVMSG_X64_LEGACY_FP_ERROR = 0x80010005
};


union hv_message_flags {
 __u8 asu8;
 struct {
  __u8 msg_pending:1;
  __u8 reserved:7;
 };
};


union hv_port_id {
 __u32 asu32;
 struct {
  __u32 id:24;
  __u32 reserved:8;
 } u;
};


struct hv_message_header {
 __u32 message_type;
 __u8 payload_size;
 union hv_message_flags message_flags;
 __u8 reserved[2];
 union {
  __u64 sender;
  union hv_port_id port;
 };
};


struct hv_message {
 struct hv_message_header header;
 union {
  __u64 payload[(30)];
 } u;
};


struct hv_message_page {
 struct hv_message sint_message[(16)];
};


struct hv_timer_message_payload {
 __u32 timer_index;
 __u32 reserved;
 __u64 expiration_time;
 __u64 delivery_time;
};
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/kvm_para.h" 2
# 46 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/kvm_para.h"
struct kvm_steal_time {
 __u64 steal;
 __u32 version;
 __u32 flags;
 __u8 preempted;
 __u8 u8_pad[3];
 __u32 pad[11];
};


struct kvm_clock_pairing {
 __s64 sec;
 __s64 nsec;
 __u64 tsc;
 __u32 flags;
 __u32 pad[9];
};
# 80 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/uapi/asm/kvm_para.h"
struct kvm_mmu_op_header {
 __u32 op;
 __u32 pad;
};

struct kvm_mmu_op_write_pte {
 struct kvm_mmu_op_header header;
 __u64 pte_phys;
 __u64 pte_val;
};

struct kvm_mmu_op_flush_tlb {
 struct kvm_mmu_op_header header;
};

struct kvm_mmu_op_release_pt {
 struct kvm_mmu_op_header header;
 __u64 pt_phys;
};




struct kvm_vcpu_pv_apf_data {
 __u32 reason;
 __u8 pad[60];
 __u32 enabled;
};
# 8 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/kvm_para.h" 2

extern void kvmclock_init(void);
extern int kvm_register_clock(char *txt);


bool kvm_check_and_clear_guest_paused(void);
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/kvm_para.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) long kvm_hypercall0(unsigned int nr)
{
 long ret;
 asm volatile("661:\n\t" ".byte 0x0f,0x01,0xc1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xd9" "\n" "665""1" ":\n\t" ".popsection\n"
       : "=a"(ret)
       : "a"(nr)
       : "memory");
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long kvm_hypercall1(unsigned int nr, unsigned long p1)
{
 long ret;
 asm volatile("661:\n\t" ".byte 0x0f,0x01,0xc1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xd9" "\n" "665""1" ":\n\t" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1)
       : "memory");
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long kvm_hypercall2(unsigned int nr, unsigned long p1,
      unsigned long p2)
{
 long ret;
 asm volatile("661:\n\t" ".byte 0x0f,0x01,0xc1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xd9" "\n" "665""1" ":\n\t" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1), "c"(p2)
       : "memory");
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long kvm_hypercall3(unsigned int nr, unsigned long p1,
      unsigned long p2, unsigned long p3)
{
 long ret;
 asm volatile("661:\n\t" ".byte 0x0f,0x01,0xc1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xd9" "\n" "665""1" ":\n\t" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1), "c"(p2), "d"(p3)
       : "memory");
 return ret;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) long kvm_hypercall4(unsigned int nr, unsigned long p1,
      unsigned long p2, unsigned long p3,
      unsigned long p4)
{
 long ret;
 asm volatile("661:\n\t" ".byte 0x0f,0x01,0xc1" "\n662:\n" ".skip -(((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")) > 0) * " "((" "665""1""f-""664""1""f" ")-(" "662b-661b" ")),0x90\n" "663" ":\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "664""1""f - .\n" " .word " "( 8*32+15)" "\n" " .byte " "663""b-661b" "\n" " .byte " "665""1""f-""664""1""f" "\n" " .byte " "663""b-662b" "\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "664""1"":\n\t" ".byte 0x0f,0x01,0xd9" "\n" "665""1" ":\n\t" ".popsection\n"
       : "=a"(ret)
       : "a"(nr), "b"(p1), "c"(p2), "d"(p3), "S"(p4)
       : "memory");
 return ret;
}


bool kvm_para_available(void);
unsigned int kvm_arch_para_features(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) kvm_guest_init(void);
void kvm_async_pf_task_wait(u32 token, int interrupt_kernel);
void kvm_async_pf_task_wake(u32 token);
u32 kvm_read_and_reset_pf_reason(void);
extern void kvm_disable_steal_time(void);


void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) kvm_spinlock_init(void);
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/hypervisor.h" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/xen/hypervisor.h" 1
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/xen/hypervisor.h"
extern struct shared_info *HYPERVISOR_shared_info;
extern struct start_info *xen_start_info;



static inline __attribute__((unused)) __attribute__((no_instrument_function)) uint32_t xen_cpuid_base(void)
{
 return hypervisor_cpuid_base("XenVMMXenVMM", 2);
}
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/xen/hypervisor.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool xen_x2apic_para_available(void)
{
 return (xen_cpuid_base() != 0);
}



void xen_arch_register_cpu(int num);
void xen_arch_unregister_cpu(int num);


extern void xen_set_iopl_mask(unsigned mask);
# 38 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/hypervisor.h" 2

struct hypervisor_x86 {

 const char *name;


 uint32_t (*detect)(void);


 enum x86_hypervisor_type type;


 struct x86_hyper_init init;


 struct x86_hyper_runtime runtime;
};

extern enum x86_hypervisor_type x86_hyper_type;
extern void init_hypervisor_platform(void);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool hypervisor_is_type(enum x86_hypervisor_type type)
{
 return x86_hyper_type == type;
}
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h" 1
# 27 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
extern pgd_t early_top_pgt[512];
int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) __early_make_pgtable(unsigned long address, pmdval_t pmd);

void ptdump_walk_pgd_level(struct seq_file *m, pgd_t *pgd);
void ptdump_walk_pgd_level_debugfs(struct seq_file *m, pgd_t *pgd, bool user);
void ptdump_walk_pgd_level_checkwx(void);
# 44 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)]
          ;


extern spinlock_t pgd_lock;
extern struct list_head pgd_list;

extern struct mm_struct *pgd_page_get_mm(struct page *page);

extern pmdval_t early_pmd_flags;
# 119 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 6);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) u32 read_pkru(void)
{
 if ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((16*32+ 4))) ? constant_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return __read_pkru();
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void write_pkru(u32 pkru)
{
 if ((__builtin_constant_p((16*32+ 4)) && ( ((((16*32+ 4))>>5)==(0) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((16*32+ 4))>>5)==(1) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((16*32+ 4))>>5)==(2) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(3) && (1UL<<(((16*32+ 4))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((16*32+ 4))>>5)==(4) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(5) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(6) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(7) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(8) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(9) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(10) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(11) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(12) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(13) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(14) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(15) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(16) && (1UL<<(((16*32+ 4))&31) & (0) )) || ((((16*32+ 4))>>5)==(17) && (1UL<<(((16*32+ 4))&31) & 0 )) || ((((16*32+ 4))>>5)==(18) && (1UL<<(((16*32+ 4))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((16*32+ 4))) ? constant_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((16*32+ 4)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  __write_pkru(pkru);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_young(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_dirty(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 6);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_young(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_dirty(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 6);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_young(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 5);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_write(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_huge(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 7);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_global(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 8);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_exec(pte_t pte)
{
 return !(pte_flags(pte) & (((pteval_t)(1)) << 63));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_special(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 9);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 protnone_mask(u64 val);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pte_pfn(pte_t pte)
{
 phys_addr_t pfn = pte_val(pte);
 pfn ^= protnone_mask(pfn);
 return (pfn & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1)))))) >> 12;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pmd_pfn(pmd_t pmd)
{
 phys_addr_t pfn = pmd_val(pmd);
 pfn ^= protnone_mask(pfn);
 return (pfn & pmd_pfn_mask(pmd)) >> 12;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pud_pfn(pud_t pud)
{
 phys_addr_t pfn = pud_val(pud);
 pfn ^= protnone_mask(pfn);
 return (pfn & pud_pfn_mask(pud)) >> 12;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long p4d_pfn(p4d_t p4d)
{
 return ((pgd_val((p4d).pgd)) & p4d_pfn_mask(p4d)) >> 12;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pgd_pfn(pgd_t pgd)
{
 return (pgd_val(pgd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1)))))) >> 12;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int p4d_large(p4d_t p4d)
{

 return 0;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_large(pmd_t pte)
{
 return pmd_flags(pte) & (((pteval_t)(1)) << 7);
}
# 280 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_set_flags(pte_t pte, pteval_t set)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v | set);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_clear_flags(pte_t pte, pteval_t clear)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v & ~clear);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkclean(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 6));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkold(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 5));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_wrprotect(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 1));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkexec(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 63));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkdirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkyoung(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 5));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkwrite(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 1));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkhuge(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 7));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_clrhuge(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 7));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkglobal(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 8));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_clrglobal(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 8));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkspecial(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 9));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mkdevmap(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 9)|(((u64)(1)) << 58));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_set_flags(pmd_t pmd, pmdval_t set)
{
 pmdval_t v = native_pmd_val(pmd);

 return native_make_pmd(v | set);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_clear_flags(pmd_t pmd, pmdval_t clear)
{
 pmdval_t v = native_pmd_val(pmd);

 return native_make_pmd(v & ~clear);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkold(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkclean(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 6));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_wrprotect(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkdirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkdevmap(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((u64)(1)) << 58));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkhuge(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 7));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkyoung(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mkwrite(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_set_flags(pud_t pud, pudval_t set)
{
 pudval_t v = native_pud_val(pud);

 return native_make_pud(v | set);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_clear_flags(pud_t pud, pudval_t clear)
{
 pudval_t v = native_pud_val(pud);

 return native_make_pud(v & ~clear);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mkold(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(1)) << 5));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mkclean(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(1)) << 6));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_wrprotect(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(1)) << 1));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mkdirty(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 6) | (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mkdevmap(pud_t pud)
{
 return pud_set_flags(pud, (((u64)(1)) << 58));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mkhuge(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 7));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mkyoung(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 5));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mkwrite(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(1)) << 1));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_soft_dirty(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(0)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_soft_dirty(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(0)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mksoft_dirty(pud_t pud)
{
 return pud_set_flags(pud, (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_clear_soft_dirty(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_clear_soft_dirty(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_clear_soft_dirty(pud_t pud)
{
 return pud_clear_flags(pud, (((pteval_t)(0))));
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgprotval_t massage_pgprot(pgprot_t pgprot)
{
 pgprotval_t protval = ((pgprot).pgprot);

 if (protval & (((pteval_t)(1)) << 0))
  protval &= __supported_pte_mask;

 return protval;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
{
 phys_addr_t pfn = (phys_addr_t)page_nr << 12;
 pfn ^= protnone_mask(((pgprot).pgprot));
 pfn &= ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1)))));
 return __pte(pfn | massage_pgprot(pgprot));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
{
 phys_addr_t pfn = (phys_addr_t)page_nr << 12;
 pfn ^= protnone_mask(((pgprot).pgprot));
 pfn &= (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))));
 return __pmd(pfn | massage_pgprot(pgprot));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pfn_pud(unsigned long page_nr, pgprot_t pgprot)
{
 phys_addr_t pfn = (phys_addr_t)page_nr << 12;
 pfn ^= protnone_mask(((pgprot).pgprot));
 pfn &= (((signed long)(~(((1UL) << 30)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))));
 return __pud(pfn | massage_pgprot(pgprot));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_mknotpresent(pmd_t pmd)
{
 return pfn_pmd(pmd_pfn(pmd),
        ((pgprot_t) { (pmd_flags(pmd) & ~((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 8))) } ));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pud_mknotpresent(pud_t pud)
{
 return pfn_pud(pud_pfn(pud),
       ((pgprot_t) { (pud_flags(pud) & ~((((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 8))) } ));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 flip_protnone_guard(u64 oldval, u64 val, u64 mask);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 pteval_t val = pte_val(pte), oldval = val;





 val &= (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))));
 val |= massage_pgprot(newprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))));
 val = flip_protnone_guard(oldval, val, ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))));
 return __pte(val);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 pmdval_t val = pmd_val(pmd), oldval = val;

 val &= ((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 7));
 val |= massage_pgprot(newprot) & ~((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 7));
 val = flip_protnone_guard(oldval, val, (((signed long)(~(((1UL) << 21)-1))) & ((phys_addr_t)(((1ULL << 46) - 1)))));
 return __pmd(val);
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 pgprotval_t preservebits = ((oldprot).pgprot) & (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))));
 pgprotval_t addbits = ((newprot).pgprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(((1ULL << 46) - 1))))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0))) | (((u64)(1)) << 58) | (((pteval_t)(0ULL))));
 return ((pgprot_t) { (preservebits | addbits) } );
}
# 610 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_new_memtype_allowed(u64 paddr, unsigned long size,
      enum page_cache_mode pcm,
      enum page_cache_mode new_pcm)
{



 if (x86_platform.is_untracked_pat_range(paddr, paddr + size))
  return 1;
# 628 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
 if ((pcm == _PAGE_CACHE_MODE_UC_MINUS &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WC &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WT &&
      new_pcm == _PAGE_CACHE_MODE_WB) ||
     (pcm == _PAGE_CACHE_MODE_WT &&
      new_pcm == _PAGE_CACHE_MODE_WC)) {
  return 0;
 }

 return 1;
}

pmd_t *populate_extra_pmd(unsigned long vaddr);
pte_t *populate_extra_pte(unsigned long vaddr);






# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h" 1
# 19 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
extern p4d_t level4_kernel_pgt[512];
extern p4d_t level4_ident_pgt[512];
extern pud_t level3_kernel_pgt[512];
extern pud_t level3_ident_pgt[512];
extern pmd_t level2_kernel_pgt[512];
extern pmd_t level2_fixmap_pgt[512];
extern pmd_t level2_ident_pgt[512];
extern pte_t level1_fixmap_pgt[512 * 2];
extern pgd_t init_top_pgt[];



extern void paging_init(void);
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void sync_initial_page_table(void) { }
# 54 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
struct mm_struct;

void set_pte_vaddr_p4d(p4d_t *p4d_page, unsigned long vaddr, pte_t new_pte);
void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_pte(pte_t *ptep, pte_t pte)
{
 ({ union { typeof(*ptep) __val; char __c[1]; } __u = { .__val = ( typeof(*ptep)) (pte) }; __write_once_size(&(*ptep), __u.__c, sizeof(*ptep)); __u.__val; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 native_set_pte(ptep, native_make_pte(0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_pte_atomic(pte_t *ptep, pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 ({ union { typeof(*pmdp) __val; char __c[1]; } __u = { .__val = ( typeof(*pmdp)) (pmd) }; __write_once_size(&(*pmdp), __u.__c, sizeof(*pmdp)); __u.__val; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_pmd_clear(pmd_t *pmd)
{
 native_set_pmd(pmd, native_make_pmd(0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t native_ptep_get_and_clear(pte_t *xp)
{

 return native_make_pte(({ typeof(&xp->pte) __ai_ptr = (&xp->pte); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = (((0))); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); }));







}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t native_pmdp_get_and_clear(pmd_t *xp)
{

 return native_make_pmd(({ typeof(&xp->pmd) __ai_ptr = (&xp->pmd); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = (((0))); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); }));







}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_pud(pud_t *pudp, pud_t pud)
{
 ({ union { typeof(*pudp) __val; char __c[1]; } __u = { .__val = ( typeof(*pudp)) (pud) }; __write_once_size(&(*pudp), __u.__c, sizeof(*pudp)); __u.__val; });
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_pud_clear(pud_t *pud)
{
 native_set_pud(pud, native_make_pud(0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t native_pudp_get_and_clear(pud_t *xp)
{

 return native_make_pud(({ typeof(&xp->pud) __ai_ptr = (&xp->pud); kasan_check_write(__ai_ptr, sizeof(*__ai_ptr)); ({ __typeof__ (*((__ai_ptr))) __ret = (((0))); switch (sizeof(*((__ai_ptr)))) { case 1: asm volatile ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 2: asm volatile ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 4: asm volatile ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; case 8: asm volatile ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((__ai_ptr))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }); }));
# 134 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
}
# 149 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *ptr_set_bit(void *ptr, int bit)
{
 unsigned long __ptr = (unsigned long)ptr;

 __ptr |= (1UL << (bit));
 return (void *)__ptr;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void *ptr_clear_bit(void *ptr, int bit)
{
 unsigned long __ptr = (unsigned long)ptr;

 __ptr &= ~(1UL << (bit));
 return (void *)__ptr;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgd_t *kernel_to_user_pgdp(pgd_t *pgdp)
{
 return ptr_set_bit(pgdp, 12);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgd_t *user_to_kernel_pgdp(pgd_t *pgdp)
{
 return ptr_clear_bit(pgdp, 12);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4d_t *kernel_to_user_p4dp(p4d_t *p4dp)
{
 return ptr_set_bit(p4dp, 12);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) p4d_t *user_to_kernel_p4dp(p4d_t *p4dp)
{
 return ptr_clear_bit(p4dp, 12);
}
# 192 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool pgdp_maps_userspace(void *__ptr)
{
 unsigned long ptr = (unsigned long)__ptr;

 return (ptr & ~(~(((1UL) << 12)-1))) < (((1UL) << 12) / 2);
}


pgd_t __pti_set_user_pgd(pgd_t *pgdp, pgd_t pgd);






static inline __attribute__((unused)) __attribute__((no_instrument_function)) pgd_t pti_set_user_pgd(pgd_t *pgdp, pgd_t pgd)
{
 if (!( __builtin_constant_p((__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+11))) ? constant_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+11))) ? constant_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 7*32+11)) ))
  return pgd;
 return __pti_set_user_pgd(pgdp, pgd);
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_p4d(p4d_t *p4dp, p4d_t p4d)
{

 ({ union { typeof(p4dp->pgd) __val; char __c[1]; } __u = { .__val = ( typeof(p4dp->pgd)) (pti_set_user_pgd(&p4dp->pgd, p4d.pgd)) }; __write_once_size(&(p4dp->pgd), __u.__c, sizeof(p4dp->pgd)); __u.__val; });



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_p4d_clear(p4d_t *p4d)
{



 native_set_p4d(p4d, (p4d_t) { .pgd = native_make_pgd(0)});

}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
{

 ({ union { typeof(*pgdp) __val; char __c[1]; } __u = { .__val = ( typeof(*pgdp)) (pti_set_user_pgd(pgdp, pgd)) }; __write_once_size(&(*pgdp), __u.__c, sizeof(*pgdp)); __u.__val; });



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_pgd_clear(pgd_t *pgd)
{
 native_set_pgd(pgd, native_make_pgd(0));
}

extern void sync_global_pgds(unsigned long start, unsigned long end);
# 262 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pgd_large(pgd_t pgd) { return 0; }
# 326 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
extern int kern_addr_valid(unsigned long addr);
extern void cleanup_highmap(void);
# 346 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h"
extern void init_extra_mapping_uc(unsigned long phys, unsigned long size);
extern void init_extra_mapping_wb(unsigned long phys, unsigned long size);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool gup_fast_permitted(unsigned long start, int nr_pages,
  int write)
{
 unsigned long len, end;

 len = (unsigned long)nr_pages << 12;
 end = start + len;
 if (end < start)
  return false;
 if (end >> 47)
  return false;
 return true;
}


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable-invert.h" 1
# 16 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable-invert.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __pte_needs_invert(u64 val)
{
 return val && !(val & (((pteval_t)(1)) << 0));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 protnone_mask(u64 val)
{
 return __pte_needs_invert(val) ? ~0ull : 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u64 flip_protnone_guard(u64 oldval, u64 val, u64 mask)
{





 if (__pte_needs_invert(oldval) != __pte_needs_invert(val))
  val = (val & ~mask) | (~val & mask);
 return val;
}
# 365 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable_64.h" 2
# 650 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h" 2








static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_none(pte_t pte)
{
 return !(pte.pte & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5))));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_same(pte_t a, pte_t b)
{
 return a.pte == b.pte;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_present(pte_t a)
{
 return pte_flags(a) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8));
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_devmap(pte_t a)
{
 return (pte_flags(a) & (((u64)(1)) << 58)) == (((u64)(1)) << 58);
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool pte_accessible(struct mm_struct *mm, pte_t a)
{
 if (pte_flags(a) & (((pteval_t)(1)) << 0))
  return true;

 if ((pte_flags(a) & (((pteval_t)(1)) << 8)) &&
   mm_tlb_flush_pending(mm))
  return true;

 return false;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_present(pmd_t pmd)
{






 return pmd_flags(pmd) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8) | (((pteval_t)(1)) << 7));
}
# 723 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_none(pmd_t pmd)
{


 unsigned long val = native_pmd_val(pmd);
 return (val & ~((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5))) == 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long)((void *)((unsigned long)(pmd_val(pmd) & pmd_pfn_mask(pmd))+((unsigned long)page_offset_base)));
}
# 748 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pmd_index(unsigned long address)
{
 return (address >> 21) & (512 - 1);
}
# 768 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pte_index(unsigned long address)
{
 return (address >> 12) & (512 - 1);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_bad(pmd_t pmd)
{
 return (pmd_flags(pmd) & ~(((pteval_t)(1)) << 2)) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0ULL))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pages_to_mb(unsigned long npg)
{
 return npg >> (20 - 12);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_none(pud_t pud)
{
 return (native_pud_val(pud) & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5)))) == 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_present(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pud_page_vaddr(pud_t pud)
{
 return (unsigned long)((void *)((unsigned long)(pud_val(pud) & pud_pfn_mask(pud))+((unsigned long)page_offset_base)));
}
# 811 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return (pmd_t *)pud_page_vaddr(*pud) + pmd_index(address);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_large(pud_t pud)
{
 return (pud_val(pud) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0))) ==
  ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_bad(pud_t pud)
{
 return (pud_flags(pud) & ~(((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 2))) != 0;
}







static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long pud_index(unsigned long address)
{
 return (address >> 30) & (512 - 1);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int p4d_none(p4d_t p4d)
{
 return (native_p4d_val(p4d) & ~(((((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 5)))) == 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int p4d_present(p4d_t p4d)
{
 return p4d_flags(p4d) & (((pteval_t)(1)) << 0);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long p4d_page_vaddr(p4d_t p4d)
{
 return (unsigned long)((void *)((unsigned long)((pgd_val((p4d).pgd)) & p4d_pfn_mask(p4d))+((unsigned long)page_offset_base)));
}
# 861 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t *pud_offset(p4d_t *p4d, unsigned long address)
{
 return (pud_t *)p4d_page_vaddr(*p4d) + pud_index(address);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int p4d_bad(p4d_t p4d)
{
 unsigned long ignore_flags = ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(0ULL)))) | (((pteval_t)(1)) << 2);

 if (1)
  ignore_flags |= (((pteval_t)(1)) << 63);

 return (p4d_flags(p4d) & ~ignore_flags) != 0;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long p4d_index(unsigned long address)
{
 return (address >> 39) & (1 - 1);
}
# 958 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
extern int direct_gbpages;
void init_mem_mapping(void);
void early_alloc_pgt_buf(void);
extern void memblock_find_dma_reserve(void);



extern pgd_t trampoline_pgd_entry;
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __attribute__ ((__section__(".meminit.text"))) __attribute__((no_instrument_function)) init_trampoline_default(void)
{

 trampoline_pgd_entry = init_top_pgt[(((page_offset_base) >> 39) & (512 - 1))];
}

void __attribute__ ((__section__(".meminit.text"))) __attribute__((no_instrument_function)) init_trampoline(void);
# 981 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t native_local_ptep_get_and_clear(pte_t *ptep)
{
 pte_t res = *ptep;


 native_pte_clear(((void *)0), 0, ptep);
 return res;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t native_local_pmdp_get_and_clear(pmd_t *pmdp)
{
 pmd_t res = *pmdp;

 native_pmd_clear(pmdp);
 return res;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t native_local_pudp_get_and_clear(pud_t *pudp)
{
 pud_t res = *pudp;

 native_pud_clear(pudp);
 return res;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void native_set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep , pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_pmd_at(struct mm_struct *mm, unsigned long addr,
         pmd_t *pmdp, pmd_t pmd)
{
 native_set_pmd(pmdp, pmd);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void set_pud_at(struct mm_struct *mm, unsigned long addr,
         pud_t *pudp, pud_t pud)
{
 native_set_pud(pudp, pud);
}
# 1031 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
struct vm_area_struct;


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);


extern int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pte_t *ptep);


extern int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep);


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pte_t *ptep)
{
 pte_t pte = native_ptep_get_and_clear(ptep);
 return pte;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long addr, pte_t *ptep,
         int full)
{
 pte_t pte;
 if (full) {




  pte = native_local_ptep_get_and_clear(ptep);
 } else {
  pte = ptep_get_and_clear(mm, addr, ptep);
 }
 return pte;
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void ptep_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pte_t *ptep)
{
 clear_bit(1, (unsigned long *)&ptep->pte);
}






extern int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty);
extern int pudp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pud_t *pudp,
     pud_t entry, int dirty);


extern int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pmd_t *pmdp);
extern int pudp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pud_t *pudp);


extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp);



static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_write(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 1);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmdp_huge_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pmd_t *pmdp)
{
 return native_pmdp_get_and_clear(pmdp);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pud_t pudp_huge_get_and_clear(struct mm_struct *mm,
     unsigned long addr, pud_t *pudp)
{
 return native_pudp_get_and_clear(pudp);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pmd_t *pmdp)
{
 clear_bit(1, (unsigned long *)pmdp);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_write(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 1);
}
# 1145 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
{
 ({ size_t __len = (count * sizeof(pgd_t)); void *__ret; if (__builtin_constant_p(count * sizeof(pgd_t)) && __len >= 64) __ret = __memcpy((dst), (src), __len); else __ret = __builtin_memcpy((dst), (src), __len); __ret; });

 if (!( __builtin_constant_p((__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+11))) ? constant_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+11))) ? constant_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 7*32+11)) ))
  return;

 ({ size_t __len = (count * sizeof(pgd_t)); void *__ret; if (__builtin_constant_p(count * sizeof(pgd_t)) && __len >= 64) __ret = __memcpy((kernel_to_user_pgdp(dst)), (kernel_to_user_pgdp(src)), __len); else __ret = __builtin_memcpy((kernel_to_user_pgdp(dst)), (kernel_to_user_pgdp(src)), __len); __ret; });


}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) int page_level_shift(enum pg_level level)
{
 return (12 - ( __builtin_constant_p(512) ? ( __builtin_constant_p(512) ? ( (512) < 2 ? 0 : (512) & (1ULL << 63) ? 63 : (512) & (1ULL << 62) ? 62 : (512) & (1ULL << 61) ? 61 : (512) & (1ULL << 60) ? 60 : (512) & (1ULL << 59) ? 59 : (512) & (1ULL << 58) ? 58 : (512) & (1ULL << 57) ? 57 : (512) & (1ULL << 56) ? 56 : (512) & (1ULL << 55) ? 55 : (512) & (1ULL << 54) ? 54 : (512) & (1ULL << 53) ? 53 : (512) & (1ULL << 52) ? 52 : (512) & (1ULL << 51) ? 51 : (512) & (1ULL << 50) ? 50 : (512) & (1ULL << 49) ? 49 : (512) & (1ULL << 48) ? 48 : (512) & (1ULL << 47) ? 47 : (512) & (1ULL << 46) ? 46 : (512) & (1ULL << 45) ? 45 : (512) & (1ULL << 44) ? 44 : (512) & (1ULL << 43) ? 43 : (512) & (1ULL << 42) ? 42 : (512) & (1ULL << 41) ? 41 : (512) & (1ULL << 40) ? 40 : (512) & (1ULL << 39) ? 39 : (512) & (1ULL << 38) ? 38 : (512) & (1ULL << 37) ? 37 : (512) & (1ULL << 36) ? 36 : (512) & (1ULL << 35) ? 35 : (512) & (1ULL << 34) ? 34 : (512) & (1ULL << 33) ? 33 : (512) & (1ULL << 32) ? 32 : (512) & (1ULL << 31) ? 31 : (512) & (1ULL << 30) ? 30 : (512) & (1ULL << 29) ? 29 : (512) & (1ULL << 28) ? 28 : (512) & (1ULL << 27) ? 27 : (512) & (1ULL << 26) ? 26 : (512) & (1ULL << 25) ? 25 : (512) & (1ULL << 24) ? 24 : (512) & (1ULL << 23) ? 23 : (512) & (1ULL << 22) ? 22 : (512) & (1ULL << 21) ? 21 : (512) & (1ULL << 20) ? 20 : (512) & (1ULL << 19) ? 19 : (512) & (1ULL << 18) ? 18 : (512) & (1ULL << 17) ? 17 : (512) & (1ULL << 16) ? 16 : (512) & (1ULL << 15) ? 15 : (512) & (1ULL << 14) ? 14 : (512) & (1ULL << 13) ? 13 : (512) & (1ULL << 12) ? 12 : (512) & (1ULL << 11) ? 11 : (512) & (1ULL << 10) ? 10 : (512) & (1ULL << 9) ? 9 : (512) & (1ULL << 8) ? 8 : (512) & (1ULL << 7) ? 7 : (512) & (1ULL << 6) ? 6 : (512) & (1ULL << 5) ? 5 : (512) & (1ULL << 4) ? 4 : (512) & (1ULL << 3) ? 3 : (512) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) )) + level * ( __builtin_constant_p(512) ? ( __builtin_constant_p(512) ? ( (512) < 2 ? 0 : (512) & (1ULL << 63) ? 63 : (512) & (1ULL << 62) ? 62 : (512) & (1ULL << 61) ? 61 : (512) & (1ULL << 60) ? 60 : (512) & (1ULL << 59) ? 59 : (512) & (1ULL << 58) ? 58 : (512) & (1ULL << 57) ? 57 : (512) & (1ULL << 56) ? 56 : (512) & (1ULL << 55) ? 55 : (512) & (1ULL << 54) ? 54 : (512) & (1ULL << 53) ? 53 : (512) & (1ULL << 52) ? 52 : (512) & (1ULL << 51) ? 51 : (512) & (1ULL << 50) ? 50 : (512) & (1ULL << 49) ? 49 : (512) & (1ULL << 48) ? 48 : (512) & (1ULL << 47) ? 47 : (512) & (1ULL << 46) ? 46 : (512) & (1ULL << 45) ? 45 : (512) & (1ULL << 44) ? 44 : (512) & (1ULL << 43) ? 43 : (512) & (1ULL << 42) ? 42 : (512) & (1ULL << 41) ? 41 : (512) & (1ULL << 40) ? 40 : (512) & (1ULL << 39) ? 39 : (512) & (1ULL << 38) ? 38 : (512) & (1ULL << 37) ? 37 : (512) & (1ULL << 36) ? 36 : (512) & (1ULL << 35) ? 35 : (512) & (1ULL << 34) ? 34 : (512) & (1ULL << 33) ? 33 : (512) & (1ULL << 32) ? 32 : (512) & (1ULL << 31) ? 31 : (512) & (1ULL << 30) ? 30 : (512) & (1ULL << 29) ? 29 : (512) & (1ULL << 28) ? 28 : (512) & (1ULL << 27) ? 27 : (512) & (1ULL << 26) ? 26 : (512) & (1ULL << 25) ? 25 : (512) & (1ULL << 24) ? 24 : (512) & (1ULL << 23) ? 23 : (512) & (1ULL << 22) ? 22 : (512) & (1ULL << 21) ? 21 : (512) & (1ULL << 20) ? 20 : (512) & (1ULL << 19) ? 19 : (512) & (1ULL << 18) ? 18 : (512) & (1ULL << 17) ? 17 : (512) & (1ULL << 16) ? 16 : (512) & (1ULL << 15) ? 15 : (512) & (1ULL << 14) ? 14 : (512) & (1ULL << 13) ? 13 : (512) & (1ULL << 12) ? 12 : (512) & (1ULL << 11) ? 11 : (512) & (1ULL << 10) ? 10 : (512) & (1ULL << 9) ? 9 : (512) & (1ULL << 8) ? 8 : (512) & (1ULL << 7) ? 7 : (512) & (1ULL << 6) ? 6 : (512) & (1ULL << 5) ? 5 : (512) & (1ULL << 4) ? 4 : (512) & (1ULL << 3) ? 3 : (512) & (1ULL << 2) ? 2 : 1) : -1) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) );
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long page_level_size(enum pg_level level)
{
 return 1UL << page_level_shift(level);
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long page_level_mask(enum pg_level level)
{
 return ~(page_level_size(level) - 1);
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) void update_mmu_cache(struct vm_area_struct *vma,
  unsigned long addr, pte_t *ptep)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void update_mmu_cache_pmd(struct vm_area_struct *vma,
  unsigned long addr, pmd_t *pmd)
{
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void update_mmu_cache_pud(struct vm_area_struct *vma,
  unsigned long addr, pud_t *pud)
{
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(0))));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_swp_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(0))));
}
# 1226 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __pkru_allows_read(u32 pkru, u16 pkey)
{
 int pkru_pkey_bits = pkey * 2;
 return !(pkru & (0x1 << pkru_pkey_bits));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __pkru_allows_write(u32 pkru, u16 pkey)
{
 int pkru_pkey_bits = pkey * 2;




 return !(pkru & ((0x1|0x2) << pkru_pkey_bits));
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) u16 pte_flags_pkey(unsigned long pte_flags)
{


 return (pte_flags & ((((pteval_t)(1)) << 59) | (((pteval_t)(1)) << 60) | (((pteval_t)(1)) << 61) | (((pteval_t)(1)) << 62))) >> 59;



}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __pkru_allows_pkey(u16 pkey, bool write)
{
 u32 pkru = read_pkru();

 if (!__pkru_allows_read(pkru, pkey))
  return false;
 if (write && !__pkru_allows_write(pkru, pkey))
  return false;

 return true;
}






static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool __pte_access_permitted(unsigned long pteval, bool write)
{
 unsigned long need_pte_bits = (((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 2);

 if (write)
  need_pte_bits |= (((pteval_t)(1)) << 1);

 if ((pteval & need_pte_bits) != need_pte_bits)
  return 0;

 return __pkru_allows_pkey(pte_flags_pkey(pteval), write);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool pte_access_permitted(pte_t pte, bool write)
{
 return __pte_access_permitted(pte_val(pte), write);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool pmd_access_permitted(pmd_t pmd, bool write)
{
 return __pte_access_permitted(pmd_val(pmd), write);
}


static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool pud_access_permitted(pud_t pud, bool write)
{
 return __pte_access_permitted(pud_val(pud), write);
}


extern bool pfn_modify_allowed(unsigned long pfn, pgprot_t prot);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool arch_has_pfn_modify_check(void)
{
 return (__builtin_constant_p((((19*32 + (18))))) && ( ((((((19*32 + (18)))))>>5)==(0) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (18)))))>>5)==(1) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (18)))))>>5)==(2) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(3) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (18)))))>>5)==(4) && (1UL<<(((((19*32 + (18)))))&31) & (0) )) || ((((((19*32 + (18)))))>>5)==(5) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(6) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(7) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(8) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(9) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(10) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(11) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(12) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(13) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(14) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(15) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(16) && (1UL<<(((((19*32 + (18)))))&31) & (0) )) || ((((((19*32 + (18)))))>>5)==(17) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(18) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (18)))))) ? constant_test_bit(((((19*32 + (18))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (18))))), ((unsigned long *)((&boot_cpu_data)->x86_capability)))));
}


# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h" 1
# 196 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 pte_clear(mm, address, ptep);
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern pud_t pudp_huge_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pud_t *pudp);
# 271 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pudp_set_wrprotect(struct mm_struct *mm,
          unsigned long address, pud_t *pudp)
{
 pud_t old_pud = *pudp;

 set_pud_at(mm, address, pudp, pud_wrprotect(old_pud));
}
# 292 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmdp_collapse_flush(struct vm_area_struct *vma,
     unsigned long address,
     pmd_t *pmdp)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_51(void) ; if (__cond) __compiletime_assert_51(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return *pmdp;
}





extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);
# 328 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
extern void pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);



static inline __attribute__((unused)) __attribute__((no_instrument_function)) void pmdp_huge_split_prepare(struct vm_area_struct *vma,
        unsigned long address, pmd_t *pmdp)
{

}
# 354 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_unused(pte_t pte)
{
 return 0;
}
# 397 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_52(void) ; if (__cond) __compiletime_assert_52(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_same(pud_t pud_a, pud_t pud_b)
{
 do { bool __cond = !(!(1)); extern void __compiletime_assert_53(void) ; if (__cond) __compiletime_assert_53(); do { ((void)sizeof(char[1 - 2 * __cond])); } while (0); } while (0);
 return 0;
}
# 494 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
void pgd_clear_bad(pgd_t *);
void p4d_clear_bad(p4d_t *);
void pud_clear_bad(pud_t *);
void pmd_clear_bad(pmd_t *);

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int p4d_none_or_clear_bad(p4d_t *p4d)
{
 if (p4d_none(*p4d))
  return 1;
 if (__builtin_expect(!!(p4d_bad(*p4d)), 0)) {
  p4d_clear_bad(p4d);
  return 1;
 }
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_none_or_clear_bad(pud_t *pud)
{
 if (pud_none(*pud))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if (pmd_none(*pmd))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pte_t __ptep_modify_prot_start(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(mm, addr, ptep);
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) void __ptep_modify_prot_commit(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(mm, addr, ptep, pte);
}
# 651 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_swp_mksoft_dirty(pmd_t pmd)
{
 return pmd;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_swp_soft_dirty(pmd_t pmd)
{
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_swp_clear_soft_dirty(pmd_t pmd)
{
 return pmd;
}
# 781 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
extern int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size);
extern void track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
        pfn_t pfn);
extern int track_pfn_copy(struct vm_area_struct *vma);
extern void untrack_pfn(struct vm_area_struct *vma, unsigned long pfn,
   unsigned long size);
extern void untrack_pfn_moved(struct vm_area_struct *vma);
# 803 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}





static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_trans_huge(pmd_t pmd)
{
 return 0;
}
# 843 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pud_trans_huge(pud_t pud)
{
 return 0;
}



static inline __attribute__((unused)) __attribute__((no_instrument_function)) pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}
# 885 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
# 920 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
 if (pmd_none(pmdval) || pmd_trans_huge(pmdval) ||
  (0 && !pmd_present(pmdval)))
  return 1;
 if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
# 943 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_trans_unstable(pmd_t *pmd)
{



 return 0;

}
# 961 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pte_protnone(pte_t pte)
{
 return 0;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) int pmd_protnone(pmd_t pmd)
{
 return 0;
}
# 980 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int p4d_set_huge(p4d_t *p4d, phys_addr_t addr, pgprot_t prot)
{
 return 0;
}
static inline __attribute__((unused)) __attribute__((no_instrument_function)) int p4d_clear_huge(p4d_t *p4d)
{
 return 0;
}


int pud_set_huge(pud_t *pud, phys_addr_t addr, pgprot_t prot);
int pmd_set_huge(pmd_t *pmd, phys_addr_t addr, pgprot_t prot);
int pud_clear_huge(pud_t *pud);
int pmd_clear_huge(pmd_t *pmd);
int pud_free_pmd_page(pud_t *pud, unsigned long addr);
int pmd_free_pte_page(pmd_t *pmd, unsigned long addr);
# 1050 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/pgtable.h"
struct file;
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
   unsigned long size, pgprot_t *vma_prot);
# 1309 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/pgtable.h" 2
# 31 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/set_memory.h" 1





# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/include/asm-generic/set_memory.h" 1







int set_memory_ro(unsigned long addr, int numpages);
int set_memory_rw(unsigned long addr, int numpages);
int set_memory_x(unsigned long addr, int numpages);
int set_memory_nx(unsigned long addr, int numpages);
# 7 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/set_memory.h" 2
# 37 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/set_memory.h"
int _set_memory_uc(unsigned long addr, int numpages);
int _set_memory_wc(unsigned long addr, int numpages);
int _set_memory_wt(unsigned long addr, int numpages);
int _set_memory_wb(unsigned long addr, int numpages);
int set_memory_uc(unsigned long addr, int numpages);
int set_memory_wc(unsigned long addr, int numpages);
int set_memory_wt(unsigned long addr, int numpages);
int set_memory_wb(unsigned long addr, int numpages);
int set_memory_np(unsigned long addr, int numpages);
int set_memory_4k(unsigned long addr, int numpages);
int set_memory_encrypted(unsigned long addr, int numpages);
int set_memory_decrypted(unsigned long addr, int numpages);

int set_memory_array_uc(unsigned long *addr, int addrinarray);
int set_memory_array_wc(unsigned long *addr, int addrinarray);
int set_memory_array_wt(unsigned long *addr, int addrinarray);
int set_memory_array_wb(unsigned long *addr, int addrinarray);

int set_pages_array_uc(struct page **pages, int addrinarray);
int set_pages_array_wc(struct page **pages, int addrinarray);
int set_pages_array_wt(struct page **pages, int addrinarray);
int set_pages_array_wb(struct page **pages, int addrinarray);
# 80 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/set_memory.h"
int set_pages_uc(struct page *page, int numpages);
int set_pages_wb(struct page *page, int numpages);
int set_pages_x(struct page *page, int numpages);
int set_pages_nx(struct page *page, int numpages);
int set_pages_ro(struct page *page, int numpages);
int set_pages_rw(struct page *page, int numpages);

extern int kernel_set_to_readonly;
void set_kernel_text_rw(void);
void set_kernel_text_ro(void);
# 32 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/intel-family.h" 1
# 33 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2
# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/e820/api.h" 1




# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/e820/types.h" 1
# 10 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/e820/types.h"
enum e820_type {
 E820_TYPE_RAM = 1,
 E820_TYPE_RESERVED = 2,
 E820_TYPE_ACPI = 3,
 E820_TYPE_NVS = 4,
 E820_TYPE_UNUSABLE = 5,
 E820_TYPE_PMEM = 7,
# 29 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/e820/types.h"
 E820_TYPE_PRAM = 12,
# 38 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/e820/types.h"
 E820_TYPE_RESERVED_KERN = 128,
};







struct e820_entry {
 u64 addr;
 u64 size;
 enum e820_type type;
} __attribute__((packed));
# 86 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/e820/types.h"
struct e820_table {
 __u32 nr_entries;
 struct e820_entry entries[(128 + 3*(1 << 0))];
};
# 6 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/include/asm/e820/api.h" 2

extern struct e820_table *e820_table;
extern struct e820_table *e820_table_kexec;
extern struct e820_table *e820_table_firmware;

extern unsigned long pci_mem_start;

extern bool e820__mapped_any(u64 start, u64 end, enum e820_type type);
extern bool e820__mapped_all(u64 start, u64 end, enum e820_type type);

extern void e820__range_add (u64 start, u64 size, enum e820_type type);
extern u64 e820__range_update(u64 start, u64 size, enum e820_type old_type, enum e820_type new_type);
extern u64 e820__range_remove(u64 start, u64 size, enum e820_type old_type, bool check_type);

extern void e820__print_table(char *who);
extern int e820__update_table(struct e820_table *table);
extern void e820__update_table_print(void);

extern unsigned long e820__end_of_ram_pfn(void);
extern unsigned long e820__end_of_low_ram_pfn(void);

extern u64 e820__memblock_alloc_reserved(u64 size, u64 align);
extern void e820__memblock_setup(void);

extern void e820__reserve_setup_data(void);
extern void e820__finish_early_params(void);
extern void e820__reserve_resources(void);
extern void e820__reserve_resources_late(void);

extern void e820__memory_setup(void);
extern void e820__memory_setup_extended(u64 phys_addr, u32 data_len);
extern char *e820__memory_setup_default(void);
extern void e820__setup_pci_gap(void);

extern void e820__reallocate_tables(void);
extern void e820__register_nosave_regions(unsigned long limit_pfn);

extern int e820__get_entry_type(u64 start, u64 end);





static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool is_ISA_range(u64 start, u64 end)
{
 return start >= 0x000a0000 && end <= 0x00100000;
}
# 34 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2

# 1 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/cpu.h" 1





struct cpu_dev {
 const char *c_vendor;


 const char *c_ident[2];

 void (*c_early_init)(struct cpuinfo_x86 *);
 void (*c_bsp_init)(struct cpuinfo_x86 *);
 void (*c_init)(struct cpuinfo_x86 *);
 void (*c_identify)(struct cpuinfo_x86 *);
 void (*c_detect_tlb)(struct cpuinfo_x86 *);
 void (*c_bsp_resume)(struct cpuinfo_x86 *);
 int c_x86_vendor;
# 30 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/cpu.h"
};

struct _tlb_table {
 unsigned char descriptor;
 char tlb_type;
 unsigned int entries;

 char info[128];
};






extern const struct cpu_dev *const __x86_cpu_dev_start[],
       *const __x86_cpu_dev_end[];


enum tsx_ctrl_states {
 TSX_CTRL_ENABLE,
 TSX_CTRL_DISABLE,
 TSX_CTRL_NOT_SUPPORTED,
};

extern __attribute__((__section__(".data..ro_after_init"))) enum tsx_ctrl_states tsx_ctrl_state;

extern void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) tsx_init(void);
extern void tsx_enable(void);
extern void tsx_disable(void);




extern void get_cpu_cap(struct cpuinfo_x86 *c);
extern void cpu_detect_cache_sizes(struct cpuinfo_x86 *c);
extern int detect_extended_topology_early(struct cpuinfo_x86 *c);
extern int detect_ht_early(struct cpuinfo_x86 *c);

unsigned int aperfmperf_get_khz(int cpu);

extern void x86_spec_ctrl_setup_ap(void);

extern u64 x86_read_arch_cap_msr(void);
# 36 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c" 2

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) spectre_v1_select_mitigation(void);
static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) spectre_v2_select_mitigation(void);
static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) ssb_select_mitigation(void);
static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) l1tf_select_mitigation(void);
static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) mds_select_mitigation(void);
static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) mds_print_mitigation(void);
static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) taa_select_mitigation(void);


u64 x86_spec_ctrl_base;
extern typeof(x86_spec_ctrl_base) x86_spec_ctrl_base; asm("	.section \"___kcrctab" "_gpl" "+" "x86_spec_ctrl_base" "\", \"a\"	\n" "	.weak	" "__crc_x86_spec_ctrl_base" "	\n" "	.long	" "__crc_x86_spec_ctrl_base" "	\n" "	.previous					\n"); static const char __kstrtab_x86_spec_ctrl_base[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "x86_spec_ctrl_base"; static const struct kernel_symbol __ksymtab_x86_spec_ctrl_base __attribute__((__used__)) __attribute__((section("___ksymtab" "_gpl" "+" "x86_spec_ctrl_base"), used)) = { (unsigned long)&x86_spec_ctrl_base, __kstrtab_x86_spec_ctrl_base };
static struct mutex spec_ctrl_mutex = { .owner = { (0) } , .wait_lock = (spinlock_t ) { { .rlock = { .raw_lock = { { .val = { (0) } } }, } } } , .wait_list = { &(spec_ctrl_mutex.wait_list), &(spec_ctrl_mutex.wait_list) } };





static u64 __attribute__((__section__(".data..ro_after_init"))) x86_spec_ctrl_mask = (1UL << (0));





u64 __attribute__((__section__(".data..ro_after_init"))) x86_amd_ls_cfg_base;
u64 __attribute__((__section__(".data..ro_after_init"))) x86_amd_ls_cfg_ssbd_mask;


struct static_key_false switch_to_cond_stibp = (struct static_key_false){ .key = { .enabled = { 0 }, { .entries = (void *)0UL } }, };

struct static_key_false switch_mm_cond_ibpb = (struct static_key_false){ .key = { .enabled = { 0 }, { .entries = (void *)0UL } }, };

struct static_key_false switch_mm_always_ibpb = (struct static_key_false){ .key = { .enabled = { 0 }, { .entries = (void *)0UL } }, };


struct static_key_false mds_user_clear = (struct static_key_false){ .key = { .enabled = { 0 }, { .entries = (void *)0UL } }, };
extern typeof(mds_user_clear) mds_user_clear; asm("	.section \"___kcrctab" "_gpl" "+" "mds_user_clear" "\", \"a\"	\n" "	.weak	" "__crc_mds_user_clear" "	\n" "	.long	" "__crc_mds_user_clear" "	\n" "	.previous					\n"); static const char __kstrtab_mds_user_clear[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "mds_user_clear"; static const struct kernel_symbol __ksymtab_mds_user_clear __attribute__((__used__)) __attribute__((section("___ksymtab" "_gpl" "+" "mds_user_clear"), used)) = { (unsigned long)&mds_user_clear, __kstrtab_mds_user_clear };

struct static_key_false mds_idle_clear = (struct static_key_false){ .key = { .enabled = { 0 }, { .entries = (void *)0UL } }, };
extern typeof(mds_idle_clear) mds_idle_clear; asm("	.section \"___kcrctab" "_gpl" "+" "mds_idle_clear" "\", \"a\"	\n" "	.weak	" "__crc_mds_idle_clear" "	\n" "	.long	" "__crc_mds_idle_clear" "	\n" "	.previous					\n"); static const char __kstrtab_mds_idle_clear[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "mds_idle_clear"; static const struct kernel_symbol __ksymtab_mds_idle_clear __attribute__((__used__)) __attribute__((section("___ksymtab" "_gpl" "+" "mds_idle_clear"), used)) = { (unsigned long)&mds_idle_clear, __kstrtab_mds_idle_clear };

void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) check_bugs(void)
{
 identify_boot_cpu();





 cpu_smt_check_topology();

 if (!1) {
  printk("\001" "6" "CPU: ");
  print_cpu_info(&boot_cpu_data);
 }






 if ((__builtin_constant_p(( 7*32+16)) && ( (((( 7*32+16))>>5)==(0) && (1UL<<((( 7*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+16))>>5)==(1) && (1UL<<((( 7*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+16))>>5)==(2) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(3) && (1UL<<((( 7*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+16))>>5)==(4) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(5) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(6) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(7) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(8) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(9) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(10) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(11) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(12) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(13) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(14) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(15) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(16) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(17) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(18) && (1UL<<((( 7*32+16))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+16))) ? constant_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  do { x86_spec_ctrl_base = paravirt_read_msr(0x00000048); } while (0);


 if ((__builtin_constant_p(( 7*32+27)) && ( (((( 7*32+27))>>5)==(0) && (1UL<<((( 7*32+27))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+27))>>5)==(1) && (1UL<<((( 7*32+27))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+27))>>5)==(2) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(3) && (1UL<<((( 7*32+27))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+27))>>5)==(4) && (1UL<<((( 7*32+27))&31) & (0) )) || (((( 7*32+27))>>5)==(5) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(6) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(7) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(8) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(9) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(10) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(11) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(12) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(13) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(14) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(15) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(16) && (1UL<<((( 7*32+27))&31) & (0) )) || (((( 7*32+27))>>5)==(17) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(18) && (1UL<<((( 7*32+27))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+27))) ? constant_test_bit((( 7*32+27)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+27)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  x86_spec_ctrl_mask |= (1UL << (1));


 spectre_v1_select_mitigation();
 spectre_v2_select_mitigation();
 ssb_select_mitigation();
 l1tf_select_mitigation();
 mds_select_mitigation();
 taa_select_mitigation();





 mds_print_mitigation();

 arch_smt_update();
# 137 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 alternative_instructions();
# 147 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 if (!direct_gbpages)
  set_memory_4k((unsigned long)((void *)((unsigned long)(0)+((unsigned long)page_offset_base))), 1);

}

void
x86_virt_spec_ctrl(u64 guest_spec_ctrl, u64 guest_virt_spec_ctrl, bool setguest)
{
 u64 msrval, guestval, hostval = x86_spec_ctrl_base;
 struct thread_info *ti = ((struct thread_info *)get_current());


 if (( __builtin_constant_p((__builtin_constant_p(( 7*32+16)) && ( (((( 7*32+16))>>5)==(0) && (1UL<<((( 7*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+16))>>5)==(1) && (1UL<<((( 7*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+16))>>5)==(2) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(3) && (1UL<<((( 7*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+16))>>5)==(4) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(5) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(6) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(7) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(8) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(9) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(10) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(11) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(12) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(13) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(14) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(15) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(16) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(17) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(18) && (1UL<<((( 7*32+16))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+16))) ? constant_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 7*32+16)) && ( (((( 7*32+16))>>5)==(0) && (1UL<<((( 7*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+16))>>5)==(1) && (1UL<<((( 7*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+16))>>5)==(2) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(3) && (1UL<<((( 7*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+16))>>5)==(4) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(5) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(6) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(7) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(8) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(9) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(10) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(11) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(12) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(13) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(14) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(15) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(16) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(17) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(18) && (1UL<<((( 7*32+16))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+16))) ? constant_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 7*32+16)) )) {





  guestval = hostval & ~x86_spec_ctrl_mask;
  guestval |= guest_spec_ctrl & x86_spec_ctrl_mask;


  if (( __builtin_constant_p((__builtin_constant_p((18*32+31)) && ( ((((18*32+31))>>5)==(0) && (1UL<<(((18*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+31))>>5)==(1) && (1UL<<(((18*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+31))>>5)==(2) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(3) && (1UL<<(((18*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+31))>>5)==(4) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(5) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(6) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(7) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(8) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(9) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(10) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(11) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(12) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(13) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(14) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(15) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(16) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(17) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(18) && (1UL<<(((18*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+31))) ? constant_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((18*32+31)) && ( ((((18*32+31))>>5)==(0) && (1UL<<(((18*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+31))>>5)==(1) && (1UL<<(((18*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+31))>>5)==(2) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(3) && (1UL<<(((18*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+31))>>5)==(4) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(5) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(6) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(7) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(8) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(9) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(10) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(11) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(12) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(13) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(14) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(15) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(16) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(17) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(18) && (1UL<<(((18*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+31))) ? constant_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((18*32+31)) ) ||
      ( __builtin_constant_p((__builtin_constant_p((13*32+24)) && ( ((((13*32+24))>>5)==(0) && (1UL<<(((13*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+24))>>5)==(1) && (1UL<<(((13*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+24))>>5)==(2) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(3) && (1UL<<(((13*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+24))>>5)==(4) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(5) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(6) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(7) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(8) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(9) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(10) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(11) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(12) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(13) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(14) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(15) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(16) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(17) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(18) && (1UL<<(((13*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+24))) ? constant_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((13*32+24)) && ( ((((13*32+24))>>5)==(0) && (1UL<<(((13*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+24))>>5)==(1) && (1UL<<(((13*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+24))>>5)==(2) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(3) && (1UL<<(((13*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+24))>>5)==(4) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(5) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(6) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(7) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(8) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(9) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(10) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(11) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(12) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(13) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(14) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(15) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(16) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(17) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(18) && (1UL<<(((13*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+24))) ? constant_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((13*32+24)) ))
   hostval |= ssbd_tif_to_spec_ctrl(ti->flags);


  if (({ bool branch; if (__builtin_types_compatible_p(typeof(*&switch_to_cond_stibp), struct static_key_true)) branch = arch_static_branch_jump(&(&switch_to_cond_stibp)->key, false); else if (__builtin_types_compatible_p(typeof(*&switch_to_cond_stibp), struct static_key_false)) branch = arch_static_branch(&(&switch_to_cond_stibp)->key, false); else branch = ____wrong_branch_error(); branch; }))
   hostval |= stibp_tif_to_spec_ctrl(ti->flags);

  if (hostval != guestval) {
   msrval = setguest ? guestval : hostval;
   wrmsrl(0x00000048, msrval);
  }
 }





 if (!( __builtin_constant_p((__builtin_constant_p(( 7*32+24)) && ( (((( 7*32+24))>>5)==(0) && (1UL<<((( 7*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+24))>>5)==(1) && (1UL<<((( 7*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+24))>>5)==(2) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(3) && (1UL<<((( 7*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+24))>>5)==(4) && (1UL<<((( 7*32+24))&31) & (0) )) || (((( 7*32+24))>>5)==(5) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(6) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(7) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(8) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(9) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(10) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(11) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(12) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(13) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(14) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(15) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(16) && (1UL<<((( 7*32+24))&31) & (0) )) || (((( 7*32+24))>>5)==(17) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(18) && (1UL<<((( 7*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+24))) ? constant_test_bit((( 7*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 7*32+24)) && ( (((( 7*32+24))>>5)==(0) && (1UL<<((( 7*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+24))>>5)==(1) && (1UL<<((( 7*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+24))>>5)==(2) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(3) && (1UL<<((( 7*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+24))>>5)==(4) && (1UL<<((( 7*32+24))&31) & (0) )) || (((( 7*32+24))>>5)==(5) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(6) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(7) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(8) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(9) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(10) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(11) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(12) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(13) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(14) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(15) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(16) && (1UL<<((( 7*32+24))&31) & (0) )) || (((( 7*32+24))>>5)==(17) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(18) && (1UL<<((( 7*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+24))) ? constant_test_bit((( 7*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 7*32+24)) ) &&
     !( __builtin_constant_p((__builtin_constant_p((13*32+25)) && ( ((((13*32+25))>>5)==(0) && (1UL<<(((13*32+25))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+25))>>5)==(1) && (1UL<<(((13*32+25))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+25))>>5)==(2) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(3) && (1UL<<(((13*32+25))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+25))>>5)==(4) && (1UL<<(((13*32+25))&31) & (0) )) || ((((13*32+25))>>5)==(5) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(6) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(7) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(8) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(9) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(10) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(11) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(12) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(13) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(14) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(15) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(16) && (1UL<<(((13*32+25))&31) & (0) )) || ((((13*32+25))>>5)==(17) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(18) && (1UL<<(((13*32+25))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+25))) ? constant_test_bit(((13*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((13*32+25)) && ( ((((13*32+25))>>5)==(0) && (1UL<<(((13*32+25))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+25))>>5)==(1) && (1UL<<(((13*32+25))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+25))>>5)==(2) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(3) && (1UL<<(((13*32+25))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+25))>>5)==(4) && (1UL<<(((13*32+25))&31) & (0) )) || ((((13*32+25))>>5)==(5) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(6) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(7) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(8) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(9) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(10) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(11) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(12) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(13) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(14) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(15) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(16) && (1UL<<(((13*32+25))&31) & (0) )) || ((((13*32+25))>>5)==(17) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(18) && (1UL<<(((13*32+25))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+25))) ? constant_test_bit(((13*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((13*32+25)) ))
  return;






 if (( __builtin_constant_p((__builtin_constant_p(( 7*32+23)) && ( (((( 7*32+23))>>5)==(0) && (1UL<<((( 7*32+23))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+23))>>5)==(1) && (1UL<<((( 7*32+23))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+23))>>5)==(2) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(3) && (1UL<<((( 7*32+23))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+23))>>5)==(4) && (1UL<<((( 7*32+23))&31) & (0) )) || (((( 7*32+23))>>5)==(5) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(6) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(7) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(8) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(9) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(10) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(11) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(12) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(13) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(14) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(15) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(16) && (1UL<<((( 7*32+23))&31) & (0) )) || (((( 7*32+23))>>5)==(17) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(18) && (1UL<<((( 7*32+23))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+23))) ? constant_test_bit((( 7*32+23)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+23)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p(( 7*32+23)) && ( (((( 7*32+23))>>5)==(0) && (1UL<<((( 7*32+23))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+23))>>5)==(1) && (1UL<<((( 7*32+23))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+23))>>5)==(2) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(3) && (1UL<<((( 7*32+23))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+23))>>5)==(4) && (1UL<<((( 7*32+23))&31) & (0) )) || (((( 7*32+23))>>5)==(5) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(6) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(7) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(8) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(9) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(10) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(11) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(12) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(13) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(14) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(15) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(16) && (1UL<<((( 7*32+23))&31) & (0) )) || (((( 7*32+23))>>5)==(17) && (1UL<<((( 7*32+23))&31) & 0 )) || (((( 7*32+23))>>5)==(18) && (1UL<<((( 7*32+23))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+23))) ? constant_test_bit((( 7*32+23)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+23)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has(( 7*32+23)) ))
  hostval = (1UL << (2));
 else
  hostval = ssbd_tif_to_spec_ctrl(ti->flags);


 guestval = guest_virt_spec_ctrl & (1UL << (2));

 if (hostval != guestval) {
  unsigned long tif;

  tif = setguest ? ssbd_spec_ctrl_to_tif(guestval) :
     ssbd_spec_ctrl_to_tif(hostval);

  speculation_ctrl_update(tif);
 }
}
extern typeof(x86_virt_spec_ctrl) x86_virt_spec_ctrl; asm("	.section \"___kcrctab" "_gpl" "+" "x86_virt_spec_ctrl" "\", \"a\"	\n" "	.weak	" "__crc_x86_virt_spec_ctrl" "	\n" "	.long	" "__crc_x86_virt_spec_ctrl" "	\n" "	.previous					\n"); static const char __kstrtab_x86_virt_spec_ctrl[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "x86_virt_spec_ctrl"; static const struct kernel_symbol __ksymtab_x86_virt_spec_ctrl __attribute__((__used__)) __attribute__((section("___ksymtab" "_gpl" "+" "x86_virt_spec_ctrl"), used)) = { (unsigned long)&x86_virt_spec_ctrl, __kstrtab_x86_virt_spec_ctrl };

static void x86_amd_ssb_disable(void)
{
 u64 msrval = x86_amd_ls_cfg_base | x86_amd_ls_cfg_ssbd_mask;

 if ((__builtin_constant_p((13*32+25)) && ( ((((13*32+25))>>5)==(0) && (1UL<<(((13*32+25))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+25))>>5)==(1) && (1UL<<(((13*32+25))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+25))>>5)==(2) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(3) && (1UL<<(((13*32+25))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+25))>>5)==(4) && (1UL<<(((13*32+25))&31) & (0) )) || ((((13*32+25))>>5)==(5) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(6) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(7) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(8) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(9) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(10) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(11) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(12) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(13) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(14) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(15) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(16) && (1UL<<(((13*32+25))&31) & (0) )) || ((((13*32+25))>>5)==(17) && (1UL<<(((13*32+25))&31) & 0 )) || ((((13*32+25))>>5)==(18) && (1UL<<(((13*32+25))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+25))) ? constant_test_bit(((13*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  wrmsrl(0xc001011f, (1UL << (2)));
 else if ((__builtin_constant_p(( 7*32+24)) && ( (((( 7*32+24))>>5)==(0) && (1UL<<((( 7*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+24))>>5)==(1) && (1UL<<((( 7*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+24))>>5)==(2) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(3) && (1UL<<((( 7*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+24))>>5)==(4) && (1UL<<((( 7*32+24))&31) & (0) )) || (((( 7*32+24))>>5)==(5) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(6) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(7) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(8) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(9) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(10) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(11) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(12) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(13) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(14) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(15) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(16) && (1UL<<((( 7*32+24))&31) & (0) )) || (((( 7*32+24))>>5)==(17) && (1UL<<((( 7*32+24))&31) & 0 )) || (((( 7*32+24))>>5)==(18) && (1UL<<((( 7*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+24))) ? constant_test_bit((( 7*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  wrmsrl(0xc0011020, msrval);
}





static enum mds_mitigations mds_mitigation __attribute__((__section__(".data..ro_after_init"))) = MDS_MITIGATION_FULL;
static bool mds_nosmt __attribute__((__section__(".data..ro_after_init"))) = false;

static const char * const mds_strings[] = {
 [MDS_MITIGATION_OFF] = "Vulnerable",
 [MDS_MITIGATION_FULL] = "Mitigation: Clear CPU buffers",
 [MDS_MITIGATION_VMWERV] = "Vulnerable: Clear CPU buffers attempted, no microcode",
};

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) mds_select_mitigation(void)
{
 if (!(__builtin_constant_p((((19*32 + (19))))) && ( ((((((19*32 + (19)))))>>5)==(0) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (19)))))>>5)==(1) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (19)))))>>5)==(2) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(3) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (19)))))>>5)==(4) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(5) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(6) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(7) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(8) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(9) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(10) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(11) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(12) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(13) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(14) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(15) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(16) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(17) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(18) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (19)))))) ? constant_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) || cpu_mitigations_off()) {
  mds_mitigation = MDS_MITIGATION_OFF;
  return;
 }

 if (mds_mitigation == MDS_MITIGATION_FULL) {
  if (!(__builtin_constant_p((18*32+10)) && ( ((((18*32+10))>>5)==(0) && (1UL<<(((18*32+10))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+10))>>5)==(1) && (1UL<<(((18*32+10))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+10))>>5)==(2) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(3) && (1UL<<(((18*32+10))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+10))>>5)==(4) && (1UL<<(((18*32+10))&31) & (0) )) || ((((18*32+10))>>5)==(5) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(6) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(7) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(8) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(9) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(10) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(11) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(12) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(13) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(14) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(15) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(16) && (1UL<<(((18*32+10))&31) & (0) )) || ((((18*32+10))>>5)==(17) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(18) && (1UL<<(((18*32+10))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+10))) ? constant_test_bit(((18*32+10)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+10)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
   mds_mitigation = MDS_MITIGATION_VMWERV;

  static_key_enable(&(&mds_user_clear)->key);

  if (!(__builtin_constant_p((19*32 + (20))) && ( ((((19*32 + (20)))>>5)==(0) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((19*32 + (20)))>>5)==(1) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((19*32 + (20)))>>5)==(2) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(3) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((19*32 + (20)))>>5)==(4) && (1UL<<(((19*32 + (20)))&31) & (0) )) || ((((19*32 + (20)))>>5)==(5) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(6) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(7) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(8) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(9) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(10) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(11) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(12) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(13) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(14) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(15) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(16) && (1UL<<(((19*32 + (20)))&31) & (0) )) || ((((19*32 + (20)))>>5)==(17) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(18) && (1UL<<(((19*32 + (20)))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((19*32 + (20)))) ? constant_test_bit(((19*32 + (20))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((19*32 + (20))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) &&
      (mds_nosmt || cpu_mitigations_auto_nosmt()))
   cpu_smt_disable(false);
 }
}

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) mds_print_mitigation(void)
{
 if (!(__builtin_constant_p((((19*32 + (19))))) && ( ((((((19*32 + (19)))))>>5)==(0) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (19)))))>>5)==(1) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (19)))))>>5)==(2) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(3) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (19)))))>>5)==(4) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(5) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(6) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(7) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(8) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(9) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(10) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(11) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(12) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(13) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(14) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(15) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(16) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(17) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(18) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (19)))))) ? constant_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) || cpu_mitigations_off())
  return;

 printk("\001" "6" "MDS: " "%s\n", mds_strings[mds_mitigation]);
}

static int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) mds_cmdline(char *str)
{
 if (!(__builtin_constant_p((((19*32 + (19))))) && ( ((((((19*32 + (19)))))>>5)==(0) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (19)))))>>5)==(1) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (19)))))>>5)==(2) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(3) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (19)))))>>5)==(4) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(5) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(6) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(7) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(8) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(9) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(10) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(11) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(12) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(13) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(14) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(15) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(16) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(17) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(18) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (19)))))) ? constant_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return 0;

 if (!str)
  return -22;

 if (!strcmp(str, "off"))
  mds_mitigation = MDS_MITIGATION_OFF;
 else if (!strcmp(str, "full"))
  mds_mitigation = MDS_MITIGATION_FULL;
 else if (!strcmp(str, "full,nosmt")) {
  mds_mitigation = MDS_MITIGATION_FULL;
  mds_nosmt = true;
 }

 return 0;
}
static const char __setup_str_mds_cmdline[] __attribute__ ((__section__(".init.rodata"))) __attribute__((aligned(1))) = "mds"; static struct obs_kernel_param __setup_mds_cmdline __attribute__((__used__)) __attribute__ ((__section__(".init.setup"))) __attribute__((aligned((sizeof(long))))) = { __setup_str_mds_cmdline, mds_cmdline, 1 };





static enum taa_mitigations taa_mitigation __attribute__((__section__(".data..ro_after_init"))) = TAA_MITIGATION_VERW;
static bool taa_nosmt __attribute__((__section__(".data..ro_after_init")));

static const char * const taa_strings[] = {
 [TAA_MITIGATION_OFF] = "Vulnerable",
 [TAA_MITIGATION_UCODE_NEEDED] = "Vulnerable: Clear CPU buffers attempted, no microcode",
 [TAA_MITIGATION_VERW] = "Mitigation: Clear CPU buffers",
 [TAA_MITIGATION_TSX_DISABLED] = "Mitigation: TSX disabled",
};

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) taa_select_mitigation(void)
{
 u64 ia32_cap;

 if (!(__builtin_constant_p((((19*32 + (22))))) && ( ((((((19*32 + (22)))))>>5)==(0) && (1UL<<(((((19*32 + (22)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (22)))))>>5)==(1) && (1UL<<(((((19*32 + (22)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (22)))))>>5)==(2) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(3) && (1UL<<(((((19*32 + (22)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (22)))))>>5)==(4) && (1UL<<(((((19*32 + (22)))))&31) & (0) )) || ((((((19*32 + (22)))))>>5)==(5) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(6) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(7) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(8) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(9) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(10) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(11) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(12) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(13) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(14) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(15) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(16) && (1UL<<(((((19*32 + (22)))))&31) & (0) )) || ((((((19*32 + (22)))))>>5)==(17) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(18) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (22)))))) ? constant_test_bit(((((19*32 + (22))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (22))))), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  taa_mitigation = TAA_MITIGATION_OFF;
  return;
 }


 if (!(__builtin_constant_p(( 9*32+11)) && ( (((( 9*32+11))>>5)==(0) && (1UL<<((( 9*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+11))>>5)==(1) && (1UL<<((( 9*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+11))>>5)==(2) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(3) && (1UL<<((( 9*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+11))>>5)==(4) && (1UL<<((( 9*32+11))&31) & (0) )) || (((( 9*32+11))>>5)==(5) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(6) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(7) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(8) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(9) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(10) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(11) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(12) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(13) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(14) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(15) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(16) && (1UL<<((( 9*32+11))&31) & (0) )) || (((( 9*32+11))>>5)==(17) && (1UL<<((( 9*32+11))&31) & 0 )) || (((( 9*32+11))>>5)==(18) && (1UL<<((( 9*32+11))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 9*32+11))) ? constant_test_bit((( 9*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 9*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  taa_mitigation = TAA_MITIGATION_TSX_DISABLED;
  goto out;
 }

 if (cpu_mitigations_off()) {
  taa_mitigation = TAA_MITIGATION_OFF;
  return;
 }





 if (taa_mitigation == TAA_MITIGATION_OFF &&
     mds_mitigation == MDS_MITIGATION_OFF)
  goto out;

 if ((__builtin_constant_p((18*32+10)) && ( ((((18*32+10))>>5)==(0) && (1UL<<(((18*32+10))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+10))>>5)==(1) && (1UL<<(((18*32+10))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+10))>>5)==(2) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(3) && (1UL<<(((18*32+10))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+10))>>5)==(4) && (1UL<<(((18*32+10))&31) & (0) )) || ((((18*32+10))>>5)==(5) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(6) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(7) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(8) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(9) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(10) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(11) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(12) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(13) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(14) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(15) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(16) && (1UL<<(((18*32+10))&31) & (0) )) || ((((18*32+10))>>5)==(17) && (1UL<<(((18*32+10))&31) & 0 )) || ((((18*32+10))>>5)==(18) && (1UL<<(((18*32+10))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+10))) ? constant_test_bit(((18*32+10)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+10)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  taa_mitigation = TAA_MITIGATION_VERW;
 else
  taa_mitigation = TAA_MITIGATION_UCODE_NEEDED;
# 342 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 ia32_cap = x86_read_arch_cap_msr();
 if ( (ia32_cap & (1UL << (5))) &&
     !(ia32_cap & (1UL << (7))))
  taa_mitigation = TAA_MITIGATION_UCODE_NEEDED;
# 354 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 static_key_enable(&(&mds_user_clear)->key);

 if (taa_nosmt || cpu_mitigations_auto_nosmt())
  cpu_smt_disable(false);





 if (mds_mitigation == MDS_MITIGATION_OFF &&
     (__builtin_constant_p((((19*32 + (19))))) && ( ((((((19*32 + (19)))))>>5)==(0) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (19)))))>>5)==(1) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (19)))))>>5)==(2) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(3) && (1UL<<(((((19*32 + (19)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (19)))))>>5)==(4) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(5) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(6) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(7) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(8) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(9) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(10) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(11) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(12) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(13) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(14) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(15) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(16) && (1UL<<(((((19*32 + (19)))))&31) & (0) )) || ((((((19*32 + (19)))))>>5)==(17) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || ((((((19*32 + (19)))))>>5)==(18) && (1UL<<(((((19*32 + (19)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (19)))))) ? constant_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (19))))), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  mds_mitigation = MDS_MITIGATION_FULL;
  mds_select_mitigation();
 }
out:
 printk("\001" "6" "TAA: " "%s\n", taa_strings[taa_mitigation]);
}

static int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) tsx_async_abort_parse_cmdline(char *str)
{
 if (!(__builtin_constant_p((((19*32 + (22))))) && ( ((((((19*32 + (22)))))>>5)==(0) && (1UL<<(((((19*32 + (22)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (22)))))>>5)==(1) && (1UL<<(((((19*32 + (22)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (22)))))>>5)==(2) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(3) && (1UL<<(((((19*32 + (22)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (22)))))>>5)==(4) && (1UL<<(((((19*32 + (22)))))&31) & (0) )) || ((((((19*32 + (22)))))>>5)==(5) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(6) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(7) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(8) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(9) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(10) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(11) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(12) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(13) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(14) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(15) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(16) && (1UL<<(((((19*32 + (22)))))&31) & (0) )) || ((((((19*32 + (22)))))>>5)==(17) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || ((((((19*32 + (22)))))>>5)==(18) && (1UL<<(((((19*32 + (22)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (22)))))) ? constant_test_bit(((((19*32 + (22))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (22))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return 0;

 if (!str)
  return -22;

 if (!strcmp(str, "off")) {
  taa_mitigation = TAA_MITIGATION_OFF;
 } else if (!strcmp(str, "full")) {
  taa_mitigation = TAA_MITIGATION_VERW;
 } else if (!strcmp(str, "full,nosmt")) {
  taa_mitigation = TAA_MITIGATION_VERW;
  taa_nosmt = true;
 }

 return 0;
}
static const char __setup_str_tsx_async_abort_parse_cmdline[] __attribute__ ((__section__(".init.rodata"))) __attribute__((aligned(1))) = "tsx_async_abort"; static struct obs_kernel_param __setup_tsx_async_abort_parse_cmdline __attribute__((__used__)) __attribute__ ((__section__(".init.setup"))) __attribute__((aligned((sizeof(long))))) = { __setup_str_tsx_async_abort_parse_cmdline, tsx_async_abort_parse_cmdline, 1 };




enum spectre_v1_mitigation {
 SPECTRE_V1_MITIGATION_NONE,
 SPECTRE_V1_MITIGATION_AUTO,
};

static enum spectre_v1_mitigation spectre_v1_mitigation __attribute__((__section__(".data..ro_after_init"))) =
 SPECTRE_V1_MITIGATION_AUTO;

static const char * const spectre_v1_strings[] = {
 [SPECTRE_V1_MITIGATION_NONE] = "Vulnerable: __user pointer sanitization and usercopy barriers only; no swapgs barriers",
 [SPECTRE_V1_MITIGATION_AUTO] = "Mitigation: usercopy/swapgs barriers and __user pointer sanitization",
};





static bool smap_works_speculatively(void)
{
 if (!(__builtin_constant_p(( 9*32+20)) && ( (((( 9*32+20))>>5)==(0) && (1UL<<((( 9*32+20))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 9*32+20))>>5)==(1) && (1UL<<((( 9*32+20))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 9*32+20))>>5)==(2) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(3) && (1UL<<((( 9*32+20))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 9*32+20))>>5)==(4) && (1UL<<((( 9*32+20))&31) & (0) )) || (((( 9*32+20))>>5)==(5) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(6) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(7) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(8) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(9) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(10) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(11) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(12) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(13) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(14) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(15) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(16) && (1UL<<((( 9*32+20))&31) & (0) )) || (((( 9*32+20))>>5)==(17) && (1UL<<((( 9*32+20))&31) & 0 )) || (((( 9*32+20))>>5)==(18) && (1UL<<((( 9*32+20))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 9*32+20))) ? constant_test_bit((( 9*32+20)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 9*32+20)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return false;







 if ((__builtin_constant_p((19*32 + (14))) && ( ((((19*32 + (14)))>>5)==(0) && (1UL<<(((19*32 + (14)))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((19*32 + (14)))>>5)==(1) && (1UL<<(((19*32 + (14)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((19*32 + (14)))>>5)==(2) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(3) && (1UL<<(((19*32 + (14)))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((19*32 + (14)))>>5)==(4) && (1UL<<(((19*32 + (14)))&31) & (0) )) || ((((19*32 + (14)))>>5)==(5) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(6) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(7) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(8) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(9) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(10) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(11) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(12) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(13) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(14) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(15) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(16) && (1UL<<(((19*32 + (14)))&31) & (0) )) || ((((19*32 + (14)))>>5)==(17) && (1UL<<(((19*32 + (14)))&31) & 0 )) || ((((19*32 + (14)))>>5)==(18) && (1UL<<(((19*32 + (14)))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((19*32 + (14)))) ? constant_test_bit(((19*32 + (14))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((19*32 + (14))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return false;

 return true;
}

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) spectre_v1_select_mitigation(void)
{
 if (!(__builtin_constant_p((((19*32 + (15))))) && ( ((((((19*32 + (15)))))>>5)==(0) && (1UL<<(((((19*32 + (15)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (15)))))>>5)==(1) && (1UL<<(((((19*32 + (15)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (15)))))>>5)==(2) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(3) && (1UL<<(((((19*32 + (15)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (15)))))>>5)==(4) && (1UL<<(((((19*32 + (15)))))&31) & (0) )) || ((((((19*32 + (15)))))>>5)==(5) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(6) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(7) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(8) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(9) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(10) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(11) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(12) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(13) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(14) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(15) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(16) && (1UL<<(((((19*32 + (15)))))&31) & (0) )) || ((((((19*32 + (15)))))>>5)==(17) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || ((((((19*32 + (15)))))>>5)==(18) && (1UL<<(((((19*32 + (15)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (15)))))) ? constant_test_bit(((((19*32 + (15))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (15))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) || cpu_mitigations_off()) {
  spectre_v1_mitigation = SPECTRE_V1_MITIGATION_NONE;
  return;
 }

 if (spectre_v1_mitigation == SPECTRE_V1_MITIGATION_AUTO) {
# 453 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
  if (!smap_works_speculatively()) {
# 462 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
   if ((__builtin_constant_p((((19*32 + (21))))) && ( ((((((19*32 + (21)))))>>5)==(0) && (1UL<<(((((19*32 + (21)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (21)))))>>5)==(1) && (1UL<<(((((19*32 + (21)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (21)))))>>5)==(2) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(3) && (1UL<<(((((19*32 + (21)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (21)))))>>5)==(4) && (1UL<<(((((19*32 + (21)))))&31) & (0) )) || ((((((19*32 + (21)))))>>5)==(5) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(6) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(7) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(8) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(9) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(10) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(11) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(12) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(13) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(14) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(15) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(16) && (1UL<<(((((19*32 + (21)))))&31) & (0) )) || ((((((19*32 + (21)))))>>5)==(17) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || ((((((19*32 + (21)))))>>5)==(18) && (1UL<<(((((19*32 + (21)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (21)))))) ? constant_test_bit(((((19*32 + (21))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (21))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) &&
       !(__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+11))) ? constant_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
    do { set_bit((11*32+ 4), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit((11*32+ 4), (unsigned long *)cpu_caps_set); } while (0);






   do { set_bit((11*32+ 5), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit((11*32+ 5), (unsigned long *)cpu_caps_set); } while (0);
  }
 }

 printk("\001" "6" "Spectre V1 : " "%s\n", spectre_v1_strings[spectre_v1_mitigation]);
}

static int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) nospectre_v1_cmdline(char *str)
{
 spectre_v1_mitigation = SPECTRE_V1_MITIGATION_NONE;
 return 0;
}
static const char __setup_str_nospectre_v1_cmdline[] __attribute__ ((__section__(".init.rodata"))) __attribute__((aligned(1))) = "nospectre_v1"; static struct obs_kernel_param __setup_nospectre_v1_cmdline __attribute__((__used__)) __attribute__ ((__section__(".init.setup"))) __attribute__((aligned((sizeof(long))))) = { __setup_str_nospectre_v1_cmdline, nospectre_v1_cmdline, 1 };




static enum spectre_v2_mitigation spectre_v2_enabled __attribute__((__section__(".data..ro_after_init"))) =
 SPECTRE_V2_NONE;

static enum spectre_v2_user_mitigation spectre_v2_user __attribute__((__section__(".data..ro_after_init"))) =
 SPECTRE_V2_USER_NONE;


static bool spectre_v2_bad_module;

bool retpoline_module_ok(bool has_retpoline)
{
 if (spectre_v2_enabled == SPECTRE_V2_NONE || has_retpoline)
  return true;

 printk("\001" "3" "Spectre V2 : " "System may be vulnerable to spectre v2\n");
 spectre_v2_bad_module = true;
 return false;
}

static inline __attribute__((unused)) __attribute__((no_instrument_function)) const char *spectre_v2_module_string(void)
{
 return spectre_v2_bad_module ? " - vulnerable module loaded" : "";
}




static inline __attribute__((unused)) __attribute__((no_instrument_function)) bool match_option(const char *arg, int arglen, const char *opt)
{
 int len = strlen(opt);

 return len == arglen && !strncmp(arg, opt, len);
}


enum spectre_v2_mitigation_cmd {
 SPECTRE_V2_CMD_NONE,
 SPECTRE_V2_CMD_AUTO,
 SPECTRE_V2_CMD_FORCE,
 SPECTRE_V2_CMD_RETPOLINE,
 SPECTRE_V2_CMD_RETPOLINE_GENERIC,
 SPECTRE_V2_CMD_RETPOLINE_AMD,
};

enum spectre_v2_user_cmd {
 SPECTRE_V2_USER_CMD_NONE,
 SPECTRE_V2_USER_CMD_AUTO,
 SPECTRE_V2_USER_CMD_FORCE,
 SPECTRE_V2_USER_CMD_PRCTL,
 SPECTRE_V2_USER_CMD_PRCTL_IBPB,
 SPECTRE_V2_USER_CMD_SECCOMP,
 SPECTRE_V2_USER_CMD_SECCOMP_IBPB,
};

static const char * const spectre_v2_user_strings[] = {
 [SPECTRE_V2_USER_NONE] = "User space: Vulnerable",
 [SPECTRE_V2_USER_STRICT] = "User space: Mitigation: STIBP protection",
 [SPECTRE_V2_USER_PRCTL] = "User space: Mitigation: STIBP via prctl",
 [SPECTRE_V2_USER_SECCOMP] = "User space: Mitigation: STIBP via seccomp and prctl",
};

static const struct {
 const char *option;
 enum spectre_v2_user_cmd cmd;
 bool secure;
} v2_user_options[] __attribute__ ((__section__(".init.rodata"))) = {
 { "auto", SPECTRE_V2_USER_CMD_AUTO, false },
 { "off", SPECTRE_V2_USER_CMD_NONE, false },
 { "on", SPECTRE_V2_USER_CMD_FORCE, true },
 { "prctl", SPECTRE_V2_USER_CMD_PRCTL, false },
 { "prctl,ibpb", SPECTRE_V2_USER_CMD_PRCTL_IBPB, false },
 { "seccomp", SPECTRE_V2_USER_CMD_SECCOMP, false },
 { "seccomp,ibpb", SPECTRE_V2_USER_CMD_SECCOMP_IBPB, false },
};

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) spec_v2_user_print_cond(const char *reason, bool secure)
{
 if ((__builtin_constant_p((((19*32 + (16))))) && ( ((((((19*32 + (16)))))>>5)==(0) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (16)))))>>5)==(1) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (16)))))>>5)==(2) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(3) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (16)))))>>5)==(4) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(5) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(6) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(7) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(8) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(9) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(10) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(11) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(12) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(13) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(14) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(15) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(16) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(17) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(18) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (16)))))) ? constant_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) != secure)
  printk("\001" "6" "Spectre V2 : " "spectre_v2_user=%s forced on command line.\n", reason);
}

static enum spectre_v2_user_cmd __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi")))
spectre_v2_parse_user_cmdline(enum spectre_v2_mitigation_cmd v2_cmd)
{
 char arg[20];
 int ret, i;

 switch (v2_cmd) {
 case SPECTRE_V2_CMD_NONE:
  return SPECTRE_V2_USER_CMD_NONE;
 case SPECTRE_V2_CMD_FORCE:
  return SPECTRE_V2_USER_CMD_FORCE;
 default:
  break;
 }

 ret = cmdline_find_option(boot_command_line, "spectre_v2_user",
      arg, sizeof(arg));
 if (ret < 0)
  return SPECTRE_V2_USER_CMD_AUTO;

 for (i = 0; i < (sizeof(v2_user_options) / sizeof((v2_user_options)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((v2_user_options)), typeof(&(v2_user_options)[0])))); }))); i++) {
  if (match_option(arg, ret, v2_user_options[i].option)) {
   spec_v2_user_print_cond(v2_user_options[i].option,
      v2_user_options[i].secure);
   return v2_user_options[i].cmd;
  }
 }

 printk("\001" "3" "Spectre V2 : " "Unknown user space protection option (%s). Switching to AUTO select\n", arg);
 return SPECTRE_V2_USER_CMD_AUTO;
}

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi")))
spectre_v2_user_select_mitigation(enum spectre_v2_mitigation_cmd v2_cmd)
{
 enum spectre_v2_user_mitigation mode = SPECTRE_V2_USER_NONE;
 bool smt_possible = 1;
 enum spectre_v2_user_cmd cmd;

 if (!(__builtin_constant_p(( 7*32+26)) && ( (((( 7*32+26))>>5)==(0) && (1UL<<((( 7*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+26))>>5)==(1) && (1UL<<((( 7*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+26))>>5)==(2) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(3) && (1UL<<((( 7*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+26))>>5)==(4) && (1UL<<((( 7*32+26))&31) & (0) )) || (((( 7*32+26))>>5)==(5) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(6) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(7) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(8) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(9) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(10) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(11) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(12) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(13) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(14) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(15) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(16) && (1UL<<((( 7*32+26))&31) & (0) )) || (((( 7*32+26))>>5)==(17) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(18) && (1UL<<((( 7*32+26))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+26))) ? constant_test_bit((( 7*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) && !(__builtin_constant_p(( 7*32+27)) && ( (((( 7*32+27))>>5)==(0) && (1UL<<((( 7*32+27))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+27))>>5)==(1) && (1UL<<((( 7*32+27))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+27))>>5)==(2) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(3) && (1UL<<((( 7*32+27))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+27))>>5)==(4) && (1UL<<((( 7*32+27))&31) & (0) )) || (((( 7*32+27))>>5)==(5) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(6) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(7) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(8) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(9) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(10) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(11) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(12) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(13) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(14) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(15) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(16) && (1UL<<((( 7*32+27))&31) & (0) )) || (((( 7*32+27))>>5)==(17) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(18) && (1UL<<((( 7*32+27))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+27))) ? constant_test_bit((( 7*32+27)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+27)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return;

 if (cpu_smt_control == CPU_SMT_FORCE_DISABLED ||
     cpu_smt_control == CPU_SMT_NOT_SUPPORTED)
  smt_possible = false;

 cmd = spectre_v2_parse_user_cmdline(v2_cmd);
 switch (cmd) {
 case SPECTRE_V2_USER_CMD_NONE:
  goto set_mode;
 case SPECTRE_V2_USER_CMD_FORCE:
  mode = SPECTRE_V2_USER_STRICT;
  break;
 case SPECTRE_V2_USER_CMD_PRCTL:
 case SPECTRE_V2_USER_CMD_PRCTL_IBPB:
  mode = SPECTRE_V2_USER_PRCTL;
  break;
 case SPECTRE_V2_USER_CMD_AUTO:
 case SPECTRE_V2_USER_CMD_SECCOMP:
 case SPECTRE_V2_USER_CMD_SECCOMP_IBPB:
  if (1)
   mode = SPECTRE_V2_USER_SECCOMP;
  else
   mode = SPECTRE_V2_USER_PRCTL;
  break;
 }


 if ((__builtin_constant_p(( 7*32+26)) && ( (((( 7*32+26))>>5)==(0) && (1UL<<((( 7*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+26))>>5)==(1) && (1UL<<((( 7*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+26))>>5)==(2) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(3) && (1UL<<((( 7*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+26))>>5)==(4) && (1UL<<((( 7*32+26))&31) & (0) )) || (((( 7*32+26))>>5)==(5) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(6) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(7) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(8) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(9) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(10) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(11) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(12) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(13) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(14) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(15) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(16) && (1UL<<((( 7*32+26))&31) & (0) )) || (((( 7*32+26))>>5)==(17) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(18) && (1UL<<((( 7*32+26))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+26))) ? constant_test_bit((( 7*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  do { set_bit(( 7*32+21), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+21), (unsigned long *)cpu_caps_set); } while (0);

  switch (cmd) {
  case SPECTRE_V2_USER_CMD_FORCE:
  case SPECTRE_V2_USER_CMD_PRCTL_IBPB:
  case SPECTRE_V2_USER_CMD_SECCOMP_IBPB:
   static_key_enable(&(&switch_mm_always_ibpb)->key);
   break;
  case SPECTRE_V2_USER_CMD_PRCTL:
  case SPECTRE_V2_USER_CMD_AUTO:
  case SPECTRE_V2_USER_CMD_SECCOMP:
   static_key_enable(&(&switch_mm_cond_ibpb)->key);
   break;
  default:
   break;
  }

  printk("\001" "6" "Spectre V2 : " "mitigation: Enabling %s Indirect Branch Prediction Barrier\n", ({ if (!__builtin_types_compatible_p(typeof(*&switch_mm_always_ibpb), struct static_key) && !__builtin_types_compatible_p(typeof(*&switch_mm_always_ibpb), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&switch_mm_always_ibpb), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&switch_mm_always_ibpb) > 0; }) ? "always-on" : "conditional");


 }


 if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)
  return;





 if (!smt_possible || !(__builtin_constant_p(( 7*32+27)) && ( (((( 7*32+27))>>5)==(0) && (1UL<<((( 7*32+27))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+27))>>5)==(1) && (1UL<<((( 7*32+27))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+27))>>5)==(2) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(3) && (1UL<<((( 7*32+27))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+27))>>5)==(4) && (1UL<<((( 7*32+27))&31) & (0) )) || (((( 7*32+27))>>5)==(5) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(6) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(7) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(8) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(9) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(10) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(11) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(12) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(13) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(14) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(15) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(16) && (1UL<<((( 7*32+27))&31) & (0) )) || (((( 7*32+27))>>5)==(17) && (1UL<<((( 7*32+27))&31) & 0 )) || (((( 7*32+27))>>5)==(18) && (1UL<<((( 7*32+27))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+27))) ? constant_test_bit((( 7*32+27)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+27)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  mode = SPECTRE_V2_USER_NONE;
set_mode:
 spectre_v2_user = mode;

 if (smt_possible)
  printk("\001" "6" "Spectre V2 : " "%s\n", spectre_v2_user_strings[mode]);
}

static const char * const spectre_v2_strings[] = {
 [SPECTRE_V2_NONE] = "Vulnerable",
 [SPECTRE_V2_RETPOLINE_GENERIC] = "Mitigation: Full generic retpoline",
 [SPECTRE_V2_RETPOLINE_AMD] = "Mitigation: Full AMD retpoline",
 [SPECTRE_V2_IBRS_ENHANCED] = "Mitigation: Enhanced IBRS",
};

static const struct {
 const char *option;
 enum spectre_v2_mitigation_cmd cmd;
 bool secure;
} mitigation_options[] __attribute__ ((__section__(".init.rodata"))) = {
 { "off", SPECTRE_V2_CMD_NONE, false },
 { "on", SPECTRE_V2_CMD_FORCE, true },
 { "retpoline", SPECTRE_V2_CMD_RETPOLINE, false },
 { "retpoline,amd", SPECTRE_V2_CMD_RETPOLINE_AMD, false },
 { "retpoline,generic", SPECTRE_V2_CMD_RETPOLINE_GENERIC, false },
 { "auto", SPECTRE_V2_CMD_AUTO, false },
};

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) spec_v2_print_cond(const char *reason, bool secure)
{
 if ((__builtin_constant_p((((19*32 + (16))))) && ( ((((((19*32 + (16)))))>>5)==(0) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (16)))))>>5)==(1) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (16)))))>>5)==(2) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(3) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (16)))))>>5)==(4) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(5) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(6) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(7) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(8) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(9) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(10) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(11) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(12) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(13) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(14) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(15) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(16) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(17) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(18) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (16)))))) ? constant_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) != secure)
  printk("\001" "6" "Spectre V2 : " "%s selected on command line.\n", reason);
}

static enum spectre_v2_mitigation_cmd __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) spectre_v2_parse_cmdline(void)
{
 enum spectre_v2_mitigation_cmd cmd = SPECTRE_V2_CMD_AUTO;
 char arg[20];
 int ret, i;

 if (cmdline_find_option_bool(boot_command_line, "nospectre_v2") ||
     cpu_mitigations_off())
  return SPECTRE_V2_CMD_NONE;

 ret = cmdline_find_option(boot_command_line, "spectre_v2", arg, sizeof(arg));
 if (ret < 0)
  return SPECTRE_V2_CMD_AUTO;

 for (i = 0; i < (sizeof(mitigation_options) / sizeof((mitigation_options)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((mitigation_options)), typeof(&(mitigation_options)[0])))); }))); i++) {
  if (!match_option(arg, ret, mitigation_options[i].option))
   continue;
  cmd = mitigation_options[i].cmd;
  break;
 }

 if (i >= (sizeof(mitigation_options) / sizeof((mitigation_options)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((mitigation_options)), typeof(&(mitigation_options)[0])))); })))) {
  printk("\001" "3" "Spectre V2 : " "unknown option (%s). Switching to AUTO select\n", arg);
  return SPECTRE_V2_CMD_AUTO;
 }

 if ((cmd == SPECTRE_V2_CMD_RETPOLINE ||
      cmd == SPECTRE_V2_CMD_RETPOLINE_AMD ||
      cmd == SPECTRE_V2_CMD_RETPOLINE_GENERIC) &&
     !1) {
  printk("\001" "3" "Spectre V2 : " "%s selected but not compiled in. Switching to AUTO select\n", mitigation_options[i].option);
  return SPECTRE_V2_CMD_AUTO;
 }

 if (cmd == SPECTRE_V2_CMD_RETPOLINE_AMD &&
     boot_cpu_data.x86_vendor != 2) {
  printk("\001" "3" "Spectre V2 : " "retpoline,amd selected but CPU is not AMD. Switching to AUTO select\n");
  return SPECTRE_V2_CMD_AUTO;
 }

 spec_v2_print_cond(mitigation_options[i].option,
      mitigation_options[i].secure);
 return cmd;
}

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) spectre_v2_select_mitigation(void)
{
 enum spectre_v2_mitigation_cmd cmd = spectre_v2_parse_cmdline();
 enum spectre_v2_mitigation mode = SPECTRE_V2_NONE;





 if (!(__builtin_constant_p((((19*32 + (16))))) && ( ((((((19*32 + (16)))))>>5)==(0) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (16)))))>>5)==(1) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (16)))))>>5)==(2) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(3) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (16)))))>>5)==(4) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(5) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(6) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(7) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(8) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(9) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(10) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(11) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(12) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(13) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(14) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(15) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(16) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(17) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(18) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (16)))))) ? constant_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) &&
     (cmd == SPECTRE_V2_CMD_NONE || cmd == SPECTRE_V2_CMD_AUTO))
  return;

 switch (cmd) {
 case SPECTRE_V2_CMD_NONE:
  return;

 case SPECTRE_V2_CMD_FORCE:
 case SPECTRE_V2_CMD_AUTO:
  if ((__builtin_constant_p(( 7*32+30)) && ( (((( 7*32+30))>>5)==(0) && (1UL<<((( 7*32+30))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+30))>>5)==(1) && (1UL<<((( 7*32+30))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+30))>>5)==(2) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(3) && (1UL<<((( 7*32+30))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+30))>>5)==(4) && (1UL<<((( 7*32+30))&31) & (0) )) || (((( 7*32+30))>>5)==(5) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(6) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(7) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(8) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(9) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(10) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(11) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(12) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(13) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(14) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(15) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(16) && (1UL<<((( 7*32+30))&31) & (0) )) || (((( 7*32+30))>>5)==(17) && (1UL<<((( 7*32+30))&31) & 0 )) || (((( 7*32+30))>>5)==(18) && (1UL<<((( 7*32+30))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+30))) ? constant_test_bit((( 7*32+30)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+30)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
   mode = SPECTRE_V2_IBRS_ENHANCED;

   x86_spec_ctrl_base |= (1UL << (0));
   wrmsrl(0x00000048, x86_spec_ctrl_base);
   goto specv2_set_mode;
  }
  if (1)
   goto retpoline_auto;
  break;
 case SPECTRE_V2_CMD_RETPOLINE_AMD:
  if (1)
   goto retpoline_amd;
  break;
 case SPECTRE_V2_CMD_RETPOLINE_GENERIC:
  if (1)
   goto retpoline_generic;
  break;
 case SPECTRE_V2_CMD_RETPOLINE:
  if (1)
   goto retpoline_auto;
  break;
 }
 printk("\001" "3" "Spectre V2 : " "Spectre mitigation: kernel not compiled with retpoline; no mitigation available!");
 return;

retpoline_auto:
 if (boot_cpu_data.x86_vendor == 2) {
 retpoline_amd:
  if (!(__builtin_constant_p(( 3*32+18)) && ( (((( 3*32+18))>>5)==(0) && (1UL<<((( 3*32+18))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 3*32+18))>>5)==(1) && (1UL<<((( 3*32+18))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 3*32+18))>>5)==(2) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(3) && (1UL<<((( 3*32+18))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 3*32+18))>>5)==(4) && (1UL<<((( 3*32+18))&31) & (0) )) || (((( 3*32+18))>>5)==(5) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(6) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(7) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(8) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(9) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(10) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(11) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(12) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(13) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(14) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(15) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(16) && (1UL<<((( 3*32+18))&31) & (0) )) || (((( 3*32+18))>>5)==(17) && (1UL<<((( 3*32+18))&31) & 0 )) || (((( 3*32+18))>>5)==(18) && (1UL<<((( 3*32+18))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 3*32+18))) ? constant_test_bit((( 3*32+18)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 3*32+18)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
   printk("\001" "3" "Spectre V2 : " "Spectre mitigation: LFENCE not serializing, switching to generic retpoline\n");
   goto retpoline_generic;
  }
  mode = SPECTRE_V2_RETPOLINE_AMD;
  do { set_bit(( 7*32+13), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+13), (unsigned long *)cpu_caps_set); } while (0);
  do { set_bit(( 7*32+12), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+12), (unsigned long *)cpu_caps_set); } while (0);
 } else {
 retpoline_generic:
  mode = SPECTRE_V2_RETPOLINE_GENERIC;
  do { set_bit(( 7*32+12), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+12), (unsigned long *)cpu_caps_set); } while (0);
 }

specv2_set_mode:
 spectre_v2_enabled = mode;
 printk("\001" "6" "Spectre V2 : " "%s\n", spectre_v2_strings[mode]);
# 821 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 do { set_bit(( 7*32+19), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+19), (unsigned long *)cpu_caps_set); } while (0);
 printk("\001" "6" "Spectre V2 : " "Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch\n");
# 835 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 if ((__builtin_constant_p(( 7*32+25)) && ( (((( 7*32+25))>>5)==(0) && (1UL<<((( 7*32+25))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+25))>>5)==(1) && (1UL<<((( 7*32+25))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+25))>>5)==(2) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(3) && (1UL<<((( 7*32+25))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+25))>>5)==(4) && (1UL<<((( 7*32+25))&31) & (0) )) || (((( 7*32+25))>>5)==(5) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(6) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(7) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(8) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(9) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(10) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(11) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(12) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(13) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(14) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(15) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(16) && (1UL<<((( 7*32+25))&31) & (0) )) || (((( 7*32+25))>>5)==(17) && (1UL<<((( 7*32+25))&31) & 0 )) || (((( 7*32+25))>>5)==(18) && (1UL<<((( 7*32+25))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+25))) ? constant_test_bit((( 7*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+25)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) && mode != SPECTRE_V2_IBRS_ENHANCED) {
  do { set_bit(( 7*32+22), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+22), (unsigned long *)cpu_caps_set); } while (0);
  printk("\001" "6" "Spectre V2 : " "Enabling Restricted Speculation for firmware calls\n");
 }


 spectre_v2_user_select_mitigation(cmd);
}

static void update_stibp_msr(void * __unused)
{
 wrmsrl(0x00000048, x86_spec_ctrl_base);
}


static void update_stibp_strict(void)
{
 u64 mask = x86_spec_ctrl_base & ~(1UL << (1));

 if (sched_smt_active())
  mask |= (1UL << (1));

 if (mask == x86_spec_ctrl_base)
  return;

 printk("\001" "6" "Spectre V2 : " "Update user space SMT mitigation: STIBP %s\n", mask & (1UL << (1)) ? "always-on" : "off");

 x86_spec_ctrl_base = mask;
 on_each_cpu(update_stibp_msr, ((void *)0), 1);
}


static void update_indir_branch_cond(void)
{
 if (sched_smt_active())
  static_key_enable(&(&switch_to_cond_stibp)->key);
 else
  static_key_disable(&(&switch_to_cond_stibp)->key);
}





static void update_mds_branch_idle(void)
{
# 889 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 if (!(__builtin_constant_p((((19*32 + (20))))) && ( ((((((19*32 + (20)))))>>5)==(0) && (1UL<<(((((19*32 + (20)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (20)))))>>5)==(1) && (1UL<<(((((19*32 + (20)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (20)))))>>5)==(2) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(3) && (1UL<<(((((19*32 + (20)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (20)))))>>5)==(4) && (1UL<<(((((19*32 + (20)))))&31) & (0) )) || ((((((19*32 + (20)))))>>5)==(5) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(6) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(7) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(8) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(9) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(10) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(11) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(12) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(13) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(14) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(15) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(16) && (1UL<<(((((19*32 + (20)))))&31) & (0) )) || ((((((19*32 + (20)))))>>5)==(17) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || ((((((19*32 + (20)))))>>5)==(18) && (1UL<<(((((19*32 + (20)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (20)))))) ? constant_test_bit(((((19*32 + (20))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (20))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return;

 if (sched_smt_active())
  static_key_enable(&(&mds_idle_clear)->key);
 else
  static_key_disable(&(&mds_idle_clear)->key);
}




void arch_smt_update(void)
{
 mutex_lock(&spec_ctrl_mutex);

 switch (spectre_v2_user) {
 case SPECTRE_V2_USER_NONE:
  break;
 case SPECTRE_V2_USER_STRICT:
  update_stibp_strict();
  break;
 case SPECTRE_V2_USER_PRCTL:
 case SPECTRE_V2_USER_SECCOMP:
  update_indir_branch_cond();
  break;
 }

 switch (mds_mitigation) {
 case MDS_MITIGATION_FULL:
 case MDS_MITIGATION_VMWERV:
  if (sched_smt_active() && !(__builtin_constant_p((19*32 + (20))) && ( ((((19*32 + (20)))>>5)==(0) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((19*32 + (20)))>>5)==(1) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((19*32 + (20)))>>5)==(2) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(3) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((19*32 + (20)))>>5)==(4) && (1UL<<(((19*32 + (20)))&31) & (0) )) || ((((19*32 + (20)))>>5)==(5) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(6) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(7) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(8) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(9) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(10) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(11) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(12) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(13) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(14) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(15) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(16) && (1UL<<(((19*32 + (20)))&31) & (0) )) || ((((19*32 + (20)))>>5)==(17) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(18) && (1UL<<(((19*32 + (20)))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((19*32 + (20)))) ? constant_test_bit(((19*32 + (20))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((19*32 + (20))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
   ({ static bool __print_once __attribute__((__section__(".data..read_mostly"))); bool __ret_print_once = !__print_once; if (!__print_once) { __print_once = true; printk("\001" "4" "MDS CPU bug present and SMT on, data leak possible. See https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html for more details.\n"); } __builtin_expect(!!(__ret_print_once), 0); });
  update_mds_branch_idle();
  break;
 case MDS_MITIGATION_OFF:
  break;
 }

 switch (taa_mitigation) {
 case TAA_MITIGATION_VERW:
 case TAA_MITIGATION_UCODE_NEEDED:
  if (sched_smt_active())
   ({ static bool __print_once __attribute__((__section__(".data..read_mostly"))); bool __ret_print_once = !__print_once; if (!__print_once) { __print_once = true; printk("\001" "4" "TAA CPU bug present and SMT on, data leak possible. See https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/tsx_async_abort.html for more details.\n"); } __builtin_expect(!!(__ret_print_once), 0); });
  break;
 case TAA_MITIGATION_TSX_DISABLED:
 case TAA_MITIGATION_OFF:
  break;
 }

 mutex_unlock(&spec_ctrl_mutex);
}




static enum ssb_mitigation ssb_mode __attribute__((__section__(".data..ro_after_init"))) = SPEC_STORE_BYPASS_NONE;


enum ssb_mitigation_cmd {
 SPEC_STORE_BYPASS_CMD_NONE,
 SPEC_STORE_BYPASS_CMD_AUTO,
 SPEC_STORE_BYPASS_CMD_ON,
 SPEC_STORE_BYPASS_CMD_PRCTL,
 SPEC_STORE_BYPASS_CMD_SECCOMP,
};

static const char * const ssb_strings[] = {
 [SPEC_STORE_BYPASS_NONE] = "Vulnerable",
 [SPEC_STORE_BYPASS_DISABLE] = "Mitigation: Speculative Store Bypass disabled",
 [SPEC_STORE_BYPASS_PRCTL] = "Mitigation: Speculative Store Bypass disabled via prctl",
 [SPEC_STORE_BYPASS_SECCOMP] = "Mitigation: Speculative Store Bypass disabled via prctl and seccomp",
};

static const struct {
 const char *option;
 enum ssb_mitigation_cmd cmd;
} ssb_mitigation_options[] __attribute__ ((__section__(".init.rodata"))) = {
 { "auto", SPEC_STORE_BYPASS_CMD_AUTO },
 { "on", SPEC_STORE_BYPASS_CMD_ON },
 { "off", SPEC_STORE_BYPASS_CMD_NONE },
 { "prctl", SPEC_STORE_BYPASS_CMD_PRCTL },
 { "seccomp", SPEC_STORE_BYPASS_CMD_SECCOMP },
};

static enum ssb_mitigation_cmd __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) ssb_parse_cmdline(void)
{
 enum ssb_mitigation_cmd cmd = SPEC_STORE_BYPASS_CMD_AUTO;
 char arg[20];
 int ret, i;

 if (cmdline_find_option_bool(boot_command_line, "nospec_store_bypass_disable") ||
     cpu_mitigations_off()) {
  return SPEC_STORE_BYPASS_CMD_NONE;
 } else {
  ret = cmdline_find_option(boot_command_line, "spec_store_bypass_disable",
       arg, sizeof(arg));
  if (ret < 0)
   return SPEC_STORE_BYPASS_CMD_AUTO;

  for (i = 0; i < (sizeof(ssb_mitigation_options) / sizeof((ssb_mitigation_options)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((ssb_mitigation_options)), typeof(&(ssb_mitigation_options)[0])))); }))); i++) {
   if (!match_option(arg, ret, ssb_mitigation_options[i].option))
    continue;

   cmd = ssb_mitigation_options[i].cmd;
   break;
  }

  if (i >= (sizeof(ssb_mitigation_options) / sizeof((ssb_mitigation_options)[0]) + (sizeof(struct { int:(-!!(__builtin_types_compatible_p(typeof((ssb_mitigation_options)), typeof(&(ssb_mitigation_options)[0])))); })))) {
   printk("\001" "3" "Speculative Store Bypass: " "unknown option (%s). Switching to AUTO select\n", arg);
   return SPEC_STORE_BYPASS_CMD_AUTO;
  }
 }

 return cmd;
}

static enum ssb_mitigation __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) __ssb_select_mitigation(void)
{
 enum ssb_mitigation mode = SPEC_STORE_BYPASS_NONE;
 enum ssb_mitigation_cmd cmd;

 if (!(__builtin_constant_p(( 7*32+17)) && ( (((( 7*32+17))>>5)==(0) && (1UL<<((( 7*32+17))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+17))>>5)==(1) && (1UL<<((( 7*32+17))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+17))>>5)==(2) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(3) && (1UL<<((( 7*32+17))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+17))>>5)==(4) && (1UL<<((( 7*32+17))&31) & (0) )) || (((( 7*32+17))>>5)==(5) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(6) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(7) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(8) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(9) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(10) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(11) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(12) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(13) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(14) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(15) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(16) && (1UL<<((( 7*32+17))&31) & (0) )) || (((( 7*32+17))>>5)==(17) && (1UL<<((( 7*32+17))&31) & 0 )) || (((( 7*32+17))>>5)==(18) && (1UL<<((( 7*32+17))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+17))) ? constant_test_bit((( 7*32+17)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+17)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return mode;

 cmd = ssb_parse_cmdline();
 if (!(__builtin_constant_p((((19*32 + (17))))) && ( ((((((19*32 + (17)))))>>5)==(0) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (17)))))>>5)==(1) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (17)))))>>5)==(2) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(3) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (17)))))>>5)==(4) && (1UL<<(((((19*32 + (17)))))&31) & (0) )) || ((((((19*32 + (17)))))>>5)==(5) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(6) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(7) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(8) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(9) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(10) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(11) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(12) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(13) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(14) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(15) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(16) && (1UL<<(((((19*32 + (17)))))&31) & (0) )) || ((((((19*32 + (17)))))>>5)==(17) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(18) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (17)))))) ? constant_test_bit(((((19*32 + (17))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (17))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) &&
     (cmd == SPEC_STORE_BYPASS_CMD_NONE ||
      cmd == SPEC_STORE_BYPASS_CMD_AUTO))
  return mode;

 switch (cmd) {
 case SPEC_STORE_BYPASS_CMD_AUTO:
 case SPEC_STORE_BYPASS_CMD_SECCOMP:




  if (1)
   mode = SPEC_STORE_BYPASS_SECCOMP;
  else
   mode = SPEC_STORE_BYPASS_PRCTL;
  break;
 case SPEC_STORE_BYPASS_CMD_ON:
  mode = SPEC_STORE_BYPASS_DISABLE;
  break;
 case SPEC_STORE_BYPASS_CMD_PRCTL:
  mode = SPEC_STORE_BYPASS_PRCTL;
  break;
 case SPEC_STORE_BYPASS_CMD_NONE:
  break;
 }






 if (( __builtin_constant_p((__builtin_constant_p((18*32+31)) && ( ((((18*32+31))>>5)==(0) && (1UL<<(((18*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+31))>>5)==(1) && (1UL<<(((18*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+31))>>5)==(2) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(3) && (1UL<<(((18*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+31))>>5)==(4) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(5) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(6) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(7) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(8) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(9) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(10) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(11) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(12) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(13) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(14) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(15) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(16) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(17) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(18) && (1UL<<(((18*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+31))) ? constant_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((18*32+31)) && ( ((((18*32+31))>>5)==(0) && (1UL<<(((18*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+31))>>5)==(1) && (1UL<<(((18*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+31))>>5)==(2) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(3) && (1UL<<(((18*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+31))>>5)==(4) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(5) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(6) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(7) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(8) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(9) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(10) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(11) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(12) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(13) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(14) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(15) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(16) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(17) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(18) && (1UL<<(((18*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+31))) ? constant_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((18*32+31)) ) ||
     ( __builtin_constant_p((__builtin_constant_p((13*32+24)) && ( ((((13*32+24))>>5)==(0) && (1UL<<(((13*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+24))>>5)==(1) && (1UL<<(((13*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+24))>>5)==(2) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(3) && (1UL<<(((13*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+24))>>5)==(4) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(5) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(6) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(7) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(8) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(9) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(10) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(11) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(12) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(13) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(14) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(15) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(16) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(17) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(18) && (1UL<<(((13*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+24))) ? constant_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((13*32+24)) && ( ((((13*32+24))>>5)==(0) && (1UL<<(((13*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+24))>>5)==(1) && (1UL<<(((13*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+24))>>5)==(2) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(3) && (1UL<<(((13*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+24))>>5)==(4) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(5) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(6) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(7) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(8) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(9) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(10) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(11) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(12) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(13) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(14) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(15) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(16) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(17) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(18) && (1UL<<(((13*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+24))) ? constant_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((13*32+24)) )) {
  x86_spec_ctrl_mask |= (1UL << (2));
 }







 if (mode == SPEC_STORE_BYPASS_DISABLE) {
  do { set_bit(( 7*32+23), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+23), (unsigned long *)cpu_caps_set); } while (0);




  if (!( __builtin_constant_p((__builtin_constant_p((18*32+31)) && ( ((((18*32+31))>>5)==(0) && (1UL<<(((18*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+31))>>5)==(1) && (1UL<<(((18*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+31))>>5)==(2) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(3) && (1UL<<(((18*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+31))>>5)==(4) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(5) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(6) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(7) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(8) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(9) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(10) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(11) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(12) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(13) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(14) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(15) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(16) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(17) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(18) && (1UL<<(((18*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+31))) ? constant_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((18*32+31)) && ( ((((18*32+31))>>5)==(0) && (1UL<<(((18*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((18*32+31))>>5)==(1) && (1UL<<(((18*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((18*32+31))>>5)==(2) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(3) && (1UL<<(((18*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((18*32+31))>>5)==(4) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(5) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(6) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(7) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(8) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(9) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(10) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(11) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(12) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(13) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(14) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(15) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(16) && (1UL<<(((18*32+31))&31) & (0) )) || ((((18*32+31))>>5)==(17) && (1UL<<(((18*32+31))&31) & 0 )) || ((((18*32+31))>>5)==(18) && (1UL<<(((18*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((18*32+31))) ? constant_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((18*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((18*32+31)) ) &&
      !( __builtin_constant_p((__builtin_constant_p((13*32+24)) && ( ((((13*32+24))>>5)==(0) && (1UL<<(((13*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+24))>>5)==(1) && (1UL<<(((13*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+24))>>5)==(2) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(3) && (1UL<<(((13*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+24))>>5)==(4) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(5) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(6) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(7) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(8) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(9) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(10) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(11) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(12) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(13) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(14) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(15) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(16) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(17) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(18) && (1UL<<(((13*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+24))) ? constant_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) ? (__builtin_constant_p((13*32+24)) && ( ((((13*32+24))>>5)==(0) && (1UL<<(((13*32+24))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((13*32+24))>>5)==(1) && (1UL<<(((13*32+24))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((13*32+24))>>5)==(2) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(3) && (1UL<<(((13*32+24))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((13*32+24))>>5)==(4) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(5) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(6) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(7) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(8) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(9) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(10) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(11) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(12) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(13) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(14) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(15) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(16) && (1UL<<(((13*32+24))&31) & (0) )) || ((((13*32+24))>>5)==(17) && (1UL<<(((13*32+24))&31) & 0 )) || ((((13*32+24))>>5)==(18) && (1UL<<(((13*32+24))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((13*32+24))) ? constant_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((13*32+24)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) : _static_cpu_has((13*32+24)) )) {
   x86_amd_ssb_disable();
  } else {
   x86_spec_ctrl_base |= (1UL << (2));
   wrmsrl(0x00000048, x86_spec_ctrl_base);
  }
 }

 return mode;
}

static void ssb_select_mitigation(void)
{
 ssb_mode = __ssb_select_mitigation();

 if ((__builtin_constant_p((((19*32 + (17))))) && ( ((((((19*32 + (17)))))>>5)==(0) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (17)))))>>5)==(1) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (17)))))>>5)==(2) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(3) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (17)))))>>5)==(4) && (1UL<<(((((19*32 + (17)))))&31) & (0) )) || ((((((19*32 + (17)))))>>5)==(5) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(6) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(7) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(8) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(9) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(10) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(11) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(12) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(13) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(14) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(15) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(16) && (1UL<<(((((19*32 + (17)))))&31) & (0) )) || ((((((19*32 + (17)))))>>5)==(17) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(18) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (17)))))) ? constant_test_bit(((((19*32 + (17))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (17))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  printk("\001" "6" "Speculative Store Bypass: " "%s\n", ssb_strings[ssb_mode]);
}




static void task_update_spec_tif(struct task_struct *tsk)
{

 set_tsk_thread_flag(tsk, 10);
# 1100 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
 if (tsk == get_current())
  speculation_ctrl_update_current();
}

static int ssb_prctl_set(struct task_struct *task, unsigned long ctrl)
{
 if (ssb_mode != SPEC_STORE_BYPASS_PRCTL &&
     ssb_mode != SPEC_STORE_BYPASS_SECCOMP)
  return -6;

 switch (ctrl) {
 case (1UL << 1):

  if (task_spec_ssb_force_disable(task))
   return -1;
  task_clear_spec_ssb_disable(task);
  task_update_spec_tif(task);
  break;
 case (1UL << 2):
  task_set_spec_ssb_disable(task);
  task_update_spec_tif(task);
  break;
 case (1UL << 3):
  task_set_spec_ssb_disable(task);
  task_set_spec_ssb_force_disable(task);
  task_update_spec_tif(task);
  break;
 default:
  return -34;
 }
 return 0;
}

static int ib_prctl_set(struct task_struct *task, unsigned long ctrl)
{
 switch (ctrl) {
 case (1UL << 1):
  if (spectre_v2_user == SPECTRE_V2_USER_NONE)
   return 0;




  if (spectre_v2_user == SPECTRE_V2_USER_STRICT)
   return -1;
  task_clear_spec_ib_disable(task);
  task_update_spec_tif(task);
  break;
 case (1UL << 2):
 case (1UL << 3):




  if (spectre_v2_user == SPECTRE_V2_USER_NONE)
   return -1;
  if (spectre_v2_user == SPECTRE_V2_USER_STRICT)
   return 0;
  task_set_spec_ib_disable(task);
  if (ctrl == (1UL << 3))
   task_set_spec_ib_force_disable(task);
  task_update_spec_tif(task);
  break;
 default:
  return -34;
 }
 return 0;
}

int arch_prctl_spec_ctrl_set(struct task_struct *task, unsigned long which,
        unsigned long ctrl)
{
 switch (which) {
 case 0:
  return ssb_prctl_set(task, ctrl);
 case 1:
  return ib_prctl_set(task, ctrl);
 default:
  return -19;
 }
}


void arch_seccomp_spec_mitigate(struct task_struct *task)
{
 if (ssb_mode == SPEC_STORE_BYPASS_SECCOMP)
  ssb_prctl_set(task, (1UL << 3));
 if (spectre_v2_user == SPECTRE_V2_USER_SECCOMP)
  ib_prctl_set(task, (1UL << 3));
}


static int ssb_prctl_get(struct task_struct *task)
{
 switch (ssb_mode) {
 case SPEC_STORE_BYPASS_DISABLE:
  return (1UL << 2);
 case SPEC_STORE_BYPASS_SECCOMP:
 case SPEC_STORE_BYPASS_PRCTL:
  if (task_spec_ssb_force_disable(task))
   return (1UL << 0) | (1UL << 3);
  if (task_spec_ssb_disable(task))
   return (1UL << 0) | (1UL << 2);
  return (1UL << 0) | (1UL << 1);
 default:
  if ((__builtin_constant_p((((19*32 + (17))))) && ( ((((((19*32 + (17)))))>>5)==(0) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (17)))))>>5)==(1) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (17)))))>>5)==(2) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(3) && (1UL<<(((((19*32 + (17)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (17)))))>>5)==(4) && (1UL<<(((((19*32 + (17)))))&31) & (0) )) || ((((((19*32 + (17)))))>>5)==(5) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(6) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(7) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(8) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(9) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(10) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(11) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(12) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(13) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(14) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(15) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(16) && (1UL<<(((((19*32 + (17)))))&31) & (0) )) || ((((((19*32 + (17)))))>>5)==(17) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || ((((((19*32 + (17)))))>>5)==(18) && (1UL<<(((((19*32 + (17)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (17)))))) ? constant_test_bit(((((19*32 + (17))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (17))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
   return (1UL << 1);
  return 0;
 }
}

static int ib_prctl_get(struct task_struct *task)
{
 if (!(__builtin_constant_p((((19*32 + (16))))) && ( ((((((19*32 + (16)))))>>5)==(0) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (16)))))>>5)==(1) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (16)))))>>5)==(2) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(3) && (1UL<<(((((19*32 + (16)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (16)))))>>5)==(4) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(5) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(6) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(7) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(8) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(9) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(10) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(11) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(12) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(13) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(14) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(15) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(16) && (1UL<<(((((19*32 + (16)))))&31) & (0) )) || ((((((19*32 + (16)))))>>5)==(17) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || ((((((19*32 + (16)))))>>5)==(18) && (1UL<<(((((19*32 + (16)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (16)))))) ? constant_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (16))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return 0;

 switch (spectre_v2_user) {
 case SPECTRE_V2_USER_NONE:
  return (1UL << 1);
 case SPECTRE_V2_USER_PRCTL:
 case SPECTRE_V2_USER_SECCOMP:
  if (task_spec_ib_force_disable(task))
   return (1UL << 0) | (1UL << 3);
  if (task_spec_ib_disable(task))
   return (1UL << 0) | (1UL << 2);
  return (1UL << 0) | (1UL << 1);
 case SPECTRE_V2_USER_STRICT:
  return (1UL << 2);
 default:
  return 0;
 }
}

int arch_prctl_spec_ctrl_get(struct task_struct *task, unsigned long which)
{
 switch (which) {
 case 0:
  return ssb_prctl_get(task);
 case 1:
  return ib_prctl_get(task);
 default:
  return -19;
 }
}

void x86_spec_ctrl_setup_ap(void)
{
 if ((__builtin_constant_p(( 7*32+16)) && ( (((( 7*32+16))>>5)==(0) && (1UL<<((( 7*32+16))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+16))>>5)==(1) && (1UL<<((( 7*32+16))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+16))>>5)==(2) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(3) && (1UL<<((( 7*32+16))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+16))>>5)==(4) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(5) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(6) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(7) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(8) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(9) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(10) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(11) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(12) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(13) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(14) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(15) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(16) && (1UL<<((( 7*32+16))&31) & (0) )) || (((( 7*32+16))>>5)==(17) && (1UL<<((( 7*32+16))&31) & 0 )) || (((( 7*32+16))>>5)==(18) && (1UL<<((( 7*32+16))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+16))) ? constant_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+16)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  wrmsrl(0x00000048, x86_spec_ctrl_base);

 if (ssb_mode == SPEC_STORE_BYPASS_DISABLE)
  x86_amd_ssb_disable();
}

bool itlb_multihit_kvm_mitigation;
extern typeof(itlb_multihit_kvm_mitigation) itlb_multihit_kvm_mitigation; asm("	.section \"___kcrctab" "_gpl" "+" "itlb_multihit_kvm_mitigation" "\", \"a\"	\n" "	.weak	" "__crc_itlb_multihit_kvm_mitigation" "	\n" "	.long	" "__crc_itlb_multihit_kvm_mitigation" "	\n" "	.previous					\n"); static const char __kstrtab_itlb_multihit_kvm_mitigation[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "itlb_multihit_kvm_mitigation"; static const struct kernel_symbol __ksymtab_itlb_multihit_kvm_mitigation __attribute__((__used__)) __attribute__((section("___ksymtab" "_gpl" "+" "itlb_multihit_kvm_mitigation"), used)) = { (unsigned long)&itlb_multihit_kvm_mitigation, __kstrtab_itlb_multihit_kvm_mitigation };





enum l1tf_mitigations l1tf_mitigation __attribute__((__section__(".data..ro_after_init"))) = L1TF_MITIGATION_FLUSH;



enum vmx_l1d_flush_state l1tf_vmx_mitigation = VMENTER_L1D_FLUSH_AUTO;
extern typeof(l1tf_vmx_mitigation) l1tf_vmx_mitigation; asm("	.section \"___kcrctab" "_gpl" "+" "l1tf_vmx_mitigation" "\", \"a\"	\n" "	.weak	" "__crc_l1tf_vmx_mitigation" "	\n" "	.long	" "__crc_l1tf_vmx_mitigation" "	\n" "	.previous					\n"); static const char __kstrtab_l1tf_vmx_mitigation[] __attribute__((section("__ksymtab_strings"), aligned(1))) = "l1tf_vmx_mitigation"; static const struct kernel_symbol __ksymtab_l1tf_vmx_mitigation __attribute__((__used__)) __attribute__((section("___ksymtab" "_gpl" "+" "l1tf_vmx_mitigation"), used)) = { (unsigned long)&l1tf_vmx_mitigation, __kstrtab_l1tf_vmx_mitigation };
# 1282 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
static void override_cache_bits(struct cpuinfo_x86 *c)
{
 if (c->x86 != 6)
  return;

 switch (c->x86_model) {
 case 0x1E:
 case 0x25:
 case 0x2A:
 case 0x3A:
 case 0x3C:
 case 0x45:
 case 0x46:
 case 0x3D:
 case 0x47:
 case 0x4E:
 case 0x5E:
 case 0x8E:
 case 0x9E:
  if (c->x86_cache_bits < 44)
   c->x86_cache_bits = 44;
  break;
 }
}

static void __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) l1tf_select_mitigation(void)
{
 u64 half_pa;

 if (!(__builtin_constant_p((((19*32 + (18))))) && ( ((((((19*32 + (18)))))>>5)==(0) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (18)))))>>5)==(1) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (18)))))>>5)==(2) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(3) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (18)))))>>5)==(4) && (1UL<<(((((19*32 + (18)))))&31) & (0) )) || ((((((19*32 + (18)))))>>5)==(5) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(6) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(7) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(8) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(9) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(10) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(11) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(12) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(13) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(14) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(15) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(16) && (1UL<<(((((19*32 + (18)))))&31) & (0) )) || ((((((19*32 + (18)))))>>5)==(17) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(18) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (18)))))) ? constant_test_bit(((((19*32 + (18))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (18))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return;

 if (cpu_mitigations_off())
  l1tf_mitigation = L1TF_MITIGATION_OFF;
 else if (cpu_mitigations_auto_nosmt())
  l1tf_mitigation = L1TF_MITIGATION_FLUSH_NOSMT;

 override_cache_bits(&boot_cpu_data);

 switch (l1tf_mitigation) {
 case L1TF_MITIGATION_OFF:
 case L1TF_MITIGATION_FLUSH_NOWARN:
 case L1TF_MITIGATION_FLUSH:
  break;
 case L1TF_MITIGATION_FLUSH_NOSMT:
 case L1TF_MITIGATION_FULL:
  cpu_smt_disable(false);
  break;
 case L1TF_MITIGATION_FULL_FORCE:
  cpu_smt_disable(true);
  break;
 }






 half_pa = (u64)l1tf_pfn_limit() << 12;
 if (l1tf_mitigation != L1TF_MITIGATION_OFF &&
   e820__mapped_any(half_pa, (~0ULL) - half_pa, E820_TYPE_RAM)) {
  printk("\001" "4" "L1TF: " "System has more than MAX_PA/2 memory. L1TF mitigation not effective.\n");
  printk("\001" "6" "L1TF: " "You may make it effective by booting the kernel with mem=%llu parameter.\n", half_pa);

  printk("\001" "6" "L1TF: " "However, doing so will make a part of your RAM unusable.\n");
  printk("\001" "6" "L1TF: " "Reading https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/l1tf.html might help you decide.\n");
  return;
 }

 do { set_bit(( 7*32+29), (unsigned long *)((&boot_cpu_data)->x86_capability)); set_bit(( 7*32+29), (unsigned long *)cpu_caps_set); } while (0);
}

static int __attribute__ ((__section__(".init.text"))) __attribute__((no_sanitize("cfi"))) l1tf_cmdline(char *str)
{
 if (!(__builtin_constant_p((((19*32 + (18))))) && ( ((((((19*32 + (18)))))>>5)==(0) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((((19*32 + (18)))))>>5)==(1) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((((19*32 + (18)))))>>5)==(2) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(3) && (1UL<<(((((19*32 + (18)))))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((((19*32 + (18)))))>>5)==(4) && (1UL<<(((((19*32 + (18)))))&31) & (0) )) || ((((((19*32 + (18)))))>>5)==(5) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(6) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(7) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(8) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(9) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(10) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(11) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(12) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(13) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(14) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(15) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(16) && (1UL<<(((((19*32 + (18)))))&31) & (0) )) || ((((((19*32 + (18)))))>>5)==(17) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || ((((((19*32 + (18)))))>>5)==(18) && (1UL<<(((((19*32 + (18)))))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((((19*32 + (18)))))) ? constant_test_bit(((((19*32 + (18))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((((19*32 + (18))))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return 0;

 if (!str)
  return -22;

 if (!strcmp(str, "off"))
  l1tf_mitigation = L1TF_MITIGATION_OFF;
 else if (!strcmp(str, "flush,nowarn"))
  l1tf_mitigation = L1TF_MITIGATION_FLUSH_NOWARN;
 else if (!strcmp(str, "flush"))
  l1tf_mitigation = L1TF_MITIGATION_FLUSH;
 else if (!strcmp(str, "flush,nosmt"))
  l1tf_mitigation = L1TF_MITIGATION_FLUSH_NOSMT;
 else if (!strcmp(str, "full"))
  l1tf_mitigation = L1TF_MITIGATION_FULL;
 else if (!strcmp(str, "full,force"))
  l1tf_mitigation = L1TF_MITIGATION_FULL_FORCE;

 return 0;
}
static const char __setup_str_l1tf_cmdline[] __attribute__ ((__section__(".init.rodata"))) __attribute__((aligned(1))) = "l1tf"; static struct obs_kernel_param __setup_l1tf_cmdline __attribute__((__used__)) __attribute__ ((__section__(".init.setup"))) __attribute__((aligned((sizeof(long))))) = { __setup_str_l1tf_cmdline, l1tf_cmdline, 1 };
# 1421 "/tmp/tmp.lYcKbI2xGl/common-4.14/arch/x86/kernel/cpu/bugs.c"
static ssize_t l1tf_show_state(char *buf)
{
 return sprintf(buf, "%s\n", "Mitigation: PTE Inversion");
}

static ssize_t itlb_multihit_show_state(char *buf)
{
 return sprintf(buf, "Processor vulnerable\n");
}


static ssize_t mds_show_state(char *buf)
{
 if ((__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+31))) ? constant_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  return sprintf(buf, "%s; SMT Host state unknown\n",
          mds_strings[mds_mitigation]);
 }

 if ((__builtin_constant_p((19*32 + (20))) && ( ((((19*32 + (20)))>>5)==(0) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || ((((19*32 + (20)))>>5)==(1) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || ((((19*32 + (20)))>>5)==(2) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(3) && (1UL<<(((19*32 + (20)))&31) & ((1<<(( 3*32+20) & 31))) )) || ((((19*32 + (20)))>>5)==(4) && (1UL<<(((19*32 + (20)))&31) & (0) )) || ((((19*32 + (20)))>>5)==(5) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(6) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(7) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(8) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(9) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(10) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(11) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(12) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(13) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(14) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(15) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(16) && (1UL<<(((19*32 + (20)))&31) & (0) )) || ((((19*32 + (20)))>>5)==(17) && (1UL<<(((19*32 + (20)))&31) & 0 )) || ((((19*32 + (20)))>>5)==(18) && (1UL<<(((19*32 + (20)))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p(((19*32 + (20)))) ? constant_test_bit(((19*32 + (20))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((19*32 + (20))), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  return sprintf(buf, "%s; SMT %s\n", mds_strings[mds_mitigation],
          (mds_mitigation == MDS_MITIGATION_OFF ? "vulnerable" :
           sched_smt_active() ? "mitigated" : "disabled"));
 }

 return sprintf(buf, "%s; SMT %s\n", mds_strings[mds_mitigation],
         sched_smt_active() ? "vulnerable" : "disabled");
}

static ssize_t tsx_async_abort_show_state(char *buf)
{
 if ((taa_mitigation == TAA_MITIGATION_TSX_DISABLED) ||
     (taa_mitigation == TAA_MITIGATION_OFF))
  return sprintf(buf, "%s\n", taa_strings[taa_mitigation]);

 if ((__builtin_constant_p(( 4*32+31)) && ( (((( 4*32+31))>>5)==(0) && (1UL<<((( 4*32+31))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 4*32+31))>>5)==(1) && (1UL<<((( 4*32+31))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 4*32+31))>>5)==(2) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(3) && (1UL<<((( 4*32+31))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 4*32+31))>>5)==(4) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(5) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(6) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(7) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(8) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(9) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(10) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(11) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(12) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(13) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(14) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(15) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(16) && (1UL<<((( 4*32+31))&31) & (0) )) || (((( 4*32+31))>>5)==(17) && (1UL<<((( 4*32+31))&31) & 0 )) || (((( 4*32+31))>>5)==(18) && (1UL<<((( 4*32+31))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 4*32+31))) ? constant_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 4*32+31)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  return sprintf(buf, "%s; SMT Host state unknown\n",
          taa_strings[taa_mitigation]);
 }

 return sprintf(buf, "%s; SMT %s\n", taa_strings[taa_mitigation],
         sched_smt_active() ? "vulnerable" : "disabled");
}

static char *stibp_state(void)
{
 if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)
  return "";

 switch (spectre_v2_user) {
 case SPECTRE_V2_USER_NONE:
  return ", STIBP: disabled";
 case SPECTRE_V2_USER_STRICT:
  return ", STIBP: forced";
 case SPECTRE_V2_USER_PRCTL:
 case SPECTRE_V2_USER_SECCOMP:
  if (({ if (!__builtin_types_compatible_p(typeof(*&switch_to_cond_stibp), struct static_key) && !__builtin_types_compatible_p(typeof(*&switch_to_cond_stibp), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&switch_to_cond_stibp), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&switch_to_cond_stibp) > 0; }))
   return ", STIBP: conditional";
 }
 return "";
}

static char *ibpb_state(void)
{
 if ((__builtin_constant_p(( 7*32+26)) && ( (((( 7*32+26))>>5)==(0) && (1UL<<((( 7*32+26))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+26))>>5)==(1) && (1UL<<((( 7*32+26))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+26))>>5)==(2) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(3) && (1UL<<((( 7*32+26))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+26))>>5)==(4) && (1UL<<((( 7*32+26))&31) & (0) )) || (((( 7*32+26))>>5)==(5) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(6) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(7) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(8) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(9) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(10) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(11) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(12) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(13) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(14) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(15) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(16) && (1UL<<((( 7*32+26))&31) & (0) )) || (((( 7*32+26))>>5)==(17) && (1UL<<((( 7*32+26))&31) & 0 )) || (((( 7*32+26))>>5)==(18) && (1UL<<((( 7*32+26))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+26))) ? constant_test_bit((( 7*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))))) {
  if (({ if (!__builtin_types_compatible_p(typeof(*&switch_mm_always_ibpb), struct static_key) && !__builtin_types_compatible_p(typeof(*&switch_mm_always_ibpb), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&switch_mm_always_ibpb), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&switch_mm_always_ibpb) > 0; }))
   return ", IBPB: always-on";
  if (({ if (!__builtin_types_compatible_p(typeof(*&switch_mm_cond_ibpb), struct static_key) && !__builtin_types_compatible_p(typeof(*&switch_mm_cond_ibpb), struct static_key_true) && !__builtin_types_compatible_p(typeof(*&switch_mm_cond_ibpb), struct static_key_false)) ____wrong_branch_error(); static_key_count((struct static_key *)&switch_mm_cond_ibpb) > 0; }))
   return ", IBPB: conditional";
  return ", IBPB: disabled";
 }
 return "";
}

static ssize_t cpu_show_common(struct device *dev, struct device_attribute *attr,
          char *buf, unsigned int bug)
{
 if (!(__builtin_constant_p(((bug))) && ( (((((bug)))>>5)==(0) && (1UL<<((((bug)))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((((bug)))>>5)==(1) && (1UL<<((((bug)))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((((bug)))>>5)==(2) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(3) && (1UL<<((((bug)))&31) & ((1<<(( 3*32+20) & 31))) )) || (((((bug)))>>5)==(4) && (1UL<<((((bug)))&31) & (0) )) || (((((bug)))>>5)==(5) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(6) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(7) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(8) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(9) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(10) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(11) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(12) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(13) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(14) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(15) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(16) && (1UL<<((((bug)))&31) & (0) )) || (((((bug)))>>5)==(17) && (1UL<<((((bug)))&31) & 0 )) || (((((bug)))>>5)==(18) && (1UL<<((((bug)))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((((bug)))) ? constant_test_bit((((bug))), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((((bug))), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return sprintf(buf, "Not affected\n");

 switch (bug) {
 case (19*32 + (14)):
  if ((__builtin_constant_p(( 7*32+11)) && ( (((( 7*32+11))>>5)==(0) && (1UL<<((( 7*32+11))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+11))>>5)==(1) && (1UL<<((( 7*32+11))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+11))>>5)==(2) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(3) && (1UL<<((( 7*32+11))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+11))>>5)==(4) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(5) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(6) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(7) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(8) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(9) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(10) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(11) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(12) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(13) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(14) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(15) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(16) && (1UL<<((( 7*32+11))&31) & (0) )) || (((( 7*32+11))>>5)==(17) && (1UL<<((( 7*32+11))&31) & 0 )) || (((( 7*32+11))>>5)==(18) && (1UL<<((( 7*32+11))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+11))) ? constant_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+11)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
   return sprintf(buf, "Mitigation: PTI\n");

  break;

 case (19*32 + (15)):
  return sprintf(buf, "%s\n", spectre_v1_strings[spectre_v1_mitigation]);

 case (19*32 + (16)):
  return sprintf(buf, "%s%s%s%s%s%s\n", spectre_v2_strings[spectre_v2_enabled],
          ibpb_state(),
          (__builtin_constant_p(( 7*32+22)) && ( (((( 7*32+22))>>5)==(0) && (1UL<<((( 7*32+22))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+22))>>5)==(1) && (1UL<<((( 7*32+22))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+22))>>5)==(2) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(3) && (1UL<<((( 7*32+22))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+22))>>5)==(4) && (1UL<<((( 7*32+22))&31) & (0) )) || (((( 7*32+22))>>5)==(5) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(6) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(7) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(8) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(9) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(10) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(11) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(12) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(13) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(14) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(15) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(16) && (1UL<<((( 7*32+22))&31) & (0) )) || (((( 7*32+22))>>5)==(17) && (1UL<<((( 7*32+22))&31) & 0 )) || (((( 7*32+22))>>5)==(18) && (1UL<<((( 7*32+22))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+22))) ? constant_test_bit((( 7*32+22)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+22)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) ? ", IBRS_FW" : "",
          stibp_state(),
          (__builtin_constant_p(( 7*32+19)) && ( (((( 7*32+19))>>5)==(0) && (1UL<<((( 7*32+19))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+19))>>5)==(1) && (1UL<<((( 7*32+19))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+19))>>5)==(2) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(3) && (1UL<<((( 7*32+19))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+19))>>5)==(4) && (1UL<<((( 7*32+19))&31) & (0) )) || (((( 7*32+19))>>5)==(5) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(6) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(7) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(8) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(9) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(10) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(11) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(12) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(13) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(14) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(15) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(16) && (1UL<<((( 7*32+19))&31) & (0) )) || (((( 7*32+19))>>5)==(17) && (1UL<<((( 7*32+19))&31) & 0 )) || (((( 7*32+19))>>5)==(18) && (1UL<<((( 7*32+19))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+19))) ? constant_test_bit((( 7*32+19)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+19)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) ? ", RSB filling" : "",
          spectre_v2_module_string());

 case (19*32 + (17)):
  return sprintf(buf, "%s\n", ssb_strings[ssb_mode]);

 case (19*32 + (18)):
  if ((__builtin_constant_p(( 7*32+29)) && ( (((( 7*32+29))>>5)==(0) && (1UL<<((( 7*32+29))&31) & ((1<<(( 0*32+ 0) & 31))|0|(1<<(( 0*32+ 5) & 31))|(1<<(( 0*32+ 6) & 31))| (1<<(( 0*32+ 8) & 31))|0|(1<<(( 0*32+24) & 31))|(1<<(( 0*32+15) & 31))| (1<<(( 0*32+25) & 31))|(1<<(( 0*32+26) & 31))) )) || (((( 7*32+29))>>5)==(1) && (1UL<<((( 7*32+29))&31) & ((1<<(( 1*32+29) & 31))|0) )) || (((( 7*32+29))>>5)==(2) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(3) && (1UL<<((( 7*32+29))&31) & ((1<<(( 3*32+20) & 31))) )) || (((( 7*32+29))>>5)==(4) && (1UL<<((( 7*32+29))&31) & (0) )) || (((( 7*32+29))>>5)==(5) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(6) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(7) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(8) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(9) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(10) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(11) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(12) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(13) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(14) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(15) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(16) && (1UL<<((( 7*32+29))&31) & (0) )) || (((( 7*32+29))>>5)==(17) && (1UL<<((( 7*32+29))&31) & 0 )) || (((( 7*32+29))>>5)==(18) && (1UL<<((( 7*32+29))&31) & 0 )) || (sizeof(struct { int:(-!!(19 != 19)); })) || (sizeof(struct { int:(-!!(19 != 19)); }))) ? 1 : (__builtin_constant_p((( 7*32+29))) ? constant_test_bit((( 7*32+29)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit((( 7*32+29)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
   return l1tf_show_state(buf);
  break;

 case (19*32 + (19)):
  return mds_show_state(buf);

 case (19*32 + (22)):
  return tsx_async_abort_show_state(buf);

 case (19*32 + (23)):
  return itlb_multihit_show_state(buf);

 default:
  break;
 }

 return sprintf(buf, "Vulnerable\n");
}

ssize_t cpu_show_meltdown(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (14)));
}

ssize_t cpu_show_spectre_v1(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (15)));
}

ssize_t cpu_show_spectre_v2(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (16)));
}

ssize_t cpu_show_spec_store_bypass(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (17)));
}

ssize_t cpu_show_l1tf(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (18)));
}

ssize_t cpu_show_mds(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (19)));
}

ssize_t cpu_show_tsx_async_abort(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (22)));
}

ssize_t cpu_show_itlb_multihit(struct device *dev, struct device_attribute *attr, char *buf)
{
 return cpu_show_common(dev, attr, buf, (19*32 + (23)));
}
